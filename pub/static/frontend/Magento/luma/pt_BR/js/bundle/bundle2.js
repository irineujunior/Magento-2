require.config({"config": {
        "jsbuild":{"jquery/ui-modules/menu.js":"/*!\r\n * jQuery UI Menu - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/menu/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/core',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/position'\r\n], function ($, undefined) {\r\n\r\n    $.widget(\"ui.menu\", {\r\n        version: \"1.10.4\",\r\n        defaultElement: \"<ul>\",\r\n        delay: 300,\r\n        options: {\r\n            icons: {\r\n                submenu: \"ui-icon-carat-1-e\"\r\n            },\r\n            menus: \"ul\",\r\n            position: {\r\n                my: \"left top\",\r\n                at: \"right top\"\r\n            },\r\n            role: \"menu\",\r\n\r\n            // callbacks\r\n            blur: null,\r\n            focus: null,\r\n            select: null\r\n        },\r\n\r\n        _create: function () {\r\n            this.activeMenu = this.element;\r\n            // flag used to prevent firing of the click handler\r\n            // as the event bubbles up through nested menus\r\n            this.mouseHandled = false;\r\n            this.element\r\n                .uniqueId()\r\n                .addClass(\"ui-menu ui-widget ui-widget-content ui-corner-all\")\r\n                .toggleClass(\"ui-menu-icons\", !!this.element.find(\".ui-icon\").length)\r\n                .attr({\r\n                    role: this.options.role,\r\n                    tabIndex: 0\r\n                })\r\n                // need to catch all clicks on disabled menu\r\n                // not possible through _on\r\n                .bind(\"click\" + this.eventNamespace, $.proxy(function (event) {\r\n                    if (this.options.disabled) {\r\n                        event.preventDefault();\r\n                    }\r\n                }, this));\r\n\r\n            if (this.options.disabled) {\r\n                this.element\r\n                    .addClass(\"ui-state-disabled\")\r\n                    .attr(\"aria-disabled\", \"true\");\r\n            }\r\n\r\n            this._on({\r\n                // Prevent focus from sticking to links inside menu after clicking\r\n                // them (focus should always stay on UL during navigation).\r\n                \"mousedown .ui-menu-item > a\": function (event) {\r\n                    event.preventDefault();\r\n                },\r\n                \"click .ui-state-disabled > a\": function (event) {\r\n                    event.preventDefault();\r\n                },\r\n                \"click .ui-menu-item:has(a)\": function (event) {\r\n                    var target = $(event.target).closest(\".ui-menu-item\");\r\n                    if (!this.mouseHandled && target.not(\".ui-state-disabled\").length) {\r\n                        this.select(event);\r\n\r\n                        // Only set the mouseHandled flag if the event will bubble, see #9469.\r\n                        if (!event.isPropagationStopped()) {\r\n                            this.mouseHandled = true;\r\n                        }\r\n\r\n                        // Open submenu on click\r\n                        if (target.has(\".ui-menu\").length) {\r\n                            this.expand(event);\r\n                        } else if (!this.element.is(\":focus\") && $(this.document[0].activeElement).closest(\".ui-menu\").length) {\r\n\r\n                            // Redirect focus to the menu\r\n                            this.element.trigger(\"focus\", [true]);\r\n\r\n                            // If the active item is on the top level, let it stay active.\r\n                            // Otherwise, blur the active item since it is no longer visible.\r\n                            if (this.active && this.active.parents(\".ui-menu\").length === 1) {\r\n                                clearTimeout(this.timer);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"mouseenter .ui-menu-item\": function (event) {\r\n                    var target = $(event.currentTarget);\r\n                    // Remove ui-state-active class from siblings of the newly focused menu item\r\n                    // to avoid a jump caused by adjacent elements both having a class with a border\r\n                    target.siblings().children(\".ui-state-active\").removeClass(\"ui-state-active\");\r\n                    this.focus(event, target);\r\n                },\r\n                mouseleave: \"collapseAll\",\r\n                \"mouseleave .ui-menu\": \"collapseAll\",\r\n                focus: function (event, keepActiveItem) {\r\n                    // If there's already an active item, keep it active\r\n                    // If not, activate the first item\r\n                    var item = this.active || this.element.children(\".ui-menu-item\").eq(0);\r\n\r\n                    if (!keepActiveItem) {\r\n                        this.focus(event, item);\r\n                    }\r\n                },\r\n                blur: function (event) {\r\n                    this._delay(function () {\r\n                        if (!$.contains(this.element[0], this.document[0].activeElement)) {\r\n                            this.collapseAll(event);\r\n                        }\r\n                    });\r\n                },\r\n                keydown: \"_keydown\"\r\n            });\r\n\r\n            this.refresh();\r\n\r\n            // Clicks outside of a menu collapse any open menus\r\n            this._on(this.document, {\r\n                click: function (event) {\r\n                    if (!$(event.target).closest(\".ui-menu\").length) {\r\n                        this.collapseAll(event);\r\n                    }\r\n\r\n                    // Reset the mouseHandled flag\r\n                    this.mouseHandled = false;\r\n                }\r\n            });\r\n        },\r\n\r\n        _destroy: function () {\r\n            // Destroy (sub)menus\r\n            this.element\r\n                .removeAttr(\"aria-activedescendant\")\r\n                .find(\".ui-menu\").addBack()\r\n                .removeClass(\"ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons\")\r\n                .removeAttr(\"role\")\r\n                .removeAttr(\"tabIndex\")\r\n                .removeAttr(\"aria-labelledby\")\r\n                .removeAttr(\"aria-expanded\")\r\n                .removeAttr(\"aria-hidden\")\r\n                .removeAttr(\"aria-disabled\")\r\n                .removeUniqueId()\r\n                .show();\r\n\r\n            // Destroy menu items\r\n            this.element.find(\".ui-menu-item\")\r\n                .removeClass(\"ui-menu-item\")\r\n                .removeAttr(\"role\")\r\n                .removeAttr(\"aria-disabled\")\r\n                .children(\"a\")\r\n                .removeUniqueId()\r\n                .removeClass(\"ui-corner-all ui-state-hover\")\r\n                .removeAttr(\"tabIndex\")\r\n                .removeAttr(\"role\")\r\n                .removeAttr(\"aria-haspopup\")\r\n                .children().each(function () {\r\n                var elem = $(this);\r\n                if (elem.data(\"ui-menu-submenu-carat\")) {\r\n                    elem.remove();\r\n                }\r\n            });\r\n\r\n            // Destroy menu dividers\r\n            this.element.find(\".ui-menu-divider\").removeClass(\"ui-menu-divider ui-widget-content\");\r\n        },\r\n\r\n        _keydown: function (event) {\r\n            var match, prev, character, skip, regex,\r\n                preventDefault = true;\r\n\r\n            function escape(value) {\r\n                return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\r\n            }\r\n\r\n            switch (event.keyCode) {\r\n                case $.ui.keyCode.PAGE_UP:\r\n                    this.previousPage(event);\r\n                    break;\r\n                case $.ui.keyCode.PAGE_DOWN:\r\n                    this.nextPage(event);\r\n                    break;\r\n                case $.ui.keyCode.HOME:\r\n                    this._move(\"first\", \"first\", event);\r\n                    break;\r\n                case $.ui.keyCode.END:\r\n                    this._move(\"last\", \"last\", event);\r\n                    break;\r\n                case $.ui.keyCode.UP:\r\n                    this.previous(event);\r\n                    break;\r\n                case $.ui.keyCode.DOWN:\r\n                    this.next(event);\r\n                    break;\r\n                case $.ui.keyCode.LEFT:\r\n                    this.collapse(event);\r\n                    break;\r\n                case $.ui.keyCode.RIGHT:\r\n                    if (this.active && !this.active.is(\".ui-state-disabled\")) {\r\n                        this.expand(event);\r\n                    }\r\n                    break;\r\n                case $.ui.keyCode.ENTER:\r\n                case $.ui.keyCode.SPACE:\r\n                    this._activate(event);\r\n                    break;\r\n                case $.ui.keyCode.ESCAPE:\r\n                    this.collapse(event);\r\n                    break;\r\n                default:\r\n                    preventDefault = false;\r\n                    prev = this.previousFilter || \"\";\r\n                    character = String.fromCharCode(event.keyCode);\r\n                    skip = false;\r\n\r\n                    clearTimeout(this.filterTimer);\r\n\r\n                    if (character === prev) {\r\n                        skip = true;\r\n                    } else {\r\n                        character = prev + character;\r\n                    }\r\n\r\n                    regex = new RegExp(\"^\" + escape(character), \"i\");\r\n                    match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\r\n                        return regex.test($(this).children(\"a\").text());\r\n                    });\r\n                    match = skip && match.index(this.active.next()) !== -1 ?\r\n                        this.active.nextAll(\".ui-menu-item\") :\r\n                        match;\r\n\r\n                    // If no matches on the current filter, reset to the last character pressed\r\n                    // to move down the menu to the first item that starts with that character\r\n                    if (!match.length) {\r\n                        character = String.fromCharCode(event.keyCode);\r\n                        regex = new RegExp(\"^\" + escape(character), \"i\");\r\n                        match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\r\n                            return regex.test($(this).children(\"a\").text());\r\n                        });\r\n                    }\r\n\r\n                    if (match.length) {\r\n                        this.focus(event, match);\r\n                        if (match.length > 1) {\r\n                            this.previousFilter = character;\r\n                            this.filterTimer = this._delay(function () {\r\n                                delete this.previousFilter;\r\n                            }, 1000);\r\n                        } else {\r\n                            delete this.previousFilter;\r\n                        }\r\n                    } else {\r\n                        delete this.previousFilter;\r\n                    }\r\n            }\r\n\r\n            if (preventDefault) {\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        _activate: function (event) {\r\n            if (!this.active.is(\".ui-state-disabled\")) {\r\n                if (this.active.children(\"a[aria-haspopup='true']\").length) {\r\n                    this.expand(event);\r\n                } else {\r\n                    this.select(event);\r\n                }\r\n            }\r\n        },\r\n\r\n        refresh: function () {\r\n            var menus,\r\n                icon = this.options.icons.submenu,\r\n                submenus = this.element.find(this.options.menus);\r\n\r\n            this.element.toggleClass(\"ui-menu-icons\", !!this.element.find(\".ui-icon\").length);\r\n\r\n            // Initialize nested menus\r\n            submenus.filter(\":not(.ui-menu)\")\r\n                .addClass(\"ui-menu ui-widget ui-widget-content ui-corner-all\")\r\n                .hide()\r\n                .attr({\r\n                    role: this.options.role,\r\n                    \"aria-hidden\": \"true\",\r\n                    \"aria-expanded\": \"false\"\r\n                })\r\n                .each(function () {\r\n                    var menu = $(this),\r\n                        item = menu.prev(\"a\"),\r\n                        submenuCarat = $(\"<span>\")\r\n                            .addClass(\"ui-menu-icon ui-icon \" + icon)\r\n                            .data(\"ui-menu-submenu-carat\", true);\r\n\r\n                    item\r\n                        .attr(\"aria-haspopup\", \"true\")\r\n                        .prepend(submenuCarat);\r\n                    menu.attr(\"aria-labelledby\", item.attr(\"id\"));\r\n                });\r\n\r\n            menus = submenus.add(this.element);\r\n\r\n            // Don't refresh list items that are already adapted\r\n            menus.children(\":not(.ui-menu-item):has(a)\")\r\n                .addClass(\"ui-menu-item\")\r\n                .attr(\"role\", \"presentation\")\r\n                .children(\"a\")\r\n                .uniqueId()\r\n                .addClass(\"ui-corner-all\")\r\n                .attr({\r\n                    tabIndex: -1,\r\n                    role: this._itemRole()\r\n                });\r\n\r\n            // Initialize unlinked menu-items containing spaces and/or dashes only as dividers\r\n            menus.children(\":not(.ui-menu-item)\").each(function () {\r\n                var item = $(this);\r\n                // hyphen, em dash, en dash\r\n                if (!/[^\\-\\u2014\\u2013\\s]/.test(item.text())) {\r\n                    item.addClass(\"ui-widget-content ui-menu-divider\");\r\n                }\r\n            });\r\n\r\n            // Add aria-disabled attribute to any disabled menu item\r\n            menus.children(\".ui-state-disabled\").attr(\"aria-disabled\", \"true\");\r\n\r\n            // If the active item has been removed, blur the menu\r\n            if (this.active && !$.contains(this.element[0], this.active[0])) {\r\n                this.blur();\r\n            }\r\n        },\r\n\r\n        _itemRole: function () {\r\n            return {\r\n                menu: \"menuitem\",\r\n                listbox: \"option\"\r\n            }[this.options.role];\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            if (key === \"icons\") {\r\n                this.element.find(\".ui-menu-icon\")\r\n                    .removeClass(this.options.icons.submenu)\r\n                    .addClass(value.submenu);\r\n            }\r\n            this._super(key, value);\r\n        },\r\n\r\n        focus: function (event, item) {\r\n            var nested, focused;\r\n            this.blur(event, event && event.type === \"focus\");\r\n\r\n            this._scrollIntoView(item);\r\n\r\n            this.active = item.first();\r\n            focused = this.active.children(\"a\").addClass(\"ui-state-focus\");\r\n            // Only update aria-activedescendant if there's a role\r\n            // otherwise we assume focus is managed elsewhere\r\n            if (this.options.role) {\r\n                this.element.attr(\"aria-activedescendant\", focused.attr(\"id\"));\r\n            }\r\n\r\n            // Highlight active parent menu item, if any\r\n            this.active\r\n                .parent()\r\n                .closest(\".ui-menu-item\")\r\n                .children(\"a:first\")\r\n                .addClass(\"ui-state-active\");\r\n\r\n            if (event && event.type === \"keydown\") {\r\n                this._close();\r\n            } else {\r\n                this.timer = this._delay(function () {\r\n                    this._close();\r\n                }, this.delay);\r\n            }\r\n\r\n            nested = item.children(\".ui-menu\");\r\n            if (nested.length && event && (/^mouse/.test(event.type))) {\r\n                this._startOpening(nested);\r\n            }\r\n            this.activeMenu = item.parent();\r\n\r\n            this._trigger(\"focus\", event, {item: item});\r\n        },\r\n\r\n        _scrollIntoView: function (item) {\r\n            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\r\n            if (this._hasScroll()) {\r\n                borderTop = parseFloat($.css(this.activeMenu[0], \"borderTopWidth\")) || 0;\r\n                paddingTop = parseFloat($.css(this.activeMenu[0], \"paddingTop\")) || 0;\r\n                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\r\n                scroll = this.activeMenu.scrollTop();\r\n                elementHeight = this.activeMenu.height();\r\n                itemHeight = item.height();\r\n\r\n                if (offset < 0) {\r\n                    this.activeMenu.scrollTop(scroll + offset);\r\n                } else if (offset + itemHeight > elementHeight) {\r\n                    this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);\r\n                }\r\n            }\r\n        },\r\n\r\n        blur: function (event, fromFocus) {\r\n            if (!fromFocus) {\r\n                clearTimeout(this.timer);\r\n            }\r\n\r\n            if (!this.active) {\r\n                return;\r\n            }\r\n\r\n            this.active.children(\"a\").removeClass(\"ui-state-focus\");\r\n            this.active = null;\r\n\r\n            this._trigger(\"blur\", event, {item: this.active});\r\n        },\r\n\r\n        _startOpening: function (submenu) {\r\n            clearTimeout(this.timer);\r\n\r\n            // Don't open if already open fixes a Firefox bug that caused a .5 pixel\r\n            // shift in the submenu position when mousing over the carat icon\r\n            if (submenu.attr(\"aria-hidden\") !== \"true\") {\r\n                return;\r\n            }\r\n\r\n            this.timer = this._delay(function () {\r\n                this._close();\r\n                this._open(submenu);\r\n            }, this.delay);\r\n        },\r\n\r\n        _open: function (submenu) {\r\n            var position = $.extend({\r\n                of: this.active\r\n            }, this.options.position);\r\n\r\n            clearTimeout(this.timer);\r\n            this.element.find(\".ui-menu\").not(submenu.parents(\".ui-menu\"))\r\n                .hide()\r\n                .attr(\"aria-hidden\", \"true\");\r\n\r\n            submenu\r\n                .show()\r\n                .removeAttr(\"aria-hidden\")\r\n                .attr(\"aria-expanded\", \"true\")\r\n                .position(position);\r\n        },\r\n\r\n        collapseAll: function (event, all) {\r\n            clearTimeout(this.timer);\r\n            this.timer = this._delay(function () {\r\n                // If we were passed an event, look for the submenu that contains the event\r\n                var currentMenu = all ? this.element :\r\n                    $(event && event.target).closest(this.element.find(\".ui-menu\"));\r\n\r\n                // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway\r\n                if (!currentMenu.length) {\r\n                    currentMenu = this.element;\r\n                }\r\n\r\n                this._close(currentMenu);\r\n\r\n                this.blur(event);\r\n                this.activeMenu = currentMenu;\r\n            }, this.delay);\r\n        },\r\n\r\n        // With no arguments, closes the currently active menu - if nothing is active\r\n        // it closes all menus.  If passed an argument, it will search for menus BELOW\r\n        _close: function (startMenu) {\r\n            if (!startMenu) {\r\n                startMenu = this.active ? this.active.parent() : this.element;\r\n            }\r\n\r\n            startMenu\r\n                .find(\".ui-menu\")\r\n                .hide()\r\n                .attr(\"aria-hidden\", \"true\")\r\n                .attr(\"aria-expanded\", \"false\")\r\n                .end()\r\n                .find(\"a.ui-state-active\")\r\n                .removeClass(\"ui-state-active\");\r\n        },\r\n\r\n        collapse: function (event) {\r\n            var newItem = this.active &&\r\n                this.active.parent().closest(\".ui-menu-item\", this.element);\r\n            if (newItem && newItem.length) {\r\n                this._close();\r\n                this.focus(event, newItem);\r\n            }\r\n        },\r\n\r\n        expand: function (event) {\r\n            var newItem = this.active &&\r\n                this.active\r\n                    .children(\".ui-menu \")\r\n                    .children(\".ui-menu-item\")\r\n                    .first();\r\n\r\n            if (newItem && newItem.length) {\r\n                this._open(newItem.parent());\r\n\r\n                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\r\n                this._delay(function () {\r\n                    this.focus(event, newItem);\r\n                });\r\n            }\r\n        },\r\n\r\n        next: function (event) {\r\n            this._move(\"next\", \"first\", event);\r\n        },\r\n\r\n        previous: function (event) {\r\n            this._move(\"prev\", \"last\", event);\r\n        },\r\n\r\n        isFirstItem: function () {\r\n            return this.active && !this.active.prevAll(\".ui-menu-item\").length;\r\n        },\r\n\r\n        isLastItem: function () {\r\n            return this.active && !this.active.nextAll(\".ui-menu-item\").length;\r\n        },\r\n\r\n        _move: function (direction, filter, event) {\r\n            var next;\r\n            if (this.active) {\r\n                if (direction === \"first\" || direction === \"last\") {\r\n                    next = this.active\r\n                        [direction === \"first\" ? \"prevAll\" : \"nextAll\"](\".ui-menu-item\")\r\n                        .eq(-1);\r\n                } else {\r\n                    next = this.active\r\n                        [direction + \"All\"](\".ui-menu-item\")\r\n                        .eq(0);\r\n                }\r\n            }\r\n            if (!next || !next.length || !this.active) {\r\n                next = this.activeMenu.children(\".ui-menu-item\")[filter]();\r\n            }\r\n\r\n            this.focus(event, next);\r\n        },\r\n\r\n        nextPage: function (event) {\r\n            var item, base, height;\r\n\r\n            if (!this.active) {\r\n                this.next(event);\r\n                return;\r\n            }\r\n            if (this.isLastItem()) {\r\n                return;\r\n            }\r\n            if (this._hasScroll()) {\r\n                base = this.active.offset().top;\r\n                height = this.element.height();\r\n                this.active.nextAll(\".ui-menu-item\").each(function () {\r\n                    item = $(this);\r\n                    return item.offset().top - base - height < 0;\r\n                });\r\n\r\n                this.focus(event, item);\r\n            } else {\r\n                this.focus(event, this.activeMenu.children(\".ui-menu-item\")\r\n                    [!this.active ? \"first\" : \"last\"]());\r\n            }\r\n        },\r\n\r\n        previousPage: function (event) {\r\n            var item, base, height;\r\n            if (!this.active) {\r\n                this.next(event);\r\n                return;\r\n            }\r\n            if (this.isFirstItem()) {\r\n                return;\r\n            }\r\n            if (this._hasScroll()) {\r\n                base = this.active.offset().top;\r\n                height = this.element.height();\r\n                this.active.prevAll(\".ui-menu-item\").each(function () {\r\n                    item = $(this);\r\n                    return item.offset().top - base + height > 0;\r\n                });\r\n\r\n                this.focus(event, item);\r\n            } else {\r\n                this.focus(event, this.activeMenu.children(\".ui-menu-item\").first());\r\n            }\r\n        },\r\n\r\n        _hasScroll: function () {\r\n            return this.element.outerHeight() < this.element.prop(\"scrollHeight\");\r\n        },\r\n\r\n        select: function (event) {\r\n            // TODO: It should never be possible to not have an active item at this\r\n            // point, but the tests don't trigger mouseenter before click.\r\n            this.active = this.active || $(event.target).closest(\".ui-menu-item\");\r\n            var ui = {item: this.active};\r\n            if (!this.active.has(\".ui-menu\").length) {\r\n                this.collapseAll(event, true);\r\n            }\r\n            this._trigger(\"select\", event, ui);\r\n        }\r\n    });\r\n\r\n});\r\n","jquery/ui-modules/mouse.js":"/*!\r\n * jQuery UI Mouse - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/mouse/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($, undefined) {\r\n\r\n    var mouseHandled = false;\r\n    $(document).mouseup(function () {\r\n        mouseHandled = false;\r\n    });\r\n\r\n    $.widget(\"ui.mouse\", {\r\n        version: \"1.10.4\",\r\n        options: {\r\n            cancel: \"input,textarea,button,select,option\",\r\n            distance: 1,\r\n            delay: 0\r\n        },\r\n        _mouseInit: function () {\r\n            var that = this;\r\n\r\n            this.element\r\n                .bind(\"mousedown.\" + this.widgetName, function (event) {\r\n                    return that._mouseDown(event);\r\n                })\r\n                .bind(\"click.\" + this.widgetName, function (event) {\r\n                    if (true === $.data(event.target, that.widgetName + \".preventClickEvent\")) {\r\n                        $.removeData(event.target, that.widgetName + \".preventClickEvent\");\r\n                        event.stopImmediatePropagation();\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n            this.started = false;\r\n        },\r\n\r\n        // TODO: make sure destroying one instance of mouse doesn't mess with\r\n        // other instances of mouse\r\n        _mouseDestroy: function () {\r\n            this.element.unbind(\".\" + this.widgetName);\r\n            if (this._mouseMoveDelegate) {\r\n                $(document)\r\n                    .unbind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate)\r\n                    .unbind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\r\n            }\r\n        },\r\n\r\n        _mouseDown: function (event) {\r\n            // don't let more than one widget handle mouseStart\r\n            if (mouseHandled) {\r\n                return;\r\n            }\r\n\r\n            // we may have missed mouseup (out of window)\r\n            (this._mouseStarted && this._mouseUp(event));\r\n\r\n            this._mouseDownEvent = event;\r\n\r\n            var that = this,\r\n                btnIsLeft = (event.which === 1),\r\n                // event.target.nodeName works around a bug in IE 8 with\r\n                // disabled inputs (#7620)\r\n                elIsCancel = (typeof this.options.cancel === \"string\" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);\r\n            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {\r\n                return true;\r\n            }\r\n\r\n            this.mouseDelayMet = !this.options.delay;\r\n            if (!this.mouseDelayMet) {\r\n                this._mouseDelayTimer = setTimeout(function () {\r\n                    that.mouseDelayMet = true;\r\n                }, this.options.delay);\r\n            }\r\n\r\n            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\r\n                this._mouseStarted = (this._mouseStart(event) !== false);\r\n                if (!this._mouseStarted) {\r\n                    event.preventDefault();\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // Click event may never have fired (Gecko & Opera)\r\n            if (true === $.data(event.target, this.widgetName + \".preventClickEvent\")) {\r\n                $.removeData(event.target, this.widgetName + \".preventClickEvent\");\r\n            }\r\n\r\n            // these delegates are required to keep context\r\n            this._mouseMoveDelegate = function (event) {\r\n                return that._mouseMove(event);\r\n            };\r\n            this._mouseUpDelegate = function (event) {\r\n                return that._mouseUp(event);\r\n            };\r\n            $(document)\r\n                .bind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate)\r\n                .bind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\r\n\r\n            event.preventDefault();\r\n\r\n            mouseHandled = true;\r\n            return true;\r\n        },\r\n\r\n        _mouseMove: function (event) {\r\n            // IE mouseup check - mouseup happened when mouse was out of window\r\n            if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {\r\n                return this._mouseUp(event);\r\n            }\r\n\r\n            if (this._mouseStarted) {\r\n                this._mouseDrag(event);\r\n                return event.preventDefault();\r\n            }\r\n\r\n            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\r\n                this._mouseStarted =\r\n                    (this._mouseStart(this._mouseDownEvent, event) !== false);\r\n                (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));\r\n            }\r\n\r\n            return !this._mouseStarted;\r\n        },\r\n\r\n        _mouseUp: function (event) {\r\n            $(document)\r\n                .unbind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate)\r\n                .unbind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\r\n\r\n            if (this._mouseStarted) {\r\n                this._mouseStarted = false;\r\n\r\n                if (event.target === this._mouseDownEvent.target) {\r\n                    $.data(event.target, this.widgetName + \".preventClickEvent\", true);\r\n                }\r\n\r\n                this._mouseStop(event);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _mouseDistanceMet: function (event) {\r\n            return (Math.max(\r\n                    Math.abs(this._mouseDownEvent.pageX - event.pageX),\r\n                    Math.abs(this._mouseDownEvent.pageY - event.pageY)\r\n                ) >= this.options.distance\r\n            );\r\n        },\r\n\r\n        _mouseDelayMet: function (/* event */) {\r\n            return this.mouseDelayMet;\r\n        },\r\n\r\n        // These are placeholder methods, to be overridden by extending plugin\r\n        _mouseStart: function (/* event */) {\r\n        },\r\n        _mouseDrag: function (/* event */) {\r\n        },\r\n        _mouseStop: function (/* event */) {\r\n        },\r\n        _mouseCapture: function (/* event */) {\r\n            return true;\r\n        }\r\n    });\r\n\r\n});\r\n","jquery/ui-modules/position.js":"/*!\r\n * jQuery UI Position - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($, undefined) {\r\n\r\n    $.ui = $.ui || {};\r\n\r\n    var cachedScrollbarWidth,\r\n        max = Math.max,\r\n        abs = Math.abs,\r\n        round = Math.round,\r\n        rhorizontal = /left|center|right/,\r\n        rvertical = /top|center|bottom/,\r\n        roffset = /[\\+\\-]\\d+(\\.[\\d]+)?%?/,\r\n        rposition = /^\\w+/,\r\n        rpercent = /%$/,\r\n        _position = $.fn.position;\r\n\r\n    function getOffsets(offsets, width, height) {\r\n        return [\r\n            parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1),\r\n            parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)\r\n        ];\r\n    }\r\n\r\n    function parseCss(element, property) {\r\n        return parseInt($.css(element, property), 10) || 0;\r\n    }\r\n\r\n    function getDimensions(elem) {\r\n        var raw = elem[0];\r\n        if (raw.nodeType === 9) {\r\n            return {\r\n                width: elem.width(),\r\n                height: elem.height(),\r\n                offset: {top: 0, left: 0}\r\n            };\r\n        }\r\n        if ($.isWindow(raw)) {\r\n            return {\r\n                width: elem.width(),\r\n                height: elem.height(),\r\n                offset: {top: elem.scrollTop(), left: elem.scrollLeft()}\r\n            };\r\n        }\r\n        if (raw.preventDefault) {\r\n            return {\r\n                width: 0,\r\n                height: 0,\r\n                offset: {top: raw.pageY, left: raw.pageX}\r\n            };\r\n        }\r\n        return {\r\n            width: elem.outerWidth(),\r\n            height: elem.outerHeight(),\r\n            offset: elem.offset()\r\n        };\r\n    }\r\n\r\n    $.position = {\r\n        scrollbarWidth: function () {\r\n            if (cachedScrollbarWidth !== undefined) {\r\n                return cachedScrollbarWidth;\r\n            }\r\n            var w1, w2,\r\n                div = $(\"<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>\"),\r\n                innerDiv = div.children()[0];\r\n\r\n            $(\"body\").append(div);\r\n            w1 = innerDiv.offsetWidth;\r\n            div.css(\"overflow\", \"scroll\");\r\n\r\n            w2 = innerDiv.offsetWidth;\r\n\r\n            if (w1 === w2) {\r\n                w2 = div[0].clientWidth;\r\n            }\r\n\r\n            div.remove();\r\n\r\n            return (cachedScrollbarWidth = w1 - w2);\r\n        },\r\n        getScrollInfo: function (within) {\r\n            var overflowX = within.isWindow || within.isDocument ? \"\" :\r\n                within.element.css(\"overflow-x\"),\r\n                overflowY = within.isWindow || within.isDocument ? \"\" :\r\n                    within.element.css(\"overflow-y\"),\r\n                hasOverflowX = overflowX === \"scroll\" ||\r\n                    (overflowX === \"auto\" && within.width < within.element[0].scrollWidth),\r\n                hasOverflowY = overflowY === \"scroll\" ||\r\n                    (overflowY === \"auto\" && within.height < within.element[0].scrollHeight);\r\n            return {\r\n                width: hasOverflowY ? $.position.scrollbarWidth() : 0,\r\n                height: hasOverflowX ? $.position.scrollbarWidth() : 0\r\n            };\r\n        },\r\n        getWithinInfo: function (element) {\r\n            var withinElement = $(element || window),\r\n                isWindow = $.isWindow(withinElement[0]),\r\n                isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;\r\n            return {\r\n                element: withinElement,\r\n                isWindow: isWindow,\r\n                isDocument: isDocument,\r\n                offset: withinElement.offset() || {left: 0, top: 0},\r\n                scrollLeft: withinElement.scrollLeft(),\r\n                scrollTop: withinElement.scrollTop(),\r\n                width: isWindow ? withinElement.width() : withinElement.outerWidth(),\r\n                height: isWindow ? withinElement.height() : withinElement.outerHeight()\r\n            };\r\n        }\r\n    };\r\n\r\n    $.fn.position = function (options) {\r\n        if (!options || !options.of) {\r\n            return _position.apply(this, arguments);\r\n        }\r\n\r\n        // make a copy, we don't want to modify arguments\r\n        options = $.extend({}, options);\r\n\r\n        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,\r\n            target = $(options.of),\r\n            within = $.position.getWithinInfo(options.within),\r\n            scrollInfo = $.position.getScrollInfo(within),\r\n            collision = (options.collision || \"flip\").split(\" \"),\r\n            offsets = {};\r\n\r\n        dimensions = getDimensions(target);\r\n        if (target[0].preventDefault) {\r\n            // force left top to allow flipping\r\n            options.at = \"left top\";\r\n        }\r\n        targetWidth = dimensions.width;\r\n        targetHeight = dimensions.height;\r\n        targetOffset = dimensions.offset;\r\n        // clone to reuse original targetOffset later\r\n        basePosition = $.extend({}, targetOffset);\r\n\r\n        // force my and at to have valid horizontal and vertical positions\r\n        // if a value is missing or invalid, it will be converted to center\r\n        $.each([\"my\", \"at\"], function () {\r\n            var pos = (options[this] || \"\").split(\" \"),\r\n                horizontalOffset,\r\n                verticalOffset;\r\n\r\n            if (pos.length === 1) {\r\n                pos = rhorizontal.test(pos[0]) ?\r\n                    pos.concat([\"center\"]) :\r\n                    rvertical.test(pos[0]) ?\r\n                        [\"center\"].concat(pos) :\r\n                        [\"center\", \"center\"];\r\n            }\r\n            pos[0] = rhorizontal.test(pos[0]) ? pos[0] : \"center\";\r\n            pos[1] = rvertical.test(pos[1]) ? pos[1] : \"center\";\r\n\r\n            // calculate offsets\r\n            horizontalOffset = roffset.exec(pos[0]);\r\n            verticalOffset = roffset.exec(pos[1]);\r\n            offsets[this] = [\r\n                horizontalOffset ? horizontalOffset[0] : 0,\r\n                verticalOffset ? verticalOffset[0] : 0\r\n            ];\r\n\r\n            // reduce to just the positions without the offsets\r\n            options[this] = [\r\n                rposition.exec(pos[0])[0],\r\n                rposition.exec(pos[1])[0]\r\n            ];\r\n        });\r\n\r\n        // normalize collision option\r\n        if (collision.length === 1) {\r\n            collision[1] = collision[0];\r\n        }\r\n\r\n        if (options.at[0] === \"right\") {\r\n            basePosition.left += targetWidth;\r\n        } else if (options.at[0] === \"center\") {\r\n            basePosition.left += targetWidth / 2;\r\n        }\r\n\r\n        if (options.at[1] === \"bottom\") {\r\n            basePosition.top += targetHeight;\r\n        } else if (options.at[1] === \"center\") {\r\n            basePosition.top += targetHeight / 2;\r\n        }\r\n\r\n        atOffset = getOffsets(offsets.at, targetWidth, targetHeight);\r\n        basePosition.left += atOffset[0];\r\n        basePosition.top += atOffset[1];\r\n\r\n        return this.each(function () {\r\n            var collisionPosition, using,\r\n                elem = $(this),\r\n                elemWidth = elem.outerWidth(),\r\n                elemHeight = elem.outerHeight(),\r\n                marginLeft = parseCss(this, \"marginLeft\"),\r\n                marginTop = parseCss(this, \"marginTop\"),\r\n                collisionWidth = elemWidth + marginLeft + parseCss(this, \"marginRight\") + scrollInfo.width,\r\n                collisionHeight = elemHeight + marginTop + parseCss(this, \"marginBottom\") + scrollInfo.height,\r\n                position = $.extend({}, basePosition),\r\n                myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());\r\n\r\n            if (options.my[0] === \"right\") {\r\n                position.left -= elemWidth;\r\n            } else if (options.my[0] === \"center\") {\r\n                position.left -= elemWidth / 2;\r\n            }\r\n\r\n            if (options.my[1] === \"bottom\") {\r\n                position.top -= elemHeight;\r\n            } else if (options.my[1] === \"center\") {\r\n                position.top -= elemHeight / 2;\r\n            }\r\n\r\n            position.left += myOffset[0];\r\n            position.top += myOffset[1];\r\n\r\n            // if the browser doesn't support fractions, then round for consistent results\r\n            if (!$.support.offsetFractions) {\r\n                position.left = round(position.left);\r\n                position.top = round(position.top);\r\n            }\r\n\r\n            collisionPosition = {\r\n                marginLeft: marginLeft,\r\n                marginTop: marginTop\r\n            };\r\n\r\n            $.each([\"left\", \"top\"], function (i, dir) {\r\n                if ($.ui.position[collision[i]]) {\r\n                    $.ui.position[collision[i]][dir](position, {\r\n                        targetWidth: targetWidth,\r\n                        targetHeight: targetHeight,\r\n                        elemWidth: elemWidth,\r\n                        elemHeight: elemHeight,\r\n                        collisionPosition: collisionPosition,\r\n                        collisionWidth: collisionWidth,\r\n                        collisionHeight: collisionHeight,\r\n                        offset: [atOffset[0] + myOffset[0], atOffset [1] + myOffset[1]],\r\n                        my: options.my,\r\n                        at: options.at,\r\n                        within: within,\r\n                        elem: elem\r\n                    });\r\n                }\r\n            });\r\n\r\n            if (options.using) {\r\n                // adds feedback as second argument to using callback, if present\r\n                using = function (props) {\r\n                    var left = targetOffset.left - position.left,\r\n                        right = left + targetWidth - elemWidth,\r\n                        top = targetOffset.top - position.top,\r\n                        bottom = top + targetHeight - elemHeight,\r\n                        feedback = {\r\n                            target: {\r\n                                element: target,\r\n                                left: targetOffset.left,\r\n                                top: targetOffset.top,\r\n                                width: targetWidth,\r\n                                height: targetHeight\r\n                            },\r\n                            element: {\r\n                                element: elem,\r\n                                left: position.left,\r\n                                top: position.top,\r\n                                width: elemWidth,\r\n                                height: elemHeight\r\n                            },\r\n                            horizontal: right < 0 ? \"left\" : left > 0 ? \"right\" : \"center\",\r\n                            vertical: bottom < 0 ? \"top\" : top > 0 ? \"bottom\" : \"middle\"\r\n                        };\r\n                    if (targetWidth < elemWidth && abs(left + right) < targetWidth) {\r\n                        feedback.horizontal = \"center\";\r\n                    }\r\n                    if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {\r\n                        feedback.vertical = \"middle\";\r\n                    }\r\n                    if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {\r\n                        feedback.important = \"horizontal\";\r\n                    } else {\r\n                        feedback.important = \"vertical\";\r\n                    }\r\n                    options.using.call(this, props, feedback);\r\n                };\r\n            }\r\n\r\n            elem.offset($.extend(position, {using: using}));\r\n        });\r\n    };\r\n\r\n    $.ui.position = {\r\n        fit: {\r\n            left: function (position, data) {\r\n                var within = data.within,\r\n                    withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,\r\n                    outerWidth = within.width,\r\n                    collisionPosLeft = position.left - data.collisionPosition.marginLeft,\r\n                    overLeft = withinOffset - collisionPosLeft,\r\n                    overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,\r\n                    newOverRight;\r\n\r\n                // element is wider than within\r\n                if (data.collisionWidth > outerWidth) {\r\n                    // element is initially over the left side of within\r\n                    if (overLeft > 0 && overRight <= 0) {\r\n                        newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;\r\n                        position.left += overLeft - newOverRight;\r\n                        // element is initially over right side of within\r\n                    } else if (overRight > 0 && overLeft <= 0) {\r\n                        position.left = withinOffset;\r\n                        // element is initially over both left and right sides of within\r\n                    } else {\r\n                        if (overLeft > overRight) {\r\n                            position.left = withinOffset + outerWidth - data.collisionWidth;\r\n                        } else {\r\n                            position.left = withinOffset;\r\n                        }\r\n                    }\r\n                    // too far left -> align with left edge\r\n                } else if (overLeft > 0) {\r\n                    position.left += overLeft;\r\n                    // too far right -> align with right edge\r\n                } else if (overRight > 0) {\r\n                    position.left -= overRight;\r\n                    // adjust based on position and margin\r\n                } else {\r\n                    position.left = max(position.left - collisionPosLeft, position.left);\r\n                }\r\n            },\r\n            top: function (position, data) {\r\n                var within = data.within,\r\n                    withinOffset = within.isWindow ? within.scrollTop : within.offset.top,\r\n                    outerHeight = data.within.height,\r\n                    collisionPosTop = position.top - data.collisionPosition.marginTop,\r\n                    overTop = withinOffset - collisionPosTop,\r\n                    overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,\r\n                    newOverBottom;\r\n\r\n                // element is taller than within\r\n                if (data.collisionHeight > outerHeight) {\r\n                    // element is initially over the top of within\r\n                    if (overTop > 0 && overBottom <= 0) {\r\n                        newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;\r\n                        position.top += overTop - newOverBottom;\r\n                        // element is initially over bottom of within\r\n                    } else if (overBottom > 0 && overTop <= 0) {\r\n                        position.top = withinOffset;\r\n                        // element is initially over both top and bottom of within\r\n                    } else {\r\n                        if (overTop > overBottom) {\r\n                            position.top = withinOffset + outerHeight - data.collisionHeight;\r\n                        } else {\r\n                            position.top = withinOffset;\r\n                        }\r\n                    }\r\n                    // too far up -> align with top\r\n                } else if (overTop > 0) {\r\n                    position.top += overTop;\r\n                    // too far down -> align with bottom edge\r\n                } else if (overBottom > 0) {\r\n                    position.top -= overBottom;\r\n                    // adjust based on position and margin\r\n                } else {\r\n                    position.top = max(position.top - collisionPosTop, position.top);\r\n                }\r\n            }\r\n        },\r\n        flip: {\r\n            left: function (position, data) {\r\n                var within = data.within,\r\n                    withinOffset = within.offset.left + within.scrollLeft,\r\n                    outerWidth = within.width,\r\n                    offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,\r\n                    collisionPosLeft = position.left - data.collisionPosition.marginLeft,\r\n                    overLeft = collisionPosLeft - offsetLeft,\r\n                    overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,\r\n                    myOffset = data.my[0] === \"left\" ?\r\n                        -data.elemWidth :\r\n                        data.my[0] === \"right\" ?\r\n                            data.elemWidth :\r\n                            0,\r\n                    atOffset = data.at[0] === \"left\" ?\r\n                        data.targetWidth :\r\n                        data.at[0] === \"right\" ?\r\n                            -data.targetWidth :\r\n                            0,\r\n                    offset = -2 * data.offset[0],\r\n                    newOverRight,\r\n                    newOverLeft;\r\n\r\n                if (overLeft < 0) {\r\n                    newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;\r\n                    if (newOverRight < 0 || newOverRight < abs(overLeft)) {\r\n                        position.left += myOffset + atOffset + offset;\r\n                    }\r\n                } else if (overRight > 0) {\r\n                    newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;\r\n                    if (newOverLeft > 0 || abs(newOverLeft) < overRight) {\r\n                        position.left += myOffset + atOffset + offset;\r\n                    }\r\n                }\r\n            },\r\n            top: function (position, data) {\r\n                var within = data.within,\r\n                    withinOffset = within.offset.top + within.scrollTop,\r\n                    outerHeight = within.height,\r\n                    offsetTop = within.isWindow ? within.scrollTop : within.offset.top,\r\n                    collisionPosTop = position.top - data.collisionPosition.marginTop,\r\n                    overTop = collisionPosTop - offsetTop,\r\n                    overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,\r\n                    top = data.my[1] === \"top\",\r\n                    myOffset = top ?\r\n                        -data.elemHeight :\r\n                        data.my[1] === \"bottom\" ?\r\n                            data.elemHeight :\r\n                            0,\r\n                    atOffset = data.at[1] === \"top\" ?\r\n                        data.targetHeight :\r\n                        data.at[1] === \"bottom\" ?\r\n                            -data.targetHeight :\r\n                            0,\r\n                    offset = -2 * data.offset[1],\r\n                    newOverTop,\r\n                    newOverBottom;\r\n                if (overTop < 0) {\r\n                    newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;\r\n                    if ((position.top + myOffset + atOffset + offset) > overTop && (newOverBottom < 0 || newOverBottom < abs(overTop))) {\r\n                        position.top += myOffset + atOffset + offset;\r\n                    }\r\n                } else if (overBottom > 0) {\r\n                    newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;\r\n                    if ((position.top + myOffset + atOffset + offset) > overBottom && (newOverTop > 0 || abs(newOverTop) < overBottom)) {\r\n                        position.top += myOffset + atOffset + offset;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        flipfit: {\r\n            left: function () {\r\n                $.ui.position.flip.left.apply(this, arguments);\r\n                $.ui.position.fit.left.apply(this, arguments);\r\n            },\r\n            top: function () {\r\n                $.ui.position.flip.top.apply(this, arguments);\r\n                $.ui.position.fit.top.apply(this, arguments);\r\n            }\r\n        }\r\n    };\r\n\r\n// fraction support test\r\n    (function () {\r\n        var testElement, testElementParent, testElementStyle, offsetLeft, i,\r\n            body = document.getElementsByTagName(\"body\")[0],\r\n            div = document.createElement(\"div\");\r\n\r\n        //Create a \"fake body\" for testing based on method used in jQuery.support\r\n        testElement = document.createElement(body ? \"div\" : \"body\");\r\n        testElementStyle = {\r\n            visibility: \"hidden\",\r\n            width: 0,\r\n            height: 0,\r\n            border: 0,\r\n            margin: 0,\r\n            background: \"none\"\r\n        };\r\n        if (body) {\r\n            $.extend(testElementStyle, {\r\n                position: \"absolute\",\r\n                left: \"-1000px\",\r\n                top: \"-1000px\"\r\n            });\r\n        }\r\n        for (i in testElementStyle) {\r\n            testElement.style[i] = testElementStyle[i];\r\n        }\r\n        testElement.appendChild(div);\r\n        testElementParent = body || document.documentElement;\r\n        testElementParent.insertBefore(testElement, testElementParent.firstChild);\r\n\r\n        div.style.cssText = \"position: absolute; left: 10.7432222px;\";\r\n\r\n        offsetLeft = $(div).offset().left;\r\n        $.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;\r\n\r\n        testElement.innerHTML = \"\";\r\n        testElementParent.removeChild(testElement);\r\n    })();\r\n\r\n});\r\n","jquery/ui-modules/progressbar.js":"/*!\r\n * jQuery UI Progressbar - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/progressbar/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/core',\r\n    'jquery-ui-modules/widget'\r\n], function ($, undefined) {\r\n\r\n    $.widget(\"ui.progressbar\", {\r\n        version: \"1.10.4\",\r\n        options: {\r\n            max: 100,\r\n            value: 0,\r\n\r\n            change: null,\r\n            complete: null\r\n        },\r\n\r\n        min: 0,\r\n\r\n        _create: function () {\r\n            // Constrain initial value\r\n            this.oldValue = this.options.value = this._constrainedValue();\r\n\r\n            this.element\r\n                .addClass(\"ui-progressbar ui-widget ui-widget-content ui-corner-all\")\r\n                .attr({\r\n                    // Only set static values, aria-valuenow and aria-valuemax are\r\n                    // set inside _refreshValue()\r\n                    role: \"progressbar\",\r\n                    \"aria-valuemin\": this.min\r\n                });\r\n\r\n            this.valueDiv = $(\"<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>\")\r\n                .appendTo(this.element);\r\n\r\n            this._refreshValue();\r\n        },\r\n\r\n        _destroy: function () {\r\n            this.element\r\n                .removeClass(\"ui-progressbar ui-widget ui-widget-content ui-corner-all\")\r\n                .removeAttr(\"role\")\r\n                .removeAttr(\"aria-valuemin\")\r\n                .removeAttr(\"aria-valuemax\")\r\n                .removeAttr(\"aria-valuenow\");\r\n\r\n            this.valueDiv.remove();\r\n        },\r\n\r\n        value: function (newValue) {\r\n            if (newValue === undefined) {\r\n                return this.options.value;\r\n            }\r\n\r\n            this.options.value = this._constrainedValue(newValue);\r\n            this._refreshValue();\r\n        },\r\n\r\n        _constrainedValue: function (newValue) {\r\n            if (newValue === undefined) {\r\n                newValue = this.options.value;\r\n            }\r\n\r\n            this.indeterminate = newValue === false;\r\n\r\n            // sanitize value\r\n            if (typeof newValue !== \"number\") {\r\n                newValue = 0;\r\n            }\r\n\r\n            return this.indeterminate ? false :\r\n                Math.min(this.options.max, Math.max(this.min, newValue));\r\n        },\r\n\r\n        _setOptions: function (options) {\r\n            // Ensure \"value\" option is set after other values (like max)\r\n            var value = options.value;\r\n            delete options.value;\r\n\r\n            this._super(options);\r\n\r\n            this.options.value = this._constrainedValue(value);\r\n            this._refreshValue();\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            if (key === \"max\") {\r\n                // Don't allow a max less than min\r\n                value = Math.max(this.min, value);\r\n            }\r\n\r\n            this._super(key, value);\r\n        },\r\n\r\n        _percentage: function () {\r\n            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);\r\n        },\r\n\r\n        _refreshValue: function () {\r\n            var value = this.options.value,\r\n                percentage = this._percentage();\r\n\r\n            this.valueDiv\r\n                .toggle(this.indeterminate || value > this.min)\r\n                .toggleClass(\"ui-corner-right\", value === this.options.max)\r\n                .width(percentage.toFixed(0) + \"%\");\r\n\r\n            this.element.toggleClass(\"ui-progressbar-indeterminate\", this.indeterminate);\r\n\r\n            if (this.indeterminate) {\r\n                this.element.removeAttr(\"aria-valuenow\");\r\n                if (!this.overlayDiv) {\r\n                    this.overlayDiv = $(\"<div class='ui-progressbar-overlay'></div>\").appendTo(this.valueDiv);\r\n                }\r\n            } else {\r\n                this.element.attr({\r\n                    \"aria-valuemax\": this.options.max,\r\n                    \"aria-valuenow\": value\r\n                });\r\n                if (this.overlayDiv) {\r\n                    this.overlayDiv.remove();\r\n                    this.overlayDiv = null;\r\n                }\r\n            }\r\n\r\n            if (this.oldValue !== value) {\r\n                this.oldValue = value;\r\n                this._trigger(\"change\");\r\n            }\r\n            if (value === this.options.max) {\r\n                this._trigger(\"complete\");\r\n            }\r\n        }\r\n    });\r\n\r\n});\r\n","jquery/ui-modules/resizable.js":"/*!\r\n * jQuery UI Resizable - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/resizable/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/core',\r\n    'jquery-ui-modules/mouse'\r\n], function ($, undefined) {\r\n\r\n    function num(v) {\r\n        return parseInt(v, 10) || 0;\r\n    }\r\n\r\n    function isNumber(value) {\r\n        return !isNaN(parseInt(value, 10));\r\n    }\r\n\r\n    $.widget(\"ui.resizable\", $.ui.mouse, {\r\n        version: \"1.10.4\",\r\n        widgetEventPrefix: \"resize\",\r\n        options: {\r\n            alsoResize: false,\r\n            animate: false,\r\n            animateDuration: \"slow\",\r\n            animateEasing: \"swing\",\r\n            aspectRatio: false,\r\n            autoHide: false,\r\n            containment: false,\r\n            ghost: false,\r\n            grid: false,\r\n            handles: \"e,s,se\",\r\n            helper: false,\r\n            maxHeight: null,\r\n            maxWidth: null,\r\n            minHeight: 10,\r\n            minWidth: 10,\r\n            // See #7960\r\n            zIndex: 90,\r\n\r\n            // callbacks\r\n            resize: null,\r\n            start: null,\r\n            stop: null\r\n        },\r\n        _create: function () {\r\n\r\n            var n, i, handle, axis, hname,\r\n                that = this,\r\n                o = this.options;\r\n            this.element.addClass(\"ui-resizable\");\r\n\r\n            $.extend(this, {\r\n                _aspectRatio: !!(o.aspectRatio),\r\n                aspectRatio: o.aspectRatio,\r\n                originalElement: this.element,\r\n                _proportionallyResizeElements: [],\r\n                _helper: o.helper || o.ghost || o.animate ? o.helper || \"ui-resizable-helper\" : null\r\n            });\r\n\r\n            //Wrap the element if it cannot hold child nodes\r\n            if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {\r\n\r\n                //Create a wrapper element and set the wrapper to the new current internal element\r\n                this.element.wrap(\r\n                    $(\"<div class='ui-wrapper' style='overflow: hidden;'></div>\").css({\r\n                        position: this.element.css(\"position\"),\r\n                        width: this.element.outerWidth(),\r\n                        height: this.element.outerHeight(),\r\n                        top: this.element.css(\"top\"),\r\n                        left: this.element.css(\"left\")\r\n                    })\r\n                );\r\n\r\n                //Overwrite the original this.element\r\n                this.element = this.element.parent().data(\r\n                    \"ui-resizable\", this.element.data(\"ui-resizable\")\r\n                );\r\n\r\n                this.elementIsWrapper = true;\r\n\r\n                //Move margins to the wrapper\r\n                this.element.css({\r\n                    marginLeft: this.originalElement.css(\"marginLeft\"),\r\n                    marginTop: this.originalElement.css(\"marginTop\"),\r\n                    marginRight: this.originalElement.css(\"marginRight\"),\r\n                    marginBottom: this.originalElement.css(\"marginBottom\")\r\n                });\r\n                this.originalElement.css({marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});\r\n\r\n                //Prevent Safari textarea resize\r\n                this.originalResizeStyle = this.originalElement.css(\"resize\");\r\n                this.originalElement.css(\"resize\", \"none\");\r\n\r\n                //Push the actual element to our proportionallyResize internal array\r\n                this._proportionallyResizeElements.push(this.originalElement.css({\r\n                    position: \"static\",\r\n                    zoom: 1,\r\n                    display: \"block\"\r\n                }));\r\n\r\n                // avoid IE jump (hard set the margin)\r\n                this.originalElement.css({margin: this.originalElement.css(\"margin\")});\r\n\r\n                // fix handlers offset\r\n                this._proportionallyResize();\r\n\r\n            }\r\n\r\n            this.handles = o.handles || (!$(\".ui-resizable-handle\", this.element).length ? \"e,s,se\" : {\r\n                n: \".ui-resizable-n\",\r\n                e: \".ui-resizable-e\",\r\n                s: \".ui-resizable-s\",\r\n                w: \".ui-resizable-w\",\r\n                se: \".ui-resizable-se\",\r\n                sw: \".ui-resizable-sw\",\r\n                ne: \".ui-resizable-ne\",\r\n                nw: \".ui-resizable-nw\"\r\n            });\r\n            if (this.handles.constructor === String) {\r\n\r\n                if (this.handles === \"all\") {\r\n                    this.handles = \"n,e,s,w,se,sw,ne,nw\";\r\n                }\r\n\r\n                n = this.handles.split(\",\");\r\n                this.handles = {};\r\n\r\n                for (i = 0; i < n.length; i++) {\r\n\r\n                    handle = $.trim(n[i]);\r\n                    hname = \"ui-resizable-\" + handle;\r\n                    axis = $(\"<div class='ui-resizable-handle \" + hname + \"'></div>\");\r\n\r\n                    // Apply zIndex to all handles - see #7960\r\n                    axis.css({zIndex: o.zIndex});\r\n\r\n                    //TODO : What's going on here?\r\n                    if (\"se\" === handle) {\r\n                        axis.addClass(\"ui-icon ui-icon-gripsmall-diagonal-se\");\r\n                    }\r\n\r\n                    //Insert into internal handles object and append to element\r\n                    this.handles[handle] = \".ui-resizable-\" + handle;\r\n                    this.element.append(axis);\r\n                }\r\n\r\n            }\r\n\r\n            this._renderAxis = function (target) {\r\n\r\n                var i, axis, padPos, padWrapper;\r\n\r\n                target = target || this.element;\r\n\r\n                for (i in this.handles) {\r\n\r\n                    if (this.handles[i].constructor === String) {\r\n                        this.handles[i] = $(this.handles[i], this.element).show();\r\n                    }\r\n\r\n                    //Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)\r\n                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {\r\n\r\n                        axis = $(this.handles[i], this.element);\r\n\r\n                        //Checking the correct pad and border\r\n                        padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();\r\n\r\n                        //The padding type i have to apply...\r\n                        padPos = [\"padding\",\r\n                            /ne|nw|n/.test(i) ? \"Top\" :\r\n                                /se|sw|s/.test(i) ? \"Bottom\" :\r\n                                    /^e$/.test(i) ? \"Right\" : \"Left\"].join(\"\");\r\n\r\n                        target.css(padPos, padWrapper);\r\n\r\n                        this._proportionallyResize();\r\n\r\n                    }\r\n\r\n                    //TODO: What's that good for? There's not anything to be executed left\r\n                    if (!$(this.handles[i]).length) {\r\n                        continue;\r\n                    }\r\n                }\r\n            };\r\n\r\n            //TODO: make renderAxis a prototype function\r\n            this._renderAxis(this.element);\r\n\r\n            this._handles = $(\".ui-resizable-handle\", this.element)\r\n                .disableSelection();\r\n\r\n            //Matching axis name\r\n            this._handles.mouseover(function () {\r\n                if (!that.resizing) {\r\n                    if (this.className) {\r\n                        axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);\r\n                    }\r\n                    //Axis, default = se\r\n                    that.axis = axis && axis[1] ? axis[1] : \"se\";\r\n                }\r\n            });\r\n\r\n            //If we want to auto hide the elements\r\n            if (o.autoHide) {\r\n                this._handles.hide();\r\n                $(this.element)\r\n                    .addClass(\"ui-resizable-autohide\")\r\n                    .mouseenter(function () {\r\n                        if (o.disabled) {\r\n                            return;\r\n                        }\r\n                        $(this).removeClass(\"ui-resizable-autohide\");\r\n                        that._handles.show();\r\n                    })\r\n                    .mouseleave(function () {\r\n                        if (o.disabled) {\r\n                            return;\r\n                        }\r\n                        if (!that.resizing) {\r\n                            $(this).addClass(\"ui-resizable-autohide\");\r\n                            that._handles.hide();\r\n                        }\r\n                    });\r\n            }\r\n\r\n            //Initialize the mouse interaction\r\n            this._mouseInit();\r\n\r\n        },\r\n\r\n        _destroy: function () {\r\n\r\n            this._mouseDestroy();\r\n\r\n            var wrapper,\r\n                _destroy = function (exp) {\r\n                    $(exp).removeClass(\"ui-resizable ui-resizable-disabled ui-resizable-resizing\")\r\n                        .removeData(\"resizable\").removeData(\"ui-resizable\").unbind(\".resizable\").find(\".ui-resizable-handle\").remove();\r\n                };\r\n\r\n            //TODO: Unwrap at same DOM position\r\n            if (this.elementIsWrapper) {\r\n                _destroy(this.element);\r\n                wrapper = this.element;\r\n                this.originalElement.css({\r\n                    position: wrapper.css(\"position\"),\r\n                    width: wrapper.outerWidth(),\r\n                    height: wrapper.outerHeight(),\r\n                    top: wrapper.css(\"top\"),\r\n                    left: wrapper.css(\"left\")\r\n                }).insertAfter(wrapper);\r\n                wrapper.remove();\r\n            }\r\n\r\n            this.originalElement.css(\"resize\", this.originalResizeStyle);\r\n            _destroy(this.originalElement);\r\n\r\n            return this;\r\n        },\r\n\r\n        _mouseCapture: function (event) {\r\n            var i, handle,\r\n                capture = false;\r\n\r\n            for (i in this.handles) {\r\n                handle = $(this.handles[i])[0];\r\n                if (handle === event.target || $.contains(handle, event.target)) {\r\n                    capture = true;\r\n                }\r\n            }\r\n\r\n            return !this.options.disabled && capture;\r\n        },\r\n\r\n        _mouseStart: function (event) {\r\n\r\n            var curleft, curtop, cursor,\r\n                o = this.options,\r\n                iniPos = this.element.position(),\r\n                el = this.element;\r\n\r\n            this.resizing = true;\r\n\r\n            // bugfix for http://dev.jquery.com/ticket/1749\r\n            if ((/absolute/).test(el.css(\"position\"))) {\r\n                el.css({position: \"absolute\", top: el.css(\"top\"), left: el.css(\"left\")});\r\n            } else if (el.is(\".ui-draggable\")) {\r\n                el.css({position: \"absolute\", top: iniPos.top, left: iniPos.left});\r\n            }\r\n\r\n            this._renderProxy();\r\n\r\n            curleft = num(this.helper.css(\"left\"));\r\n            curtop = num(this.helper.css(\"top\"));\r\n\r\n            if (o.containment) {\r\n                curleft += $(o.containment).scrollLeft() || 0;\r\n                curtop += $(o.containment).scrollTop() || 0;\r\n            }\r\n\r\n            //Store needed variables\r\n            this.offset = this.helper.offset();\r\n            this.position = {left: curleft, top: curtop};\r\n            this.size = this._helper ? {width: this.helper.width(), height: this.helper.height()} : {\r\n                width: el.width(),\r\n                height: el.height()\r\n            };\r\n            this.originalSize = this._helper ? {width: el.outerWidth(), height: el.outerHeight()} : {\r\n                width: el.width(),\r\n                height: el.height()\r\n            };\r\n            this.originalPosition = {left: curleft, top: curtop};\r\n            this.sizeDiff = {width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height()};\r\n            this.originalMousePosition = {left: event.pageX, top: event.pageY};\r\n\r\n            //Aspect Ratio\r\n            this.aspectRatio = (typeof o.aspectRatio === \"number\") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);\r\n\r\n            cursor = $(\".ui-resizable-\" + this.axis).css(\"cursor\");\r\n            $(\"body\").css(\"cursor\", cursor === \"auto\" ? this.axis + \"-resize\" : cursor);\r\n\r\n            el.addClass(\"ui-resizable-resizing\");\r\n            this._propagate(\"start\", event);\r\n            return true;\r\n        },\r\n\r\n        _mouseDrag: function (event) {\r\n\r\n            //Increase performance, avoid regex\r\n            var data,\r\n                el = this.helper, props = {},\r\n                smp = this.originalMousePosition,\r\n                a = this.axis,\r\n                prevTop = this.position.top,\r\n                prevLeft = this.position.left,\r\n                prevWidth = this.size.width,\r\n                prevHeight = this.size.height,\r\n                dx = (event.pageX - smp.left) || 0,\r\n                dy = (event.pageY - smp.top) || 0,\r\n                trigger = this._change[a];\r\n\r\n            if (!trigger) {\r\n                return false;\r\n            }\r\n\r\n            // Calculate the attrs that will be change\r\n            data = trigger.apply(this, [event, dx, dy]);\r\n\r\n            // Put this in the mouseDrag handler since the user can start pressing shift while resizing\r\n            this._updateVirtualBoundaries(event.shiftKey);\r\n            if (this._aspectRatio || event.shiftKey) {\r\n                data = this._updateRatio(data, event);\r\n            }\r\n\r\n            data = this._respectSize(data, event);\r\n\r\n            this._updateCache(data);\r\n\r\n            // plugins callbacks need to be called first\r\n            this._propagate(\"resize\", event);\r\n\r\n            if (this.position.top !== prevTop) {\r\n                props.top = this.position.top + \"px\";\r\n            }\r\n            if (this.position.left !== prevLeft) {\r\n                props.left = this.position.left + \"px\";\r\n            }\r\n            if (this.size.width !== prevWidth) {\r\n                props.width = this.size.width + \"px\";\r\n            }\r\n            if (this.size.height !== prevHeight) {\r\n                props.height = this.size.height + \"px\";\r\n            }\r\n            el.css(props);\r\n\r\n            if (!this._helper && this._proportionallyResizeElements.length) {\r\n                this._proportionallyResize();\r\n            }\r\n\r\n            // Call the user callback if the element was resized\r\n            if (!$.isEmptyObject(props)) {\r\n                this._trigger(\"resize\", event, this.ui());\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _mouseStop: function (event) {\r\n\r\n            this.resizing = false;\r\n            var pr, ista, soffseth, soffsetw, s, left, top,\r\n                o = this.options, that = this;\r\n\r\n            if (this._helper) {\r\n\r\n                pr = this._proportionallyResizeElements;\r\n                ista = pr.length && (/textarea/i).test(pr[0].nodeName);\r\n                soffseth = ista && $.ui.hasScroll(pr[0], \"left\") /* TODO - jump height */ ? 0 : that.sizeDiff.height;\r\n                soffsetw = ista ? 0 : that.sizeDiff.width;\r\n\r\n                s = {width: (that.helper.width() - soffsetw), height: (that.helper.height() - soffseth)};\r\n                left = (parseInt(that.element.css(\"left\"), 10) + (that.position.left - that.originalPosition.left)) || null;\r\n                top = (parseInt(that.element.css(\"top\"), 10) + (that.position.top - that.originalPosition.top)) || null;\r\n\r\n                if (!o.animate) {\r\n                    this.element.css($.extend(s, {top: top, left: left}));\r\n                }\r\n\r\n                that.helper.height(that.size.height);\r\n                that.helper.width(that.size.width);\r\n\r\n                if (this._helper && !o.animate) {\r\n                    this._proportionallyResize();\r\n                }\r\n            }\r\n\r\n            $(\"body\").css(\"cursor\", \"auto\");\r\n\r\n            this.element.removeClass(\"ui-resizable-resizing\");\r\n\r\n            this._propagate(\"stop\", event);\r\n\r\n            if (this._helper) {\r\n                this.helper.remove();\r\n            }\r\n\r\n            return false;\r\n\r\n        },\r\n\r\n        _updateVirtualBoundaries: function (forceAspectRatio) {\r\n            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,\r\n                o = this.options;\r\n\r\n            b = {\r\n                minWidth: isNumber(o.minWidth) ? o.minWidth : 0,\r\n                maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,\r\n                minHeight: isNumber(o.minHeight) ? o.minHeight : 0,\r\n                maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity\r\n            };\r\n\r\n            if (this._aspectRatio || forceAspectRatio) {\r\n                // We want to create an enclosing box whose aspect ration is the requested one\r\n                // First, compute the \"projected\" size for each dimension based on the aspect ratio and other dimension\r\n                pMinWidth = b.minHeight * this.aspectRatio;\r\n                pMinHeight = b.minWidth / this.aspectRatio;\r\n                pMaxWidth = b.maxHeight * this.aspectRatio;\r\n                pMaxHeight = b.maxWidth / this.aspectRatio;\r\n\r\n                if (pMinWidth > b.minWidth) {\r\n                    b.minWidth = pMinWidth;\r\n                }\r\n                if (pMinHeight > b.minHeight) {\r\n                    b.minHeight = pMinHeight;\r\n                }\r\n                if (pMaxWidth < b.maxWidth) {\r\n                    b.maxWidth = pMaxWidth;\r\n                }\r\n                if (pMaxHeight < b.maxHeight) {\r\n                    b.maxHeight = pMaxHeight;\r\n                }\r\n            }\r\n            this._vBoundaries = b;\r\n        },\r\n\r\n        _updateCache: function (data) {\r\n            this.offset = this.helper.offset();\r\n            if (isNumber(data.left)) {\r\n                this.position.left = data.left;\r\n            }\r\n            if (isNumber(data.top)) {\r\n                this.position.top = data.top;\r\n            }\r\n            if (isNumber(data.height)) {\r\n                this.size.height = data.height;\r\n            }\r\n            if (isNumber(data.width)) {\r\n                this.size.width = data.width;\r\n            }\r\n        },\r\n\r\n        _updateRatio: function (data) {\r\n\r\n            var cpos = this.position,\r\n                csize = this.size,\r\n                a = this.axis;\r\n\r\n            if (isNumber(data.height)) {\r\n                data.width = (data.height * this.aspectRatio);\r\n            } else if (isNumber(data.width)) {\r\n                data.height = (data.width / this.aspectRatio);\r\n            }\r\n\r\n            if (a === \"sw\") {\r\n                data.left = cpos.left + (csize.width - data.width);\r\n                data.top = null;\r\n            }\r\n            if (a === \"nw\") {\r\n                data.top = cpos.top + (csize.height - data.height);\r\n                data.left = cpos.left + (csize.width - data.width);\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        _respectSize: function (data) {\r\n\r\n            var o = this._vBoundaries,\r\n                a = this.axis,\r\n                ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width),\r\n                ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),\r\n                isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width),\r\n                isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),\r\n                dw = this.originalPosition.left + this.originalSize.width,\r\n                dh = this.position.top + this.size.height,\r\n                cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);\r\n            if (isminw) {\r\n                data.width = o.minWidth;\r\n            }\r\n            if (isminh) {\r\n                data.height = o.minHeight;\r\n            }\r\n            if (ismaxw) {\r\n                data.width = o.maxWidth;\r\n            }\r\n            if (ismaxh) {\r\n                data.height = o.maxHeight;\r\n            }\r\n\r\n            if (isminw && cw) {\r\n                data.left = dw - o.minWidth;\r\n            }\r\n            if (ismaxw && cw) {\r\n                data.left = dw - o.maxWidth;\r\n            }\r\n            if (isminh && ch) {\r\n                data.top = dh - o.minHeight;\r\n            }\r\n            if (ismaxh && ch) {\r\n                data.top = dh - o.maxHeight;\r\n            }\r\n\r\n            // fixing jump error on top/left - bug #2330\r\n            if (!data.width && !data.height && !data.left && data.top) {\r\n                data.top = null;\r\n            } else if (!data.width && !data.height && !data.top && data.left) {\r\n                data.left = null;\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        _proportionallyResize: function () {\r\n\r\n            if (!this._proportionallyResizeElements.length) {\r\n                return;\r\n            }\r\n\r\n            var i, j, borders, paddings, prel,\r\n                element = this.helper || this.element;\r\n\r\n            for (i = 0; i < this._proportionallyResizeElements.length; i++) {\r\n\r\n                prel = this._proportionallyResizeElements[i];\r\n\r\n                if (!this.borderDif) {\r\n                    this.borderDif = [];\r\n                    borders = [prel.css(\"borderTopWidth\"), prel.css(\"borderRightWidth\"), prel.css(\"borderBottomWidth\"), prel.css(\"borderLeftWidth\")];\r\n                    paddings = [prel.css(\"paddingTop\"), prel.css(\"paddingRight\"), prel.css(\"paddingBottom\"), prel.css(\"paddingLeft\")];\r\n\r\n                    for (j = 0; j < borders.length; j++) {\r\n                        this.borderDif[j] = (parseInt(borders[j], 10) || 0) + (parseInt(paddings[j], 10) || 0);\r\n                    }\r\n                }\r\n\r\n                prel.css({\r\n                    height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,\r\n                    width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0\r\n                });\r\n\r\n            }\r\n\r\n        },\r\n\r\n        _renderProxy: function () {\r\n\r\n            var el = this.element, o = this.options;\r\n            this.elementOffset = el.offset();\r\n\r\n            if (this._helper) {\r\n\r\n                this.helper = this.helper || $(\"<div style='overflow:hidden;'></div>\");\r\n\r\n                this.helper.addClass(this._helper).css({\r\n                    width: this.element.outerWidth() - 1,\r\n                    height: this.element.outerHeight() - 1,\r\n                    position: \"absolute\",\r\n                    left: this.elementOffset.left + \"px\",\r\n                    top: this.elementOffset.top + \"px\",\r\n                    zIndex: ++o.zIndex //TODO: Don't modify option\r\n                });\r\n\r\n                this.helper\r\n                    .appendTo(\"body\")\r\n                    .disableSelection();\r\n\r\n            } else {\r\n                this.helper = this.element;\r\n            }\r\n\r\n        },\r\n\r\n        _change: {\r\n            e: function (event, dx) {\r\n                return {width: this.originalSize.width + dx};\r\n            },\r\n            w: function (event, dx) {\r\n                var cs = this.originalSize, sp = this.originalPosition;\r\n                return {left: sp.left + dx, width: cs.width - dx};\r\n            },\r\n            n: function (event, dx, dy) {\r\n                var cs = this.originalSize, sp = this.originalPosition;\r\n                return {top: sp.top + dy, height: cs.height - dy};\r\n            },\r\n            s: function (event, dx, dy) {\r\n                return {height: this.originalSize.height + dy};\r\n            },\r\n            se: function (event, dx, dy) {\r\n                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\r\n            },\r\n            sw: function (event, dx, dy) {\r\n                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\r\n            },\r\n            ne: function (event, dx, dy) {\r\n                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\r\n            },\r\n            nw: function (event, dx, dy) {\r\n                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\r\n            }\r\n        },\r\n\r\n        _propagate: function (n, event) {\r\n            $.ui.plugin.call(this, n, [event, this.ui()]);\r\n            (n !== \"resize\" && this._trigger(n, event, this.ui()));\r\n        },\r\n\r\n        plugins: {},\r\n\r\n        ui: function () {\r\n            return {\r\n                originalElement: this.originalElement,\r\n                element: this.element,\r\n                helper: this.helper,\r\n                position: this.position,\r\n                size: this.size,\r\n                originalSize: this.originalSize,\r\n                originalPosition: this.originalPosition\r\n            };\r\n        }\r\n\r\n    });\r\n\r\n    /*\r\n     * Resizable Extensions\r\n     */\r\n\r\n    $.ui.plugin.add(\"resizable\", \"animate\", {\r\n\r\n        stop: function (event) {\r\n            var that = $(this).data(\"ui-resizable\"),\r\n                o = that.options,\r\n                pr = that._proportionallyResizeElements,\r\n                ista = pr.length && (/textarea/i).test(pr[0].nodeName),\r\n                soffseth = ista && $.ui.hasScroll(pr[0], \"left\") /* TODO - jump height */ ? 0 : that.sizeDiff.height,\r\n                soffsetw = ista ? 0 : that.sizeDiff.width,\r\n                style = {width: (that.size.width - soffsetw), height: (that.size.height - soffseth)},\r\n                left = (parseInt(that.element.css(\"left\"), 10) + (that.position.left - that.originalPosition.left)) || null,\r\n                top = (parseInt(that.element.css(\"top\"), 10) + (that.position.top - that.originalPosition.top)) || null;\r\n\r\n            that.element.animate(\r\n                $.extend(style, top && left ? {top: top, left: left} : {}), {\r\n                    duration: o.animateDuration,\r\n                    easing: o.animateEasing,\r\n                    step: function () {\r\n\r\n                        var data = {\r\n                            width: parseInt(that.element.css(\"width\"), 10),\r\n                            height: parseInt(that.element.css(\"height\"), 10),\r\n                            top: parseInt(that.element.css(\"top\"), 10),\r\n                            left: parseInt(that.element.css(\"left\"), 10)\r\n                        };\r\n\r\n                        if (pr && pr.length) {\r\n                            $(pr[0]).css({width: data.width, height: data.height});\r\n                        }\r\n\r\n                        // propagating resize, and updating values for each animation step\r\n                        that._updateCache(data);\r\n                        that._propagate(\"resize\", event);\r\n\r\n                    }\r\n                }\r\n            );\r\n        }\r\n\r\n    });\r\n\r\n    $.ui.plugin.add(\"resizable\", \"containment\", {\r\n\r\n        start: function () {\r\n            var element, p, co, ch, cw, width, height,\r\n                that = $(this).data(\"ui-resizable\"),\r\n                o = that.options,\r\n                el = that.element,\r\n                oc = o.containment,\r\n                ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;\r\n\r\n            if (!ce) {\r\n                return;\r\n            }\r\n\r\n            that.containerElement = $(ce);\r\n\r\n            if (/document/.test(oc) || oc === document) {\r\n                that.containerOffset = {left: 0, top: 0};\r\n                that.containerPosition = {left: 0, top: 0};\r\n\r\n                that.parentData = {\r\n                    element: $(document), left: 0, top: 0,\r\n                    width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight\r\n                };\r\n            }\r\n\r\n            // i'm a node, so compute top, left, right, bottom\r\n            else {\r\n                element = $(ce);\r\n                p = [];\r\n                $([\"Top\", \"Right\", \"Left\", \"Bottom\"]).each(function (i, name) {\r\n                    p[i] = num(element.css(\"padding\" + name));\r\n                });\r\n\r\n                that.containerOffset = element.offset();\r\n                that.containerPosition = element.position();\r\n                that.containerSize = {height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1])};\r\n\r\n                co = that.containerOffset;\r\n                ch = that.containerSize.height;\r\n                cw = that.containerSize.width;\r\n                width = ($.ui.hasScroll(ce, \"left\") ? ce.scrollWidth : cw);\r\n                height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);\r\n\r\n                that.parentData = {\r\n                    element: ce, left: co.left, top: co.top, width: width, height: height\r\n                };\r\n            }\r\n        },\r\n\r\n        resize: function (event) {\r\n            var woset, hoset, isParent, isOffsetRelative,\r\n                that = $(this).data(\"ui-resizable\"),\r\n                o = that.options,\r\n                co = that.containerOffset, cp = that.position,\r\n                pRatio = that._aspectRatio || event.shiftKey,\r\n                cop = {top: 0, left: 0}, ce = that.containerElement;\r\n\r\n            if (ce[0] !== document && (/static/).test(ce.css(\"position\"))) {\r\n                cop = co;\r\n            }\r\n\r\n            if (cp.left < (that._helper ? co.left : 0)) {\r\n                that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));\r\n                if (pRatio) {\r\n                    that.size.height = that.size.width / that.aspectRatio;\r\n                }\r\n                that.position.left = o.helper ? co.left : 0;\r\n            }\r\n\r\n            if (cp.top < (that._helper ? co.top : 0)) {\r\n                that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);\r\n                if (pRatio) {\r\n                    that.size.width = that.size.height * that.aspectRatio;\r\n                }\r\n                that.position.top = that._helper ? co.top : 0;\r\n            }\r\n\r\n            that.offset.left = that.parentData.left + that.position.left;\r\n            that.offset.top = that.parentData.top + that.position.top;\r\n\r\n            woset = Math.abs((that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width);\r\n            hoset = Math.abs((that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height);\r\n\r\n            isParent = that.containerElement.get(0) === that.element.parent().get(0);\r\n            isOffsetRelative = /relative|absolute/.test(that.containerElement.css(\"position\"));\r\n\r\n            if (isParent && isOffsetRelative) {\r\n                woset -= Math.abs(that.parentData.left);\r\n            }\r\n\r\n            if (woset + that.size.width >= that.parentData.width) {\r\n                that.size.width = that.parentData.width - woset;\r\n                if (pRatio) {\r\n                    that.size.height = that.size.width / that.aspectRatio;\r\n                }\r\n            }\r\n\r\n            if (hoset + that.size.height >= that.parentData.height) {\r\n                that.size.height = that.parentData.height - hoset;\r\n                if (pRatio) {\r\n                    that.size.width = that.size.height * that.aspectRatio;\r\n                }\r\n            }\r\n        },\r\n\r\n        stop: function () {\r\n            var that = $(this).data(\"ui-resizable\"),\r\n                o = that.options,\r\n                co = that.containerOffset,\r\n                cop = that.containerPosition,\r\n                ce = that.containerElement,\r\n                helper = $(that.helper),\r\n                ho = helper.offset(),\r\n                w = helper.outerWidth() - that.sizeDiff.width,\r\n                h = helper.outerHeight() - that.sizeDiff.height;\r\n\r\n            if (that._helper && !o.animate && (/relative/).test(ce.css(\"position\"))) {\r\n                $(this).css({left: ho.left - cop.left - co.left, width: w, height: h});\r\n            }\r\n\r\n            if (that._helper && !o.animate && (/static/).test(ce.css(\"position\"))) {\r\n                $(this).css({left: ho.left - cop.left - co.left, width: w, height: h});\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    $.ui.plugin.add(\"resizable\", \"alsoResize\", {\r\n\r\n        start: function () {\r\n            var that = $(this).data(\"ui-resizable\"),\r\n                o = that.options,\r\n                _store = function (exp) {\r\n                    $(exp).each(function () {\r\n                        var el = $(this);\r\n                        el.data(\"ui-resizable-alsoresize\", {\r\n                            width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),\r\n                            left: parseInt(el.css(\"left\"), 10), top: parseInt(el.css(\"top\"), 10)\r\n                        });\r\n                    });\r\n                };\r\n\r\n            if (typeof (o.alsoResize) === \"object\" && !o.alsoResize.parentNode) {\r\n                if (o.alsoResize.length) {\r\n                    o.alsoResize = o.alsoResize[0];\r\n                    _store(o.alsoResize);\r\n                } else {\r\n                    $.each(o.alsoResize, function (exp) {\r\n                        _store(exp);\r\n                    });\r\n                }\r\n            } else {\r\n                _store(o.alsoResize);\r\n            }\r\n        },\r\n\r\n        resize: function (event, ui) {\r\n            var that = $(this).data(\"ui-resizable\"),\r\n                o = that.options,\r\n                os = that.originalSize,\r\n                op = that.originalPosition,\r\n                delta = {\r\n                    height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,\r\n                    top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0\r\n                },\r\n\r\n                _alsoResize = function (exp, c) {\r\n                    $(exp).each(function () {\r\n                        var el = $(this), start = $(this).data(\"ui-resizable-alsoresize\"), style = {},\r\n                            css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? [\"width\", \"height\"] : [\"width\", \"height\", \"top\", \"left\"];\r\n\r\n                        $.each(css, function (i, prop) {\r\n                            var sum = (start[prop] || 0) + (delta[prop] || 0);\r\n                            if (sum && sum >= 0) {\r\n                                style[prop] = sum || null;\r\n                            }\r\n                        });\r\n\r\n                        el.css(style);\r\n                    });\r\n                };\r\n\r\n            if (typeof (o.alsoResize) === \"object\" && !o.alsoResize.nodeType) {\r\n                $.each(o.alsoResize, function (exp, c) {\r\n                    _alsoResize(exp, c);\r\n                });\r\n            } else {\r\n                _alsoResize(o.alsoResize);\r\n            }\r\n        },\r\n\r\n        stop: function () {\r\n            $(this).removeData(\"resizable-alsoresize\");\r\n        }\r\n    });\r\n\r\n    $.ui.plugin.add(\"resizable\", \"ghost\", {\r\n\r\n        start: function () {\r\n\r\n            var that = $(this).data(\"ui-resizable\"), o = that.options, cs = that.size;\r\n\r\n            that.ghost = that.originalElement.clone();\r\n            that.ghost\r\n                .css({\r\n                    opacity: 0.25,\r\n                    display: \"block\",\r\n                    position: \"relative\",\r\n                    height: cs.height,\r\n                    width: cs.width,\r\n                    margin: 0,\r\n                    left: 0,\r\n                    top: 0\r\n                })\r\n                .addClass(\"ui-resizable-ghost\")\r\n                .addClass(typeof o.ghost === \"string\" ? o.ghost : \"\");\r\n\r\n            that.ghost.appendTo(that.helper);\r\n\r\n        },\r\n\r\n        resize: function () {\r\n            var that = $(this).data(\"ui-resizable\");\r\n            if (that.ghost) {\r\n                that.ghost.css({position: \"relative\", height: that.size.height, width: that.size.width});\r\n            }\r\n        },\r\n\r\n        stop: function () {\r\n            var that = $(this).data(\"ui-resizable\");\r\n            if (that.ghost && that.helper) {\r\n                that.helper.get(0).removeChild(that.ghost.get(0));\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    $.ui.plugin.add(\"resizable\", \"grid\", {\r\n\r\n        resize: function () {\r\n            var that = $(this).data(\"ui-resizable\"),\r\n                o = that.options,\r\n                cs = that.size,\r\n                os = that.originalSize,\r\n                op = that.originalPosition,\r\n                a = that.axis,\r\n                grid = typeof o.grid === \"number\" ? [o.grid, o.grid] : o.grid,\r\n                gridX = (grid[0] || 1),\r\n                gridY = (grid[1] || 1),\r\n                ox = Math.round((cs.width - os.width) / gridX) * gridX,\r\n                oy = Math.round((cs.height - os.height) / gridY) * gridY,\r\n                newWidth = os.width + ox,\r\n                newHeight = os.height + oy,\r\n                isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),\r\n                isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),\r\n                isMinWidth = o.minWidth && (o.minWidth > newWidth),\r\n                isMinHeight = o.minHeight && (o.minHeight > newHeight);\r\n\r\n            o.grid = grid;\r\n\r\n            if (isMinWidth) {\r\n                newWidth = newWidth + gridX;\r\n            }\r\n            if (isMinHeight) {\r\n                newHeight = newHeight + gridY;\r\n            }\r\n            if (isMaxWidth) {\r\n                newWidth = newWidth - gridX;\r\n            }\r\n            if (isMaxHeight) {\r\n                newHeight = newHeight - gridY;\r\n            }\r\n\r\n            if (/^(se|s|e)$/.test(a)) {\r\n                that.size.width = newWidth;\r\n                that.size.height = newHeight;\r\n            } else if (/^(ne)$/.test(a)) {\r\n                that.size.width = newWidth;\r\n                that.size.height = newHeight;\r\n                that.position.top = op.top - oy;\r\n            } else if (/^(sw)$/.test(a)) {\r\n                that.size.width = newWidth;\r\n                that.size.height = newHeight;\r\n                that.position.left = op.left - ox;\r\n            } else {\r\n                if (newHeight - gridY > 0) {\r\n                    that.size.height = newHeight;\r\n                    that.position.top = op.top - oy;\r\n                } else {\r\n                    that.size.height = gridY;\r\n                    that.position.top = op.top + os.height - gridY;\r\n                }\r\n                if (newWidth - gridX > 0) {\r\n                    that.size.width = newWidth;\r\n                    that.position.left = op.left - ox;\r\n                } else {\r\n                    that.size.width = gridX;\r\n                    that.position.left = op.left + os.width - gridX;\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n});\r\n","jquery/ui-modules/selectable.js":"/*!\r\n * jQuery UI Selectable - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/selectable/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/core',\r\n    'jquery-ui-modules/mouse'\r\n], function ($, undefined) {\r\n\r\n    $.widget(\"ui.selectable\", $.ui.mouse, {\r\n        version: \"1.10.4\",\r\n        options: {\r\n            appendTo: \"body\",\r\n            autoRefresh: true,\r\n            distance: 0,\r\n            filter: \"*\",\r\n            tolerance: \"touch\",\r\n\r\n            // callbacks\r\n            selected: null,\r\n            selecting: null,\r\n            start: null,\r\n            stop: null,\r\n            unselected: null,\r\n            unselecting: null\r\n        },\r\n        _create: function () {\r\n            var selectees,\r\n                that = this;\r\n\r\n            this.element.addClass(\"ui-selectable\");\r\n\r\n            this.dragged = false;\r\n\r\n            // cache selectee children based on filter\r\n            this.refresh = function () {\r\n                selectees = $(that.options.filter, that.element[0]);\r\n                selectees.addClass(\"ui-selectee\");\r\n                selectees.each(function () {\r\n                    var $this = $(this),\r\n                        pos = $this.offset();\r\n                    $.data(this, \"selectable-item\", {\r\n                        element: this,\r\n                        $element: $this,\r\n                        left: pos.left,\r\n                        top: pos.top,\r\n                        right: pos.left + $this.outerWidth(),\r\n                        bottom: pos.top + $this.outerHeight(),\r\n                        startselected: false,\r\n                        selected: $this.hasClass(\"ui-selected\"),\r\n                        selecting: $this.hasClass(\"ui-selecting\"),\r\n                        unselecting: $this.hasClass(\"ui-unselecting\")\r\n                    });\r\n                });\r\n            };\r\n            this.refresh();\r\n\r\n            this.selectees = selectees.addClass(\"ui-selectee\");\r\n\r\n            this._mouseInit();\r\n\r\n            this.helper = $(\"<div class='ui-selectable-helper'></div>\");\r\n        },\r\n\r\n        _destroy: function () {\r\n            this.selectees\r\n                .removeClass(\"ui-selectee\")\r\n                .removeData(\"selectable-item\");\r\n            this.element\r\n                .removeClass(\"ui-selectable ui-selectable-disabled\");\r\n            this._mouseDestroy();\r\n        },\r\n\r\n        _mouseStart: function (event) {\r\n            var that = this,\r\n                options = this.options;\r\n\r\n            this.opos = [event.pageX, event.pageY];\r\n\r\n            if (this.options.disabled) {\r\n                return;\r\n            }\r\n\r\n            this.selectees = $(options.filter, this.element[0]);\r\n\r\n            this._trigger(\"start\", event);\r\n\r\n            $(options.appendTo).append(this.helper);\r\n            // position helper (lasso)\r\n            this.helper.css({\r\n                \"left\": event.pageX,\r\n                \"top\": event.pageY,\r\n                \"width\": 0,\r\n                \"height\": 0\r\n            });\r\n\r\n            if (options.autoRefresh) {\r\n                this.refresh();\r\n            }\r\n\r\n            this.selectees.filter(\".ui-selected\").each(function () {\r\n                var selectee = $.data(this, \"selectable-item\");\r\n                selectee.startselected = true;\r\n                if (!event.metaKey && !event.ctrlKey) {\r\n                    selectee.$element.removeClass(\"ui-selected\");\r\n                    selectee.selected = false;\r\n                    selectee.$element.addClass(\"ui-unselecting\");\r\n                    selectee.unselecting = true;\r\n                    // selectable UNSELECTING callback\r\n                    that._trigger(\"unselecting\", event, {\r\n                        unselecting: selectee.element\r\n                    });\r\n                }\r\n            });\r\n\r\n            $(event.target).parents().addBack().each(function () {\r\n                var doSelect,\r\n                    selectee = $.data(this, \"selectable-item\");\r\n                if (selectee) {\r\n                    doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass(\"ui-selected\");\r\n                    selectee.$element\r\n                        .removeClass(doSelect ? \"ui-unselecting\" : \"ui-selected\")\r\n                        .addClass(doSelect ? \"ui-selecting\" : \"ui-unselecting\");\r\n                    selectee.unselecting = !doSelect;\r\n                    selectee.selecting = doSelect;\r\n                    selectee.selected = doSelect;\r\n                    // selectable (UN)SELECTING callback\r\n                    if (doSelect) {\r\n                        that._trigger(\"selecting\", event, {\r\n                            selecting: selectee.element\r\n                        });\r\n                    } else {\r\n                        that._trigger(\"unselecting\", event, {\r\n                            unselecting: selectee.element\r\n                        });\r\n                    }\r\n                    return false;\r\n                }\r\n            });\r\n\r\n        },\r\n\r\n        _mouseDrag: function (event) {\r\n\r\n            this.dragged = true;\r\n\r\n            if (this.options.disabled) {\r\n                return;\r\n            }\r\n\r\n            var tmp,\r\n                that = this,\r\n                options = this.options,\r\n                x1 = this.opos[0],\r\n                y1 = this.opos[1],\r\n                x2 = event.pageX,\r\n                y2 = event.pageY;\r\n\r\n            if (x1 > x2) {\r\n                tmp = x2;\r\n                x2 = x1;\r\n                x1 = tmp;\r\n            }\r\n            if (y1 > y2) {\r\n                tmp = y2;\r\n                y2 = y1;\r\n                y1 = tmp;\r\n            }\r\n            this.helper.css({left: x1, top: y1, width: x2 - x1, height: y2 - y1});\r\n\r\n            this.selectees.each(function () {\r\n                var selectee = $.data(this, \"selectable-item\"),\r\n                    hit = false;\r\n\r\n                //prevent helper from being selected if appendTo: selectable\r\n                if (!selectee || selectee.element === that.element[0]) {\r\n                    return;\r\n                }\r\n\r\n                if (options.tolerance === \"touch\") {\r\n                    hit = (!(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1));\r\n                } else if (options.tolerance === \"fit\") {\r\n                    hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);\r\n                }\r\n\r\n                if (hit) {\r\n                    // SELECT\r\n                    if (selectee.selected) {\r\n                        selectee.$element.removeClass(\"ui-selected\");\r\n                        selectee.selected = false;\r\n                    }\r\n                    if (selectee.unselecting) {\r\n                        selectee.$element.removeClass(\"ui-unselecting\");\r\n                        selectee.unselecting = false;\r\n                    }\r\n                    if (!selectee.selecting) {\r\n                        selectee.$element.addClass(\"ui-selecting\");\r\n                        selectee.selecting = true;\r\n                        // selectable SELECTING callback\r\n                        that._trigger(\"selecting\", event, {\r\n                            selecting: selectee.element\r\n                        });\r\n                    }\r\n                } else {\r\n                    // UNSELECT\r\n                    if (selectee.selecting) {\r\n                        if ((event.metaKey || event.ctrlKey) && selectee.startselected) {\r\n                            selectee.$element.removeClass(\"ui-selecting\");\r\n                            selectee.selecting = false;\r\n                            selectee.$element.addClass(\"ui-selected\");\r\n                            selectee.selected = true;\r\n                        } else {\r\n                            selectee.$element.removeClass(\"ui-selecting\");\r\n                            selectee.selecting = false;\r\n                            if (selectee.startselected) {\r\n                                selectee.$element.addClass(\"ui-unselecting\");\r\n                                selectee.unselecting = true;\r\n                            }\r\n                            // selectable UNSELECTING callback\r\n                            that._trigger(\"unselecting\", event, {\r\n                                unselecting: selectee.element\r\n                            });\r\n                        }\r\n                    }\r\n                    if (selectee.selected) {\r\n                        if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {\r\n                            selectee.$element.removeClass(\"ui-selected\");\r\n                            selectee.selected = false;\r\n\r\n                            selectee.$element.addClass(\"ui-unselecting\");\r\n                            selectee.unselecting = true;\r\n                            // selectable UNSELECTING callback\r\n                            that._trigger(\"unselecting\", event, {\r\n                                unselecting: selectee.element\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            return false;\r\n        },\r\n\r\n        _mouseStop: function (event) {\r\n            var that = this;\r\n\r\n            this.dragged = false;\r\n\r\n            $(\".ui-unselecting\", this.element[0]).each(function () {\r\n                var selectee = $.data(this, \"selectable-item\");\r\n                selectee.$element.removeClass(\"ui-unselecting\");\r\n                selectee.unselecting = false;\r\n                selectee.startselected = false;\r\n                that._trigger(\"unselected\", event, {\r\n                    unselected: selectee.element\r\n                });\r\n            });\r\n            $(\".ui-selecting\", this.element[0]).each(function () {\r\n                var selectee = $.data(this, \"selectable-item\");\r\n                selectee.$element.removeClass(\"ui-selecting\").addClass(\"ui-selected\");\r\n                selectee.selecting = false;\r\n                selectee.selected = true;\r\n                selectee.startselected = true;\r\n                that._trigger(\"selected\", event, {\r\n                    selected: selectee.element\r\n                });\r\n            });\r\n            this._trigger(\"stop\", event);\r\n\r\n            this.helper.remove();\r\n\r\n            return false;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n","jquery/ui-modules/slider.js":"/*!\r\n * jQuery UI Slider - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/slider/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/core',\r\n    'jquery-ui-modules/mouse'\r\n], function ($, undefined) {\r\n\r\n// number of pages in a slider\r\n// (how many times can you page up/down to go through the whole range)\r\n    var numPages = 5;\r\n\r\n    $.widget(\"ui.slider\", $.ui.mouse, {\r\n        version: \"1.10.4\",\r\n        widgetEventPrefix: \"slide\",\r\n\r\n        options: {\r\n            animate: false,\r\n            distance: 0,\r\n            max: 100,\r\n            min: 0,\r\n            orientation: \"horizontal\",\r\n            range: false,\r\n            step: 1,\r\n            value: 0,\r\n            values: null,\r\n\r\n            // callbacks\r\n            change: null,\r\n            slide: null,\r\n            start: null,\r\n            stop: null\r\n        },\r\n\r\n        _create: function () {\r\n            this._keySliding = false;\r\n            this._mouseSliding = false;\r\n            this._animateOff = true;\r\n            this._handleIndex = null;\r\n            this._detectOrientation();\r\n            this._mouseInit();\r\n\r\n            this.element\r\n                .addClass(\"ui-slider\" +\r\n                    \" ui-slider-\" + this.orientation +\r\n                    \" ui-widget\" +\r\n                    \" ui-widget-content\" +\r\n                    \" ui-corner-all\");\r\n\r\n            this._refresh();\r\n            this._setOption(\"disabled\", this.options.disabled);\r\n\r\n            this._animateOff = false;\r\n        },\r\n\r\n        _refresh: function () {\r\n            this._createRange();\r\n            this._createHandles();\r\n            this._setupEvents();\r\n            this._refreshValue();\r\n        },\r\n\r\n        _createHandles: function () {\r\n            var i, handleCount,\r\n                options = this.options,\r\n                existingHandles = this.element.find(\".ui-slider-handle\").addClass(\"ui-state-default ui-corner-all\"),\r\n                handle = \"<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>\",\r\n                handles = [];\r\n\r\n            handleCount = (options.values && options.values.length) || 1;\r\n\r\n            if (existingHandles.length > handleCount) {\r\n                existingHandles.slice(handleCount).remove();\r\n                existingHandles = existingHandles.slice(0, handleCount);\r\n            }\r\n\r\n            for (i = existingHandles.length; i < handleCount; i++) {\r\n                handles.push(handle);\r\n            }\r\n\r\n            this.handles = existingHandles.add($(handles.join(\"\")).appendTo(this.element));\r\n\r\n            this.handle = this.handles.eq(0);\r\n\r\n            this.handles.each(function (i) {\r\n                $(this).data(\"ui-slider-handle-index\", i);\r\n            });\r\n        },\r\n\r\n        _createRange: function () {\r\n            var options = this.options,\r\n                classes = \"\";\r\n\r\n            if (options.range) {\r\n                if (options.range === true) {\r\n                    if (!options.values) {\r\n                        options.values = [this._valueMin(), this._valueMin()];\r\n                    } else if (options.values.length && options.values.length !== 2) {\r\n                        options.values = [options.values[0], options.values[0]];\r\n                    } else if ($.isArray(options.values)) {\r\n                        options.values = options.values.slice(0);\r\n                    }\r\n                }\r\n\r\n                if (!this.range || !this.range.length) {\r\n                    this.range = $(\"<div></div>\")\r\n                        .appendTo(this.element);\r\n\r\n                    classes = \"ui-slider-range\" +\r\n                        // note: this isn't the most fittingly semantic framework class for this element,\r\n                        // but worked best visually with a variety of themes\r\n                        \" ui-widget-header ui-corner-all\";\r\n                } else {\r\n                    this.range.removeClass(\"ui-slider-range-min ui-slider-range-max\")\r\n                    // Handle range switching from true to min/max\r\n                        .css({\r\n                            \"left\": \"\",\r\n                            \"bottom\": \"\"\r\n                        });\r\n                }\r\n\r\n                this.range.addClass(classes +\r\n                    ((options.range === \"min\" || options.range === \"max\") ? \" ui-slider-range-\" + options.range : \"\"));\r\n            } else {\r\n                if (this.range) {\r\n                    this.range.remove();\r\n                }\r\n                this.range = null;\r\n            }\r\n        },\r\n\r\n        _setupEvents: function () {\r\n            var elements = this.handles.add(this.range).filter(\"a\");\r\n            this._off(elements);\r\n            this._on(elements, this._handleEvents);\r\n            this._hoverable(elements);\r\n            this._focusable(elements);\r\n        },\r\n\r\n        _destroy: function () {\r\n            this.handles.remove();\r\n            if (this.range) {\r\n                this.range.remove();\r\n            }\r\n\r\n            this.element\r\n                .removeClass(\"ui-slider\" +\r\n                    \" ui-slider-horizontal\" +\r\n                    \" ui-slider-vertical\" +\r\n                    \" ui-widget\" +\r\n                    \" ui-widget-content\" +\r\n                    \" ui-corner-all\");\r\n\r\n            this._mouseDestroy();\r\n        },\r\n\r\n        _mouseCapture: function (event) {\r\n            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,\r\n                that = this,\r\n                o = this.options;\r\n\r\n            if (o.disabled) {\r\n                return false;\r\n            }\r\n\r\n            this.elementSize = {\r\n                width: this.element.outerWidth(),\r\n                height: this.element.outerHeight()\r\n            };\r\n            this.elementOffset = this.element.offset();\r\n\r\n            position = {x: event.pageX, y: event.pageY};\r\n            normValue = this._normValueFromMouse(position);\r\n            distance = this._valueMax() - this._valueMin() + 1;\r\n            this.handles.each(function (i) {\r\n                var thisDistance = Math.abs(normValue - that.values(i));\r\n                if ((distance > thisDistance) ||\r\n                    (distance === thisDistance &&\r\n                        (i === that._lastChangedValue || that.values(i) === o.min))) {\r\n                    distance = thisDistance;\r\n                    closestHandle = $(this);\r\n                    index = i;\r\n                }\r\n            });\r\n\r\n            allowed = this._start(event, index);\r\n            if (allowed === false) {\r\n                return false;\r\n            }\r\n            this._mouseSliding = true;\r\n\r\n            this._handleIndex = index;\r\n\r\n            closestHandle\r\n                .addClass(\"ui-state-active\")\r\n                .focus();\r\n\r\n            offset = closestHandle.offset();\r\n            mouseOverHandle = !$(event.target).parents().addBack().is(\".ui-slider-handle\");\r\n            this._clickOffset = mouseOverHandle ? {left: 0, top: 0} : {\r\n                left: event.pageX - offset.left - (closestHandle.width() / 2),\r\n                top: event.pageY - offset.top -\r\n                    (closestHandle.height() / 2) -\r\n                    (parseInt(closestHandle.css(\"borderTopWidth\"), 10) || 0) -\r\n                    (parseInt(closestHandle.css(\"borderBottomWidth\"), 10) || 0) +\r\n                    (parseInt(closestHandle.css(\"marginTop\"), 10) || 0)\r\n            };\r\n\r\n            if (!this.handles.hasClass(\"ui-state-hover\")) {\r\n                this._slide(event, index, normValue);\r\n            }\r\n            this._animateOff = true;\r\n            return true;\r\n        },\r\n\r\n        _mouseStart: function () {\r\n            return true;\r\n        },\r\n\r\n        _mouseDrag: function (event) {\r\n            var position = {x: event.pageX, y: event.pageY},\r\n                normValue = this._normValueFromMouse(position);\r\n\r\n            this._slide(event, this._handleIndex, normValue);\r\n\r\n            return false;\r\n        },\r\n\r\n        _mouseStop: function (event) {\r\n            this.handles.removeClass(\"ui-state-active\");\r\n            this._mouseSliding = false;\r\n\r\n            this._stop(event, this._handleIndex);\r\n            this._change(event, this._handleIndex);\r\n\r\n            this._handleIndex = null;\r\n            this._clickOffset = null;\r\n            this._animateOff = false;\r\n\r\n            return false;\r\n        },\r\n\r\n        _detectOrientation: function () {\r\n            this.orientation = (this.options.orientation === \"vertical\") ? \"vertical\" : \"horizontal\";\r\n        },\r\n\r\n        _normValueFromMouse: function (position) {\r\n            var pixelTotal,\r\n                pixelMouse,\r\n                percentMouse,\r\n                valueTotal,\r\n                valueMouse;\r\n\r\n            if (this.orientation === \"horizontal\") {\r\n                pixelTotal = this.elementSize.width;\r\n                pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);\r\n            } else {\r\n                pixelTotal = this.elementSize.height;\r\n                pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);\r\n            }\r\n\r\n            percentMouse = (pixelMouse / pixelTotal);\r\n            if (percentMouse > 1) {\r\n                percentMouse = 1;\r\n            }\r\n            if (percentMouse < 0) {\r\n                percentMouse = 0;\r\n            }\r\n            if (this.orientation === \"vertical\") {\r\n                percentMouse = 1 - percentMouse;\r\n            }\r\n\r\n            valueTotal = this._valueMax() - this._valueMin();\r\n            valueMouse = this._valueMin() + percentMouse * valueTotal;\r\n\r\n            return this._trimAlignValue(valueMouse);\r\n        },\r\n\r\n        _start: function (event, index) {\r\n            var uiHash = {\r\n                handle: this.handles[index],\r\n                value: this.value()\r\n            };\r\n            if (this.options.values && this.options.values.length) {\r\n                uiHash.value = this.values(index);\r\n                uiHash.values = this.values();\r\n            }\r\n            return this._trigger(\"start\", event, uiHash);\r\n        },\r\n\r\n        _slide: function (event, index, newVal) {\r\n            var otherVal,\r\n                newValues,\r\n                allowed;\r\n\r\n            if (this.options.values && this.options.values.length) {\r\n                otherVal = this.values(index ? 0 : 1);\r\n\r\n                if ((this.options.values.length === 2 && this.options.range === true) &&\r\n                    ((index === 0 && newVal > otherVal) || (index === 1 && newVal < otherVal))\r\n                ) {\r\n                    newVal = otherVal;\r\n                }\r\n\r\n                if (newVal !== this.values(index)) {\r\n                    newValues = this.values();\r\n                    newValues[index] = newVal;\r\n                    // A slide can be canceled by returning false from the slide callback\r\n                    allowed = this._trigger(\"slide\", event, {\r\n                        handle: this.handles[index],\r\n                        value: newVal,\r\n                        values: newValues\r\n                    });\r\n                    otherVal = this.values(index ? 0 : 1);\r\n                    if (allowed !== false) {\r\n                        this.values(index, newVal);\r\n                    }\r\n                }\r\n            } else {\r\n                if (newVal !== this.value()) {\r\n                    // A slide can be canceled by returning false from the slide callback\r\n                    allowed = this._trigger(\"slide\", event, {\r\n                        handle: this.handles[index],\r\n                        value: newVal\r\n                    });\r\n                    if (allowed !== false) {\r\n                        this.value(newVal);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _stop: function (event, index) {\r\n            var uiHash = {\r\n                handle: this.handles[index],\r\n                value: this.value()\r\n            };\r\n            if (this.options.values && this.options.values.length) {\r\n                uiHash.value = this.values(index);\r\n                uiHash.values = this.values();\r\n            }\r\n\r\n            this._trigger(\"stop\", event, uiHash);\r\n        },\r\n\r\n        _change: function (event, index) {\r\n            if (!this._keySliding && !this._mouseSliding) {\r\n                var uiHash = {\r\n                    handle: this.handles[index],\r\n                    value: this.value()\r\n                };\r\n                if (this.options.values && this.options.values.length) {\r\n                    uiHash.value = this.values(index);\r\n                    uiHash.values = this.values();\r\n                }\r\n\r\n                //store the last changed value index for reference when handles overlap\r\n                this._lastChangedValue = index;\r\n\r\n                this._trigger(\"change\", event, uiHash);\r\n            }\r\n        },\r\n\r\n        value: function (newValue) {\r\n            if (arguments.length) {\r\n                this.options.value = this._trimAlignValue(newValue);\r\n                this._refreshValue();\r\n                this._change(null, 0);\r\n                return;\r\n            }\r\n\r\n            return this._value();\r\n        },\r\n\r\n        values: function (index, newValue) {\r\n            var vals,\r\n                newValues,\r\n                i;\r\n\r\n            if (arguments.length > 1) {\r\n                this.options.values[index] = this._trimAlignValue(newValue);\r\n                this._refreshValue();\r\n                this._change(null, index);\r\n                return;\r\n            }\r\n\r\n            if (arguments.length) {\r\n                if ($.isArray(arguments[0])) {\r\n                    vals = this.options.values;\r\n                    newValues = arguments[0];\r\n                    for (i = 0; i < vals.length; i += 1) {\r\n                        vals[i] = this._trimAlignValue(newValues[i]);\r\n                        this._change(null, i);\r\n                    }\r\n                    this._refreshValue();\r\n                } else {\r\n                    if (this.options.values && this.options.values.length) {\r\n                        return this._values(index);\r\n                    } else {\r\n                        return this.value();\r\n                    }\r\n                }\r\n            } else {\r\n                return this._values();\r\n            }\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            var i,\r\n                valsLength = 0;\r\n\r\n            if (key === \"range\" && this.options.range === true) {\r\n                if (value === \"min\") {\r\n                    this.options.value = this._values(0);\r\n                    this.options.values = null;\r\n                } else if (value === \"max\") {\r\n                    this.options.value = this._values(this.options.values.length - 1);\r\n                    this.options.values = null;\r\n                }\r\n            }\r\n\r\n            if ($.isArray(this.options.values)) {\r\n                valsLength = this.options.values.length;\r\n            }\r\n\r\n            $.Widget.prototype._setOption.apply(this, arguments);\r\n\r\n            switch (key) {\r\n                case \"orientation\":\r\n                    this._detectOrientation();\r\n                    this.element\r\n                        .removeClass(\"ui-slider-horizontal ui-slider-vertical\")\r\n                        .addClass(\"ui-slider-\" + this.orientation);\r\n                    this._refreshValue();\r\n                    break;\r\n                case \"value\":\r\n                    this._animateOff = true;\r\n                    this._refreshValue();\r\n                    this._change(null, 0);\r\n                    this._animateOff = false;\r\n                    break;\r\n                case \"values\":\r\n                    this._animateOff = true;\r\n                    this._refreshValue();\r\n                    for (i = 0; i < valsLength; i += 1) {\r\n                        this._change(null, i);\r\n                    }\r\n                    this._animateOff = false;\r\n                    break;\r\n                case \"min\":\r\n                case \"max\":\r\n                    this._animateOff = true;\r\n                    this._refreshValue();\r\n                    this._animateOff = false;\r\n                    break;\r\n                case \"range\":\r\n                    this._animateOff = true;\r\n                    this._refresh();\r\n                    this._animateOff = false;\r\n                    break;\r\n            }\r\n        },\r\n\r\n        //internal value getter\r\n        // _value() returns value trimmed by min and max, aligned by step\r\n        _value: function () {\r\n            var val = this.options.value;\r\n            val = this._trimAlignValue(val);\r\n\r\n            return val;\r\n        },\r\n\r\n        //internal values getter\r\n        // _values() returns array of values trimmed by min and max, aligned by step\r\n        // _values( index ) returns single value trimmed by min and max, aligned by step\r\n        _values: function (index) {\r\n            var val,\r\n                vals,\r\n                i;\r\n\r\n            if (arguments.length) {\r\n                val = this.options.values[index];\r\n                val = this._trimAlignValue(val);\r\n\r\n                return val;\r\n            } else if (this.options.values && this.options.values.length) {\r\n                // .slice() creates a copy of the array\r\n                // this copy gets trimmed by min and max and then returned\r\n                vals = this.options.values.slice();\r\n                for (i = 0; i < vals.length; i += 1) {\r\n                    vals[i] = this._trimAlignValue(vals[i]);\r\n                }\r\n\r\n                return vals;\r\n            } else {\r\n                return [];\r\n            }\r\n        },\r\n\r\n        // returns the step-aligned value that val is closest to, between (inclusive) min and max\r\n        _trimAlignValue: function (val) {\r\n            if (val <= this._valueMin()) {\r\n                return this._valueMin();\r\n            }\r\n            if (val >= this._valueMax()) {\r\n                return this._valueMax();\r\n            }\r\n            var step = (this.options.step > 0) ? this.options.step : 1,\r\n                valModStep = (val - this._valueMin()) % step,\r\n                alignValue = val - valModStep;\r\n\r\n            if (Math.abs(valModStep) * 2 >= step) {\r\n                alignValue += (valModStep > 0) ? step : (-step);\r\n            }\r\n\r\n            // Since JavaScript has problems with large floats, round\r\n            // the final value to 5 digits after the decimal point (see #4124)\r\n            return parseFloat(alignValue.toFixed(5));\r\n        },\r\n\r\n        _valueMin: function () {\r\n            return this.options.min;\r\n        },\r\n\r\n        _valueMax: function () {\r\n            return this.options.max;\r\n        },\r\n\r\n        _refreshValue: function () {\r\n            var lastValPercent, valPercent, value, valueMin, valueMax,\r\n                oRange = this.options.range,\r\n                o = this.options,\r\n                that = this,\r\n                animate = (!this._animateOff) ? o.animate : false,\r\n                _set = {};\r\n\r\n            if (this.options.values && this.options.values.length) {\r\n                this.handles.each(function (i) {\r\n                    valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;\r\n                    _set[that.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\r\n                    $(this).stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\r\n                    if (that.options.range === true) {\r\n                        if (that.orientation === \"horizontal\") {\r\n                            if (i === 0) {\r\n                                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({left: valPercent + \"%\"}, o.animate);\r\n                            }\r\n                            if (i === 1) {\r\n                                that.range[animate ? \"animate\" : \"css\"]({width: (valPercent - lastValPercent) + \"%\"}, {\r\n                                    queue: false,\r\n                                    duration: o.animate\r\n                                });\r\n                            }\r\n                        } else {\r\n                            if (i === 0) {\r\n                                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({bottom: (valPercent) + \"%\"}, o.animate);\r\n                            }\r\n                            if (i === 1) {\r\n                                that.range[animate ? \"animate\" : \"css\"]({height: (valPercent - lastValPercent) + \"%\"}, {\r\n                                    queue: false,\r\n                                    duration: o.animate\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    lastValPercent = valPercent;\r\n                });\r\n            } else {\r\n                value = this.value();\r\n                valueMin = this._valueMin();\r\n                valueMax = this._valueMax();\r\n                valPercent = (valueMax !== valueMin) ?\r\n                    (value - valueMin) / (valueMax - valueMin) * 100 :\r\n                    0;\r\n                _set[this.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\r\n                this.handle.stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\r\n\r\n                if (oRange === \"min\" && this.orientation === \"horizontal\") {\r\n                    this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({width: valPercent + \"%\"}, o.animate);\r\n                }\r\n                if (oRange === \"max\" && this.orientation === \"horizontal\") {\r\n                    this.range[animate ? \"animate\" : \"css\"]({width: (100 - valPercent) + \"%\"}, {\r\n                        queue: false,\r\n                        duration: o.animate\r\n                    });\r\n                }\r\n                if (oRange === \"min\" && this.orientation === \"vertical\") {\r\n                    this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({height: valPercent + \"%\"}, o.animate);\r\n                }\r\n                if (oRange === \"max\" && this.orientation === \"vertical\") {\r\n                    this.range[animate ? \"animate\" : \"css\"]({height: (100 - valPercent) + \"%\"}, {\r\n                        queue: false,\r\n                        duration: o.animate\r\n                    });\r\n                }\r\n            }\r\n        },\r\n\r\n        _handleEvents: {\r\n            keydown: function (event) {\r\n                var allowed, curVal, newVal, step,\r\n                    index = $(event.target).data(\"ui-slider-handle-index\");\r\n\r\n                switch (event.keyCode) {\r\n                    case $.ui.keyCode.HOME:\r\n                    case $.ui.keyCode.END:\r\n                    case $.ui.keyCode.PAGE_UP:\r\n                    case $.ui.keyCode.PAGE_DOWN:\r\n                    case $.ui.keyCode.UP:\r\n                    case $.ui.keyCode.RIGHT:\r\n                    case $.ui.keyCode.DOWN:\r\n                    case $.ui.keyCode.LEFT:\r\n                        event.preventDefault();\r\n                        if (!this._keySliding) {\r\n                            this._keySliding = true;\r\n                            $(event.target).addClass(\"ui-state-active\");\r\n                            allowed = this._start(event, index);\r\n                            if (allowed === false) {\r\n                                return;\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                step = this.options.step;\r\n                if (this.options.values && this.options.values.length) {\r\n                    curVal = newVal = this.values(index);\r\n                } else {\r\n                    curVal = newVal = this.value();\r\n                }\r\n\r\n                switch (event.keyCode) {\r\n                    case $.ui.keyCode.HOME:\r\n                        newVal = this._valueMin();\r\n                        break;\r\n                    case $.ui.keyCode.END:\r\n                        newVal = this._valueMax();\r\n                        break;\r\n                    case $.ui.keyCode.PAGE_UP:\r\n                        newVal = this._trimAlignValue(curVal + ((this._valueMax() - this._valueMin()) / numPages));\r\n                        break;\r\n                    case $.ui.keyCode.PAGE_DOWN:\r\n                        newVal = this._trimAlignValue(curVal - ((this._valueMax() - this._valueMin()) / numPages));\r\n                        break;\r\n                    case $.ui.keyCode.UP:\r\n                    case $.ui.keyCode.RIGHT:\r\n                        if (curVal === this._valueMax()) {\r\n                            return;\r\n                        }\r\n                        newVal = this._trimAlignValue(curVal + step);\r\n                        break;\r\n                    case $.ui.keyCode.DOWN:\r\n                    case $.ui.keyCode.LEFT:\r\n                        if (curVal === this._valueMin()) {\r\n                            return;\r\n                        }\r\n                        newVal = this._trimAlignValue(curVal - step);\r\n                        break;\r\n                }\r\n\r\n                this._slide(event, index, newVal);\r\n            },\r\n            click: function (event) {\r\n                event.preventDefault();\r\n            },\r\n            keyup: function (event) {\r\n                var index = $(event.target).data(\"ui-slider-handle-index\");\r\n\r\n                if (this._keySliding) {\r\n                    this._keySliding = false;\r\n                    this._stop(event, index);\r\n                    this._change(event, index);\r\n                    $(event.target).removeClass(\"ui-state-active\");\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n});\r\n","jquery/ui-modules/sortable.js":"/*!\r\n * jQuery UI Sortable - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/sortable/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/core',\r\n    'jquery-ui-modules/mouse'\r\n], function ($, undefined) {\r\n\r\n    function isOverAxis(x, reference, size) {\r\n        return (x > reference) && (x < (reference + size));\r\n    }\r\n\r\n    function isFloating(item) {\r\n        return (/left|right/).test(item.css(\"float\")) || (/inline|table-cell/).test(item.css(\"display\"));\r\n    }\r\n\r\n    $.widget(\"ui.sortable\", $.ui.mouse, {\r\n        version: \"1.10.4\",\r\n        widgetEventPrefix: \"sort\",\r\n        ready: false,\r\n        options: {\r\n            appendTo: \"parent\",\r\n            axis: false,\r\n            connectWith: false,\r\n            containment: false,\r\n            cursor: \"auto\",\r\n            cursorAt: false,\r\n            dropOnEmpty: true,\r\n            forcePlaceholderSize: false,\r\n            forceHelperSize: false,\r\n            grid: false,\r\n            handle: false,\r\n            helper: \"original\",\r\n            items: \"> *\",\r\n            opacity: false,\r\n            placeholder: false,\r\n            revert: false,\r\n            scroll: true,\r\n            scrollSensitivity: 20,\r\n            scrollSpeed: 20,\r\n            scope: \"default\",\r\n            tolerance: \"intersect\",\r\n            zIndex: 1000,\r\n\r\n            // callbacks\r\n            activate: null,\r\n            beforeStop: null,\r\n            change: null,\r\n            deactivate: null,\r\n            out: null,\r\n            over: null,\r\n            receive: null,\r\n            remove: null,\r\n            sort: null,\r\n            start: null,\r\n            stop: null,\r\n            update: null\r\n        },\r\n        _create: function () {\r\n\r\n            var o = this.options;\r\n            this.containerCache = {};\r\n            this.element.addClass(\"ui-sortable\");\r\n\r\n            //Get the items\r\n            this.refresh();\r\n\r\n            //Let's determine if the items are being displayed horizontally\r\n            this.floating = this.items.length ? o.axis === \"x\" || isFloating(this.items[0].item) : false;\r\n\r\n            //Let's determine the parent's offset\r\n            this.offset = this.element.offset();\r\n\r\n            //Initialize mouse events for interaction\r\n            this._mouseInit();\r\n\r\n            //We're ready to go\r\n            this.ready = true;\r\n\r\n        },\r\n\r\n        _destroy: function () {\r\n            this.element\r\n                .removeClass(\"ui-sortable ui-sortable-disabled\");\r\n            this._mouseDestroy();\r\n\r\n            for (var i = this.items.length - 1; i >= 0; i--) {\r\n                this.items[i].item.removeData(this.widgetName + \"-item\");\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            if (key === \"disabled\") {\r\n                this.options[key] = value;\r\n\r\n                this.widget().toggleClass(\"ui-sortable-disabled\", !!value);\r\n            } else {\r\n                // Don't call widget base _setOption for disable as it adds ui-state-disabled class\r\n                $.Widget.prototype._setOption.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _mouseCapture: function (event, overrideHandle) {\r\n            var currentItem = null,\r\n                validHandle = false,\r\n                that = this;\r\n\r\n            if (this.reverting) {\r\n                return false;\r\n            }\r\n\r\n            if (this.options.disabled || this.options.type === \"static\") {\r\n                return false;\r\n            }\r\n\r\n            //We have to refresh the items data once first\r\n            this._refreshItems(event);\r\n\r\n            //Find out if the clicked node (or one of its parents) is a actual item in this.items\r\n            $(event.target).parents().each(function () {\r\n                if ($.data(this, that.widgetName + \"-item\") === that) {\r\n                    currentItem = $(this);\r\n                    return false;\r\n                }\r\n            });\r\n            if ($.data(event.target, that.widgetName + \"-item\") === that) {\r\n                currentItem = $(event.target);\r\n            }\r\n\r\n            if (!currentItem) {\r\n                return false;\r\n            }\r\n            if (this.options.handle && !overrideHandle) {\r\n                $(this.options.handle, currentItem).find(\"*\").addBack().each(function () {\r\n                    if (this === event.target) {\r\n                        validHandle = true;\r\n                    }\r\n                });\r\n                if (!validHandle) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            this.currentItem = currentItem;\r\n            this._removeCurrentsFromItems();\r\n            return true;\r\n\r\n        },\r\n\r\n        _mouseStart: function (event, overrideHandle, noActivation) {\r\n\r\n            var i, body,\r\n                o = this.options;\r\n\r\n            this.currentContainer = this;\r\n\r\n            //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture\r\n            this.refreshPositions();\r\n\r\n            //Create and append the visible helper\r\n            this.helper = this._createHelper(event);\r\n\r\n            //Cache the helper size\r\n            this._cacheHelperProportions();\r\n\r\n            /*\r\n             * - Position generation -\r\n             * This block generates everything position related - it's the core of draggables.\r\n             */\r\n\r\n            //Cache the margins of the original element\r\n            this._cacheMargins();\r\n\r\n            //Get the next scrolling parent\r\n            this.scrollParent = this.helper.scrollParent();\r\n\r\n            //The element's absolute position on the page minus margins\r\n            this.offset = this.currentItem.offset();\r\n            this.offset = {\r\n                top: this.offset.top - this.margins.top,\r\n                left: this.offset.left - this.margins.left\r\n            };\r\n\r\n            $.extend(this.offset, {\r\n                click: { //Where the click happened, relative to the element\r\n                    left: event.pageX - this.offset.left,\r\n                    top: event.pageY - this.offset.top\r\n                },\r\n                parent: this._getParentOffset(),\r\n                relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper\r\n            });\r\n\r\n            // Only after we got the offset, we can change the helper's position to absolute\r\n            // TODO: Still need to figure out a way to make relative sorting possible\r\n            this.helper.css(\"position\", \"absolute\");\r\n            this.cssPosition = this.helper.css(\"position\");\r\n\r\n            //Generate the original position\r\n            this.originalPosition = this._generatePosition(event);\r\n            this.originalPageX = event.pageX;\r\n            this.originalPageY = event.pageY;\r\n\r\n            //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\r\n            (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));\r\n\r\n            //Cache the former DOM position\r\n            this.domPosition = {prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0]};\r\n\r\n            //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way\r\n            if (this.helper[0] !== this.currentItem[0]) {\r\n                this.currentItem.hide();\r\n            }\r\n\r\n            //Create the placeholder\r\n            this._createPlaceholder();\r\n\r\n            //Set a containment if given in the options\r\n            if (o.containment) {\r\n                this._setContainment();\r\n            }\r\n\r\n            if (o.cursor && o.cursor !== \"auto\") { // cursor option\r\n                body = this.document.find(\"body\");\r\n\r\n                // support: IE\r\n                this.storedCursor = body.css(\"cursor\");\r\n                body.css(\"cursor\", o.cursor);\r\n\r\n                this.storedStylesheet = $(\"<style>*{ cursor: \" + o.cursor + \" !important; }</style>\").appendTo(body);\r\n            }\r\n\r\n            if (o.opacity) { // opacity option\r\n                if (this.helper.css(\"opacity\")) {\r\n                    this._storedOpacity = this.helper.css(\"opacity\");\r\n                }\r\n                this.helper.css(\"opacity\", o.opacity);\r\n            }\r\n\r\n            if (o.zIndex) { // zIndex option\r\n                if (this.helper.css(\"zIndex\")) {\r\n                    this._storedZIndex = this.helper.css(\"zIndex\");\r\n                }\r\n                this.helper.css(\"zIndex\", o.zIndex);\r\n            }\r\n\r\n            //Prepare scrolling\r\n            if (this.scrollParent[0] !== document && this.scrollParent[0].tagName !== \"HTML\") {\r\n                this.overflowOffset = this.scrollParent.offset();\r\n            }\r\n\r\n            //Call callbacks\r\n            this._trigger(\"start\", event, this._uiHash());\r\n\r\n            //Recache the helper size\r\n            if (!this._preserveHelperProportions) {\r\n                this._cacheHelperProportions();\r\n            }\r\n\r\n\r\n            //Post \"activate\" events to possible containers\r\n            if (!noActivation) {\r\n                for (i = this.containers.length - 1; i >= 0; i--) {\r\n                    this.containers[i]._trigger(\"activate\", event, this._uiHash(this));\r\n                }\r\n            }\r\n\r\n            //Prepare possible droppables\r\n            if ($.ui.ddmanager) {\r\n                $.ui.ddmanager.current = this;\r\n            }\r\n\r\n            if ($.ui.ddmanager && !o.dropBehaviour) {\r\n                $.ui.ddmanager.prepareOffsets(this, event);\r\n            }\r\n\r\n            this.dragging = true;\r\n\r\n            this.helper.addClass(\"ui-sortable-helper\");\r\n            this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position\r\n            return true;\r\n\r\n        },\r\n\r\n        _mouseDrag: function (event) {\r\n            var i, item, itemElement, intersection,\r\n                o = this.options,\r\n                scrolled = false;\r\n\r\n            //Compute the helpers position\r\n            this.position = this._generatePosition(event);\r\n            this.positionAbs = this._convertPositionTo(\"absolute\");\r\n\r\n            if (!this.lastPositionAbs) {\r\n                this.lastPositionAbs = this.positionAbs;\r\n            }\r\n\r\n            //Do scrolling\r\n            if (this.options.scroll) {\r\n                if (this.scrollParent[0] !== document && this.scrollParent[0].tagName !== \"HTML\") {\r\n\r\n                    if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {\r\n                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;\r\n                    } else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {\r\n                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;\r\n                    }\r\n\r\n                    if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {\r\n                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;\r\n                    } else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {\r\n                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;\r\n                    }\r\n\r\n                } else {\r\n\r\n                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {\r\n                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);\r\n                    } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {\r\n                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);\r\n                    }\r\n\r\n                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {\r\n                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);\r\n                    } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {\r\n                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);\r\n                    }\r\n\r\n                }\r\n\r\n                if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\r\n                    $.ui.ddmanager.prepareOffsets(this, event);\r\n                }\r\n            }\r\n\r\n            //Regenerate the absolute position used for position checks\r\n            this.positionAbs = this._convertPositionTo(\"absolute\");\r\n\r\n            //Set the helper position\r\n            if (!this.options.axis || this.options.axis !== \"y\") {\r\n                this.helper[0].style.left = this.position.left + \"px\";\r\n            }\r\n            if (!this.options.axis || this.options.axis !== \"x\") {\r\n                this.helper[0].style.top = this.position.top + \"px\";\r\n            }\r\n\r\n            //Rearrange\r\n            for (i = this.items.length - 1; i >= 0; i--) {\r\n\r\n                //Cache variables and intersection, continue if no intersection\r\n                item = this.items[i];\r\n                itemElement = item.item[0];\r\n                intersection = this._intersectsWithPointer(item);\r\n                if (!intersection) {\r\n                    continue;\r\n                }\r\n\r\n                // Only put the placeholder inside the current Container, skip all\r\n                // items from other containers. This works because when moving\r\n                // an item from one container to another the\r\n                // currentContainer is switched before the placeholder is moved.\r\n                //\r\n                // Without this, moving items in \"sub-sortables\" can cause\r\n                // the placeholder to jitter beetween the outer and inner container.\r\n                if (item.instance !== this.currentContainer) {\r\n                    continue;\r\n                }\r\n\r\n                // cannot intersect with itself\r\n                // no useless actions that have been done before\r\n                // no action if the item moved is the parent of the item checked\r\n                if (itemElement !== this.currentItem[0] &&\r\n                    this.placeholder[intersection === 1 ? \"next\" : \"prev\"]()[0] !== itemElement &&\r\n                    !$.contains(this.placeholder[0], itemElement) &&\r\n                    (this.options.type === \"semi-dynamic\" ? !$.contains(this.element[0], itemElement) : true)\r\n                ) {\r\n\r\n                    this.direction = intersection === 1 ? \"down\" : \"up\";\r\n\r\n                    if (this.options.tolerance === \"pointer\" || this._intersectsWithSides(item)) {\r\n                        this._rearrange(event, item);\r\n                    } else {\r\n                        break;\r\n                    }\r\n\r\n                    this._trigger(\"change\", event, this._uiHash());\r\n                    break;\r\n                }\r\n            }\r\n\r\n            //Post events to containers\r\n            this._contactContainers(event);\r\n\r\n            //Interconnect with droppables\r\n            if ($.ui.ddmanager) {\r\n                $.ui.ddmanager.drag(this, event);\r\n            }\r\n\r\n            //Call callbacks\r\n            this._trigger(\"sort\", event, this._uiHash());\r\n\r\n            this.lastPositionAbs = this.positionAbs;\r\n            return false;\r\n\r\n        },\r\n\r\n        _mouseStop: function (event, noPropagation) {\r\n\r\n            if (!event) {\r\n                return;\r\n            }\r\n\r\n            //If we are using droppables, inform the manager about the drop\r\n            if ($.ui.ddmanager && !this.options.dropBehaviour) {\r\n                $.ui.ddmanager.drop(this, event);\r\n            }\r\n\r\n            if (this.options.revert) {\r\n                var that = this,\r\n                    cur = this.placeholder.offset(),\r\n                    axis = this.options.axis,\r\n                    animation = {};\r\n\r\n                if (!axis || axis === \"x\") {\r\n                    animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);\r\n                }\r\n                if (!axis || axis === \"y\") {\r\n                    animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);\r\n                }\r\n                this.reverting = true;\r\n                $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function () {\r\n                    that._clear(event);\r\n                });\r\n            } else {\r\n                this._clear(event, noPropagation);\r\n            }\r\n\r\n            return false;\r\n\r\n        },\r\n\r\n        cancel: function () {\r\n\r\n            if (this.dragging) {\r\n\r\n                this._mouseUp({target: null});\r\n\r\n                if (this.options.helper === \"original\") {\r\n                    this.currentItem.css(this._storedCSS).removeClass(\"ui-sortable-helper\");\r\n                } else {\r\n                    this.currentItem.show();\r\n                }\r\n\r\n                //Post deactivating events to containers\r\n                for (var i = this.containers.length - 1; i >= 0; i--) {\r\n                    this.containers[i]._trigger(\"deactivate\", null, this._uiHash(this));\r\n                    if (this.containers[i].containerCache.over) {\r\n                        this.containers[i]._trigger(\"out\", null, this._uiHash(this));\r\n                        this.containers[i].containerCache.over = 0;\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            if (this.placeholder) {\r\n                //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!\r\n                if (this.placeholder[0].parentNode) {\r\n                    this.placeholder[0].parentNode.removeChild(this.placeholder[0]);\r\n                }\r\n                if (this.options.helper !== \"original\" && this.helper && this.helper[0].parentNode) {\r\n                    this.helper.remove();\r\n                }\r\n\r\n                $.extend(this, {\r\n                    helper: null,\r\n                    dragging: false,\r\n                    reverting: false,\r\n                    _noFinalSort: null\r\n                });\r\n\r\n                if (this.domPosition.prev) {\r\n                    $(this.domPosition.prev).after(this.currentItem);\r\n                } else {\r\n                    $(this.domPosition.parent).prepend(this.currentItem);\r\n                }\r\n            }\r\n\r\n            return this;\r\n\r\n        },\r\n\r\n        serialize: function (o) {\r\n\r\n            var items = this._getItemsAsjQuery(o && o.connected),\r\n                str = [];\r\n            o = o || {};\r\n\r\n            $(items).each(function () {\r\n                var res = ($(o.item || this).attr(o.attribute || \"id\") || \"\").match(o.expression || (/(.+)[\\-=_](.+)/));\r\n                if (res) {\r\n                    str.push((o.key || res[1] + \"[]\") + \"=\" + (o.key && o.expression ? res[1] : res[2]));\r\n                }\r\n            });\r\n\r\n            if (!str.length && o.key) {\r\n                str.push(o.key + \"=\");\r\n            }\r\n\r\n            return str.join(\"&\");\r\n\r\n        },\r\n\r\n        toArray: function (o) {\r\n\r\n            var items = this._getItemsAsjQuery(o && o.connected),\r\n                ret = [];\r\n\r\n            o = o || {};\r\n\r\n            items.each(function () {\r\n                ret.push($(o.item || this).attr(o.attribute || \"id\") || \"\");\r\n            });\r\n            return ret;\r\n\r\n        },\r\n\r\n        /* Be careful with the following core functions */\r\n        _intersectsWith: function (item) {\r\n\r\n            var x1 = this.positionAbs.left,\r\n                x2 = x1 + this.helperProportions.width,\r\n                y1 = this.positionAbs.top,\r\n                y2 = y1 + this.helperProportions.height,\r\n                l = item.left,\r\n                r = l + item.width,\r\n                t = item.top,\r\n                b = t + item.height,\r\n                dyClick = this.offset.click.top,\r\n                dxClick = this.offset.click.left,\r\n                isOverElementHeight = (this.options.axis === \"x\") || ((y1 + dyClick) > t && (y1 + dyClick) < b),\r\n                isOverElementWidth = (this.options.axis === \"y\") || ((x1 + dxClick) > l && (x1 + dxClick) < r),\r\n                isOverElement = isOverElementHeight && isOverElementWidth;\r\n\r\n            if (this.options.tolerance === \"pointer\" ||\r\n                this.options.forcePointerForContainers ||\r\n                (this.options.tolerance !== \"pointer\" && this.helperProportions[this.floating ? \"width\" : \"height\"] > item[this.floating ? \"width\" : \"height\"])\r\n            ) {\r\n                return isOverElement;\r\n            } else {\r\n\r\n                return (l < x1 + (this.helperProportions.width / 2) && // Right Half\r\n                    x2 - (this.helperProportions.width / 2) < r && // Left Half\r\n                    t < y1 + (this.helperProportions.height / 2) && // Bottom Half\r\n                    y2 - (this.helperProportions.height / 2) < b); // Top Half\r\n\r\n            }\r\n        },\r\n\r\n        _intersectsWithPointer: function (item) {\r\n\r\n            var isOverElementHeight = (this.options.axis === \"x\") || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),\r\n                isOverElementWidth = (this.options.axis === \"y\") || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),\r\n                isOverElement = isOverElementHeight && isOverElementWidth,\r\n                verticalDirection = this._getDragVerticalDirection(),\r\n                horizontalDirection = this._getDragHorizontalDirection();\r\n\r\n            if (!isOverElement) {\r\n                return false;\r\n            }\r\n\r\n            return this.floating ?\r\n                (((horizontalDirection && horizontalDirection === \"right\") || verticalDirection === \"down\") ? 2 : 1)\r\n                : (verticalDirection && (verticalDirection === \"down\" ? 2 : 1));\r\n\r\n        },\r\n\r\n        _intersectsWithSides: function (item) {\r\n\r\n            var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height / 2), item.height),\r\n                isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width / 2), item.width),\r\n                verticalDirection = this._getDragVerticalDirection(),\r\n                horizontalDirection = this._getDragHorizontalDirection();\r\n\r\n            if (this.floating && horizontalDirection) {\r\n                return ((horizontalDirection === \"right\" && isOverRightHalf) || (horizontalDirection === \"left\" && !isOverRightHalf));\r\n            } else {\r\n                return verticalDirection && ((verticalDirection === \"down\" && isOverBottomHalf) || (verticalDirection === \"up\" && !isOverBottomHalf));\r\n            }\r\n\r\n        },\r\n\r\n        _getDragVerticalDirection: function () {\r\n            var delta = this.positionAbs.top - this.lastPositionAbs.top;\r\n            return delta !== 0 && (delta > 0 ? \"down\" : \"up\");\r\n        },\r\n\r\n        _getDragHorizontalDirection: function () {\r\n            var delta = this.positionAbs.left - this.lastPositionAbs.left;\r\n            return delta !== 0 && (delta > 0 ? \"right\" : \"left\");\r\n        },\r\n\r\n        refresh: function (event) {\r\n            this._refreshItems(event);\r\n            this.refreshPositions();\r\n            return this;\r\n        },\r\n\r\n        _connectWith: function () {\r\n            var options = this.options;\r\n            return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;\r\n        },\r\n\r\n        _getItemsAsjQuery: function (connected) {\r\n\r\n            var i, j, cur, inst,\r\n                items = [],\r\n                queries = [],\r\n                connectWith = this._connectWith();\r\n\r\n            if (connectWith && connected) {\r\n                for (i = connectWith.length - 1; i >= 0; i--) {\r\n                    cur = $(connectWith[i]);\r\n                    for (j = cur.length - 1; j >= 0; j--) {\r\n                        inst = $.data(cur[j], this.widgetFullName);\r\n                        if (inst && inst !== this && !inst.options.disabled) {\r\n                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), inst]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, {\r\n                options: this.options,\r\n                item: this.currentItem\r\n            }) : $(this.options.items, this.element).not(\".ui-sortable-helper\").not(\".ui-sortable-placeholder\"), this]);\r\n\r\n            function addItems() {\r\n                items.push(this);\r\n            }\r\n\r\n            for (i = queries.length - 1; i >= 0; i--) {\r\n                queries[i][0].each(addItems);\r\n            }\r\n\r\n            return $(items);\r\n\r\n        },\r\n\r\n        _removeCurrentsFromItems: function () {\r\n\r\n            var list = this.currentItem.find(\":data(\" + this.widgetName + \"-item)\");\r\n\r\n            this.items = $.grep(this.items, function (item) {\r\n                for (var j = 0; j < list.length; j++) {\r\n                    if (list[j] === item.item[0]) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n\r\n        },\r\n\r\n        _refreshItems: function (event) {\r\n\r\n            this.items = [];\r\n            this.containers = [this];\r\n\r\n            var i, j, cur, inst, targetData, _queries, item, queriesLength,\r\n                items = this.items,\r\n                queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {item: this.currentItem}) : $(this.options.items, this.element), this]],\r\n                connectWith = this._connectWith();\r\n\r\n            if (connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down\r\n                for (i = connectWith.length - 1; i >= 0; i--) {\r\n                    cur = $(connectWith[i]);\r\n                    for (j = cur.length - 1; j >= 0; j--) {\r\n                        inst = $.data(cur[j], this.widgetFullName);\r\n                        if (inst && inst !== this && !inst.options.disabled) {\r\n                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {item: this.currentItem}) : $(inst.options.items, inst.element), inst]);\r\n                            this.containers.push(inst);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (i = queries.length - 1; i >= 0; i--) {\r\n                targetData = queries[i][1];\r\n                _queries = queries[i][0];\r\n\r\n                for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {\r\n                    item = $(_queries[j]);\r\n\r\n                    item.data(this.widgetName + \"-item\", targetData); // Data for target checking (mouse manager)\r\n\r\n                    items.push({\r\n                        item: item,\r\n                        instance: targetData,\r\n                        width: 0, height: 0,\r\n                        left: 0, top: 0\r\n                    });\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        refreshPositions: function (fast) {\r\n\r\n            //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change\r\n            if (this.offsetParent && this.helper) {\r\n                this.offset.parent = this._getParentOffset();\r\n            }\r\n\r\n            var i, item, t, p;\r\n\r\n            for (i = this.items.length - 1; i >= 0; i--) {\r\n                item = this.items[i];\r\n\r\n                //We ignore calculating positions of all connected containers when we're not over them\r\n                if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {\r\n                    continue;\r\n                }\r\n\r\n                t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;\r\n\r\n                if (!fast) {\r\n                    item.width = t.outerWidth();\r\n                    item.height = t.outerHeight();\r\n                }\r\n\r\n                p = t.offset();\r\n                item.left = p.left;\r\n                item.top = p.top;\r\n            }\r\n\r\n            if (this.options.custom && this.options.custom.refreshContainers) {\r\n                this.options.custom.refreshContainers.call(this);\r\n            } else {\r\n                for (i = this.containers.length - 1; i >= 0; i--) {\r\n                    p = this.containers[i].element.offset();\r\n                    this.containers[i].containerCache.left = p.left;\r\n                    this.containers[i].containerCache.top = p.top;\r\n                    this.containers[i].containerCache.width = this.containers[i].element.outerWidth();\r\n                    this.containers[i].containerCache.height = this.containers[i].element.outerHeight();\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        _createPlaceholder: function (that) {\r\n            that = that || this;\r\n            var className,\r\n                o = that.options;\r\n\r\n            if (!o.placeholder || o.placeholder.constructor === String) {\r\n                className = o.placeholder;\r\n                o.placeholder = {\r\n                    element: function () {\r\n\r\n                        var nodeName = that.currentItem[0].nodeName.toLowerCase(),\r\n                            element = $(\"<\" + nodeName + \">\", that.document[0])\r\n                                .addClass(className || that.currentItem[0].className + \" ui-sortable-placeholder\")\r\n                                .removeClass(\"ui-sortable-helper\");\r\n\r\n                        if (nodeName === \"tr\") {\r\n                            that.currentItem.children().each(function () {\r\n                                $(\"<td>&#160;</td>\", that.document[0])\r\n                                    .attr(\"colspan\", $(this).attr(\"colspan\") || 1)\r\n                                    .appendTo(element);\r\n                            });\r\n                        } else if (nodeName === \"img\") {\r\n                            element.attr(\"src\", that.currentItem.attr(\"src\"));\r\n                        }\r\n\r\n                        if (!className) {\r\n                            element.css(\"visibility\", \"hidden\");\r\n                        }\r\n\r\n                        return element;\r\n                    },\r\n                    update: function (container, p) {\r\n\r\n                        // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that\r\n                        // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified\r\n                        if (className && !o.forcePlaceholderSize) {\r\n                            return;\r\n                        }\r\n\r\n                        //If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item\r\n                        if (!p.height()) {\r\n                            p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css(\"paddingTop\") || 0, 10) - parseInt(that.currentItem.css(\"paddingBottom\") || 0, 10));\r\n                        }\r\n                        if (!p.width()) {\r\n                            p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css(\"paddingLeft\") || 0, 10) - parseInt(that.currentItem.css(\"paddingRight\") || 0, 10));\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n\r\n            //Create the placeholder\r\n            that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));\r\n\r\n            //Append it after the actual current item\r\n            that.currentItem.after(that.placeholder);\r\n\r\n            //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)\r\n            o.placeholder.update(that, that.placeholder);\r\n\r\n        },\r\n\r\n        _contactContainers: function (event) {\r\n            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, base, cur, nearBottom, floating,\r\n                innermostContainer = null,\r\n                innermostIndex = null;\r\n\r\n            // get innermost container that intersects with item\r\n            for (i = this.containers.length - 1; i >= 0; i--) {\r\n\r\n                // never consider a container that's located within the item itself\r\n                if ($.contains(this.currentItem[0], this.containers[i].element[0])) {\r\n                    continue;\r\n                }\r\n\r\n                if (this._intersectsWith(this.containers[i].containerCache)) {\r\n\r\n                    // if we've already found a container and it's more \"inner\" than this, then continue\r\n                    if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {\r\n                        continue;\r\n                    }\r\n\r\n                    innermostContainer = this.containers[i];\r\n                    innermostIndex = i;\r\n\r\n                } else {\r\n                    // container doesn't intersect. trigger \"out\" event if necessary\r\n                    if (this.containers[i].containerCache.over) {\r\n                        this.containers[i]._trigger(\"out\", event, this._uiHash(this));\r\n                        this.containers[i].containerCache.over = 0;\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            // if no intersecting containers found, return\r\n            if (!innermostContainer) {\r\n                return;\r\n            }\r\n\r\n            // move the item into the container if it's not there already\r\n            if (this.containers.length === 1) {\r\n                if (!this.containers[innermostIndex].containerCache.over) {\r\n                    this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\r\n                    this.containers[innermostIndex].containerCache.over = 1;\r\n                }\r\n            } else {\r\n\r\n                //When entering a new container, we will find the item with the least distance and append our item near it\r\n                dist = 10000;\r\n                itemWithLeastDistance = null;\r\n                floating = innermostContainer.floating || isFloating(this.currentItem);\r\n                posProperty = floating ? \"left\" : \"top\";\r\n                sizeProperty = floating ? \"width\" : \"height\";\r\n                base = this.positionAbs[posProperty] + this.offset.click[posProperty];\r\n                for (j = this.items.length - 1; j >= 0; j--) {\r\n                    if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {\r\n                        continue;\r\n                    }\r\n                    if (this.items[j].item[0] === this.currentItem[0]) {\r\n                        continue;\r\n                    }\r\n                    if (floating && !isOverAxis(this.positionAbs.top + this.offset.click.top, this.items[j].top, this.items[j].height)) {\r\n                        continue;\r\n                    }\r\n                    cur = this.items[j].item.offset()[posProperty];\r\n                    nearBottom = false;\r\n                    if (Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)) {\r\n                        nearBottom = true;\r\n                        cur += this.items[j][sizeProperty];\r\n                    }\r\n\r\n                    if (Math.abs(cur - base) < dist) {\r\n                        dist = Math.abs(cur - base);\r\n                        itemWithLeastDistance = this.items[j];\r\n                        this.direction = nearBottom ? \"up\" : \"down\";\r\n                    }\r\n                }\r\n\r\n                //Check if dropOnEmpty is enabled\r\n                if (!itemWithLeastDistance && !this.options.dropOnEmpty) {\r\n                    return;\r\n                }\r\n\r\n                if (this.currentContainer === this.containers[innermostIndex]) {\r\n                    return;\r\n                }\r\n\r\n                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);\r\n                this._trigger(\"change\", event, this._uiHash());\r\n                this.containers[innermostIndex]._trigger(\"change\", event, this._uiHash(this));\r\n                this.currentContainer = this.containers[innermostIndex];\r\n\r\n                //Update the placeholder\r\n                this.options.placeholder.update(this.currentContainer, this.placeholder);\r\n\r\n                this.containers[innermostIndex]._trigger(\"over\", event, this._uiHash(this));\r\n                this.containers[innermostIndex].containerCache.over = 1;\r\n            }\r\n\r\n\r\n        },\r\n\r\n        _createHelper: function (event) {\r\n\r\n            var o = this.options,\r\n                helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === \"clone\" ? this.currentItem.clone() : this.currentItem);\r\n\r\n            //Add the helper to the DOM if that didn't happen already\r\n            if (!helper.parents(\"body\").length) {\r\n                $(o.appendTo !== \"parent\" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);\r\n            }\r\n\r\n            if (helper[0] === this.currentItem[0]) {\r\n                this._storedCSS = {\r\n                    width: this.currentItem[0].style.width,\r\n                    height: this.currentItem[0].style.height,\r\n                    position: this.currentItem.css(\"position\"),\r\n                    top: this.currentItem.css(\"top\"),\r\n                    left: this.currentItem.css(\"left\")\r\n                };\r\n            }\r\n\r\n            if (!helper[0].style.width || o.forceHelperSize) {\r\n                helper.width(this.currentItem.width());\r\n            }\r\n            if (!helper[0].style.height || o.forceHelperSize) {\r\n                helper.height(this.currentItem.height());\r\n            }\r\n\r\n            return helper;\r\n\r\n        },\r\n\r\n        _adjustOffsetFromHelper: function (obj) {\r\n            if (typeof obj === \"string\") {\r\n                obj = obj.split(\" \");\r\n            }\r\n            if ($.isArray(obj)) {\r\n                obj = {left: +obj[0], top: +obj[1] || 0};\r\n            }\r\n            if (\"left\" in obj) {\r\n                this.offset.click.left = obj.left + this.margins.left;\r\n            }\r\n            if (\"right\" in obj) {\r\n                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\r\n            }\r\n            if (\"top\" in obj) {\r\n                this.offset.click.top = obj.top + this.margins.top;\r\n            }\r\n            if (\"bottom\" in obj) {\r\n                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\r\n            }\r\n        },\r\n\r\n        _getParentOffset: function () {\r\n\r\n\r\n            //Get the offsetParent and cache its position\r\n            this.offsetParent = this.helper.offsetParent();\r\n            var po = this.offsetParent.offset();\r\n\r\n            // This is a special case where we need to modify a offset calculated on start, since the following happened:\r\n            // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent\r\n            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that\r\n            //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag\r\n            if (this.cssPosition === \"absolute\" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {\r\n                po.left += this.scrollParent.scrollLeft();\r\n                po.top += this.scrollParent.scrollTop();\r\n            }\r\n\r\n            // This needs to be actually done for all browsers, since pageX/pageY includes this information\r\n            // with an ugly IE fix\r\n            if (this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === \"html\" && $.ui.ie)) {\r\n                po = {top: 0, left: 0};\r\n            }\r\n\r\n            return {\r\n                top: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\r\n                left: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\r\n            };\r\n\r\n        },\r\n\r\n        _getRelativeOffset: function () {\r\n\r\n            if (this.cssPosition === \"relative\") {\r\n                var p = this.currentItem.position();\r\n                return {\r\n                    top: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + this.scrollParent.scrollTop(),\r\n                    left: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + this.scrollParent.scrollLeft()\r\n                };\r\n            } else {\r\n                return {top: 0, left: 0};\r\n            }\r\n\r\n        },\r\n\r\n        _cacheMargins: function () {\r\n            this.margins = {\r\n                left: (parseInt(this.currentItem.css(\"marginLeft\"), 10) || 0),\r\n                top: (parseInt(this.currentItem.css(\"marginTop\"), 10) || 0)\r\n            };\r\n        },\r\n\r\n        _cacheHelperProportions: function () {\r\n            this.helperProportions = {\r\n                width: this.helper.outerWidth(),\r\n                height: this.helper.outerHeight()\r\n            };\r\n        },\r\n\r\n        _setContainment: function () {\r\n\r\n            var ce, co, over,\r\n                o = this.options;\r\n            if (o.containment === \"parent\") {\r\n                o.containment = this.helper[0].parentNode;\r\n            }\r\n            if (o.containment === \"document\" || o.containment === \"window\") {\r\n                this.containment = [\r\n                    0 - this.offset.relative.left - this.offset.parent.left,\r\n                    0 - this.offset.relative.top - this.offset.parent.top,\r\n                    $(o.containment === \"document\" ? document : window).width() - this.helperProportions.width - this.margins.left,\r\n                    ($(o.containment === \"document\" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top\r\n                ];\r\n            }\r\n\r\n            if (!(/^(document|window|parent)$/).test(o.containment)) {\r\n                ce = $(o.containment)[0];\r\n                co = $(o.containment).offset();\r\n                over = ($(ce).css(\"overflow\") !== \"hidden\");\r\n\r\n                this.containment = [\r\n                    co.left + (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingLeft\"), 10) || 0) - this.margins.left,\r\n                    co.top + (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) + (parseInt($(ce).css(\"paddingTop\"), 10) || 0) - this.margins.top,\r\n                    co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css(\"borderLeftWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left,\r\n                    co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css(\"borderTopWidth\"), 10) || 0) - (parseInt($(ce).css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top\r\n                ];\r\n            }\r\n\r\n        },\r\n\r\n        _convertPositionTo: function (d, pos) {\r\n\r\n            if (!pos) {\r\n                pos = this.position;\r\n            }\r\n            var mod = d === \"absolute\" ? 1 : -1,\r\n                scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\r\n                scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);\r\n\r\n            return {\r\n                top: (\r\n                    pos.top +\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The absolute mouse position\r\n                    this.offset.relative.top * mod +\t\t\t\t\t\t\t\t\t\t// Only for relative positioned nodes: Relative offset from element to offset parent\r\n                    this.offset.parent.top * mod -\t\t\t\t\t\t\t\t\t\t\t// The offsetParent's offset without borders (offset + border)\r\n                    ((this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())) * mod)\r\n                ),\r\n                left: (\r\n                    pos.left +\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The absolute mouse position\r\n                    this.offset.relative.left * mod +\t\t\t\t\t\t\t\t\t\t// Only for relative positioned nodes: Relative offset from element to offset parent\r\n                    this.offset.parent.left * mod -\t\t\t\t\t\t\t\t\t\t// The offsetParent's offset without borders (offset + border)\r\n                    ((this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod)\r\n                )\r\n            };\r\n\r\n        },\r\n\r\n        _generatePosition: function (event) {\r\n\r\n            var top, left,\r\n                o = this.options,\r\n                pageX = event.pageX,\r\n                pageY = event.pageY,\r\n                scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\r\n                scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);\r\n\r\n            // This is another very weird special case that only happens for relative elements:\r\n            // 1. If the css position is relative\r\n            // 2. and the scroll parent is the document or similar to the offset parent\r\n            // we have to refresh the relative offset during the scroll so there are no jumps\r\n            if (this.cssPosition === \"relative\" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {\r\n                this.offset.relative = this._getRelativeOffset();\r\n            }\r\n\r\n            /*\r\n             * - Position constraining -\r\n             * Constrain the position to a mix of grid, containment.\r\n             */\r\n\r\n            if (this.originalPosition) { //If we are not dragging yet, we won't check for options\r\n\r\n                if (this.containment) {\r\n                    if (event.pageX - this.offset.click.left < this.containment[0]) {\r\n                        pageX = this.containment[0] + this.offset.click.left;\r\n                    }\r\n                    if (event.pageY - this.offset.click.top < this.containment[1]) {\r\n                        pageY = this.containment[1] + this.offset.click.top;\r\n                    }\r\n                    if (event.pageX - this.offset.click.left > this.containment[2]) {\r\n                        pageX = this.containment[2] + this.offset.click.left;\r\n                    }\r\n                    if (event.pageY - this.offset.click.top > this.containment[3]) {\r\n                        pageY = this.containment[3] + this.offset.click.top;\r\n                    }\r\n                }\r\n\r\n                if (o.grid) {\r\n                    top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];\r\n                    pageY = this.containment ? ((top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;\r\n\r\n                    left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];\r\n                    pageX = this.containment ? ((left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;\r\n                }\r\n\r\n            }\r\n\r\n            return {\r\n                top: (\r\n                    pageY -\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The absolute mouse position\r\n                    this.offset.click.top -\t\t\t\t\t\t\t\t\t\t\t\t\t// Click offset (relative to the element)\r\n                    this.offset.relative.top -\t\t\t\t\t\t\t\t\t\t\t// Only for relative positioned nodes: Relative offset from element to offset parent\r\n                    this.offset.parent.top +\t\t\t\t\t\t\t\t\t\t\t\t// The offsetParent's offset without borders (offset + border)\r\n                    ((this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())))\r\n                ),\r\n                left: (\r\n                    pageX -\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The absolute mouse position\r\n                    this.offset.click.left -\t\t\t\t\t\t\t\t\t\t\t\t// Click offset (relative to the element)\r\n                    this.offset.relative.left -\t\t\t\t\t\t\t\t\t\t\t// Only for relative positioned nodes: Relative offset from element to offset parent\r\n                    this.offset.parent.left +\t\t\t\t\t\t\t\t\t\t\t\t// The offsetParent's offset without borders (offset + border)\r\n                    ((this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()))\r\n                )\r\n            };\r\n\r\n        },\r\n\r\n        _rearrange: function (event, i, a, hardRefresh) {\r\n\r\n            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === \"down\" ? i.item[0] : i.item[0].nextSibling));\r\n\r\n            //Various things done here to improve the performance:\r\n            // 1. we create a setTimeout, that calls refreshPositions\r\n            // 2. on the instance, we have a counter variable, that get's higher after every append\r\n            // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same\r\n            // 4. this lets only the last addition to the timeout stack through\r\n            this.counter = this.counter ? ++this.counter : 1;\r\n            var counter = this.counter;\r\n\r\n            this._delay(function () {\r\n                if (counter === this.counter) {\r\n                    this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove\r\n                }\r\n            });\r\n\r\n        },\r\n\r\n        _clear: function (event, noPropagation) {\r\n\r\n            this.reverting = false;\r\n            // We delay all events that have to be triggered to after the point where the placeholder has been removed and\r\n            // everything else normalized again\r\n            var i,\r\n                delayedTriggers = [];\r\n\r\n            // We first have to update the dom position of the actual currentItem\r\n            // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)\r\n            if (!this._noFinalSort && this.currentItem.parent().length) {\r\n                this.placeholder.before(this.currentItem);\r\n            }\r\n            this._noFinalSort = null;\r\n\r\n            if (this.helper[0] === this.currentItem[0]) {\r\n                for (i in this._storedCSS) {\r\n                    if (this._storedCSS[i] === \"auto\" || this._storedCSS[i] === \"static\") {\r\n                        this._storedCSS[i] = \"\";\r\n                    }\r\n                }\r\n                this.currentItem.css(this._storedCSS).removeClass(\"ui-sortable-helper\");\r\n            } else {\r\n                this.currentItem.show();\r\n            }\r\n\r\n            if (this.fromOutside && !noPropagation) {\r\n                delayedTriggers.push(function (event) {\r\n                    this._trigger(\"receive\", event, this._uiHash(this.fromOutside));\r\n                });\r\n            }\r\n            if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(\".ui-sortable-helper\")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {\r\n                delayedTriggers.push(function (event) {\r\n                    this._trigger(\"update\", event, this._uiHash());\r\n                }); //Trigger update callback if the DOM position has changed\r\n            }\r\n\r\n            // Check if the items Container has Changed and trigger appropriate\r\n            // events.\r\n            if (this !== this.currentContainer) {\r\n                if (!noPropagation) {\r\n                    delayedTriggers.push(function (event) {\r\n                        this._trigger(\"remove\", event, this._uiHash());\r\n                    });\r\n                    delayedTriggers.push((function (c) {\r\n                        return function (event) {\r\n                            c._trigger(\"receive\", event, this._uiHash(this));\r\n                        };\r\n                    }).call(this, this.currentContainer));\r\n                    delayedTriggers.push((function (c) {\r\n                        return function (event) {\r\n                            c._trigger(\"update\", event, this._uiHash(this));\r\n                        };\r\n                    }).call(this, this.currentContainer));\r\n                }\r\n            }\r\n\r\n\r\n            //Post events to containers\r\n            function delayEvent(type, instance, container) {\r\n                return function (event) {\r\n                    container._trigger(type, event, instance._uiHash(instance));\r\n                };\r\n            }\r\n\r\n            for (i = this.containers.length - 1; i >= 0; i--) {\r\n                if (!noPropagation) {\r\n                    delayedTriggers.push(delayEvent(\"deactivate\", this, this.containers[i]));\r\n                }\r\n                if (this.containers[i].containerCache.over) {\r\n                    delayedTriggers.push(delayEvent(\"out\", this, this.containers[i]));\r\n                    this.containers[i].containerCache.over = 0;\r\n                }\r\n            }\r\n\r\n            //Do what was originally in plugins\r\n            if (this.storedCursor) {\r\n                this.document.find(\"body\").css(\"cursor\", this.storedCursor);\r\n                this.storedStylesheet.remove();\r\n            }\r\n            if (this._storedOpacity) {\r\n                this.helper.css(\"opacity\", this._storedOpacity);\r\n            }\r\n            if (this._storedZIndex) {\r\n                this.helper.css(\"zIndex\", this._storedZIndex === \"auto\" ? \"\" : this._storedZIndex);\r\n            }\r\n\r\n            this.dragging = false;\r\n            if (this.cancelHelperRemoval) {\r\n                if (!noPropagation) {\r\n                    this._trigger(\"beforeStop\", event, this._uiHash());\r\n                    for (i = 0; i < delayedTriggers.length; i++) {\r\n                        delayedTriggers[i].call(this, event);\r\n                    } //Trigger all delayed events\r\n                    this._trigger(\"stop\", event, this._uiHash());\r\n                }\r\n\r\n                this.fromOutside = false;\r\n                return false;\r\n            }\r\n\r\n            if (!noPropagation) {\r\n                this._trigger(\"beforeStop\", event, this._uiHash());\r\n            }\r\n\r\n            //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!\r\n            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);\r\n\r\n            if (this.helper[0] !== this.currentItem[0]) {\r\n                this.helper.remove();\r\n            }\r\n            this.helper = null;\r\n\r\n            if (!noPropagation) {\r\n                for (i = 0; i < delayedTriggers.length; i++) {\r\n                    delayedTriggers[i].call(this, event);\r\n                } //Trigger all delayed events\r\n                this._trigger(\"stop\", event, this._uiHash());\r\n            }\r\n\r\n            this.fromOutside = false;\r\n            return true;\r\n\r\n        },\r\n\r\n        _trigger: function () {\r\n            if ($.Widget.prototype._trigger.apply(this, arguments) === false) {\r\n                this.cancel();\r\n            }\r\n        },\r\n\r\n        _uiHash: function (_inst) {\r\n            var inst = _inst || this;\r\n            return {\r\n                helper: inst.helper,\r\n                placeholder: inst.placeholder || $([]),\r\n                position: inst.position,\r\n                originalPosition: inst.originalPosition,\r\n                offset: inst.positionAbs,\r\n                item: inst.currentItem,\r\n                sender: _inst ? _inst.element : null\r\n            };\r\n        }\r\n\r\n    });\r\n\r\n});\r\n","jquery/ui-modules/spinner.js":"/*!\r\n * jQuery UI Spinner - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/spinner/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/button'\r\n], function ($) {\r\n\r\n    function modifier(fn) {\r\n        return function () {\r\n            var previous = this.element.val();\r\n            fn.apply(this, arguments);\r\n            this._refresh();\r\n            if (previous !== this.element.val()) {\r\n                this._trigger(\"change\");\r\n            }\r\n        };\r\n    }\r\n\r\n    $.widget(\"ui.spinner\", {\r\n        version: \"1.10.4\",\r\n        defaultElement: \"<input>\",\r\n        widgetEventPrefix: \"spin\",\r\n        options: {\r\n            culture: null,\r\n            icons: {\r\n                down: \"ui-icon-triangle-1-s\",\r\n                up: \"ui-icon-triangle-1-n\"\r\n            },\r\n            incremental: true,\r\n            max: null,\r\n            min: null,\r\n            numberFormat: null,\r\n            page: 10,\r\n            step: 1,\r\n\r\n            change: null,\r\n            spin: null,\r\n            start: null,\r\n            stop: null\r\n        },\r\n\r\n        _create: function () {\r\n            // handle string values that need to be parsed\r\n            this._setOption(\"max\", this.options.max);\r\n            this._setOption(\"min\", this.options.min);\r\n            this._setOption(\"step\", this.options.step);\r\n\r\n            // Only format if there is a value, prevents the field from being marked\r\n            // as invalid in Firefox, see #9573.\r\n            if (this.value() !== \"\") {\r\n                // Format the value, but don't constrain.\r\n                this._value(this.element.val(), true);\r\n            }\r\n\r\n            this._draw();\r\n            this._on(this._events);\r\n            this._refresh();\r\n\r\n            // turning off autocomplete prevents the browser from remembering the\r\n            // value when navigating through history, so we re-enable autocomplete\r\n            // if the page is unloaded before the widget is destroyed. #7790\r\n            this._on(this.window, {\r\n                beforeunload: function () {\r\n                    this.element.removeAttr(\"autocomplete\");\r\n                }\r\n            });\r\n        },\r\n\r\n        _getCreateOptions: function () {\r\n            var options = {},\r\n                element = this.element;\r\n\r\n            $.each([\"min\", \"max\", \"step\"], function (i, option) {\r\n                var value = element.attr(option);\r\n                if (value !== undefined && value.length) {\r\n                    options[option] = value;\r\n                }\r\n            });\r\n\r\n            return options;\r\n        },\r\n\r\n        _events: {\r\n            keydown: function (event) {\r\n                if (this._start(event) && this._keydown(event)) {\r\n                    event.preventDefault();\r\n                }\r\n            },\r\n            keyup: \"_stop\",\r\n            focus: function () {\r\n                this.previous = this.element.val();\r\n            },\r\n            blur: function (event) {\r\n                if (this.cancelBlur) {\r\n                    delete this.cancelBlur;\r\n                    return;\r\n                }\r\n\r\n                this._stop();\r\n                this._refresh();\r\n                if (this.previous !== this.element.val()) {\r\n                    this._trigger(\"change\", event);\r\n                }\r\n            },\r\n            mousewheel: function (event, delta) {\r\n                if (!delta) {\r\n                    return;\r\n                }\r\n                if (!this.spinning && !this._start(event)) {\r\n                    return false;\r\n                }\r\n\r\n                this._spin((delta > 0 ? 1 : -1) * this.options.step, event);\r\n                clearTimeout(this.mousewheelTimer);\r\n                this.mousewheelTimer = this._delay(function () {\r\n                    if (this.spinning) {\r\n                        this._stop(event);\r\n                    }\r\n                }, 100);\r\n                event.preventDefault();\r\n            },\r\n            \"mousedown .ui-spinner-button\": function (event) {\r\n                var previous;\r\n\r\n                // We never want the buttons to have focus; whenever the user is\r\n                // interacting with the spinner, the focus should be on the input.\r\n                // If the input is focused then this.previous is properly set from\r\n                // when the input first received focus. If the input is not focused\r\n                // then we need to set this.previous based on the value before spinning.\r\n                previous = this.element[0] === this.document[0].activeElement ?\r\n                    this.previous : this.element.val();\r\n\r\n                function checkFocus() {\r\n                    var isActive = this.element[0] === this.document[0].activeElement;\r\n                    if (!isActive) {\r\n                        this.element.focus();\r\n                        this.previous = previous;\r\n                        // support: IE\r\n                        // IE sets focus asynchronously, so we need to check if focus\r\n                        // moved off of the input because the user clicked on the button.\r\n                        this._delay(function () {\r\n                            this.previous = previous;\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // ensure focus is on (or stays on) the text field\r\n                event.preventDefault();\r\n                checkFocus.call(this);\r\n\r\n                // support: IE\r\n                // IE doesn't prevent moving focus even with event.preventDefault()\r\n                // so we set a flag to know when we should ignore the blur event\r\n                // and check (again) if focus moved off of the input.\r\n                this.cancelBlur = true;\r\n                this._delay(function () {\r\n                    delete this.cancelBlur;\r\n                    checkFocus.call(this);\r\n                });\r\n\r\n                if (this._start(event) === false) {\r\n                    return;\r\n                }\r\n\r\n                this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\r\n            },\r\n            \"mouseup .ui-spinner-button\": \"_stop\",\r\n            \"mouseenter .ui-spinner-button\": function (event) {\r\n                // button will add ui-state-active if mouse was down while mouseleave and kept down\r\n                if (!$(event.currentTarget).hasClass(\"ui-state-active\")) {\r\n                    return;\r\n                }\r\n\r\n                if (this._start(event) === false) {\r\n                    return false;\r\n                }\r\n                this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\r\n            },\r\n            // TODO: do we really want to consider this a stop?\r\n            // shouldn't we just stop the repeater and wait until mouseup before\r\n            // we trigger the stop event?\r\n            \"mouseleave .ui-spinner-button\": \"_stop\"\r\n        },\r\n\r\n        _draw: function () {\r\n            var uiSpinner = this.uiSpinner = this.element\r\n                .addClass(\"ui-spinner-input\")\r\n                .attr(\"autocomplete\", \"off\")\r\n                .wrap(this._uiSpinnerHtml())\r\n                .parent()\r\n                // add buttons\r\n                .append(this._buttonHtml());\r\n\r\n            this.element.attr(\"role\", \"spinbutton\");\r\n\r\n            // button bindings\r\n            this.buttons = uiSpinner.find(\".ui-spinner-button\")\r\n                .attr(\"tabIndex\", -1)\r\n                .button()\r\n                .removeClass(\"ui-corner-all\");\r\n\r\n            // IE 6 doesn't understand height: 50% for the buttons\r\n            // unless the wrapper has an explicit height\r\n            if (this.buttons.height() > Math.ceil(uiSpinner.height() * 0.5) &&\r\n                uiSpinner.height() > 0) {\r\n                uiSpinner.height(uiSpinner.height());\r\n            }\r\n\r\n            // disable spinner if element was already disabled\r\n            if (this.options.disabled) {\r\n                this.disable();\r\n            }\r\n        },\r\n\r\n        _keydown: function (event) {\r\n            var options = this.options,\r\n                keyCode = $.ui.keyCode;\r\n\r\n            switch (event.keyCode) {\r\n                case keyCode.UP:\r\n                    this._repeat(null, 1, event);\r\n                    return true;\r\n                case keyCode.DOWN:\r\n                    this._repeat(null, -1, event);\r\n                    return true;\r\n                case keyCode.PAGE_UP:\r\n                    this._repeat(null, options.page, event);\r\n                    return true;\r\n                case keyCode.PAGE_DOWN:\r\n                    this._repeat(null, -options.page, event);\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _uiSpinnerHtml: function () {\r\n            return \"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>\";\r\n        },\r\n\r\n        _buttonHtml: function () {\r\n            return \"\" +\r\n                \"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>\" +\r\n                \"<span class='ui-icon \" + this.options.icons.up + \"'>&#9650;</span>\" +\r\n                \"</a>\" +\r\n                \"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>\" +\r\n                \"<span class='ui-icon \" + this.options.icons.down + \"'>&#9660;</span>\" +\r\n                \"</a>\";\r\n        },\r\n\r\n        _start: function (event) {\r\n            if (!this.spinning && this._trigger(\"start\", event) === false) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.counter) {\r\n                this.counter = 1;\r\n            }\r\n            this.spinning = true;\r\n            return true;\r\n        },\r\n\r\n        _repeat: function (i, steps, event) {\r\n            i = i || 500;\r\n\r\n            clearTimeout(this.timer);\r\n            this.timer = this._delay(function () {\r\n                this._repeat(40, steps, event);\r\n            }, i);\r\n\r\n            this._spin(steps * this.options.step, event);\r\n        },\r\n\r\n        _spin: function (step, event) {\r\n            var value = this.value() || 0;\r\n\r\n            if (!this.counter) {\r\n                this.counter = 1;\r\n            }\r\n\r\n            value = this._adjustValue(value + step * this._increment(this.counter));\r\n\r\n            if (!this.spinning || this._trigger(\"spin\", event, {value: value}) !== false) {\r\n                this._value(value);\r\n                this.counter++;\r\n            }\r\n        },\r\n\r\n        _increment: function (i) {\r\n            var incremental = this.options.incremental;\r\n\r\n            if (incremental) {\r\n                return $.isFunction(incremental) ?\r\n                    incremental(i) :\r\n                    Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);\r\n            }\r\n\r\n            return 1;\r\n        },\r\n\r\n        _precision: function () {\r\n            var precision = this._precisionOf(this.options.step);\r\n            if (this.options.min !== null) {\r\n                precision = Math.max(precision, this._precisionOf(this.options.min));\r\n            }\r\n            return precision;\r\n        },\r\n\r\n        _precisionOf: function (num) {\r\n            var str = num.toString(),\r\n                decimal = str.indexOf(\".\");\r\n            return decimal === -1 ? 0 : str.length - decimal - 1;\r\n        },\r\n\r\n        _adjustValue: function (value) {\r\n            var base, aboveMin,\r\n                options = this.options;\r\n\r\n            // make sure we're at a valid step\r\n            // - find out where we are relative to the base (min or 0)\r\n            base = options.min !== null ? options.min : 0;\r\n            aboveMin = value - base;\r\n            // - round to the nearest step\r\n            aboveMin = Math.round(aboveMin / options.step) * options.step;\r\n            // - rounding is based on 0, so adjust back to our base\r\n            value = base + aboveMin;\r\n\r\n            // fix precision from bad JS floating point math\r\n            value = parseFloat(value.toFixed(this._precision()));\r\n\r\n            // clamp the value\r\n            if (options.max !== null && value > options.max) {\r\n                return options.max;\r\n            }\r\n            if (options.min !== null && value < options.min) {\r\n                return options.min;\r\n            }\r\n\r\n            return value;\r\n        },\r\n\r\n        _stop: function (event) {\r\n            if (!this.spinning) {\r\n                return;\r\n            }\r\n\r\n            clearTimeout(this.timer);\r\n            clearTimeout(this.mousewheelTimer);\r\n            this.counter = 0;\r\n            this.spinning = false;\r\n            this._trigger(\"stop\", event);\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            if (key === \"culture\" || key === \"numberFormat\") {\r\n                var prevValue = this._parse(this.element.val());\r\n                this.options[key] = value;\r\n                this.element.val(this._format(prevValue));\r\n                return;\r\n            }\r\n\r\n            if (key === \"max\" || key === \"min\" || key === \"step\") {\r\n                if (typeof value === \"string\") {\r\n                    value = this._parse(value);\r\n                }\r\n            }\r\n            if (key === \"icons\") {\r\n                this.buttons.first().find(\".ui-icon\")\r\n                    .removeClass(this.options.icons.up)\r\n                    .addClass(value.up);\r\n                this.buttons.last().find(\".ui-icon\")\r\n                    .removeClass(this.options.icons.down)\r\n                    .addClass(value.down);\r\n            }\r\n\r\n            this._super(key, value);\r\n\r\n            if (key === \"disabled\") {\r\n                if (value) {\r\n                    this.element.prop(\"disabled\", true);\r\n                    this.buttons.button(\"disable\");\r\n                } else {\r\n                    this.element.prop(\"disabled\", false);\r\n                    this.buttons.button(\"enable\");\r\n                }\r\n            }\r\n        },\r\n\r\n        _setOptions: modifier(function (options) {\r\n            this._super(options);\r\n            this._value(this.element.val());\r\n        }),\r\n\r\n        _parse: function (val) {\r\n            if (typeof val === \"string\" && val !== \"\") {\r\n                val = window.Globalize && this.options.numberFormat ?\r\n                    Globalize.parseFloat(val, 10, this.options.culture) : +val;\r\n            }\r\n            return val === \"\" || isNaN(val) ? null : val;\r\n        },\r\n\r\n        _format: function (value) {\r\n            if (value === \"\") {\r\n                return \"\";\r\n            }\r\n            return window.Globalize && this.options.numberFormat ?\r\n                Globalize.format(value, this.options.numberFormat, this.options.culture) :\r\n                value;\r\n        },\r\n\r\n        _refresh: function () {\r\n            this.element.attr({\r\n                \"aria-valuemin\": this.options.min,\r\n                \"aria-valuemax\": this.options.max,\r\n                // TODO: what should we do with values that can't be parsed?\r\n                \"aria-valuenow\": this._parse(this.element.val())\r\n            });\r\n        },\r\n\r\n        // update the value without triggering change\r\n        _value: function (value, allowAny) {\r\n            var parsed;\r\n            if (value !== \"\") {\r\n                parsed = this._parse(value);\r\n                if (parsed !== null) {\r\n                    if (!allowAny) {\r\n                        parsed = this._adjustValue(parsed);\r\n                    }\r\n                    value = this._format(parsed);\r\n                }\r\n            }\r\n            this.element.val(value);\r\n            this._refresh();\r\n        },\r\n\r\n        _destroy: function () {\r\n            this.element\r\n                .removeClass(\"ui-spinner-input\")\r\n                .prop(\"disabled\", false)\r\n                .removeAttr(\"autocomplete\")\r\n                .removeAttr(\"role\")\r\n                .removeAttr(\"aria-valuemin\")\r\n                .removeAttr(\"aria-valuemax\")\r\n                .removeAttr(\"aria-valuenow\");\r\n            this.uiSpinner.replaceWith(this.element);\r\n        },\r\n\r\n        stepUp: modifier(function (steps) {\r\n            this._stepUp(steps);\r\n        }),\r\n        _stepUp: function (steps) {\r\n            if (this._start()) {\r\n                this._spin((steps || 1) * this.options.step);\r\n                this._stop();\r\n            }\r\n        },\r\n\r\n        stepDown: modifier(function (steps) {\r\n            this._stepDown(steps);\r\n        }),\r\n        _stepDown: function (steps) {\r\n            if (this._start()) {\r\n                this._spin((steps || 1) * -this.options.step);\r\n                this._stop();\r\n            }\r\n        },\r\n\r\n        pageUp: modifier(function (pages) {\r\n            this._stepUp((pages || 1) * this.options.page);\r\n        }),\r\n\r\n        pageDown: modifier(function (pages) {\r\n            this._stepDown((pages || 1) * this.options.page);\r\n        }),\r\n\r\n        value: function (newVal) {\r\n            if (!arguments.length) {\r\n                return this._parse(this.element.val());\r\n            }\r\n            modifier(this._value).call(this, newVal);\r\n        },\r\n\r\n        widget: function () {\r\n            return this.uiSpinner;\r\n        }\r\n    });\r\n\r\n});\r\n","jquery/ui-modules/tabs.js":"/*!\r\n * jQuery UI Tabs - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/tabs/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/core',\r\n    'jquery-ui-modules/widget'\r\n], function ($, undefined) {\r\n\r\n    var tabId = 0,\r\n        rhash = /#.*$/;\r\n\r\n    function getNextTabId() {\r\n        return ++tabId;\r\n    }\r\n\r\n    function isLocal(anchor) {\r\n        // support: IE7\r\n        // IE7 doesn't normalize the href property when set via script (#9317)\r\n        anchor = anchor.cloneNode(false);\r\n\r\n        return anchor.hash.length > 1 &&\r\n            decodeURIComponent(anchor.href.replace(rhash, \"\")) ===\r\n            decodeURIComponent(location.href.replace(rhash, \"\"));\r\n    }\r\n\r\n    $.widget(\"ui.tabs\", {\r\n        version: \"1.10.4\",\r\n        delay: 300,\r\n        options: {\r\n            active: null,\r\n            collapsible: false,\r\n            event: \"click\",\r\n            heightStyle: \"content\",\r\n            hide: null,\r\n            show: null,\r\n\r\n            // callbacks\r\n            activate: null,\r\n            beforeActivate: null,\r\n            beforeLoad: null,\r\n            load: null\r\n        },\r\n\r\n        _create: function () {\r\n            var that = this,\r\n                options = this.options;\r\n\r\n            this.running = false;\r\n\r\n            this.element\r\n                .addClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all\")\r\n                .toggleClass(\"ui-tabs-collapsible\", options.collapsible)\r\n                // Prevent users from focusing disabled tabs via click\r\n                .delegate(\".ui-tabs-nav > li\", \"mousedown\" + this.eventNamespace, function (event) {\r\n                    if ($(this).is(\".ui-state-disabled\")) {\r\n                        event.preventDefault();\r\n                    }\r\n                })\r\n                // support: IE <9\r\n                // Preventing the default action in mousedown doesn't prevent IE\r\n                // from focusing the element, so if the anchor gets focused, blur.\r\n                // We don't have to worry about focusing the previously focused\r\n                // element since clicking on a non-focusable element should focus\r\n                // the body anyway.\r\n                .delegate(\".ui-tabs-anchor\", \"focus\" + this.eventNamespace, function () {\r\n                    if ($(this).closest(\"li\").is(\".ui-state-disabled\")) {\r\n                        this.blur();\r\n                    }\r\n                });\r\n\r\n            this._processTabs();\r\n            options.active = this._initialActive();\r\n\r\n            // Take disabling tabs via class attribute from HTML\r\n            // into account and update option properly.\r\n            if ($.isArray(options.disabled)) {\r\n                options.disabled = $.unique(options.disabled.concat(\r\n                    $.map(this.tabs.filter(\".ui-state-disabled\"), function (li) {\r\n                        return that.tabs.index(li);\r\n                    })\r\n                )).sort();\r\n            }\r\n\r\n            // check for length avoids error when initializing empty list\r\n            if (this.options.active !== false && this.anchors.length) {\r\n                this.active = this._findActive(options.active);\r\n            } else {\r\n                this.active = $();\r\n            }\r\n\r\n            this._refresh();\r\n\r\n            if (this.active.length) {\r\n                this.load(options.active);\r\n            }\r\n        },\r\n\r\n        _initialActive: function () {\r\n            var active = this.options.active,\r\n                collapsible = this.options.collapsible,\r\n                locationHash = location.hash.substring(1);\r\n\r\n            if (active === null) {\r\n                // check the fragment identifier in the URL\r\n                if (locationHash) {\r\n                    this.tabs.each(function (i, tab) {\r\n                        if ($(tab).attr(\"aria-controls\") === locationHash) {\r\n                            active = i;\r\n                            return false;\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // check for a tab marked active via a class\r\n                if (active === null) {\r\n                    active = this.tabs.index(this.tabs.filter(\".ui-tabs-active\"));\r\n                }\r\n\r\n                // no active tab, set to false\r\n                if (active === null || active === -1) {\r\n                    active = this.tabs.length ? 0 : false;\r\n                }\r\n            }\r\n\r\n            // handle numbers: negative, out of range\r\n            if (active !== false) {\r\n                active = this.tabs.index(this.tabs.eq(active));\r\n                if (active === -1) {\r\n                    active = collapsible ? false : 0;\r\n                }\r\n            }\r\n\r\n            // don't allow collapsible: false and active: false\r\n            if (!collapsible && active === false && this.anchors.length) {\r\n                active = 0;\r\n            }\r\n\r\n            return active;\r\n        },\r\n\r\n        _getCreateEventData: function () {\r\n            return {\r\n                tab: this.active,\r\n                panel: !this.active.length ? $() : this._getPanelForTab(this.active)\r\n            };\r\n        },\r\n\r\n        _tabKeydown: function (event) {\r\n            var focusedTab = $(this.document[0].activeElement).closest(\"li\"),\r\n                selectedIndex = this.tabs.index(focusedTab),\r\n                goingForward = true;\r\n\r\n            if (this._handlePageNav(event)) {\r\n                return;\r\n            }\r\n\r\n            switch (event.keyCode) {\r\n                case $.ui.keyCode.RIGHT:\r\n                case $.ui.keyCode.DOWN:\r\n                    selectedIndex++;\r\n                    break;\r\n                case $.ui.keyCode.UP:\r\n                case $.ui.keyCode.LEFT:\r\n                    goingForward = false;\r\n                    selectedIndex--;\r\n                    break;\r\n                case $.ui.keyCode.END:\r\n                    selectedIndex = this.anchors.length - 1;\r\n                    break;\r\n                case $.ui.keyCode.HOME:\r\n                    selectedIndex = 0;\r\n                    break;\r\n                case $.ui.keyCode.SPACE:\r\n                    // Activate only, no collapsing\r\n                    event.preventDefault();\r\n                    clearTimeout(this.activating);\r\n                    this._activate(selectedIndex);\r\n                    return;\r\n                case $.ui.keyCode.ENTER:\r\n                    // Toggle (cancel delayed activation, allow collapsing)\r\n                    event.preventDefault();\r\n                    clearTimeout(this.activating);\r\n                    // Determine if we should collapse or activate\r\n                    this._activate(selectedIndex === this.options.active ? false : selectedIndex);\r\n                    return;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            // Focus the appropriate tab, based on which key was pressed\r\n            event.preventDefault();\r\n            clearTimeout(this.activating);\r\n            selectedIndex = this._focusNextTab(selectedIndex, goingForward);\r\n\r\n            // Navigating with control key will prevent automatic activation\r\n            if (!event.ctrlKey) {\r\n                // Update aria-selected immediately so that AT think the tab is already selected.\r\n                // Otherwise AT may confuse the user by stating that they need to activate the tab,\r\n                // but the tab will already be activated by the time the announcement finishes.\r\n                focusedTab.attr(\"aria-selected\", \"false\");\r\n                this.tabs.eq(selectedIndex).attr(\"aria-selected\", \"true\");\r\n\r\n                this.activating = this._delay(function () {\r\n                    this.option(\"active\", selectedIndex);\r\n                }, this.delay);\r\n            }\r\n        },\r\n\r\n        _panelKeydown: function (event) {\r\n            if (this._handlePageNav(event)) {\r\n                return;\r\n            }\r\n\r\n            // Ctrl+up moves focus to the current tab\r\n            if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {\r\n                event.preventDefault();\r\n                this.active.focus();\r\n            }\r\n        },\r\n\r\n        // Alt+page up/down moves focus to the previous/next tab (and activates)\r\n        _handlePageNav: function (event) {\r\n            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {\r\n                this._activate(this._focusNextTab(this.options.active - 1, false));\r\n                return true;\r\n            }\r\n            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {\r\n                this._activate(this._focusNextTab(this.options.active + 1, true));\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _findNextTab: function (index, goingForward) {\r\n            var lastTabIndex = this.tabs.length - 1;\r\n\r\n            function constrain() {\r\n                if (index > lastTabIndex) {\r\n                    index = 0;\r\n                }\r\n                if (index < 0) {\r\n                    index = lastTabIndex;\r\n                }\r\n                return index;\r\n            }\r\n\r\n            while ($.inArray(constrain(), this.options.disabled) !== -1) {\r\n                index = goingForward ? index + 1 : index - 1;\r\n            }\r\n\r\n            return index;\r\n        },\r\n\r\n        _focusNextTab: function (index, goingForward) {\r\n            index = this._findNextTab(index, goingForward);\r\n            this.tabs.eq(index).focus();\r\n            return index;\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            if (key === \"active\") {\r\n                // _activate() will handle invalid values and update this.options\r\n                this._activate(value);\r\n                return;\r\n            }\r\n\r\n            if (key === \"disabled\") {\r\n                // don't use the widget factory's disabled handling\r\n                this._setupDisabled(value);\r\n                return;\r\n            }\r\n\r\n            this._super(key, value);\r\n\r\n            if (key === \"collapsible\") {\r\n                this.element.toggleClass(\"ui-tabs-collapsible\", value);\r\n                // Setting collapsible: false while collapsed; open first panel\r\n                if (!value && this.options.active === false) {\r\n                    this._activate(0);\r\n                }\r\n            }\r\n\r\n            if (key === \"event\") {\r\n                this._setupEvents(value);\r\n            }\r\n\r\n            if (key === \"heightStyle\") {\r\n                this._setupHeightStyle(value);\r\n            }\r\n        },\r\n\r\n        _tabId: function (tab) {\r\n            return tab.attr(\"aria-controls\") || \"ui-tabs-\" + getNextTabId();\r\n        },\r\n\r\n        _sanitizeSelector: function (hash) {\r\n            return hash ? hash.replace(/[!\"$%&'()*+,.\\/:;<=>?@\\[\\]\\^`{|}~]/g, \"\\\\$&\") : \"\";\r\n        },\r\n\r\n        refresh: function () {\r\n            var options = this.options,\r\n                lis = this.tablist.children(\":has(a[href])\");\r\n\r\n            // get disabled tabs from class attribute from HTML\r\n            // this will get converted to a boolean if needed in _refresh()\r\n            options.disabled = $.map(lis.filter(\".ui-state-disabled\"), function (tab) {\r\n                return lis.index(tab);\r\n            });\r\n\r\n            this._processTabs();\r\n\r\n            // was collapsed or no tabs\r\n            if (options.active === false || !this.anchors.length) {\r\n                options.active = false;\r\n                this.active = $();\r\n                // was active, but active tab is gone\r\n            } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {\r\n                // all remaining tabs are disabled\r\n                if (this.tabs.length === options.disabled.length) {\r\n                    options.active = false;\r\n                    this.active = $();\r\n                    // activate previous tab\r\n                } else {\r\n                    this._activate(this._findNextTab(Math.max(0, options.active - 1), false));\r\n                }\r\n                // was active, active tab still exists\r\n            } else {\r\n                // make sure active index is correct\r\n                options.active = this.tabs.index(this.active);\r\n            }\r\n\r\n            this._refresh();\r\n        },\r\n\r\n        _refresh: function () {\r\n            this._setupDisabled(this.options.disabled);\r\n            this._setupEvents(this.options.event);\r\n            this._setupHeightStyle(this.options.heightStyle);\r\n\r\n            this.tabs.not(this.active).attr({\r\n                \"aria-selected\": \"false\",\r\n                tabIndex: -1\r\n            });\r\n            this.panels.not(this._getPanelForTab(this.active))\r\n                .hide()\r\n                .attr({\r\n                    \"aria-expanded\": \"false\",\r\n                    \"aria-hidden\": \"true\"\r\n                });\r\n\r\n            // Make sure one tab is in the tab order\r\n            if (!this.active.length) {\r\n                this.tabs.eq(0).attr(\"tabIndex\", 0);\r\n            } else {\r\n                this.active\r\n                    .addClass(\"ui-tabs-active ui-state-active\")\r\n                    .attr({\r\n                        \"aria-selected\": \"true\",\r\n                        tabIndex: 0\r\n                    });\r\n                this._getPanelForTab(this.active)\r\n                    .show()\r\n                    .attr({\r\n                        \"aria-expanded\": \"true\",\r\n                        \"aria-hidden\": \"false\"\r\n                    });\r\n            }\r\n        },\r\n\r\n        _processTabs: function () {\r\n            var that = this;\r\n\r\n            this.tablist = this._getList()\r\n                .addClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\")\r\n                .attr(\"role\", \"tablist\");\r\n\r\n            this.tabs = this.tablist.find(\"> li:has(a[href])\")\r\n                .addClass(\"ui-state-default ui-corner-top\")\r\n                .attr({\r\n                    role: \"tab\",\r\n                    tabIndex: -1\r\n                });\r\n\r\n            this.anchors = this.tabs.map(function () {\r\n                return $(\"a\", this)[0];\r\n            })\r\n                .addClass(\"ui-tabs-anchor\")\r\n                .attr({\r\n                    role: \"presentation\",\r\n                    tabIndex: -1\r\n                });\r\n\r\n            this.panels = $();\r\n\r\n            this.anchors.each(function (i, anchor) {\r\n                var selector, panel, panelId,\r\n                    anchorId = $(anchor).uniqueId().attr(\"id\"),\r\n                    tab = $(anchor).closest(\"li\"),\r\n                    originalAriaControls = tab.attr(\"aria-controls\");\r\n\r\n                // inline tab\r\n                if (isLocal(anchor)) {\r\n                    selector = anchor.hash;\r\n                    panel = that.element.find(that._sanitizeSelector(selector));\r\n                    // remote tab\r\n                } else {\r\n                    panelId = that._tabId(tab);\r\n                    selector = \"#\" + panelId;\r\n                    panel = that.element.find(selector);\r\n                    if (!panel.length) {\r\n                        panel = that._createPanel(panelId);\r\n                        panel.insertAfter(that.panels[i - 1] || that.tablist);\r\n                    }\r\n                    panel.attr(\"aria-live\", \"polite\");\r\n                }\r\n\r\n                if (panel.length) {\r\n                    that.panels = that.panels.add(panel);\r\n                }\r\n                if (originalAriaControls) {\r\n                    tab.data(\"ui-tabs-aria-controls\", originalAriaControls);\r\n                }\r\n                tab.attr({\r\n                    \"aria-controls\": selector.substring(1),\r\n                    \"aria-labelledby\": anchorId\r\n                });\r\n                panel.attr(\"aria-labelledby\", anchorId);\r\n            });\r\n\r\n            this.panels\r\n                .addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\")\r\n                .attr(\"role\", \"tabpanel\");\r\n        },\r\n\r\n        // allow overriding how to find the list for rare usage scenarios (#7715)\r\n        _getList: function () {\r\n            return this.tablist || this.element.find(\"ol,ul\").eq(0);\r\n        },\r\n\r\n        _createPanel: function (id) {\r\n            return $(\"<div>\")\r\n                .attr(\"id\", id)\r\n                .addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\")\r\n                .data(\"ui-tabs-destroy\", true);\r\n        },\r\n\r\n        _setupDisabled: function (disabled) {\r\n            if ($.isArray(disabled)) {\r\n                if (!disabled.length) {\r\n                    disabled = false;\r\n                } else if (disabled.length === this.anchors.length) {\r\n                    disabled = true;\r\n                }\r\n            }\r\n\r\n            // disable tabs\r\n            for (var i = 0, li; (li = this.tabs[i]); i++) {\r\n                if (disabled === true || $.inArray(i, disabled) !== -1) {\r\n                    $(li)\r\n                        .addClass(\"ui-state-disabled\")\r\n                        .attr(\"aria-disabled\", \"true\");\r\n                } else {\r\n                    $(li)\r\n                        .removeClass(\"ui-state-disabled\")\r\n                        .removeAttr(\"aria-disabled\");\r\n                }\r\n            }\r\n\r\n            this.options.disabled = disabled;\r\n        },\r\n\r\n        _setupEvents: function (event) {\r\n            var events = {\r\n                click: function (event) {\r\n                    event.preventDefault();\r\n                }\r\n            };\r\n            if (event) {\r\n                $.each(event.split(\" \"), function (index, eventName) {\r\n                    events[eventName] = \"_eventHandler\";\r\n                });\r\n            }\r\n\r\n            this._off(this.anchors.add(this.tabs).add(this.panels));\r\n            this._on(this.anchors, events);\r\n            this._on(this.tabs, {keydown: \"_tabKeydown\"});\r\n            this._on(this.panels, {keydown: \"_panelKeydown\"});\r\n\r\n            this._focusable(this.tabs);\r\n            this._hoverable(this.tabs);\r\n        },\r\n\r\n        _setupHeightStyle: function (heightStyle) {\r\n            var maxHeight,\r\n                parent = this.element.parent();\r\n\r\n            if (heightStyle === \"fill\") {\r\n                maxHeight = parent.height();\r\n                maxHeight -= this.element.outerHeight() - this.element.height();\r\n\r\n                this.element.siblings(\":visible\").each(function () {\r\n                    var elem = $(this),\r\n                        position = elem.css(\"position\");\r\n\r\n                    if (position === \"absolute\" || position === \"fixed\") {\r\n                        return;\r\n                    }\r\n                    maxHeight -= elem.outerHeight(true);\r\n                });\r\n\r\n                this.element.children().not(this.panels).each(function () {\r\n                    maxHeight -= $(this).outerHeight(true);\r\n                });\r\n\r\n                this.panels.each(function () {\r\n                    $(this).height(Math.max(0, maxHeight -\r\n                        $(this).innerHeight() + $(this).height()));\r\n                })\r\n                    .css(\"overflow\", \"auto\");\r\n            } else if (heightStyle === \"auto\") {\r\n                maxHeight = 0;\r\n                this.panels.each(function () {\r\n                    maxHeight = Math.max(maxHeight, $(this).height(\"\").height());\r\n                }).height(maxHeight);\r\n            }\r\n        },\r\n\r\n        _eventHandler: function (event) {\r\n            var options = this.options,\r\n                active = this.active,\r\n                anchor = $(event.currentTarget),\r\n                tab = anchor.closest(\"li\"),\r\n                clickedIsActive = tab[0] === active[0],\r\n                collapsing = clickedIsActive && options.collapsible,\r\n                toShow = collapsing ? $() : this._getPanelForTab(tab),\r\n                toHide = !active.length ? $() : this._getPanelForTab(active),\r\n                eventData = {\r\n                    oldTab: active,\r\n                    oldPanel: toHide,\r\n                    newTab: collapsing ? $() : tab,\r\n                    newPanel: toShow\r\n                };\r\n\r\n            event.preventDefault();\r\n\r\n            if (tab.hasClass(\"ui-state-disabled\") ||\r\n                // tab is already loading\r\n                tab.hasClass(\"ui-tabs-loading\") ||\r\n                // can't switch durning an animation\r\n                this.running ||\r\n                // click on active header, but not collapsible\r\n                (clickedIsActive && !options.collapsible) ||\r\n                // allow canceling activation\r\n                (this._trigger(\"beforeActivate\", event, eventData) === false)) {\r\n                return;\r\n            }\r\n\r\n            options.active = collapsing ? false : this.tabs.index(tab);\r\n\r\n            this.active = clickedIsActive ? $() : tab;\r\n            if (this.xhr) {\r\n                this.xhr.abort();\r\n            }\r\n\r\n            if (!toHide.length && !toShow.length) {\r\n                $.error(\"jQuery UI Tabs: Mismatching fragment identifier.\");\r\n            }\r\n\r\n            if (toShow.length) {\r\n                this.load(this.tabs.index(tab), event);\r\n            }\r\n            this._toggle(event, eventData);\r\n        },\r\n\r\n        // handles show/hide for selecting tabs\r\n        _toggle: function (event, eventData) {\r\n            var that = this,\r\n                toShow = eventData.newPanel,\r\n                toHide = eventData.oldPanel;\r\n\r\n            this.running = true;\r\n\r\n            function complete() {\r\n                that.running = false;\r\n                that._trigger(\"activate\", event, eventData);\r\n            }\r\n\r\n            function show() {\r\n                eventData.newTab.closest(\"li\").addClass(\"ui-tabs-active ui-state-active\");\r\n\r\n                if (toShow.length && that.options.show) {\r\n                    that._show(toShow, that.options.show, complete);\r\n                } else {\r\n                    toShow.show();\r\n                    complete();\r\n                }\r\n            }\r\n\r\n            // start out by hiding, then showing, then completing\r\n            if (toHide.length && this.options.hide) {\r\n                this._hide(toHide, this.options.hide, function () {\r\n                    eventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\r\n                    show();\r\n                });\r\n            } else {\r\n                eventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\r\n                toHide.hide();\r\n                show();\r\n            }\r\n\r\n            toHide.attr({\r\n                \"aria-expanded\": \"false\",\r\n                \"aria-hidden\": \"true\"\r\n            });\r\n            eventData.oldTab.attr(\"aria-selected\", \"false\");\r\n            // If we're switching tabs, remove the old tab from the tab order.\r\n            // If we're opening from collapsed state, remove the previous tab from the tab order.\r\n            // If we're collapsing, then keep the collapsing tab in the tab order.\r\n            if (toShow.length && toHide.length) {\r\n                eventData.oldTab.attr(\"tabIndex\", -1);\r\n            } else if (toShow.length) {\r\n                this.tabs.filter(function () {\r\n                    return $(this).attr(\"tabIndex\") === 0;\r\n                })\r\n                    .attr(\"tabIndex\", -1);\r\n            }\r\n\r\n            toShow.attr({\r\n                \"aria-expanded\": \"true\",\r\n                \"aria-hidden\": \"false\"\r\n            });\r\n            eventData.newTab.attr({\r\n                \"aria-selected\": \"true\",\r\n                tabIndex: 0\r\n            });\r\n        },\r\n\r\n        _activate: function (index) {\r\n            var anchor,\r\n                active = this._findActive(index);\r\n\r\n            // trying to activate the already active panel\r\n            if (active[0] === this.active[0]) {\r\n                return;\r\n            }\r\n\r\n            // trying to collapse, simulate a click on the current active header\r\n            if (!active.length) {\r\n                active = this.active;\r\n            }\r\n\r\n            anchor = active.find(\".ui-tabs-anchor\")[0];\r\n            this._eventHandler({\r\n                target: anchor,\r\n                currentTarget: anchor,\r\n                preventDefault: $.noop\r\n            });\r\n        },\r\n\r\n        _findActive: function (index) {\r\n            return index === false ? $() : this.tabs.eq(index);\r\n        },\r\n\r\n        _getIndex: function (index) {\r\n            // meta-function to give users option to provide a href string instead of a numerical index.\r\n            if (typeof index === \"string\") {\r\n                index = this.anchors.index(this.anchors.filter(\"[href$='\" + index + \"']\"));\r\n            }\r\n\r\n            return index;\r\n        },\r\n\r\n        _destroy: function () {\r\n            if (this.xhr) {\r\n                this.xhr.abort();\r\n            }\r\n\r\n            this.element.removeClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible\");\r\n\r\n            this.tablist\r\n                .removeClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\")\r\n                .removeAttr(\"role\");\r\n\r\n            this.anchors\r\n                .removeClass(\"ui-tabs-anchor\")\r\n                .removeAttr(\"role\")\r\n                .removeAttr(\"tabIndex\")\r\n                .removeUniqueId();\r\n\r\n            this.tabs.add(this.panels).each(function () {\r\n                if ($.data(this, \"ui-tabs-destroy\")) {\r\n                    $(this).remove();\r\n                } else {\r\n                    $(this)\r\n                        .removeClass(\"ui-state-default ui-state-active ui-state-disabled \" +\r\n                            \"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel\")\r\n                        .removeAttr(\"tabIndex\")\r\n                        .removeAttr(\"aria-live\")\r\n                        .removeAttr(\"aria-busy\")\r\n                        .removeAttr(\"aria-selected\")\r\n                        .removeAttr(\"aria-labelledby\")\r\n                        .removeAttr(\"aria-hidden\")\r\n                        .removeAttr(\"aria-expanded\")\r\n                        .removeAttr(\"role\");\r\n                }\r\n            });\r\n\r\n            this.tabs.each(function () {\r\n                var li = $(this),\r\n                    prev = li.data(\"ui-tabs-aria-controls\");\r\n                if (prev) {\r\n                    li\r\n                        .attr(\"aria-controls\", prev)\r\n                        .removeData(\"ui-tabs-aria-controls\");\r\n                } else {\r\n                    li.removeAttr(\"aria-controls\");\r\n                }\r\n            });\r\n\r\n            this.panels.show();\r\n\r\n            if (this.options.heightStyle !== \"content\") {\r\n                this.panels.css(\"height\", \"\");\r\n            }\r\n        },\r\n\r\n        enable: function (index) {\r\n            var disabled = this.options.disabled;\r\n            if (disabled === false) {\r\n                return;\r\n            }\r\n\r\n            if (index === undefined) {\r\n                disabled = false;\r\n            } else {\r\n                index = this._getIndex(index);\r\n                if ($.isArray(disabled)) {\r\n                    disabled = $.map(disabled, function (num) {\r\n                        return num !== index ? num : null;\r\n                    });\r\n                } else {\r\n                    disabled = $.map(this.tabs, function (li, num) {\r\n                        return num !== index ? num : null;\r\n                    });\r\n                }\r\n            }\r\n            this._setupDisabled(disabled);\r\n        },\r\n\r\n        disable: function (index) {\r\n            var disabled = this.options.disabled;\r\n            if (disabled === true) {\r\n                return;\r\n            }\r\n\r\n            if (index === undefined) {\r\n                disabled = true;\r\n            } else {\r\n                index = this._getIndex(index);\r\n                if ($.inArray(index, disabled) !== -1) {\r\n                    return;\r\n                }\r\n                if ($.isArray(disabled)) {\r\n                    disabled = $.merge([index], disabled).sort();\r\n                } else {\r\n                    disabled = [index];\r\n                }\r\n            }\r\n            this._setupDisabled(disabled);\r\n        },\r\n\r\n        load: function (index, event) {\r\n            index = this._getIndex(index);\r\n            var that = this,\r\n                tab = this.tabs.eq(index),\r\n                anchor = tab.find(\".ui-tabs-anchor\"),\r\n                panel = this._getPanelForTab(tab),\r\n                eventData = {\r\n                    tab: tab,\r\n                    panel: panel\r\n                };\r\n\r\n            // not remote\r\n            if (isLocal(anchor[0])) {\r\n                return;\r\n            }\r\n\r\n            this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));\r\n\r\n            // support: jQuery <1.8\r\n            // jQuery <1.8 returns false if the request is canceled in beforeSend,\r\n            // but as of 1.8, $.ajax() always returns a jqXHR object.\r\n            if (this.xhr && this.xhr.statusText !== \"canceled\") {\r\n                tab.addClass(\"ui-tabs-loading\");\r\n                panel.attr(\"aria-busy\", \"true\");\r\n\r\n                this.xhr\r\n                    .success(function (response) {\r\n                        // support: jQuery <1.8\r\n                        // http://bugs.jquery.com/ticket/11778\r\n                        setTimeout(function () {\r\n                            panel.html(response);\r\n                            that._trigger(\"load\", event, eventData);\r\n                        }, 1);\r\n                    })\r\n                    .complete(function (jqXHR, status) {\r\n                        // support: jQuery <1.8\r\n                        // http://bugs.jquery.com/ticket/11778\r\n                        setTimeout(function () {\r\n                            if (status === \"abort\") {\r\n                                that.panels.stop(false, true);\r\n                            }\r\n\r\n                            tab.removeClass(\"ui-tabs-loading\");\r\n                            panel.removeAttr(\"aria-busy\");\r\n\r\n                            if (jqXHR === that.xhr) {\r\n                                delete that.xhr;\r\n                            }\r\n                        }, 1);\r\n                    });\r\n            }\r\n        },\r\n\r\n        _ajaxSettings: function (anchor, event, eventData) {\r\n            var that = this;\r\n            return {\r\n                url: anchor.attr(\"href\"),\r\n                beforeSend: function (jqXHR, settings) {\r\n                    return that._trigger(\"beforeLoad\", event,\r\n                        $.extend({jqXHR: jqXHR, ajaxSettings: settings}, eventData));\r\n                }\r\n            };\r\n        },\r\n\r\n        _getPanelForTab: function (tab) {\r\n            var id = $(tab).attr(\"aria-controls\");\r\n            return this.element.find(this._sanitizeSelector(\"#\" + id));\r\n        }\r\n    });\r\n\r\n});\r\n","jquery/ui-modules/timepicker.js":"/*! jQuery Timepicker Addon - v1.4.3 - 2013-11-30\r\n* http://trentrichardson.com/examples/timepicker\r\n* Copyright (c) 2013 Trent Richardson; Licensed MIT */\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"jquery-ui-modules/datepicker\",\r\n            \"jquery-ui-modules/slider\"\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n\r\n    /*\r\n    * Lets not redefine timepicker, Prevent \"Uncaught RangeError: Maximum call stack size exceeded\"\r\n    */\r\n    $.ui.timepicker = $.ui.timepicker || {};\r\n    if ($.ui.timepicker.version) {\r\n        return;\r\n    }\r\n\r\n    /*\r\n    * Extend jQueryUI, get it started with our version number\r\n    */\r\n    $.extend($.ui, {\r\n        timepicker: {\r\n            version: \"1.4.3\"\r\n        }\r\n    });\r\n\r\n    /*\r\n    * Timepicker manager.\r\n    * Use the singleton instance of this class, $.timepicker, to interact with the time picker.\r\n    * Settings for (groups of) time pickers are maintained in an instance object,\r\n    * allowing multiple different settings on the same page.\r\n    */\r\n    var Timepicker = function () {\r\n        this.regional = []; // Available regional settings, indexed by language code\r\n        this.regional[''] = { // Default regional settings\r\n            currentText: 'Now',\r\n            closeText: 'Done',\r\n            amNames: ['AM', 'A'],\r\n            pmNames: ['PM', 'P'],\r\n            timeFormat: 'HH:mm',\r\n            timeSuffix: '',\r\n            timeOnlyTitle: 'Choose Time',\r\n            timeText: 'Time',\r\n            hourText: 'Hour',\r\n            minuteText: 'Minute',\r\n            secondText: 'Second',\r\n            millisecText: 'Millisecond',\r\n            microsecText: 'Microsecond',\r\n            timezoneText: 'Time Zone',\r\n            isRTL: false\r\n        };\r\n        this._defaults = { // Global defaults for all the datetime picker instances\r\n            showButtonPanel: true,\r\n            timeOnly: false,\r\n            showHour: null,\r\n            showMinute: null,\r\n            showSecond: null,\r\n            showMillisec: null,\r\n            showMicrosec: null,\r\n            showTimezone: null,\r\n            showTime: true,\r\n            stepHour: 1,\r\n            stepMinute: 1,\r\n            stepSecond: 1,\r\n            stepMillisec: 1,\r\n            stepMicrosec: 1,\r\n            hour: 0,\r\n            minute: 0,\r\n            second: 0,\r\n            millisec: 0,\r\n            microsec: 0,\r\n            timezone: null,\r\n            hourMin: 0,\r\n            minuteMin: 0,\r\n            secondMin: 0,\r\n            millisecMin: 0,\r\n            microsecMin: 0,\r\n            hourMax: 23,\r\n            minuteMax: 59,\r\n            secondMax: 59,\r\n            millisecMax: 999,\r\n            microsecMax: 999,\r\n            minDateTime: null,\r\n            maxDateTime: null,\r\n            onSelect: null,\r\n            hourGrid: 0,\r\n            minuteGrid: 0,\r\n            secondGrid: 0,\r\n            millisecGrid: 0,\r\n            microsecGrid: 0,\r\n            alwaysSetTime: true,\r\n            separator: ' ',\r\n            altFieldTimeOnly: true,\r\n            altTimeFormat: null,\r\n            altSeparator: null,\r\n            altTimeSuffix: null,\r\n            pickerTimeFormat: null,\r\n            pickerTimeSuffix: null,\r\n            showTimepicker: true,\r\n            timezoneList: null,\r\n            addSliderAccess: false,\r\n            sliderAccessArgs: null,\r\n            controlType: 'slider',\r\n            defaultValue: null,\r\n            parse: 'strict'\r\n        };\r\n        $.extend(this._defaults, this.regional['']);\r\n    };\r\n\r\n    $.extend(Timepicker.prototype, {\r\n        $input: null,\r\n        $altInput: null,\r\n        $timeObj: null,\r\n        inst: null,\r\n        hour_slider: null,\r\n        minute_slider: null,\r\n        second_slider: null,\r\n        millisec_slider: null,\r\n        microsec_slider: null,\r\n        timezone_select: null,\r\n        hour: 0,\r\n        minute: 0,\r\n        second: 0,\r\n        millisec: 0,\r\n        microsec: 0,\r\n        timezone: null,\r\n        hourMinOriginal: null,\r\n        minuteMinOriginal: null,\r\n        secondMinOriginal: null,\r\n        millisecMinOriginal: null,\r\n        microsecMinOriginal: null,\r\n        hourMaxOriginal: null,\r\n        minuteMaxOriginal: null,\r\n        secondMaxOriginal: null,\r\n        millisecMaxOriginal: null,\r\n        microsecMaxOriginal: null,\r\n        ampm: '',\r\n        formattedDate: '',\r\n        formattedTime: '',\r\n        formattedDateTime: '',\r\n        timezoneList: null,\r\n        units: ['hour', 'minute', 'second', 'millisec', 'microsec'],\r\n        support: {},\r\n        control: null,\r\n\r\n        /*\r\n        * Override the default settings for all instances of the time picker.\r\n        * @param  {Object} settings  object - the new settings to use as defaults (anonymous object)\r\n        * @return {Object} the manager object\r\n        */\r\n        setDefaults: function (settings) {\r\n            extendRemove(this._defaults, settings || {});\r\n            return this;\r\n        },\r\n\r\n        /*\r\n        * Create a new Timepicker instance\r\n        */\r\n        _newInst: function ($input, opts) {\r\n            var tp_inst = new Timepicker(),\r\n                inlineSettings = {},\r\n                fns = {},\r\n                overrides, i;\r\n\r\n            for (var attrName in this._defaults) {\r\n                if (this._defaults.hasOwnProperty(attrName)) {\r\n                    var attrValue = $input.attr('time:' + attrName);\r\n                    if (attrValue) {\r\n                        try {\r\n                            inlineSettings[attrName] = eval(attrValue);\r\n                        } catch (err) {\r\n                            inlineSettings[attrName] = attrValue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            overrides = {\r\n                beforeShow: function (input, dp_inst) {\r\n                    if ($.isFunction(tp_inst._defaults.evnts.beforeShow)) {\r\n                        return tp_inst._defaults.evnts.beforeShow.call($input[0], input, dp_inst, tp_inst);\r\n                    }\r\n                },\r\n                onChangeMonthYear: function (year, month, dp_inst) {\r\n                    // Update the time as well : this prevents the time from disappearing from the $input field.\r\n                    tp_inst._updateDateTime(dp_inst);\r\n                    if ($.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)) {\r\n                        tp_inst._defaults.evnts.onChangeMonthYear.call($input[0], year, month, dp_inst, tp_inst);\r\n                    }\r\n                },\r\n                onClose: function (dateText, dp_inst) {\r\n                    if (tp_inst.timeDefined === true && $input.val() !== '') {\r\n                        tp_inst._updateDateTime(dp_inst);\r\n                    }\r\n                    if ($.isFunction(tp_inst._defaults.evnts.onClose)) {\r\n                        tp_inst._defaults.evnts.onClose.call($input[0], dateText, dp_inst, tp_inst);\r\n                    }\r\n                }\r\n            };\r\n            for (i in overrides) {\r\n                if (overrides.hasOwnProperty(i)) {\r\n                    fns[i] = opts[i] || null;\r\n                }\r\n            }\r\n\r\n            tp_inst._defaults = $.extend({}, this._defaults, inlineSettings, opts, overrides, {\r\n                evnts: fns,\r\n                timepicker: tp_inst // add timepicker as a property of datepicker: $.datepicker._get(dp_inst, 'timepicker');\r\n            });\r\n            tp_inst.amNames = $.map(tp_inst._defaults.amNames, function (val) {\r\n                return val.toUpperCase();\r\n            });\r\n            tp_inst.pmNames = $.map(tp_inst._defaults.pmNames, function (val) {\r\n                return val.toUpperCase();\r\n            });\r\n\r\n            // detect which units are supported\r\n            tp_inst.support = detectSupport(\r\n                tp_inst._defaults.timeFormat +\r\n                (tp_inst._defaults.pickerTimeFormat ? tp_inst._defaults.pickerTimeFormat : '') +\r\n                (tp_inst._defaults.altTimeFormat ? tp_inst._defaults.altTimeFormat : ''));\r\n\r\n            // controlType is string - key to our this._controls\r\n            if (typeof (tp_inst._defaults.controlType) === 'string') {\r\n                if (tp_inst._defaults.controlType === 'slider' && typeof ($.ui.slider) === 'undefined') {\r\n                    tp_inst._defaults.controlType = 'select';\r\n                }\r\n                tp_inst.control = tp_inst._controls[tp_inst._defaults.controlType];\r\n            }\r\n            // controlType is an object and must implement create, options, value methods\r\n            else {\r\n                tp_inst.control = tp_inst._defaults.controlType;\r\n            }\r\n\r\n            // prep the timezone options\r\n            var timezoneList = [-720, -660, -600, -570, -540, -480, -420, -360, -300, -270, -240, -210, -180, -120, -60,\r\n                0, 60, 120, 180, 210, 240, 270, 300, 330, 345, 360, 390, 420, 480, 525, 540, 570, 600, 630, 660, 690, 720, 765, 780, 840];\r\n            if (tp_inst._defaults.timezoneList !== null) {\r\n                timezoneList = tp_inst._defaults.timezoneList;\r\n            }\r\n            var tzl = timezoneList.length, tzi = 0, tzv = null;\r\n            if (tzl > 0 && typeof timezoneList[0] !== 'object') {\r\n                for (; tzi < tzl; tzi++) {\r\n                    tzv = timezoneList[tzi];\r\n                    timezoneList[tzi] = {\r\n                        value: tzv,\r\n                        label: $.timepicker.timezoneOffsetString(tzv, tp_inst.support.iso8601)\r\n                    };\r\n                }\r\n            }\r\n            tp_inst._defaults.timezoneList = timezoneList;\r\n\r\n            // set the default units\r\n            tp_inst.timezone = tp_inst._defaults.timezone !== null ? $.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone) :\r\n                ((new Date()).getTimezoneOffset() * -1);\r\n            tp_inst.hour = tp_inst._defaults.hour < tp_inst._defaults.hourMin ? tp_inst._defaults.hourMin :\r\n                tp_inst._defaults.hour > tp_inst._defaults.hourMax ? tp_inst._defaults.hourMax : tp_inst._defaults.hour;\r\n            tp_inst.minute = tp_inst._defaults.minute < tp_inst._defaults.minuteMin ? tp_inst._defaults.minuteMin :\r\n                tp_inst._defaults.minute > tp_inst._defaults.minuteMax ? tp_inst._defaults.minuteMax : tp_inst._defaults.minute;\r\n            tp_inst.second = tp_inst._defaults.second < tp_inst._defaults.secondMin ? tp_inst._defaults.secondMin :\r\n                tp_inst._defaults.second > tp_inst._defaults.secondMax ? tp_inst._defaults.secondMax : tp_inst._defaults.second;\r\n            tp_inst.millisec = tp_inst._defaults.millisec < tp_inst._defaults.millisecMin ? tp_inst._defaults.millisecMin :\r\n                tp_inst._defaults.millisec > tp_inst._defaults.millisecMax ? tp_inst._defaults.millisecMax : tp_inst._defaults.millisec;\r\n            tp_inst.microsec = tp_inst._defaults.microsec < tp_inst._defaults.microsecMin ? tp_inst._defaults.microsecMin :\r\n                tp_inst._defaults.microsec > tp_inst._defaults.microsecMax ? tp_inst._defaults.microsecMax : tp_inst._defaults.microsec;\r\n            tp_inst.ampm = '';\r\n            tp_inst.$input = $input;\r\n\r\n            if (tp_inst._defaults.altField) {\r\n                tp_inst.$altInput = $(tp_inst._defaults.altField).css({\r\n                    cursor: 'pointer'\r\n                }).focus(function () {\r\n                    $input.trigger(\"focus\");\r\n                });\r\n            }\r\n\r\n            if (tp_inst._defaults.minDate === 0 || tp_inst._defaults.minDateTime === 0) {\r\n                tp_inst._defaults.minDate = new Date();\r\n            }\r\n            if (tp_inst._defaults.maxDate === 0 || tp_inst._defaults.maxDateTime === 0) {\r\n                tp_inst._defaults.maxDate = new Date();\r\n            }\r\n\r\n            // datepicker needs minDate/maxDate, timepicker needs minDateTime/maxDateTime..\r\n            if (tp_inst._defaults.minDate !== undefined && tp_inst._defaults.minDate instanceof Date) {\r\n                tp_inst._defaults.minDateTime = new Date(tp_inst._defaults.minDate.getTime());\r\n            }\r\n            if (tp_inst._defaults.minDateTime !== undefined && tp_inst._defaults.minDateTime instanceof Date) {\r\n                tp_inst._defaults.minDate = new Date(tp_inst._defaults.minDateTime.getTime());\r\n            }\r\n            if (tp_inst._defaults.maxDate !== undefined && tp_inst._defaults.maxDate instanceof Date) {\r\n                tp_inst._defaults.maxDateTime = new Date(tp_inst._defaults.maxDate.getTime());\r\n            }\r\n            if (tp_inst._defaults.maxDateTime !== undefined && tp_inst._defaults.maxDateTime instanceof Date) {\r\n                tp_inst._defaults.maxDate = new Date(tp_inst._defaults.maxDateTime.getTime());\r\n            }\r\n            tp_inst.$input.bind('focus', function () {\r\n                tp_inst._onFocus();\r\n            });\r\n\r\n            return tp_inst;\r\n        },\r\n\r\n        /*\r\n        * add our sliders to the calendar\r\n        */\r\n        _addTimePicker: function (dp_inst) {\r\n            var currDT = (this.$altInput && this._defaults.altFieldTimeOnly) ? this.$input.val() + ' ' + this.$altInput.val() : this.$input.val();\r\n\r\n            this.timeDefined = this._parseTime(currDT);\r\n            this._limitMinMaxDateTime(dp_inst, false);\r\n            this._injectTimePicker();\r\n        },\r\n\r\n        /*\r\n        * parse the time string from input value or _setTime\r\n        */\r\n        _parseTime: function (timeString, withDate) {\r\n            if (!this.inst) {\r\n                this.inst = $.datepicker._getInst(this.$input[0]);\r\n            }\r\n\r\n            if (withDate || !this._defaults.timeOnly) {\r\n                var dp_dateFormat = $.datepicker._get(this.inst, 'dateFormat');\r\n                try {\r\n                    var parseRes = parseDateTimeInternal(dp_dateFormat, this._defaults.timeFormat, timeString, $.datepicker._getFormatConfig(this.inst), this._defaults);\r\n                    if (!parseRes.timeObj) {\r\n                        return false;\r\n                    }\r\n                    $.extend(this, parseRes.timeObj);\r\n                } catch (err) {\r\n                    $.timepicker.log(\"Error parsing the date/time string: \" + err +\r\n                        \"\\ndate/time string = \" + timeString +\r\n                        \"\\ntimeFormat = \" + this._defaults.timeFormat +\r\n                        \"\\ndateFormat = \" + dp_dateFormat);\r\n                    return false;\r\n                }\r\n                return true;\r\n            } else {\r\n                var timeObj = $.datepicker.parseTime(this._defaults.timeFormat, timeString, this._defaults);\r\n                if (!timeObj) {\r\n                    return false;\r\n                }\r\n                $.extend(this, timeObj);\r\n                return true;\r\n            }\r\n        },\r\n\r\n        /*\r\n        * generate and inject html for timepicker into ui datepicker\r\n        */\r\n        _injectTimePicker: function () {\r\n            var $dp = this.inst.dpDiv,\r\n                o = this.inst.settings,\r\n                tp_inst = this,\r\n                litem = '',\r\n                uitem = '',\r\n                show = null,\r\n                max = {},\r\n                gridSize = {},\r\n                size = null,\r\n                i = 0,\r\n                l = 0;\r\n\r\n            // Prevent displaying twice\r\n            if ($dp.find(\"div.ui-timepicker-div\").length === 0 && o.showTimepicker) {\r\n                var noDisplay = ' style=\"display:none;\"',\r\n                    html = '<div class=\"ui-timepicker-div' + (o.isRTL ? ' ui-timepicker-rtl' : '') + '\"><dl>' + '<dt class=\"ui_tpicker_time_label\"' + ((o.showTime) ? '' : noDisplay) + '>' + o.timeText + '</dt>' +\r\n                        '<dd class=\"ui_tpicker_time\"' + ((o.showTime) ? '' : noDisplay) + '></dd>';\r\n\r\n                // Create the markup\r\n                for (i = 0, l = this.units.length; i < l; i++) {\r\n                    litem = this.units[i];\r\n                    uitem = litem.substr(0, 1).toUpperCase() + litem.substr(1);\r\n                    show = o['show' + uitem] !== null ? o['show' + uitem] : this.support[litem];\r\n\r\n                    // Added by Peter Medeiros:\r\n                    // - Figure out what the hour/minute/second max should be based on the step values.\r\n                    // - Example: if stepMinute is 15, then minMax is 45.\r\n                    max[litem] = parseInt((o[litem + 'Max'] - ((o[litem + 'Max'] - o[litem + 'Min']) % o['step' + uitem])), 10);\r\n                    gridSize[litem] = 0;\r\n\r\n                    html += '<dt class=\"ui_tpicker_' + litem + '_label\"' + (show ? '' : noDisplay) + '>' + o[litem + 'Text'] + '</dt>' +\r\n                        '<dd class=\"ui_tpicker_' + litem + '\"><div class=\"ui_tpicker_' + litem + '_slider\"' + (show ? '' : noDisplay) + '></div>';\r\n\r\n                    if (show && o[litem + 'Grid'] > 0) {\r\n                        html += '<div style=\"padding-left: 1px\"><table class=\"ui-tpicker-grid-label\"><tr>';\r\n\r\n                        if (litem === 'hour') {\r\n                            for (var h = o[litem + 'Min']; h <= max[litem]; h += parseInt(o[litem + 'Grid'], 10)) {\r\n                                gridSize[litem]++;\r\n                                var tmph = $.datepicker.formatTime(this.support.ampm ? 'hht' : 'HH', {hour: h}, o);\r\n                                html += '<td data-for=\"' + litem + '\">' + tmph + '</td>';\r\n                            }\r\n                        } else {\r\n                            for (var m = o[litem + 'Min']; m <= max[litem]; m += parseInt(o[litem + 'Grid'], 10)) {\r\n                                gridSize[litem]++;\r\n                                html += '<td data-for=\"' + litem + '\">' + ((m < 10) ? '0' : '') + m + '</td>';\r\n                            }\r\n                        }\r\n\r\n                        html += '</tr></table></div>';\r\n                    }\r\n                    html += '</dd>';\r\n                }\r\n\r\n                // Timezone\r\n                var showTz = o.showTimezone !== null ? o.showTimezone : this.support.timezone;\r\n                html += '<dt class=\"ui_tpicker_timezone_label\"' + (showTz ? '' : noDisplay) + '>' + o.timezoneText + '</dt>';\r\n                html += '<dd class=\"ui_tpicker_timezone\" ' + (showTz ? '' : noDisplay) + '></dd>';\r\n\r\n                // Create the elements from string\r\n                html += '</dl></div>';\r\n                var $tp = $(html);\r\n\r\n                // if we only want time picker...\r\n                if (o.timeOnly === true) {\r\n                    $tp.prepend('<div class=\"ui-widget-header ui-helper-clearfix ui-corner-all\">' + '<div class=\"ui-datepicker-title\">' + o.timeOnlyTitle + '</div>' + '</div>');\r\n                    $dp.find('.ui-datepicker-header, .ui-datepicker-calendar').hide();\r\n                }\r\n\r\n                // add sliders, adjust grids, add events\r\n                for (i = 0, l = tp_inst.units.length; i < l; i++) {\r\n                    litem = tp_inst.units[i];\r\n                    uitem = litem.substr(0, 1).toUpperCase() + litem.substr(1);\r\n                    show = o['show' + uitem] !== null ? o['show' + uitem] : this.support[litem];\r\n\r\n                    // add the slider\r\n                    tp_inst[litem + '_slider'] = tp_inst.control.create(tp_inst, $tp.find('.ui_tpicker_' + litem + '_slider'), litem, tp_inst[litem], o[litem + 'Min'], max[litem], o['step' + uitem]);\r\n\r\n                    // adjust the grid and add click event\r\n                    if (show && o[litem + 'Grid'] > 0) {\r\n                        size = 100 * gridSize[litem] * o[litem + 'Grid'] / (max[litem] - o[litem + 'Min']);\r\n                        $tp.find('.ui_tpicker_' + litem + ' table').css({\r\n                            width: size + \"%\",\r\n                            marginLeft: o.isRTL ? '0' : ((size / (-2 * gridSize[litem])) + \"%\"),\r\n                            marginRight: o.isRTL ? ((size / (-2 * gridSize[litem])) + \"%\") : '0',\r\n                            borderCollapse: 'collapse'\r\n                        }).find(\"td\").click(function (e) {\r\n                            var $t = $(this),\r\n                                h = $t.html(),\r\n                                n = parseInt(h.replace(/[^0-9]/g), 10),\r\n                                ap = h.replace(/[^apm]/ig),\r\n                                f = $t.data('for'); // loses scope, so we use data-for\r\n\r\n                            if (f === 'hour') {\r\n                                if (ap.indexOf('p') !== -1 && n < 12) {\r\n                                    n += 12;\r\n                                } else {\r\n                                    if (ap.indexOf('a') !== -1 && n === 12) {\r\n                                        n = 0;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            tp_inst.control.value(tp_inst, tp_inst[f + '_slider'], litem, n);\r\n\r\n                            tp_inst._onTimeChange();\r\n                            tp_inst._onSelectHandler();\r\n                        }).css({\r\n                            cursor: 'pointer',\r\n                            width: (100 / gridSize[litem]) + '%',\r\n                            textAlign: 'center',\r\n                            overflow: 'hidden'\r\n                        });\r\n                    } // end if grid > 0\r\n                } // end for loop\r\n\r\n                // Add timezone options\r\n                this.timezone_select = $tp.find('.ui_tpicker_timezone').append('<select></select>').find(\"select\");\r\n                $.fn.append.apply(this.timezone_select,\r\n                    $.map(o.timezoneList, function (val, idx) {\r\n                        return $(\"<option />\").val(typeof val === \"object\" ? val.value : val).text(typeof val === \"object\" ? val.label : val);\r\n                    }));\r\n                if (typeof (this.timezone) !== \"undefined\" && this.timezone !== null && this.timezone !== \"\") {\r\n                    var local_timezone = (new Date(this.inst.selectedYear, this.inst.selectedMonth, this.inst.selectedDay, 12)).getTimezoneOffset() * -1;\r\n                    if (local_timezone === this.timezone) {\r\n                        selectLocalTimezone(tp_inst);\r\n                    } else {\r\n                        this.timezone_select.val(this.timezone);\r\n                    }\r\n                } else {\r\n                    if (typeof (this.hour) !== \"undefined\" && this.hour !== null && this.hour !== \"\") {\r\n                        this.timezone_select.val(o.timezone);\r\n                    } else {\r\n                        selectLocalTimezone(tp_inst);\r\n                    }\r\n                }\r\n                this.timezone_select.change(function () {\r\n                    tp_inst._onTimeChange();\r\n                    tp_inst._onSelectHandler();\r\n                });\r\n                // End timezone options\r\n\r\n                // inject timepicker into datepicker\r\n                var $buttonPanel = $dp.find('.ui-datepicker-buttonpane');\r\n                if ($buttonPanel.length) {\r\n                    $buttonPanel.before($tp);\r\n                } else {\r\n                    $dp.append($tp);\r\n                }\r\n\r\n                this.$timeObj = $tp.find('.ui_tpicker_time');\r\n\r\n                if (this.inst !== null) {\r\n                    var timeDefined = this.timeDefined;\r\n                    this._onTimeChange();\r\n                    this.timeDefined = timeDefined;\r\n                }\r\n\r\n                // slideAccess integration: http://trentrichardson.com/2011/11/11/jquery-ui-sliders-and-touch-accessibility/\r\n                if (this._defaults.addSliderAccess) {\r\n                    var sliderAccessArgs = this._defaults.sliderAccessArgs,\r\n                        rtl = this._defaults.isRTL;\r\n                    sliderAccessArgs.isRTL = rtl;\r\n\r\n                    setTimeout(function () { // fix for inline mode\r\n                        if ($tp.find('.ui-slider-access').length === 0) {\r\n                            $tp.find('.ui-slider:visible').sliderAccess(sliderAccessArgs);\r\n\r\n                            // fix any grids since sliders are shorter\r\n                            var sliderAccessWidth = $tp.find('.ui-slider-access:eq(0)').outerWidth(true);\r\n                            if (sliderAccessWidth) {\r\n                                $tp.find('table:visible').each(function () {\r\n                                    var $g = $(this),\r\n                                        oldWidth = $g.outerWidth(),\r\n                                        oldMarginLeft = $g.css(rtl ? 'marginRight' : 'marginLeft').toString().replace('%', ''),\r\n                                        newWidth = oldWidth - sliderAccessWidth,\r\n                                        newMarginLeft = ((oldMarginLeft * newWidth) / oldWidth) + '%',\r\n                                        css = {width: newWidth, marginRight: 0, marginLeft: 0};\r\n                                    css[rtl ? 'marginRight' : 'marginLeft'] = newMarginLeft;\r\n                                    $g.css(css);\r\n                                });\r\n                            }\r\n                        }\r\n                    }, 10);\r\n                }\r\n                // end slideAccess integration\r\n\r\n                tp_inst._limitMinMaxDateTime(this.inst, true);\r\n            }\r\n        },\r\n\r\n        /*\r\n        * This function tries to limit the ability to go outside the\r\n        * min/max date range\r\n        */\r\n        _limitMinMaxDateTime: function (dp_inst, adjustSliders) {\r\n            var o = this._defaults,\r\n                dp_date = new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay);\r\n\r\n            if (!this._defaults.showTimepicker) {\r\n                return;\r\n            } // No time so nothing to check here\r\n\r\n            if ($.datepicker._get(dp_inst, 'minDateTime') !== null && $.datepicker._get(dp_inst, 'minDateTime') !== undefined && dp_date) {\r\n                var minDateTime = $.datepicker._get(dp_inst, 'minDateTime'),\r\n                    minDateTimeDate = new Date(minDateTime.getFullYear(), minDateTime.getMonth(), minDateTime.getDate(), 0, 0, 0, 0);\r\n\r\n                if (this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null || this.microsecMinOriginal === null) {\r\n                    this.hourMinOriginal = o.hourMin;\r\n                    this.minuteMinOriginal = o.minuteMin;\r\n                    this.secondMinOriginal = o.secondMin;\r\n                    this.millisecMinOriginal = o.millisecMin;\r\n                    this.microsecMinOriginal = o.microsecMin;\r\n                }\r\n\r\n                if (dp_inst.settings.timeOnly || minDateTimeDate.getTime() === dp_date.getTime()) {\r\n                    this._defaults.hourMin = minDateTime.getHours();\r\n                    if (this.hour <= this._defaults.hourMin) {\r\n                        this.hour = this._defaults.hourMin;\r\n                        this._defaults.minuteMin = minDateTime.getMinutes();\r\n                        if (this.minute <= this._defaults.minuteMin) {\r\n                            this.minute = this._defaults.minuteMin;\r\n                            this._defaults.secondMin = minDateTime.getSeconds();\r\n                            if (this.second <= this._defaults.secondMin) {\r\n                                this.second = this._defaults.secondMin;\r\n                                this._defaults.millisecMin = minDateTime.getMilliseconds();\r\n                                if (this.millisec <= this._defaults.millisecMin) {\r\n                                    this.millisec = this._defaults.millisecMin;\r\n                                    this._defaults.microsecMin = minDateTime.getMicroseconds();\r\n                                } else {\r\n                                    if (this.microsec < this._defaults.microsecMin) {\r\n                                        this.microsec = this._defaults.microsecMin;\r\n                                    }\r\n                                    this._defaults.microsecMin = this.microsecMinOriginal;\r\n                                }\r\n                            } else {\r\n                                this._defaults.millisecMin = this.millisecMinOriginal;\r\n                                this._defaults.microsecMin = this.microsecMinOriginal;\r\n                            }\r\n                        } else {\r\n                            this._defaults.secondMin = this.secondMinOriginal;\r\n                            this._defaults.millisecMin = this.millisecMinOriginal;\r\n                            this._defaults.microsecMin = this.microsecMinOriginal;\r\n                        }\r\n                    } else {\r\n                        this._defaults.minuteMin = this.minuteMinOriginal;\r\n                        this._defaults.secondMin = this.secondMinOriginal;\r\n                        this._defaults.millisecMin = this.millisecMinOriginal;\r\n                        this._defaults.microsecMin = this.microsecMinOriginal;\r\n                    }\r\n                } else {\r\n                    this._defaults.hourMin = this.hourMinOriginal;\r\n                    this._defaults.minuteMin = this.minuteMinOriginal;\r\n                    this._defaults.secondMin = this.secondMinOriginal;\r\n                    this._defaults.millisecMin = this.millisecMinOriginal;\r\n                    this._defaults.microsecMin = this.microsecMinOriginal;\r\n                }\r\n            }\r\n\r\n            if ($.datepicker._get(dp_inst, 'maxDateTime') !== null && $.datepicker._get(dp_inst, 'maxDateTime') !== undefined && dp_date) {\r\n                var maxDateTime = $.datepicker._get(dp_inst, 'maxDateTime'),\r\n                    maxDateTimeDate = new Date(maxDateTime.getFullYear(), maxDateTime.getMonth(), maxDateTime.getDate(), 0, 0, 0, 0);\r\n\r\n                if (this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null || this.millisecMaxOriginal === null) {\r\n                    this.hourMaxOriginal = o.hourMax;\r\n                    this.minuteMaxOriginal = o.minuteMax;\r\n                    this.secondMaxOriginal = o.secondMax;\r\n                    this.millisecMaxOriginal = o.millisecMax;\r\n                    this.microsecMaxOriginal = o.microsecMax;\r\n                }\r\n\r\n                if (dp_inst.settings.timeOnly || maxDateTimeDate.getTime() === dp_date.getTime()) {\r\n                    this._defaults.hourMax = maxDateTime.getHours();\r\n                    if (this.hour >= this._defaults.hourMax) {\r\n                        this.hour = this._defaults.hourMax;\r\n                        this._defaults.minuteMax = maxDateTime.getMinutes();\r\n                        if (this.minute >= this._defaults.minuteMax) {\r\n                            this.minute = this._defaults.minuteMax;\r\n                            this._defaults.secondMax = maxDateTime.getSeconds();\r\n                            if (this.second >= this._defaults.secondMax) {\r\n                                this.second = this._defaults.secondMax;\r\n                                this._defaults.millisecMax = maxDateTime.getMilliseconds();\r\n                                if (this.millisec >= this._defaults.millisecMax) {\r\n                                    this.millisec = this._defaults.millisecMax;\r\n                                    this._defaults.microsecMax = maxDateTime.getMicroseconds();\r\n                                } else {\r\n                                    if (this.microsec > this._defaults.microsecMax) {\r\n                                        this.microsec = this._defaults.microsecMax;\r\n                                    }\r\n                                    this._defaults.microsecMax = this.microsecMaxOriginal;\r\n                                }\r\n                            } else {\r\n                                this._defaults.millisecMax = this.millisecMaxOriginal;\r\n                                this._defaults.microsecMax = this.microsecMaxOriginal;\r\n                            }\r\n                        } else {\r\n                            this._defaults.secondMax = this.secondMaxOriginal;\r\n                            this._defaults.millisecMax = this.millisecMaxOriginal;\r\n                            this._defaults.microsecMax = this.microsecMaxOriginal;\r\n                        }\r\n                    } else {\r\n                        this._defaults.minuteMax = this.minuteMaxOriginal;\r\n                        this._defaults.secondMax = this.secondMaxOriginal;\r\n                        this._defaults.millisecMax = this.millisecMaxOriginal;\r\n                        this._defaults.microsecMax = this.microsecMaxOriginal;\r\n                    }\r\n                } else {\r\n                    this._defaults.hourMax = this.hourMaxOriginal;\r\n                    this._defaults.minuteMax = this.minuteMaxOriginal;\r\n                    this._defaults.secondMax = this.secondMaxOriginal;\r\n                    this._defaults.millisecMax = this.millisecMaxOriginal;\r\n                    this._defaults.microsecMax = this.microsecMaxOriginal;\r\n                }\r\n            }\r\n\r\n            if (adjustSliders !== undefined && adjustSliders === true) {\r\n                var hourMax = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)), 10),\r\n                    minMax = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)), 10),\r\n                    secMax = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)), 10),\r\n                    millisecMax = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)), 10),\r\n                    microsecMax = parseInt((this._defaults.microsecMax - ((this._defaults.microsecMax - this._defaults.microsecMin) % this._defaults.stepMicrosec)), 10);\r\n\r\n                if (this.hour_slider) {\r\n                    this.control.options(this, this.hour_slider, 'hour', {min: this._defaults.hourMin, max: hourMax});\r\n                    this.control.value(this, this.hour_slider, 'hour', this.hour - (this.hour % this._defaults.stepHour));\r\n                }\r\n                if (this.minute_slider) {\r\n                    this.control.options(this, this.minute_slider, 'minute', {\r\n                        min: this._defaults.minuteMin,\r\n                        max: minMax\r\n                    });\r\n                    this.control.value(this, this.minute_slider, 'minute', this.minute - (this.minute % this._defaults.stepMinute));\r\n                }\r\n                if (this.second_slider) {\r\n                    this.control.options(this, this.second_slider, 'second', {\r\n                        min: this._defaults.secondMin,\r\n                        max: secMax\r\n                    });\r\n                    this.control.value(this, this.second_slider, 'second', this.second - (this.second % this._defaults.stepSecond));\r\n                }\r\n                if (this.millisec_slider) {\r\n                    this.control.options(this, this.millisec_slider, 'millisec', {\r\n                        min: this._defaults.millisecMin,\r\n                        max: millisecMax\r\n                    });\r\n                    this.control.value(this, this.millisec_slider, 'millisec', this.millisec - (this.millisec % this._defaults.stepMillisec));\r\n                }\r\n                if (this.microsec_slider) {\r\n                    this.control.options(this, this.microsec_slider, 'microsec', {\r\n                        min: this._defaults.microsecMin,\r\n                        max: microsecMax\r\n                    });\r\n                    this.control.value(this, this.microsec_slider, 'microsec', this.microsec - (this.microsec % this._defaults.stepMicrosec));\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        /*\r\n        * when a slider moves, set the internal time...\r\n        * on time change is also called when the time is updated in the text field\r\n        */\r\n        _onTimeChange: function () {\r\n            if (!this._defaults.showTimepicker) {\r\n                return;\r\n            }\r\n            var hour = (this.hour_slider) ? this.control.value(this, this.hour_slider, 'hour') : false,\r\n                minute = (this.minute_slider) ? this.control.value(this, this.minute_slider, 'minute') : false,\r\n                second = (this.second_slider) ? this.control.value(this, this.second_slider, 'second') : false,\r\n                millisec = (this.millisec_slider) ? this.control.value(this, this.millisec_slider, 'millisec') : false,\r\n                microsec = (this.microsec_slider) ? this.control.value(this, this.microsec_slider, 'microsec') : false,\r\n                timezone = (this.timezone_select) ? this.timezone_select.val() : false,\r\n                o = this._defaults,\r\n                pickerTimeFormat = o.pickerTimeFormat || o.timeFormat,\r\n                pickerTimeSuffix = o.pickerTimeSuffix || o.timeSuffix;\r\n\r\n            if (typeof (hour) === 'object') {\r\n                hour = false;\r\n            }\r\n            if (typeof (minute) === 'object') {\r\n                minute = false;\r\n            }\r\n            if (typeof (second) === 'object') {\r\n                second = false;\r\n            }\r\n            if (typeof (millisec) === 'object') {\r\n                millisec = false;\r\n            }\r\n            if (typeof (microsec) === 'object') {\r\n                microsec = false;\r\n            }\r\n            if (typeof (timezone) === 'object') {\r\n                timezone = false;\r\n            }\r\n\r\n            if (hour !== false) {\r\n                hour = parseInt(hour, 10);\r\n            }\r\n            if (minute !== false) {\r\n                minute = parseInt(minute, 10);\r\n            }\r\n            if (second !== false) {\r\n                second = parseInt(second, 10);\r\n            }\r\n            if (millisec !== false) {\r\n                millisec = parseInt(millisec, 10);\r\n            }\r\n            if (microsec !== false) {\r\n                microsec = parseInt(microsec, 10);\r\n            }\r\n            if (timezone !== false) {\r\n                timezone = timezone.toString();\r\n            }\r\n\r\n            var ampm = o[hour < 12 ? 'amNames' : 'pmNames'][0];\r\n\r\n            // If the update was done in the input field, the input field should not be updated.\r\n            // If the update was done using the sliders, update the input field.\r\n            var hasChanged = (\r\n                hour !== parseInt(this.hour, 10) || // sliders should all be numeric\r\n                minute !== parseInt(this.minute, 10) ||\r\n                second !== parseInt(this.second, 10) ||\r\n                millisec !== parseInt(this.millisec, 10) ||\r\n                microsec !== parseInt(this.microsec, 10) ||\r\n                (this.ampm.length > 0 && (hour < 12) !== ($.inArray(this.ampm.toUpperCase(), this.amNames) !== -1)) ||\r\n                (this.timezone !== null && timezone !== this.timezone.toString()) // could be numeric or \"EST\" format, so use toString()\r\n            );\r\n\r\n            if (hasChanged) {\r\n\r\n                if (hour !== false) {\r\n                    this.hour = hour;\r\n                }\r\n                if (minute !== false) {\r\n                    this.minute = minute;\r\n                }\r\n                if (second !== false) {\r\n                    this.second = second;\r\n                }\r\n                if (millisec !== false) {\r\n                    this.millisec = millisec;\r\n                }\r\n                if (microsec !== false) {\r\n                    this.microsec = microsec;\r\n                }\r\n                if (timezone !== false) {\r\n                    this.timezone = timezone;\r\n                }\r\n\r\n                if (!this.inst) {\r\n                    this.inst = $.datepicker._getInst(this.$input[0]);\r\n                }\r\n\r\n                this._limitMinMaxDateTime(this.inst, true);\r\n            }\r\n            if (this.support.ampm) {\r\n                this.ampm = ampm;\r\n            }\r\n\r\n            // Updates the time within the timepicker\r\n            this.formattedTime = $.datepicker.formatTime(o.timeFormat, this, o);\r\n            if (this.$timeObj) {\r\n                if (pickerTimeFormat === o.timeFormat) {\r\n                    this.$timeObj.text(this.formattedTime + pickerTimeSuffix);\r\n                } else {\r\n                    this.$timeObj.text($.datepicker.formatTime(pickerTimeFormat, this, o) + pickerTimeSuffix);\r\n                }\r\n            }\r\n\r\n            this.timeDefined = true;\r\n            if (hasChanged) {\r\n                this._updateDateTime();\r\n                this.$input.focus();\r\n            }\r\n        },\r\n\r\n        /*\r\n        * call custom onSelect.\r\n        * bind to sliders slidestop, and grid click.\r\n        */\r\n        _onSelectHandler: function () {\r\n            var onSelect = this._defaults.onSelect || this.inst.settings.onSelect;\r\n            var inputEl = this.$input ? this.$input[0] : null;\r\n            if (onSelect && inputEl) {\r\n                onSelect.apply(inputEl, [this.formattedDateTime, this]);\r\n            }\r\n        },\r\n\r\n        /*\r\n        * update our input with the new date time..\r\n        */\r\n        _updateDateTime: function (dp_inst) {\r\n            dp_inst = this.inst || dp_inst;\r\n            var dtTmp = (dp_inst.currentYear > 0 ?\r\n                new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay) :\r\n                new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),\r\n                dt = $.datepicker._daylightSavingAdjust(dtTmp),\r\n                //dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),\r\n                //dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay)),\r\n                dateFmt = $.datepicker._get(dp_inst, 'dateFormat'),\r\n                formatCfg = $.datepicker._getFormatConfig(dp_inst),\r\n                timeAvailable = dt !== null && this.timeDefined;\r\n            this.formattedDate = $.datepicker.formatDate(dateFmt, (dt === null ? new Date() : dt), formatCfg);\r\n            var formattedDateTime = this.formattedDate;\r\n\r\n            // if a slider was changed but datepicker doesn't have a value yet, set it\r\n            if (dp_inst.lastVal === \"\") {\r\n                dp_inst.currentYear = dp_inst.selectedYear;\r\n                dp_inst.currentMonth = dp_inst.selectedMonth;\r\n                dp_inst.currentDay = dp_inst.selectedDay;\r\n            }\r\n\r\n            /*\r\n            * remove following lines to force every changes in date picker to change the input value\r\n            * Bug descriptions: when an input field has a default value, and click on the field to pop up the date picker.\r\n            * If the user manually empty the value in the input field, the date picker will never change selected value.\r\n            */\r\n            //if (dp_inst.lastVal !== undefined && (dp_inst.lastVal.length > 0 && this.$input.val().length === 0)) {\r\n            //\treturn;\r\n            //}\r\n\r\n            if (this._defaults.timeOnly === true) {\r\n                formattedDateTime = this.formattedTime;\r\n            } else if (this._defaults.timeOnly !== true && (this._defaults.alwaysSetTime || timeAvailable)) {\r\n                formattedDateTime += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix;\r\n            }\r\n\r\n            this.formattedDateTime = formattedDateTime;\r\n\r\n            if (!this._defaults.showTimepicker) {\r\n                this.$input.val(this.formattedDate);\r\n            } else if (this.$altInput && this._defaults.timeOnly === false && this._defaults.altFieldTimeOnly === true) {\r\n                this.$altInput.val(this.formattedTime);\r\n                this.$input.val(this.formattedDate);\r\n            } else if (this.$altInput) {\r\n                this.$input.val(formattedDateTime);\r\n                var altFormattedDateTime = '',\r\n                    altSeparator = this._defaults.altSeparator ? this._defaults.altSeparator : this._defaults.separator,\r\n                    altTimeSuffix = this._defaults.altTimeSuffix ? this._defaults.altTimeSuffix : this._defaults.timeSuffix;\r\n\r\n                if (!this._defaults.timeOnly) {\r\n                    if (this._defaults.altFormat) {\r\n                        altFormattedDateTime = $.datepicker.formatDate(this._defaults.altFormat, (dt === null ? new Date() : dt), formatCfg);\r\n                    } else {\r\n                        altFormattedDateTime = this.formattedDate;\r\n                    }\r\n\r\n                    if (altFormattedDateTime) {\r\n                        altFormattedDateTime += altSeparator;\r\n                    }\r\n                }\r\n\r\n                if (this._defaults.altTimeFormat) {\r\n                    altFormattedDateTime += $.datepicker.formatTime(this._defaults.altTimeFormat, this, this._defaults) + altTimeSuffix;\r\n                } else {\r\n                    altFormattedDateTime += this.formattedTime + altTimeSuffix;\r\n                }\r\n                this.$altInput.val(altFormattedDateTime);\r\n            } else {\r\n                this.$input.val(formattedDateTime);\r\n            }\r\n\r\n            this.$input.trigger(\"change\");\r\n        },\r\n\r\n        _onFocus: function () {\r\n            if (!this.$input.val() && this._defaults.defaultValue) {\r\n                this.$input.val(this._defaults.defaultValue);\r\n                var inst = $.datepicker._getInst(this.$input.get(0)),\r\n                    tp_inst = $.datepicker._get(inst, 'timepicker');\r\n                if (tp_inst) {\r\n                    if (tp_inst._defaults.timeOnly && (inst.input.val() !== inst.lastVal)) {\r\n                        try {\r\n                            $.datepicker._updateDatepicker(inst);\r\n                        } catch (err) {\r\n                            $.timepicker.log(err);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /*\r\n        * Small abstraction to control types\r\n        * We can add more, just be sure to follow the pattern: create, options, value\r\n        */\r\n        _controls: {\r\n            // slider methods\r\n            slider: {\r\n                create: function (tp_inst, obj, unit, val, min, max, step) {\r\n                    var rtl = tp_inst._defaults.isRTL; // if rtl go -60->0 instead of 0->60\r\n                    return obj.prop('slide', null).slider({\r\n                        orientation: \"horizontal\",\r\n                        value: rtl ? val * -1 : val,\r\n                        min: rtl ? max * -1 : min,\r\n                        max: rtl ? min * -1 : max,\r\n                        step: step,\r\n                        slide: function (event, ui) {\r\n                            tp_inst.control.value(tp_inst, $(this), unit, rtl ? ui.value * -1 : ui.value);\r\n                            tp_inst._onTimeChange();\r\n                        },\r\n                        stop: function (event, ui) {\r\n                            tp_inst._onSelectHandler();\r\n                        }\r\n                    });\r\n                },\r\n                options: function (tp_inst, obj, unit, opts, val) {\r\n                    if (tp_inst._defaults.isRTL) {\r\n                        if (typeof (opts) === 'string') {\r\n                            if (opts === 'min' || opts === 'max') {\r\n                                if (val !== undefined) {\r\n                                    return obj.slider(opts, val * -1);\r\n                                }\r\n                                return Math.abs(obj.slider(opts));\r\n                            }\r\n                            return obj.slider(opts);\r\n                        }\r\n                        var min = opts.min,\r\n                            max = opts.max;\r\n                        opts.min = opts.max = null;\r\n                        if (min !== undefined) {\r\n                            opts.max = min * -1;\r\n                        }\r\n                        if (max !== undefined) {\r\n                            opts.min = max * -1;\r\n                        }\r\n                        return obj.slider(opts);\r\n                    }\r\n                    if (typeof (opts) === 'string' && val !== undefined) {\r\n                        return obj.slider(opts, val);\r\n                    }\r\n                    return obj.slider(opts);\r\n                },\r\n                value: function (tp_inst, obj, unit, val) {\r\n                    if (tp_inst._defaults.isRTL) {\r\n                        if (val !== undefined) {\r\n                            return obj.slider('value', val * -1);\r\n                        }\r\n                        return Math.abs(obj.slider('value'));\r\n                    }\r\n                    if (val !== undefined) {\r\n                        return obj.slider('value', val);\r\n                    }\r\n                    return obj.slider('value');\r\n                }\r\n            },\r\n            // select methods\r\n            select: {\r\n                create: function (tp_inst, obj, unit, val, min, max, step) {\r\n                    var sel = '<select class=\"ui-timepicker-select\" data-unit=\"' + unit + '\" data-min=\"' + min + '\" data-max=\"' + max + '\" data-step=\"' + step + '\">',\r\n                        format = tp_inst._defaults.pickerTimeFormat || tp_inst._defaults.timeFormat;\r\n\r\n                    for (var i = min; i <= max; i += step) {\r\n                        sel += '<option value=\"' + i + '\"' + (i === val ? ' selected' : '') + '>';\r\n                        if (unit === 'hour') {\r\n                            sel += $.datepicker.formatTime($.trim(format.replace(/[^ht ]/ig, '')), {hour: i}, tp_inst._defaults);\r\n                        } else if (unit === 'millisec' || unit === 'microsec' || i >= 10) {\r\n                            sel += i;\r\n                        } else {\r\n                            sel += '0' + i.toString();\r\n                        }\r\n                        sel += '</option>';\r\n                    }\r\n                    sel += '</select>';\r\n\r\n                    obj.children('select').remove();\r\n\r\n                    $(sel).appendTo(obj).change(function (e) {\r\n                        tp_inst._onTimeChange();\r\n                        tp_inst._onSelectHandler();\r\n                    });\r\n\r\n                    return obj;\r\n                },\r\n                options: function (tp_inst, obj, unit, opts, val) {\r\n                    var o = {},\r\n                        $t = obj.children('select');\r\n                    if (typeof (opts) === 'string') {\r\n                        if (val === undefined) {\r\n                            return $t.data(opts);\r\n                        }\r\n                        o[opts] = val;\r\n                    } else {\r\n                        o = opts;\r\n                    }\r\n                    return tp_inst.control.create(tp_inst, obj, $t.data('unit'), $t.val(), o.min || $t.data('min'), o.max || $t.data('max'), o.step || $t.data('step'));\r\n                },\r\n                value: function (tp_inst, obj, unit, val) {\r\n                    var $t = obj.children('select');\r\n                    if (val !== undefined) {\r\n                        return $t.val(val);\r\n                    }\r\n                    return $t.val();\r\n                }\r\n            }\r\n        } // end _controls\r\n\r\n    });\r\n\r\n    $.fn.extend({\r\n        /*\r\n        * shorthand just to use timepicker.\r\n        */\r\n        timepicker: function (o) {\r\n            o = o || {};\r\n            var tmp_args = Array.prototype.slice.call(arguments);\r\n\r\n            if (typeof o === 'object') {\r\n                tmp_args[0] = $.extend(o, {\r\n                    timeOnly: true\r\n                });\r\n            }\r\n\r\n            return $(this).each(function () {\r\n                $.fn.datetimepicker.apply($(this), tmp_args);\r\n            });\r\n        },\r\n\r\n        /*\r\n        * extend timepicker to datepicker\r\n        */\r\n        datetimepicker: function (o) {\r\n            o = o || {};\r\n            var tmp_args = arguments;\r\n\r\n            if (typeof (o) === 'string') {\r\n                if (o === 'getDate') {\r\n                    return $.fn.datepicker.apply($(this[0]), tmp_args);\r\n                } else {\r\n                    return this.each(function () {\r\n                        var $t = $(this);\r\n                        $t.datepicker.apply($t, tmp_args);\r\n                    });\r\n                }\r\n            } else {\r\n                return this.each(function () {\r\n                    var $t = $(this);\r\n                    $t.datepicker($.timepicker._newInst($t, o)._defaults);\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    /*\r\n    * Public Utility to parse date and time\r\n    */\r\n    $.datepicker.parseDateTime = function (dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {\r\n        var parseRes = parseDateTimeInternal(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings);\r\n        if (parseRes.timeObj) {\r\n            var t = parseRes.timeObj;\r\n            parseRes.date.setHours(t.hour, t.minute, t.second, t.millisec);\r\n            parseRes.date.setMicroseconds(t.microsec);\r\n        }\r\n\r\n        return parseRes.date;\r\n    };\r\n\r\n    /*\r\n    * Public utility to parse time\r\n    */\r\n    $.datepicker.parseTime = function (timeFormat, timeString, options) {\r\n        var o = extendRemove(extendRemove({}, $.timepicker._defaults), options || {}),\r\n            iso8601 = (timeFormat.replace(/\\'.*?\\'/g, '').indexOf('Z') !== -1);\r\n\r\n        // Strict parse requires the timeString to match the timeFormat exactly\r\n        var strictParse = function (f, s, o) {\r\n\r\n            // pattern for standard and localized AM/PM markers\r\n            var getPatternAmpm = function (amNames, pmNames) {\r\n                var markers = [];\r\n                if (amNames) {\r\n                    $.merge(markers, amNames);\r\n                }\r\n                if (pmNames) {\r\n                    $.merge(markers, pmNames);\r\n                }\r\n                markers = $.map(markers, function (val) {\r\n                    return val.replace(/[.*+?|()\\[\\]{}\\\\]/g, '\\\\$&');\r\n                });\r\n                return '(' + markers.join('|') + ')?';\r\n            };\r\n\r\n            // figure out position of time elements.. cause js cant do named captures\r\n            var getFormatPositions = function (timeFormat) {\r\n                var finds = timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),\r\n                    orders = {\r\n                        h: -1,\r\n                        m: -1,\r\n                        s: -1,\r\n                        l: -1,\r\n                        c: -1,\r\n                        t: -1,\r\n                        z: -1\r\n                    };\r\n\r\n                if (finds) {\r\n                    for (var i = 0; i < finds.length; i++) {\r\n                        if (orders[finds[i].toString().charAt(0)] === -1) {\r\n                            orders[finds[i].toString().charAt(0)] = i + 1;\r\n                        }\r\n                    }\r\n                }\r\n                return orders;\r\n            };\r\n\r\n            var regstr = '^' + f.toString()\r\n                    .replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function (match) {\r\n                        var ml = match.length;\r\n                        switch (match.charAt(0).toLowerCase()) {\r\n                            case 'h':\r\n                                return ml === 1 ? '(\\\\d?\\\\d)' : '(\\\\d{' + ml + '})';\r\n                            case 'm':\r\n                                return ml === 1 ? '(\\\\d?\\\\d)' : '(\\\\d{' + ml + '})';\r\n                            case 's':\r\n                                return ml === 1 ? '(\\\\d?\\\\d)' : '(\\\\d{' + ml + '})';\r\n                            case 'l':\r\n                                return '(\\\\d?\\\\d?\\\\d)';\r\n                            case 'c':\r\n                                return '(\\\\d?\\\\d?\\\\d)';\r\n                            case 'z':\r\n                                return '(z|[-+]\\\\d\\\\d:?\\\\d\\\\d|\\\\S+)?';\r\n                            case 't':\r\n                                return getPatternAmpm(o.amNames, o.pmNames);\r\n                            default:    // literal escaped in quotes\r\n                                return '(' + match.replace(/\\'/g, \"\").replace(/(\\.|\\$|\\^|\\\\|\\/|\\(|\\)|\\[|\\]|\\?|\\+|\\*)/g, function (m) {\r\n                                    return \"\\\\\" + m;\r\n                                }) + ')?';\r\n                        }\r\n                    })\r\n                    .replace(/\\s/g, '\\\\s?') +\r\n                o.timeSuffix + '$',\r\n                order = getFormatPositions(f),\r\n                ampm = '',\r\n                treg;\r\n\r\n            treg = s.match(new RegExp(regstr, 'i'));\r\n\r\n            var resTime = {\r\n                hour: 0,\r\n                minute: 0,\r\n                second: 0,\r\n                millisec: 0,\r\n                microsec: 0\r\n            };\r\n\r\n            if (treg) {\r\n                if (order.t !== -1) {\r\n                    if (treg[order.t] === undefined || treg[order.t].length === 0) {\r\n                        ampm = '';\r\n                        resTime.ampm = '';\r\n                    } else {\r\n                        ampm = $.inArray(treg[order.t].toUpperCase(), o.amNames) !== -1 ? 'AM' : 'PM';\r\n                        resTime.ampm = o[ampm === 'AM' ? 'amNames' : 'pmNames'][0];\r\n                    }\r\n                }\r\n\r\n                if (order.h !== -1) {\r\n                    if (ampm === 'AM' && treg[order.h] === '12') {\r\n                        resTime.hour = 0; // 12am = 0 hour\r\n                    } else {\r\n                        if (ampm === 'PM' && treg[order.h] !== '12') {\r\n                            resTime.hour = parseInt(treg[order.h], 10) + 12; // 12pm = 12 hour, any other pm = hour + 12\r\n                        } else {\r\n                            resTime.hour = Number(treg[order.h]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (order.m !== -1) {\r\n                    resTime.minute = Number(treg[order.m]);\r\n                }\r\n                if (order.s !== -1) {\r\n                    resTime.second = Number(treg[order.s]);\r\n                }\r\n                if (order.l !== -1) {\r\n                    resTime.millisec = Number(treg[order.l]);\r\n                }\r\n                if (order.c !== -1) {\r\n                    resTime.microsec = Number(treg[order.c]);\r\n                }\r\n                if (order.z !== -1 && treg[order.z] !== undefined) {\r\n                    resTime.timezone = $.timepicker.timezoneOffsetNumber(treg[order.z]);\r\n                }\r\n\r\n\r\n                return resTime;\r\n            }\r\n            return false;\r\n        };// end strictParse\r\n\r\n        // First try JS Date, if that fails, use strictParse\r\n        var looseParse = function (f, s, o) {\r\n            try {\r\n                var d = new Date('2012-01-01 ' + s);\r\n                if (isNaN(d.getTime())) {\r\n                    d = new Date('2012-01-01T' + s);\r\n                    if (isNaN(d.getTime())) {\r\n                        d = new Date('01/01/2012 ' + s);\r\n                        if (isNaN(d.getTime())) {\r\n                            throw \"Unable to parse time with native Date: \" + s;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    hour: d.getHours(),\r\n                    minute: d.getMinutes(),\r\n                    second: d.getSeconds(),\r\n                    millisec: d.getMilliseconds(),\r\n                    microsec: d.getMicroseconds(),\r\n                    timezone: d.getTimezoneOffset() * -1\r\n                };\r\n            } catch (err) {\r\n                try {\r\n                    return strictParse(f, s, o);\r\n                } catch (err2) {\r\n                    $.timepicker.log(\"Unable to parse \\ntimeString: \" + s + \"\\ntimeFormat: \" + f);\r\n                }\r\n            }\r\n            return false;\r\n        }; // end looseParse\r\n\r\n        if (typeof o.parse === \"function\") {\r\n            return o.parse(timeFormat, timeString, o);\r\n        }\r\n        if (o.parse === 'loose') {\r\n            return looseParse(timeFormat, timeString, o);\r\n        }\r\n        return strictParse(timeFormat, timeString, o);\r\n    };\r\n\r\n    /**\r\n     * Public utility to format the time\r\n     * @param {string} format format of the time\r\n     * @param {Object} time Object not a Date for timezones\r\n     * @param {Object} [options] essentially the regional[].. amNames, pmNames, ampm\r\n     * @returns {string} the formatted time\r\n     */\r\n    $.datepicker.formatTime = function (format, time, options) {\r\n        options = options || {};\r\n        options = $.extend({}, $.timepicker._defaults, options);\r\n        time = $.extend({\r\n            hour: 0,\r\n            minute: 0,\r\n            second: 0,\r\n            millisec: 0,\r\n            microsec: 0,\r\n            timezone: null\r\n        }, time);\r\n\r\n        var tmptime = format,\r\n            ampmName = options.amNames[0],\r\n            hour = parseInt(time.hour, 10);\r\n\r\n        if (hour > 11) {\r\n            ampmName = options.pmNames[0];\r\n        }\r\n\r\n        tmptime = tmptime.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function (match) {\r\n            switch (match) {\r\n                case 'HH':\r\n                    return ('0' + hour).slice(-2);\r\n                case 'H':\r\n                    return hour;\r\n                case 'hh':\r\n                    return ('0' + convert24to12(hour)).slice(-2);\r\n                case 'h':\r\n                    return convert24to12(hour);\r\n                case 'mm':\r\n                    return ('0' + time.minute).slice(-2);\r\n                case 'm':\r\n                    return time.minute;\r\n                case 'ss':\r\n                    return ('0' + time.second).slice(-2);\r\n                case 's':\r\n                    return time.second;\r\n                case 'l':\r\n                    return ('00' + time.millisec).slice(-3);\r\n                case 'c':\r\n                    return ('00' + time.microsec).slice(-3);\r\n                case 'z':\r\n                    return $.timepicker.timezoneOffsetString(time.timezone === null ? options.timezone : time.timezone, false);\r\n                case 'Z':\r\n                    return $.timepicker.timezoneOffsetString(time.timezone === null ? options.timezone : time.timezone, true);\r\n                case 'T':\r\n                    return ampmName.charAt(0).toUpperCase();\r\n                case 'TT':\r\n                    return ampmName.toUpperCase();\r\n                case 't':\r\n                    return ampmName.charAt(0).toLowerCase();\r\n                case 'tt':\r\n                    return ampmName.toLowerCase();\r\n                default:\r\n                    return match.replace(/'/g, \"\");\r\n            }\r\n        });\r\n\r\n        return tmptime;\r\n    };\r\n\r\n    /*\r\n    * the bad hack :/ override datepicker so it doesn't close on select\r\n    // inspired: http://stackoverflow.com/questions/1252512/jquery-datepicker-prevent-closing-picker-when-clicking-a-date/1762378#1762378\r\n    */\r\n    $.datepicker._base_selectDate = $.datepicker._selectDate;\r\n    $.datepicker._selectDate = function (id, dateStr) {\r\n        var inst = this._getInst($(id)[0]),\r\n            tp_inst = this._get(inst, 'timepicker');\r\n\r\n        if (tp_inst) {\r\n            tp_inst._limitMinMaxDateTime(inst, true);\r\n            inst.inline = inst.stay_open = true;\r\n            //This way the onSelect handler called from calendarpicker get the full dateTime\r\n            this._base_selectDate(id, dateStr);\r\n            inst.inline = inst.stay_open = false;\r\n            this._notifyChange(inst);\r\n            this._updateDatepicker(inst);\r\n        } else {\r\n            this._base_selectDate(id, dateStr);\r\n        }\r\n    };\r\n\r\n    /*\r\n    * second bad hack :/ override datepicker so it triggers an event when changing the input field\r\n    * and does not redraw the datepicker on every selectDate event\r\n    */\r\n    $.datepicker._base_updateDatepicker = $.datepicker._updateDatepicker;\r\n    $.datepicker._updateDatepicker = function (inst) {\r\n\r\n        // don't popup the datepicker if there is another instance already opened\r\n        var input = inst.input[0];\r\n        if ($.datepicker._curInst && $.datepicker._curInst !== inst && $.datepicker._datepickerShowing && $.datepicker._lastInput !== input) {\r\n            return;\r\n        }\r\n\r\n        if (typeof (inst.stay_open) !== 'boolean' || inst.stay_open === false) {\r\n\r\n            this._base_updateDatepicker(inst);\r\n\r\n            // Reload the time control when changing something in the input text field.\r\n            var tp_inst = this._get(inst, 'timepicker');\r\n            if (tp_inst) {\r\n                tp_inst._addTimePicker(inst);\r\n            }\r\n        }\r\n    };\r\n\r\n    /*\r\n    * third bad hack :/ override datepicker so it allows spaces and colon in the input field\r\n    */\r\n    $.datepicker._base_doKeyPress = $.datepicker._doKeyPress;\r\n    $.datepicker._doKeyPress = function (event) {\r\n        var inst = $.datepicker._getInst(event.target),\r\n            tp_inst = $.datepicker._get(inst, 'timepicker');\r\n\r\n        if (tp_inst) {\r\n            if ($.datepicker._get(inst, 'constrainInput')) {\r\n                var ampm = tp_inst.support.ampm,\r\n                    tz = tp_inst._defaults.showTimezone !== null ? tp_inst._defaults.showTimezone : tp_inst.support.timezone,\r\n                    dateChars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat')),\r\n                    datetimeChars = tp_inst._defaults.timeFormat.toString()\r\n                            .replace(/[hms]/g, '')\r\n                            .replace(/TT/g, ampm ? 'APM' : '')\r\n                            .replace(/Tt/g, ampm ? 'AaPpMm' : '')\r\n                            .replace(/tT/g, ampm ? 'AaPpMm' : '')\r\n                            .replace(/T/g, ampm ? 'AP' : '')\r\n                            .replace(/tt/g, ampm ? 'apm' : '')\r\n                            .replace(/t/g, ampm ? 'ap' : '') +\r\n                        \" \" + tp_inst._defaults.separator +\r\n                        tp_inst._defaults.timeSuffix +\r\n                        (tz ? tp_inst._defaults.timezoneList.join('') : '') +\r\n                        (tp_inst._defaults.amNames.join('')) + (tp_inst._defaults.pmNames.join('')) +\r\n                        dateChars,\r\n                    chr = String.fromCharCode(event.charCode === undefined ? event.keyCode : event.charCode);\r\n                return event.ctrlKey || (chr < ' ' || !dateChars || datetimeChars.indexOf(chr) > -1);\r\n            }\r\n        }\r\n\r\n        return $.datepicker._base_doKeyPress(event);\r\n    };\r\n\r\n    /*\r\n    * Fourth bad hack :/ override _updateAlternate function used in inline mode to init altField\r\n    * Update any alternate field to synchronise with the main field.\r\n    */\r\n    $.datepicker._base_updateAlternate = $.datepicker._updateAlternate;\r\n    $.datepicker._updateAlternate = function (inst) {\r\n        var tp_inst = this._get(inst, 'timepicker');\r\n        if (tp_inst) {\r\n            var altField = tp_inst._defaults.altField;\r\n            if (altField) { // update alternate field too\r\n                var altFormat = tp_inst._defaults.altFormat || tp_inst._defaults.dateFormat,\r\n                    date = this._getDate(inst),\r\n                    formatCfg = $.datepicker._getFormatConfig(inst),\r\n                    altFormattedDateTime = '',\r\n                    altSeparator = tp_inst._defaults.altSeparator ? tp_inst._defaults.altSeparator : tp_inst._defaults.separator,\r\n                    altTimeSuffix = tp_inst._defaults.altTimeSuffix ? tp_inst._defaults.altTimeSuffix : tp_inst._defaults.timeSuffix,\r\n                    altTimeFormat = tp_inst._defaults.altTimeFormat !== null ? tp_inst._defaults.altTimeFormat : tp_inst._defaults.timeFormat;\r\n\r\n                altFormattedDateTime += $.datepicker.formatTime(altTimeFormat, tp_inst, tp_inst._defaults) + altTimeSuffix;\r\n                if (!tp_inst._defaults.timeOnly && !tp_inst._defaults.altFieldTimeOnly && date !== null) {\r\n                    if (tp_inst._defaults.altFormat) {\r\n                        altFormattedDateTime = $.datepicker.formatDate(tp_inst._defaults.altFormat, date, formatCfg) + altSeparator + altFormattedDateTime;\r\n                    } else {\r\n                        altFormattedDateTime = tp_inst.formattedDate + altSeparator + altFormattedDateTime;\r\n                    }\r\n                }\r\n                $(altField).val(altFormattedDateTime);\r\n            }\r\n        } else {\r\n            $.datepicker._base_updateAlternate(inst);\r\n        }\r\n    };\r\n\r\n    /*\r\n    * Override key up event to sync manual input changes.\r\n    */\r\n    $.datepicker._base_doKeyUp = $.datepicker._doKeyUp;\r\n    $.datepicker._doKeyUp = function (event) {\r\n        var inst = $.datepicker._getInst(event.target),\r\n            tp_inst = $.datepicker._get(inst, 'timepicker');\r\n\r\n        if (tp_inst) {\r\n            if (tp_inst._defaults.timeOnly && (inst.input.val() !== inst.lastVal)) {\r\n                try {\r\n                    $.datepicker._updateDatepicker(inst);\r\n                } catch (err) {\r\n                    $.timepicker.log(err);\r\n                }\r\n            }\r\n        }\r\n\r\n        return $.datepicker._base_doKeyUp(event);\r\n    };\r\n\r\n    /*\r\n    * override \"Today\" button to also grab the time.\r\n    */\r\n    $.datepicker._base_gotoToday = $.datepicker._gotoToday;\r\n    $.datepicker._gotoToday = function (id) {\r\n        var inst = this._getInst($(id)[0]),\r\n            $dp = inst.dpDiv;\r\n        this._base_gotoToday(id);\r\n        var tp_inst = this._get(inst, 'timepicker');\r\n        selectLocalTimezone(tp_inst);\r\n        var now = new Date();\r\n        this._setTime(inst, now);\r\n        $('.ui-datepicker-today', $dp).click();\r\n    };\r\n\r\n    /*\r\n    * Disable & enable the Time in the datetimepicker\r\n    */\r\n    $.datepicker._disableTimepickerDatepicker = function (target) {\r\n        var inst = this._getInst(target);\r\n        if (!inst) {\r\n            return;\r\n        }\r\n\r\n        var tp_inst = this._get(inst, 'timepicker');\r\n        $(target).datepicker('getDate'); // Init selected[Year|Month|Day]\r\n        if (tp_inst) {\r\n            inst.settings.showTimepicker = false;\r\n            tp_inst._defaults.showTimepicker = false;\r\n            tp_inst._updateDateTime(inst);\r\n        }\r\n    };\r\n\r\n    $.datepicker._enableTimepickerDatepicker = function (target) {\r\n        var inst = this._getInst(target);\r\n        if (!inst) {\r\n            return;\r\n        }\r\n\r\n        var tp_inst = this._get(inst, 'timepicker');\r\n        $(target).datepicker('getDate'); // Init selected[Year|Month|Day]\r\n        if (tp_inst) {\r\n            inst.settings.showTimepicker = true;\r\n            tp_inst._defaults.showTimepicker = true;\r\n            tp_inst._addTimePicker(inst); // Could be disabled on page load\r\n            tp_inst._updateDateTime(inst);\r\n        }\r\n    };\r\n\r\n    /*\r\n    * Create our own set time function\r\n    */\r\n    $.datepicker._setTime = function (inst, date) {\r\n        var tp_inst = this._get(inst, 'timepicker');\r\n        if (tp_inst) {\r\n            var defaults = tp_inst._defaults;\r\n\r\n            // calling _setTime with no date sets time to defaults\r\n            tp_inst.hour = date ? date.getHours() : defaults.hour;\r\n            tp_inst.minute = date ? date.getMinutes() : defaults.minute;\r\n            tp_inst.second = date ? date.getSeconds() : defaults.second;\r\n            tp_inst.millisec = date ? date.getMilliseconds() : defaults.millisec;\r\n            tp_inst.microsec = date ? date.getMicroseconds() : defaults.microsec;\r\n\r\n            //check if within min/max times..\r\n            tp_inst._limitMinMaxDateTime(inst, true);\r\n\r\n            tp_inst._onTimeChange();\r\n            tp_inst._updateDateTime(inst);\r\n        }\r\n    };\r\n\r\n    /*\r\n    * Create new public method to set only time, callable as $().datepicker('setTime', date)\r\n    */\r\n    $.datepicker._setTimeDatepicker = function (target, date, withDate) {\r\n        var inst = this._getInst(target);\r\n        if (!inst) {\r\n            return;\r\n        }\r\n\r\n        var tp_inst = this._get(inst, 'timepicker');\r\n\r\n        if (tp_inst) {\r\n            this._setDateFromField(inst);\r\n            var tp_date;\r\n            if (date) {\r\n                if (typeof date === \"string\") {\r\n                    tp_inst._parseTime(date, withDate);\r\n                    tp_date = new Date();\r\n                    tp_date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);\r\n                    tp_date.setMicroseconds(tp_inst.microsec);\r\n                } else {\r\n                    tp_date = new Date(date.getTime());\r\n                    tp_date.setMicroseconds(date.getMicroseconds());\r\n                }\r\n                if (tp_date.toString() === 'Invalid Date') {\r\n                    tp_date = undefined;\r\n                }\r\n                this._setTime(inst, tp_date);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    /*\r\n    * override setDate() to allow setting time too within Date object\r\n    */\r\n    $.datepicker._base_setDateDatepicker = $.datepicker._setDateDatepicker;\r\n    $.datepicker._setDateDatepicker = function (target, date) {\r\n        var inst = this._getInst(target);\r\n        if (!inst) {\r\n            return;\r\n        }\r\n\r\n        if (typeof (date) === 'string') {\r\n            date = new Date(date);\r\n            if (!date.getTime()) {\r\n                $.timepicker.log(\"Error creating Date object from string.\");\r\n            }\r\n        }\r\n\r\n        var tp_inst = this._get(inst, 'timepicker');\r\n        var tp_date;\r\n        if (date instanceof Date) {\r\n            tp_date = new Date(date.getTime());\r\n            tp_date.setMicroseconds(date.getMicroseconds());\r\n        } else {\r\n            tp_date = date;\r\n        }\r\n\r\n        // This is important if you are using the timezone option, javascript's Date\r\n        // object will only return the timezone offset for the current locale, so we\r\n        // adjust it accordingly.  If not using timezone option this won't matter..\r\n        // If a timezone is different in tp, keep the timezone as is\r\n        if (tp_inst && tp_date) {\r\n            // look out for DST if tz wasn't specified\r\n            if (!tp_inst.support.timezone && tp_inst._defaults.timezone === null) {\r\n                tp_inst.timezone = tp_date.getTimezoneOffset() * -1;\r\n            }\r\n            date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);\r\n            tp_date = $.timepicker.timezoneAdjust(tp_date, tp_inst.timezone);\r\n        }\r\n\r\n        this._updateDatepicker(inst);\r\n        this._base_setDateDatepicker.apply(this, arguments);\r\n        this._setTimeDatepicker(target, tp_date, true);\r\n    };\r\n\r\n    /*\r\n    * override getDate() to allow getting time too within Date object\r\n    */\r\n    $.datepicker._base_getDateDatepicker = $.datepicker._getDateDatepicker;\r\n    $.datepicker._getDateDatepicker = function (target, noDefault) {\r\n        var inst = this._getInst(target);\r\n        if (!inst) {\r\n            return;\r\n        }\r\n\r\n        var tp_inst = this._get(inst, 'timepicker');\r\n\r\n        if (tp_inst) {\r\n            // if it hasn't yet been defined, grab from field\r\n            if (inst.lastVal === undefined) {\r\n                this._setDateFromField(inst, noDefault);\r\n            }\r\n\r\n            var date = this._getDate(inst);\r\n            if (date && tp_inst._parseTime($(target).val(), tp_inst.timeOnly)) {\r\n                date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);\r\n                date.setMicroseconds(tp_inst.microsec);\r\n\r\n                // This is important if you are using the timezone option, javascript's Date\r\n                // object will only return the timezone offset for the current locale, so we\r\n                // adjust it accordingly.  If not using timezone option this won't matter..\r\n                if (tp_inst.timezone != null) {\r\n                    // look out for DST if tz wasn't specified\r\n                    if (!tp_inst.support.timezone && tp_inst._defaults.timezone === null) {\r\n                        tp_inst.timezone = date.getTimezoneOffset() * -1;\r\n                    }\r\n                    date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);\r\n                }\r\n            }\r\n            return date;\r\n        }\r\n        return this._base_getDateDatepicker(target, noDefault);\r\n    };\r\n\r\n    /*\r\n    * override parseDate() because UI 1.8.14 throws an error about \"Extra characters\"\r\n    * An option in datapicker to ignore extra format characters would be nicer.\r\n    */\r\n    $.datepicker._base_parseDate = $.datepicker.parseDate;\r\n    $.datepicker.parseDate = function (format, value, settings) {\r\n        var date;\r\n        try {\r\n            date = this._base_parseDate(format, value, settings);\r\n        } catch (err) {\r\n            // Hack!  The error message ends with a colon, a space, and\r\n            // the \"extra\" characters.  We rely on that instead of\r\n            // attempting to perfectly reproduce the parsing algorithm.\r\n            if (err.indexOf(\":\") >= 0) {\r\n                date = this._base_parseDate(format, value.substring(0, value.length - (err.length - err.indexOf(':') - 2)), settings);\r\n                $.timepicker.log(\"Error parsing the date string: \" + err + \"\\ndate string = \" + value + \"\\ndate format = \" + format);\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n        return date;\r\n    };\r\n\r\n    /*\r\n    * override formatDate to set date with time to the input\r\n    */\r\n    $.datepicker._base_formatDate = $.datepicker._formatDate;\r\n    $.datepicker._formatDate = function (inst, day, month, year) {\r\n        var tp_inst = this._get(inst, 'timepicker');\r\n        if (tp_inst) {\r\n            tp_inst._updateDateTime(inst);\r\n            return tp_inst.$input.val();\r\n        }\r\n        return this._base_formatDate(inst);\r\n    };\r\n\r\n    /*\r\n    * override options setter to add time to maxDate(Time) and minDate(Time). MaxDate\r\n    */\r\n    $.datepicker._base_optionDatepicker = $.datepicker._optionDatepicker;\r\n    $.datepicker._optionDatepicker = function (target, name, value) {\r\n        var inst = this._getInst(target),\r\n            name_clone;\r\n        if (!inst) {\r\n            return null;\r\n        }\r\n\r\n        var tp_inst = this._get(inst, 'timepicker');\r\n        if (tp_inst) {\r\n            var min = null,\r\n                max = null,\r\n                onselect = null,\r\n                overrides = tp_inst._defaults.evnts,\r\n                fns = {},\r\n                prop;\r\n            if (typeof name === 'string') { // if min/max was set with the string\r\n                if (name === 'minDate' || name === 'minDateTime') {\r\n                    min = value;\r\n                } else if (name === 'maxDate' || name === 'maxDateTime') {\r\n                    max = value;\r\n                } else if (name === 'onSelect') {\r\n                    onselect = value;\r\n                } else if (overrides.hasOwnProperty(name)) {\r\n                    if (typeof (value) === 'undefined') {\r\n                        return overrides[name];\r\n                    }\r\n                    fns[name] = value;\r\n                    name_clone = {}; //empty results in exiting function after overrides updated\r\n                }\r\n            } else if (typeof name === 'object') { //if min/max was set with the JSON\r\n                if (name.minDate) {\r\n                    min = name.minDate;\r\n                } else if (name.minDateTime) {\r\n                    min = name.minDateTime;\r\n                } else if (name.maxDate) {\r\n                    max = name.maxDate;\r\n                } else if (name.maxDateTime) {\r\n                    max = name.maxDateTime;\r\n                }\r\n                for (prop in overrides) {\r\n                    if (overrides.hasOwnProperty(prop) && name[prop]) {\r\n                        fns[prop] = name[prop];\r\n                    }\r\n                }\r\n            }\r\n            for (prop in fns) {\r\n                if (fns.hasOwnProperty(prop)) {\r\n                    overrides[prop] = fns[prop];\r\n                    if (!name_clone) {\r\n                        name_clone = $.extend({}, name);\r\n                    }\r\n                    delete name_clone[prop];\r\n                }\r\n            }\r\n            if (name_clone && isEmptyObject(name_clone)) {\r\n                return;\r\n            }\r\n            if (min) { //if min was set\r\n                if (min === 0) {\r\n                    min = new Date();\r\n                } else {\r\n                    min = new Date(min);\r\n                }\r\n                tp_inst._defaults.minDate = min;\r\n                tp_inst._defaults.minDateTime = min;\r\n            } else if (max) { //if max was set\r\n                if (max === 0) {\r\n                    max = new Date();\r\n                } else {\r\n                    max = new Date(max);\r\n                }\r\n                tp_inst._defaults.maxDate = max;\r\n                tp_inst._defaults.maxDateTime = max;\r\n            } else if (onselect) {\r\n                tp_inst._defaults.onSelect = onselect;\r\n            }\r\n        }\r\n        if (value === undefined) {\r\n            return this._base_optionDatepicker.call($.datepicker, target, name);\r\n        }\r\n        return this._base_optionDatepicker.call($.datepicker, target, name_clone || name, value);\r\n    };\r\n\r\n    /*\r\n    * jQuery isEmptyObject does not check hasOwnProperty - if someone has added to the object prototype,\r\n    * it will return false for all objects\r\n    */\r\n    var isEmptyObject = function (obj) {\r\n        var prop;\r\n        for (prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /*\r\n    * jQuery extend now ignores nulls!\r\n    */\r\n    var extendRemove = function (target, props) {\r\n        $.extend(target, props);\r\n        for (var name in props) {\r\n            if (props[name] === null || props[name] === undefined) {\r\n                target[name] = props[name];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n\r\n    /*\r\n    * Determine by the time format which units are supported\r\n    * Returns an object of booleans for each unit\r\n    */\r\n    var detectSupport = function (timeFormat) {\r\n        var tf = timeFormat.replace(/'.*?'/g, '').toLowerCase(), // removes literals\r\n            isIn = function (f, t) { // does the format contain the token?\r\n                return f.indexOf(t) !== -1 ? true : false;\r\n            };\r\n        return {\r\n            hour: isIn(tf, 'h'),\r\n            minute: isIn(tf, 'm'),\r\n            second: isIn(tf, 's'),\r\n            millisec: isIn(tf, 'l'),\r\n            microsec: isIn(tf, 'c'),\r\n            timezone: isIn(tf, 'z'),\r\n            ampm: isIn(tf, 't') && isIn(timeFormat, 'h'),\r\n            iso8601: isIn(timeFormat, 'Z')\r\n        };\r\n    };\r\n\r\n    /*\r\n    * Converts 24 hour format into 12 hour\r\n    * Returns 12 hour without leading 0\r\n    */\r\n    var convert24to12 = function (hour) {\r\n        hour %= 12;\r\n\r\n        if (hour === 0) {\r\n            hour = 12;\r\n        }\r\n\r\n        return String(hour);\r\n    };\r\n\r\n    var computeEffectiveSetting = function (settings, property) {\r\n        return settings && settings[property] ? settings[property] : $.timepicker._defaults[property];\r\n    };\r\n\r\n    /*\r\n    * Splits datetime string into date and time substrings.\r\n    * Throws exception when date can't be parsed\r\n    * Returns {dateString: dateString, timeString: timeString}\r\n    */\r\n    var splitDateTime = function (dateTimeString, timeSettings) {\r\n        // The idea is to get the number separator occurrences in datetime and the time format requested (since time has\r\n        // fewer unknowns, mostly numbers and am/pm). We will use the time pattern to split.\r\n        var separator = computeEffectiveSetting(timeSettings, 'separator'),\r\n            format = computeEffectiveSetting(timeSettings, 'timeFormat'),\r\n            timeParts = format.split(separator), // how many occurrences of separator may be in our format?\r\n            timePartsLen = timeParts.length,\r\n            allParts = dateTimeString.split(separator),\r\n            allPartsLen = allParts.length;\r\n\r\n        if (allPartsLen > 1) {\r\n            return {\r\n                dateString: allParts.splice(0, allPartsLen - timePartsLen).join(separator),\r\n                timeString: allParts.splice(0, timePartsLen).join(separator)\r\n            };\r\n        }\r\n\r\n        return {\r\n            dateString: dateTimeString,\r\n            timeString: ''\r\n        };\r\n    };\r\n\r\n    /*\r\n    * Internal function to parse datetime interval\r\n    * Returns: {date: Date, timeObj: Object}, where\r\n    *   date - parsed date without time (type Date)\r\n    *   timeObj = {hour: , minute: , second: , millisec: , microsec: } - parsed time. Optional\r\n    */\r\n    var parseDateTimeInternal = function (dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {\r\n        var date,\r\n            parts,\r\n            parsedTime;\r\n\r\n        parts = splitDateTime(dateTimeString, timeSettings);\r\n        date = $.datepicker._base_parseDate(dateFormat, parts.dateString, dateSettings);\r\n\r\n        if (parts.timeString === '') {\r\n            return {\r\n                date: date\r\n            };\r\n        }\r\n\r\n        parsedTime = $.datepicker.parseTime(timeFormat, parts.timeString, timeSettings);\r\n\r\n        if (!parsedTime) {\r\n            throw 'Wrong time format';\r\n        }\r\n\r\n        return {\r\n            date: date,\r\n            timeObj: parsedTime\r\n        };\r\n    };\r\n\r\n    /*\r\n    * Internal function to set timezone_select to the local timezone\r\n    */\r\n    var selectLocalTimezone = function (tp_inst, date) {\r\n        if (tp_inst && tp_inst.timezone_select) {\r\n            var now = date || new Date();\r\n            tp_inst.timezone_select.val(-now.getTimezoneOffset());\r\n        }\r\n    };\r\n\r\n    /*\r\n    * Create a Singleton Instance\r\n    */\r\n    $.timepicker = new Timepicker();\r\n\r\n    /**\r\n     * Get the timezone offset as string from a date object (eg '+0530' for UTC+5.5)\r\n     * @param {number} tzMinutes if not a number, less than -720 (-1200), or greater than 840 (+1400) this value is returned\r\n     * @param {boolean} iso8601 if true formats in accordance to iso8601 \"+12:45\"\r\n     * @return {string}\r\n     */\r\n    $.timepicker.timezoneOffsetString = function (tzMinutes, iso8601) {\r\n        if (isNaN(tzMinutes) || tzMinutes > 840 || tzMinutes < -720) {\r\n            return tzMinutes;\r\n        }\r\n\r\n        var off = tzMinutes,\r\n            minutes = off % 60,\r\n            hours = (off - minutes) / 60,\r\n            iso = iso8601 ? ':' : '',\r\n            tz = (off >= 0 ? '+' : '-') + ('0' + Math.abs(hours)).slice(-2) + iso + ('0' + Math.abs(minutes)).slice(-2);\r\n\r\n        if (tz === '+00:00') {\r\n            return 'Z';\r\n        }\r\n        return tz;\r\n    };\r\n\r\n    /**\r\n     * Get the number in minutes that represents a timezone string\r\n     * @param  {string} tzString formatted like \"+0500\", \"-1245\", \"Z\"\r\n     * @return {number} the offset minutes or the original string if it doesn't match expectations\r\n     */\r\n    $.timepicker.timezoneOffsetNumber = function (tzString) {\r\n        var normalized = tzString.toString().replace(':', ''); // excuse any iso8601, end up with \"+1245\"\r\n\r\n        if (normalized.toUpperCase() === 'Z') { // if iso8601 with Z, its 0 minute offset\r\n            return 0;\r\n        }\r\n\r\n        if (!/^(\\-|\\+)\\d{4}$/.test(normalized)) { // possibly a user defined tz, so just give it back\r\n            return tzString;\r\n        }\r\n\r\n        return ((normalized.substr(0, 1) === '-' ? -1 : 1) * // plus or minus\r\n            ((parseInt(normalized.substr(1, 2), 10) * 60) + // hours (converted to minutes)\r\n                parseInt(normalized.substr(3, 2), 10))); // minutes\r\n    };\r\n\r\n    /**\r\n     * No way to set timezone in js Date, so we must adjust the minutes to compensate. (think setDate, getDate)\r\n     * @param  {Date} date\r\n     * @param  {string} toTimezone formatted like \"+0500\", \"-1245\"\r\n     * @return {Date}\r\n     */\r\n    $.timepicker.timezoneAdjust = function (date, toTimezone) {\r\n        var toTz = $.timepicker.timezoneOffsetNumber(toTimezone);\r\n        if (!isNaN(toTz)) {\r\n            date.setMinutes(date.getMinutes() + -date.getTimezoneOffset() - toTz);\r\n        }\r\n        return date;\r\n    };\r\n\r\n    /**\r\n     * Calls `timepicker()` on the `startTime` and `endTime` elements, and configures them to\r\n     * enforce date range limits.\r\n     * n.b. The input value must be correctly formatted (reformatting is not supported)\r\n     * @param  {Element} startTime\r\n     * @param  {Element} endTime\r\n     * @param  {Object} options Options for the timepicker() call\r\n     * @return {jQuery}\r\n     */\r\n    $.timepicker.timeRange = function (startTime, endTime, options) {\r\n        return $.timepicker.handleRange('timepicker', startTime, endTime, options);\r\n    };\r\n\r\n    /**\r\n     * Calls `datetimepicker` on the `startTime` and `endTime` elements, and configures them to\r\n     * enforce date range limits.\r\n     * @param  {Element} startTime\r\n     * @param  {Element} endTime\r\n     * @param  {Object} options Options for the `timepicker()` call. Also supports `reformat`,\r\n     *   a boolean value that can be used to reformat the input values to the `dateFormat`.\r\n     * @param  {string} method Can be used to specify the type of picker to be added\r\n     * @return {jQuery}\r\n     */\r\n    $.timepicker.datetimeRange = function (startTime, endTime, options) {\r\n        $.timepicker.handleRange('datetimepicker', startTime, endTime, options);\r\n    };\r\n\r\n    /**\r\n     * Calls `datepicker` on the `startTime` and `endTime` elements, and configures them to\r\n     * enforce date range limits.\r\n     * @param  {Element} startTime\r\n     * @param  {Element} endTime\r\n     * @param  {Object} options Options for the `timepicker()` call. Also supports `reformat`,\r\n     *   a boolean value that can be used to reformat the input values to the `dateFormat`.\r\n     * @return {jQuery}\r\n     */\r\n    $.timepicker.dateRange = function (startTime, endTime, options) {\r\n        $.timepicker.handleRange('datepicker', startTime, endTime, options);\r\n    };\r\n\r\n    /**\r\n     * Calls `method` on the `startTime` and `endTime` elements, and configures them to\r\n     * enforce date range limits.\r\n     * @param  {string} method Can be used to specify the type of picker to be added\r\n     * @param  {Element} startTime\r\n     * @param  {Element} endTime\r\n     * @param  {Object} options Options for the `timepicker()` call. Also supports `reformat`,\r\n     *   a boolean value that can be used to reformat the input values to the `dateFormat`.\r\n     * @return {jQuery}\r\n     */\r\n    $.timepicker.handleRange = function (method, startTime, endTime, options) {\r\n        options = $.extend({}, {\r\n            minInterval: 0, // min allowed interval in milliseconds\r\n            maxInterval: 0, // max allowed interval in milliseconds\r\n            start: {},      // options for start picker\r\n            end: {}         // options for end picker\r\n        }, options);\r\n\r\n        function checkDates(changed, other) {\r\n            var startdt = startTime[method]('getDate'),\r\n                enddt = endTime[method]('getDate'),\r\n                changeddt = changed[method]('getDate');\r\n\r\n            if (startdt !== null) {\r\n                var minDate = new Date(startdt.getTime()),\r\n                    maxDate = new Date(startdt.getTime());\r\n\r\n                minDate.setMilliseconds(minDate.getMilliseconds() + options.minInterval);\r\n                maxDate.setMilliseconds(maxDate.getMilliseconds() + options.maxInterval);\r\n\r\n                if (options.minInterval > 0 && minDate > enddt) { // minInterval check\r\n                    endTime[method]('setDate', minDate);\r\n                } else if (options.maxInterval > 0 && maxDate < enddt) { // max interval check\r\n                    endTime[method]('setDate', maxDate);\r\n                } else if (startdt > enddt) {\r\n                    other[method]('setDate', changeddt);\r\n                }\r\n            }\r\n        }\r\n\r\n        function selected(changed, other, option) {\r\n            if (!changed.val()) {\r\n                return;\r\n            }\r\n            var date = changed[method].call(changed, 'getDate');\r\n            if (date !== null && options.minInterval > 0) {\r\n                if (option === 'minDate') {\r\n                    date.setMilliseconds(date.getMilliseconds() + options.minInterval);\r\n                }\r\n                if (option === 'maxDate') {\r\n                    date.setMilliseconds(date.getMilliseconds() - options.minInterval);\r\n                }\r\n            }\r\n            if (date.getTime) {\r\n                other[method].call(other, 'option', option, date);\r\n            }\r\n        }\r\n\r\n        $.fn[method].call(startTime, $.extend({\r\n            onClose: function (dateText, inst) {\r\n                checkDates($(this), endTime);\r\n            },\r\n            onSelect: function (selectedDateTime) {\r\n                selected($(this), endTime, 'minDate');\r\n            }\r\n        }, options, options.start));\r\n        $.fn[method].call(endTime, $.extend({\r\n            onClose: function (dateText, inst) {\r\n                checkDates($(this), startTime);\r\n            },\r\n            onSelect: function (selectedDateTime) {\r\n                selected($(this), startTime, 'maxDate');\r\n            }\r\n        }, options, options.end));\r\n\r\n        checkDates(startTime, endTime);\r\n        selected(startTime, endTime, 'minDate');\r\n        selected(endTime, startTime, 'maxDate');\r\n        return $([startTime.get(0), endTime.get(0)]);\r\n    };\r\n\r\n    /**\r\n     * Log error or data to the console during error or debugging\r\n     * @param  {Object} err pass any type object to log to the console during error or debugging\r\n     * @return {void}\r\n     */\r\n    $.timepicker.log = function (err) {\r\n        if (window.console) {\r\n            window.console.log(err);\r\n        }\r\n    };\r\n\r\n    /*\r\n     * Add util object to allow access to private methods for testability.\r\n     */\r\n    $.timepicker._util = {\r\n        _extendRemove: extendRemove,\r\n        _isEmptyObject: isEmptyObject,\r\n        _convert24to12: convert24to12,\r\n        _detectSupport: detectSupport,\r\n        _selectLocalTimezone: selectLocalTimezone,\r\n        _computeEffectiveSetting: computeEffectiveSetting,\r\n        _splitDateTime: splitDateTime,\r\n        _parseDateTimeInternal: parseDateTimeInternal\r\n    };\r\n\r\n    /*\r\n    * Microsecond support\r\n    */\r\n    if (!Date.prototype.getMicroseconds) {\r\n        Date.prototype.microseconds = 0;\r\n        Date.prototype.getMicroseconds = function () {\r\n            return this.microseconds;\r\n        };\r\n        Date.prototype.setMicroseconds = function (m) {\r\n            this.setMilliseconds(this.getMilliseconds() + Math.floor(m / 1000));\r\n            this.microseconds = m % 1000;\r\n            return this;\r\n        };\r\n    }\r\n\r\n    /*\r\n    * Keep up with the version\r\n    */\r\n    $.timepicker.version = \"1.4.3\";\r\n\r\n}));\r\n","jquery/ui-modules/tooltip.js":"/*!\r\n * jQuery UI Tooltip - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/tooltip/\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/core',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/position'\r\n], function ($) {\r\n\r\n    var increments = 0;\r\n\r\n    function addDescribedBy(elem, id) {\r\n        var describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/);\r\n        describedby.push(id);\r\n        elem\r\n            .data(\"ui-tooltip-id\", id)\r\n            .attr(\"aria-describedby\", $.trim(describedby.join(\" \")));\r\n    }\r\n\r\n    function removeDescribedBy(elem) {\r\n        var id = elem.data(\"ui-tooltip-id\"),\r\n            describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/),\r\n            index = $.inArray(id, describedby);\r\n        if (index !== -1) {\r\n            describedby.splice(index, 1);\r\n        }\r\n\r\n        elem.removeData(\"ui-tooltip-id\");\r\n        describedby = $.trim(describedby.join(\" \"));\r\n        if (describedby) {\r\n            elem.attr(\"aria-describedby\", describedby);\r\n        } else {\r\n            elem.removeAttr(\"aria-describedby\");\r\n        }\r\n    }\r\n\r\n    $.widget(\"ui.tooltip\", {\r\n        version: \"1.10.4\",\r\n        options: {\r\n            content: function () {\r\n                // support: IE<9, Opera in jQuery <1.7\r\n                // .text() can't accept undefined, so coerce to a string\r\n                var title = $(this).attr(\"title\") || \"\";\r\n                // Escape title, since we're going from an attribute to raw HTML\r\n                return $(\"<a>\").text(title).html();\r\n            },\r\n            hide: true,\r\n            // Disabled elements have inconsistent behavior across browsers (#8661)\r\n            items: \"[title]:not([disabled])\",\r\n            position: {\r\n                my: \"left top+15\",\r\n                at: \"left bottom\",\r\n                collision: \"flipfit flip\"\r\n            },\r\n            show: true,\r\n            tooltipClass: null,\r\n            track: false,\r\n\r\n            // callbacks\r\n            close: null,\r\n            open: null\r\n        },\r\n\r\n        _create: function () {\r\n            this._on({\r\n                mouseover: \"open\",\r\n                focusin: \"open\"\r\n            });\r\n\r\n            // IDs of generated tooltips, needed for destroy\r\n            this.tooltips = {};\r\n            // IDs of parent tooltips where we removed the title attribute\r\n            this.parents = {};\r\n\r\n            if (this.options.disabled) {\r\n                this._disable();\r\n            }\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            var that = this;\r\n\r\n            if (key === \"disabled\") {\r\n                this[value ? \"_disable\" : \"_enable\"]();\r\n                this.options[key] = value;\r\n                // disable element style changes\r\n                return;\r\n            }\r\n\r\n            this._super(key, value);\r\n\r\n            if (key === \"content\") {\r\n                $.each(this.tooltips, function (id, element) {\r\n                    that._updateContent(element);\r\n                });\r\n            }\r\n        },\r\n\r\n        _disable: function () {\r\n            var that = this;\r\n\r\n            // close open tooltips\r\n            $.each(this.tooltips, function (id, element) {\r\n                var event = $.Event(\"blur\");\r\n                event.target = event.currentTarget = element[0];\r\n                that.close(event, true);\r\n            });\r\n\r\n            // remove title attributes to prevent native tooltips\r\n            this.element.find(this.options.items).addBack().each(function () {\r\n                var element = $(this);\r\n                if (element.is(\"[title]\")) {\r\n                    element\r\n                        .data(\"ui-tooltip-title\", element.attr(\"title\"))\r\n                        .attr(\"title\", \"\");\r\n                }\r\n            });\r\n        },\r\n\r\n        _enable: function () {\r\n            // restore title attributes\r\n            this.element.find(this.options.items).addBack().each(function () {\r\n                var element = $(this);\r\n                if (element.data(\"ui-tooltip-title\")) {\r\n                    element.attr(\"title\", element.data(\"ui-tooltip-title\"));\r\n                }\r\n            });\r\n        },\r\n\r\n        open: function (event) {\r\n            var that = this,\r\n                target = $(event ? event.target : this.element)\r\n                // we need closest here due to mouseover bubbling,\r\n                // but always pointing at the same event target\r\n                    .closest(this.options.items);\r\n\r\n            // No element to show a tooltip for or the tooltip is already open\r\n            if (!target.length || target.data(\"ui-tooltip-id\")) {\r\n                return;\r\n            }\r\n\r\n            if (target.attr(\"title\")) {\r\n                target.data(\"ui-tooltip-title\", target.attr(\"title\"));\r\n            }\r\n\r\n            target.data(\"ui-tooltip-open\", true);\r\n\r\n            // kill parent tooltips, custom or native, for hover\r\n            if (event && event.type === \"mouseover\") {\r\n                target.parents().each(function () {\r\n                    var parent = $(this),\r\n                        blurEvent;\r\n                    if (parent.data(\"ui-tooltip-open\")) {\r\n                        blurEvent = $.Event(\"blur\");\r\n                        blurEvent.target = blurEvent.currentTarget = this;\r\n                        that.close(blurEvent, true);\r\n                    }\r\n                    if (parent.attr(\"title\")) {\r\n                        parent.uniqueId();\r\n                        that.parents[this.id] = {\r\n                            element: this,\r\n                            title: parent.attr(\"title\")\r\n                        };\r\n                        parent.attr(\"title\", \"\");\r\n                    }\r\n                });\r\n            }\r\n\r\n            this._updateContent(target, event);\r\n        },\r\n\r\n        _updateContent: function (target, event) {\r\n            var content,\r\n                contentOption = this.options.content,\r\n                that = this,\r\n                eventType = event ? event.type : null;\r\n\r\n            if (typeof contentOption === \"string\") {\r\n                return this._open(event, target, contentOption);\r\n            }\r\n\r\n            content = contentOption.call(target[0], function (response) {\r\n                // ignore async response if tooltip was closed already\r\n                if (!target.data(\"ui-tooltip-open\")) {\r\n                    return;\r\n                }\r\n                // IE may instantly serve a cached response for ajax requests\r\n                // delay this call to _open so the other call to _open runs first\r\n                that._delay(function () {\r\n                    // jQuery creates a special event for focusin when it doesn't\r\n                    // exist natively. To improve performance, the native event\r\n                    // object is reused and the type is changed. Therefore, we can't\r\n                    // rely on the type being correct after the event finished\r\n                    // bubbling, so we set it back to the previous value. (#8740)\r\n                    if (event) {\r\n                        event.type = eventType;\r\n                    }\r\n                    this._open(event, target, response);\r\n                });\r\n            });\r\n            if (content) {\r\n                this._open(event, target, content);\r\n            }\r\n        },\r\n\r\n        _open: function (event, target, content) {\r\n            var tooltip, events, delayedShow,\r\n                positionOption = $.extend({}, this.options.position);\r\n\r\n            if (!content) {\r\n                return;\r\n            }\r\n\r\n            // Content can be updated multiple times. If the tooltip already\r\n            // exists, then just update the content and bail.\r\n            tooltip = this._find(target);\r\n            if (tooltip.length) {\r\n                tooltip.find(\".ui-tooltip-content\").html(content);\r\n                return;\r\n            }\r\n\r\n            // if we have a title, clear it to prevent the native tooltip\r\n            // we have to check first to avoid defining a title if none exists\r\n            // (we don't want to cause an element to start matching [title])\r\n            //\r\n            // We use removeAttr only for key events, to allow IE to export the correct\r\n            // accessible attributes. For mouse events, set to empty string to avoid\r\n            // native tooltip showing up (happens only when removing inside mouseover).\r\n            if (target.is(\"[title]\")) {\r\n                if (event && event.type === \"mouseover\") {\r\n                    target.attr(\"title\", \"\");\r\n                } else {\r\n                    target.removeAttr(\"title\");\r\n                }\r\n            }\r\n\r\n            tooltip = this._tooltip(target);\r\n            addDescribedBy(target, tooltip.attr(\"id\"));\r\n            tooltip.find(\".ui-tooltip-content\").html(content);\r\n\r\n            function position(event) {\r\n                positionOption.of = event;\r\n                if (tooltip.is(\":hidden\")) {\r\n                    return;\r\n                }\r\n                tooltip.position(positionOption);\r\n            }\r\n\r\n            if (this.options.track && event && /^mouse/.test(event.type)) {\r\n                this._on(this.document, {\r\n                    mousemove: position\r\n                });\r\n                // trigger once to override element-relative positioning\r\n                position(event);\r\n            } else {\r\n                tooltip.position($.extend({\r\n                    of: target\r\n                }, this.options.position));\r\n            }\r\n\r\n            tooltip.hide();\r\n\r\n            this._show(tooltip, this.options.show);\r\n            // Handle tracking tooltips that are shown with a delay (#8644). As soon\r\n            // as the tooltip is visible, position the tooltip using the most recent\r\n            // event.\r\n            if (this.options.show && this.options.show.delay) {\r\n                delayedShow = this.delayedShow = setInterval(function () {\r\n                    if (tooltip.is(\":visible\")) {\r\n                        position(positionOption.of);\r\n                        clearInterval(delayedShow);\r\n                    }\r\n                }, $.fx.interval);\r\n            }\r\n\r\n            this._trigger(\"open\", event, {tooltip: tooltip});\r\n\r\n            events = {\r\n                keyup: function (event) {\r\n                    if (event.keyCode === $.ui.keyCode.ESCAPE) {\r\n                        var fakeEvent = $.Event(event);\r\n                        fakeEvent.currentTarget = target[0];\r\n                        this.close(fakeEvent, true);\r\n                    }\r\n                },\r\n                remove: function () {\r\n                    this._removeTooltip(tooltip);\r\n                }\r\n            };\r\n            if (!event || event.type === \"mouseover\") {\r\n                events.mouseleave = \"close\";\r\n            }\r\n            if (!event || event.type === \"focusin\") {\r\n                events.focusout = \"close\";\r\n            }\r\n            this._on(true, target, events);\r\n        },\r\n\r\n        close: function (event) {\r\n            var that = this,\r\n                target = $(event ? event.currentTarget : this.element),\r\n                tooltip = this._find(target);\r\n\r\n            // disabling closes the tooltip, so we need to track when we're closing\r\n            // to avoid an infinite loop in case the tooltip becomes disabled on close\r\n            if (this.closing) {\r\n                return;\r\n            }\r\n\r\n            // Clear the interval for delayed tracking tooltips\r\n            clearInterval(this.delayedShow);\r\n\r\n            // only set title if we had one before (see comment in _open())\r\n            if (target.data(\"ui-tooltip-title\")) {\r\n                target.attr(\"title\", target.data(\"ui-tooltip-title\"));\r\n            }\r\n\r\n            removeDescribedBy(target);\r\n\r\n            tooltip.stop(true);\r\n            this._hide(tooltip, this.options.hide, function () {\r\n                that._removeTooltip($(this));\r\n            });\r\n\r\n            target.removeData(\"ui-tooltip-open\");\r\n            this._off(target, \"mouseleave focusout keyup\");\r\n            // Remove 'remove' binding only on delegated targets\r\n            if (target[0] !== this.element[0]) {\r\n                this._off(target, \"remove\");\r\n            }\r\n            this._off(this.document, \"mousemove\");\r\n\r\n            if (event && event.type === \"mouseleave\") {\r\n                $.each(this.parents, function (id, parent) {\r\n                    $(parent.element).attr(\"title\", parent.title);\r\n                    delete that.parents[id];\r\n                });\r\n            }\r\n\r\n            this.closing = true;\r\n            this._trigger(\"close\", event, {tooltip: tooltip});\r\n            this.closing = false;\r\n        },\r\n\r\n        _tooltip: function (element) {\r\n            var id = \"ui-tooltip-\" + increments++,\r\n                tooltip = $(\"<div>\")\r\n                    .attr({\r\n                        id: id,\r\n                        role: \"tooltip\"\r\n                    })\r\n                    .addClass(\"ui-tooltip ui-widget ui-corner-all ui-widget-content \" +\r\n                        (this.options.tooltipClass || \"\"));\r\n            $(\"<div>\")\r\n                .addClass(\"ui-tooltip-content\")\r\n                .appendTo(tooltip);\r\n            tooltip.appendTo(this.document[0].body);\r\n            this.tooltips[id] = element;\r\n            return tooltip;\r\n        },\r\n\r\n        _find: function (target) {\r\n            var id = target.data(\"ui-tooltip-id\");\r\n            return id ? $(\"#\" + id) : $();\r\n        },\r\n\r\n        _removeTooltip: function (tooltip) {\r\n            tooltip.remove();\r\n            delete this.tooltips[tooltip.attr(\"id\")];\r\n        },\r\n\r\n        _destroy: function () {\r\n            var that = this;\r\n\r\n            // close open tooltips\r\n            $.each(this.tooltips, function (id, element) {\r\n                // Delegate to close method to handle common cleanup\r\n                var event = $.Event(\"blur\");\r\n                event.target = event.currentTarget = element[0];\r\n                that.close(event, true);\r\n\r\n                // Remove immediately; destroying an open tooltip doesn't use the\r\n                // hide animation\r\n                $(\"#\" + id).remove();\r\n\r\n                // Restore the title\r\n                if (element.data(\"ui-tooltip-title\")) {\r\n                    element.attr(\"title\", element.data(\"ui-tooltip-title\"));\r\n                    element.removeData(\"ui-tooltip-title\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n});\r\n","jquery/ui-modules/widget.js":"/*!\r\n * jQuery UI Widget - v1.10.4\r\n * http://jqueryui.com\r\n *\r\n * Copyright 2014 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n *\r\n * http://api.jqueryui.com/jQuery.widget/\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($, undefined) {\r\n\r\n    var uuid = 0,\r\n        slice = Array.prototype.slice,\r\n        _cleanData = $.cleanData;\r\n    $.cleanData = function (elems) {\r\n        for (var i = 0, elem; (elem = elems[i]) != null; i++) {\r\n            try {\r\n                $(elem).triggerHandler(\"remove\");\r\n                // http://bugs.jquery.com/ticket/8235\r\n            } catch (e) {\r\n            }\r\n        }\r\n        _cleanData(elems);\r\n    };\r\n\r\n    $.widget = function (name, base, prototype) {\r\n        var fullName, existingConstructor, constructor, basePrototype,\r\n            // proxiedPrototype allows the provided prototype to remain unmodified\r\n            // so that it can be used as a mixin for multiple widgets (#8876)\r\n            proxiedPrototype = {},\r\n            namespace = name.split(\".\")[0];\r\n\r\n        name = name.split(\".\")[1];\r\n        fullName = namespace + \"-\" + name;\r\n\r\n        if (!prototype) {\r\n            prototype = base;\r\n            base = $.Widget;\r\n        }\r\n\r\n        // create selector for plugin\r\n        $.expr[\":\"][fullName.toLowerCase()] = function (elem) {\r\n            return !!$.data(elem, fullName);\r\n        };\r\n\r\n        $[namespace] = $[namespace] || {};\r\n        existingConstructor = $[namespace][name];\r\n        constructor = $[namespace][name] = function (options, element) {\r\n            // allow instantiation without \"new\" keyword\r\n            if (!this._createWidget) {\r\n                return new constructor(options, element);\r\n            }\r\n\r\n            // allow instantiation without initializing for simple inheritance\r\n            // must use \"new\" keyword (the code above always passes args)\r\n            if (arguments.length) {\r\n                this._createWidget(options, element);\r\n            }\r\n        };\r\n        // extend with the existing constructor to carry over any static properties\r\n        $.extend(constructor, existingConstructor, {\r\n            version: prototype.version,\r\n            // copy the object used to create the prototype in case we need to\r\n            // redefine the widget later\r\n            _proto: $.extend({}, prototype),\r\n            // track widgets that inherit from this widget in case this widget is\r\n            // redefined after a widget inherits from it\r\n            _childConstructors: []\r\n        });\r\n\r\n        basePrototype = new base();\r\n        // we need to make the options hash a property directly on the new instance\r\n        // otherwise we'll modify the options hash on the prototype that we're\r\n        // inheriting from\r\n        basePrototype.options = $.widget.extend({}, basePrototype.options);\r\n        $.each(prototype, function (prop, value) {\r\n            if (!$.isFunction(value)) {\r\n                proxiedPrototype[prop] = value;\r\n                return;\r\n            }\r\n            proxiedPrototype[prop] = (function () {\r\n                var _super = function () {\r\n                        return base.prototype[prop].apply(this, arguments);\r\n                    },\r\n                    _superApply = function (args) {\r\n                        return base.prototype[prop].apply(this, args);\r\n                    };\r\n                return function () {\r\n                    var __super = this._super,\r\n                        __superApply = this._superApply,\r\n                        returnValue;\r\n\r\n                    this._super = _super;\r\n                    this._superApply = _superApply;\r\n\r\n                    returnValue = value.apply(this, arguments);\r\n\r\n                    this._super = __super;\r\n                    this._superApply = __superApply;\r\n\r\n                    return returnValue;\r\n                };\r\n            })();\r\n        });\r\n        constructor.prototype = $.widget.extend(basePrototype, {\r\n            // TODO: remove support for widgetEventPrefix\r\n            // always use the name + a colon as the prefix, e.g., draggable:start\r\n            // don't prefix for widgets that aren't DOM-based\r\n            widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name\r\n        }, proxiedPrototype, {\r\n            constructor: constructor,\r\n            namespace: namespace,\r\n            widgetName: name,\r\n            widgetFullName: fullName\r\n        });\r\n\r\n        // If this widget is being redefined then we need to find all widgets that\r\n        // are inheriting from it and redefine all of them so that they inherit from\r\n        // the new version of this widget. We're essentially trying to replace one\r\n        // level in the prototype chain.\r\n        if (existingConstructor) {\r\n            $.each(existingConstructor._childConstructors, function (i, child) {\r\n                var childPrototype = child.prototype;\r\n\r\n                // redefine the child widget using the same prototype that was\r\n                // originally used, but inherit from the new version of the base\r\n                $.widget(childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto);\r\n            });\r\n            // remove the list of existing child constructors from the old constructor\r\n            // so the old child constructors can be garbage collected\r\n            delete existingConstructor._childConstructors;\r\n        } else {\r\n            base._childConstructors.push(constructor);\r\n        }\r\n\r\n        $.widget.bridge(name, constructor);\r\n    };\r\n\r\n    $.widget.extend = function (target) {\r\n        var input = slice.call(arguments, 1),\r\n            inputIndex = 0,\r\n            inputLength = input.length,\r\n            key,\r\n            value;\r\n        for (; inputIndex < inputLength; inputIndex++) {\r\n            for (key in input[inputIndex]) {\r\n                value = input[inputIndex][key];\r\n                if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {\r\n                    // Clone objects\r\n                    if ($.isPlainObject(value)) {\r\n                        target[key] = $.isPlainObject(target[key]) ?\r\n                            $.widget.extend({}, target[key], value) :\r\n                            // Don't extend strings, arrays, etc. with objects\r\n                            $.widget.extend({}, value);\r\n                        // Copy everything else by reference\r\n                    } else {\r\n                        target[key] = value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n\r\n    $.widget.bridge = function (name, object) {\r\n        var fullName = object.prototype.widgetFullName || name;\r\n        $.fn[name] = function (options) {\r\n            var isMethodCall = typeof options === \"string\",\r\n                args = slice.call(arguments, 1),\r\n                returnValue = this;\r\n\r\n            // allow multiple hashes to be passed on init\r\n            options = !isMethodCall && args.length ?\r\n                $.widget.extend.apply(null, [options].concat(args)) :\r\n                options;\r\n\r\n            if (isMethodCall) {\r\n                this.each(function () {\r\n                    var methodValue,\r\n                        instance = $.data(this, fullName);\r\n                    if (!instance) {\r\n                        return $.error(\"cannot call methods on \" + name + \" prior to initialization; \" +\r\n                            \"attempted to call method '\" + options + \"'\");\r\n                    }\r\n                    if (!$.isFunction(instance[options]) || options.charAt(0) === \"_\") {\r\n                        return $.error(\"no such method '\" + options + \"' for \" + name + \" widget instance\");\r\n                    }\r\n                    methodValue = instance[options].apply(instance, args);\r\n                    if (methodValue !== instance && methodValue !== undefined) {\r\n                        returnValue = methodValue && methodValue.jquery ?\r\n                            returnValue.pushStack(methodValue.get()) :\r\n                            methodValue;\r\n                        return false;\r\n                    }\r\n                });\r\n            } else {\r\n                this.each(function () {\r\n                    var instance = $.data(this, fullName);\r\n                    if (instance) {\r\n                        instance.option(options || {})._init();\r\n                    } else {\r\n                        $.data(this, fullName, new object(options, this));\r\n                    }\r\n                });\r\n            }\r\n\r\n            return returnValue;\r\n        };\r\n    };\r\n\r\n    $.Widget = function ( /* options, element */) {\r\n    };\r\n    $.Widget._childConstructors = [];\r\n\r\n    $.Widget.prototype = {\r\n        widgetName: \"widget\",\r\n        widgetEventPrefix: \"\",\r\n        defaultElement: \"<div>\",\r\n        options: {\r\n            disabled: false,\r\n\r\n            // callbacks\r\n            create: null\r\n        },\r\n        _createWidget: function (options, element) {\r\n            element = $(element || this.defaultElement || this)[0];\r\n            this.element = $(element);\r\n            this.uuid = uuid++;\r\n            this.eventNamespace = \".\" + this.widgetName + this.uuid;\r\n            this.options = $.widget.extend({},\r\n                this.options,\r\n                this._getCreateOptions(),\r\n                options);\r\n\r\n            this.bindings = $();\r\n            this.hoverable = $();\r\n            this.focusable = $();\r\n\r\n            if (element !== this) {\r\n                $.data(element, this.widgetFullName, this);\r\n                this._on(true, this.element, {\r\n                    remove: function (event) {\r\n                        if (event.target === element) {\r\n                            this.destroy();\r\n                        }\r\n                    }\r\n                });\r\n                this.document = $(element.style ?\r\n                    // element within the document\r\n                    element.ownerDocument :\r\n                    // element is window or document\r\n                    element.document || element);\r\n                this.window = $(this.document[0].defaultView || this.document[0].parentWindow);\r\n            }\r\n\r\n            this._create();\r\n            this._trigger(\"create\", null, this._getCreateEventData());\r\n            this._init();\r\n        },\r\n        _getCreateOptions: $.noop,\r\n        _getCreateEventData: $.noop,\r\n        _create: $.noop,\r\n        _init: $.noop,\r\n\r\n        destroy: function () {\r\n            this._destroy();\r\n            // we can probably remove the unbind calls in 2.0\r\n            // all event bindings should go through this._on()\r\n            this.element\r\n                .unbind(this.eventNamespace)\r\n                // 1.9 BC for #7810\r\n                // TODO remove dual storage\r\n                .removeData(this.widgetName)\r\n                .removeData(this.widgetFullName)\r\n                // support: jquery <1.6.3\r\n                // http://bugs.jquery.com/ticket/9413\r\n                .removeData($.camelCase(this.widgetFullName));\r\n            this.widget()\r\n                .unbind(this.eventNamespace)\r\n                .removeAttr(\"aria-disabled\")\r\n                .removeClass(\r\n                    this.widgetFullName + \"-disabled \" +\r\n                    \"ui-state-disabled\");\r\n\r\n            // clean up events and states\r\n            this.bindings.unbind(this.eventNamespace);\r\n            this.hoverable.removeClass(\"ui-state-hover\");\r\n            this.focusable.removeClass(\"ui-state-focus\");\r\n        },\r\n        _destroy: $.noop,\r\n\r\n        widget: function () {\r\n            return this.element;\r\n        },\r\n\r\n        option: function (key, value) {\r\n            var options = key,\r\n                parts,\r\n                curOption,\r\n                i;\r\n\r\n            if (arguments.length === 0) {\r\n                // don't return a reference to the internal hash\r\n                return $.widget.extend({}, this.options);\r\n            }\r\n\r\n            if (typeof key === \"string\") {\r\n                // handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\r\n                options = {};\r\n                parts = key.split(\".\");\r\n                key = parts.shift();\r\n                if (parts.length) {\r\n                    curOption = options[key] = $.widget.extend({}, this.options[key]);\r\n                    for (i = 0; i < parts.length - 1; i++) {\r\n                        curOption[parts[i]] = curOption[parts[i]] || {};\r\n                        curOption = curOption[parts[i]];\r\n                    }\r\n                    key = parts.pop();\r\n                    if (arguments.length === 1) {\r\n                        return curOption[key] === undefined ? null : curOption[key];\r\n                    }\r\n                    curOption[key] = value;\r\n                } else {\r\n                    if (arguments.length === 1) {\r\n                        return this.options[key] === undefined ? null : this.options[key];\r\n                    }\r\n                    options[key] = value;\r\n                }\r\n            }\r\n\r\n            this._setOptions(options);\r\n\r\n            return this;\r\n        },\r\n        _setOptions: function (options) {\r\n            var key;\r\n\r\n            for (key in options) {\r\n                this._setOption(key, options[key]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        _setOption: function (key, value) {\r\n            this.options[key] = value;\r\n\r\n            if (key === \"disabled\") {\r\n                this.widget()\r\n                    .toggleClass(this.widgetFullName + \"-disabled ui-state-disabled\", !!value)\r\n                    .attr(\"aria-disabled\", value);\r\n                this.hoverable.removeClass(\"ui-state-hover\");\r\n                this.focusable.removeClass(\"ui-state-focus\");\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        enable: function () {\r\n            return this._setOption(\"disabled\", false);\r\n        },\r\n        disable: function () {\r\n            return this._setOption(\"disabled\", true);\r\n        },\r\n\r\n        _on: function (suppressDisabledCheck, element, handlers) {\r\n            var delegateElement,\r\n                instance = this;\r\n\r\n            // no suppressDisabledCheck flag, shuffle arguments\r\n            if (typeof suppressDisabledCheck !== \"boolean\") {\r\n                handlers = element;\r\n                element = suppressDisabledCheck;\r\n                suppressDisabledCheck = false;\r\n            }\r\n\r\n            // no element argument, shuffle and use this.element\r\n            if (!handlers) {\r\n                handlers = element;\r\n                element = this.element;\r\n                delegateElement = this.widget();\r\n            } else {\r\n                // accept selectors, DOM elements\r\n                element = delegateElement = $(element);\r\n                this.bindings = this.bindings.add(element);\r\n            }\r\n\r\n            $.each(handlers, function (event, handler) {\r\n                function handlerProxy() {\r\n                    // allow widgets to customize the disabled handling\r\n                    // - disabled as an array instead of boolean\r\n                    // - disabled class as method for disabling individual parts\r\n                    if (!suppressDisabledCheck &&\r\n                        (instance.options.disabled === true ||\r\n                            $(this).hasClass(\"ui-state-disabled\"))) {\r\n                        return;\r\n                    }\r\n                    return (typeof handler === \"string\" ? instance[handler] : handler)\r\n                        .apply(instance, arguments);\r\n                }\r\n\r\n                // copy the guid so direct unbinding works\r\n                if (typeof handler !== \"string\") {\r\n                    handlerProxy.guid = handler.guid =\r\n                        handler.guid || handlerProxy.guid || $.guid++;\r\n                }\r\n\r\n                var match = event.match(/^(\\w+)\\s*(.*)$/),\r\n                    eventName = match[1] + instance.eventNamespace,\r\n                    selector = match[2];\r\n                if (selector) {\r\n                    delegateElement.delegate(selector, eventName, handlerProxy);\r\n                } else {\r\n                    element.bind(eventName, handlerProxy);\r\n                }\r\n            });\r\n        },\r\n\r\n        _off: function (element, eventName) {\r\n            eventName = (eventName || \"\").split(\" \").join(this.eventNamespace + \" \") + this.eventNamespace;\r\n            element.unbind(eventName).undelegate(eventName);\r\n        },\r\n\r\n        _delay: function (handler, delay) {\r\n            function handlerProxy() {\r\n                return (typeof handler === \"string\" ? instance[handler] : handler)\r\n                    .apply(instance, arguments);\r\n            }\r\n\r\n            var instance = this;\r\n            return setTimeout(handlerProxy, delay || 0);\r\n        },\r\n\r\n        _hoverable: function (element) {\r\n            this.hoverable = this.hoverable.add(element);\r\n            this._on(element, {\r\n                mouseenter: function (event) {\r\n                    $(event.currentTarget).addClass(\"ui-state-hover\");\r\n                },\r\n                mouseleave: function (event) {\r\n                    $(event.currentTarget).removeClass(\"ui-state-hover\");\r\n                }\r\n            });\r\n        },\r\n\r\n        _focusable: function (element) {\r\n            this.focusable = this.focusable.add(element);\r\n            this._on(element, {\r\n                focusin: function (event) {\r\n                    $(event.currentTarget).addClass(\"ui-state-focus\");\r\n                },\r\n                focusout: function (event) {\r\n                    $(event.currentTarget).removeClass(\"ui-state-focus\");\r\n                }\r\n            });\r\n        },\r\n\r\n        _trigger: function (type, event, data) {\r\n            var prop, orig,\r\n                callback = this.options[type];\r\n\r\n            data = data || {};\r\n            event = $.Event(event);\r\n            event.type = (type === this.widgetEventPrefix ?\r\n                type :\r\n                this.widgetEventPrefix + type).toLowerCase();\r\n            // the original event may come from any element\r\n            // so we need to reset the target on the new event\r\n            event.target = this.element[0];\r\n\r\n            // copy original event properties over to the new event\r\n            orig = event.originalEvent;\r\n            if (orig) {\r\n                for (prop in orig) {\r\n                    if (!(prop in event)) {\r\n                        event[prop] = orig[prop];\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.element.trigger(event, data);\r\n            return !($.isFunction(callback) &&\r\n                callback.apply(this.element[0], [event].concat(data)) === false ||\r\n                event.isDefaultPrevented());\r\n        }\r\n    };\r\n\r\n    $.each({show: \"fadeIn\", hide: \"fadeOut\"}, function (method, defaultEffect) {\r\n        $.Widget.prototype[\"_\" + method] = function (element, options, callback) {\r\n            if (typeof options === \"string\") {\r\n                options = {effect: options};\r\n            }\r\n            var hasOptions,\r\n                effectName = !options ?\r\n                    method :\r\n                    options === true || typeof options === \"number\" ?\r\n                        defaultEffect :\r\n                        options.effect || defaultEffect;\r\n            options = options || {};\r\n            if (typeof options === \"number\") {\r\n                options = {duration: options};\r\n            }\r\n            hasOptions = !$.isEmptyObject(options);\r\n            options.complete = callback;\r\n            if (options.delay) {\r\n                element.delay(options.delay);\r\n            }\r\n            if (hasOptions && $.effects && $.effects.effect[effectName]) {\r\n                element[method](options);\r\n            } else if (effectName !== method && element[effectName]) {\r\n                element[effectName](options.duration, options.easing, callback);\r\n            } else {\r\n                element.queue(function (next) {\r\n                    $(this)[method]();\r\n                    if (callback) {\r\n                        callback.call(element[0]);\r\n                    }\r\n                    next();\r\n                });\r\n            }\r\n        };\r\n    });\r\n\r\n});\r\n","js/navigation-menu.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/**\r\n * @deprecated\r\n * @see lib/web/mage/menu.js\r\n */\r\ndefine([\r\n    'jquery',\r\n    'matchMedia',\r\n    'mage/template',\r\n    'mage/dropdowns',\r\n    'mage/terms'\r\n], function ($, mediaCheck, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.navigationMenu', {\r\n        options: {\r\n            itemsContainer: '> ul',\r\n            topLevel: 'li.level0',\r\n            topLevelSubmenu: '> .submenu',\r\n            topLevelHoverClass: 'hover',\r\n            expandedTopLevel: '.more',\r\n            hoverInTimeout: 300,\r\n            hoverOutTimeout: 500,\r\n            submenuAnimationSpeed: 200,\r\n            collapsable: true,\r\n            collapsableDropdownTemplate:\r\n                '<script type=\"text/x-magento-template\">' +\r\n                    '<li class=\"level0 level-top more parent\">' +\r\n                        '<div class=\"submenu\">' +\r\n                            '<ul><%= elems %></ul>' +\r\n                        '</div>' +\r\n                    '</li>' +\r\n                '</script>'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this.itemsContainer = $(this.options.itemsContainer, this.element);\r\n            this.topLevel = $(this.options.topLevel, this.element);\r\n            this.topLevelSubmenu = $(this.options.topLevelSubmenu, this.topLevel);\r\n\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            if (this.options.collapsable) {\r\n                setTimeout($.proxy(function () {\r\n                    this._checkToCollapseOrExpand();\r\n                }, this), 100);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                'mouseenter > ul > li.level0': function (e) {\r\n                    if (!this.entered) { // fix IE bug with 'mouseenter' event\r\n                        this.timeoutId && clearTimeout(this.timeoutId);\r\n                        this.timeoutId = setTimeout($.proxy(function () {\r\n                            this._openSubmenu(e);\r\n                        }, this), this.options.hoverInTimeout);\r\n                        this.entered = true;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                'mouseleave > ul > li.level0': function (e) {\r\n                    this.entered = null;\r\n\r\n                    this.timeoutId && clearTimeout(this.timeoutId);\r\n                    this.timeoutId = setTimeout($.proxy(function () {\r\n                        this._closeSubmenu(e.currentTarget);\r\n                    }, this), this.options.hoverOutTimeout);\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuert.Event} e\r\n                 */\r\n                'click': function (e) {\r\n                    e.stopPropagation();\r\n                }\r\n            });\r\n\r\n            $(document)\r\n                .on('click.hideMenu', $.proxy(function () {\r\n                    var isOpened = this.topLevel.filter(function () {\r\n                        return $(this).data('opened');\r\n                    });\r\n\r\n                    if (isOpened) {\r\n                        this._closeSubmenu(null, false);\r\n                    }\r\n                }, this));\r\n\r\n            $(window)\r\n                .on('resize', $.proxy(function () {\r\n                    this.timeoutOnResize && clearTimeout(this.timeoutOnResize);\r\n                    this.timeoutOnResize = setTimeout($.proxy(function () {\r\n                        if (this.options.collapsable) {\r\n                            if ($(this.options.expandedTopLevel, this.element).length) {\r\n                                this._expandMenu();\r\n                            }\r\n                            this._checkToCollapseOrExpand();\r\n                        }\r\n                    }, this), 300);\r\n                }, this));\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @private\r\n         */\r\n        _openSubmenu: function (e) {\r\n            var menuItem = e.currentTarget;\r\n\r\n            if (!$(menuItem).data('opened')) {\r\n                this._closeSubmenu(menuItem, true, true);\r\n\r\n                $(this.options.topLevelSubmenu, menuItem)\r\n                    .slideDown(this.options.submenuAnimationSpeed, $.proxy(function () {\r\n                        $(menuItem).addClass(this.options.topLevelHoverClass);\r\n                        $(menuItem).data('opened', true);\r\n                    }, this));\r\n            } else if ($(e.target).closest(this.options.topLevel)) {\r\n                $(e.target)\r\n                    .addClass(this.options.topLevelHoverClass)\r\n                    .siblings(this.options.topLevel)\r\n                        .removeClass(this.options.topLevelHoverClass);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} menuItem\r\n         * @param {*} excludeCurrent\r\n         * @param {*} fast\r\n         * @private\r\n         */\r\n        _closeSubmenu: function (menuItem, excludeCurrent, fast) {\r\n            var topLevel = $(this.options.topLevel, this.element),\r\n                activeSubmenu = $(this.options.topLevelSubmenu, menuItem || null);\r\n\r\n            $(this.options.topLevelSubmenu, topLevel)\r\n                .filter(function () {\r\n                    return excludeCurrent ? $(this).not(activeSubmenu) : true;\r\n                })\r\n                .slideUp(fast ? 0 : this.options.submenuAnimationSpeed);\r\n\r\n            topLevel\r\n                .removeClass(this.options.topLevelHoverClass)\r\n                .data('opened', false);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _checkToCollapseOrExpand: function () {\r\n            var navWidth, totalWidth, startCollapseIndex;\r\n\r\n            if ($('html').hasClass('lt-640') || $('html').hasClass('w-640')) {\r\n                return;\r\n            }\r\n\r\n            navWidth = this.itemsContainer.width();\r\n            totalWidth = 0;\r\n            startCollapseIndex = 0;\r\n\r\n            $.each($(this.options.topLevel, this.element), function (index, item) {\r\n                totalWidth += $(item).outerWidth(true);\r\n\r\n                if (totalWidth > navWidth && !startCollapseIndex) {\r\n                    startCollapseIndex = index - 2;\r\n                }\r\n            });\r\n\r\n            this[startCollapseIndex ? '_collapseMenu' : '_expandMenu'](startCollapseIndex);\r\n        },\r\n\r\n        /**\r\n         * @param {*} startCollapseIndex\r\n         * @private\r\n         */\r\n        _collapseMenu: function (startCollapseIndex) {\r\n            this.elemsToCollapse = this.topLevel.filter(function (index) {\r\n                return index > startCollapseIndex;\r\n            });\r\n            this.elemsToCollapseClone = $('<div></div>').append(this.elemsToCollapse.clone()).html();\r\n\r\n            this.collapsableDropdown = $(\r\n                mageTemplate(\r\n                    this.options.collapsableDropdownTemplate,\r\n                    {\r\n                        elems: this.elemsToCollapseClone\r\n                    }\r\n                )\r\n            );\r\n\r\n            this.itemsContainer.append(this.collapsableDropdown);\r\n            this.elemsToCollapse.detach();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _expandMenu: function () {\r\n            this.elemsToCollapse && this.elemsToCollapse.appendTo(this.itemsContainer);\r\n            this.collapsableDropdown && this.collapsableDropdown.remove();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            this._expandMenu();\r\n        }\r\n    });\r\n\r\n    /*\r\n     * Provides \"Continium\" effect for submenu\r\n     * */\r\n    $.widget('mage.navigationMenu', $.mage.navigationMenu, {\r\n        options: {\r\n            parentLevel: '> ul > li.level0',\r\n            submenuAnimationSpeed: 150,\r\n            submenuContiniumEffect: false\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            this._super();\r\n            this._applySubmenuStyles();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _applySubmenuStyles: function () {\r\n            $(this.options.topLevelSubmenu, $(this.options.topLevel, this.element))\r\n                .removeAttr('style');\r\n\r\n            $(this.options.topLevelSubmenu, $(this.options.parentLevel, this.element))\r\n                .css({\r\n                    display: 'block',\r\n                    height: 0,\r\n                    overflow: 'hidden'\r\n                });\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @private\r\n         */\r\n        _openSubmenu: function (e) {\r\n            var menuItem = e.currentTarget,\r\n                submenu = $(this.options.topLevelSubmenu, menuItem),\r\n                openedItems = $(this.options.topLevel, this.element).filter(function () {\r\n                    return $(this).data('opened');\r\n                });\r\n\r\n            if (submenu.length) {\r\n                this.heightToAnimate = $(this.options.itemsContainer, submenu).outerHeight(true);\r\n\r\n                if (openedItems.length) {\r\n                    this._closeSubmenu(menuItem, true, this.heightToAnimate, $.proxy(function () {\r\n                        submenu.css({\r\n                            height: 'auto'\r\n                        });\r\n                        $(menuItem)\r\n                            .addClass(this.options.topLevelHoverClass);\r\n                    }, this), e);\r\n                } else {\r\n                    submenu.animate({\r\n                        height: this.heightToAnimate\r\n                    }, this.options.submenuAnimationSpeed, $.proxy(function () {\r\n                        $(menuItem)\r\n                            .addClass(this.options.topLevelHoverClass);\r\n                    }, this));\r\n                }\r\n\r\n                $(menuItem)\r\n                    .data('opened', true);\r\n            } else {\r\n                this._closeSubmenu(menuItem);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} menuItem\r\n         * @param {*} excludeCurrent\r\n         * @param {*} heightToAnimate\r\n         * @param {Function} callback\r\n         * @private\r\n         */\r\n        _closeSubmenu: function (menuItem, excludeCurrent, heightToAnimate, callback) {\r\n            var topLevel = $(this.options.topLevel, this.itemsContainer),\r\n                prevOpenedItem, prevOpenedSubmenu;\r\n\r\n            if (!excludeCurrent) {\r\n                $(this.options.topLevelSubmenu, $(this.options.parentLevel, this.element))\r\n                    .animate({\r\n                        height: 0\r\n                    });\r\n\r\n                topLevel\r\n                    .data('opened', false)\r\n                    .removeClass(this.options.topLevelHoverClass);\r\n            } else {\r\n                prevOpenedItem = topLevel.filter(function () {\r\n                    return $(this).data('opened');\r\n                });\r\n                prevOpenedSubmenu = $(this.options.topLevelSubmenu, prevOpenedItem);\r\n\r\n                prevOpenedSubmenu.animate({\r\n                    height: heightToAnimate\r\n                }, this.options.submenuAnimationSpeed, 'linear', function () {\r\n                    $(this).css({\r\n                        height: 0\r\n                    });\r\n                    callback && callback();\r\n                });\r\n\r\n                prevOpenedItem\r\n                    .data('opened', false)\r\n                    .removeClass(this.options.topLevelHoverClass);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _collapseMenu: function () {\r\n            this._superApply(arguments);\r\n            this._applySubmenuStyles();\r\n        }\r\n    });\r\n\r\n    //  Responsive menu\r\n    $.widget('mage.navigationMenu', $.mage.navigationMenu, {\r\n        options: {\r\n            responsive: false,\r\n            origNavPlaceholder: '.page-header',\r\n            mainContainer: 'body',\r\n            pageWrapper: '.page-wrapper',\r\n            openedMenuClass: 'opened',\r\n            toggleActionPlaceholder: '.block-search',\r\n            itemWithSubmenu: 'li.parent',\r\n            titleWithSubmenu: 'li.parent > a',\r\n            submenu: 'li.parent > .submenu',\r\n            toggleActionTemplate:\r\n                '<script type=\"text/x-magento-template\">' +\r\n                    '<span data-action=\"toggle-nav\" class=\"action toggle nav\">Toggle Nav</span>' +\r\n                '</script>',\r\n            submenuActionsTemplate:\r\n                '<script type=\"text/x-magento-template\">' +\r\n                    '<li class=\"action all\">' +\r\n                        '<a href=\"<%= categoryURL %>\"><span>All <%= category %></span></a>' +\r\n                    '</li>' +\r\n                '</script>',\r\n            navigationSectionsWrapperTemplate:\r\n                '<script type=\"text/x-magento-template\">' +\r\n                    '<dl class=\"navigation-tabs\" data-sections=\"tabs\">' +\r\n                    '</dl>' +\r\n                '</script>',\r\n            navigationItemWrapperTemplate:\r\n                '<script type=\"text/x-magento-template\">' +\r\n                    '<dt class=\"item title <% if (active) { %>active<% } %>\" data-section=\"title\">' +\r\n                        '<a class=\"switch\" data-toggle=\"switch\" href=\"#TODO\"><%= title %></a>' +\r\n                    '</dt>' +\r\n                    '<dd class=\"item content <% if (active) { %>active<%}%>\" data-section=\"content\">' +\r\n                    '</dd>' +\r\n                '</script>'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            this._super();\r\n\r\n            this.mainContainer = $(this.options.mainContainer);\r\n            this.pageWrapper = $(this.options.pageWrapper);\r\n            this.toggleAction = $(mageTemplate(this.options.toggleActionTemplate, {}));\r\n\r\n            if (this.options.responsive) {\r\n                mediaCheck({\r\n                    media: '(min-width: 768px)',\r\n                    entry: $.proxy(function () {\r\n                        this._toggleDesktopMode();\r\n                    }, this),\r\n                    exit: $.proxy(function () {\r\n                        this._toggleMobileMode();\r\n                    }, this)\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._super();\r\n            this._bindDocumentEvents();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bindDocumentEvents: function () {\r\n            if (!this.eventsBound) {\r\n                $(document)\r\n                    .on('click.toggleMenu', '.action.toggle.nav', $.proxy(function (e) {\r\n                        if ($(this.element).data('opened')) {\r\n                            this._hideMenu();\r\n                        } else {\r\n                            this._showMenu();\r\n                        }\r\n                        e.stopPropagation();\r\n                        this.mobileNav.scrollTop(0);\r\n                        this._fixedBackLink();\r\n                    }, this))\r\n                    .on('click.hideMenu', this.options.pageWrapper, $.proxy(function () {\r\n                        if ($(this.element).data('opened')) {\r\n                            this._hideMenu();\r\n                            this.mobileNav.scrollTop(0);\r\n                            this._fixedBackLink();\r\n                        }\r\n                    }, this))\r\n                    .on('click.showSubmenu', this.options.titleWithSubmenu, $.proxy(function (e) {\r\n                        this._showSubmenu(e);\r\n\r\n                        e.preventDefault();\r\n                        this.mobileNav.scrollTop(0);\r\n                        this._fixedBackLink();\r\n                    }, this))\r\n                    .on('click.hideSubmenu', '.action.back', $.proxy(function (e) {\r\n                        this._hideSubmenu(e);\r\n                        this.mobileNav.scrollTop(0);\r\n                        this._fixedBackLink();\r\n                    }, this));\r\n\r\n                this.eventsBound = true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _showMenu: function () {\r\n            $(this.element).data('opened', true);\r\n            this.mainContainer.add('html').addClass(this.options.openedMenuClass);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _hideMenu: function () {\r\n            $(this.element).data('opened', false);\r\n            this.mainContainer.add('html').removeClass(this.options.openedMenuClass);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @private\r\n         */\r\n        _showSubmenu: function (e) {\r\n            var submenu;\r\n\r\n            $(e.currentTarget).addClass('action back');\r\n            submenu = $(e.currentTarget).siblings('.submenu');\r\n\r\n            submenu.addClass('opened');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @private\r\n         */\r\n        _hideSubmenu: function (e) {\r\n            var submenuSelector = '.submenu',\r\n                submenu = $(e.currentTarget).next(submenuSelector);\r\n\r\n            $(e.currentTarget).removeClass('action back');\r\n            submenu.removeClass('opened');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _renderSubmenuActions: function () {\r\n            $.each(\r\n                $(this.options.itemWithSubmenu),\r\n                $.proxy(function (index, item) {\r\n                    var actions = $(mageTemplate(\r\n                            this.options.submenuActionsTemplate,\r\n                            {\r\n                                category: $('> a > span', item).text(),\r\n                                categoryURL: $('> a', item).attr('href')\r\n                            }\r\n                        )),\r\n                        submenu = $('> .submenu', item),\r\n                        items = $('> ul', submenu);\r\n\r\n                    items.prepend(actions);\r\n                }, this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _toggleMobileMode: function () {\r\n            this._expandMenu();\r\n\r\n            $(this.options.topLevelSubmenu, $(this.options.topLevel, this.element))\r\n                .removeAttr('style');\r\n\r\n            this.toggleAction.insertBefore(this.options.toggleActionPlaceholder);\r\n            this.mobileNav = $(this.element).detach().clone();\r\n            this.mainContainer.prepend(this.mobileNav);\r\n            this.mobileNav.find('> ul').addClass('nav');\r\n            this._insertExtraItems();\r\n            this._wrapItemsInSections();\r\n            this.mobileNav.scroll($.proxy(function () {\r\n                this._fixedBackLink();\r\n            }, this));\r\n\r\n            this._renderSubmenuActions();\r\n            this._bindDocumentEvents();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _toggleDesktopMode: function () {\r\n            this.mobileNav && this.mobileNav.remove();\r\n            this.toggleAction.detach();\r\n            $(this.element).insertAfter(this.options.origNavPlaceholder);\r\n\r\n            $(document)\r\n                .off('click.toggleMenu', '.action.toggle.nav')\r\n                .off('click.hideMenu', this.options.pageWrapper)\r\n                .off('click.showSubmenu', this.options.titleWithSubmenu)\r\n                .off('click.hideSubmenu', '.action.back');\r\n\r\n            this.eventsBound = false;\r\n\r\n            this._applySubmenuStyles();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _insertExtraItems: function () {\r\n            var settings, footerSettings, account;\r\n\r\n            if ($('.header.panel .switcher').length) {\r\n                settings = $('.header.panel .switcher')\r\n                    .clone()\r\n                    .addClass('settings');\r\n\r\n                this.mobileNav.prepend(settings);\r\n            }\r\n\r\n            if ($('.footer .switcher').length) {\r\n                footerSettings = $('.footer .switcher')\r\n                    .clone()\r\n                    .addClass('settings');\r\n\r\n                this.mobileNav.prepend(footerSettings);\r\n            }\r\n\r\n            if ($('.header.panel .header.links li').length) {\r\n                account = $('.header.panel > .header.links')\r\n                    .clone()\r\n                    .addClass('account');\r\n\r\n                this.mobileNav.prepend(account);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _wrapItemsInSections: function () {\r\n            var account = $('> .account', this.mobileNav),\r\n                settings = $('> .settings', this.mobileNav),\r\n                nav = $('> .nav', this.mobileNav),\r\n                navigationSectionsWrapper = $(mageTemplate(this.options.navigationSectionsWrapperTemplate, {})),\r\n                navigationItemWrapper;\r\n\r\n            this.mobileNav.append(navigationSectionsWrapper);\r\n\r\n            if (nav.length) {\r\n                navigationItemWrapper = $(mageTemplate(this.options.navigationItemWrapperTemplate, {\r\n                    title: 'Menu'\r\n                }));\r\n                navigationSectionsWrapper.append(navigationItemWrapper);\r\n                navigationItemWrapper.eq(1).append(nav);\r\n            }\r\n\r\n            if (account.length) {\r\n                navigationItemWrapper = $(mageTemplate(this.options.navigationItemWrapperTemplate, {\r\n                    title: 'Account'\r\n                }));\r\n                navigationSectionsWrapper.append(navigationItemWrapper);\r\n                navigationItemWrapper.eq(1).append(account);\r\n            }\r\n\r\n            if (settings.length) {\r\n                navigationItemWrapper = $(\r\n                    mageTemplate(this.options.navigationItemWrapperTemplate, {\r\n                        title: 'Settings'\r\n                    })\r\n                );\r\n                navigationSectionsWrapper.append(navigationItemWrapper);\r\n                navigationItemWrapper.eq(1).append(settings);\r\n            }\r\n\r\n            navigationSectionsWrapper.addClass(\r\n                'navigation-tabs-' + navigationSectionsWrapper.find('[data-section=\"title\"]').length\r\n            );\r\n            navigationSectionsWrapper.terms();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _fixedBackLink: function () {\r\n            var linksBack = this.mobileNav.find('.submenu .action.back'),\r\n                linkBack = this.mobileNav.find('.submenu.opened > ul > .action.back').last(),\r\n                subMenu, navOffset, linkBackHeight;\r\n\r\n            linksBack.removeClass('fixed');\r\n\r\n            if (linkBack.length) {\r\n                subMenu = linkBack.parent();\r\n                navOffset = this.mobileNav.find('.nav').position().top;\r\n                linkBackHeight = linkBack.height();\r\n\r\n                if (navOffset <= 0) {\r\n                    linkBack.addClass('fixed');\r\n                    subMenu.css({\r\n                        paddingTop: linkBackHeight\r\n                    });\r\n                } else {\r\n                    linkBack.removeClass('fixed');\r\n                    subMenu.css({\r\n                        paddingTop: 0\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.navigationMenu;\r\n});\r\n","Klarna_Kp/js/action/override.js":"/**\r\n * This file is part of the Klarna KP module\r\n *\r\n * (c) Klarna Bank AB (publ)\r\n *\r\n * For the full copyright and license information, please view the NOTICE\r\n * and LICENSE files that were distributed with this source code.\r\n */\r\n/*jshint browser:true jquery:true*/\r\n/*global alert*/\r\ndefine([\r\n  'mage/utils/wrapper',\r\n  'Klarna_Kp/js/model/config',\r\n  'Magento_Checkout/js/model/full-screen-loader'\r\n], function (wrapper, config, loader) {\r\n  'use strict';\r\n\r\n  /**\r\n   * This is needed to prevent the customer from a race condition between 'Place Order' and adding/removing a coupon,\r\n   * giftcard, rewards points, etc.. as it affects order totals\r\n   */\r\n  return function (overriddenFunction) {\r\n    return wrapper.wrap(overriddenFunction, function (originalAction) {\r\n      if (!config.enabled) {\r\n        return originalAction();\r\n      }\r\n      if (config.hasErrors()) {\r\n        return originalAction();\r\n      }\r\n      loader.startLoader();\r\n      return originalAction().then(function () {\r\n        loader.stopLoader();\r\n      });\r\n    });\r\n  };\r\n});\r\n","Klarna_Kp/js/model/config.js":"/**\r\n * This file is part of the Klarna KP module\r\n *\r\n * (c) Klarna Bank AB (publ)\r\n *\r\n * For the full copyright and license information, please view the NOTICE\r\n * and LICENSE files that were distributed with this source code.\r\n */\r\ndefine(\r\n  [\r\n    'ko'\r\n  ],\r\n  function (ko) {\r\n    'use strict';\r\n    var client_token = window.checkoutConfig.payment.klarna_kp.client_token,\r\n      message = window.checkoutConfig.payment.klarna_kp.message,\r\n      authorization_token = ko.observable(window.checkoutConfig.payment.klarna_kp.authorization_token),\r\n      debug = window.checkoutConfig.payment.klarna_kp.debug,\r\n      enabled = window.checkoutConfig.payment.klarna_kp.enabled,\r\n      b2b_enabled = window.checkoutConfig.payment.klarna_kp.b2b_enabled,\r\n      data_sharing_onload = window.checkoutConfig.payment.klarna_kp.data_sharing_onload,\r\n      success = window.checkoutConfig.payment.klarna_kp.success,\r\n      hasErrors = ko.observable(false),\r\n      available_methods = window.checkoutConfig.payment.klarna_kp.available_methods;\r\n\r\n    return {\r\n      hasErrors: hasErrors,\r\n      debug: debug,\r\n      enabled: enabled,\r\n      b2b_enabled: b2b_enabled,\r\n      data_sharing_onload: data_sharing_onload,\r\n      client_token: client_token,\r\n      message: message,\r\n      success: success,\r\n      authorization_token: authorization_token,\r\n      available_methods: available_methods,\r\n      getTitle: function (code) {\r\n        if (window.checkoutConfig.payment.klarna_kp[code]) {\r\n          return window.checkoutConfig.payment.klarna_kp[code].title;\r\n        }\r\n        return 'Klarna Payments';\r\n      },\r\n      getLogo: function (code) {\r\n        if (window.checkoutConfig.payment.klarna_kp[code]) {\r\n          return window.checkoutConfig.payment.klarna_kp[code].logo;\r\n        }\r\n        return '';\r\n      }\r\n    };\r\n  }\r\n);\r\n","Klarna_Kp/js/model/debug.js":"/**\r\n * This file is part of the Klarna KP module\r\n *\r\n * (c) Klarna Bank AB (publ)\r\n *\r\n * For the full copyright and license information, please view the NOTICE\r\n * and LICENSE files that were distributed with this source code.\r\n */\r\ndefine(\r\n  [\r\n    'Klarna_Kp/js/model/config'\r\n  ],\r\n  function (config) {\r\n    'use strict';\r\n    return {\r\n      log: function (message) {\r\n        if (config.debug) {\r\n          console.trace();\r\n          console.log(message);\r\n        }\r\n      },\r\n      group: function (groupid) {\r\n        if (config.debug) {\r\n          console.group(groupid);\r\n        }\r\n      },\r\n      groupEnd: function () {\r\n        if (config.debug) {\r\n          console.groupEnd();\r\n        }\r\n      },\r\n      table: function (tabularData, properties) {\r\n        if (config.debug) {\r\n          console.trace();\r\n          console.table(tabularData, properties);\r\n        }\r\n      }\r\n    };\r\n  }\r\n);\r\n","Klarna_Kp/js/model/klarna.js":"/* global Klarna */\r\n/**\r\n * This file is part of the Klarna KP module\r\n *\r\n * (c) Klarna Bank AB (publ)\r\n *\r\n * For the full copyright and license information, please view the NOTICE\r\n * and LICENSE files that were distributed with this source code.\r\n */\r\ndefine(\r\n  [\r\n    'jquery',\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Customer/js/model/customer',\r\n    'Klarna_Kp/js/model/config',\r\n    'Klarna_Kp/js/model/debug',\r\n    'klarnapi'\r\n  ],\r\n  function ($, quote, customer, config, debug) {\r\n    'use strict';\r\n    return {\r\n      b2b_enabled: config.b2b_enabled,\r\n      buildAddress: function (address, email, isShipping = false) {\r\n        var addr = {\r\n          'organization_name': '',\r\n          'given_name': '',\r\n          'family_name': '',\r\n          'street_address': '',\r\n          'city': '',\r\n          'postal_code': '',\r\n          'country': '',\r\n          'phone': '',\r\n          'email': email\r\n        };\r\n\r\n        if (!address) { // Somehow we got a null passed in\r\n          return addr;\r\n        }\r\n        if (address.prefix) {\r\n          addr['title'] = address.prefix;\r\n        }\r\n        if (address.firstname) {\r\n          addr['given_name'] = address.firstname;\r\n        }\r\n        if (address.lastname) {\r\n          addr['family_name'] = address.lastname;\r\n        }\r\n        if (address.street) {\r\n          if (address.street.length > 0) {\r\n            addr['street_address'] = address.street[0];\r\n          }\r\n          if (address.street.length > 1) {\r\n            addr['street_address2'] = address.street[1];\r\n          }\r\n        }\r\n        if (address.city) {\r\n          addr['city'] = address.city;\r\n        }\r\n        if (address.regionCode) {\r\n          addr['region'] = address.regionCode;\r\n        }\r\n        if (address.postcode) {\r\n          addr['postal_code'] = address.postcode;\r\n        }\r\n        if (address.countryId) {\r\n          addr['country'] = address.countryId;\r\n        }\r\n        if (address.telephone) {\r\n          addr['phone'] = address.telephone;\r\n        }\r\n        // Having organization_name in the billing address causes KP/PLSI to return B2B methods\r\n        // no matter the customer type. So we only want to set this if the merchant has enabled B2B.\r\n        if (address.company && (this.b2b_enabled || isShipping)) {\r\n          addr['organization_name'] = address.company;\r\n        }\r\n        debug.log(addr);\r\n        return addr;\r\n      },\r\n      buildCustomer: function (billingAddress) {\r\n        var type = 'person';\r\n\r\n        if (this.b2b_enabled && billingAddress.company) {\r\n          type = 'organization';\r\n        }\r\n\r\n        return {\r\n          'type': type\r\n        };\r\n      },\r\n      getUpdateData: function () {\r\n        var email = '',\r\n          shippingAddress = quote.shippingAddress(),\r\n          data = {\r\n            'billing_address': {},\r\n            'shipping_address': {},\r\n            'customer': {}\r\n          };\r\n\r\n        if (customer.isLoggedIn()) {\r\n          email = customer.customerData.email;\r\n        } else {\r\n          email = quote.guestEmail;\r\n        }\r\n        if (quote.isVirtual()) {\r\n          shippingAddress = quote.billingAddress();\r\n        }\r\n        data.billing_address = this.buildAddress(quote.billingAddress(), email);\r\n        data.shipping_address = this.buildAddress(shippingAddress, email, true);\r\n        data.customer = this.buildCustomer(quote.billingAddress());\r\n        debug.log(data);\r\n        return data;\r\n      },\r\n      load: function (payment_method, container_id, callback) {\r\n        var data = null;\r\n\r\n        debug.log('Loading container ' + container_id);\r\n        if ($('#' + container_id).length) {\r\n          debug.log('Loading method ' + payment_method);\r\n          if (config.data_sharing_onload) {\r\n            data = this.getUpdateData();\r\n          }\r\n          Klarna.Payments.load(\r\n            {\r\n              payment_method_category: payment_method,\r\n              container: \"#\" + container_id\r\n            },\r\n            data,\r\n            function (res) {\r\n              var errors = false;\r\n\r\n              debug.log(res);\r\n              if (res.errors) {\r\n                errors = true;\r\n              }\r\n              config.hasErrors(errors);\r\n              if (callback) {\r\n                callback(res);\r\n              }\r\n            }\r\n          );\r\n        }\r\n      },\r\n      init: function () {\r\n        Klarna.Payments.init({\r\n          client_token: config.client_token\r\n        });\r\n      },\r\n      authorize: function (payment_method, data, callback) {\r\n        Klarna.Payments.authorize(\r\n          {\r\n            payment_method_category: payment_method\r\n          },\r\n          data,\r\n          function (res) {\r\n            var errors = false;\r\n\r\n            debug.log(res);\r\n            if (true === res.approved) {\r\n              config.authorization_token(res.authorization_token);\r\n            }\r\n            if (res.errors) {\r\n              errors = true;\r\n            }\r\n            config.hasErrors(errors);\r\n            callback(res);\r\n          }\r\n        );\r\n      },\r\n      finalize: function (payment_method, data, callback) {\r\n        Klarna.Payments.finalize(\r\n          {\r\n            payment_method_category: payment_method\r\n          },\r\n          data,\r\n          function (res) {\r\n            var errors = false;\r\n\r\n            debug.log(res);\r\n            if (true === res.approved) {\r\n              config.authorization_token(res.authorization_token);\r\n            }\r\n            if (res.errors) {\r\n              errors = true;\r\n            }\r\n            config.hasErrors(errors);\r\n            callback(res);\r\n          }\r\n        );\r\n      }\r\n    };\r\n  }\r\n);\r\n","Klarna_Kp/js/view/payments.js":"/**\r\n * This file is part of the Klarna KP module\r\n *\r\n * (c) Klarna Bank AB (publ)\r\n *\r\n * For the full copyright and license information, please view the NOTICE\r\n * and LICENSE files that were distributed with this source code.\r\n */\r\ndefine(\r\n  [\r\n    'underscore',\r\n    'uiComponent',\r\n    'Magento_Checkout/js/model/payment/renderer-list',\r\n    'Klarna_Kp/js/model/config'\r\n  ],\r\n  function (_,\r\n            Component,\r\n            rendererList,\r\n            config) {\r\n    'use strict';\r\n    if (config.available_methods && _.isArray(config.available_methods)) {\r\n      config.available_methods.forEach(function (value) {\r\n        rendererList.push(value);\r\n      });\r\n    }\r\n    // Add view logic here if needed\r\n    return Component.extend({});\r\n  }\r\n);\r\n","Klarna_Kp/js/view/payments/kp.js":"/**\r\n * This file is part of the Klarna KP module\r\n *\r\n * (c) Klarna Bank AB (publ)\r\n *\r\n * For the full copyright and license information, please view the NOTICE\r\n * and LICENSE files that were distributed with this source code.\r\n */\r\ndefine(\r\n  [\r\n    'ko',\r\n    'jquery',\r\n    'mage/translate',\r\n    'Magento_Checkout/js/view/payment/default',\r\n    'Magento_Checkout/js/view/billing-address',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Checkout/js/action/set-payment-information',\r\n    'Klarna_Kp/js/model/config',\r\n    'Klarna_Kp/js/model/klarna',\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Klarna_Kp/js/view/payments',\r\n    'Klarna_Kp/js/model/debug'\r\n  ],\r\n  function (ko,\r\n            $,\r\n            $t,\r\n            Component,\r\n            billingAddress,\r\n            fullScreenLoader,\r\n            setPaymentInformationAction,\r\n            config,\r\n            klarna,\r\n            quote,\r\n            additionalValidators,\r\n            kp,\r\n            debug) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n      defaults: {\r\n        template: 'Klarna_Kp/payments/kp',\r\n        timeoutMessage: 'Sorry, but something went wrong. Please contact the seller.'\r\n      },\r\n      placeOrderHandler: null,\r\n      validateHandler: null,\r\n\r\n      isVisible: ko.observable(true),\r\n      isLoading: false,\r\n      isBillingSameAsShipping: true,\r\n      showButton: ko.observable(false),\r\n\r\n      checkPreSelect: function() {\r\n        if (this.getCode() === this.isChecked()) {\r\n          this.isLoading = false;\r\n          this.debounceKlarnaLoad();\r\n        }\r\n      },\r\n\r\n      getLogoUrl: function() {\r\n        return config.getLogo(this.getCategoryId());\r\n      },\r\n\r\n      /**\r\n       * @param {Object} handler\r\n       */\r\n      setPlaceOrderHandler: function (handler) {\r\n        this.placeOrderHandler = handler;\r\n      },\r\n\r\n      /**\r\n       * @param {Object} handler\r\n       */\r\n      setValidateHandler: function (handler) {\r\n        this.validateHandler = handler;\r\n      },\r\n\r\n      /**\r\n       * @returns {Object}\r\n       */\r\n      context: function () {\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       * @returns {Boolean}\r\n       */\r\n      isShowLegend: function () {\r\n        return true;\r\n      },\r\n\r\n      getTitle: function () {\r\n        return config.getTitle(this.getCategoryId());\r\n      },\r\n\r\n      /**\r\n       * Get data\r\n       * @returns {Object}\r\n       */\r\n      getData: function () {\r\n        return {\r\n          'method': this.item.method,\r\n          'additional_data': {\r\n            'method_title': this.getTitle(),\r\n            'logo': this.getLogoUrl(),\r\n            'authorization_token': config.authorization_token()\r\n          }\r\n        };\r\n      },\r\n\r\n      getCategoryId: function () {\r\n        // Strip off \"klarna_\"\r\n        return this.getCode().substr(7);\r\n      },\r\n\r\n      hasMessage: function () {\r\n        return config.message !== null || config.client_token === null || config.client_token === '';\r\n      },\r\n\r\n      getMessage: function () {\r\n        if (config.message !== null) {\r\n          return config.message;\r\n        }\r\n        return $t('An unknown error occurred. Please try another payment method');\r\n      },\r\n\r\n      getClientToken: function () {\r\n        return config.client_token;\r\n      },\r\n\r\n      getAuthorizationToken: function () {\r\n        return config.authorization_token();\r\n      },\r\n      initialize: function () {\r\n        var self = this;\r\n\r\n        this._super();\r\n\r\n        this.showButton(false);\r\n        if (this.hasMessage()) {\r\n          // Don't try to initialize Klarna\r\n          return;\r\n        }\r\n        klarna.init();\r\n        quote.paymentMethod.subscribe(function (value) {\r\n          self.isLoading = false;\r\n          if (value && value.method === self.getCode()) {\r\n            self.debounceKlarnaLoad();\r\n          }\r\n        });\r\n        config.hasErrors.subscribe(function (value) {\r\n          self.showButton(value);\r\n        });\r\n\r\n        billingAddress().isAddressSameAsShipping.subscribe(function (isSame) {\r\n          self.isBillingSameAsShipping = isSame;\r\n        });\r\n        quote.shippingAddress.subscribe(function () {\r\n          // MAGE-803: When billing and shipping are the same, both the shipping and billing listeners will be\r\n          // called with the shipping one called first. If we allow this to update KP in that case then the\r\n          // billing address will not match between Magento and Klarna as by the time it reaches here the address\r\n          // change will not have propagated to the billing address in the Magento quote and the billing listener\r\n          // will be blocked from updating KP as an update will already be in progress.\r\n          if (self.getCode() === self.isChecked() && !self.isBillingSameAsShipping) {\r\n            self.debounceKlarnaLoad();\r\n          }\r\n        });\r\n        quote.billingAddress.subscribe(function () {\r\n          if (self.getCode() === self.isChecked()) {\r\n            self.debounceKlarnaLoad();\r\n          }\r\n        });\r\n      },\r\n      getContainerId: function () {\r\n        return this.getCode().replace(new RegExp('_', 'g'), '-') + '-container';\r\n      },\r\n      selectPaymentMethod: function () {\r\n        this.isLoading = false;\r\n        this.debounceKlarnaLoad();\r\n        return this._super();\r\n      },\r\n      loadTimeout: null,\r\n      debounceKlarnaLoad: function () {\r\n        var self = this;\r\n        if (self.loadTimeout) {\r\n          clearTimeout(self.loadTimeout);\r\n        }\r\n        self.loadTimeout = setTimeout(function(){\r\n          self.loadKlarna();\r\n        }, 200);\r\n      },\r\n\r\n      loadKlarna: function () {\r\n        var self = this;\r\n\r\n        if (self.isLoading) {\r\n          return false;\r\n        }\r\n        self.isLoading = true;\r\n        try {\r\n          klarna.load(self.getCategoryId(), self.getContainerId(), function (res) {\r\n            debug.log(res);\r\n            self.showButton(res.show_form);\r\n            self.isLoading = false;\r\n          });\r\n          return true;\r\n        } catch (e) {\r\n          debug.log(e);\r\n          self.isLoading = false;\r\n          return false;\r\n        }\r\n      },\r\n      authorize: function () {\r\n        var self = this;\r\n\r\n        if (additionalValidators.validate()) {\r\n          self.showButton(false);\r\n          if (this.hasMessage()) {\r\n            return;\r\n          }\r\n          klarna.authorize(self.getCategoryId(), klarna.getUpdateData(), function (res) {\r\n            debug.log(res);\r\n            if (res.approved) {\r\n              if (res.finalize_required) {\r\n                self.finalize();\r\n                return;\r\n              }\r\n              self.placeOrder();\r\n            }\r\n\r\n            if (res.show_form === false) {\r\n              self.showButton(false);\r\n            } else {\r\n              self.showButton(true);\r\n            }\r\n\r\n          });\r\n        }\r\n      },\r\n      finalize: function () {\r\n        var self = this;\r\n\r\n        if (this.hasMessage()) {\r\n          self.showButton(false);\r\n          return;\r\n        }\r\n        klarna.finalize(self.getCategoryId(), klarna.getUpdateData(), function (res) {\r\n          debug.log(res);\r\n          if (res.approved) {\r\n            self.placeOrder();\r\n          }\r\n          self.showButton(true);\r\n        });\r\n\r\n      }\r\n    });\r\n  }\r\n);\r\n","knockoutjs/knockout-es5.js":"/*!\r\n * Knockout ES5 plugin - https://github.com/SteveSanderson/knockout-es5\r\n * Copyright (c) Steve Sanderson\r\n * MIT license\r\n */\r\n\r\n(function(global, undefined) {\r\n  'use strict';\r\n\r\n  var ko;\r\n\r\n  // Model tracking\r\n  // --------------\r\n  //\r\n  // This is the central feature of Knockout-ES5. We augment model objects by converting properties\r\n  // into ES5 getter/setter pairs that read/write an underlying Knockout observable. This means you can\r\n  // use plain JavaScript syntax to read/write the property while still getting the full benefits of\r\n  // Knockout's automatic dependency detection and notification triggering.\r\n  //\r\n  // For comparison, here's Knockout ES3-compatible syntax:\r\n  //\r\n  //     var firstNameLength = myModel.user().firstName().length; // Read\r\n  //     myModel.user().firstName('Bert'); // Write\r\n  //\r\n  // ... versus Knockout-ES5 syntax:\r\n  //\r\n  //     var firstNameLength = myModel.user.firstName.length; // Read\r\n  //     myModel.user.firstName = 'Bert'; // Write\r\n\r\n  // `ko.track(model)` converts each property on the given model object into a getter/setter pair that\r\n  // wraps a Knockout observable. Optionally specify an array of property names to wrap; otherwise we\r\n  // wrap all properties. If any of the properties are already observables, we replace them with\r\n  // ES5 getter/setter pairs that wrap your original observable instances. In the case of readonly\r\n  // ko.computed properties, we simply do not define a setter (so attempted writes will be ignored,\r\n  // which is how ES5 readonly properties normally behave).\r\n  //\r\n  // By design, this does *not* recursively walk child object properties, because making literally\r\n  // everything everywhere independently observable is usually unhelpful. When you do want to track\r\n  // child object properties independently, define your own class for those child objects and put\r\n  // a separate ko.track call into its constructor --- this gives you far more control.\r\n  /**\r\n   * @param {object} obj\r\n   * @param {object|array.<string>} propertyNamesOrSettings\r\n   * @param {boolean} propertyNamesOrSettings.deep Use deep track.\r\n   * @param {array.<string>} propertyNamesOrSettings.fields Array of property names to wrap.\r\n   * todo: @param {array.<string>} propertyNamesOrSettings.exclude Array of exclude property names to wrap.\r\n   * todo: @param {function(string, *):boolean} propertyNamesOrSettings.filter Function to filter property \r\n   *   names to wrap. A function that takes ... params\r\n   * @return {object}\r\n   */\r\n  function track(obj, propertyNamesOrSettings) {\r\n    if (!obj || typeof obj !== 'object') {\r\n      throw new Error('When calling ko.track, you must pass an object as the first parameter.');\r\n    }\r\n\r\n    var propertyNames;\r\n\r\n    if ( isPlainObject(propertyNamesOrSettings) ) {\r\n      // defaults\r\n      propertyNamesOrSettings.deep = propertyNamesOrSettings.deep || false;\r\n      propertyNamesOrSettings.fields = propertyNamesOrSettings.fields || Object.getOwnPropertyNames(obj);\r\n      propertyNamesOrSettings.lazy = propertyNamesOrSettings.lazy || false;\r\n\r\n      wrap(obj, propertyNamesOrSettings.fields, propertyNamesOrSettings);\r\n    } else {\r\n      propertyNames = propertyNamesOrSettings || Object.getOwnPropertyNames(obj);\r\n      wrap(obj, propertyNames, {});\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  // fix for ie\r\n  var rFunctionName = /^function\\s*([^\\s(]+)/;\r\n  function getFunctionName( ctor ){\r\n    if (ctor.name) {\r\n      return ctor.name;\r\n    }\r\n    return (ctor.toString().trim().match( rFunctionName ) || [])[1];\r\n  }\r\n\r\n  function canTrack(obj) {\r\n    return obj && typeof obj === 'object' && getFunctionName(obj.constructor) === 'Object';\r\n  }\r\n\r\n  function createPropertyDescriptor(originalValue, prop, map) {\r\n    var isObservable = ko.isObservable(originalValue);\r\n    var isArray = !isObservable && Array.isArray(originalValue);\r\n    var observable = isObservable ? originalValue\r\n        : isArray ? ko.observableArray(originalValue)\r\n        : ko.observable(originalValue);\r\n\r\n    map[prop] = function () { return observable; };\r\n\r\n    // add check in case the object is already an observable array\r\n    if (isArray || (isObservable && 'push' in observable)) {\r\n      notifyWhenPresentOrFutureArrayValuesMutate(ko, observable);\r\n    }\r\n\r\n    return {\r\n      configurable: true,\r\n      enumerable: true,\r\n      get: observable,\r\n      set: ko.isWriteableObservable(observable) ? observable : undefined\r\n    };\r\n  }\r\n\r\n  function createLazyPropertyDescriptor(originalValue, prop, map) {\r\n    if (ko.isObservable(originalValue)) {\r\n      // no need to be lazy if we already have an observable\r\n      return createPropertyDescriptor(originalValue, prop, map);\r\n    }\r\n\r\n    var observable;\r\n\r\n    function getOrCreateObservable(value, writing) {\r\n      if (observable) {\r\n        return writing ? observable(value) : observable;\r\n      }\r\n\r\n      if (Array.isArray(value)) {\r\n        observable = ko.observableArray(value);\r\n        notifyWhenPresentOrFutureArrayValuesMutate(ko, observable);\r\n        return observable;\r\n      }\r\n\r\n      return (observable = ko.observable(value));\r\n    }\r\n\r\n    map[prop] = function () { return getOrCreateObservable(originalValue); };\r\n    return {\r\n      configurable: true,\r\n      enumerable: true,\r\n      get: function () { return getOrCreateObservable(originalValue)(); },\r\n      set: function (value) { getOrCreateObservable(value, true); }\r\n    };\r\n  }\r\n\r\n  function wrap(obj, props, options) {\r\n    if (!props.length) {\r\n      return;\r\n    }\r\n\r\n    var allObservablesForObject = getAllObservablesForObject(obj, true);\r\n    var descriptors = {};\r\n\r\n    props.forEach(function (prop) {\r\n      // Skip properties that are already tracked\r\n      if (prop in allObservablesForObject) {\r\n        return;\r\n      }\r\n\r\n      // Skip properties where descriptor can't be redefined\r\n      if (Object.getOwnPropertyDescriptor(obj, prop).configurable === false){\r\n        return;\r\n      }\r\n\r\n      var originalValue = obj[prop];\r\n      descriptors[prop] = (options.lazy ? createLazyPropertyDescriptor : createPropertyDescriptor)\r\n        (originalValue, prop, allObservablesForObject);\r\n\r\n      if (options.deep && canTrack(originalValue)) {\r\n        wrap(originalValue, Object.keys(originalValue), options);\r\n      }\r\n    });\r\n\r\n    Object.defineProperties(obj, descriptors);\r\n  }\r\n\r\n  function isPlainObject( obj ){\r\n    return !!obj && typeof obj === 'object' && obj.constructor === Object;\r\n  }\r\n\r\n  // Lazily created by `getAllObservablesForObject` below. Has to be created lazily because the\r\n  // WeakMap factory isn't available until the module has finished loading (may be async).\r\n  var objectToObservableMap;\r\n\r\n  // Gets or creates the hidden internal key-value collection of observables corresponding to\r\n  // properties on the model object.\r\n  function getAllObservablesForObject(obj, createIfNotDefined) {\r\n    if (!objectToObservableMap) {\r\n      objectToObservableMap = weakMapFactory();\r\n    }\r\n\r\n    var result = objectToObservableMap.get(obj);\r\n    if (!result && createIfNotDefined) {\r\n      result = {};\r\n      objectToObservableMap.set(obj, result);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Removes the internal references to observables mapped to the specified properties\r\n  // or the entire object reference if no properties are passed in. This allows the\r\n  // observables to be replaced and tracked again.\r\n  function untrack(obj, propertyNames) {\r\n    if (!objectToObservableMap) {\r\n      return;\r\n    }\r\n\r\n    if (arguments.length === 1) {\r\n      objectToObservableMap['delete'](obj);\r\n    } else {\r\n      var allObservablesForObject = getAllObservablesForObject(obj, false);\r\n      if (allObservablesForObject) {\r\n        propertyNames.forEach(function(propertyName) {\r\n          delete allObservablesForObject[propertyName];\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Computed properties\r\n  // -------------------\r\n  //\r\n  // The preceding code is already sufficient to upgrade ko.computed model properties to ES5\r\n  // getter/setter pairs (or in the case of readonly ko.computed properties, just a getter).\r\n  // These then behave like a regular property with a getter function, except they are smarter:\r\n  // your evaluator is only invoked when one of its dependencies changes. The result is cached\r\n  // and used for all evaluations until the next time a dependency changes).\r\n  //\r\n  // However, instead of forcing developers to declare a ko.computed property explicitly, it's\r\n  // nice to offer a utility function that declares a computed getter directly.\r\n\r\n  // Implements `ko.defineProperty`\r\n  function defineComputedProperty(obj, propertyName, evaluatorOrOptions) {\r\n    var ko = this,\r\n      computedOptions = { owner: obj, deferEvaluation: true };\r\n\r\n    if (typeof evaluatorOrOptions === 'function') {\r\n      computedOptions.read = evaluatorOrOptions;\r\n    } else {\r\n      if ('value' in evaluatorOrOptions) {\r\n        throw new Error('For ko.defineProperty, you must not specify a \"value\" for the property. ' +\r\n                        'You must provide a \"get\" function.');\r\n      }\r\n\r\n      if (typeof evaluatorOrOptions.get !== 'function') {\r\n        throw new Error('For ko.defineProperty, the third parameter must be either an evaluator function, ' +\r\n                        'or an options object containing a function called \"get\".');\r\n      }\r\n\r\n      computedOptions.read = evaluatorOrOptions.get;\r\n      computedOptions.write = evaluatorOrOptions.set;\r\n    }\r\n\r\n    obj[propertyName] = ko.computed(computedOptions);\r\n    track.call(ko, obj, [propertyName]);\r\n    return obj;\r\n  }\r\n\r\n  // Array handling\r\n  // --------------\r\n  //\r\n  // Arrays are special, because unlike other property types, they have standard mutator functions\r\n  // (`push`/`pop`/`splice`/etc.) and it's desirable to trigger a change notification whenever one of\r\n  // those mutator functions is invoked.\r\n  //\r\n  // Traditionally, Knockout handles this by putting special versions of `push`/`pop`/etc. on observable\r\n  // arrays that mutate the underlying array and then trigger a notification. That approach doesn't\r\n  // work for Knockout-ES5 because properties now return the underlying arrays, so the mutator runs\r\n  // in the context of the underlying array, not any particular observable:\r\n  //\r\n  //     // Operates on the underlying array value\r\n  //     myModel.someCollection.push('New value');\r\n  //\r\n  // To solve this, Knockout-ES5 detects array values, and modifies them as follows:\r\n  //  1. Associates a hidden subscribable with each array instance that it encounters\r\n  //  2. Intercepts standard mutators (`push`/`pop`/etc.) and makes them trigger the subscribable\r\n  // Then, for model properties whose values are arrays, the property's underlying observable\r\n  // subscribes to the array subscribable, so it can trigger a change notification after mutation.\r\n\r\n  // Given an observable that underlies a model property, watch for any array value that might\r\n  // be assigned as the property value, and hook into its change events\r\n  function notifyWhenPresentOrFutureArrayValuesMutate(ko, observable) {\r\n    var watchingArraySubscription = null;\r\n    ko.computed(function () {\r\n      // Unsubscribe to any earlier array instance\r\n      if (watchingArraySubscription) {\r\n        watchingArraySubscription.dispose();\r\n        watchingArraySubscription = null;\r\n      }\r\n\r\n      // Subscribe to the new array instance\r\n      var newArrayInstance = observable();\r\n      if (newArrayInstance instanceof Array) {\r\n        watchingArraySubscription = startWatchingArrayInstance(ko, observable, newArrayInstance);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Listens for array mutations, and when they happen, cause the observable to fire notifications.\r\n  // This is used to make model properties of type array fire notifications when the array changes.\r\n  // Returns a subscribable that can later be disposed.\r\n  function startWatchingArrayInstance(ko, observable, arrayInstance) {\r\n    var subscribable = getSubscribableForArray(ko, arrayInstance);\r\n    return subscribable.subscribe(observable);\r\n  }\r\n\r\n  // Lazily created by `getSubscribableForArray` below. Has to be created lazily because the\r\n  // WeakMap factory isn't available until the module has finished loading (may be async).\r\n  var arraySubscribablesMap;\r\n\r\n  // Gets or creates a subscribable that fires after each array mutation\r\n  function getSubscribableForArray(ko, arrayInstance) {\r\n    if (!arraySubscribablesMap) {\r\n      arraySubscribablesMap = weakMapFactory();\r\n    }\r\n\r\n    var subscribable = arraySubscribablesMap.get(arrayInstance);\r\n    if (!subscribable) {\r\n      subscribable = new ko.subscribable();\r\n      arraySubscribablesMap.set(arrayInstance, subscribable);\r\n\r\n      var notificationPauseSignal = {};\r\n      wrapStandardArrayMutators(arrayInstance, subscribable, notificationPauseSignal);\r\n      addKnockoutArrayMutators(ko, arrayInstance, subscribable, notificationPauseSignal);\r\n    }\r\n\r\n    return subscribable;\r\n  }\r\n\r\n  // After each array mutation, fires a notification on the given subscribable\r\n  function wrapStandardArrayMutators(arrayInstance, subscribable, notificationPauseSignal) {\r\n    ['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'].forEach(function(fnName) {\r\n      var origMutator = arrayInstance[fnName];\r\n      arrayInstance[fnName] = function() {\r\n        var result = origMutator.apply(this, arguments);\r\n        if (notificationPauseSignal.pause !== true) {\r\n          subscribable.notifySubscribers(this);\r\n        }\r\n        return result;\r\n      };\r\n    });\r\n  }\r\n\r\n  // Adds Knockout's additional array mutation functions to the array\r\n  function addKnockoutArrayMutators(ko, arrayInstance, subscribable, notificationPauseSignal) {\r\n    ['remove', 'removeAll', 'destroy', 'destroyAll', 'replace'].forEach(function(fnName) {\r\n      // Make it a non-enumerable property for consistency with standard Array functions\r\n      Object.defineProperty(arrayInstance, fnName, {\r\n        enumerable: false,\r\n        value: function() {\r\n          var result;\r\n\r\n          // These additional array mutators are built using the underlying push/pop/etc.\r\n          // mutators, which are wrapped to trigger notifications. But we don't want to\r\n          // trigger multiple notifications, so pause the push/pop/etc. wrappers and\r\n          // delivery only one notification at the end of the process.\r\n          notificationPauseSignal.pause = true;\r\n          try {\r\n            // Creates a temporary observableArray that can perform the operation.\r\n            result = ko.observableArray.fn[fnName].apply(ko.observableArray(arrayInstance), arguments);\r\n          }\r\n          finally {\r\n            notificationPauseSignal.pause = false;\r\n          }\r\n          subscribable.notifySubscribers(arrayInstance);\r\n          return result;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // Static utility functions\r\n  // ------------------------\r\n  //\r\n  // Since Knockout-ES5 sets up properties that return values, not observables, you can't\r\n  // trivially subscribe to the underlying observables (e.g., `someProperty.subscribe(...)`),\r\n  // or tell them that object values have mutated, etc. To handle this, we set up some\r\n  // extra utility functions that can return or work with the underlying observables.\r\n\r\n  // Returns the underlying observable associated with a model property (or `null` if the\r\n  // model or property doesn't exist, or isn't associated with an observable). This means\r\n  // you can subscribe to the property, e.g.:\r\n  //\r\n  //     ko.getObservable(model, 'propertyName')\r\n  //       .subscribe(function(newValue) { ... });\r\n  function getObservable(obj, propertyName) {\r\n    if (!obj || typeof obj !== 'object') {\r\n      return null;\r\n    }\r\n\r\n    var allObservablesForObject = getAllObservablesForObject(obj, false);\r\n    if (allObservablesForObject && propertyName in allObservablesForObject) {\r\n      return allObservablesForObject[propertyName]();\r\n    }\r\n\r\n    return null;\r\n  }\r\n  \r\n  // Returns a boolean indicating whether the property on the object has an underlying\r\n  // observables. This does the check in a way not to create an observable if the\r\n  // object was created with lazily created observables\r\n  function isTracked(obj, propertyName) {\r\n    if (!obj || typeof obj !== 'object') {\r\n      return false;\r\n    }\r\n    \r\n    var allObservablesForObject = getAllObservablesForObject(obj, false);\r\n    return !!allObservablesForObject && propertyName in allObservablesForObject;\r\n  }\r\n\r\n  // Causes a property's associated observable to fire a change notification. Useful when\r\n  // the property value is a complex object and you've modified a child property.\r\n  function valueHasMutated(obj, propertyName) {\r\n    var observable = getObservable(obj, propertyName);\r\n\r\n    if (observable) {\r\n      observable.valueHasMutated();\r\n    }\r\n  }\r\n\r\n  // Module initialisation\r\n  // ---------------------\r\n  //\r\n  // When this script is first evaluated, it works out what kind of module loading scenario\r\n  // it is in (Node.js or a browser `<script>` tag), stashes a reference to its dependencies\r\n  // (currently that's just the WeakMap shim), and then finally attaches itself to whichever\r\n  // instance of Knockout.js it can find.\r\n\r\n  // A function that returns a new ES6-compatible WeakMap instance (using ES5 shim if needed).\r\n  // Instantiated by prepareExports, accounting for which module loader is being used.\r\n  var weakMapFactory;\r\n\r\n  // Extends a Knockout instance with Knockout-ES5 functionality\r\n  function attachToKo(ko) {\r\n    ko.track = track;\r\n    ko.untrack = untrack;\r\n    ko.getObservable = getObservable;\r\n    ko.valueHasMutated = valueHasMutated;\r\n    ko.defineProperty = defineComputedProperty;\r\n\r\n    // todo: test it, maybe added it to ko. directly\r\n    ko.es5 = {\r\n      getAllObservablesForObject: getAllObservablesForObject,\r\n      notifyWhenPresentOrFutureArrayValuesMutate: notifyWhenPresentOrFutureArrayValuesMutate,\r\n      isTracked: isTracked\r\n    };\r\n  }\r\n\r\n  // Determines which module loading scenario we're in, grabs dependencies, and attaches to KO\r\n  function prepareExports() {\r\n    if (typeof exports === 'object' && typeof module === 'object') {\r\n      // Node.js case - load KO and WeakMap modules synchronously\r\n      ko = require('knockout');\r\n      var WM = require('../lib/weakmap');\r\n      attachToKo(ko);\r\n      weakMapFactory = function() { return new WM(); };\r\n      module.exports = ko;\r\n    } else if (typeof define === 'function' && define.amd) {\r\n      define(['knockout'], function(koModule) {\r\n        ko = koModule;\r\n        attachToKo(koModule);\r\n        weakMapFactory = function() { return new global.WeakMap(); };\r\n        return koModule;\r\n      });\r\n    } else if ('ko' in global) {\r\n      // Non-module case - attach to the global instance, and assume a global WeakMap constructor\r\n      ko = global.ko;\r\n      attachToKo(global.ko);\r\n      weakMapFactory = function() { return new global.WeakMap(); };\r\n    }\r\n  }\r\n\r\n  prepareExports();\r\n\r\n})(this);","knockoutjs/knockout-fast-foreach.js":"/*!\r\n  Knockout Fast Foreach v0.4.1 (2015-07-17T14:06:15.974Z)\r\n  By: Brian M Hunt (C) 2015\r\n  License: MIT\r\n\r\n  Adds `fastForEach` to `ko.bindingHandlers`.\r\n*/\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(['knockout'], factory);\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory(require('knockout'));\r\n  } else {\r\n    root.KnockoutFastForeach = factory(root.ko);\r\n  }\r\n}(this, function (ko) {\r\n  \"use strict\";\r\n// index.js\r\n// --------\r\n// Fast For Each\r\n//\r\n// Employing sound techniques to make a faster Knockout foreach binding.\r\n// --------\r\n\r\n//      Utilities\r\n\r\n// from https://github.com/jonschlinkert/is-plain-object\r\nfunction isPlainObject(o) {\r\n  return !!o && typeof o === 'object' && o.constructor === Object;\r\n}\r\n\r\n// From knockout/src/virtualElements.js\r\nvar commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\r\nvar startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\r\nvar supportsDocumentFragment = document && typeof document.createDocumentFragment === \"function\";\r\nfunction isVirtualNode(node) {\r\n  return (node.nodeType === 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n}\r\n\r\n\r\n// Get a copy of the (possibly virtual) child nodes of the given element,\r\n// put them into a container, then empty the given node.\r\nfunction makeTemplateNode(sourceNode) {\r\n  var container = document.createElement(\"div\");\r\n  var parentNode;\r\n  if (sourceNode.content) {\r\n    // For e.g. <template> tags\r\n    parentNode = sourceNode.content;\r\n  } else if (sourceNode.tagName === 'SCRIPT') {\r\n    parentNode = document.createElement(\"div\");\r\n    parentNode.innerHTML = sourceNode.text;\r\n  } else {\r\n    // Anything else e.g. <div>\r\n    parentNode = sourceNode;\r\n  }\r\n  ko.utils.arrayForEach(ko.virtualElements.childNodes(parentNode), function (child) {\r\n    // FIXME - This cloneNode could be expensive; we may prefer to iterate over the\r\n    // parentNode children in reverse (so as not to foul the indexes as childNodes are\r\n    // removed from parentNode when inserted into the container)\r\n    if (child) {\r\n      container.insertBefore(child.cloneNode(true), null);\r\n    }\r\n  });\r\n  return container;\r\n}\r\n\r\nfunction insertAllAfter(containerNode, nodeOrNodeArrayToInsert, insertAfterNode) {\r\n  var frag, len, i;\r\n  // poor man's node and array check, should be enough for this\r\n  if (typeof nodeOrNodeArrayToInsert.nodeType !== \"undefined\" && typeof nodeOrNodeArrayToInsert.length === \"undefined\") {\r\n    throw new Error(\"Expected a single node or a node array\");\r\n  }\r\n\r\n  if (typeof nodeOrNodeArrayToInsert.nodeType !== \"undefined\") {\r\n    ko.virtualElements.insertAfter(containerNode, nodeOrNodeArrayToInsert, insertAfterNode);\r\n    return;\r\n  }\r\n\r\n  if (nodeOrNodeArrayToInsert.length === 1) {\r\n    ko.virtualElements.insertAfter(containerNode, nodeOrNodeArrayToInsert[0], insertAfterNode);\r\n    return;\r\n  }\r\n\r\n  if (supportsDocumentFragment) {\r\n    frag = document.createDocumentFragment();\r\n\r\n    for (i = 0, len = nodeOrNodeArrayToInsert.length; i !== len; ++i) {\r\n      frag.appendChild(nodeOrNodeArrayToInsert[i]);\r\n    }\r\n    ko.virtualElements.insertAfter(containerNode, frag, insertAfterNode);\r\n  } else {\r\n    // Nodes are inserted in reverse order - pushed down immediately after\r\n    // the last node for the previous item or as the first node of element.\r\n    for (i = nodeOrNodeArrayToInsert.length - 1; i >= 0; --i) {\r\n      var child = nodeOrNodeArrayToInsert[i];\r\n      if (!child) {\r\n        return;\r\n      }\r\n      ko.virtualElements.insertAfter(containerNode, child, insertAfterNode);\r\n    }\r\n  }\r\n}\r\n\r\n// Mimic a KO change item 'add'\r\nfunction valueToChangeAddItem(value, index) {\r\n  return {\r\n    status: 'added',\r\n    value: value,\r\n    index: index\r\n  };\r\n}\r\n\r\nfunction isAdditionAdjacentToLast(changeIndex, arrayChanges) {\r\n  return changeIndex > 0 &&\r\n    changeIndex < arrayChanges.length &&\r\n    arrayChanges[changeIndex].status === \"added\" &&\r\n    arrayChanges[changeIndex - 1].status === \"added\" &&\r\n    arrayChanges[changeIndex - 1].index === arrayChanges[changeIndex].index - 1;\r\n}\r\n\r\nfunction FastForEach(spec) {\r\n  this.element = spec.element;\r\n  this.container = isVirtualNode(this.element) ?\r\n                   this.element.parentNode : this.element;\r\n  this.$context = spec.$context;\r\n  this.data = spec.data;\r\n  this.as = spec.as;\r\n  this.noContext = spec.noContext;\r\n  this.templateNode = makeTemplateNode(\r\n    spec.name ? document.getElementById(spec.name).cloneNode(true) : spec.element\r\n  );\r\n  this.afterQueueFlush = spec.afterQueueFlush;\r\n  this.beforeQueueFlush = spec.beforeQueueFlush;\r\n  this.changeQueue = [];\r\n  this.lastNodesList = [];\r\n  this.indexesToDelete = [];\r\n  this.rendering_queued = false;\r\n\r\n  // Remove existing content.\r\n  ko.virtualElements.emptyNode(this.element);\r\n\r\n  // Prime content\r\n  var primeData = ko.unwrap(this.data);\r\n  if (primeData.map) {\r\n    this.onArrayChange(primeData.map(valueToChangeAddItem));\r\n  }\r\n\r\n  // Watch for changes\r\n  if (ko.isObservable(this.data)) {\r\n    if (!this.data.indexOf) {\r\n      // Make sure the observable is trackable.\r\n      this.data = this.data.extend({trackArrayChanges: true});\r\n    }\r\n    this.changeSubs = this.data.subscribe(this.onArrayChange, this, 'arrayChange');\r\n  }\r\n}\r\n\r\n\r\nFastForEach.animateFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame ||\r\n  window.mozRequestAnimationFrame || window.msRequestAnimationFrame ||\r\n  function(cb) { return window.setTimeout(cb, 1000 / 60); };\r\n\r\n\r\nFastForEach.prototype.dispose = function () {\r\n  if (this.changeSubs) {\r\n    this.changeSubs.dispose();\r\n  }\r\n};\r\n\r\n\r\n// If the array changes we register the change.\r\nFastForEach.prototype.onArrayChange = function (changeSet) {\r\n  var self = this;\r\n  var changeMap = {\r\n    added: [],\r\n    deleted: []\r\n  };\r\n  for (var i = 0, len = changeSet.length; i < len; i++) {\r\n    // the change is appended to a last change info object when both are 'added' and have indexes next to each other\r\n    // here I presume that ko is sending changes in monotonic order (in index variable) which happens to be true, tested with push and splice with multiple pushed values\r\n    if (isAdditionAdjacentToLast(i, changeSet)) {\r\n      var batchValues = changeMap.added[changeMap.added.length - 1].values;\r\n      if (!batchValues) {\r\n        // transform the last addition into a batch addition object\r\n        var lastAddition = changeMap.added.pop();\r\n        var batchAddition = {\r\n          isBatch: true,\r\n          status: 'added',\r\n          index: lastAddition.index,\r\n          values: [lastAddition.value]\r\n        };\r\n        batchValues = batchAddition.values;\r\n        changeMap.added.push(batchAddition);\r\n      }\r\n      batchValues.push(changeSet[i].value);\r\n    } else {\r\n      changeMap[changeSet[i].status].push(changeSet[i]);\r\n    }\r\n  }\r\n  if (changeMap.deleted.length > 0) {\r\n    this.changeQueue.push.apply(this.changeQueue, changeMap.deleted);\r\n    this.changeQueue.push({status: 'clearDeletedIndexes'});\r\n  }\r\n  this.changeQueue.push.apply(this.changeQueue, changeMap.added);\r\n  // Once a change is registered, the ticking count-down starts for the processQueue.\r\n  if (this.changeQueue.length > 0 && !this.rendering_queued) {\r\n    this.rendering_queued = true;\r\n    FastForEach.animateFrame.call(window, function () { self.processQueue(); });\r\n  }\r\n};\r\n\r\n\r\n// Reflect all the changes in the queue in the DOM, then wipe the queue.\r\nFastForEach.prototype.processQueue = function () {\r\n  var self = this;\r\n\r\n  // Callback so folks can do things before the queue flush.\r\n  if (typeof this.beforeQueueFlush === 'function') {\r\n    this.beforeQueueFlush(this.changeQueue);\r\n  }\r\n\r\n  ko.utils.arrayForEach(this.changeQueue, function (changeItem) {\r\n    // console.log(self.data(), \"CI\", JSON.stringify(changeItem, null, 2), JSON.stringify($(self.element).text()))\r\n    self[changeItem.status](changeItem);\r\n    // console.log(\"  ==> \", JSON.stringify($(self.element).text()))\r\n  });\r\n  this.rendering_queued = false;\r\n  // Callback so folks can do things.\r\n  if (typeof this.afterQueueFlush === 'function') {\r\n    this.afterQueueFlush(this.changeQueue);\r\n  }\r\n  this.changeQueue = [];\r\n};\r\n\r\n\r\n// Process a changeItem with {status: 'added', ...}\r\nFastForEach.prototype.added = function (changeItem) {\r\n  var index = changeItem.index;\r\n  var valuesToAdd = changeItem.isBatch ? changeItem.values : [changeItem.value];\r\n  var referenceElement = this.lastNodesList[index - 1] || null;\r\n  // gather all childnodes for a possible batch insertion\r\n  var allChildNodes = [];\r\n\r\n  for (var i = 0, len = valuesToAdd.length; i < len; ++i) {\r\n    var templateClone = this.templateNode.cloneNode(true);\r\n    var childContext;\r\n\r\n    if (this.noContext) {\r\n      childContext = this.$context.extend({\r\n        '$item': valuesToAdd[i]\r\n      });\r\n    } else {\r\n      childContext = this.$context.createChildContext(valuesToAdd[i], this.as || null);\r\n    }\r\n\r\n    // apply bindings first, and then process child nodes, because bindings can add childnodes\r\n    ko.applyBindingsToDescendants(childContext, templateClone);\r\n\r\n    var childNodes = ko.virtualElements.childNodes(templateClone);\r\n    // Note discussion at https://github.com/angular/angular.js/issues/7851\r\n    allChildNodes.push.apply(allChildNodes, Array.prototype.slice.call(childNodes));\r\n    this.lastNodesList.splice(index + i, 0, childNodes[childNodes.length - 1]);\r\n  }\r\n\r\n  insertAllAfter(this.element, allChildNodes, referenceElement);\r\n};\r\n\r\n\r\n// Process a changeItem with {status: 'deleted', ...}\r\nFastForEach.prototype.deleted = function (changeItem) {\r\n  var index = changeItem.index;\r\n  var ptr = this.lastNodesList[index],\r\n      // We use this.element because that will be the last previous node\r\n      // for virtual element lists.\r\n      lastNode = this.lastNodesList[index - 1] || this.element;\r\n  do {\r\n    ptr = ptr.previousSibling;\r\n    ko.removeNode((ptr && ptr.nextSibling) || ko.virtualElements.firstChild(this.element));\r\n  } while (ptr && ptr !== lastNode);\r\n  // The \"last node\" in the DOM from which we begin our delets of the next adjacent node is\r\n  // now the sibling that preceded the first node of this item.\r\n  this.lastNodesList[index] = this.lastNodesList[index - 1];\r\n  this.indexesToDelete.push(index);\r\n};\r\n\r\n\r\n// We batch our deletion of item indexes in our parallel array.\r\n// See brianmhunt/knockout-fast-foreach#6/#8\r\nFastForEach.prototype.clearDeletedIndexes = function () {\r\n  // We iterate in reverse on the presumption (following the unit tests) that KO's diff engine\r\n  // processes diffs (esp. deletes) monotonically ascending i.e. from index 0 -> N.\r\n  for (var i = this.indexesToDelete.length - 1; i >= 0; --i) {\r\n    this.lastNodesList.splice(this.indexesToDelete[i], 1);\r\n  }\r\n  this.indexesToDelete = [];\r\n};\r\n\r\n\r\nko.bindingHandlers.fastForEach = {\r\n  // Valid valueAccessors:\r\n  //    []\r\n  //    ko.observable([])\r\n  //    ko.observableArray([])\r\n  //    ko.computed\r\n  //    {data: array, name: string, as: string}\r\n  init: function init(element, valueAccessor, bindings, vm, context) {\r\n    var value = valueAccessor(),\r\n        ffe;\r\n    if (isPlainObject(value)) {\r\n      value.element = value.element || element;\r\n      value.$context = context;\r\n      ffe = new FastForEach(value);\r\n    } else {\r\n      ffe = new FastForEach({\r\n        element: element,\r\n        data: ko.unwrap(context.$rawData) === value ? context.$rawData : value,\r\n        $context: context\r\n      });\r\n    }\r\n    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n      ffe.dispose();\r\n    });\r\n    return {controlsDescendantBindings: true};\r\n  },\r\n\r\n  // Export for testing, debugging, and overloading.\r\n  FastForEach: FastForEach\r\n};\r\n\r\nko.virtualElements.allowedBindings.fastForEach = true;\r\n}));","knockoutjs/knockout-repeat.js":"// REPEAT binding for Knockout http://knockoutjs.com/\r\n// (c) Michael Best\r\n// License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n// Version 2.1.0\r\n\r\n(function(factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // [1] AMD anonymous module\r\n        define(['knockout'], factory);\r\n    } else if (typeof exports === 'object') {\r\n        // [2] commonJS\r\n        factory(require('knockout'));\r\n    } else {\r\n        // [3] No module loader (plain <script> tag) - put directly in global namespace\r\n        factory(window.ko);\r\n    }\r\n})(function(ko) {\r\n\r\nif (!ko.virtualElements)\r\n    throw Error('Repeat requires at least Knockout 2.1');\r\n\r\nvar ko_bindingFlags = ko.bindingFlags || {};\r\nvar ko_unwrap = ko.utils.unwrapObservable;\r\n\r\nvar koProtoName = '__ko_proto__';\r\n\r\nif (ko.version >= \"3.0.0\") {\r\n    // In Knockout 3.0.0, use the node preprocessor to replace a node with a repeat binding with a virtual element\r\n    var provider = ko.bindingProvider.instance, previousPreprocessFn = provider.preprocessNode;\r\n    provider.preprocessNode = function(node) {\r\n        var newNodes, nodeBinding;\r\n        if (!previousPreprocessFn || !(newNodes = previousPreprocessFn.call(this, node))) {\r\n            if (node.nodeType === 1 && (nodeBinding = node.getAttribute('data-bind'))) {\r\n                if (/^\\s*repeat\\s*:/.test(nodeBinding)) {\r\n                    var leadingComment = node.ownerDocument.createComment('ko ' + nodeBinding),\r\n                        trailingComment = node.ownerDocument.createComment('/ko');\r\n                    node.parentNode.insertBefore(leadingComment, node);\r\n                    node.parentNode.insertBefore(trailingComment, node.nextSibling);\r\n                    node.removeAttribute('data-bind');\r\n                    newNodes = [leadingComment, node, trailingComment];\r\n                }\r\n            }\r\n        }\r\n        return newNodes;\r\n    };\r\n}\r\n\r\nko.virtualElements.allowedBindings.repeat = true;\r\nko.bindingHandlers.repeat = {\r\n    flags: ko_bindingFlags.contentBind | ko_bindingFlags.canUseVirtual,\r\n    init: function(element, valueAccessor, allBindingsAccessor, xxx, bindingContext) {\r\n\r\n        // Read and set fixed options--these options cannot be changed\r\n        var repeatParam = ko_unwrap(valueAccessor());\r\n        if (repeatParam && typeof repeatParam == 'object' && !('length' in repeatParam)) {\r\n            var repeatIndex = repeatParam.index,\r\n                repeatData = repeatParam.item,\r\n                repeatStep = repeatParam.step,\r\n                repeatReversed = repeatParam.reverse,\r\n                repeatBind = repeatParam.bind,\r\n                repeatInit = repeatParam.init,\r\n                repeatUpdate = repeatParam.update;\r\n        }\r\n        // Set default values for options that need it\r\n        repeatIndex = repeatIndex || '$index';\r\n        repeatData = repeatData || ko.bindingHandlers.repeat.itemName || '$item';\r\n        repeatStep = repeatStep || 1;\r\n        repeatReversed = repeatReversed || false;\r\n\r\n        var parent = element.parentNode, placeholder;\r\n        if (element.nodeType == 8) {    // virtual element\r\n            // Extract the \"children\" and find the single element node\r\n            var childNodes = ko.utils.arrayFilter(ko.virtualElements.childNodes(element), function(node) { return node.nodeType == 1;});\r\n            if (childNodes.length !== 1) {\r\n                throw Error(\"Repeat binding requires a single element to repeat\");\r\n            }\r\n            ko.virtualElements.emptyNode(element);\r\n\r\n            // The placeholder is the closing comment normally, or the opening comment if reversed\r\n            placeholder = repeatReversed ? element : element.nextSibling;\r\n            // The element to repeat is the contained element\r\n            element = childNodes[0];\r\n        } else {    // regular element\r\n            // First clean the element node and remove node's binding\r\n            var origBindString = element.getAttribute('data-bind');\r\n            ko.cleanNode(element);\r\n            element.removeAttribute('data-bind');\r\n\r\n            // Original element is no longer needed: delete it and create a placeholder comment\r\n            placeholder = element.ownerDocument.createComment('ko_repeatplaceholder ' + origBindString);\r\n            parent.replaceChild(placeholder, element);\r\n        }\r\n\r\n        // extract and remove a data-repeat-bind attribute, if present\r\n        if (!repeatBind) {\r\n            repeatBind = element.getAttribute('data-repeat-bind');\r\n            if (repeatBind) {\r\n                element.removeAttribute('data-repeat-bind');\r\n            }\r\n        }\r\n\r\n        // Make a copy of the element node to be copied for each repetition\r\n        var cleanNode = element.cloneNode(true);\r\n        if (typeof repeatBind == \"string\") {\r\n            cleanNode.setAttribute('data-bind', repeatBind);\r\n            repeatBind = null;\r\n        }\r\n\r\n        // Set up persistent data\r\n        var lastRepeatCount = 0,\r\n            notificationObservable = ko.observable(),\r\n            repeatArray, arrayObservable;\r\n\r\n        if (repeatInit) {\r\n            repeatInit(parent);\r\n        }\r\n\r\n        var subscribable = ko.computed(function() {\r\n            function makeArrayItemAccessor(index) {\r\n                var f = function(newValue) {\r\n                    var item = repeatArray[index];\r\n                    // Reading the value of the item\r\n                    if (!arguments.length) {\r\n                        notificationObservable();   // for dependency tracking\r\n                        return ko_unwrap(item);\r\n                    }\r\n                    // Writing a value to the item\r\n                    if (ko.isObservable(item)) {\r\n                        item(newValue);\r\n                    } else if (arrayObservable && arrayObservable.splice) {\r\n                        arrayObservable.splice(index, 1, newValue);\r\n                    } else {\r\n                        repeatArray[index] = newValue;\r\n                    }\r\n                    return this;\r\n                };\r\n                // Pretend that our accessor function is an observable\r\n                f[koProtoName] = ko.observable;\r\n                return f;\r\n            }\r\n\r\n            function makeBinding(item, index, context) {\r\n                return repeatArray\r\n                    ? function() { return repeatBind.call(bindingContext.$data, item, index, context); }\r\n                    : function() { return repeatBind.call(bindingContext.$data, index, context); }\r\n            }\r\n\r\n            // Read and set up variable options--these options can change and will update the binding\r\n            var paramObservable = valueAccessor(), repeatParam = ko_unwrap(paramObservable), repeatCount = 0;\r\n            if (repeatParam && typeof repeatParam == 'object') {\r\n                if ('length' in repeatParam) {\r\n                    repeatArray = repeatParam;\r\n                    repeatCount = repeatArray.length;\r\n                } else {\r\n                    if ('foreach' in repeatParam) {\r\n                        repeatArray = ko_unwrap(paramObservable = repeatParam.foreach);\r\n                        if (repeatArray && typeof repeatArray == 'object' && 'length' in repeatArray) {\r\n                            repeatCount = repeatArray.length || 0;\r\n                        } else {\r\n                            repeatCount = repeatArray || 0;\r\n                            repeatArray = null;\r\n                        }\r\n                    }\r\n                    // If a count value is provided (>0), always output that number of items\r\n                    if ('count' in repeatParam)\r\n                        repeatCount = ko_unwrap(repeatParam.count) || repeatCount;\r\n                    // If a limit is provided, don't output more than the limit\r\n                    if ('limit' in repeatParam)\r\n                        repeatCount = Math.min(repeatCount, ko_unwrap(repeatParam.limit)) || repeatCount;\r\n                }\r\n                arrayObservable = repeatArray && ko.isObservable(paramObservable) ? paramObservable : null;\r\n            } else {\r\n                repeatCount = repeatParam || 0;\r\n            }\r\n\r\n            // Remove nodes from end if array is shorter\r\n            for (; lastRepeatCount > repeatCount; lastRepeatCount-=repeatStep) {\r\n                ko.removeNode(repeatReversed ? placeholder.nextSibling : placeholder.previousSibling);\r\n            }\r\n\r\n            // Notify existing nodes of change\r\n            notificationObservable.notifySubscribers();\r\n\r\n            // Add nodes to end if array is longer (also initially populates nodes)\r\n            for (; lastRepeatCount < repeatCount; lastRepeatCount+=repeatStep) {\r\n                // Clone node and add to document\r\n                var newNode = cleanNode.cloneNode(true);\r\n                parent.insertBefore(newNode, repeatReversed ? placeholder.nextSibling : placeholder);\r\n                newNode.setAttribute('data-repeat-index', lastRepeatCount);\r\n\r\n                // Apply bindings to inserted node\r\n                if (repeatArray && repeatData == '$data') {\r\n                    var newContext = bindingContext.createChildContext(makeArrayItemAccessor(lastRepeatCount));\r\n                } else {\r\n                    var newContext = bindingContext.extend();\r\n                    if (repeatArray)\r\n                        newContext[repeatData] = makeArrayItemAccessor(lastRepeatCount);\r\n                }\r\n                newContext[repeatIndex] = lastRepeatCount;\r\n                if (repeatBind) {\r\n                    var result = ko.applyBindingsToNode(newNode, makeBinding(newContext[repeatData], lastRepeatCount, newContext), newContext, true),\r\n                        shouldBindDescendants = result && result.shouldBindDescendants;\r\n                }\r\n                if (!repeatBind || (result && shouldBindDescendants !== false)) {\r\n                    ko.applyBindings(newContext, newNode);\r\n                }\r\n            }\r\n            if (repeatUpdate) {\r\n                repeatUpdate(parent);\r\n            }\r\n        }, null, {disposeWhenNodeIsRemoved: placeholder});\r\n\r\n        return { controlsDescendantBindings: true, subscribable: subscribable };\r\n    }\r\n};\r\n});","knockoutjs/knockout.js":"/*!\r\n * Knockout JavaScript library v3.4.2\r\n * (c) The Knockout.js team - http://knockoutjs.com/\r\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n */\r\n\r\n(function(){\r\nvar DEBUG=true;\r\n(function(undefined){\r\n    // (0, eval)('this') is a robust way of getting a reference to the global object\r\n    // For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\r\n    var window = this || (0, eval)('this'),\r\n        document = window['document'],\r\n        navigator = window['navigator'],\r\n        jQueryInstance = window[\"jQuery\"],\r\n        JSON = window[\"JSON\"];\r\n(function(factory) {\r\n    // Support three module loading scenarios\r\n    if (typeof define === 'function' && define['amd']) {\r\n        // [1] AMD anonymous module\r\n        define(['exports', 'require'], factory);\r\n    } else if (typeof exports === 'object' && typeof module === 'object') {\r\n        // [2] CommonJS/Node.js\r\n        factory(module['exports'] || exports);  // module.exports is for Node.js\r\n    } else {\r\n        // [3] No module loader (plain <script> tag) - put directly in global namespace\r\n        factory(window['ko'] = {});\r\n    }\r\n}(function(koExports, amdRequire){\r\n// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).\r\n// In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.\r\nvar ko = typeof koExports !== 'undefined' ? koExports : {};\r\n// Google Closure Compiler helpers (used only to make the minified file smaller)\r\nko.exportSymbol = function(koPath, object) {\r\n    var tokens = koPath.split(\".\");\r\n\r\n    // In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)\r\n    // At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)\r\n    var target = ko;\r\n\r\n    for (var i = 0; i < tokens.length - 1; i++)\r\n        target = target[tokens[i]];\r\n    target[tokens[tokens.length - 1]] = object;\r\n};\r\nko.exportProperty = function(owner, publicName, object) {\r\n    owner[publicName] = object;\r\n};\r\nko.version = \"3.4.2\";\r\n\r\nko.exportSymbol('version', ko.version);\r\n// For any options that may affect various areas of Knockout and aren't directly associated with data binding.\r\nko.options = {\r\n    'deferUpdates': false,\r\n    'useOnlyNativeEvents': false\r\n};\r\n\r\n//ko.exportSymbol('options', ko.options);   // 'options' isn't minified\r\nko.utils = (function () {\r\n    function objectForEach(obj, action) {\r\n        for (var prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                action(prop, obj[prop]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function extend(target, source) {\r\n        if (source) {\r\n            for(var prop in source) {\r\n                if(source.hasOwnProperty(prop)) {\r\n                    target[prop] = source[prop];\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function setPrototypeOf(obj, proto) {\r\n        obj.__proto__ = proto;\r\n        return obj;\r\n    }\r\n\r\n    var canSetPrototype = ({ __proto__: [] } instanceof Array);\r\n    var canUseSymbols = !DEBUG && typeof Symbol === 'function';\r\n\r\n    // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)\r\n    var knownEvents = {}, knownEventTypesByEventName = {};\r\n    var keyEventTypeName = (navigator && /Firefox\\/2/i.test(navigator.userAgent)) ? 'KeyboardEvent' : 'UIEvents';\r\n    knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];\r\n    knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\r\n    objectForEach(knownEvents, function(eventType, knownEventsForType) {\r\n        if (knownEventsForType.length) {\r\n            for (var i = 0, j = knownEventsForType.length; i < j; i++)\r\n                knownEventTypesByEventName[knownEventsForType[i]] = eventType;\r\n        }\r\n    });\r\n    var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406\r\n\r\n    // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)\r\n    // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.\r\n    // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.\r\n    // If there is a future need to detect specific versions of IE10+, we will amend this.\r\n    var ieVersion = document && (function() {\r\n        var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');\r\n\r\n        // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\r\n        while (\r\n            div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',\r\n            iElems[0]\r\n        ) {}\r\n        return version > 4 ? version : undefined;\r\n    }());\r\n    var isIe6 = ieVersion === 6,\r\n        isIe7 = ieVersion === 7;\r\n\r\n    function isClickOnCheckableElement(element, eventType) {\r\n        if ((ko.utils.tagNameLower(element) !== \"input\") || !element.type) return false;\r\n        if (eventType.toLowerCase() != \"click\") return false;\r\n        var inputType = element.type;\r\n        return (inputType == \"checkbox\") || (inputType == \"radio\");\r\n    }\r\n\r\n    // For details on the pattern for changing node classes\r\n    // see: https://github.com/knockout/knockout/issues/1597\r\n    var cssClassNameRegex = /\\S+/g;\r\n\r\n    function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {\r\n        var addOrRemoveFn;\r\n        if (classNames) {\r\n            if (typeof node.classList === 'object') {\r\n                addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];\r\n                ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n                    addOrRemoveFn.call(node.classList, className);\r\n                });\r\n            } else if (typeof node.className['baseVal'] === 'string') {\r\n                // SVG tag .classNames is an SVGAnimatedString instance\r\n                toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);\r\n            } else {\r\n                // node.className ought to be a string.\r\n                toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {\r\n        // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.\r\n        var currentClassNames = obj[prop].match(cssClassNameRegex) || [];\r\n        ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n            ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);\r\n        });\r\n        obj[prop] = currentClassNames.join(\" \");\r\n    }\r\n\r\n    return {\r\n        fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],\r\n\r\n        arrayForEach: function (array, action) {\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                action(array[i], i);\r\n        },\r\n\r\n        arrayIndexOf: function (array, item) {\r\n            if (typeof Array.prototype.indexOf == \"function\")\r\n                return Array.prototype.indexOf.call(array, item);\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (array[i] === item)\r\n                    return i;\r\n            return -1;\r\n        },\r\n\r\n        arrayFirst: function (array, predicate, predicateOwner) {\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (predicate.call(predicateOwner, array[i], i))\r\n                    return array[i];\r\n            return null;\r\n        },\r\n\r\n        arrayRemoveItem: function (array, itemToRemove) {\r\n            var index = ko.utils.arrayIndexOf(array, itemToRemove);\r\n            if (index > 0) {\r\n                array.splice(index, 1);\r\n            }\r\n            else if (index === 0) {\r\n                array.shift();\r\n            }\r\n        },\r\n\r\n        arrayGetDistinctValues: function (array) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++) {\r\n                if (ko.utils.arrayIndexOf(result, array[i]) < 0)\r\n                    result.push(array[i]);\r\n            }\r\n            return result;\r\n        },\r\n\r\n        arrayMap: function (array, mapping) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                result.push(mapping(array[i], i));\r\n            return result;\r\n        },\r\n\r\n        arrayFilter: function (array, predicate) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (predicate(array[i], i))\r\n                    result.push(array[i]);\r\n            return result;\r\n        },\r\n\r\n        arrayPushAll: function (array, valuesToPush) {\r\n            if (valuesToPush instanceof Array)\r\n                array.push.apply(array, valuesToPush);\r\n            else\r\n                for (var i = 0, j = valuesToPush.length; i < j; i++)\r\n                    array.push(valuesToPush[i]);\r\n            return array;\r\n        },\r\n\r\n        addOrRemoveItem: function(array, value, included) {\r\n            var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);\r\n            if (existingEntryIndex < 0) {\r\n                if (included)\r\n                    array.push(value);\r\n            } else {\r\n                if (!included)\r\n                    array.splice(existingEntryIndex, 1);\r\n            }\r\n        },\r\n\r\n        canSetPrototype: canSetPrototype,\r\n\r\n        extend: extend,\r\n\r\n        setPrototypeOf: setPrototypeOf,\r\n\r\n        setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,\r\n\r\n        objectForEach: objectForEach,\r\n\r\n        objectMap: function(source, mapping) {\r\n            if (!source)\r\n                return source;\r\n            var target = {};\r\n            for (var prop in source) {\r\n                if (source.hasOwnProperty(prop)) {\r\n                    target[prop] = mapping(source[prop], prop, source);\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n\r\n        emptyDomNode: function (domNode) {\r\n            while (domNode.firstChild) {\r\n                ko.removeNode(domNode.firstChild);\r\n            }\r\n        },\r\n\r\n        moveCleanedNodesToContainerElement: function(nodes) {\r\n            // Ensure it's a real array, as we're about to reparent the nodes and\r\n            // we don't want the underlying collection to change while we're doing that.\r\n            var nodesArray = ko.utils.makeArray(nodes);\r\n            var templateDocument = (nodesArray[0] && nodesArray[0].ownerDocument) || document;\r\n\r\n            var container = templateDocument.createElement('div');\r\n            for (var i = 0, j = nodesArray.length; i < j; i++) {\r\n                container.appendChild(ko.cleanNode(nodesArray[i]));\r\n            }\r\n            return container;\r\n        },\r\n\r\n        cloneNodes: function (nodesArray, shouldCleanNodes) {\r\n            for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {\r\n                var clonedNode = nodesArray[i].cloneNode(true);\r\n                newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);\r\n            }\r\n            return newNodesArray;\r\n        },\r\n\r\n        setDomNodeChildren: function (domNode, childNodes) {\r\n            ko.utils.emptyDomNode(domNode);\r\n            if (childNodes) {\r\n                for (var i = 0, j = childNodes.length; i < j; i++)\r\n                    domNode.appendChild(childNodes[i]);\r\n            }\r\n        },\r\n\r\n        replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {\r\n            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;\r\n            if (nodesToReplaceArray.length > 0) {\r\n                var insertionPoint = nodesToReplaceArray[0];\r\n                var parent = insertionPoint.parentNode;\r\n                for (var i = 0, j = newNodesArray.length; i < j; i++)\r\n                    parent.insertBefore(newNodesArray[i], insertionPoint);\r\n                for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {\r\n                    ko.removeNode(nodesToReplaceArray[i]);\r\n                }\r\n            }\r\n        },\r\n\r\n        fixUpContinuousNodeArray: function(continuousNodeArray, parentNode) {\r\n            // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile\r\n            // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that\r\n            // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been\r\n            // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.\r\n            // So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.\r\n            //\r\n            // Rules:\r\n            //   [A] Any leading nodes that have been removed should be ignored\r\n            //       These most likely correspond to memoization nodes that were already removed during binding\r\n            //       See https://github.com/knockout/knockout/pull/440\r\n            //   [B] Any trailing nodes that have been remove should be ignored\r\n            //       This prevents the code here from adding unrelated nodes to the array while processing rule [C]\r\n            //       See https://github.com/knockout/knockout/pull/1903\r\n            //   [C] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,\r\n            //       and include any nodes that have been inserted among the previous collection\r\n\r\n            if (continuousNodeArray.length) {\r\n                // The parent node can be a virtual element; so get the real parent node\r\n                parentNode = (parentNode.nodeType === 8 && parentNode.parentNode) || parentNode;\r\n\r\n                // Rule [A]\r\n                while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode)\r\n                    continuousNodeArray.splice(0, 1);\r\n\r\n                // Rule [B]\r\n                while (continuousNodeArray.length > 1 && continuousNodeArray[continuousNodeArray.length - 1].parentNode !== parentNode)\r\n                    continuousNodeArray.length--;\r\n\r\n                // Rule [C]\r\n                if (continuousNodeArray.length > 1) {\r\n                    var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];\r\n                    // Replace with the actual new continuous node set\r\n                    continuousNodeArray.length = 0;\r\n                    while (current !== last) {\r\n                        continuousNodeArray.push(current);\r\n                        current = current.nextSibling;\r\n                    }\r\n                    continuousNodeArray.push(last);\r\n                }\r\n            }\r\n            return continuousNodeArray;\r\n        },\r\n\r\n        setOptionNodeSelectionState: function (optionNode, isSelected) {\r\n            // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\r\n            if (ieVersion < 7)\r\n                optionNode.setAttribute(\"selected\", isSelected);\r\n            else\r\n                optionNode.selected = isSelected;\r\n        },\r\n\r\n        stringTrim: function (string) {\r\n            return string === null || string === undefined ? '' :\r\n                string.trim ?\r\n                    string.trim() :\r\n                    string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\r\n        },\r\n\r\n        stringStartsWith: function (string, startsWith) {\r\n            string = string || \"\";\r\n            if (startsWith.length > string.length)\r\n                return false;\r\n            return string.substring(0, startsWith.length) === startsWith;\r\n        },\r\n\r\n        domNodeIsContainedBy: function (node, containedByNode) {\r\n            if (node === containedByNode)\r\n                return true;\r\n            if (node.nodeType === 11)\r\n                return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8\r\n            if (containedByNode.contains)\r\n                return containedByNode.contains(node.nodeType === 3 ? node.parentNode : node);\r\n            if (containedByNode.compareDocumentPosition)\r\n                return (containedByNode.compareDocumentPosition(node) & 16) == 16;\r\n            while (node && node != containedByNode) {\r\n                node = node.parentNode;\r\n            }\r\n            return !!node;\r\n        },\r\n\r\n        domNodeIsAttachedToDocument: function (node) {\r\n            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);\r\n        },\r\n\r\n        anyDomNodeIsAttachedToDocument: function(nodes) {\r\n            return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);\r\n        },\r\n\r\n        tagNameLower: function(element) {\r\n            // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.\r\n            // Possible future optimization: If we know it's an element from an XHTML document (not HTML),\r\n            // we don't need to do the .toLowerCase() as it will always be lower case anyway.\r\n            return element && element.tagName && element.tagName.toLowerCase();\r\n        },\r\n\r\n        catchFunctionErrors: function (delegate) {\r\n            return ko['onError'] ? function () {\r\n                try {\r\n                    return delegate.apply(this, arguments);\r\n                } catch (e) {\r\n                    ko['onError'] && ko['onError'](e);\r\n                    throw e;\r\n                }\r\n            } : delegate;\r\n        },\r\n\r\n        setTimeout: function (handler, timeout) {\r\n            return setTimeout(ko.utils.catchFunctionErrors(handler), timeout);\r\n        },\r\n\r\n        deferError: function (error) {\r\n            setTimeout(function () {\r\n                ko['onError'] && ko['onError'](error);\r\n                throw error;\r\n            }, 0);\r\n        },\r\n\r\n        registerEventHandler: function (element, eventType, handler) {\r\n            var wrappedHandler = ko.utils.catchFunctionErrors(handler);\r\n\r\n            var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];\r\n            if (!ko.options['useOnlyNativeEvents'] && !mustUseAttachEvent && jQueryInstance) {\r\n                jQueryInstance(element)['bind'](eventType, wrappedHandler);\r\n            } else if (!mustUseAttachEvent && typeof element.addEventListener == \"function\")\r\n                element.addEventListener(eventType, wrappedHandler, false);\r\n            else if (typeof element.attachEvent != \"undefined\") {\r\n                var attachEventHandler = function (event) { wrappedHandler.call(element, event); },\r\n                    attachEventName = \"on\" + eventType;\r\n                element.attachEvent(attachEventName, attachEventHandler);\r\n\r\n                // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)\r\n                // so to avoid leaks, we have to remove them manually. See bug #856\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                    element.detachEvent(attachEventName, attachEventHandler);\r\n                });\r\n            } else\r\n                throw new Error(\"Browser doesn't support addEventListener or attachEvent\");\r\n        },\r\n\r\n        triggerEvent: function (element, eventType) {\r\n            if (!(element && element.nodeType))\r\n                throw new Error(\"element must be a DOM node when calling triggerEvent\");\r\n\r\n            // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the\r\n            // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)\r\n            // IE doesn't change the checked state when you trigger the click event using \"fireEvent\".\r\n            // In both cases, we'll use the click method instead.\r\n            var useClickWorkaround = isClickOnCheckableElement(element, eventType);\r\n\r\n            if (!ko.options['useOnlyNativeEvents'] && jQueryInstance && !useClickWorkaround) {\r\n                jQueryInstance(element)['trigger'](eventType);\r\n            } else if (typeof document.createEvent == \"function\") {\r\n                if (typeof element.dispatchEvent == \"function\") {\r\n                    var eventCategory = knownEventTypesByEventName[eventType] || \"HTMLEvents\";\r\n                    var event = document.createEvent(eventCategory);\r\n                    event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\r\n                    element.dispatchEvent(event);\r\n                }\r\n                else\r\n                    throw new Error(\"The supplied element doesn't support dispatchEvent\");\r\n            } else if (useClickWorkaround && element.click) {\r\n                element.click();\r\n            } else if (typeof element.fireEvent != \"undefined\") {\r\n                element.fireEvent(\"on\" + eventType);\r\n            } else {\r\n                throw new Error(\"Browser doesn't support triggering events\");\r\n            }\r\n        },\r\n\r\n        unwrapObservable: function (value) {\r\n            return ko.isObservable(value) ? value() : value;\r\n        },\r\n\r\n        peekObservable: function (value) {\r\n            return ko.isObservable(value) ? value.peek() : value;\r\n        },\r\n\r\n        toggleDomNodeCssClass: toggleDomNodeCssClass,\r\n\r\n        setTextContent: function(element, textContent) {\r\n            var value = ko.utils.unwrapObservable(textContent);\r\n            if ((value === null) || (value === undefined))\r\n                value = \"\";\r\n\r\n            // We need there to be exactly one child: a text node.\r\n            // If there are no children, more than one, or if it's not a text node,\r\n            // we'll clear everything and create a single text node.\r\n            var innerTextNode = ko.virtualElements.firstChild(element);\r\n            if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {\r\n                ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);\r\n            } else {\r\n                innerTextNode.data = value;\r\n            }\r\n\r\n            ko.utils.forceRefresh(element);\r\n        },\r\n\r\n        setElementName: function(element, name) {\r\n            element.name = name;\r\n        },\r\n\r\n        forceRefresh: function(node) {\r\n            // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209\r\n            if (ieVersion >= 9) {\r\n                // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container\r\n                var elem = node.nodeType == 1 ? node : node.parentNode;\r\n                if (elem.style)\r\n                    elem.style.zoom = elem.style.zoom;\r\n            }\r\n        },\r\n\r\n        ensureSelectElementIsRenderedCorrectly: function(selectElement) {\r\n            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\r\n            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\r\n            // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)\r\n            if (ieVersion) {\r\n                var originalWidth = selectElement.style.width;\r\n                selectElement.style.width = 0;\r\n                selectElement.style.width = originalWidth;\r\n            }\r\n        },\r\n\r\n        range: function (min, max) {\r\n            min = ko.utils.unwrapObservable(min);\r\n            max = ko.utils.unwrapObservable(max);\r\n            var result = [];\r\n            for (var i = min; i <= max; i++)\r\n                result.push(i);\r\n            return result;\r\n        },\r\n\r\n        makeArray: function(arrayLikeObject) {\r\n            var result = [];\r\n            for (var i = 0, j = arrayLikeObject.length; i < j; i++) {\r\n                result.push(arrayLikeObject[i]);\r\n            };\r\n            return result;\r\n        },\r\n\r\n        createSymbolOrString: function(identifier) {\r\n            return canUseSymbols ? Symbol(identifier) : identifier;\r\n        },\r\n\r\n        isIe6 : isIe6,\r\n        isIe7 : isIe7,\r\n        ieVersion : ieVersion,\r\n\r\n        getFormFields: function(form, fieldName) {\r\n            var fields = ko.utils.makeArray(form.getElementsByTagName(\"input\")).concat(ko.utils.makeArray(form.getElementsByTagName(\"textarea\")));\r\n            var isMatchingField = (typeof fieldName == 'string')\r\n                ? function(field) { return field.name === fieldName }\r\n                : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate\r\n            var matches = [];\r\n            for (var i = fields.length - 1; i >= 0; i--) {\r\n                if (isMatchingField(fields[i]))\r\n                    matches.push(fields[i]);\r\n            };\r\n            return matches;\r\n        },\r\n\r\n        parseJson: function (jsonString) {\r\n            if (typeof jsonString == \"string\") {\r\n                jsonString = ko.utils.stringTrim(jsonString);\r\n                if (jsonString) {\r\n                    if (JSON && JSON.parse) // Use native parsing where available\r\n                        return JSON.parse(jsonString);\r\n                    return (new Function(\"return \" + jsonString))(); // Fallback on less safe parsing for older browsers\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        stringifyJson: function (data, replacer, space) {   // replacer and space are optional\r\n            if (!JSON || !JSON.stringify)\r\n                throw new Error(\"Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\");\r\n            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);\r\n        },\r\n\r\n        postJson: function (urlOrForm, data, options) {\r\n            options = options || {};\r\n            var params = options['params'] || {};\r\n            var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;\r\n            var url = urlOrForm;\r\n\r\n            // If we were given a form, use its 'action' URL and pick out any requested field values\r\n            if((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === \"form\")) {\r\n                var originalForm = urlOrForm;\r\n                url = originalForm.action;\r\n                for (var i = includeFields.length - 1; i >= 0; i--) {\r\n                    var fields = ko.utils.getFormFields(originalForm, includeFields[i]);\r\n                    for (var j = fields.length - 1; j >= 0; j--)\r\n                        params[fields[j].name] = fields[j].value;\r\n                }\r\n            }\r\n\r\n            data = ko.utils.unwrapObservable(data);\r\n            var form = document.createElement(\"form\");\r\n            form.style.display = \"none\";\r\n            form.action = url;\r\n            form.method = \"post\";\r\n            for (var key in data) {\r\n                // Since 'data' this is a model object, we include all properties including those inherited from its prototype\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = key;\r\n                input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));\r\n                form.appendChild(input);\r\n            }\r\n            objectForEach(params, function(key, value) {\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = key;\r\n                input.value = value;\r\n                form.appendChild(input);\r\n            });\r\n            document.body.appendChild(form);\r\n            options['submitter'] ? options['submitter'](form) : form.submit();\r\n            setTimeout(function () { form.parentNode.removeChild(form); }, 0);\r\n        }\r\n    }\r\n}());\r\n\r\nko.exportSymbol('utils', ko.utils);\r\nko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);\r\nko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);\r\nko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);\r\nko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);\r\nko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);\r\nko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);\r\nko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);\r\nko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);\r\nko.exportSymbol('utils.extend', ko.utils.extend);\r\nko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);\r\nko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);\r\nko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);\r\nko.exportSymbol('utils.postJson', ko.utils.postJson);\r\nko.exportSymbol('utils.parseJson', ko.utils.parseJson);\r\nko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);\r\nko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);\r\nko.exportSymbol('utils.range', ko.utils.range);\r\nko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);\r\nko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);\r\nko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);\r\nko.exportSymbol('utils.objectForEach', ko.utils.objectForEach);\r\nko.exportSymbol('utils.addOrRemoveItem', ko.utils.addOrRemoveItem);\r\nko.exportSymbol('utils.setTextContent', ko.utils.setTextContent);\r\nko.exportSymbol('unwrap', ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly\r\n\r\nif (!Function.prototype['bind']) {\r\n    // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)\r\n    // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js\r\n    Function.prototype['bind'] = function (object) {\r\n        var originalFunction = this;\r\n        if (arguments.length === 1) {\r\n            return function () {\r\n                return originalFunction.apply(object, arguments);\r\n            };\r\n        } else {\r\n            var partialArgs = Array.prototype.slice.call(arguments, 1);\r\n            return function () {\r\n                var args = partialArgs.slice(0);\r\n                args.push.apply(args, arguments);\r\n                return originalFunction.apply(object, args);\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nko.utils.domData = new (function () {\r\n    var uniqueId = 0;\r\n    var dataStoreKeyExpandoPropertyName = \"__ko__\" + (new Date).getTime();\r\n    var dataStore = {};\r\n\r\n    function getAll(node, createIfNotFound) {\r\n        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n        var hasExistingDataStore = dataStoreKey && (dataStoreKey !== \"null\") && dataStore[dataStoreKey];\r\n        if (!hasExistingDataStore) {\r\n            if (!createIfNotFound)\r\n                return undefined;\r\n            dataStoreKey = node[dataStoreKeyExpandoPropertyName] = \"ko\" + uniqueId++;\r\n            dataStore[dataStoreKey] = {};\r\n        }\r\n        return dataStore[dataStoreKey];\r\n    }\r\n\r\n    return {\r\n        get: function (node, key) {\r\n            var allDataForNode = getAll(node, false);\r\n            return allDataForNode === undefined ? undefined : allDataForNode[key];\r\n        },\r\n        set: function (node, key, value) {\r\n            if (value === undefined) {\r\n                // Make sure we don't actually create a new domData key if we are actually deleting a value\r\n                if (getAll(node, false) === undefined)\r\n                    return;\r\n            }\r\n            var allDataForNode = getAll(node, true);\r\n            allDataForNode[key] = value;\r\n        },\r\n        clear: function (node) {\r\n            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n            if (dataStoreKey) {\r\n                delete dataStore[dataStoreKey];\r\n                node[dataStoreKeyExpandoPropertyName] = null;\r\n                return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\r\n            }\r\n            return false;\r\n        },\r\n\r\n        nextKey: function () {\r\n            return (uniqueId++) + dataStoreKeyExpandoPropertyName;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('utils.domData', ko.utils.domData);\r\nko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully\r\n\r\nko.utils.domNodeDisposal = new (function () {\r\n    var domDataKey = ko.utils.domData.nextKey();\r\n    var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document\r\n    var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document\r\n\r\n    function getDisposeCallbacksCollection(node, createIfNotFound) {\r\n        var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);\r\n        if ((allDisposeCallbacks === undefined) && createIfNotFound) {\r\n            allDisposeCallbacks = [];\r\n            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);\r\n        }\r\n        return allDisposeCallbacks;\r\n    }\r\n    function destroyCallbacksCollection(node) {\r\n        ko.utils.domData.set(node, domDataKey, undefined);\r\n    }\r\n\r\n    function cleanSingleNode(node) {\r\n        // Run all the dispose callbacks\r\n        var callbacks = getDisposeCallbacksCollection(node, false);\r\n        if (callbacks) {\r\n            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)\r\n            for (var i = 0; i < callbacks.length; i++)\r\n                callbacks[i](node);\r\n        }\r\n\r\n        // Erase the DOM data\r\n        ko.utils.domData.clear(node);\r\n\r\n        // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)\r\n        ko.utils.domNodeDisposal[\"cleanExternalData\"](node);\r\n\r\n        // Clear any immediate-child comment nodes, as these wouldn't have been found by\r\n        // node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren't elements)\r\n        if (cleanableNodeTypesWithDescendants[node.nodeType])\r\n            cleanImmediateCommentTypeChildren(node);\r\n    }\r\n\r\n    function cleanImmediateCommentTypeChildren(nodeWithChildren) {\r\n        var child, nextChild = nodeWithChildren.firstChild;\r\n        while (child = nextChild) {\r\n            nextChild = child.nextSibling;\r\n            if (child.nodeType === 8)\r\n                cleanSingleNode(child);\r\n        }\r\n    }\r\n\r\n    return {\r\n        addDisposeCallback : function(node, callback) {\r\n            if (typeof callback != \"function\")\r\n                throw new Error(\"Callback must be a function\");\r\n            getDisposeCallbacksCollection(node, true).push(callback);\r\n        },\r\n\r\n        removeDisposeCallback : function(node, callback) {\r\n            var callbacksCollection = getDisposeCallbacksCollection(node, false);\r\n            if (callbacksCollection) {\r\n                ko.utils.arrayRemoveItem(callbacksCollection, callback);\r\n                if (callbacksCollection.length == 0)\r\n                    destroyCallbacksCollection(node);\r\n            }\r\n        },\r\n\r\n        cleanNode : function(node) {\r\n            // First clean this node, where applicable\r\n            if (cleanableNodeTypes[node.nodeType]) {\r\n                cleanSingleNode(node);\r\n\r\n                // ... then its descendants, where applicable\r\n                if (cleanableNodeTypesWithDescendants[node.nodeType]) {\r\n                    // Clone the descendants list in case it changes during iteration\r\n                    var descendants = [];\r\n                    ko.utils.arrayPushAll(descendants, node.getElementsByTagName(\"*\"));\r\n                    for (var i = 0, j = descendants.length; i < j; i++)\r\n                        cleanSingleNode(descendants[i]);\r\n                }\r\n            }\r\n            return node;\r\n        },\r\n\r\n        removeNode : function(node) {\r\n            ko.cleanNode(node);\r\n            if (node.parentNode)\r\n                node.parentNode.removeChild(node);\r\n        },\r\n\r\n        \"cleanExternalData\" : function (node) {\r\n            // Special support for jQuery here because it's so commonly used.\r\n            // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData\r\n            // so notify it to tear down any resources associated with the node & descendants here.\r\n            if (jQueryInstance && (typeof jQueryInstance['cleanData'] == \"function\"))\r\n                jQueryInstance['cleanData']([node]);\r\n        }\r\n    };\r\n})();\r\nko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience\r\nko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience\r\nko.exportSymbol('cleanNode', ko.cleanNode);\r\nko.exportSymbol('removeNode', ko.removeNode);\r\nko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);\r\nko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);\r\nko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);\r\n(function () {\r\n    var none = [0, \"\", \"\"],\r\n        table = [1, \"<table>\", \"</table>\"],\r\n        tbody = [2, \"<table><tbody>\", \"</tbody></table>\"],\r\n        tr = [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\r\n        select = [1, \"<select multiple='multiple'>\", \"</select>\"],\r\n        lookup = {\r\n            'thead': table,\r\n            'tbody': table,\r\n            'tfoot': table,\r\n            'tr': tbody,\r\n            'td': tr,\r\n            'th': tr,\r\n            'option': select,\r\n            'optgroup': select\r\n        },\r\n\r\n        // This is needed for old IE if you're *not* using either jQuery or innerShiv. Doesn't affect other cases.\r\n        mayRequireCreateElementHack = ko.utils.ieVersion <= 8;\r\n\r\n    function getWrap(tags) {\r\n        var m = tags.match(/^<([a-z]+)[ >]/);\r\n        return (m && lookup[m[1]]) || none;\r\n    }\r\n\r\n    function simpleHtmlParse(html, documentContext) {\r\n        documentContext || (documentContext = document);\r\n        var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;\r\n\r\n        // Based on jQuery's \"clean\" function, but only accounting for table-related elements.\r\n        // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's \"clean\" function directly\r\n\r\n        // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of\r\n        // a descendant node. For example: \"<div><!-- mycomment -->abc</div>\" will get parsed as \"<div>abc</div>\"\r\n        // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node\r\n        // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.\r\n\r\n        // Trim whitespace, otherwise indexOf won't work as expected\r\n        var tags = ko.utils.stringTrim(html).toLowerCase(), div = documentContext.createElement(\"div\"),\r\n            wrap = getWrap(tags),\r\n            depth = wrap[0];\r\n\r\n        // Go to html and back, then peel off extra wrappers\r\n        // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.\r\n        var markup = \"ignored<div>\" + wrap[1] + html + wrap[2] + \"</div>\";\r\n        if (typeof windowContext['innerShiv'] == \"function\") {\r\n            // Note that innerShiv is deprecated in favour of html5shiv. We should consider adding\r\n            // support for html5shiv (except if no explicit support is needed, e.g., if html5shiv\r\n            // somehow shims the native APIs so it just works anyway)\r\n            div.appendChild(windowContext['innerShiv'](markup));\r\n        } else {\r\n            if (mayRequireCreateElementHack) {\r\n                // The document.createElement('my-element') trick to enable custom elements in IE6-8\r\n                // only works if we assign innerHTML on an element associated with that document.\r\n                documentContext.appendChild(div);\r\n            }\r\n\r\n            div.innerHTML = markup;\r\n\r\n            if (mayRequireCreateElementHack) {\r\n                div.parentNode.removeChild(div);\r\n            }\r\n        }\r\n\r\n        // Move to the right depth\r\n        while (depth--)\r\n            div = div.lastChild;\r\n\r\n        return ko.utils.makeArray(div.lastChild.childNodes);\r\n    }\r\n\r\n    function jQueryHtmlParse(html, documentContext) {\r\n        // jQuery's \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.\r\n        if (jQueryInstance['parseHTML']) {\r\n            return jQueryInstance['parseHTML'](html, documentContext) || []; // Ensure we always return an array and never null\r\n        } else {\r\n            // For jQuery < 1.8.0, we fall back on the undocumented internal \"clean\" function.\r\n            var elems = jQueryInstance['clean']([html], documentContext);\r\n\r\n            // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.\r\n            // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.\r\n            // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.\r\n            if (elems && elems[0]) {\r\n                // Find the top-most parent element that's a direct child of a document fragment\r\n                var elem = elems[0];\r\n                while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)\r\n                    elem = elem.parentNode;\r\n                // ... then detach it\r\n                if (elem.parentNode)\r\n                    elem.parentNode.removeChild(elem);\r\n            }\r\n\r\n            return elems;\r\n        }\r\n    }\r\n\r\n    ko.utils.parseHtmlFragment = function(html, documentContext) {\r\n        return jQueryInstance ?\r\n            jQueryHtmlParse(html, documentContext) :   // As below, benefit from jQuery's optimisations where possible\r\n            simpleHtmlParse(html, documentContext);  // ... otherwise, this simple logic will do in most common cases.\r\n    };\r\n\r\n    ko.utils.setHtml = function(node, html) {\r\n        ko.utils.emptyDomNode(node);\r\n\r\n        // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it\r\n        html = ko.utils.unwrapObservable(html);\r\n\r\n        if ((html !== null) && (html !== undefined)) {\r\n            if (typeof html != 'string')\r\n                html = html.toString();\r\n\r\n            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,\r\n            // for example <tr> elements which are not normally allowed to exist on their own.\r\n            // If you've referenced jQuery we'll use that rather than duplicating its code.\r\n            if (jQueryInstance) {\r\n                jQueryInstance(node)['html'](html);\r\n            } else {\r\n                // ... otherwise, use KO's own parsing logic.\r\n                var parsedNodes = ko.utils.parseHtmlFragment(html, node.ownerDocument);\r\n                for (var i = 0; i < parsedNodes.length; i++)\r\n                    node.appendChild(parsedNodes[i]);\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);\r\nko.exportSymbol('utils.setHtml', ko.utils.setHtml);\r\n\r\nko.memoization = (function () {\r\n    var memos = {};\r\n\r\n    function randomMax8HexChars() {\r\n        return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);\r\n    }\r\n    function generateRandomId() {\r\n        return randomMax8HexChars() + randomMax8HexChars();\r\n    }\r\n    function findMemoNodes(rootNode, appendToArray) {\r\n        if (!rootNode)\r\n            return;\r\n        if (rootNode.nodeType == 8) {\r\n            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);\r\n            if (memoId != null)\r\n                appendToArray.push({ domNode: rootNode, memoId: memoId });\r\n        } else if (rootNode.nodeType == 1) {\r\n            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)\r\n                findMemoNodes(childNodes[i], appendToArray);\r\n        }\r\n    }\r\n\r\n    return {\r\n        memoize: function (callback) {\r\n            if (typeof callback != \"function\")\r\n                throw new Error(\"You can only pass a function to ko.memoization.memoize()\");\r\n            var memoId = generateRandomId();\r\n            memos[memoId] = callback;\r\n            return \"<!--[ko_memo:\" + memoId + \"]-->\";\r\n        },\r\n\r\n        unmemoize: function (memoId, callbackParams) {\r\n            var callback = memos[memoId];\r\n            if (callback === undefined)\r\n                throw new Error(\"Couldn't find any memo with ID \" + memoId + \". Perhaps it's already been unmemoized.\");\r\n            try {\r\n                callback.apply(null, callbackParams || []);\r\n                return true;\r\n            }\r\n            finally { delete memos[memoId]; }\r\n        },\r\n\r\n        unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {\r\n            var memos = [];\r\n            findMemoNodes(domNode, memos);\r\n            for (var i = 0, j = memos.length; i < j; i++) {\r\n                var node = memos[i].domNode;\r\n                var combinedParams = [node];\r\n                if (extraCallbackParamsArray)\r\n                    ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);\r\n                ko.memoization.unmemoize(memos[i].memoId, combinedParams);\r\n                node.nodeValue = \"\"; // Neuter this node so we don't try to unmemoize it again\r\n                if (node.parentNode)\r\n                    node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)\r\n            }\r\n        },\r\n\r\n        parseMemoText: function (memoText) {\r\n            var match = memoText.match(/^\\[ko_memo\\:(.*?)\\]$/);\r\n            return match ? match[1] : null;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('memoization', ko.memoization);\r\nko.exportSymbol('memoization.memoize', ko.memoization.memoize);\r\nko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);\r\nko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);\r\nko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);\r\nko.tasks = (function () {\r\n    var scheduler,\r\n        taskQueue = [],\r\n        taskQueueLength = 0,\r\n        nextHandle = 1,\r\n        nextIndexToProcess = 0;\r\n\r\n    if (window['MutationObserver']) {\r\n        // Chrome 27+, Firefox 14+, IE 11+, Opera 15+, Safari 6.1+\r\n        // From https://github.com/petkaantonov/bluebird * Copyright (c) 2014 Petka Antonov * License: MIT\r\n        scheduler = (function (callback) {\r\n            var div = document.createElement(\"div\");\r\n            new MutationObserver(callback).observe(div, {attributes: true});\r\n            return function () { div.classList.toggle(\"foo\"); };\r\n        })(scheduledProcess);\r\n    } else if (document && \"onreadystatechange\" in document.createElement(\"script\")) {\r\n        // IE 6-10\r\n        // From https://github.com/YuzuJS/setImmediate * Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola * License: MIT\r\n        scheduler = function (callback) {\r\n            var script = document.createElement(\"script\");\r\n            script.onreadystatechange = function () {\r\n                script.onreadystatechange = null;\r\n                document.documentElement.removeChild(script);\r\n                script = null;\r\n                callback();\r\n            };\r\n            document.documentElement.appendChild(script);\r\n        };\r\n    } else {\r\n        scheduler = function (callback) {\r\n            setTimeout(callback, 0);\r\n        };\r\n    }\r\n\r\n    function processTasks() {\r\n        if (taskQueueLength) {\r\n            // Each mark represents the end of a logical group of tasks and the number of these groups is\r\n            // limited to prevent unchecked recursion.\r\n            var mark = taskQueueLength, countMarks = 0;\r\n\r\n            // nextIndexToProcess keeps track of where we are in the queue; processTasks can be called recursively without issue\r\n            for (var task; nextIndexToProcess < taskQueueLength; ) {\r\n                if (task = taskQueue[nextIndexToProcess++]) {\r\n                    if (nextIndexToProcess > mark) {\r\n                        if (++countMarks >= 5000) {\r\n                            nextIndexToProcess = taskQueueLength;   // skip all tasks remaining in the queue since any of them could be causing the recursion\r\n                            ko.utils.deferError(Error(\"'Too much recursion' after processing \" + countMarks + \" task groups.\"));\r\n                            break;\r\n                        }\r\n                        mark = taskQueueLength;\r\n                    }\r\n                    try {\r\n                        task();\r\n                    } catch (ex) {\r\n                        ko.utils.deferError(ex);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function scheduledProcess() {\r\n        processTasks();\r\n\r\n        // Reset the queue\r\n        nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\r\n    }\r\n\r\n    function scheduleTaskProcessing() {\r\n        ko.tasks['scheduler'](scheduledProcess);\r\n    }\r\n\r\n    var tasks = {\r\n        'scheduler': scheduler,     // Allow overriding the scheduler\r\n\r\n        schedule: function (func) {\r\n            if (!taskQueueLength) {\r\n                scheduleTaskProcessing();\r\n            }\r\n\r\n            taskQueue[taskQueueLength++] = func;\r\n            return nextHandle++;\r\n        },\r\n\r\n        cancel: function (handle) {\r\n            var index = handle - (nextHandle - taskQueueLength);\r\n            if (index >= nextIndexToProcess && index < taskQueueLength) {\r\n                taskQueue[index] = null;\r\n            }\r\n        },\r\n\r\n        // For testing only: reset the queue and return the previous queue length\r\n        'resetForTesting': function () {\r\n            var length = taskQueueLength - nextIndexToProcess;\r\n            nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\r\n            return length;\r\n        },\r\n\r\n        runEarly: processTasks\r\n    };\r\n\r\n    return tasks;\r\n})();\r\n\r\nko.exportSymbol('tasks', ko.tasks);\r\nko.exportSymbol('tasks.schedule', ko.tasks.schedule);\r\n//ko.exportSymbol('tasks.cancel', ko.tasks.cancel);  \"cancel\" isn't minified\r\nko.exportSymbol('tasks.runEarly', ko.tasks.runEarly);\r\nko.extenders = {\r\n    'throttle': function(target, timeout) {\r\n        // Throttling means two things:\r\n\r\n        // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies\r\n        //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate\r\n        target['throttleEvaluation'] = timeout;\r\n\r\n        // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*\r\n        //     so the target cannot change value synchronously or faster than a certain rate\r\n        var writeTimeoutInstance = null;\r\n        return ko.dependentObservable({\r\n            'read': target,\r\n            'write': function(value) {\r\n                clearTimeout(writeTimeoutInstance);\r\n                writeTimeoutInstance = ko.utils.setTimeout(function() {\r\n                    target(value);\r\n                }, timeout);\r\n            }\r\n        });\r\n    },\r\n\r\n    'rateLimit': function(target, options) {\r\n        var timeout, method, limitFunction;\r\n\r\n        if (typeof options == 'number') {\r\n            timeout = options;\r\n        } else {\r\n            timeout = options['timeout'];\r\n            method = options['method'];\r\n        }\r\n\r\n        // rateLimit supersedes deferred updates\r\n        target._deferUpdates = false;\r\n\r\n        limitFunction = method == 'notifyWhenChangesStop' ?  debounce : throttle;\r\n        target.limit(function(callback) {\r\n            return limitFunction(callback, timeout);\r\n        });\r\n    },\r\n\r\n    'deferred': function(target, options) {\r\n        if (options !== true) {\r\n            throw new Error('The \\'deferred\\' extender only accepts the value \\'true\\', because it is not supported to turn deferral off once enabled.')\r\n        }\r\n\r\n        if (!target._deferUpdates) {\r\n            target._deferUpdates = true;\r\n            target.limit(function (callback) {\r\n                var handle,\r\n                    ignoreUpdates = false;\r\n                return function () {\r\n                    if (!ignoreUpdates) {\r\n                        ko.tasks.cancel(handle);\r\n                        handle = ko.tasks.schedule(callback);\r\n\r\n                        try {\r\n                            ignoreUpdates = true;\r\n                            target['notifySubscribers'](undefined, 'dirty');\r\n                        } finally {\r\n                            ignoreUpdates = false;\r\n                        }\r\n                    }\r\n                };\r\n            });\r\n        }\r\n    },\r\n\r\n    'notify': function(target, notifyWhen) {\r\n        target[\"equalityComparer\"] = notifyWhen == \"always\" ?\r\n            null :  // null equalityComparer means to always notify\r\n            valuesArePrimitiveAndEqual;\r\n    }\r\n};\r\n\r\nvar primitiveTypes = { 'undefined':1, 'boolean':1, 'number':1, 'string':1 };\r\nfunction valuesArePrimitiveAndEqual(a, b) {\r\n    var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);\r\n    return oldValueIsPrimitive ? (a === b) : false;\r\n}\r\n\r\nfunction throttle(callback, timeout) {\r\n    var timeoutInstance;\r\n    return function () {\r\n        if (!timeoutInstance) {\r\n            timeoutInstance = ko.utils.setTimeout(function () {\r\n                timeoutInstance = undefined;\r\n                callback();\r\n            }, timeout);\r\n        }\r\n    };\r\n}\r\n\r\nfunction debounce(callback, timeout) {\r\n    var timeoutInstance;\r\n    return function () {\r\n        clearTimeout(timeoutInstance);\r\n        timeoutInstance = ko.utils.setTimeout(callback, timeout);\r\n    };\r\n}\r\n\r\nfunction applyExtenders(requestedExtenders) {\r\n    var target = this;\r\n    if (requestedExtenders) {\r\n        ko.utils.objectForEach(requestedExtenders, function(key, value) {\r\n            var extenderHandler = ko.extenders[key];\r\n            if (typeof extenderHandler == 'function') {\r\n                target = extenderHandler(target, value) || target;\r\n            }\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\nko.exportSymbol('extenders', ko.extenders);\r\n\r\nko.subscription = function (target, callback, disposeCallback) {\r\n    this._target = target;\r\n    this.callback = callback;\r\n    this.disposeCallback = disposeCallback;\r\n    this.isDisposed = false;\r\n    ko.exportProperty(this, 'dispose', this.dispose);\r\n};\r\nko.subscription.prototype.dispose = function () {\r\n    this.isDisposed = true;\r\n    this.disposeCallback();\r\n};\r\n\r\nko.subscribable = function () {\r\n    ko.utils.setPrototypeOfOrExtend(this, ko_subscribable_fn);\r\n    ko_subscribable_fn.init(this);\r\n}\r\n\r\nvar defaultEvent = \"change\";\r\n\r\n// Moved out of \"limit\" to avoid the extra closure\r\nfunction limitNotifySubscribers(value, event) {\r\n    if (!event || event === defaultEvent) {\r\n        this._limitChange(value);\r\n    } else if (event === 'beforeChange') {\r\n        this._limitBeforeChange(value);\r\n    } else {\r\n        this._origNotifySubscribers(value, event);\r\n    }\r\n}\r\n\r\nvar ko_subscribable_fn = {\r\n    init: function(instance) {\r\n        instance._subscriptions = { \"change\": [] };\r\n        instance._versionNumber = 1;\r\n    },\r\n\r\n    subscribe: function (callback, callbackTarget, event) {\r\n        var self = this;\r\n\r\n        event = event || defaultEvent;\r\n        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;\r\n\r\n        var subscription = new ko.subscription(self, boundCallback, function () {\r\n            ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);\r\n            if (self.afterSubscriptionRemove)\r\n                self.afterSubscriptionRemove(event);\r\n        });\r\n\r\n        if (self.beforeSubscriptionAdd)\r\n            self.beforeSubscriptionAdd(event);\r\n\r\n        if (!self._subscriptions[event])\r\n            self._subscriptions[event] = [];\r\n        self._subscriptions[event].push(subscription);\r\n\r\n        return subscription;\r\n    },\r\n\r\n    \"notifySubscribers\": function (valueToNotify, event) {\r\n        event = event || defaultEvent;\r\n        if (event === defaultEvent) {\r\n            this.updateVersion();\r\n        }\r\n        if (this.hasSubscriptionsForEvent(event)) {\r\n            var subs = event === defaultEvent && this._changeSubscriptions || this._subscriptions[event].slice(0);\r\n            try {\r\n                ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)\r\n                for (var i = 0, subscription; subscription = subs[i]; ++i) {\r\n                    // In case a subscription was disposed during the arrayForEach cycle, check\r\n                    // for isDisposed on each subscription before invoking its callback\r\n                    if (!subscription.isDisposed)\r\n                        subscription.callback(valueToNotify);\r\n                }\r\n            } finally {\r\n                ko.dependencyDetection.end(); // End suppressing dependency detection\r\n            }\r\n        }\r\n    },\r\n\r\n    getVersion: function () {\r\n        return this._versionNumber;\r\n    },\r\n\r\n    hasChanged: function (versionToCheck) {\r\n        return this.getVersion() !== versionToCheck;\r\n    },\r\n\r\n    updateVersion: function () {\r\n        ++this._versionNumber;\r\n    },\r\n\r\n    limit: function(limitFunction) {\r\n        var self = this, selfIsObservable = ko.isObservable(self),\r\n            ignoreBeforeChange, notifyNextChange, previousValue, pendingValue, beforeChange = 'beforeChange';\r\n\r\n        if (!self._origNotifySubscribers) {\r\n            self._origNotifySubscribers = self[\"notifySubscribers\"];\r\n            self[\"notifySubscribers\"] = limitNotifySubscribers;\r\n        }\r\n\r\n        var finish = limitFunction(function() {\r\n            self._notificationIsPending = false;\r\n\r\n            // If an observable provided a reference to itself, access it to get the latest value.\r\n            // This allows computed observables to delay calculating their value until needed.\r\n            if (selfIsObservable && pendingValue === self) {\r\n                pendingValue = self._evalIfChanged ? self._evalIfChanged() : self();\r\n            }\r\n            var shouldNotify = notifyNextChange || self.isDifferent(previousValue, pendingValue);\r\n\r\n            notifyNextChange = ignoreBeforeChange = false;\r\n\r\n            if (shouldNotify) {\r\n                self._origNotifySubscribers(previousValue = pendingValue);\r\n            }\r\n        });\r\n\r\n        self._limitChange = function(value) {\r\n            self._changeSubscriptions = self._subscriptions[defaultEvent].slice(0);\r\n            self._notificationIsPending = ignoreBeforeChange = true;\r\n            pendingValue = value;\r\n            finish();\r\n        };\r\n        self._limitBeforeChange = function(value) {\r\n            if (!ignoreBeforeChange) {\r\n                previousValue = value;\r\n                self._origNotifySubscribers(value, beforeChange);\r\n            }\r\n        };\r\n        self._notifyNextChangeIfValueIsDifferent = function() {\r\n            if (self.isDifferent(previousValue, self.peek(true /*evaluate*/))) {\r\n                notifyNextChange = true;\r\n            }\r\n        };\r\n    },\r\n\r\n    hasSubscriptionsForEvent: function(event) {\r\n        return this._subscriptions[event] && this._subscriptions[event].length;\r\n    },\r\n\r\n    getSubscriptionsCount: function (event) {\r\n        if (event) {\r\n            return this._subscriptions[event] && this._subscriptions[event].length || 0;\r\n        } else {\r\n            var total = 0;\r\n            ko.utils.objectForEach(this._subscriptions, function(eventName, subscriptions) {\r\n                if (eventName !== 'dirty')\r\n                    total += subscriptions.length;\r\n            });\r\n            return total;\r\n        }\r\n    },\r\n\r\n    isDifferent: function(oldValue, newValue) {\r\n        return !this['equalityComparer'] || !this['equalityComparer'](oldValue, newValue);\r\n    },\r\n\r\n    extend: applyExtenders\r\n};\r\n\r\nko.exportProperty(ko_subscribable_fn, 'subscribe', ko_subscribable_fn.subscribe);\r\nko.exportProperty(ko_subscribable_fn, 'extend', ko_subscribable_fn.extend);\r\nko.exportProperty(ko_subscribable_fn, 'getSubscriptionsCount', ko_subscribable_fn.getSubscriptionsCount);\r\n\r\n// For browsers that support proto assignment, we overwrite the prototype of each\r\n// observable instance. Since observables are functions, we need Function.prototype\r\n// to still be in the prototype chain.\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);\r\n}\r\n\r\nko.subscribable['fn'] = ko_subscribable_fn;\r\n\r\n\r\nko.isSubscribable = function (instance) {\r\n    return instance != null && typeof instance.subscribe == \"function\" && typeof instance[\"notifySubscribers\"] == \"function\";\r\n};\r\n\r\nko.exportSymbol('subscribable', ko.subscribable);\r\nko.exportSymbol('isSubscribable', ko.isSubscribable);\r\n\r\nko.computedContext = ko.dependencyDetection = (function () {\r\n    var outerFrames = [],\r\n        currentFrame,\r\n        lastId = 0;\r\n\r\n    // Return a unique ID that can be assigned to an observable for dependency tracking.\r\n    // Theoretically, you could eventually overflow the number storage size, resulting\r\n    // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\r\n    // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\r\n    // take over 285 years to reach that number.\r\n    // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\r\n    function getId() {\r\n        return ++lastId;\r\n    }\r\n\r\n    function begin(options) {\r\n        outerFrames.push(currentFrame);\r\n        currentFrame = options;\r\n    }\r\n\r\n    function end() {\r\n        currentFrame = outerFrames.pop();\r\n    }\r\n\r\n    return {\r\n        begin: begin,\r\n\r\n        end: end,\r\n\r\n        registerDependency: function (subscribable) {\r\n            if (currentFrame) {\r\n                if (!ko.isSubscribable(subscribable))\r\n                    throw new Error(\"Only subscribable things can act as dependencies\");\r\n                currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = getId()));\r\n            }\r\n        },\r\n\r\n        ignore: function (callback, callbackTarget, callbackArgs) {\r\n            try {\r\n                begin();\r\n                return callback.apply(callbackTarget, callbackArgs || []);\r\n            } finally {\r\n                end();\r\n            }\r\n        },\r\n\r\n        getDependenciesCount: function () {\r\n            if (currentFrame)\r\n                return currentFrame.computed.getDependenciesCount();\r\n        },\r\n\r\n        isInitial: function() {\r\n            if (currentFrame)\r\n                return currentFrame.isInitial;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('computedContext', ko.computedContext);\r\nko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);\r\nko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);\r\n\r\nko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);\r\nvar observableLatestValue = ko.utils.createSymbolOrString('_latestValue');\r\n\r\nko.observable = function (initialValue) {\r\n    function observable() {\r\n        if (arguments.length > 0) {\r\n            // Write\r\n\r\n            // Ignore writes if the value hasn't changed\r\n            if (observable.isDifferent(observable[observableLatestValue], arguments[0])) {\r\n                observable.valueWillMutate();\r\n                observable[observableLatestValue] = arguments[0];\r\n                observable.valueHasMutated();\r\n            }\r\n            return this; // Permits chained assignments\r\n        }\r\n        else {\r\n            // Read\r\n            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation\r\n            return observable[observableLatestValue];\r\n        }\r\n    }\r\n\r\n    observable[observableLatestValue] = initialValue;\r\n\r\n    // Inherit from 'subscribable'\r\n    if (!ko.utils.canSetPrototype) {\r\n        // 'subscribable' won't be on the prototype chain unless we put it there directly\r\n        ko.utils.extend(observable, ko.subscribable['fn']);\r\n    }\r\n    ko.subscribable['fn'].init(observable);\r\n\r\n    // Inherit from 'observable'\r\n    ko.utils.setPrototypeOfOrExtend(observable, observableFn);\r\n\r\n    if (ko.options['deferUpdates']) {\r\n        ko.extenders['deferred'](observable, true);\r\n    }\r\n\r\n    return observable;\r\n}\r\n\r\n// Define prototype for observables\r\nvar observableFn = {\r\n    'equalityComparer': valuesArePrimitiveAndEqual,\r\n    peek: function() { return this[observableLatestValue]; },\r\n    valueHasMutated: function () { this['notifySubscribers'](this[observableLatestValue]); },\r\n    valueWillMutate: function () { this['notifySubscribers'](this[observableLatestValue], 'beforeChange'); }\r\n};\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.observable constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(observableFn, ko.subscribable['fn']);\r\n}\r\n\r\nvar protoProperty = ko.observable.protoProperty = '__ko_proto__';\r\nobservableFn[protoProperty] = ko.observable;\r\n\r\nko.hasPrototype = function(instance, prototype) {\r\n    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;\r\n    if (instance[protoProperty] === prototype) return true;\r\n    return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain\r\n};\r\n\r\nko.isObservable = function (instance) {\r\n    return ko.hasPrototype(instance, ko.observable);\r\n}\r\nko.isWriteableObservable = function (instance) {\r\n    // Observable\r\n    if ((typeof instance == 'function') && instance[protoProperty] === ko.observable)\r\n        return true;\r\n    // Writeable dependent observable\r\n    if ((typeof instance == 'function') && (instance[protoProperty] === ko.dependentObservable) && (instance.hasWriteFunction))\r\n        return true;\r\n    // Anything else\r\n    return false;\r\n}\r\n\r\nko.exportSymbol('observable', ko.observable);\r\nko.exportSymbol('isObservable', ko.isObservable);\r\nko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);\r\nko.exportSymbol('isWritableObservable', ko.isWriteableObservable);\r\nko.exportSymbol('observable.fn', observableFn);\r\nko.exportProperty(observableFn, 'peek', observableFn.peek);\r\nko.exportProperty(observableFn, 'valueHasMutated', observableFn.valueHasMutated);\r\nko.exportProperty(observableFn, 'valueWillMutate', observableFn.valueWillMutate);\r\nko.observableArray = function (initialValues) {\r\n    initialValues = initialValues || [];\r\n\r\n    if (typeof initialValues != 'object' || !('length' in initialValues))\r\n        throw new Error(\"The argument passed when initializing an observable array must be an array, or null, or undefined.\");\r\n\r\n    var result = ko.observable(initialValues);\r\n    ko.utils.setPrototypeOfOrExtend(result, ko.observableArray['fn']);\r\n    return result.extend({'trackArrayChanges':true});\r\n};\r\n\r\nko.observableArray['fn'] = {\r\n    'remove': function (valueOrPredicate) {\r\n        var underlyingArray = this.peek();\r\n        var removedValues = [];\r\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n        for (var i = 0; i < underlyingArray.length; i++) {\r\n            var value = underlyingArray[i];\r\n            if (predicate(value)) {\r\n                if (removedValues.length === 0) {\r\n                    this.valueWillMutate();\r\n                }\r\n                removedValues.push(value);\r\n                underlyingArray.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        if (removedValues.length) {\r\n            this.valueHasMutated();\r\n        }\r\n        return removedValues;\r\n    },\r\n\r\n    'removeAll': function (arrayOfValues) {\r\n        // If you passed zero args, we remove everything\r\n        if (arrayOfValues === undefined) {\r\n            var underlyingArray = this.peek();\r\n            var allValues = underlyingArray.slice(0);\r\n            this.valueWillMutate();\r\n            underlyingArray.splice(0, underlyingArray.length);\r\n            this.valueHasMutated();\r\n            return allValues;\r\n        }\r\n        // If you passed an arg, we interpret it as an array of entries to remove\r\n        if (!arrayOfValues)\r\n            return [];\r\n        return this['remove'](function (value) {\r\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n        });\r\n    },\r\n\r\n    'destroy': function (valueOrPredicate) {\r\n        var underlyingArray = this.peek();\r\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n        this.valueWillMutate();\r\n        for (var i = underlyingArray.length - 1; i >= 0; i--) {\r\n            var value = underlyingArray[i];\r\n            if (predicate(value))\r\n                underlyingArray[i][\"_destroy\"] = true;\r\n        }\r\n        this.valueHasMutated();\r\n    },\r\n\r\n    'destroyAll': function (arrayOfValues) {\r\n        // If you passed zero args, we destroy everything\r\n        if (arrayOfValues === undefined)\r\n            return this['destroy'](function() { return true });\r\n\r\n        // If you passed an arg, we interpret it as an array of entries to destroy\r\n        if (!arrayOfValues)\r\n            return [];\r\n        return this['destroy'](function (value) {\r\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n        });\r\n    },\r\n\r\n    'indexOf': function (item) {\r\n        var underlyingArray = this();\r\n        return ko.utils.arrayIndexOf(underlyingArray, item);\r\n    },\r\n\r\n    'replace': function(oldItem, newItem) {\r\n        var index = this['indexOf'](oldItem);\r\n        if (index >= 0) {\r\n            this.valueWillMutate();\r\n            this.peek()[index] = newItem;\r\n            this.valueHasMutated();\r\n        }\r\n    }\r\n};\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.observableArray constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.observableArray['fn'], ko.observable['fn']);\r\n}\r\n\r\n// Populate ko.observableArray.fn with read/write functions from native arrays\r\n// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array\r\n// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale\r\nko.utils.arrayForEach([\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (methodName) {\r\n    ko.observableArray['fn'][methodName] = function () {\r\n        // Use \"peek\" to avoid creating a subscription in any computed that we're executing in the context of\r\n        // (for consistency with mutating regular observables)\r\n        var underlyingArray = this.peek();\r\n        this.valueWillMutate();\r\n        this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);\r\n        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);\r\n        this.valueHasMutated();\r\n        // The native sort and reverse methods return a reference to the array, but it makes more sense to return the observable array instead.\r\n        return methodCallResult === underlyingArray ? this : methodCallResult;\r\n    };\r\n});\r\n\r\n// Populate ko.observableArray.fn with read-only functions from native arrays\r\nko.utils.arrayForEach([\"slice\"], function (methodName) {\r\n    ko.observableArray['fn'][methodName] = function () {\r\n        var underlyingArray = this();\r\n        return underlyingArray[methodName].apply(underlyingArray, arguments);\r\n    };\r\n});\r\n\r\nko.exportSymbol('observableArray', ko.observableArray);\r\nvar arrayChangeEventName = 'arrayChange';\r\nko.extenders['trackArrayChanges'] = function(target, options) {\r\n    // Use the provided options--each call to trackArrayChanges overwrites the previously set options\r\n    target.compareArrayOptions = {};\r\n    if (options && typeof options == \"object\") {\r\n        ko.utils.extend(target.compareArrayOptions, options);\r\n    }\r\n    target.compareArrayOptions['sparse'] = true;\r\n\r\n    // Only modify the target observable once\r\n    if (target.cacheDiffForKnownOperation) {\r\n        return;\r\n    }\r\n    var trackingChanges = false,\r\n        cachedDiff = null,\r\n        arrayChangeSubscription,\r\n        pendingNotifications = 0,\r\n        underlyingNotifySubscribersFunction,\r\n        underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,\r\n        underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;\r\n\r\n    // Watch \"subscribe\" calls, and for array change events, ensure change tracking is enabled\r\n    target.beforeSubscriptionAdd = function (event) {\r\n        if (underlyingBeforeSubscriptionAddFunction)\r\n            underlyingBeforeSubscriptionAddFunction.call(target, event);\r\n        if (event === arrayChangeEventName) {\r\n            trackChanges();\r\n        }\r\n    };\r\n    // Watch \"dispose\" calls, and for array change events, ensure change tracking is disabled when all are disposed\r\n    target.afterSubscriptionRemove = function (event) {\r\n        if (underlyingAfterSubscriptionRemoveFunction)\r\n            underlyingAfterSubscriptionRemoveFunction.call(target, event);\r\n        if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n            if (underlyingNotifySubscribersFunction) {\r\n                target['notifySubscribers'] = underlyingNotifySubscribersFunction;\r\n                underlyingNotifySubscribersFunction = undefined;\r\n            }\r\n            arrayChangeSubscription.dispose();\r\n            trackingChanges = false;\r\n        }\r\n    };\r\n\r\n    function trackChanges() {\r\n        // Calling 'trackChanges' multiple times is the same as calling it once\r\n        if (trackingChanges) {\r\n            return;\r\n        }\r\n\r\n        trackingChanges = true;\r\n\r\n        // Intercept \"notifySubscribers\" to track how many times it was called.\r\n        underlyingNotifySubscribersFunction = target['notifySubscribers'];\r\n        target['notifySubscribers'] = function(valueToNotify, event) {\r\n            if (!event || event === defaultEvent) {\r\n                ++pendingNotifications;\r\n            }\r\n            return underlyingNotifySubscribersFunction.apply(this, arguments);\r\n        };\r\n\r\n        // Each time the array changes value, capture a clone so that on the next\r\n        // change it's possible to produce a diff\r\n        var previousContents = [].concat(target.peek() || []);\r\n        cachedDiff = null;\r\n        arrayChangeSubscription = target.subscribe(function(currentContents) {\r\n            // Make a copy of the current contents and ensure it's an array\r\n            currentContents = [].concat(currentContents || []);\r\n\r\n            // Compute the diff and issue notifications, but only if someone is listening\r\n            if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n                var changes = getChanges(previousContents, currentContents);\r\n            }\r\n\r\n            // Eliminate references to the old, removed items, so they can be GCed\r\n            previousContents = currentContents;\r\n            cachedDiff = null;\r\n            pendingNotifications = 0;\r\n\r\n            if (changes && changes.length) {\r\n                target['notifySubscribers'](changes, arrayChangeEventName);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getChanges(previousContents, currentContents) {\r\n        // We try to re-use cached diffs.\r\n        // The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates\r\n        // plugin, which without this check would not be compatible with arrayChange notifications. Normally,\r\n        // notifications are issued immediately so we wouldn't be queueing up more than one.\r\n        if (!cachedDiff || pendingNotifications > 1) {\r\n            cachedDiff = ko.utils.compareArrays(previousContents, currentContents, target.compareArrayOptions);\r\n        }\r\n\r\n        return cachedDiff;\r\n    }\r\n\r\n    target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {\r\n        // Only run if we're currently tracking changes for this observable array\r\n        // and there aren't any pending deferred notifications.\r\n        if (!trackingChanges || pendingNotifications) {\r\n            return;\r\n        }\r\n        var diff = [],\r\n            arrayLength = rawArray.length,\r\n            argsLength = args.length,\r\n            offset = 0;\r\n\r\n        function pushDiff(status, value, index) {\r\n            return diff[diff.length] = { 'status': status, 'value': value, 'index': index };\r\n        }\r\n        switch (operationName) {\r\n            case 'push':\r\n                offset = arrayLength;\r\n            case 'unshift':\r\n                for (var index = 0; index < argsLength; index++) {\r\n                    pushDiff('added', args[index], offset + index);\r\n                }\r\n                break;\r\n\r\n            case 'pop':\r\n                offset = arrayLength - 1;\r\n            case 'shift':\r\n                if (arrayLength) {\r\n                    pushDiff('deleted', rawArray[offset], offset);\r\n                }\r\n                break;\r\n\r\n            case 'splice':\r\n                // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].\r\n                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n                var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),\r\n                    endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),\r\n                    endAddIndex = startIndex + argsLength - 2,\r\n                    endIndex = Math.max(endDeleteIndex, endAddIndex),\r\n                    additions = [], deletions = [];\r\n                for (var index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {\r\n                    if (index < endDeleteIndex)\r\n                        deletions.push(pushDiff('deleted', rawArray[index], index));\r\n                    if (index < endAddIndex)\r\n                        additions.push(pushDiff('added', args[argsIndex], index));\r\n                }\r\n                ko.utils.findMovesInArrayComparison(deletions, additions);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n        cachedDiff = diff;\r\n    };\r\n};\r\nvar computedState = ko.utils.createSymbolOrString('_state');\r\n\r\nko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {\r\n    if (typeof evaluatorFunctionOrOptions === \"object\") {\r\n        // Single-parameter syntax - everything is on this \"options\" param\r\n        options = evaluatorFunctionOrOptions;\r\n    } else {\r\n        // Multi-parameter syntax - construct the options according to the params passed\r\n        options = options || {};\r\n        if (evaluatorFunctionOrOptions) {\r\n            options[\"read\"] = evaluatorFunctionOrOptions;\r\n        }\r\n    }\r\n    if (typeof options[\"read\"] != \"function\")\r\n        throw Error(\"Pass a function that returns the value of the ko.computed\");\r\n\r\n    var writeFunction = options[\"write\"];\r\n    var state = {\r\n        latestValue: undefined,\r\n        isStale: true,\r\n        isDirty: true,\r\n        isBeingEvaluated: false,\r\n        suppressDisposalUntilDisposeWhenReturnsFalse: false,\r\n        isDisposed: false,\r\n        pure: false,\r\n        isSleeping: false,\r\n        readFunction: options[\"read\"],\r\n        evaluatorFunctionTarget: evaluatorFunctionTarget || options[\"owner\"],\r\n        disposeWhenNodeIsRemoved: options[\"disposeWhenNodeIsRemoved\"] || options.disposeWhenNodeIsRemoved || null,\r\n        disposeWhen: options[\"disposeWhen\"] || options.disposeWhen,\r\n        domNodeDisposalCallback: null,\r\n        dependencyTracking: {},\r\n        dependenciesCount: 0,\r\n        evaluationTimeoutInstance: null\r\n    };\r\n\r\n    function computedObservable() {\r\n        if (arguments.length > 0) {\r\n            if (typeof writeFunction === \"function\") {\r\n                // Writing a value\r\n                writeFunction.apply(state.evaluatorFunctionTarget, arguments);\r\n            } else {\r\n                throw new Error(\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\");\r\n            }\r\n            return this; // Permits chained assignments\r\n        } else {\r\n            // Reading the value\r\n            ko.dependencyDetection.registerDependency(computedObservable);\r\n            if (state.isDirty || (state.isSleeping && computedObservable.haveDependenciesChanged())) {\r\n                computedObservable.evaluateImmediate();\r\n            }\r\n            return state.latestValue;\r\n        }\r\n    }\r\n\r\n    computedObservable[computedState] = state;\r\n    computedObservable.hasWriteFunction = typeof writeFunction === \"function\";\r\n\r\n    // Inherit from 'subscribable'\r\n    if (!ko.utils.canSetPrototype) {\r\n        // 'subscribable' won't be on the prototype chain unless we put it there directly\r\n        ko.utils.extend(computedObservable, ko.subscribable['fn']);\r\n    }\r\n    ko.subscribable['fn'].init(computedObservable);\r\n\r\n    // Inherit from 'computed'\r\n    ko.utils.setPrototypeOfOrExtend(computedObservable, computedFn);\r\n\r\n    if (options['pure']) {\r\n        state.pure = true;\r\n        state.isSleeping = true;     // Starts off sleeping; will awake on the first subscription\r\n        ko.utils.extend(computedObservable, pureComputedOverrides);\r\n    } else if (options['deferEvaluation']) {\r\n        ko.utils.extend(computedObservable, deferEvaluationOverrides);\r\n    }\r\n\r\n    if (ko.options['deferUpdates']) {\r\n        ko.extenders['deferred'](computedObservable, true);\r\n    }\r\n\r\n    if (DEBUG) {\r\n        // #1731 - Aid debugging by exposing the computed's options\r\n        computedObservable[\"_options\"] = options;\r\n    }\r\n\r\n    if (state.disposeWhenNodeIsRemoved) {\r\n        // Since this computed is associated with a DOM node, and we don't want to dispose the computed\r\n        // until the DOM node is *removed* from the document (as opposed to never having been in the document),\r\n        // we'll prevent disposal until \"disposeWhen\" first returns false.\r\n        state.suppressDisposalUntilDisposeWhenReturnsFalse = true;\r\n\r\n        // disposeWhenNodeIsRemoved: true can be used to opt into the \"only dispose after first false result\"\r\n        // behaviour even if there's no specific node to watch. In that case, clear the option so we don't try\r\n        // to watch for a non-node's disposal. This technique is intended for KO's internal use only and shouldn't\r\n        // be documented or used by application code, as it's likely to change in a future version of KO.\r\n        if (!state.disposeWhenNodeIsRemoved.nodeType) {\r\n            state.disposeWhenNodeIsRemoved = null;\r\n        }\r\n    }\r\n\r\n    // Evaluate, unless sleeping or deferEvaluation is true\r\n    if (!state.isSleeping && !options['deferEvaluation']) {\r\n        computedObservable.evaluateImmediate();\r\n    }\r\n\r\n    // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is\r\n    // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).\r\n    if (state.disposeWhenNodeIsRemoved && computedObservable.isActive()) {\r\n        ko.utils.domNodeDisposal.addDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback = function () {\r\n            computedObservable.dispose();\r\n        });\r\n    }\r\n\r\n    return computedObservable;\r\n};\r\n\r\n// Utility function that disposes a given dependencyTracking entry\r\nfunction computedDisposeDependencyCallback(id, entryToDispose) {\r\n    if (entryToDispose !== null && entryToDispose.dispose) {\r\n        entryToDispose.dispose();\r\n    }\r\n}\r\n\r\n// This function gets called each time a dependency is detected while evaluating a computed.\r\n// It's factored out as a shared function to avoid creating unnecessary function instances during evaluation.\r\nfunction computedBeginDependencyDetectionCallback(subscribable, id) {\r\n    var computedObservable = this.computedObservable,\r\n        state = computedObservable[computedState];\r\n    if (!state.isDisposed) {\r\n        if (this.disposalCount && this.disposalCandidates[id]) {\r\n            // Don't want to dispose this subscription, as it's still being used\r\n            computedObservable.addDependencyTracking(id, subscribable, this.disposalCandidates[id]);\r\n            this.disposalCandidates[id] = null; // No need to actually delete the property - disposalCandidates is a transient object anyway\r\n            --this.disposalCount;\r\n        } else if (!state.dependencyTracking[id]) {\r\n            // Brand new subscription - add it\r\n            computedObservable.addDependencyTracking(id, subscribable, state.isSleeping ? { _target: subscribable } : computedObservable.subscribeToDependency(subscribable));\r\n        }\r\n        // If the observable we've accessed has a pending notification, ensure we get notified of the actual final value (bypass equality checks)\r\n        if (subscribable._notificationIsPending) {\r\n            subscribable._notifyNextChangeIfValueIsDifferent();\r\n        }\r\n    }\r\n}\r\n\r\nvar computedFn = {\r\n    \"equalityComparer\": valuesArePrimitiveAndEqual,\r\n    getDependenciesCount: function () {\r\n        return this[computedState].dependenciesCount;\r\n    },\r\n    addDependencyTracking: function (id, target, trackingObj) {\r\n        if (this[computedState].pure && target === this) {\r\n            throw Error(\"A 'pure' computed must not be called recursively\");\r\n        }\r\n\r\n        this[computedState].dependencyTracking[id] = trackingObj;\r\n        trackingObj._order = this[computedState].dependenciesCount++;\r\n        trackingObj._version = target.getVersion();\r\n    },\r\n    haveDependenciesChanged: function () {\r\n        var id, dependency, dependencyTracking = this[computedState].dependencyTracking;\r\n        for (id in dependencyTracking) {\r\n            if (dependencyTracking.hasOwnProperty(id)) {\r\n                dependency = dependencyTracking[id];\r\n                if ((this._evalDelayed && dependency._target._notificationIsPending) || dependency._target.hasChanged(dependency._version)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    markDirty: function () {\r\n        // Process \"dirty\" events if we can handle delayed notifications\r\n        if (this._evalDelayed && !this[computedState].isBeingEvaluated) {\r\n            this._evalDelayed(false /*isChange*/);\r\n        }\r\n    },\r\n    isActive: function () {\r\n        var state = this[computedState];\r\n        return state.isDirty || state.dependenciesCount > 0;\r\n    },\r\n    respondToChange: function () {\r\n        // Ignore \"change\" events if we've already scheduled a delayed notification\r\n        if (!this._notificationIsPending) {\r\n            this.evaluatePossiblyAsync();\r\n        } else if (this[computedState].isDirty) {\r\n            this[computedState].isStale = true;\r\n        }\r\n    },\r\n    subscribeToDependency: function (target) {\r\n        if (target._deferUpdates && !this[computedState].disposeWhenNodeIsRemoved) {\r\n            var dirtySub = target.subscribe(this.markDirty, this, 'dirty'),\r\n                changeSub = target.subscribe(this.respondToChange, this);\r\n            return {\r\n                _target: target,\r\n                dispose: function () {\r\n                    dirtySub.dispose();\r\n                    changeSub.dispose();\r\n                }\r\n            };\r\n        } else {\r\n            return target.subscribe(this.evaluatePossiblyAsync, this);\r\n        }\r\n    },\r\n    evaluatePossiblyAsync: function () {\r\n        var computedObservable = this,\r\n            throttleEvaluationTimeout = computedObservable['throttleEvaluation'];\r\n        if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {\r\n            clearTimeout(this[computedState].evaluationTimeoutInstance);\r\n            this[computedState].evaluationTimeoutInstance = ko.utils.setTimeout(function () {\r\n                computedObservable.evaluateImmediate(true /*notifyChange*/);\r\n            }, throttleEvaluationTimeout);\r\n        } else if (computedObservable._evalDelayed) {\r\n            computedObservable._evalDelayed(true /*isChange*/);\r\n        } else {\r\n            computedObservable.evaluateImmediate(true /*notifyChange*/);\r\n        }\r\n    },\r\n    evaluateImmediate: function (notifyChange) {\r\n        var computedObservable = this,\r\n            state = computedObservable[computedState],\r\n            disposeWhen = state.disposeWhen,\r\n            changed = false;\r\n\r\n        if (state.isBeingEvaluated) {\r\n            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.\r\n            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost\r\n            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing\r\n            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387\r\n            return;\r\n        }\r\n\r\n        // Do not evaluate (and possibly capture new dependencies) if disposed\r\n        if (state.isDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (state.disposeWhenNodeIsRemoved && !ko.utils.domNodeIsAttachedToDocument(state.disposeWhenNodeIsRemoved) || disposeWhen && disposeWhen()) {\r\n            // See comment above about suppressDisposalUntilDisposeWhenReturnsFalse\r\n            if (!state.suppressDisposalUntilDisposeWhenReturnsFalse) {\r\n                computedObservable.dispose();\r\n                return;\r\n            }\r\n        } else {\r\n            // It just did return false, so we can stop suppressing now\r\n            state.suppressDisposalUntilDisposeWhenReturnsFalse = false;\r\n        }\r\n\r\n        state.isBeingEvaluated = true;\r\n        try {\r\n            changed = this.evaluateImmediate_CallReadWithDependencyDetection(notifyChange);\r\n        } finally {\r\n            state.isBeingEvaluated = false;\r\n        }\r\n\r\n        if (!state.dependenciesCount) {\r\n            computedObservable.dispose();\r\n        }\r\n\r\n        return changed;\r\n    },\r\n    evaluateImmediate_CallReadWithDependencyDetection: function (notifyChange) {\r\n        // This function is really just part of the evaluateImmediate logic. You would never call it from anywhere else.\r\n        // Factoring it out into a separate function means it can be independent of the try/catch block in evaluateImmediate,\r\n        // which contributes to saving about 40% off the CPU overhead of computed evaluation (on V8 at least).\r\n\r\n        var computedObservable = this,\r\n            state = computedObservable[computedState],\r\n            changed = false;\r\n\r\n        // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).\r\n        // Then, during evaluation, we cross off any that are in fact still being used.\r\n        var isInitial = state.pure ? undefined : !state.dependenciesCount,   // If we're evaluating when there are no previous dependencies, it must be the first time\r\n            dependencyDetectionContext = {\r\n                computedObservable: computedObservable,\r\n                disposalCandidates: state.dependencyTracking,\r\n                disposalCount: state.dependenciesCount\r\n            };\r\n\r\n        ko.dependencyDetection.begin({\r\n            callbackTarget: dependencyDetectionContext,\r\n            callback: computedBeginDependencyDetectionCallback,\r\n            computed: computedObservable,\r\n            isInitial: isInitial\r\n        });\r\n\r\n        state.dependencyTracking = {};\r\n        state.dependenciesCount = 0;\r\n\r\n        var newValue = this.evaluateImmediate_CallReadThenEndDependencyDetection(state, dependencyDetectionContext);\r\n\r\n        if (computedObservable.isDifferent(state.latestValue, newValue)) {\r\n            if (!state.isSleeping) {\r\n                computedObservable[\"notifySubscribers\"](state.latestValue, \"beforeChange\");\r\n            }\r\n\r\n            state.latestValue = newValue;\r\n            if (DEBUG) computedObservable._latestValue = newValue;\r\n\r\n            if (state.isSleeping) {\r\n                computedObservable.updateVersion();\r\n            } else if (notifyChange) {\r\n                computedObservable[\"notifySubscribers\"](state.latestValue);\r\n            }\r\n\r\n            changed = true;\r\n        }\r\n\r\n        if (isInitial) {\r\n            computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\r\n        }\r\n\r\n        return changed;\r\n    },\r\n    evaluateImmediate_CallReadThenEndDependencyDetection: function (state, dependencyDetectionContext) {\r\n        // This function is really part of the evaluateImmediate_CallReadWithDependencyDetection logic.\r\n        // You'd never call it from anywhere else. Factoring it out means that evaluateImmediate_CallReadWithDependencyDetection\r\n        // can be independent of try/finally blocks, which contributes to saving about 40% off the CPU\r\n        // overhead of computed evaluation (on V8 at least).\r\n\r\n        try {\r\n            var readFunction = state.readFunction;\r\n            return state.evaluatorFunctionTarget ? readFunction.call(state.evaluatorFunctionTarget) : readFunction();\r\n        } finally {\r\n            ko.dependencyDetection.end();\r\n\r\n            // For each subscription no longer being used, remove it from the active subscriptions list and dispose it\r\n            if (dependencyDetectionContext.disposalCount && !state.isSleeping) {\r\n                ko.utils.objectForEach(dependencyDetectionContext.disposalCandidates, computedDisposeDependencyCallback);\r\n            }\r\n\r\n            state.isStale = state.isDirty = false;\r\n        }\r\n    },\r\n    peek: function (evaluate) {\r\n        // By default, peek won't re-evaluate, except while the computed is sleeping or to get the initial value when \"deferEvaluation\" is set.\r\n        // Pass in true to evaluate if needed.\r\n        var state = this[computedState];\r\n        if ((state.isDirty && (evaluate || !state.dependenciesCount)) || (state.isSleeping && this.haveDependenciesChanged())) {\r\n            this.evaluateImmediate();\r\n        }\r\n        return state.latestValue;\r\n    },\r\n    limit: function (limitFunction) {\r\n        // Override the limit function with one that delays evaluation as well\r\n        ko.subscribable['fn'].limit.call(this, limitFunction);\r\n        this._evalIfChanged = function () {\r\n            if (this[computedState].isStale) {\r\n                this.evaluateImmediate();\r\n            } else {\r\n                this[computedState].isDirty = false;\r\n            }\r\n            return this[computedState].latestValue;\r\n        };\r\n        this._evalDelayed = function (isChange) {\r\n            this._limitBeforeChange(this[computedState].latestValue);\r\n\r\n            // Mark as dirty\r\n            this[computedState].isDirty = true;\r\n            if (isChange) {\r\n                this[computedState].isStale = true;\r\n            }\r\n\r\n            // Pass the observable to the \"limit\" code, which will evaluate it when\r\n            // it's time to do the notification.\r\n            this._limitChange(this);\r\n        };\r\n    },\r\n    dispose: function () {\r\n        var state = this[computedState];\r\n        if (!state.isSleeping && state.dependencyTracking) {\r\n            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                if (dependency.dispose)\r\n                    dependency.dispose();\r\n            });\r\n        }\r\n        if (state.disposeWhenNodeIsRemoved && state.domNodeDisposalCallback) {\r\n            ko.utils.domNodeDisposal.removeDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback);\r\n        }\r\n        state.dependencyTracking = null;\r\n        state.dependenciesCount = 0;\r\n        state.isDisposed = true;\r\n        state.isStale = false;\r\n        state.isDirty = false;\r\n        state.isSleeping = false;\r\n        state.disposeWhenNodeIsRemoved = null;\r\n    }\r\n};\r\n\r\nvar pureComputedOverrides = {\r\n    beforeSubscriptionAdd: function (event) {\r\n        // If asleep, wake up the computed by subscribing to any dependencies.\r\n        var computedObservable = this,\r\n            state = computedObservable[computedState];\r\n        if (!state.isDisposed && state.isSleeping && event == 'change') {\r\n            state.isSleeping = false;\r\n            if (state.isStale || computedObservable.haveDependenciesChanged()) {\r\n                state.dependencyTracking = null;\r\n                state.dependenciesCount = 0;\r\n                if (computedObservable.evaluateImmediate()) {\r\n                    computedObservable.updateVersion();\r\n                }\r\n            } else {\r\n                // First put the dependencies in order\r\n                var dependeciesOrder = [];\r\n                ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                    dependeciesOrder[dependency._order] = id;\r\n                });\r\n                // Next, subscribe to each one\r\n                ko.utils.arrayForEach(dependeciesOrder, function (id, order) {\r\n                    var dependency = state.dependencyTracking[id],\r\n                        subscription = computedObservable.subscribeToDependency(dependency._target);\r\n                    subscription._order = order;\r\n                    subscription._version = dependency._version;\r\n                    state.dependencyTracking[id] = subscription;\r\n                });\r\n            }\r\n            if (!state.isDisposed) {     // test since evaluating could trigger disposal\r\n                computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\r\n            }\r\n        }\r\n    },\r\n    afterSubscriptionRemove: function (event) {\r\n        var state = this[computedState];\r\n        if (!state.isDisposed && event == 'change' && !this.hasSubscriptionsForEvent('change')) {\r\n            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                if (dependency.dispose) {\r\n                    state.dependencyTracking[id] = {\r\n                        _target: dependency._target,\r\n                        _order: dependency._order,\r\n                        _version: dependency._version\r\n                    };\r\n                    dependency.dispose();\r\n                }\r\n            });\r\n            state.isSleeping = true;\r\n            this[\"notifySubscribers\"](undefined, \"asleep\");\r\n        }\r\n    },\r\n    getVersion: function () {\r\n        // Because a pure computed is not automatically updated while it is sleeping, we can't\r\n        // simply return the version number. Instead, we check if any of the dependencies have\r\n        // changed and conditionally re-evaluate the computed observable.\r\n        var state = this[computedState];\r\n        if (state.isSleeping && (state.isStale || this.haveDependenciesChanged())) {\r\n            this.evaluateImmediate();\r\n        }\r\n        return ko.subscribable['fn'].getVersion.call(this);\r\n    }\r\n};\r\n\r\nvar deferEvaluationOverrides = {\r\n    beforeSubscriptionAdd: function (event) {\r\n        // This will force a computed with deferEvaluation to evaluate when the first subscription is registered.\r\n        if (event == 'change' || event == 'beforeChange') {\r\n            this.peek();\r\n        }\r\n    }\r\n};\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.computed constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(computedFn, ko.subscribable['fn']);\r\n}\r\n\r\n// Set the proto chain values for ko.hasPrototype\r\nvar protoProp = ko.observable.protoProperty; // == \"__ko_proto__\"\r\nko.computed[protoProp] = ko.observable;\r\ncomputedFn[protoProp] = ko.computed;\r\n\r\nko.isComputed = function (instance) {\r\n    return ko.hasPrototype(instance, ko.computed);\r\n};\r\n\r\nko.isPureComputed = function (instance) {\r\n    return ko.hasPrototype(instance, ko.computed)\r\n        && instance[computedState] && instance[computedState].pure;\r\n};\r\n\r\nko.exportSymbol('computed', ko.computed);\r\nko.exportSymbol('dependentObservable', ko.computed);    // export ko.dependentObservable for backwards compatibility (1.x)\r\nko.exportSymbol('isComputed', ko.isComputed);\r\nko.exportSymbol('isPureComputed', ko.isPureComputed);\r\nko.exportSymbol('computed.fn', computedFn);\r\nko.exportProperty(computedFn, 'peek', computedFn.peek);\r\nko.exportProperty(computedFn, 'dispose', computedFn.dispose);\r\nko.exportProperty(computedFn, 'isActive', computedFn.isActive);\r\nko.exportProperty(computedFn, 'getDependenciesCount', computedFn.getDependenciesCount);\r\n\r\nko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {\r\n    if (typeof evaluatorFunctionOrOptions === 'function') {\r\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {'pure':true});\r\n    } else {\r\n        evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object\r\n        evaluatorFunctionOrOptions['pure'] = true;\r\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);\r\n    }\r\n}\r\nko.exportSymbol('pureComputed', ko.pureComputed);\r\n\r\n(function() {\r\n    var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)\r\n\r\n    ko.toJS = function(rootObject) {\r\n        if (arguments.length == 0)\r\n            throw new Error(\"When calling ko.toJS, pass the object you want to convert.\");\r\n\r\n        // We just unwrap everything at every level in the object graph\r\n        return mapJsObjectGraph(rootObject, function(valueToMap) {\r\n            // Loop because an observable's value might in turn be another observable wrapper\r\n            for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)\r\n                valueToMap = valueToMap();\r\n            return valueToMap;\r\n        });\r\n    };\r\n\r\n    ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional\r\n        var plainJavaScriptObject = ko.toJS(rootObject);\r\n        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);\r\n    };\r\n\r\n    function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {\r\n        visitedObjects = visitedObjects || new objectLookup();\r\n\r\n        rootObject = mapInputCallback(rootObject);\r\n        var canHaveProperties = (typeof rootObject == \"object\") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof RegExp)) && (!(rootObject instanceof Date)) && (!(rootObject instanceof String)) && (!(rootObject instanceof Number)) && (!(rootObject instanceof Boolean));\r\n        if (!canHaveProperties)\r\n            return rootObject;\r\n\r\n        var outputProperties = rootObject instanceof Array ? [] : {};\r\n        visitedObjects.save(rootObject, outputProperties);\r\n\r\n        visitPropertiesOrArrayEntries(rootObject, function(indexer) {\r\n            var propertyValue = mapInputCallback(rootObject[indexer]);\r\n\r\n            switch (typeof propertyValue) {\r\n                case \"boolean\":\r\n                case \"number\":\r\n                case \"string\":\r\n                case \"function\":\r\n                    outputProperties[indexer] = propertyValue;\r\n                    break;\r\n                case \"object\":\r\n                case \"undefined\":\r\n                    var previouslyMappedValue = visitedObjects.get(propertyValue);\r\n                    outputProperties[indexer] = (previouslyMappedValue !== undefined)\r\n                        ? previouslyMappedValue\r\n                        : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return outputProperties;\r\n    }\r\n\r\n    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\r\n        if (rootObject instanceof Array) {\r\n            for (var i = 0; i < rootObject.length; i++)\r\n                visitorCallback(i);\r\n\r\n            // For arrays, also respect toJSON property for custom mappings (fixes #278)\r\n            if (typeof rootObject['toJSON'] == 'function')\r\n                visitorCallback('toJSON');\r\n        } else {\r\n            for (var propertyName in rootObject) {\r\n                visitorCallback(propertyName);\r\n            }\r\n        }\r\n    };\r\n\r\n    function objectLookup() {\r\n        this.keys = [];\r\n        this.values = [];\r\n    };\r\n\r\n    objectLookup.prototype = {\r\n        constructor: objectLookup,\r\n        save: function(key, value) {\r\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n            if (existingIndex >= 0)\r\n                this.values[existingIndex] = value;\r\n            else {\r\n                this.keys.push(key);\r\n                this.values.push(value);\r\n            }\r\n        },\r\n        get: function(key) {\r\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n            return (existingIndex >= 0) ? this.values[existingIndex] : undefined;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('toJS', ko.toJS);\r\nko.exportSymbol('toJSON', ko.toJSON);\r\n(function () {\r\n    var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';\r\n\r\n    // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values\r\n    // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values\r\n    // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.\r\n    ko.selectExtensions = {\r\n        readValue : function(element) {\r\n            switch (ko.utils.tagNameLower(element)) {\r\n                case 'option':\r\n                    if (element[hasDomDataExpandoProperty] === true)\r\n                        return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);\r\n                    return ko.utils.ieVersion <= 7\r\n                        ? (element.getAttributeNode('value') && element.getAttributeNode('value').specified ? element.value : element.text)\r\n                        : element.value;\r\n                case 'select':\r\n                    return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;\r\n                default:\r\n                    return element.value;\r\n            }\r\n        },\r\n\r\n        writeValue: function(element, value, allowUnset) {\r\n            switch (ko.utils.tagNameLower(element)) {\r\n                case 'option':\r\n                    switch(typeof value) {\r\n                        case \"string\":\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);\r\n                            if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node\r\n                                delete element[hasDomDataExpandoProperty];\r\n                            }\r\n                            element.value = value;\r\n                            break;\r\n                        default:\r\n                            // Store arbitrary object using DomData\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);\r\n                            element[hasDomDataExpandoProperty] = true;\r\n\r\n                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.\r\n                            element.value = typeof value === \"number\" ? value : \"\";\r\n                            break;\r\n                    }\r\n                    break;\r\n                case 'select':\r\n                    if (value === \"\" || value === null)       // A blank string or null value will select the caption\r\n                        value = undefined;\r\n                    var selection = -1;\r\n                    for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {\r\n                        optionValue = ko.selectExtensions.readValue(element.options[i]);\r\n                        // Include special check to handle selecting a caption with a blank string value\r\n                        if (optionValue == value || (optionValue == \"\" && value === undefined)) {\r\n                            selection = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (allowUnset || selection >= 0 || (value === undefined && element.size > 1)) {\r\n                        element.selectedIndex = selection;\r\n                    }\r\n                    break;\r\n                default:\r\n                    if ((value === null) || (value === undefined))\r\n                        value = \"\";\r\n                    element.value = value;\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('selectExtensions', ko.selectExtensions);\r\nko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);\r\nko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);\r\nko.expressionRewriting = (function () {\r\n    var javaScriptReservedWords = [\"true\", \"false\", \"null\", \"undefined\"];\r\n\r\n    // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor\r\n    // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).\r\n    // This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).\r\n    var javaScriptAssignmentTarget = /^(?:[$_a-z][$\\w]*|(.+)(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i;\r\n\r\n    function getWriteableValue(expression) {\r\n        if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) >= 0)\r\n            return false;\r\n        var match = expression.match(javaScriptAssignmentTarget);\r\n        return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;\r\n    }\r\n\r\n    // The following regular expressions will be used to split an object-literal string into tokens\r\n\r\n        // These two match strings, either with double quotes or single quotes\r\n    var stringDouble = '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"',\r\n        stringSingle = \"'(?:[^'\\\\\\\\]|\\\\\\\\.)*'\",\r\n        // Matches a regular expression (text enclosed by slashes), but will also match sets of divisions\r\n        // as a regular expression (this is handled by the parsing loop below).\r\n        stringRegexp = '/(?:[^/\\\\\\\\]|\\\\\\\\.)*/\\w*',\r\n        // These characters have special meaning to the parser and must not appear in the middle of a\r\n        // token, except as part of a string.\r\n        specials = ',\"\\'{}()/:[\\\\]',\r\n        // Match text (at least two characters) that does not contain any of the above special characters,\r\n        // although some of the special characters are allowed to start it (all but the colon and comma).\r\n        // The text can contain spaces, but leading or trailing spaces are skipped.\r\n        everyThingElse = '[^\\\\s:,/][^' + specials + ']*[^\\\\s' + specials + ']',\r\n        // Match any non-space character not matched already. This will match colons and commas, since they're\r\n        // not matched by \"everyThingElse\", but will also match any other single character that wasn't already\r\n        // matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).\r\n        oneNotSpace = '[^\\\\s]',\r\n\r\n        // Create the actual regular expression by or-ing the above strings. The order is important.\r\n        bindingToken = RegExp(stringDouble + '|' + stringSingle + '|' + stringRegexp + '|' + everyThingElse + '|' + oneNotSpace, 'g'),\r\n\r\n        // Match end of previous token to determine whether a slash is a division or regex.\r\n        divisionLookBehind = /[\\])\"'A-Za-z0-9_$]+$/,\r\n        keywordRegexLookBehind = {'in':1,'return':1,'typeof':1};\r\n\r\n    function parseObjectLiteral(objectLiteralString) {\r\n        // Trim leading and trailing spaces from the string\r\n        var str = ko.utils.stringTrim(objectLiteralString);\r\n\r\n        // Trim braces '{' surrounding the whole object literal\r\n        if (str.charCodeAt(0) === 123) str = str.slice(1, -1);\r\n\r\n        // Split into tokens\r\n        var result = [], toks = str.match(bindingToken), key, values = [], depth = 0;\r\n\r\n        if (toks) {\r\n            // Append a comma so that we don't need a separate code block to deal with the last item\r\n            toks.push(',');\r\n\r\n            for (var i = 0, tok; tok = toks[i]; ++i) {\r\n                var c = tok.charCodeAt(0);\r\n                // A comma signals the end of a key/value pair if depth is zero\r\n                if (c === 44) { // \",\"\r\n                    if (depth <= 0) {\r\n                        result.push((key && values.length) ? {key: key, value: values.join('')} : {'unknown': key || values.join('')});\r\n                        key = depth = 0;\r\n                        values = [];\r\n                        continue;\r\n                    }\r\n                // Simply skip the colon that separates the name and value\r\n                } else if (c === 58) { // \":\"\r\n                    if (!depth && !key && values.length === 1) {\r\n                        key = values.pop();\r\n                        continue;\r\n                    }\r\n                // A set of slashes is initially matched as a regular expression, but could be division\r\n                } else if (c === 47 && i && tok.length > 1) {  // \"/\"\r\n                    // Look at the end of the previous token to determine if the slash is actually division\r\n                    var match = toks[i-1].match(divisionLookBehind);\r\n                    if (match && !keywordRegexLookBehind[match[0]]) {\r\n                        // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)\r\n                        str = str.substr(str.indexOf(tok) + 1);\r\n                        toks = str.match(bindingToken);\r\n                        toks.push(',');\r\n                        i = -1;\r\n                        // Continue with just the slash\r\n                        tok = '/';\r\n                    }\r\n                // Increment depth for parentheses, braces, and brackets so that interior commas are ignored\r\n                } else if (c === 40 || c === 123 || c === 91) { // '(', '{', '['\r\n                    ++depth;\r\n                } else if (c === 41 || c === 125 || c === 93) { // ')', '}', ']'\r\n                    --depth;\r\n                // The key will be the first token; if it's a string, trim the quotes\r\n                } else if (!key && !values.length && (c === 34 || c === 39)) { // '\"', \"'\"\r\n                    tok = tok.slice(1, -1);\r\n                }\r\n                values.push(tok);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.\r\n    var twoWayBindings = {};\r\n\r\n    function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {\r\n        bindingOptions = bindingOptions || {};\r\n\r\n        function processKeyValue(key, val) {\r\n            var writableVal;\r\n            function callPreprocessHook(obj) {\r\n                return (obj && obj['preprocess']) ? (val = obj['preprocess'](val, key, processKeyValue)) : true;\r\n            }\r\n            if (!bindingParams) {\r\n                if (!callPreprocessHook(ko['getBindingHandler'](key)))\r\n                    return;\r\n\r\n                if (twoWayBindings[key] && (writableVal = getWriteableValue(val))) {\r\n                    // For two-way bindings, provide a write method in case the value\r\n                    // isn't a writable observable.\r\n                    propertyAccessorResultStrings.push(\"'\" + key + \"':function(_z){\" + writableVal + \"=_z}\");\r\n                }\r\n            }\r\n            // Values are wrapped in a function so that each value can be accessed independently\r\n            if (makeValueAccessors) {\r\n                val = 'function(){return ' + val + ' }';\r\n            }\r\n            resultStrings.push(\"'\" + key + \"':\" + val);\r\n        }\r\n\r\n        var resultStrings = [],\r\n            propertyAccessorResultStrings = [],\r\n            makeValueAccessors = bindingOptions['valueAccessors'],\r\n            bindingParams = bindingOptions['bindingParams'],\r\n            keyValueArray = typeof bindingsStringOrKeyValueArray === \"string\" ?\r\n                parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;\r\n\r\n        ko.utils.arrayForEach(keyValueArray, function(keyValue) {\r\n            processKeyValue(keyValue.key || keyValue['unknown'], keyValue.value);\r\n        });\r\n\r\n        if (propertyAccessorResultStrings.length)\r\n            processKeyValue('_ko_property_writers', \"{\" + propertyAccessorResultStrings.join(\",\") + \" }\");\r\n\r\n        return resultStrings.join(\",\");\r\n    }\r\n\r\n    return {\r\n        bindingRewriteValidators: [],\r\n\r\n        twoWayBindings: twoWayBindings,\r\n\r\n        parseObjectLiteral: parseObjectLiteral,\r\n\r\n        preProcessBindings: preProcessBindings,\r\n\r\n        keyValueArrayContainsKey: function(keyValueArray, key) {\r\n            for (var i = 0; i < keyValueArray.length; i++)\r\n                if (keyValueArray[i]['key'] == key)\r\n                    return true;\r\n            return false;\r\n        },\r\n\r\n        // Internal, private KO utility for updating model properties from within bindings\r\n        // property:            If the property being updated is (or might be) an observable, pass it here\r\n        //                      If it turns out to be a writable observable, it will be written to directly\r\n        // allBindings:         An object with a get method to retrieve bindings in the current execution context.\r\n        //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable\r\n        // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'\r\n        // value:               The value to be written\r\n        // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if\r\n        //                      it is !== existing value on that writable observable\r\n        writeValueToProperty: function(property, allBindings, key, value, checkIfDifferent) {\r\n            if (!property || !ko.isObservable(property)) {\r\n                var propWriters = allBindings.get('_ko_property_writers');\r\n                if (propWriters && propWriters[key])\r\n                    propWriters[key](value);\r\n            } else if (ko.isWriteableObservable(property) && (!checkIfDifferent || property.peek() !== value)) {\r\n                property(value);\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('expressionRewriting', ko.expressionRewriting);\r\nko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);\r\nko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);\r\nko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);\r\n\r\n// Making bindings explicitly declare themselves as \"two way\" isn't ideal in the long term (it would be better if\r\n// all bindings could use an official 'property writer' API without needing to declare that they might). However,\r\n// since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable\r\n// as an internal implementation detail in the short term.\r\n// For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an\r\n// undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official\r\n// public API, and we reserve the right to remove it at any time if we create a real public property writers API.\r\nko.exportSymbol('expressionRewriting._twoWayBindings', ko.expressionRewriting.twoWayBindings);\r\n\r\n// For backward compatibility, define the following aliases. (Previously, these function names were misleading because\r\n// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)\r\nko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);\r\nko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);\r\n(function() {\r\n    // \"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes\r\n    // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).\r\n    // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state\r\n    // of that virtual hierarchy\r\n    //\r\n    // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)\r\n    // without having to scatter special cases all over the binding and templating code.\r\n\r\n    // IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)\r\n    // but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don't have that property.\r\n    // So, use node.text where available, and node.nodeValue elsewhere\r\n    var commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\r\n\r\n    var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\r\n    var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\\s*\\/ko\\s*-->$/ : /^\\s*\\/ko\\s*$/;\r\n    var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };\r\n\r\n    function isStartComment(node) {\r\n        return (node.nodeType == 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n    }\r\n\r\n    function isEndComment(node) {\r\n        return (node.nodeType == 8) && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n    }\r\n\r\n    function getVirtualChildren(startComment, allowUnbalanced) {\r\n        var currentNode = startComment;\r\n        var depth = 1;\r\n        var children = [];\r\n        while (currentNode = currentNode.nextSibling) {\r\n            if (isEndComment(currentNode)) {\r\n                depth--;\r\n                if (depth === 0)\r\n                    return children;\r\n            }\r\n\r\n            children.push(currentNode);\r\n\r\n            if (isStartComment(currentNode))\r\n                depth++;\r\n        }\r\n        if (!allowUnbalanced)\r\n            throw new Error(\"Cannot find closing comment tag to match: \" + startComment.nodeValue);\r\n        return null;\r\n    }\r\n\r\n    function getMatchingEndComment(startComment, allowUnbalanced) {\r\n        var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);\r\n        if (allVirtualChildren) {\r\n            if (allVirtualChildren.length > 0)\r\n                return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;\r\n            return startComment.nextSibling;\r\n        } else\r\n            return null; // Must have no matching end comment, and allowUnbalanced is true\r\n    }\r\n\r\n    function getUnbalancedChildTags(node) {\r\n        // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>\r\n        //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->\r\n        var childNode = node.firstChild, captureRemaining = null;\r\n        if (childNode) {\r\n            do {\r\n                if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes\r\n                    captureRemaining.push(childNode);\r\n                else if (isStartComment(childNode)) {\r\n                    var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);\r\n                    if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set\r\n                        childNode = matchingEndComment;\r\n                    else\r\n                        captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point\r\n                } else if (isEndComment(childNode)) {\r\n                    captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing\r\n                }\r\n            } while (childNode = childNode.nextSibling);\r\n        }\r\n        return captureRemaining;\r\n    }\r\n\r\n    ko.virtualElements = {\r\n        allowedBindings: {},\r\n\r\n        childNodes: function(node) {\r\n            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;\r\n        },\r\n\r\n        emptyNode: function(node) {\r\n            if (!isStartComment(node))\r\n                ko.utils.emptyDomNode(node);\r\n            else {\r\n                var virtualChildren = ko.virtualElements.childNodes(node);\r\n                for (var i = 0, j = virtualChildren.length; i < j; i++)\r\n                    ko.removeNode(virtualChildren[i]);\r\n            }\r\n        },\r\n\r\n        setDomNodeChildren: function(node, childNodes) {\r\n            if (!isStartComment(node))\r\n                ko.utils.setDomNodeChildren(node, childNodes);\r\n            else {\r\n                ko.virtualElements.emptyNode(node);\r\n                var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children\r\n                for (var i = 0, j = childNodes.length; i < j; i++)\r\n                    endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);\r\n            }\r\n        },\r\n\r\n        prepend: function(containerNode, nodeToPrepend) {\r\n            if (!isStartComment(containerNode)) {\r\n                if (containerNode.firstChild)\r\n                    containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);\r\n                else\r\n                    containerNode.appendChild(nodeToPrepend);\r\n            } else {\r\n                // Start comments must always have a parent and at least one following sibling (the end comment)\r\n                containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);\r\n            }\r\n        },\r\n\r\n        insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {\r\n            if (!insertAfterNode) {\r\n                ko.virtualElements.prepend(containerNode, nodeToInsert);\r\n            } else if (!isStartComment(containerNode)) {\r\n                // Insert after insertion point\r\n                if (insertAfterNode.nextSibling)\r\n                    containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n                else\r\n                    containerNode.appendChild(nodeToInsert);\r\n            } else {\r\n                // Children of start comments must always have a parent and at least one following sibling (the end comment)\r\n                containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n            }\r\n        },\r\n\r\n        firstChild: function(node) {\r\n            if (!isStartComment(node))\r\n                return node.firstChild;\r\n            if (!node.nextSibling || isEndComment(node.nextSibling))\r\n                return null;\r\n            return node.nextSibling;\r\n        },\r\n\r\n        nextSibling: function(node) {\r\n            if (isStartComment(node))\r\n                node = getMatchingEndComment(node);\r\n            if (node.nextSibling && isEndComment(node.nextSibling))\r\n                return null;\r\n            return node.nextSibling;\r\n        },\r\n\r\n        hasBindingValue: isStartComment,\r\n\r\n        virtualNodeBindingValue: function(node) {\r\n            var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);\r\n            return regexMatch ? regexMatch[1] : null;\r\n        },\r\n\r\n        normaliseVirtualElementDomStructure: function(elementVerified) {\r\n            // Workaround for https://github.com/SteveSanderson/knockout/issues/155\r\n            // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes\r\n            // that are direct descendants of <ul> into the preceding <li>)\r\n            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])\r\n                return;\r\n\r\n            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags\r\n            // must be intended to appear *after* that child, so move them there.\r\n            var childNode = elementVerified.firstChild;\r\n            if (childNode) {\r\n                do {\r\n                    if (childNode.nodeType === 1) {\r\n                        var unbalancedTags = getUnbalancedChildTags(childNode);\r\n                        if (unbalancedTags) {\r\n                            // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child\r\n                            var nodeToInsertBefore = childNode.nextSibling;\r\n                            for (var i = 0; i < unbalancedTags.length; i++) {\r\n                                if (nodeToInsertBefore)\r\n                                    elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);\r\n                                else\r\n                                    elementVerified.appendChild(unbalancedTags[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                } while (childNode = childNode.nextSibling);\r\n            }\r\n        }\r\n    };\r\n})();\r\nko.exportSymbol('virtualElements', ko.virtualElements);\r\nko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);\r\nko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);\r\n//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified\r\nko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);\r\n//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified\r\nko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);\r\nko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);\r\n(function() {\r\n    var defaultBindingAttributeName = \"data-bind\";\r\n\r\n    ko.bindingProvider = function() {\r\n        this.bindingCache = {};\r\n    };\r\n\r\n    ko.utils.extend(ko.bindingProvider.prototype, {\r\n        'nodeHasBindings': function(node) {\r\n            switch (node.nodeType) {\r\n                case 1: // Element\r\n                    return node.getAttribute(defaultBindingAttributeName) != null\r\n                        || ko.components['getComponentNameForNode'](node);\r\n                case 8: // Comment node\r\n                    return ko.virtualElements.hasBindingValue(node);\r\n                default: return false;\r\n            }\r\n        },\r\n\r\n        'getBindings': function(node, bindingContext) {\r\n            var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;\r\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ false);\r\n        },\r\n\r\n        'getBindingAccessors': function(node, bindingContext) {\r\n            var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node, { 'valueAccessors': true }) : null;\r\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ true);\r\n        },\r\n\r\n        // The following function is only used internally by this default provider.\r\n        // It's not part of the interface definition for a general binding provider.\r\n        'getBindingsString': function(node, bindingContext) {\r\n            switch (node.nodeType) {\r\n                case 1: return node.getAttribute(defaultBindingAttributeName);   // Element\r\n                case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node\r\n                default: return null;\r\n            }\r\n        },\r\n\r\n        // The following function is only used internally by this default provider.\r\n        // It's not part of the interface definition for a general binding provider.\r\n        'parseBindingsString': function(bindingsString, bindingContext, node, options) {\r\n            try {\r\n                var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);\r\n                return bindingFunction(bindingContext, node);\r\n            } catch (ex) {\r\n                ex.message = \"Unable to parse bindings.\\nBindings value: \" + bindingsString + \"\\nMessage: \" + ex.message;\r\n                throw ex;\r\n            }\r\n        }\r\n    });\r\n\r\n    ko.bindingProvider['instance'] = new ko.bindingProvider();\r\n\r\n    function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {\r\n        var cacheKey = bindingsString + (options && options['valueAccessors'] || '');\r\n        return cache[cacheKey]\r\n            || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));\r\n    }\r\n\r\n    function createBindingsStringEvaluator(bindingsString, options) {\r\n        // Build the source for a function that evaluates \"expression\"\r\n        // For each scope variable, add an extra level of \"with\" nesting\r\n        // Example result: with(sc1) { with(sc0) { return (expression) } }\r\n        var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),\r\n            functionBody = \"with($context){with($data||{}){return{\" + rewrittenBindings + \"}}}\";\r\n        return new Function(\"$context\", \"$element\", functionBody);\r\n    }\r\n})();\r\n\r\nko.exportSymbol('bindingProvider', ko.bindingProvider);\r\n(function () {\r\n    ko.bindingHandlers = {};\r\n\r\n    // The following element types will not be recursed into during binding.\r\n    var bindingDoesNotRecurseIntoElementTypes = {\r\n        // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,\r\n        // because it's unexpected and a potential XSS issue.\r\n        // Also bindings should not operate on <template> elements since this breaks in Internet Explorer\r\n        // and because such elements' contents are always intended to be bound in a different context\r\n        // from where they appear in the document.\r\n        'script': true,\r\n        'textarea': true,\r\n        'template': true\r\n    };\r\n\r\n    // Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers\r\n    ko['getBindingHandler'] = function(bindingKey) {\r\n        return ko.bindingHandlers[bindingKey];\r\n    };\r\n\r\n    // The ko.bindingContext constructor is only called directly to create the root context. For child\r\n    // contexts, use bindingContext.createChildContext or bindingContext.extend.\r\n    ko.bindingContext = function(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback, options) {\r\n\r\n        // The binding context object includes static properties for the current, parent, and root view models.\r\n        // If a view model is actually stored in an observable, the corresponding binding context object, and\r\n        // any child contexts, must be updated when the view model is changed.\r\n        function updateContext() {\r\n            // Most of the time, the context will directly get a view model object, but if a function is given,\r\n            // we call the function to retrieve the view model. If the function accesses any observables or returns\r\n            // an observable, the dependency is tracked, and those observables can later cause the binding\r\n            // context to be updated.\r\n            var dataItemOrObservable = isFunc ? dataItemOrAccessor() : dataItemOrAccessor,\r\n                dataItem = ko.utils.unwrapObservable(dataItemOrObservable);\r\n\r\n            if (parentContext) {\r\n                // When a \"parent\" context is given, register a dependency on the parent context. Thus whenever the\r\n                // parent context is updated, this context will also be updated.\r\n                if (parentContext._subscribable)\r\n                    parentContext._subscribable();\r\n\r\n                // Copy $root and any custom properties from the parent context\r\n                ko.utils.extend(self, parentContext);\r\n\r\n                // Because the above copy overwrites our own properties, we need to reset them.\r\n                self._subscribable = subscribable;\r\n            } else {\r\n                self['$parents'] = [];\r\n                self['$root'] = dataItem;\r\n\r\n                // Export 'ko' in the binding context so it will be available in bindings and templates\r\n                // even if 'ko' isn't exported as a global, such as when using an AMD loader.\r\n                // See https://github.com/SteveSanderson/knockout/issues/490\r\n                self['ko'] = ko;\r\n            }\r\n            self['$rawData'] = dataItemOrObservable;\r\n            self['$data'] = dataItem;\r\n            if (dataItemAlias)\r\n                self[dataItemAlias] = dataItem;\r\n\r\n            // The extendCallback function is provided when creating a child context or extending a context.\r\n            // It handles the specific actions needed to finish setting up the binding context. Actions in this\r\n            // function could also add dependencies to this binding context.\r\n            if (extendCallback)\r\n                extendCallback(self, parentContext, dataItem);\r\n\r\n            return self['$data'];\r\n        }\r\n        function disposeWhen() {\r\n            return nodes && !ko.utils.anyDomNodeIsAttachedToDocument(nodes);\r\n        }\r\n\r\n        var self = this,\r\n            isFunc = typeof(dataItemOrAccessor) == \"function\" && !ko.isObservable(dataItemOrAccessor),\r\n            nodes,\r\n            subscribable;\r\n\r\n        if (options && options['exportDependencies']) {\r\n            // The \"exportDependencies\" option means that the calling code will track any dependencies and re-create\r\n            // the binding context when they change.\r\n            updateContext();\r\n        } else {\r\n            subscribable = ko.dependentObservable(updateContext, null, { disposeWhen: disposeWhen, disposeWhenNodeIsRemoved: true });\r\n\r\n            // At this point, the binding context has been initialized, and the \"subscribable\" computed observable is\r\n            // subscribed to any observables that were accessed in the process. If there is nothing to track, the\r\n            // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in\r\n            // the context object.\r\n            if (subscribable.isActive()) {\r\n                self._subscribable = subscribable;\r\n\r\n                // Always notify because even if the model ($data) hasn't changed, other context properties might have changed\r\n                subscribable['equalityComparer'] = null;\r\n\r\n                // We need to be able to dispose of this computed observable when it's no longer needed. This would be\r\n                // easy if we had a single node to watch, but binding contexts can be used by many different nodes, and\r\n                // we cannot assume that those nodes have any relation to each other. So instead we track any node that\r\n                // the context is attached to, and dispose the computed when all of those nodes have been cleaned.\r\n\r\n                // Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates\r\n                nodes = [];\r\n                subscribable._addNode = function(node) {\r\n                    nodes.push(node);\r\n                    ko.utils.domNodeDisposal.addDisposeCallback(node, function(node) {\r\n                        ko.utils.arrayRemoveItem(nodes, node);\r\n                        if (!nodes.length) {\r\n                            subscribable.dispose();\r\n                            self._subscribable = subscribable = undefined;\r\n                        }\r\n                    });\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extend the binding context hierarchy with a new view model object. If the parent context is watching\r\n    // any observables, the new child context will automatically get a dependency on the parent context.\r\n    // But this does not mean that the $data value of the child context will also get updated. If the child\r\n    // view model also depends on the parent view model, you must provide a function that returns the correct\r\n    // view model on each update.\r\n    ko.bindingContext.prototype['createChildContext'] = function (dataItemOrAccessor, dataItemAlias, extendCallback, options) {\r\n        return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function(self, parentContext) {\r\n            // Extend the context hierarchy by setting the appropriate pointers\r\n            self['$parentContext'] = parentContext;\r\n            self['$parent'] = parentContext['$data'];\r\n            self['$parents'] = (parentContext['$parents'] || []).slice(0);\r\n            self['$parents'].unshift(self['$parent']);\r\n            if (extendCallback)\r\n                extendCallback(self);\r\n        }, options);\r\n    };\r\n\r\n    // Extend the binding context with new custom properties. This doesn't change the context hierarchy.\r\n    // Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set\r\n    // when an observable view model is updated.\r\n    ko.bindingContext.prototype['extend'] = function(properties) {\r\n        // If the parent context references an observable view model, \"_subscribable\" will always be the\r\n        // latest view model object. If not, \"_subscribable\" isn't set, and we can use the static \"$data\" value.\r\n        return new ko.bindingContext(this._subscribable || this['$data'], this, null, function(self, parentContext) {\r\n            // This \"child\" context doesn't directly track a parent observable view model,\r\n            // so we need to manually set the $rawData value to match the parent.\r\n            self['$rawData'] = parentContext['$rawData'];\r\n            ko.utils.extend(self, typeof(properties) == \"function\" ? properties() : properties);\r\n        });\r\n    };\r\n\r\n    ko.bindingContext.prototype.createStaticChildContext = function (dataItemOrAccessor, dataItemAlias) {\r\n        return this['createChildContext'](dataItemOrAccessor, dataItemAlias, null, { \"exportDependencies\": true });\r\n    };\r\n\r\n    // Returns the valueAccesor function for a binding value\r\n    function makeValueAccessor(value) {\r\n        return function() {\r\n            return value;\r\n        };\r\n    }\r\n\r\n    // Returns the value of a valueAccessor function\r\n    function evaluateValueAccessor(valueAccessor) {\r\n        return valueAccessor();\r\n    }\r\n\r\n    // Given a function that returns bindings, create and return a new object that contains\r\n    // binding value-accessors functions. Each accessor function calls the original function\r\n    // so that it always gets the latest value and all dependencies are captured. This is used\r\n    // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.\r\n    function makeAccessorsFromFunction(callback) {\r\n        return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function(value, key) {\r\n            return function() {\r\n                return callback()[key];\r\n            };\r\n        });\r\n    }\r\n\r\n    // Given a bindings function or object, create and return a new object that contains\r\n    // binding value-accessors functions. This is used by ko.applyBindingsToNode.\r\n    function makeBindingAccessors(bindings, context, node) {\r\n        if (typeof bindings === 'function') {\r\n            return makeAccessorsFromFunction(bindings.bind(null, context, node));\r\n        } else {\r\n            return ko.utils.objectMap(bindings, makeValueAccessor);\r\n        }\r\n    }\r\n\r\n    // This function is used if the binding provider doesn't include a getBindingAccessors function.\r\n    // It must be called with 'this' set to the provider instance.\r\n    function getBindingsAndMakeAccessors(node, context) {\r\n        return makeAccessorsFromFunction(this['getBindings'].bind(this, node, context));\r\n    }\r\n\r\n    function validateThatBindingIsAllowedForVirtualElements(bindingName) {\r\n        var validator = ko.virtualElements.allowedBindings[bindingName];\r\n        if (!validator)\r\n            throw new Error(\"The binding '\" + bindingName + \"' cannot be used with virtual elements\")\r\n    }\r\n\r\n    function applyBindingsToDescendantsInternal (bindingContext, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {\r\n        var currentChild,\r\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement),\r\n            provider = ko.bindingProvider['instance'],\r\n            preprocessNode = provider['preprocessNode'];\r\n\r\n        // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's\r\n        // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to\r\n        // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that\r\n        // trigger insertion of <template> contents at that point in the document.\r\n        if (preprocessNode) {\r\n            while (currentChild = nextInQueue) {\r\n                nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n                preprocessNode.call(provider, currentChild);\r\n            }\r\n            // Reset nextInQueue for the next loop\r\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\r\n        }\r\n\r\n        while (currentChild = nextInQueue) {\r\n            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position\r\n            nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n            applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild, bindingContextsMayDifferFromDomParentElement);\r\n        }\r\n    }\r\n\r\n    function applyBindingsToNodeAndDescendantsInternal (bindingContext, nodeVerified, bindingContextMayDifferFromDomParentElement) {\r\n        var shouldBindDescendants = true;\r\n\r\n        // Perf optimisation: Apply bindings only if...\r\n        // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)\r\n        //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those\r\n        // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)\r\n        var isElement = (nodeVerified.nodeType === 1);\r\n        if (isElement) // Workaround IE <= 8 HTML parsing weirdness\r\n            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);\r\n\r\n        var shouldApplyBindings = (isElement && bindingContextMayDifferFromDomParentElement)             // Case (1)\r\n                               || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);       // Case (2)\r\n        if (shouldApplyBindings)\r\n            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext, bindingContextMayDifferFromDomParentElement)['shouldBindDescendants'];\r\n\r\n        if (shouldBindDescendants && !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {\r\n            // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,\r\n            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,\r\n            //    hence bindingContextsMayDifferFromDomParentElement is false\r\n            //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may\r\n            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,\r\n            //    hence bindingContextsMayDifferFromDomParentElement is true\r\n            applyBindingsToDescendantsInternal(bindingContext, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);\r\n        }\r\n    }\r\n\r\n    var boundElementDomDataKey = ko.utils.domData.nextKey();\r\n\r\n\r\n    function topologicalSortBindings(bindings) {\r\n        // Depth-first sort\r\n        var result = [],                // The list of key/handler pairs that we will return\r\n            bindingsConsidered = {},    // A temporary record of which bindings are already in 'result'\r\n            cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it\r\n        ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {\r\n            if (!bindingsConsidered[bindingKey]) {\r\n                var binding = ko['getBindingHandler'](bindingKey);\r\n                if (binding) {\r\n                    // First add dependencies (if any) of the current binding\r\n                    if (binding['after']) {\r\n                        cyclicDependencyStack.push(bindingKey);\r\n                        ko.utils.arrayForEach(binding['after'], function(bindingDependencyKey) {\r\n                            if (bindings[bindingDependencyKey]) {\r\n                                if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {\r\n                                    throw Error(\"Cannot combine the following bindings, because they have a cyclic dependency: \" + cyclicDependencyStack.join(\", \"));\r\n                                } else {\r\n                                    pushBinding(bindingDependencyKey);\r\n                                }\r\n                            }\r\n                        });\r\n                        cyclicDependencyStack.length--;\r\n                    }\r\n                    // Next add the current binding\r\n                    result.push({ key: bindingKey, handler: binding });\r\n                }\r\n                bindingsConsidered[bindingKey] = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    function applyBindingsToNodeInternal(node, sourceBindings, bindingContext, bindingContextMayDifferFromDomParentElement) {\r\n        // Prevent multiple applyBindings calls for the same node, except when a binding value is specified\r\n        var alreadyBound = ko.utils.domData.get(node, boundElementDomDataKey);\r\n        if (!sourceBindings) {\r\n            if (alreadyBound) {\r\n                throw Error(\"You cannot apply bindings multiple times to the same element.\");\r\n            }\r\n            ko.utils.domData.set(node, boundElementDomDataKey, true);\r\n        }\r\n\r\n        // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because\r\n        // we can easily recover it just by scanning up the node's ancestors in the DOM\r\n        // (note: here, parent node means \"real DOM parent\" not \"virtual parent\", as there's no O(1) way to find the virtual parent)\r\n        if (!alreadyBound && bindingContextMayDifferFromDomParentElement)\r\n            ko.storedBindingContextForNode(node, bindingContext);\r\n\r\n        // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings\r\n        var bindings;\r\n        if (sourceBindings && typeof sourceBindings !== 'function') {\r\n            bindings = sourceBindings;\r\n        } else {\r\n            var provider = ko.bindingProvider['instance'],\r\n                getBindings = provider['getBindingAccessors'] || getBindingsAndMakeAccessors;\r\n\r\n            // Get the binding from the provider within a computed observable so that we can update the bindings whenever\r\n            // the binding context is updated or if the binding provider accesses observables.\r\n            var bindingsUpdater = ko.dependentObservable(\r\n                function() {\r\n                    bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);\r\n                    // Register a dependency on the binding context to support observable view models.\r\n                    if (bindings && bindingContext._subscribable)\r\n                        bindingContext._subscribable();\r\n                    return bindings;\r\n                },\r\n                null, { disposeWhenNodeIsRemoved: node }\r\n            );\r\n\r\n            if (!bindings || !bindingsUpdater.isActive())\r\n                bindingsUpdater = null;\r\n        }\r\n\r\n        var bindingHandlerThatControlsDescendantBindings;\r\n        if (bindings) {\r\n            // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding\r\n            // context update), just return the value accessor from the binding. Otherwise, return a function that always gets\r\n            // the latest binding value and registers a dependency on the binding updater.\r\n            var getValueAccessor = bindingsUpdater\r\n                ? function(bindingKey) {\r\n                    return function() {\r\n                        return evaluateValueAccessor(bindingsUpdater()[bindingKey]);\r\n                    };\r\n                } : function(bindingKey) {\r\n                    return bindings[bindingKey];\r\n                };\r\n\r\n            // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated\r\n            function allBindings() {\r\n                return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);\r\n            }\r\n            // The following is the 3.x allBindings API\r\n            allBindings['get'] = function(key) {\r\n                return bindings[key] && evaluateValueAccessor(getValueAccessor(key));\r\n            };\r\n            allBindings['has'] = function(key) {\r\n                return key in bindings;\r\n            };\r\n\r\n            // First put the bindings into the right order\r\n            var orderedBindings = topologicalSortBindings(bindings);\r\n\r\n            // Go through the sorted bindings, calling init and update for each\r\n            ko.utils.arrayForEach(orderedBindings, function(bindingKeyAndHandler) {\r\n                // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,\r\n                // so bindingKeyAndHandler.handler will always be nonnull.\r\n                var handlerInitFn = bindingKeyAndHandler.handler[\"init\"],\r\n                    handlerUpdateFn = bindingKeyAndHandler.handler[\"update\"],\r\n                    bindingKey = bindingKeyAndHandler.key;\r\n\r\n                if (node.nodeType === 8) {\r\n                    validateThatBindingIsAllowedForVirtualElements(bindingKey);\r\n                }\r\n\r\n                try {\r\n                    // Run init, ignoring any dependencies\r\n                    if (typeof handlerInitFn == \"function\") {\r\n                        ko.dependencyDetection.ignore(function() {\r\n                            var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\r\n\r\n                            // If this binding handler claims to control descendant bindings, make a note of this\r\n                            if (initResult && initResult['controlsDescendantBindings']) {\r\n                                if (bindingHandlerThatControlsDescendantBindings !== undefined)\r\n                                    throw new Error(\"Multiple bindings (\" + bindingHandlerThatControlsDescendantBindings + \" and \" + bindingKey + \") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\");\r\n                                bindingHandlerThatControlsDescendantBindings = bindingKey;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // Run update in its own computed wrapper\r\n                    if (typeof handlerUpdateFn == \"function\") {\r\n                        ko.dependentObservable(\r\n                            function() {\r\n                                handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\r\n                            },\r\n                            null,\r\n                            { disposeWhenNodeIsRemoved: node }\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    ex.message = \"Unable to process binding \\\"\" + bindingKey + \": \" + bindings[bindingKey] + \"\\\"\\nMessage: \" + ex.message;\r\n                    throw ex;\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            'shouldBindDescendants': bindingHandlerThatControlsDescendantBindings === undefined\r\n        };\r\n    };\r\n\r\n    var storedBindingContextDomDataKey = ko.utils.domData.nextKey();\r\n    ko.storedBindingContextForNode = function (node, bindingContext) {\r\n        if (arguments.length == 2) {\r\n            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);\r\n            if (bindingContext._subscribable)\r\n                bindingContext._subscribable._addNode(node);\r\n        } else {\r\n            return ko.utils.domData.get(node, storedBindingContextDomDataKey);\r\n        }\r\n    }\r\n\r\n    function getBindingContext(viewModelOrBindingContext) {\r\n        return viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)\r\n            ? viewModelOrBindingContext\r\n            : new ko.bindingContext(viewModelOrBindingContext);\r\n    }\r\n\r\n    ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n        if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness\r\n            ko.virtualElements.normaliseVirtualElementDomStructure(node);\r\n        return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext), true);\r\n    };\r\n\r\n    ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n        var context = getBindingContext(viewModelOrBindingContext);\r\n        return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);\r\n    };\r\n\r\n    ko.applyBindingsToDescendants = function(viewModelOrBindingContext, rootNode) {\r\n        if (rootNode.nodeType === 1 || rootNode.nodeType === 8)\r\n            applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\r\n    };\r\n\r\n    ko.applyBindings = function (viewModelOrBindingContext, rootNode) {\r\n        // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.\r\n        if (!jQueryInstance && window['jQuery']) {\r\n            jQueryInstance = window['jQuery'];\r\n        }\r\n\r\n        if (rootNode && (rootNode.nodeType !== 1) && (rootNode.nodeType !== 8))\r\n            throw new Error(\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\");\r\n        rootNode = rootNode || window.document.body; // Make \"rootNode\" parameter optional\r\n\r\n        applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\r\n    };\r\n\r\n    // Retrieving binding context from arbitrary nodes\r\n    ko.contextFor = function(node) {\r\n        // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)\r\n        switch (node.nodeType) {\r\n            case 1:\r\n            case 8:\r\n                var context = ko.storedBindingContextForNode(node);\r\n                if (context) return context;\r\n                if (node.parentNode) return ko.contextFor(node.parentNode);\r\n                break;\r\n        }\r\n        return undefined;\r\n    };\r\n    ko.dataFor = function(node) {\r\n        var context = ko.contextFor(node);\r\n        return context ? context['$data'] : undefined;\r\n    };\r\n\r\n    ko.exportSymbol('bindingHandlers', ko.bindingHandlers);\r\n    ko.exportSymbol('applyBindings', ko.applyBindings);\r\n    ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);\r\n    ko.exportSymbol('applyBindingAccessorsToNode', ko.applyBindingAccessorsToNode);\r\n    ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);\r\n    ko.exportSymbol('contextFor', ko.contextFor);\r\n    ko.exportSymbol('dataFor', ko.dataFor);\r\n})();\r\n(function(undefined) {\r\n    var loadingSubscribablesCache = {}, // Tracks component loads that are currently in flight\r\n        loadedDefinitionsCache = {};    // Tracks component loads that have already completed\r\n\r\n    ko.components = {\r\n        get: function(componentName, callback) {\r\n            var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);\r\n            if (cachedDefinition) {\r\n                // It's already loaded and cached. Reuse the same definition object.\r\n                // Note that for API consistency, even cache hits complete asynchronously by default.\r\n                // You can bypass this by putting synchronous:true on your component config.\r\n                if (cachedDefinition.isSynchronousComponent) {\r\n                    ko.dependencyDetection.ignore(function() { // See comment in loaderRegistryBehaviors.js for reasoning\r\n                        callback(cachedDefinition.definition);\r\n                    });\r\n                } else {\r\n                    ko.tasks.schedule(function() { callback(cachedDefinition.definition); });\r\n                }\r\n            } else {\r\n                // Join the loading process that is already underway, or start a new one.\r\n                loadComponentAndNotify(componentName, callback);\r\n            }\r\n        },\r\n\r\n        clearCachedDefinition: function(componentName) {\r\n            delete loadedDefinitionsCache[componentName];\r\n        },\r\n\r\n        _getFirstResultFromLoaders: getFirstResultFromLoaders\r\n    };\r\n\r\n    function getObjectOwnProperty(obj, propName) {\r\n        return obj.hasOwnProperty(propName) ? obj[propName] : undefined;\r\n    }\r\n\r\n    function loadComponentAndNotify(componentName, callback) {\r\n        var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),\r\n            completedAsync;\r\n        if (!subscribable) {\r\n            // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.\r\n            subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();\r\n            subscribable.subscribe(callback);\r\n\r\n            beginLoadingComponent(componentName, function(definition, config) {\r\n                var isSynchronousComponent = !!(config && config['synchronous']);\r\n                loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };\r\n                delete loadingSubscribablesCache[componentName];\r\n\r\n                // For API consistency, all loads complete asynchronously. However we want to avoid\r\n                // adding an extra task schedule if it's unnecessary (i.e., the completion is already\r\n                // async).\r\n                //\r\n                // You can bypass the 'always asynchronous' feature by putting the synchronous:true\r\n                // flag on your component configuration when you register it.\r\n                if (completedAsync || isSynchronousComponent) {\r\n                    // Note that notifySubscribers ignores any dependencies read within the callback.\r\n                    // See comment in loaderRegistryBehaviors.js for reasoning\r\n                    subscribable['notifySubscribers'](definition);\r\n                } else {\r\n                    ko.tasks.schedule(function() {\r\n                        subscribable['notifySubscribers'](definition);\r\n                    });\r\n                }\r\n            });\r\n            completedAsync = true;\r\n        } else {\r\n            subscribable.subscribe(callback);\r\n        }\r\n    }\r\n\r\n    function beginLoadingComponent(componentName, callback) {\r\n        getFirstResultFromLoaders('getConfig', [componentName], function(config) {\r\n            if (config) {\r\n                // We have a config, so now load its definition\r\n                getFirstResultFromLoaders('loadComponent', [componentName, config], function(definition) {\r\n                    callback(definition, config);\r\n                });\r\n            } else {\r\n                // The component has no config - it's unknown to all the loaders.\r\n                // Note that this is not an error (e.g., a module loading error) - that would abort the\r\n                // process and this callback would not run. For this callback to run, all loaders must\r\n                // have confirmed they don't know about this component.\r\n                callback(null, null);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {\r\n        // On the first call in the stack, start with the full set of loaders\r\n        if (!candidateLoaders) {\r\n            candidateLoaders = ko.components['loaders'].slice(0); // Use a copy, because we'll be mutating this array\r\n        }\r\n\r\n        // Try the next candidate\r\n        var currentCandidateLoader = candidateLoaders.shift();\r\n        if (currentCandidateLoader) {\r\n            var methodInstance = currentCandidateLoader[methodName];\r\n            if (methodInstance) {\r\n                var wasAborted = false,\r\n                    synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {\r\n                        if (wasAborted) {\r\n                            callback(null);\r\n                        } else if (result !== null) {\r\n                            // This candidate returned a value. Use it.\r\n                            callback(result);\r\n                        } else {\r\n                            // Try the next candidate\r\n                            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n                        }\r\n                    }));\r\n\r\n                // Currently, loaders may not return anything synchronously. This leaves open the possibility\r\n                // that we'll extend the API to support synchronous return values in the future. It won't be\r\n                // a breaking change, because currently no loader is allowed to return anything except undefined.\r\n                if (synchronousReturnValue !== undefined) {\r\n                    wasAborted = true;\r\n\r\n                    // Method to suppress exceptions will remain undocumented. This is only to keep\r\n                    // KO's specs running tidily, since we can observe the loading got aborted without\r\n                    // having exceptions cluttering up the console too.\r\n                    if (!currentCandidateLoader['suppressLoaderExceptions']) {\r\n                        throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');\r\n                    }\r\n                }\r\n            } else {\r\n                // This candidate doesn't have the relevant handler. Synchronously move on to the next one.\r\n                getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n            }\r\n        } else {\r\n            // No candidates returned a value\r\n            callback(null);\r\n        }\r\n    }\r\n\r\n    // Reference the loaders via string name so it's possible for developers\r\n    // to replace the whole array by assigning to ko.components.loaders\r\n    ko.components['loaders'] = [];\r\n\r\n    ko.exportSymbol('components', ko.components);\r\n    ko.exportSymbol('components.get', ko.components.get);\r\n    ko.exportSymbol('components.clearCachedDefinition', ko.components.clearCachedDefinition);\r\n})();\r\n(function(undefined) {\r\n\r\n    // The default loader is responsible for two things:\r\n    // 1. Maintaining the default in-memory registry of component configuration objects\r\n    //    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))\r\n    // 2. Answering requests for components by fetching configuration objects\r\n    //    from that default in-memory registry and resolving them into standard\r\n    //    component definition objects (of the form { createViewModel: ..., template: ... })\r\n    // Custom loaders may override either of these facilities, i.e.,\r\n    // 1. To supply configuration objects from some other source (e.g., conventions)\r\n    // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.\r\n\r\n    var defaultConfigRegistry = {};\r\n\r\n    ko.components.register = function(componentName, config) {\r\n        if (!config) {\r\n            throw new Error('Invalid configuration for ' + componentName);\r\n        }\r\n\r\n        if (ko.components.isRegistered(componentName)) {\r\n            throw new Error('Component ' + componentName + ' is already registered');\r\n        }\r\n\r\n        defaultConfigRegistry[componentName] = config;\r\n    };\r\n\r\n    ko.components.isRegistered = function(componentName) {\r\n        return defaultConfigRegistry.hasOwnProperty(componentName);\r\n    };\r\n\r\n    ko.components.unregister = function(componentName) {\r\n        delete defaultConfigRegistry[componentName];\r\n        ko.components.clearCachedDefinition(componentName);\r\n    };\r\n\r\n    ko.components.defaultLoader = {\r\n        'getConfig': function(componentName, callback) {\r\n            var result = defaultConfigRegistry.hasOwnProperty(componentName)\r\n                ? defaultConfigRegistry[componentName]\r\n                : null;\r\n            callback(result);\r\n        },\r\n\r\n        'loadComponent': function(componentName, config, callback) {\r\n            var errorCallback = makeErrorCallback(componentName);\r\n            possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {\r\n                resolveConfig(componentName, errorCallback, loadedConfig, callback);\r\n            });\r\n        },\r\n\r\n        'loadTemplate': function(componentName, templateConfig, callback) {\r\n            resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);\r\n        },\r\n\r\n        'loadViewModel': function(componentName, viewModelConfig, callback) {\r\n            resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);\r\n        }\r\n    };\r\n\r\n    var createViewModelKey = 'createViewModel';\r\n\r\n    // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it\r\n    // into the standard component definition format:\r\n    //    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.\r\n    // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed\r\n    // in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,\r\n    // so this is implemented manually below.\r\n    function resolveConfig(componentName, errorCallback, config, callback) {\r\n        var result = {},\r\n            makeCallBackWhenZero = 2,\r\n            tryIssueCallback = function() {\r\n                if (--makeCallBackWhenZero === 0) {\r\n                    callback(result);\r\n                }\r\n            },\r\n            templateConfig = config['template'],\r\n            viewModelConfig = config['viewModel'];\r\n\r\n        if (templateConfig) {\r\n            possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {\r\n                ko.components._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function(resolvedTemplate) {\r\n                    result['template'] = resolvedTemplate;\r\n                    tryIssueCallback();\r\n                });\r\n            });\r\n        } else {\r\n            tryIssueCallback();\r\n        }\r\n\r\n        if (viewModelConfig) {\r\n            possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {\r\n                ko.components._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function(resolvedViewModel) {\r\n                    result[createViewModelKey] = resolvedViewModel;\r\n                    tryIssueCallback();\r\n                });\r\n            });\r\n        } else {\r\n            tryIssueCallback();\r\n        }\r\n    }\r\n\r\n    function resolveTemplate(errorCallback, templateConfig, callback) {\r\n        if (typeof templateConfig === 'string') {\r\n            // Markup - parse it\r\n            callback(ko.utils.parseHtmlFragment(templateConfig));\r\n        } else if (templateConfig instanceof Array) {\r\n            // Assume already an array of DOM nodes - pass through unchanged\r\n            callback(templateConfig);\r\n        } else if (isDocumentFragment(templateConfig)) {\r\n            // Document fragment - use its child nodes\r\n            callback(ko.utils.makeArray(templateConfig.childNodes));\r\n        } else if (templateConfig['element']) {\r\n            var element = templateConfig['element'];\r\n            if (isDomElement(element)) {\r\n                // Element instance - copy its child nodes\r\n                callback(cloneNodesFromTemplateSourceElement(element));\r\n            } else if (typeof element === 'string') {\r\n                // Element ID - find it, then copy its child nodes\r\n                var elemInstance = document.getElementById(element);\r\n                if (elemInstance) {\r\n                    callback(cloneNodesFromTemplateSourceElement(elemInstance));\r\n                } else {\r\n                    errorCallback('Cannot find element with ID ' + element);\r\n                }\r\n            } else {\r\n                errorCallback('Unknown element type: ' + element);\r\n            }\r\n        } else {\r\n            errorCallback('Unknown template value: ' + templateConfig);\r\n        }\r\n    }\r\n\r\n    function resolveViewModel(errorCallback, viewModelConfig, callback) {\r\n        if (typeof viewModelConfig === 'function') {\r\n            // Constructor - convert to standard factory function format\r\n            // By design, this does *not* supply componentInfo to the constructor, as the intent is that\r\n            // componentInfo contains non-viewmodel data (e.g., the component's element) that should only\r\n            // be used in factory functions, not viewmodel constructors.\r\n            callback(function (params /*, componentInfo */) {\r\n                return new viewModelConfig(params);\r\n            });\r\n        } else if (typeof viewModelConfig[createViewModelKey] === 'function') {\r\n            // Already a factory function - use it as-is\r\n            callback(viewModelConfig[createViewModelKey]);\r\n        } else if ('instance' in viewModelConfig) {\r\n            // Fixed object instance - promote to createViewModel format for API consistency\r\n            var fixedInstance = viewModelConfig['instance'];\r\n            callback(function (params, componentInfo) {\r\n                return fixedInstance;\r\n            });\r\n        } else if ('viewModel' in viewModelConfig) {\r\n            // Resolved AMD module whose value is of the form { viewModel: ... }\r\n            resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);\r\n        } else {\r\n            errorCallback('Unknown viewModel value: ' + viewModelConfig);\r\n        }\r\n    }\r\n\r\n    function cloneNodesFromTemplateSourceElement(elemInstance) {\r\n        switch (ko.utils.tagNameLower(elemInstance)) {\r\n            case 'script':\r\n                return ko.utils.parseHtmlFragment(elemInstance.text);\r\n            case 'textarea':\r\n                return ko.utils.parseHtmlFragment(elemInstance.value);\r\n            case 'template':\r\n                // For browsers with proper <template> element support (i.e., where the .content property\r\n                // gives a document fragment), use that document fragment.\r\n                if (isDocumentFragment(elemInstance.content)) {\r\n                    return ko.utils.cloneNodes(elemInstance.content.childNodes);\r\n                }\r\n        }\r\n\r\n        // Regular elements such as <div>, and <template> elements on old browsers that don't really\r\n        // understand <template> and just treat it as a regular container\r\n        return ko.utils.cloneNodes(elemInstance.childNodes);\r\n    }\r\n\r\n    function isDomElement(obj) {\r\n        if (window['HTMLElement']) {\r\n            return obj instanceof HTMLElement;\r\n        } else {\r\n            return obj && obj.tagName && obj.nodeType === 1;\r\n        }\r\n    }\r\n\r\n    function isDocumentFragment(obj) {\r\n        if (window['DocumentFragment']) {\r\n            return obj instanceof DocumentFragment;\r\n        } else {\r\n            return obj && obj.nodeType === 11;\r\n        }\r\n    }\r\n\r\n    function possiblyGetConfigFromAmd(errorCallback, config, callback) {\r\n        if (typeof config['require'] === 'string') {\r\n            // The config is the value of an AMD module\r\n            if (amdRequire || window['require']) {\r\n                (amdRequire || window['require'])([config['require']], callback);\r\n            } else {\r\n                errorCallback('Uses require, but no AMD loader is present');\r\n            }\r\n        } else {\r\n            callback(config);\r\n        }\r\n    }\r\n\r\n    function makeErrorCallback(componentName) {\r\n        return function (message) {\r\n            throw new Error('Component \\'' + componentName + '\\': ' + message);\r\n        };\r\n    }\r\n\r\n    ko.exportSymbol('components.register', ko.components.register);\r\n    ko.exportSymbol('components.isRegistered', ko.components.isRegistered);\r\n    ko.exportSymbol('components.unregister', ko.components.unregister);\r\n\r\n    // Expose the default loader so that developers can directly ask it for configuration\r\n    // or to resolve configuration\r\n    ko.exportSymbol('components.defaultLoader', ko.components.defaultLoader);\r\n\r\n    // By default, the default loader is the only registered component loader\r\n    ko.components['loaders'].push(ko.components.defaultLoader);\r\n\r\n    // Privately expose the underlying config registry for use in old-IE shim\r\n    ko.components._allRegisteredComponents = defaultConfigRegistry;\r\n})();\r\n(function (undefined) {\r\n    // Overridable API for determining which component name applies to a given node. By overriding this,\r\n    // you can for example map specific tagNames to components that are not preregistered.\r\n    ko.components['getComponentNameForNode'] = function(node) {\r\n        var tagNameLower = ko.utils.tagNameLower(node);\r\n        if (ko.components.isRegistered(tagNameLower)) {\r\n            // Try to determine that this node can be considered a *custom* element; see https://github.com/knockout/knockout/issues/1603\r\n            if (tagNameLower.indexOf('-') != -1 || ('' + node) == \"[object HTMLUnknownElement]\" || (ko.utils.ieVersion <= 8 && node.tagName === tagNameLower)) {\r\n                return tagNameLower;\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.components.addBindingsForCustomElement = function(allBindings, node, bindingContext, valueAccessors) {\r\n        // Determine if it's really a custom element matching a component\r\n        if (node.nodeType === 1) {\r\n            var componentName = ko.components['getComponentNameForNode'](node);\r\n            if (componentName) {\r\n                // It does represent a component, so add a component binding for it\r\n                allBindings = allBindings || {};\r\n\r\n                if (allBindings['component']) {\r\n                    // Avoid silently overwriting some other 'component' binding that may already be on the element\r\n                    throw new Error('Cannot use the \"component\" binding on a custom element matching a component');\r\n                }\r\n\r\n                var componentBindingValue = { 'name': componentName, 'params': getComponentParamsFromCustomElement(node, bindingContext) };\r\n\r\n                allBindings['component'] = valueAccessors\r\n                    ? function() { return componentBindingValue; }\r\n                    : componentBindingValue;\r\n            }\r\n        }\r\n\r\n        return allBindings;\r\n    }\r\n\r\n    var nativeBindingProviderInstance = new ko.bindingProvider();\r\n\r\n    function getComponentParamsFromCustomElement(elem, bindingContext) {\r\n        var paramsAttribute = elem.getAttribute('params');\r\n\r\n        if (paramsAttribute) {\r\n            var params = nativeBindingProviderInstance['parseBindingsString'](paramsAttribute, bindingContext, elem, { 'valueAccessors': true, 'bindingParams': true }),\r\n                rawParamComputedValues = ko.utils.objectMap(params, function(paramValue, paramName) {\r\n                    return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });\r\n                }),\r\n                result = ko.utils.objectMap(rawParamComputedValues, function(paramValueComputed, paramName) {\r\n                    var paramValue = paramValueComputed.peek();\r\n                    // Does the evaluation of the parameter value unwrap any observables?\r\n                    if (!paramValueComputed.isActive()) {\r\n                        // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.\r\n                        // Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)\r\n                        return paramValue;\r\n                    } else {\r\n                        // Yes it does. Supply a computed property that unwraps both the outer (binding expression)\r\n                        // level of observability, and any inner (resulting model value) level of observability.\r\n                        // This means the component doesn't have to worry about multiple unwrapping. If the value is a\r\n                        // writable observable, the computed will also be writable and pass the value on to the observable.\r\n                        return ko.computed({\r\n                            'read': function() {\r\n                                return ko.utils.unwrapObservable(paramValueComputed());\r\n                            },\r\n                            'write': ko.isWriteableObservable(paramValue) && function(value) {\r\n                                paramValueComputed()(value);\r\n                            },\r\n                            disposeWhenNodeIsRemoved: elem\r\n                        });\r\n                    }\r\n                });\r\n\r\n            // Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'\r\n            // This is in case the developer wants to react to outer (binding) observability separately from inner\r\n            // (model value) observability, or in case the model value observable has subobservables.\r\n            if (!result.hasOwnProperty('$raw')) {\r\n                result['$raw'] = rawParamComputedValues;\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            // For consistency, absence of a \"params\" attribute is treated the same as the presence of\r\n            // any empty one. Otherwise component viewmodels need special code to check whether or not\r\n            // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.\r\n            return { '$raw': {} };\r\n        }\r\n    }\r\n\r\n    // --------------------------------------------------------------------------------\r\n    // Compatibility code for older (pre-HTML5) IE browsers\r\n\r\n    if (ko.utils.ieVersion < 9) {\r\n        // Whenever you preregister a component, enable it as a custom element in the current document\r\n        ko.components['register'] = (function(originalFunction) {\r\n            return function(componentName) {\r\n                document.createElement(componentName); // Allows IE<9 to parse markup containing the custom element\r\n                return originalFunction.apply(this, arguments);\r\n            }\r\n        })(ko.components['register']);\r\n\r\n        // Whenever you create a document fragment, enable all preregistered component names as custom elements\r\n        // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements\r\n        document.createDocumentFragment = (function(originalFunction) {\r\n            return function() {\r\n                var newDocFrag = originalFunction(),\r\n                    allComponents = ko.components._allRegisteredComponents;\r\n                for (var componentName in allComponents) {\r\n                    if (allComponents.hasOwnProperty(componentName)) {\r\n                        newDocFrag.createElement(componentName);\r\n                    }\r\n                }\r\n                return newDocFrag;\r\n            };\r\n        })(document.createDocumentFragment);\r\n    }\r\n})();(function(undefined) {\r\n\r\n    var componentLoadingOperationUniqueId = 0;\r\n\r\n    ko.bindingHandlers['component'] = {\r\n        'init': function(element, valueAccessor, ignored1, ignored2, bindingContext) {\r\n            var currentViewModel,\r\n                currentLoadingOperationId,\r\n                disposeAssociatedComponentViewModel = function () {\r\n                    var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];\r\n                    if (typeof currentViewModelDispose === 'function') {\r\n                        currentViewModelDispose.call(currentViewModel);\r\n                    }\r\n                    currentViewModel = null;\r\n                    // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion\r\n                    currentLoadingOperationId = null;\r\n                },\r\n                originalChildNodes = ko.utils.makeArray(ko.virtualElements.childNodes(element));\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);\r\n\r\n            ko.computed(function () {\r\n                var value = ko.utils.unwrapObservable(valueAccessor()),\r\n                    componentName, componentParams;\r\n\r\n                if (typeof value === 'string') {\r\n                    componentName = value;\r\n                } else {\r\n                    componentName = ko.utils.unwrapObservable(value['name']);\r\n                    componentParams = ko.utils.unwrapObservable(value['params']);\r\n                }\r\n\r\n                if (!componentName) {\r\n                    throw new Error('No component name specified');\r\n                }\r\n\r\n                var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;\r\n                ko.components.get(componentName, function(componentDefinition) {\r\n                    // If this is not the current load operation for this element, ignore it.\r\n                    if (currentLoadingOperationId !== loadingOperationId) {\r\n                        return;\r\n                    }\r\n\r\n                    // Clean up previous state\r\n                    disposeAssociatedComponentViewModel();\r\n\r\n                    // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.\r\n                    if (!componentDefinition) {\r\n                        throw new Error('Unknown component \\'' + componentName + '\\'');\r\n                    }\r\n                    cloneTemplateIntoElement(componentName, componentDefinition, element);\r\n                    var componentViewModel = createViewModel(componentDefinition, element, originalChildNodes, componentParams),\r\n                        childBindingContext = bindingContext['createChildContext'](componentViewModel, /* dataItemAlias */ undefined, function(ctx) {\r\n                            ctx['$component'] = componentViewModel;\r\n                            ctx['$componentTemplateNodes'] = originalChildNodes;\r\n                        });\r\n                    currentViewModel = componentViewModel;\r\n                    ko.applyBindingsToDescendants(childBindingContext, element);\r\n                });\r\n            }, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n            return { 'controlsDescendantBindings': true };\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings['component'] = true;\r\n\r\n    function cloneTemplateIntoElement(componentName, componentDefinition, element) {\r\n        var template = componentDefinition['template'];\r\n        if (!template) {\r\n            throw new Error('Component \\'' + componentName + '\\' has no template');\r\n        }\r\n\r\n        var clonedNodesArray = ko.utils.cloneNodes(template);\r\n        ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);\r\n    }\r\n\r\n    function createViewModel(componentDefinition, element, originalChildNodes, componentParams) {\r\n        var componentViewModelFactory = componentDefinition['createViewModel'];\r\n        return componentViewModelFactory\r\n            ? componentViewModelFactory.call(componentDefinition, componentParams, { 'element': element, 'templateNodes': originalChildNodes })\r\n            : componentParams; // Template-only component\r\n    }\r\n\r\n})();\r\nvar attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };\r\nko.bindingHandlers['attr'] = {\r\n    'update': function(element, valueAccessor, allBindings) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n        ko.utils.objectForEach(value, function(attrName, attrValue) {\r\n            attrValue = ko.utils.unwrapObservable(attrValue);\r\n\r\n            // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\r\n            // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\r\n            // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\r\n            var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);\r\n            if (toRemove)\r\n                element.removeAttribute(attrName);\r\n\r\n            // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the\r\n            // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\r\n            // but instead of figuring out the mode, we'll just set the attribute through the Javascript\r\n            // property for IE <= 8.\r\n            if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {\r\n                attrName = attrHtmlToJavascriptMap[attrName];\r\n                if (toRemove)\r\n                    element.removeAttribute(attrName);\r\n                else\r\n                    element[attrName] = attrValue;\r\n            } else if (!toRemove) {\r\n                element.setAttribute(attrName, attrValue.toString());\r\n            }\r\n\r\n            // Treat \"name\" specially - although you can think of it as an attribute, it also needs\r\n            // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\r\n            // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\r\n            // entirely, and there's no strong reason to allow for such casing in HTML.\r\n            if (attrName === \"name\") {\r\n                ko.utils.setElementName(element, toRemove ? \"\" : attrValue.toString());\r\n            }\r\n        });\r\n    }\r\n};\r\n(function() {\r\n\r\nko.bindingHandlers['checked'] = {\r\n    'after': ['value', 'attr'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        var checkedValue = ko.pureComputed(function() {\r\n            // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\r\n            if (allBindings['has']('checkedValue')) {\r\n                return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\r\n            } else if (allBindings['has']('value')) {\r\n                return ko.utils.unwrapObservable(allBindings.get('value'));\r\n            }\r\n\r\n            return element.value;\r\n        });\r\n\r\n        function updateModel() {\r\n            // This updates the model value from the view value.\r\n            // It runs in response to DOM events (click) and changes in checkedValue.\r\n            var isChecked = element.checked,\r\n                elemValue = useCheckedValue ? checkedValue() : isChecked;\r\n\r\n            // When we're first setting up this computed, don't change any model state.\r\n            if (ko.computedContext.isInitial()) {\r\n                return;\r\n            }\r\n\r\n            // We can ignore unchecked radio buttons, because some other radio\r\n            // button will be getting checked, and that one can take care of updating state.\r\n            if (isRadio && !isChecked) {\r\n                return;\r\n            }\r\n\r\n            var modelValue = ko.dependencyDetection.ignore(valueAccessor);\r\n            if (valueIsArray) {\r\n                var writableValue = rawValueIsNonArrayObservable ? modelValue.peek() : modelValue;\r\n                if (oldElemValue !== elemValue) {\r\n                    // When we're responding to the checkedValue changing, and the element is\r\n                    // currently checked, replace the old elem value with the new elem value\r\n                    // in the model array.\r\n                    if (isChecked) {\r\n                        ko.utils.addOrRemoveItem(writableValue, elemValue, true);\r\n                        ko.utils.addOrRemoveItem(writableValue, oldElemValue, false);\r\n                    }\r\n\r\n                    oldElemValue = elemValue;\r\n                } else {\r\n                    // When we're responding to the user having checked/unchecked a checkbox,\r\n                    // add/remove the element value to the model array.\r\n                    ko.utils.addOrRemoveItem(writableValue, elemValue, isChecked);\r\n                }\r\n                if (rawValueIsNonArrayObservable && ko.isWriteableObservable(modelValue)) {\r\n                    modelValue(writableValue);\r\n                }\r\n            } else {\r\n                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\r\n            }\r\n        };\r\n\r\n        function updateView() {\r\n            // This updates the view value from the model value.\r\n            // It runs in response to changes in the bound (checked) value.\r\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (valueIsArray) {\r\n                // When a checkbox is bound to an array, being checked represents its value being present in that array\r\n                element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\r\n            } else if (isCheckbox) {\r\n                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish\r\n                element.checked = modelValue;\r\n            } else {\r\n                // For radio buttons, being checked means that the radio button's value corresponds to the model value\r\n                element.checked = (checkedValue() === modelValue);\r\n            }\r\n        };\r\n\r\n        var isCheckbox = element.type == \"checkbox\",\r\n            isRadio = element.type == \"radio\";\r\n\r\n        // Only bind to check boxes and radio buttons\r\n        if (!isCheckbox && !isRadio) {\r\n            return;\r\n        }\r\n\r\n        var rawValue = valueAccessor(),\r\n            valueIsArray = isCheckbox && (ko.utils.unwrapObservable(rawValue) instanceof Array),\r\n            rawValueIsNonArrayObservable = !(valueIsArray && rawValue.push && rawValue.splice),\r\n            oldElemValue = valueIsArray ? checkedValue() : undefined,\r\n            useCheckedValue = isRadio || valueIsArray;\r\n\r\n        // IE 6 won't allow radio buttons to be selected unless they have a name\r\n        if (isRadio && !element.name)\r\n            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });\r\n\r\n        // Set up two computeds to update the binding:\r\n\r\n        // The first responds to changes in the checkedValue value and to element clicks\r\n        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\r\n        ko.utils.registerEventHandler(element, \"click\", updateModel);\r\n\r\n        // The second responds to changes in the model value (the one associated with the checked binding)\r\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n        rawValue = undefined;\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['checked'] = true;\r\n\r\nko.bindingHandlers['checkedValue'] = {\r\n    'update': function (element, valueAccessor) {\r\n        element.value = ko.utils.unwrapObservable(valueAccessor());\r\n    }\r\n};\r\n\r\n})();var classesWrittenByBindingKey = '__ko__cssValue';\r\nko.bindingHandlers['css'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (value !== null && typeof value == \"object\") {\r\n            ko.utils.objectForEach(value, function(className, shouldHaveClass) {\r\n                shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);\r\n                ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);\r\n            });\r\n        } else {\r\n            value = ko.utils.stringTrim(String(value || '')); // Make sure we don't try to store or set a non-string value\r\n            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);\r\n            element[classesWrittenByBindingKey] = value;\r\n            ko.utils.toggleDomNodeCssClass(element, value, true);\r\n        }\r\n    }\r\n};\r\nko.bindingHandlers['enable'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (value && element.disabled)\r\n            element.removeAttribute(\"disabled\");\r\n        else if ((!value) && (!element.disabled))\r\n            element.disabled = true;\r\n    }\r\n};\r\n\r\nko.bindingHandlers['disable'] = {\r\n    'update': function (element, valueAccessor) {\r\n        ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\r\n    }\r\n};\r\n// For certain common events (currently just 'click'), allow a simplified data-binding syntax\r\n// e.g. click:handler instead of the usual full-length event:{click:handler}\r\nfunction makeEventHandlerShortcut(eventName) {\r\n    ko.bindingHandlers[eventName] = {\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var newValueAccessor = function () {\r\n                var result = {};\r\n                result[eventName] = valueAccessor();\r\n                return result;\r\n            };\r\n            return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);\r\n        }\r\n    }\r\n}\r\n\r\nko.bindingHandlers['event'] = {\r\n    'init' : function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        var eventsToHandle = valueAccessor() || {};\r\n        ko.utils.objectForEach(eventsToHandle, function(eventName) {\r\n            if (typeof eventName == \"string\") {\r\n                ko.utils.registerEventHandler(element, eventName, function (event) {\r\n                    var handlerReturnValue;\r\n                    var handlerFunction = valueAccessor()[eventName];\r\n                    if (!handlerFunction)\r\n                        return;\r\n\r\n                    try {\r\n                        // Take all the event args, and prefix with the viewmodel\r\n                        var argsForHandler = ko.utils.makeArray(arguments);\r\n                        viewModel = bindingContext['$data'];\r\n                        argsForHandler.unshift(viewModel);\r\n                        handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);\r\n                    } finally {\r\n                        if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                            if (event.preventDefault)\r\n                                event.preventDefault();\r\n                            else\r\n                                event.returnValue = false;\r\n                        }\r\n                    }\r\n\r\n                    var bubble = allBindings.get(eventName + 'Bubble') !== false;\r\n                    if (!bubble) {\r\n                        event.cancelBubble = true;\r\n                        if (event.stopPropagation)\r\n                            event.stopPropagation();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n// \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\r\n// \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\r\nko.bindingHandlers['foreach'] = {\r\n    makeTemplateValueAccessor: function(valueAccessor) {\r\n        return function() {\r\n            var modelValue = valueAccessor(),\r\n                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here\r\n\r\n            // If unwrappedValue is the array, pass in the wrapped value on its own\r\n            // The value will be unwrapped and tracked within the template binding\r\n            // (See https://github.com/SteveSanderson/knockout/issues/523)\r\n            if ((!unwrappedValue) || typeof unwrappedValue.length == \"number\")\r\n                return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };\r\n\r\n            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\r\n            ko.utils.unwrapObservable(modelValue);\r\n            return {\r\n                'foreach': unwrappedValue['data'],\r\n                'as': unwrappedValue['as'],\r\n                'includeDestroyed': unwrappedValue['includeDestroyed'],\r\n                'afterAdd': unwrappedValue['afterAdd'],\r\n                'beforeRemove': unwrappedValue['beforeRemove'],\r\n                'afterRender': unwrappedValue['afterRender'],\r\n                'beforeMove': unwrappedValue['beforeMove'],\r\n                'afterMove': unwrappedValue['afterMove'],\r\n                'templateEngine': ko.nativeTemplateEngine.instance\r\n            };\r\n        };\r\n    },\r\n    'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));\r\n    },\r\n    'update': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\r\n    }\r\n};\r\nko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings\r\nko.virtualElements.allowedBindings['foreach'] = true;\r\nvar hasfocusUpdatingProperty = '__ko_hasfocusUpdating';\r\nvar hasfocusLastValue = '__ko_hasfocusLastValue';\r\nko.bindingHandlers['hasfocus'] = {\r\n    'init': function(element, valueAccessor, allBindings) {\r\n        var handleElementFocusChange = function(isFocused) {\r\n            // Where possible, ignore which event was raised and determine focus state using activeElement,\r\n            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.\r\n            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,\r\n            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus\r\n            // from calling 'blur()' on the element when it loses focus.\r\n            // Discussion at https://github.com/SteveSanderson/knockout/pull/352\r\n            element[hasfocusUpdatingProperty] = true;\r\n            var ownerDoc = element.ownerDocument;\r\n            if (\"activeElement\" in ownerDoc) {\r\n                var active;\r\n                try {\r\n                    active = ownerDoc.activeElement;\r\n                } catch(e) {\r\n                    // IE9 throws if you access activeElement during page load (see issue #703)\r\n                    active = ownerDoc.body;\r\n                }\r\n                isFocused = (active === element);\r\n            }\r\n            var modelValue = valueAccessor();\r\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'hasfocus', isFocused, true);\r\n\r\n            //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function\r\n            element[hasfocusLastValue] = isFocused;\r\n            element[hasfocusUpdatingProperty] = false;\r\n        };\r\n        var handleElementFocusIn = handleElementFocusChange.bind(null, true);\r\n        var handleElementFocusOut = handleElementFocusChange.bind(null, false);\r\n\r\n        ko.utils.registerEventHandler(element, \"focus\", handleElementFocusIn);\r\n        ko.utils.registerEventHandler(element, \"focusin\", handleElementFocusIn); // For IE\r\n        ko.utils.registerEventHandler(element, \"blur\",  handleElementFocusOut);\r\n        ko.utils.registerEventHandler(element, \"focusout\",  handleElementFocusOut); // For IE\r\n    },\r\n    'update': function(element, valueAccessor) {\r\n        var value = !!ko.utils.unwrapObservable(valueAccessor());\r\n\r\n        if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {\r\n            value ? element.focus() : element.blur();\r\n\r\n            // In IE, the blur method doesn't always cause the element to lose focus (for example, if the window is not in focus).\r\n            // Setting focus to the body element does seem to be reliable in IE, but should only be used if we know that the current\r\n            // element was focused already.\r\n            if (!value && element[hasfocusLastValue]) {\r\n                element.ownerDocument.body.focus();\r\n            }\r\n\r\n            // For IE, which doesn't reliably fire \"focus\" or \"blur\" events synchronously\r\n            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? \"focusin\" : \"focusout\"]);\r\n        }\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['hasfocus'] = true;\r\n\r\nko.bindingHandlers['hasFocus'] = ko.bindingHandlers['hasfocus']; // Make \"hasFocus\" an alias\r\nko.expressionRewriting.twoWayBindings['hasFocus'] = true;\r\nko.bindingHandlers['html'] = {\r\n    'init': function() {\r\n        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        // setHtml will unwrap the value if needed\r\n        ko.utils.setHtml(element, valueAccessor());\r\n    }\r\n};\r\n// Makes a binding like with or if\r\nfunction makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {\r\n    ko.bindingHandlers[bindingKey] = {\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var didDisplayOnLastUpdate,\r\n                savedNodes;\r\n            ko.computed(function() {\r\n                var rawValue = valueAccessor(),\r\n                    dataValue = ko.utils.unwrapObservable(rawValue),\r\n                    shouldDisplay = !isNot !== !dataValue, // equivalent to isNot ? !dataValue : !!dataValue\r\n                    isFirstRender = !savedNodes,\r\n                    needsRefresh = isFirstRender || isWith || (shouldDisplay !== didDisplayOnLastUpdate);\r\n\r\n                if (needsRefresh) {\r\n                    // Save a copy of the inner nodes on the initial update, but only if we have dependencies.\r\n                    if (isFirstRender && ko.computedContext.getDependenciesCount()) {\r\n                        savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);\r\n                    }\r\n\r\n                    if (shouldDisplay) {\r\n                        if (!isFirstRender) {\r\n                            ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));\r\n                        }\r\n                        ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, rawValue) : bindingContext, element);\r\n                    } else {\r\n                        ko.virtualElements.emptyNode(element);\r\n                    }\r\n\r\n                    didDisplayOnLastUpdate = shouldDisplay;\r\n                }\r\n            }, null, { disposeWhenNodeIsRemoved: element });\r\n            return { 'controlsDescendantBindings': true };\r\n        }\r\n    };\r\n    ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings\r\n    ko.virtualElements.allowedBindings[bindingKey] = true;\r\n}\r\n\r\n// Construct the actual binding handlers\r\nmakeWithIfBinding('if');\r\nmakeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);\r\nmakeWithIfBinding('with', true /* isWith */, false /* isNot */,\r\n    function(bindingContext, dataValue) {\r\n        return bindingContext.createStaticChildContext(dataValue);\r\n    }\r\n);\r\nvar captionPlaceholder = {};\r\nko.bindingHandlers['options'] = {\r\n    'init': function(element) {\r\n        if (ko.utils.tagNameLower(element) !== \"select\")\r\n            throw new Error(\"options binding applies only to SELECT elements\");\r\n\r\n        // Remove all existing <option>s.\r\n        while (element.length > 0) {\r\n            element.remove(0);\r\n        }\r\n\r\n        // Ensures that the binding processor doesn't try to bind the options\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor, allBindings) {\r\n        function selectedOptions() {\r\n            return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });\r\n        }\r\n\r\n        var selectWasPreviouslyEmpty = element.length == 0,\r\n            multiple = element.multiple,\r\n            previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,\r\n            unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\r\n            valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),\r\n            includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\r\n            arrayToDomNodeChildrenOptions = {},\r\n            captionValue,\r\n            filteredArray,\r\n            previousSelectedValues = [];\r\n\r\n        if (!valueAllowUnset) {\r\n            if (multiple) {\r\n                previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\r\n            } else if (element.selectedIndex >= 0) {\r\n                previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));\r\n            }\r\n        }\r\n\r\n        if (unwrappedArray) {\r\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                unwrappedArray = [unwrappedArray];\r\n\r\n            // Filter out any entries marked as destroyed\r\n            filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n            });\r\n\r\n            // If caption is included, add it to the array\r\n            if (allBindings['has']('optionsCaption')) {\r\n                captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\r\n                // If caption value is null or undefined, don't show a caption\r\n                if (captionValue !== null && captionValue !== undefined) {\r\n                    filteredArray.unshift(captionPlaceholder);\r\n                }\r\n            }\r\n        } else {\r\n            // If a falsy value is provided (e.g. null), we'll simply empty the select element\r\n        }\r\n\r\n        function applyToObject(object, predicate, defaultValue) {\r\n            var predicateType = typeof predicate;\r\n            if (predicateType == \"function\")    // Given a function; run it against the data value\r\n                return predicate(object);\r\n            else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\r\n                return object[predicate];\r\n            else                                // Given no optionsText arg; use the data value itself\r\n                return defaultValue;\r\n        }\r\n\r\n        // The following functions can run at two different times:\r\n        // The first is when the whole array is being updated directly from this binding handler.\r\n        // The second is when an observable value for a specific array entry is updated.\r\n        // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\r\n        var itemUpdate = false;\r\n        function optionForArrayItem(arrayEntry, index, oldOptions) {\r\n            if (oldOptions.length) {\r\n                previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];\r\n                itemUpdate = true;\r\n            }\r\n            var option = element.ownerDocument.createElement(\"option\");\r\n            if (arrayEntry === captionPlaceholder) {\r\n                ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\r\n                ko.selectExtensions.writeValue(option, undefined);\r\n            } else {\r\n                // Apply a value to the option element\r\n                var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);\r\n                ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\r\n\r\n                // Apply some text to the option element\r\n                var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);\r\n                ko.utils.setTextContent(option, optionText);\r\n            }\r\n            return [option];\r\n        }\r\n\r\n        // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\r\n        // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\r\n        arrayToDomNodeChildrenOptions['beforeRemove'] =\r\n            function (option) {\r\n                element.removeChild(option);\r\n            };\r\n\r\n        function setSelectionCallback(arrayEntry, newOptions) {\r\n            if (itemUpdate && valueAllowUnset) {\r\n                // The model value is authoritative, so make sure its value is the one selected\r\n                // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.\r\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n            } else if (previousSelectedValues.length) {\r\n                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\r\n                // That's why we first added them without selection. Now it's time to set the selection.\r\n                var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;\r\n                ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\r\n\r\n                // If this option was changed from being selected during a single-item update, notify the change\r\n                if (itemUpdate && !isSelected) {\r\n                    ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                }\r\n            }\r\n        }\r\n\r\n        var callback = setSelectionCallback;\r\n        if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == \"function\") {\r\n            callback = function(arrayEntry, newOptions) {\r\n                setSelectionCallback(arrayEntry, newOptions);\r\n                ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\r\n            }\r\n        }\r\n\r\n        ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\r\n\r\n        ko.dependencyDetection.ignore(function () {\r\n            if (valueAllowUnset) {\r\n                // The model value is authoritative, so make sure its value is the one selected\r\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n            } else {\r\n                // Determine if the selection has changed as a result of updating the options list\r\n                var selectionChanged;\r\n                if (multiple) {\r\n                    // For a multiple-select box, compare the new selection count to the previous one\r\n                    // But if nothing was selected before, the selection can't have changed\r\n                    selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\r\n                } else {\r\n                    // For a single-select box, compare the current value to the previous value\r\n                    // But if nothing was selected before or nothing is selected now, just look for a change in selection\r\n                    selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)\r\n                        ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\r\n                        : (previousSelectedValues.length || element.selectedIndex >= 0);\r\n                }\r\n\r\n                // Ensure consistency between model value and selected option.\r\n                // If the dropdown was changed so that selection is no longer the same,\r\n                // notify the value or selectedOptions binding.\r\n                if (selectionChanged) {\r\n                    ko.utils.triggerEvent(element, \"change\");\r\n                }\r\n            }\r\n        });\r\n\r\n        // Workaround for IE bug\r\n        ko.utils.ensureSelectElementIsRenderedCorrectly(element);\r\n\r\n        if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)\r\n            element.scrollTop = previousScrollTop;\r\n    }\r\n};\r\nko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();\r\nko.bindingHandlers['selectedOptions'] = {\r\n    'after': ['options', 'foreach'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        ko.utils.registerEventHandler(element, \"change\", function () {\r\n            var value = valueAccessor(), valueToWrite = [];\r\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                if (node.selected)\r\n                    valueToWrite.push(ko.selectExtensions.readValue(node));\r\n            });\r\n            ko.expressionRewriting.writeValueToProperty(value, allBindings, 'selectedOptions', valueToWrite);\r\n        });\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        if (ko.utils.tagNameLower(element) != \"select\")\r\n            throw new Error(\"values binding applies only to SELECT elements\");\r\n\r\n        var newValue = ko.utils.unwrapObservable(valueAccessor()),\r\n            previousScrollTop = element.scrollTop;\r\n\r\n        if (newValue && typeof newValue.length == \"number\") {\r\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;\r\n                if (node.selected != isSelected) {      // This check prevents flashing of the select element in IE\r\n                    ko.utils.setOptionNodeSelectionState(node, isSelected);\r\n                }\r\n            });\r\n        }\r\n\r\n        element.scrollTop = previousScrollTop;\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['selectedOptions'] = true;\r\nko.bindingHandlers['style'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor() || {});\r\n        ko.utils.objectForEach(value, function(styleName, styleValue) {\r\n            styleValue = ko.utils.unwrapObservable(styleValue);\r\n\r\n            if (styleValue === null || styleValue === undefined || styleValue === false) {\r\n                // Empty string removes the value, whereas null/undefined have no effect\r\n                styleValue = \"\";\r\n            }\r\n\r\n            element.style[styleName] = styleValue;\r\n        });\r\n    }\r\n};\r\nko.bindingHandlers['submit'] = {\r\n    'init': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        if (typeof valueAccessor() != \"function\")\r\n            throw new Error(\"The value for a submit binding must be a function\");\r\n        ko.utils.registerEventHandler(element, \"submit\", function (event) {\r\n            var handlerReturnValue;\r\n            var value = valueAccessor();\r\n            try { handlerReturnValue = value.call(bindingContext['$data'], element); }\r\n            finally {\r\n                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                    if (event.preventDefault)\r\n                        event.preventDefault();\r\n                    else\r\n                        event.returnValue = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\nko.bindingHandlers['text'] = {\r\n    'init': function() {\r\n        // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).\r\n        // It should also make things faster, as we no longer have to consider whether the text node might be bindable.\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        ko.utils.setTextContent(element, valueAccessor());\r\n    }\r\n};\r\nko.virtualElements.allowedBindings['text'] = true;\r\n(function () {\r\n\r\nif (window && window.navigator) {\r\n    var parseVersion = function (matches) {\r\n        if (matches) {\r\n            return parseFloat(matches[1]);\r\n        }\r\n    };\r\n\r\n    // Detect various browser versions because some old versions don't fully support the 'input' event\r\n    var operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()),\r\n        userAgent = window.navigator.userAgent,\r\n        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\\/([^ ]*) safari/i)),\r\n        firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]*)/));\r\n}\r\n\r\n// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\r\n// But it does fire the 'selectionchange' event on many of those, presumably because the\r\n// cursor is moving and that counts as the selection changing. The 'selectionchange' event is\r\n// fired at the document level only and doesn't directly indicate which element changed. We\r\n// set up just one event handler for the document and use 'activeElement' to determine which\r\n// element was changed.\r\nif (ko.utils.ieVersion < 10) {\r\n    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\r\n        selectionChangeHandlerName = ko.utils.domData.nextKey();\r\n    var selectionChangeHandler = function(event) {\r\n        var target = this.activeElement,\r\n            handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);\r\n        if (handler) {\r\n            handler(event);\r\n        }\r\n    };\r\n    var registerForSelectionChangeEvent = function (element, handler) {\r\n        var ownerDoc = element.ownerDocument;\r\n        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\r\n            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\r\n            ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);\r\n        }\r\n        ko.utils.domData.set(element, selectionChangeHandlerName, handler);\r\n    };\r\n}\r\n\r\nko.bindingHandlers['textInput'] = {\r\n    'init': function (element, valueAccessor, allBindings) {\r\n\r\n        var previousElementValue = element.value,\r\n            timeoutHandle,\r\n            elementValueBeforeEvent;\r\n\r\n        var updateModel = function (event) {\r\n            clearTimeout(timeoutHandle);\r\n            elementValueBeforeEvent = timeoutHandle = undefined;\r\n\r\n            var elementValue = element.value;\r\n            if (previousElementValue !== elementValue) {\r\n                // Provide a way for tests to know exactly which event was processed\r\n                if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;\r\n                previousElementValue = elementValue;\r\n                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);\r\n            }\r\n        };\r\n\r\n        var deferUpdateModel = function (event) {\r\n            if (!timeoutHandle) {\r\n                // The elementValueBeforeEvent variable is set *only* during the brief gap between an\r\n                // event firing and the updateModel function running. This allows us to ignore model\r\n                // updates that are from the previous state of the element, usually due to techniques\r\n                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\r\n                elementValueBeforeEvent = element.value;\r\n                var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;\r\n                timeoutHandle = ko.utils.setTimeout(handler, 4);\r\n            }\r\n        };\r\n\r\n        // IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);\r\n        // so we'll make sure all updates are asynchronous\r\n        var ieUpdateModel = ko.utils.ieVersion == 9 ? deferUpdateModel : updateModel;\r\n\r\n        var updateView = function () {\r\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (modelValue === null || modelValue === undefined) {\r\n                modelValue = '';\r\n            }\r\n\r\n            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {\r\n                ko.utils.setTimeout(updateView, 4);\r\n                return;\r\n            }\r\n\r\n            // Update the element only if the element and model are different. On some browsers, updating the value\r\n            // will move the cursor to the end of the input, which would be bad while the user is typing.\r\n            if (element.value !== modelValue) {\r\n                previousElementValue = modelValue;  // Make sure we ignore events (propertychange) that result from updating the value\r\n                element.value = modelValue;\r\n            }\r\n        };\r\n\r\n        var onEvent = function (event, handler) {\r\n            ko.utils.registerEventHandler(element, event, handler);\r\n        };\r\n\r\n        if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {\r\n            // Provide a way for tests to specify exactly which events are bound\r\n            ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function(eventName) {\r\n                if (eventName.slice(0,5) == 'after') {\r\n                    onEvent(eventName.slice(5), deferUpdateModel);\r\n                } else {\r\n                    onEvent(eventName, updateModel);\r\n                }\r\n            });\r\n        } else {\r\n            if (ko.utils.ieVersion < 10) {\r\n                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever\r\n                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,\r\n                // but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it\r\n                // when using autocomplete, we'll use 'propertychange' for it also.\r\n                onEvent('propertychange', function(event) {\r\n                    if (event.propertyName === 'value') {\r\n                        ieUpdateModel(event);\r\n                    }\r\n                });\r\n\r\n                if (ko.utils.ieVersion == 8) {\r\n                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from\r\n                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following\r\n                    // events too.\r\n                    onEvent('keyup', updateModel);      // A single keystoke\r\n                    onEvent('keydown', updateModel);    // The first character when a key is held down\r\n                }\r\n                if (ko.utils.ieVersion >= 8) {\r\n                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using\r\n                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text\r\n                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'\r\n                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.\r\n                    // These are also needed in IE8 because of the bug described above.\r\n                    registerForSelectionChangeEvent(element, ieUpdateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.\r\n                    onEvent('dragend', deferUpdateModel);\r\n                }\r\n            } else {\r\n                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed\r\n                // through the user interface.\r\n                onEvent('input', updateModel);\r\n\r\n                if (safariVersion < 5 && ko.utils.tagNameLower(element) === \"textarea\") {\r\n                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'\r\n                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.\r\n                    onEvent('keydown', deferUpdateModel);\r\n                    onEvent('paste', deferUpdateModel);\r\n                    onEvent('cut', deferUpdateModel);\r\n                } else if (operaVersion < 11) {\r\n                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.\r\n                    // We can try to catch some of those using 'keydown'.\r\n                    onEvent('keydown', deferUpdateModel);\r\n                } else if (firefoxVersion < 4.0) {\r\n                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete\r\n                    onEvent('DOMAutoComplete', updateModel);\r\n\r\n                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.\r\n                    onEvent('dragdrop', updateModel);       // <3.5\r\n                    onEvent('drop', updateModel);           // 3.5\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\r\n        onEvent('change', updateModel);\r\n\r\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['textInput'] = true;\r\n\r\n// textinput is an alias for textInput\r\nko.bindingHandlers['textinput'] = {\r\n    // preprocess is the only way to set up a full alias\r\n    'preprocess': function (value, name, addBinding) {\r\n        addBinding('textInput', value);\r\n    }\r\n};\r\n\r\n})();ko.bindingHandlers['uniqueName'] = {\r\n    'init': function (element, valueAccessor) {\r\n        if (valueAccessor()) {\r\n            var name = \"ko_unique_\" + (++ko.bindingHandlers['uniqueName'].currentIndex);\r\n            ko.utils.setElementName(element, name);\r\n        }\r\n    }\r\n};\r\nko.bindingHandlers['uniqueName'].currentIndex = 0;\r\nko.bindingHandlers['value'] = {\r\n    'after': ['options', 'foreach'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit\r\n        if (element.tagName.toLowerCase() == \"input\" && (element.type == \"checkbox\" || element.type == \"radio\")) {\r\n            ko.applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });\r\n            return;\r\n        }\r\n\r\n        // Always catch \"change\" event; possibly other events too if asked\r\n        var eventsToCatch = [\"change\"];\r\n        var requestedEventsToCatch = allBindings.get(\"valueUpdate\");\r\n        var propertyChangedFired = false;\r\n        var elementValueBeforeEvent = null;\r\n\r\n        if (requestedEventsToCatch) {\r\n            if (typeof requestedEventsToCatch == \"string\") // Allow both individual event names, and arrays of event names\r\n                requestedEventsToCatch = [requestedEventsToCatch];\r\n            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);\r\n            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);\r\n        }\r\n\r\n        var valueUpdateHandler = function() {\r\n            elementValueBeforeEvent = null;\r\n            propertyChangedFired = false;\r\n            var modelValue = valueAccessor();\r\n            var elementValue = ko.selectExtensions.readValue(element);\r\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'value', elementValue);\r\n        }\r\n\r\n        // Workaround for https://github.com/SteveSanderson/knockout/issues/122\r\n        // IE doesn't fire \"change\" events on textboxes if the user selects a value from its autocomplete list\r\n        var ieAutoCompleteHackNeeded = ko.utils.ieVersion && element.tagName.toLowerCase() == \"input\" && element.type == \"text\"\r\n                                       && element.autocomplete != \"off\" && (!element.form || element.form.autocomplete != \"off\");\r\n        if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, \"propertychange\") == -1) {\r\n            ko.utils.registerEventHandler(element, \"propertychange\", function () { propertyChangedFired = true });\r\n            ko.utils.registerEventHandler(element, \"focus\", function () { propertyChangedFired = false });\r\n            ko.utils.registerEventHandler(element, \"blur\", function() {\r\n                if (propertyChangedFired) {\r\n                    valueUpdateHandler();\r\n                }\r\n            });\r\n        }\r\n\r\n        ko.utils.arrayForEach(eventsToCatch, function(eventName) {\r\n            // The syntax \"after<eventname>\" means \"run the handler asynchronously after the event\"\r\n            // This is useful, for example, to catch \"keydown\" events after the browser has updated the control\r\n            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)\r\n            var handler = valueUpdateHandler;\r\n            if (ko.utils.stringStartsWith(eventName, \"after\")) {\r\n                handler = function() {\r\n                    // The elementValueBeforeEvent variable is non-null *only* during the brief gap between\r\n                    // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen\r\n                    // at the earliest asynchronous opportunity. We store this temporary information so that\r\n                    // if, between keyX and valueUpdateHandler, the underlying model value changes separately,\r\n                    // we can overwrite that model value change with the value the user just typed. Otherwise,\r\n                    // techniques like rateLimit can trigger model changes at critical moments that will\r\n                    // override the user's inputs, causing keystrokes to be lost.\r\n                    elementValueBeforeEvent = ko.selectExtensions.readValue(element);\r\n                    ko.utils.setTimeout(valueUpdateHandler, 0);\r\n                };\r\n                eventName = eventName.substring(\"after\".length);\r\n            }\r\n            ko.utils.registerEventHandler(element, eventName, handler);\r\n        });\r\n\r\n        var updateFromModel = function () {\r\n            var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n            var elementValue = ko.selectExtensions.readValue(element);\r\n\r\n            if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {\r\n                ko.utils.setTimeout(updateFromModel, 0);\r\n                return;\r\n            }\r\n\r\n            var valueHasChanged = (newValue !== elementValue);\r\n\r\n            if (valueHasChanged) {\r\n                if (ko.utils.tagNameLower(element) === \"select\") {\r\n                    var allowUnset = allBindings.get('valueAllowUnset');\r\n                    var applyValueAction = function () {\r\n                        ko.selectExtensions.writeValue(element, newValue, allowUnset);\r\n                    };\r\n                    applyValueAction();\r\n\r\n                    if (!allowUnset && newValue !== ko.selectExtensions.readValue(element)) {\r\n                        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,\r\n                        // because you're not allowed to have a model value that disagrees with a visible UI selection.\r\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                    } else {\r\n                        // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread\r\n                        // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread\r\n                        // to apply the value as well.\r\n                        ko.utils.setTimeout(applyValueAction, 0);\r\n                    }\r\n                } else {\r\n                    ko.selectExtensions.writeValue(element, newValue);\r\n                }\r\n            }\r\n        };\r\n\r\n        ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\r\n    },\r\n    'update': function() {} // Keep for backwards compatibility with code that may have wrapped value binding\r\n};\r\nko.expressionRewriting.twoWayBindings['value'] = true;\r\nko.bindingHandlers['visible'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        var isCurrentlyVisible = !(element.style.display == \"none\");\r\n        if (value && !isCurrentlyVisible)\r\n            element.style.display = \"\";\r\n        else if ((!value) && isCurrentlyVisible)\r\n            element.style.display = \"none\";\r\n    }\r\n};\r\n// 'click' is just a shorthand for the usual full-length event:{click:handler}\r\nmakeEventHandlerShortcut('click');\r\n// If you want to make a custom template engine,\r\n//\r\n// [1] Inherit from this class (like ko.nativeTemplateEngine does)\r\n// [2] Override 'renderTemplateSource', supplying a function with this signature:\r\n//\r\n//        function (templateSource, bindingContext, options) {\r\n//            // - templateSource.text() is the text of the template you should render\r\n//            // - bindingContext.$data is the data you should pass into the template\r\n//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,\r\n//            //     and bindingContext.$root available in the template too\r\n//            // - options gives you access to any other properties set on \"data-bind: { template: options }\"\r\n//            // - templateDocument is the document object of the template\r\n//            //\r\n//            // Return value: an array of DOM nodes\r\n//        }\r\n//\r\n// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:\r\n//\r\n//        function (script) {\r\n//            // Return value: Whatever syntax means \"Evaluate the JavaScript statement 'script' and output the result\"\r\n//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'\r\n//        }\r\n//\r\n//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.\r\n//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)\r\n//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.\r\n\r\nko.templateEngine = function () { };\r\n\r\nko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n    throw new Error(\"Override renderTemplateSource\");\r\n};\r\n\r\nko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {\r\n    throw new Error(\"Override createJavaScriptEvaluatorBlock\");\r\n};\r\n\r\nko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {\r\n    // Named template\r\n    if (typeof template == \"string\") {\r\n        templateDocument = templateDocument || document;\r\n        var elem = templateDocument.getElementById(template);\r\n        if (!elem)\r\n            throw new Error(\"Cannot find template with ID \" + template);\r\n        return new ko.templateSources.domElement(elem);\r\n    } else if ((template.nodeType == 1) || (template.nodeType == 8)) {\r\n        // Anonymous template\r\n        return new ko.templateSources.anonymousTemplate(template);\r\n    } else\r\n        throw new Error(\"Unknown template type: \" + template);\r\n};\r\n\r\nko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {\r\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n    return this['renderTemplateSource'](templateSource, bindingContext, options, templateDocument);\r\n};\r\n\r\nko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {\r\n    // Skip rewriting if requested\r\n    if (this['allowTemplateRewriting'] === false)\r\n        return true;\r\n    return this['makeTemplateSource'](template, templateDocument)['data'](\"isRewritten\");\r\n};\r\n\r\nko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {\r\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n    var rewritten = rewriterCallback(templateSource['text']());\r\n    templateSource['text'](rewritten);\r\n    templateSource['data'](\"isRewritten\", true);\r\n};\r\n\r\nko.exportSymbol('templateEngine', ko.templateEngine);\r\n\r\nko.templateRewriting = (function () {\r\n    var memoizeDataBindingAttributeSyntaxRegex = /(<([a-z]+\\d*)(?:\\s+(?!data-bind\\s*=\\s*)[a-z0-9\\-]+(?:=(?:\\\"[^\\\"]*\\\"|\\'[^\\']*\\'|[^>]*))?)*\\s+)data-bind\\s*=\\s*([\"'])([\\s\\S]*?)\\3/gi;\r\n    var memoizeVirtualContainerBindingSyntaxRegex = /<!--\\s*ko\\b\\s*([\\s\\S]*?)\\s*-->/g;\r\n\r\n    function validateDataBindValuesForRewriting(keyValueArray) {\r\n        var allValidators = ko.expressionRewriting.bindingRewriteValidators;\r\n        for (var i = 0; i < keyValueArray.length; i++) {\r\n            var key = keyValueArray[i]['key'];\r\n            if (allValidators.hasOwnProperty(key)) {\r\n                var validator = allValidators[key];\r\n\r\n                if (typeof validator === \"function\") {\r\n                    var possibleErrorMessage = validator(keyValueArray[i]['value']);\r\n                    if (possibleErrorMessage)\r\n                        throw new Error(possibleErrorMessage);\r\n                } else if (!validator) {\r\n                    throw new Error(\"This template engine does not support the '\" + key + \"' binding within its templates\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {\r\n        var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);\r\n        validateDataBindValuesForRewriting(dataBindKeyValueArray);\r\n        var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, {'valueAccessors':true});\r\n\r\n        // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional\r\n        // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this\r\n        // extra indirection.\r\n        var applyBindingsToNextSiblingScript =\r\n            \"ko.__tr_ambtns(function($context,$element){return(function(){return{ \" + rewrittenDataBindAttributeValue + \" } })()},'\" + nodeName.toLowerCase() + \"')\";\r\n        return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;\r\n    }\r\n\r\n    return {\r\n        ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {\r\n            if (!templateEngine['isTemplateRewritten'](template, templateDocument))\r\n                templateEngine['rewriteTemplate'](template, function (htmlString) {\r\n                    return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);\r\n                }, templateDocument);\r\n        },\r\n\r\n        memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {\r\n            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {\r\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[4], /* tagToRetain: */ arguments[1], /* nodeName: */ arguments[2], templateEngine);\r\n            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {\r\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ \"<!-- ko -->\", /* nodeName: */ \"#comment\", templateEngine);\r\n            });\r\n        },\r\n\r\n        applyMemoizedBindingsToNextSibling: function (bindings, nodeName) {\r\n            return ko.memoization.memoize(function (domNode, bindingContext) {\r\n                var nodeToBind = domNode.nextSibling;\r\n                if (nodeToBind && nodeToBind.nodeName.toLowerCase() === nodeName) {\r\n                    ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n\r\n\r\n// Exported only because it has to be referenced by string lookup from within rewritten template\r\nko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);\r\n(function() {\r\n    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\r\n    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\r\n    //\r\n    // Two are provided by default:\r\n    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\r\n    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\r\n    //                                           without reading/writing the actual element text content, since it will be overwritten\r\n    //                                           with the rendered template output.\r\n    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\r\n    // Template sources need to have the following functions:\r\n    //   text() \t\t\t- returns the template text from your storage location\r\n    //   text(value)\t\t- writes the supplied template text to your storage location\r\n    //   data(key)\t\t\t- reads values stored using data(key, value) - see below\r\n    //   data(key, value)\t- associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\r\n    //\r\n    // Optionally, template sources can also have the following functions:\r\n    //   nodes()            - returns a DOM element containing the nodes of this template, where available\r\n    //   nodes(value)       - writes the given DOM element to your storage location\r\n    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\r\n    // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().\r\n    //\r\n    // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\r\n    // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\r\n\r\n    ko.templateSources = {};\r\n\r\n    // ---- ko.templateSources.domElement -----\r\n\r\n    // template types\r\n    var templateScript = 1,\r\n        templateTextArea = 2,\r\n        templateTemplate = 3,\r\n        templateElement = 4;\r\n\r\n    ko.templateSources.domElement = function(element) {\r\n        this.domElement = element;\r\n\r\n        if (element) {\r\n            var tagNameLower = ko.utils.tagNameLower(element);\r\n            this.templateType =\r\n                tagNameLower === \"script\" ? templateScript :\r\n                tagNameLower === \"textarea\" ? templateTextArea :\r\n                    // For browsers with proper <template> element support, where the .content property gives a document fragment\r\n                tagNameLower == \"template\" && element.content && element.content.nodeType === 11 ? templateTemplate :\r\n                templateElement;\r\n        }\r\n    }\r\n\r\n    ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {\r\n        var elemContentsProperty = this.templateType === templateScript ? \"text\"\r\n                                 : this.templateType === templateTextArea ? \"value\"\r\n                                 : \"innerHTML\";\r\n\r\n        if (arguments.length == 0) {\r\n            return this.domElement[elemContentsProperty];\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            if (elemContentsProperty === \"innerHTML\")\r\n                ko.utils.setHtml(this.domElement, valueToWrite);\r\n            else\r\n                this.domElement[elemContentsProperty] = valueToWrite;\r\n        }\r\n    };\r\n\r\n    var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\r\n    ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {\r\n        if (arguments.length === 1) {\r\n            return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\r\n        } else {\r\n            ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\r\n        }\r\n    };\r\n\r\n    var templatesDomDataKey = ko.utils.domData.nextKey();\r\n    function getTemplateDomData(element) {\r\n        return ko.utils.domData.get(element, templatesDomDataKey) || {};\r\n    }\r\n    function setTemplateDomData(element, data) {\r\n        ko.utils.domData.set(element, templatesDomDataKey, data);\r\n    }\r\n\r\n    ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {\r\n        var element = this.domElement;\r\n        if (arguments.length == 0) {\r\n            var templateData = getTemplateDomData(element),\r\n                containerData = templateData.containerData;\r\n            return containerData || (\r\n                this.templateType === templateTemplate ? element.content :\r\n                this.templateType === templateElement ? element :\r\n                undefined);\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            setTemplateDomData(element, {containerData: valueToWrite});\r\n        }\r\n    };\r\n\r\n    // ---- ko.templateSources.anonymousTemplate -----\r\n    // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\r\n    // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\r\n    // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\r\n\r\n    ko.templateSources.anonymousTemplate = function(element) {\r\n        this.domElement = element;\r\n    }\r\n    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\r\n    ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\r\n    ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {\r\n        if (arguments.length == 0) {\r\n            var templateData = getTemplateDomData(this.domElement);\r\n            if (templateData.textData === undefined && templateData.containerData)\r\n                templateData.textData = templateData.containerData.innerHTML;\r\n            return templateData.textData;\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            setTemplateDomData(this.domElement, {textData: valueToWrite});\r\n        }\r\n    };\r\n\r\n    ko.exportSymbol('templateSources', ko.templateSources);\r\n    ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);\r\n    ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);\r\n})();\r\n(function () {\r\n    var _templateEngine;\r\n    ko.setTemplateEngine = function (templateEngine) {\r\n        if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))\r\n            throw new Error(\"templateEngine must inherit from ko.templateEngine\");\r\n        _templateEngine = templateEngine;\r\n    }\r\n\r\n    function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {\r\n        var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);\r\n        while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {\r\n            nextInQueue = ko.virtualElements.nextSibling(node);\r\n            action(node, nextInQueue);\r\n        }\r\n    }\r\n\r\n    function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {\r\n        // To be used on any nodes that have been rendered by a template and have been inserted into some parent element\r\n        // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because\r\n        // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,\r\n        // (1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings\r\n        // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)\r\n\r\n        if (continuousNodeArray.length) {\r\n            var firstNode = continuousNodeArray[0],\r\n                lastNode = continuousNodeArray[continuousNodeArray.length - 1],\r\n                parentNode = firstNode.parentNode,\r\n                provider = ko.bindingProvider['instance'],\r\n                preprocessNode = provider['preprocessNode'];\r\n\r\n            if (preprocessNode) {\r\n                invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {\r\n                    var nodePreviousSibling = node.previousSibling;\r\n                    var newNodes = preprocessNode.call(provider, node);\r\n                    if (newNodes) {\r\n                        if (node === firstNode)\r\n                            firstNode = newNodes[0] || nextNodeInRange;\r\n                        if (node === lastNode)\r\n                            lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;\r\n                    }\r\n                });\r\n\r\n                // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.\r\n                // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real\r\n                // first node needs to be in the array).\r\n                continuousNodeArray.length = 0;\r\n                if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there's nothing left to do\r\n                    return;\r\n                }\r\n                if (firstNode === lastNode) {\r\n                    continuousNodeArray.push(firstNode);\r\n                } else {\r\n                    continuousNodeArray.push(firstNode, lastNode);\r\n                    ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n                }\r\n            }\r\n\r\n            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)\r\n            // whereas a regular applyBindings won't introduce new memoized nodes\r\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                if (node.nodeType === 1 || node.nodeType === 8)\r\n                    ko.applyBindings(bindingContext, node);\r\n            });\r\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                if (node.nodeType === 1 || node.nodeType === 8)\r\n                    ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);\r\n            });\r\n\r\n            // Make sure any changes done by applyBindings or unmemoize are reflected in the array\r\n            ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n        }\r\n    }\r\n\r\n    function getFirstNodeFromPossibleArray(nodeOrNodeArray) {\r\n        return nodeOrNodeArray.nodeType ? nodeOrNodeArray\r\n                                        : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]\r\n                                        : null;\r\n    }\r\n\r\n    function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {\r\n        options = options || {};\r\n        var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n        var templateDocument = (firstTargetNode || template || {}).ownerDocument;\r\n        var templateEngineToUse = (options['templateEngine'] || _templateEngine);\r\n        ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);\r\n        var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);\r\n\r\n        // Loosely check result is an array of DOM nodes\r\n        if ((typeof renderedNodesArray.length != \"number\") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != \"number\"))\r\n            throw new Error(\"Template engine must return an array of DOM nodes\");\r\n\r\n        var haveAddedNodesToParent = false;\r\n        switch (renderMode) {\r\n            case \"replaceChildren\":\r\n                ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);\r\n                haveAddedNodesToParent = true;\r\n                break;\r\n            case \"replaceNode\":\r\n                ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);\r\n                haveAddedNodesToParent = true;\r\n                break;\r\n            case \"ignoreTargetNode\": break;\r\n            default:\r\n                throw new Error(\"Unknown renderMode: \" + renderMode);\r\n        }\r\n\r\n        if (haveAddedNodesToParent) {\r\n            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);\r\n            if (options['afterRender'])\r\n                ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext['$data']]);\r\n        }\r\n\r\n        return renderedNodesArray;\r\n    }\r\n\r\n    function resolveTemplateName(template, data, context) {\r\n        // The template can be specified as:\r\n        if (ko.isObservable(template)) {\r\n            // 1. An observable, with string value\r\n            return template();\r\n        } else if (typeof template === 'function') {\r\n            // 2. A function of (data, context) returning a string\r\n            return template(data, context);\r\n        } else {\r\n            // 3. A string\r\n            return template;\r\n        }\r\n    }\r\n\r\n    ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {\r\n        options = options || {};\r\n        if ((options['templateEngine'] || _templateEngine) == undefined)\r\n            throw new Error(\"Set a template engine before calling renderTemplate\");\r\n        renderMode = renderMode || \"replaceChildren\";\r\n\r\n        if (targetNodeOrNodeArray) {\r\n            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n\r\n            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)\r\n            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == \"replaceNode\") ? firstTargetNode.parentNode : firstTargetNode;\r\n\r\n            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes\r\n                function () {\r\n                    // Ensure we've got a proper binding context to work with\r\n                    var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))\r\n                        ? dataOrBindingContext\r\n                        : new ko.bindingContext(dataOrBindingContext, null, null, null, { \"exportDependencies\": true });\r\n\r\n                    var templateName = resolveTemplateName(template, bindingContext['$data'], bindingContext),\r\n                        renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);\r\n\r\n                    if (renderMode == \"replaceNode\") {\r\n                        targetNodeOrNodeArray = renderedNodesArray;\r\n                        firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n                    }\r\n                },\r\n                null,\r\n                { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }\r\n            );\r\n        } else {\r\n            // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node\r\n            return ko.memoization.memoize(function (domNode) {\r\n                ko.renderTemplate(template, dataOrBindingContext, options, domNode, \"replaceNode\");\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {\r\n        // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then\r\n        // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.\r\n        var arrayItemContext;\r\n\r\n        // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode\r\n        var executeTemplateForArrayItem = function (arrayValue, index) {\r\n            // Support selecting template as a function of the data being rendered\r\n            arrayItemContext = parentBindingContext['createChildContext'](arrayValue, options['as'], function(context) {\r\n                context['$index'] = index;\r\n            });\r\n\r\n            var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);\r\n            return executeTemplate(null, \"ignoreTargetNode\", templateName, arrayItemContext, options);\r\n        }\r\n\r\n        // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode\r\n        var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {\r\n            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);\r\n            if (options['afterRender'])\r\n                options['afterRender'](addedNodesArray, arrayValue);\r\n\r\n            // release the \"cache\" variable, so that it can be collected by\r\n            // the GC when its value isn't used from within the bindings anymore.\r\n            arrayItemContext = null;\r\n        };\r\n\r\n        return ko.dependentObservable(function () {\r\n            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];\r\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                unwrappedArray = [unwrappedArray];\r\n\r\n            // Filter out any entries marked as destroyed\r\n            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n            });\r\n\r\n            // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).\r\n            // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.\r\n            ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);\r\n\r\n        }, null, { disposeWhenNodeIsRemoved: targetNode });\r\n    };\r\n\r\n    var templateComputedDomDataKey = ko.utils.domData.nextKey();\r\n    function disposeOldComputedAndStoreNewOne(element, newComputed) {\r\n        var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);\r\n        if (oldComputed && (typeof(oldComputed.dispose) == 'function'))\r\n            oldComputed.dispose();\r\n        ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed && newComputed.isActive()) ? newComputed : undefined);\r\n    }\r\n\r\n    ko.bindingHandlers['template'] = {\r\n        'init': function(element, valueAccessor) {\r\n            // Support anonymous templates\r\n            var bindingValue = ko.utils.unwrapObservable(valueAccessor());\r\n            if (typeof bindingValue == \"string\" || bindingValue['name']) {\r\n                // It's a named template - clear the element\r\n                ko.virtualElements.emptyNode(element);\r\n            } else if ('nodes' in bindingValue) {\r\n                // We've been given an array of DOM nodes. Save them as the template source.\r\n                // There is no known use case for the node array being an observable array (if the output\r\n                // varies, put that behavior *into* your template - that's what templates are for), and\r\n                // the implementation would be a mess, so assert that it's not observable.\r\n                var nodes = bindingValue['nodes'] || [];\r\n                if (ko.isObservable(nodes)) {\r\n                    throw new Error('The \"nodes\" option must be a plain, non-observable array.');\r\n                }\r\n                var container = ko.utils.moveCleanedNodesToContainerElement(nodes); // This also removes the nodes from their current parent\r\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n            } else {\r\n                // It's an anonymous template - store the element contents, then clear the element\r\n                var templateNodes = ko.virtualElements.childNodes(element),\r\n                    container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent\r\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n            }\r\n            return { 'controlsDescendantBindings': true };\r\n        },\r\n        'update': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var value = valueAccessor(),\r\n                options = ko.utils.unwrapObservable(value),\r\n                shouldDisplay = true,\r\n                templateComputed = null,\r\n                templateName;\r\n\r\n            if (typeof options == \"string\") {\r\n                templateName = value;\r\n                options = {};\r\n            } else {\r\n                templateName = options['name'];\r\n\r\n                // Support \"if\"/\"ifnot\" conditions\r\n                if ('if' in options)\r\n                    shouldDisplay = ko.utils.unwrapObservable(options['if']);\r\n                if (shouldDisplay && 'ifnot' in options)\r\n                    shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);\r\n            }\r\n\r\n            if ('foreach' in options) {\r\n                // Render once for each data point (treating data set as empty if shouldDisplay==false)\r\n                var dataArray = (shouldDisplay && options['foreach']) || [];\r\n                templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);\r\n            } else if (!shouldDisplay) {\r\n                ko.virtualElements.emptyNode(element);\r\n            } else {\r\n                // Render once for this single data point (or use the viewModel if no data was provided)\r\n                var innerBindingContext = ('data' in options) ?\r\n                    bindingContext.createStaticChildContext(options['data'], options['as']) :  // Given an explitit 'data' value, we create a child binding context for it\r\n                    bindingContext;                                                        // Given no explicit 'data' value, we retain the same binding context\r\n                templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);\r\n            }\r\n\r\n            // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)\r\n            disposeOldComputedAndStoreNewOne(element, templateComputed);\r\n        }\r\n    };\r\n\r\n    // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.\r\n    ko.expressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {\r\n        var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);\r\n\r\n        if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])\r\n            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)\r\n\r\n        if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, \"name\"))\r\n            return null; // Named templates can be rewritten, so return \"no error\"\r\n        return \"This template engine does not support anonymous templates nested within its templates\";\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings['template'] = true;\r\n})();\r\n\r\nko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);\r\nko.exportSymbol('renderTemplate', ko.renderTemplate);\r\n// Go through the items that have been added and deleted and try to find matches between them.\r\nko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\r\n    if (left.length && right.length) {\r\n        var failedCompares, l, r, leftItem, rightItem;\r\n        for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {\r\n            for (r = 0; rightItem = right[r]; ++r) {\r\n                if (leftItem['value'] === rightItem['value']) {\r\n                    leftItem['moved'] = rightItem['index'];\r\n                    rightItem['moved'] = leftItem['index'];\r\n                    right.splice(r, 1);         // This item is marked as moved; so remove it from right list\r\n                    failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures\r\n                    break;\r\n                }\r\n            }\r\n            failedCompares += r;\r\n        }\r\n    }\r\n};\r\n\r\nko.utils.compareArrays = (function () {\r\n    var statusNotInOld = 'added', statusNotInNew = 'deleted';\r\n\r\n    // Simple calculation based on Levenshtein distance.\r\n    function compareArrays(oldArray, newArray, options) {\r\n        // For backward compatibility, if the third arg is actually a bool, interpret\r\n        // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.\r\n        options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});\r\n        oldArray = oldArray || [];\r\n        newArray = newArray || [];\r\n\r\n        if (oldArray.length < newArray.length)\r\n            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);\r\n        else\r\n            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\r\n    }\r\n\r\n    function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\r\n        var myMin = Math.min,\r\n            myMax = Math.max,\r\n            editDistanceMatrix = [],\r\n            smlIndex, smlIndexMax = smlArray.length,\r\n            bigIndex, bigIndexMax = bigArray.length,\r\n            compareRange = (bigIndexMax - smlIndexMax) || 1,\r\n            maxDistance = smlIndexMax + bigIndexMax + 1,\r\n            thisRow, lastRow,\r\n            bigIndexMaxForRow, bigIndexMinForRow;\r\n\r\n        for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {\r\n            lastRow = thisRow;\r\n            editDistanceMatrix.push(thisRow = []);\r\n            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\r\n            bigIndexMinForRow = myMax(0, smlIndex - 1);\r\n            for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {\r\n                if (!bigIndex)\r\n                    thisRow[bigIndex] = smlIndex + 1;\r\n                else if (!smlIndex)  // Top row - transform empty array into new array via additions\r\n                    thisRow[bigIndex] = bigIndex + 1;\r\n                else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])\r\n                    thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)\r\n                else {\r\n                    var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)\r\n                    var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)\r\n                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        var editScript = [], meMinusOne, notInSml = [], notInBig = [];\r\n        for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\r\n            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\r\n            if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {\r\n                notInSml.push(editScript[editScript.length] = {     // added\r\n                    'status': statusNotInSml,\r\n                    'value': bigArray[--bigIndex],\r\n                    'index': bigIndex });\r\n            } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\r\n                notInBig.push(editScript[editScript.length] = {     // deleted\r\n                    'status': statusNotInBig,\r\n                    'value': smlArray[--smlIndex],\r\n                    'index': smlIndex });\r\n            } else {\r\n                --bigIndex;\r\n                --smlIndex;\r\n                if (!options['sparse']) {\r\n                    editScript.push({\r\n                        'status': \"retained\",\r\n                        'value': bigArray[bigIndex] });\r\n                }\r\n            }\r\n        }\r\n\r\n        // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\r\n        // smlIndexMax keeps the time complexity of this algorithm linear.\r\n        ko.utils.findMovesInArrayComparison(notInBig, notInSml, !options['dontLimitMoves'] && smlIndexMax * 10);\r\n\r\n        return editScript.reverse();\r\n    }\r\n\r\n    return compareArrays;\r\n})();\r\n\r\nko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);\r\n(function () {\r\n    // Objective:\r\n    // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,\r\n    //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node\r\n    // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node\r\n    //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we\r\n    //   previously mapped - retain those nodes, and just insert/delete other ones\r\n\r\n    // \"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node\r\n    // You can use this, for example, to activate bindings on those nodes.\r\n\r\n    function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {\r\n        // Map this array value inside a dependentObservable so we re-map when any dependency changes\r\n        var mappedNodes = [];\r\n        var dependentObservable = ko.dependentObservable(function() {\r\n            var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];\r\n\r\n            // On subsequent evaluations, just replace the previously-inserted DOM nodes\r\n            if (mappedNodes.length > 0) {\r\n                ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);\r\n                if (callbackAfterAddingNodes)\r\n                    ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);\r\n            }\r\n\r\n            // Replace the contents of the mappedNodes array, thereby updating the record\r\n            // of which nodes would be deleted if valueToMap was itself later removed\r\n            mappedNodes.length = 0;\r\n            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);\r\n        }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes); } });\r\n        return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };\r\n    }\r\n\r\n    var lastMappingResultDomDataKey = ko.utils.domData.nextKey(),\r\n        deletedItemDummyValue = ko.utils.domData.nextKey();\r\n\r\n    ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {\r\n        // Compare the provided array against the previous one\r\n        array = array || [];\r\n        options = options || {};\r\n        var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;\r\n        var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];\r\n        var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });\r\n        var editScript = ko.utils.compareArrays(lastArray, array, options['dontLimitMoves']);\r\n\r\n        // Build the new mapping result\r\n        var newMappingResult = [];\r\n        var lastMappingResultIndex = 0;\r\n        var newMappingResultIndex = 0;\r\n\r\n        var nodesToDelete = [];\r\n        var itemsToProcess = [];\r\n        var itemsForBeforeRemoveCallbacks = [];\r\n        var itemsForMoveCallbacks = [];\r\n        var itemsForAfterAddCallbacks = [];\r\n        var mapData;\r\n\r\n        function itemMovedOrRetained(editScriptIndex, oldPosition) {\r\n            mapData = lastMappingResult[oldPosition];\r\n            if (newMappingResultIndex !== oldPosition)\r\n                itemsForMoveCallbacks[editScriptIndex] = mapData;\r\n            // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray\r\n            mapData.indexObservable(newMappingResultIndex++);\r\n            ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);\r\n            newMappingResult.push(mapData);\r\n            itemsToProcess.push(mapData);\r\n        }\r\n\r\n        function callCallback(callback, items) {\r\n            if (callback) {\r\n                for (var i = 0, n = items.length; i < n; i++) {\r\n                    if (items[i]) {\r\n                        ko.utils.arrayForEach(items[i].mappedNodes, function(node) {\r\n                            callback(node, i, items[i].arrayEntry);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {\r\n            movedIndex = editScriptItem['moved'];\r\n            switch (editScriptItem['status']) {\r\n                case \"deleted\":\r\n                    if (movedIndex === undefined) {\r\n                        mapData = lastMappingResult[lastMappingResultIndex];\r\n\r\n                        // Stop tracking changes to the mapping for these nodes\r\n                        if (mapData.dependentObservable) {\r\n                            mapData.dependentObservable.dispose();\r\n                            mapData.dependentObservable = undefined;\r\n                        }\r\n\r\n                        // Queue these nodes for later removal\r\n                        if (ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode).length) {\r\n                            if (options['beforeRemove']) {\r\n                                newMappingResult.push(mapData);\r\n                                itemsToProcess.push(mapData);\r\n                                if (mapData.arrayEntry === deletedItemDummyValue) {\r\n                                    mapData = null;\r\n                                } else {\r\n                                    itemsForBeforeRemoveCallbacks[i] = mapData;\r\n                                }\r\n                            }\r\n                            if (mapData) {\r\n                                nodesToDelete.push.apply(nodesToDelete, mapData.mappedNodes);\r\n                            }\r\n                        }\r\n                    }\r\n                    lastMappingResultIndex++;\r\n                    break;\r\n\r\n                case \"retained\":\r\n                    itemMovedOrRetained(i, lastMappingResultIndex++);\r\n                    break;\r\n\r\n                case \"added\":\r\n                    if (movedIndex !== undefined) {\r\n                        itemMovedOrRetained(i, movedIndex);\r\n                    } else {\r\n                        mapData = { arrayEntry: editScriptItem['value'], indexObservable: ko.observable(newMappingResultIndex++) };\r\n                        newMappingResult.push(mapData);\r\n                        itemsToProcess.push(mapData);\r\n                        if (!isFirstExecution)\r\n                            itemsForAfterAddCallbacks[i] = mapData;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Store a copy of the array items we just considered so we can difference it next time\r\n        ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);\r\n\r\n        // Call beforeMove first before any changes have been made to the DOM\r\n        callCallback(options['beforeMove'], itemsForMoveCallbacks);\r\n\r\n        // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)\r\n        ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);\r\n\r\n        // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)\r\n        for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {\r\n            // Get nodes for newly added items\r\n            if (!mapData.mappedNodes)\r\n                ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));\r\n\r\n            // Put nodes in the right place if they aren't there already\r\n            for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {\r\n                if (node !== nextNode)\r\n                    ko.virtualElements.insertAfter(domNode, node, lastNode);\r\n            }\r\n\r\n            // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)\r\n            if (!mapData.initialized && callbackAfterAddingNodes) {\r\n                callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);\r\n                mapData.initialized = true;\r\n            }\r\n        }\r\n\r\n        // If there's a beforeRemove callback, call it after reordering.\r\n        // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using\r\n        // some sort of animation, which is why we first reorder the nodes that will be removed. If the\r\n        // callback instead removes the nodes right away, it would be more efficient to skip reordering them.\r\n        // Perhaps we'll make that change in the future if this scenario becomes more common.\r\n        callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);\r\n\r\n        // Replace the stored values of deleted items with a dummy value. This provides two benefits: it marks this item\r\n        // as already \"removed\" so we won't call beforeRemove for it again, and it ensures that the item won't match up\r\n        // with an actual item in the array and appear as \"retained\" or \"moved\".\r\n        for (i = 0; i < itemsForBeforeRemoveCallbacks.length; ++i) {\r\n            if (itemsForBeforeRemoveCallbacks[i]) {\r\n                itemsForBeforeRemoveCallbacks[i].arrayEntry = deletedItemDummyValue;\r\n            }\r\n        }\r\n\r\n        // Finally call afterMove and afterAdd callbacks\r\n        callCallback(options['afterMove'], itemsForMoveCallbacks);\r\n        callCallback(options['afterAdd'], itemsForAfterAddCallbacks);\r\n    }\r\n})();\r\n\r\nko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);\r\nko.nativeTemplateEngine = function () {\r\n    this['allowTemplateRewriting'] = false;\r\n}\r\n\r\nko.nativeTemplateEngine.prototype = new ko.templateEngine();\r\nko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;\r\nko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n    var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly\r\n        templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,\r\n        templateNodes = templateNodesFunc ? templateSource['nodes']() : null;\r\n\r\n    if (templateNodes) {\r\n        return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);\r\n    } else {\r\n        var templateText = templateSource['text']();\r\n        return ko.utils.parseHtmlFragment(templateText, templateDocument);\r\n    }\r\n};\r\n\r\nko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();\r\nko.setTemplateEngine(ko.nativeTemplateEngine.instance);\r\n\r\nko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);\r\n(function() {\r\n    ko.jqueryTmplTemplateEngine = function () {\r\n        // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl\r\n        // doesn't expose a version number, so we have to infer it.\r\n        // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,\r\n        // which KO internally refers to as version \"2\", so older versions are no longer detected.\r\n        var jQueryTmplVersion = this.jQueryTmplVersion = (function() {\r\n            if (!jQueryInstance || !(jQueryInstance['tmpl']))\r\n                return 0;\r\n            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.\r\n            try {\r\n                if (jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {\r\n                    // Since 1.0.0pre, custom tags should append markup to an array called \"__\"\r\n                    return 2; // Final version of jquery.tmpl\r\n                }\r\n            } catch(ex) { /* Apparently not the version we were looking for */ }\r\n\r\n            return 1; // Any older version that we don't support\r\n        })();\r\n\r\n        function ensureHasReferencedJQueryTemplates() {\r\n            if (jQueryTmplVersion < 2)\r\n                throw new Error(\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\");\r\n        }\r\n\r\n        function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {\r\n            return jQueryInstance['tmpl'](compiledTemplate, data, jQueryTemplateOptions);\r\n        }\r\n\r\n        this['renderTemplateSource'] = function(templateSource, bindingContext, options, templateDocument) {\r\n            templateDocument = templateDocument || document;\r\n            options = options || {};\r\n            ensureHasReferencedJQueryTemplates();\r\n\r\n            // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)\r\n            var precompiled = templateSource['data']('precompiled');\r\n            if (!precompiled) {\r\n                var templateText = templateSource['text']() || \"\";\r\n                // Wrap in \"with($whatever.koBindingContext) { ... }\"\r\n                templateText = \"{{ko_with $item.koBindingContext}}\" + templateText + \"{{/ko_with}}\";\r\n\r\n                precompiled = jQueryInstance['template'](null, templateText);\r\n                templateSource['data']('precompiled', precompiled);\r\n            }\r\n\r\n            var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays\r\n            var jQueryTemplateOptions = jQueryInstance['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);\r\n\r\n            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);\r\n            resultNodes['appendTo'](templateDocument.createElement(\"div\")); // Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work\r\n\r\n            jQueryInstance['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders\r\n            return resultNodes;\r\n        };\r\n\r\n        this['createJavaScriptEvaluatorBlock'] = function(script) {\r\n            return \"{{ko_code ((function() { return \" + script + \" })()) }}\";\r\n        };\r\n\r\n        this['addTemplate'] = function(templateName, templateMarkup) {\r\n            document.write(\"<script type='text/html' id='\" + templateName + \"'>\" + templateMarkup + \"<\" + \"/script>\");\r\n        };\r\n\r\n        if (jQueryTmplVersion > 0) {\r\n            jQueryInstance['tmpl']['tag']['ko_code'] = {\r\n                open: \"__.push($1 || '');\"\r\n            };\r\n            jQueryInstance['tmpl']['tag']['ko_with'] = {\r\n                open: \"with($1) {\",\r\n                close: \"} \"\r\n            };\r\n        }\r\n    };\r\n\r\n    ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();\r\n    ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;\r\n\r\n    // Use this one by default *only if jquery.tmpl is referenced*\r\n    var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();\r\n    if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)\r\n        ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);\r\n\r\n    ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);\r\n})();\r\n}));\r\n}());\r\n})();\r\n","mage/accordion.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/tabs'\r\n], function ($, tabs) {\r\n    'use strict';\r\n\r\n    $.widget('mage.accordion', tabs, {\r\n        options: {\r\n            active: [0],\r\n            multipleCollapsible: false,\r\n            openOnFocus: false\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _callCollapsible: function () {\r\n            var self = this,\r\n                disabled = false,\r\n                active = false;\r\n\r\n            if (typeof this.options.active === 'string') {\r\n                this.options.active = this.options.active.split(' ').map(function (item) {\r\n                    return parseInt(item, 10);\r\n                });\r\n            }\r\n\r\n            $.each(this.collapsibles, function (i) {\r\n                disabled = active = false;\r\n\r\n                if ($.inArray(i, self.options.disabled) !== -1) {\r\n                    disabled = true;\r\n                }\r\n\r\n                if ($.inArray(i, self.options.active) !== -1) {\r\n                    active = true;\r\n                }\r\n                self._instantiateCollapsible(this, i, active, disabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Overwrites default functionality to provide the option to activate/deactivate multiple sections simultaneous\r\n         * @param {*} action\r\n         * @param {*} index\r\n         * @private\r\n         */\r\n        _toggleActivate: function (action, index) {\r\n            var self = this;\r\n\r\n            if ($.isArray(index && this.options.multipleCollapsible)) {\r\n                $.each(index, function () {\r\n                    self.collapsibles.eq(this).collapsible(action);\r\n                });\r\n            } else if (index === undefined && this.options.multipleCollapsible) {\r\n                this.collapsibles.collapsible(action);\r\n            } else {\r\n                this._super(action, index);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * If the Accordion allows multiple section to be active at the same time, if deep linking is used\r\n         * sections that don't contain the id from anchor shouldn't be closed, otherwise the accordion uses the\r\n         * tabs behavior\r\n         * @private\r\n         */\r\n        _handleDeepLinking: function () {\r\n            if (!this.options.multipleCollapsible) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prevent default behavior that closes the other sections when one gets activated if the Accordion allows\r\n         * multiple sections simultaneous\r\n         * @private\r\n         */\r\n        _closeOthers: function () {\r\n            var self = this;\r\n\r\n            if (!this.options.multipleCollapsible) {\r\n                $.each(this.collapsibles, function () {\r\n                    $(this).on('beforeOpen', function () {\r\n                        self.collapsibles.not(this).collapsible('deactivate');\r\n                    });\r\n                });\r\n            }\r\n            $.each(this.collapsibles, function () {\r\n                $(this).on('beforeOpen', function () {\r\n                    var section = $(this);\r\n\r\n                    section.addClass('allow').prevAll().addClass('allow');\r\n                    section.nextAll().removeClass('allow');\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.accordion;\r\n});\r\n","mage/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/apply/main',\r\n    'Magento_Ui/js/lib/knockout/bootstrap'\r\n], function ($, mage) {\r\n    'use strict';\r\n\r\n    $.ajaxSetup({\r\n        cache: false\r\n    });\r\n\r\n    /**\r\n     * Init all components defined via data-mage-init attribute.\r\n     */\r\n    $(mage.apply);\r\n});\r\n","mage/calendar.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*eslint max-depth: 0*/\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/datepicker',\r\n    'jquery-ui-modules/timepicker'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var calendarBasePrototype,\r\n        datepickerPrototype = $.datepicker.constructor.prototype;\r\n\r\n    $.datepicker.markerClassName = '_has-datepicker';\r\n\r\n    /**\r\n     * Extend JQuery date picker prototype with store local time methods\r\n     */\r\n    $.extend(datepickerPrototype, {\r\n        /**\r\n         * Get date/time according to store settings.\r\n         * We use serverTimezoneOffset (in seconds) instead of serverTimezoneSeconds\r\n         * in order to have ability to know actual store time even if page hadn't been reloaded\r\n         * @returns {Date}\r\n         */\r\n        _getTimezoneDate: function (options) {\r\n            // local time in ms\r\n            var ms = Date.now();\r\n\r\n            options = options || $.calendarConfig || {};\r\n\r\n            // Adjust milliseconds according to store timezone offset,\r\n            // mind the GMT zero offset\r\n            if (typeof options.serverTimezoneOffset !== 'undefined') {\r\n                // Make UTC time and add store timezone offset in seconds\r\n                ms += new Date().getTimezoneOffset() * 60 * 1000 + options.serverTimezoneOffset * 1000;\r\n            } else if (typeof options.serverTimezoneSeconds !== 'undefined') {\r\n                //Set milliseconds according to client local timezone offset\r\n                ms = (options.serverTimezoneSeconds + new Date().getTimezoneOffset() * 60) * 1000;\r\n            }\r\n\r\n            return new Date(ms);\r\n        },\r\n\r\n        /**\r\n         * Set date/time according to store settings.\r\n         * @param {String|Object} target - the target input field or division or span\r\n         */\r\n        _setTimezoneDateDatepicker: function (target) {\r\n            this._setDateDatepicker(target, this._getTimezoneDate());\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Widget calendar\r\n     */\r\n    $.widget('mage.calendar', {\r\n        options: {\r\n            autoComplete: true\r\n        },\r\n\r\n        /**\r\n         * Merge global options with options passed to widget invoke\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._enableAMPM();\r\n            this.options = $.extend(\r\n                {},\r\n                $.calendarConfig ? $.calendarConfig : {},\r\n                this.options.showsTime ? {\r\n                    showTime: true,\r\n                    showHour: true,\r\n                    showMinute: true\r\n                } : {},\r\n                this.options\r\n            );\r\n            this._initPicker(this.element);\r\n            this._overwriteGenerateHtml();\r\n        },\r\n\r\n        /**\r\n         * Get picker name\r\n         * @protected\r\n         */\r\n        _picker: function () {\r\n            return this.options.showsTime ? 'datetimepicker' : 'datepicker';\r\n        },\r\n\r\n        /**\r\n         * Fix for Timepicker - Set ampm option for Timepicker if timeformat contains string 'tt'\r\n         * @protected\r\n         */\r\n        _enableAMPM: function () {\r\n            if (this.options.timeFormat && this.options.timeFormat.indexOf('tt') >= 0) {\r\n                this.options.ampm = true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wrapper for overwrite jQuery UI datepicker function.\r\n         */\r\n        _overwriteGenerateHtml: function () {\r\n            /**\r\n             * Overwrite jQuery UI datepicker function.\r\n             * Reason: magento date could be set before calendar show\r\n             * but local date will be styled as current in original _generateHTML\r\n             *\r\n             * @param {Object} inst - instance datepicker.\r\n             * @return {String} html template\r\n             */\r\n            $.datepicker.constructor.prototype._generateHTML = function (inst) {\r\n                var today = this._getTimezoneDate(),\r\n                    isRTL = this._get(inst, 'isRTL'),\r\n                    showButtonPanel = this._get(inst, 'showButtonPanel'),\r\n                    hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext'),\r\n                    navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat'),\r\n                    numMonths = this._getNumberOfMonths(inst),\r\n                    showCurrentAtPos = this._get(inst, 'showCurrentAtPos'),\r\n                    stepMonths = this._get(inst, 'stepMonths'),\r\n                    isMultiMonth = parseInt(numMonths[0], 10) !== 1 || parseInt(numMonths[1], 10) !== 1,\r\n                    currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) :\r\n                        new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),\r\n                    minDate = this._getMinMaxDate(inst, 'min'),\r\n                    maxDate = this._getMinMaxDate(inst, 'max'),\r\n                    drawMonth = inst.drawMonth - showCurrentAtPos,\r\n                    drawYear = inst.drawYear,\r\n                    maxDraw,\r\n                    prevText = this._get(inst, 'prevText'),\r\n                    prev,\r\n                    nextText = this._get(inst, 'nextText'),\r\n                    next,\r\n                    currentText = this._get(inst, 'currentText'),\r\n                    gotoDate,\r\n                    controls,\r\n                    buttonPanel,\r\n                    firstDay,\r\n                    showWeek = this._get(inst, 'showWeek'),\r\n                    dayNames = this._get(inst, 'dayNames'),\r\n                    dayNamesMin = this._get(inst, 'dayNamesMin'),\r\n                    monthNames = this._get(inst, 'monthNames'),\r\n                    monthNamesShort =  this._get(inst, 'monthNamesShort'),\r\n                    beforeShowDay = this._get(inst, 'beforeShowDay'),\r\n                    showOtherMonths = this._get(inst, 'showOtherMonths'),\r\n                    selectOtherMonths = this._get(inst, 'selectOtherMonths'),\r\n                    defaultDate = this._getDefaultDate(inst),\r\n                    html = '',\r\n                    row = 0,\r\n                    col = 0,\r\n                    selectedDate,\r\n                    cornerClass = ' ui-corner-all',\r\n                    group = '',\r\n                    calender = '',\r\n                    dow = 0,\r\n                    thead,\r\n                    day,\r\n                    daysInMonth,\r\n                    leadDays,\r\n                    curRows,\r\n                    numRows,\r\n                    printDate,\r\n                    dRow = 0,\r\n                    tbody,\r\n                    daySettings,\r\n                    otherMonth,\r\n                    unselectable;\r\n\r\n                if (drawMonth < 0) {\r\n                    drawMonth += 12;\r\n                    drawYear--;\r\n                }\r\n\r\n                if (maxDate) {\r\n                    maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),\r\n                        maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));\r\n                    maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;\r\n\r\n                    while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {\r\n                        drawMonth--;\r\n\r\n                        if (drawMonth < 0) {\r\n                            drawMonth = 11;\r\n                            drawYear--;\r\n\r\n                        }\r\n                    }\r\n                }\r\n                inst.drawMonth = drawMonth;\r\n                inst.drawYear = drawYear;\r\n                prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText,\r\n                    this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),\r\n                    this._getFormatConfig(inst));\r\n                prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?\r\n                    '<a class=\"ui-datepicker-prev ui-corner-all\" data-handler=\"prev\" data-event=\"click\"' +\r\n                    ' title=\"' + prevText + '\">' +\r\n                    '<span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '\">' +\r\n                    '' + prevText + '</span></a>'\r\n                    : hideIfNoPrevNext ? ''\r\n                        :   '<a class=\"ui-datepicker-prev ui-corner-all ui-state-disabled\" title=\"' +\r\n                            '' + prevText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' +\r\n                            '' + (isRTL ? 'e' : 'w') + '\">' + prevText + '</span></a>';\r\n                nextText = !navigationAsDateFormat ?\r\n                    nextText\r\n                    :   this.formatDate(nextText,\r\n                        this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),\r\n                        this._getFormatConfig(inst));\r\n                next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?\r\n                    '<a class=\"ui-datepicker-next ui-corner-all\" data-handler=\"next\" data-event=\"click\"' +\r\n                    'title=\"' + nextText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' +\r\n                    '' + (isRTL ? 'w' : 'e') + '\">' + nextText + '</span></a>'\r\n                    : hideIfNoPrevNext ? ''\r\n                        :   '<a class=\"ui-datepicker-next ui-corner-all ui-state-disabled\" title=\"' + nextText + '\">' +\r\n                            '<span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '\">' + nextText +\r\n                            '</span></a>';\r\n                gotoDate = this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today;\r\n                currentText = !navigationAsDateFormat ? currentText :\r\n                    this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));\r\n                controls = !inst.inline ?\r\n                    '<button type=\"button\" class=\"ui-datepicker-close ui-state-default ui-priority-primary ' +\r\n                    'ui-corner-all\" data-handler=\"hide\" data-event=\"click\">' +\r\n                    this._get(inst, 'closeText') + '</button>'\r\n                    : '';\r\n                buttonPanel = showButtonPanel ?\r\n                    '<div class=\"ui-datepicker-buttonpane ui-widget-content\">' + (isRTL ? controls : '') +\r\n                    (this._isInRange(inst, gotoDate) ? '<button type=\"button\" class=\"ui-datepicker-current ' +\r\n                    'ui-state-default ui-priority-secondary ui-corner-all\" data-handler=\"today\" data-event=\"click\"' +\r\n                    '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';\r\n                firstDay = parseInt(this._get(inst, 'firstDay'), 10);\r\n                firstDay = isNaN(firstDay) ? 0 : firstDay;\r\n\r\n                for (row = 0; row < numMonths[0]; row++) {\r\n                    this.maxRows = 4;\r\n\r\n                    for (col = 0; col < numMonths[1]; col++) {\r\n                        selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));\r\n\r\n                        calender = '';\r\n\r\n                        if (isMultiMonth) {\r\n                            calender += '<div class=\"ui-datepicker-group';\r\n\r\n                            if (numMonths[1] > 1) {\r\n                                switch (col) {\r\n                                    case 0: calender += ' ui-datepicker-group-first';\r\n                                        cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left');\r\n                                        break;\r\n\r\n                                    case numMonths[1] - 1: calender += ' ui-datepicker-group-last';\r\n                                        cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right');\r\n                                        break;\r\n\r\n                                    default: calender += ' ui-datepicker-group-middle'; cornerClass = '';\r\n                                }\r\n                            }\r\n                            calender += '\">';\r\n                        }\r\n                        calender += '<div class=\"ui-datepicker-header ' +\r\n                            'ui-widget-header ui-helper-clearfix' + cornerClass + '\">' +\r\n                            (/all|left/.test(cornerClass) && parseInt(row, 10) === 0 ? isRTL ? next : prev : '') +\r\n                            (/all|right/.test(cornerClass) && parseInt(row, 10) === 0 ? isRTL ? prev : next : '') +\r\n                            this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,\r\n                            row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers\r\n                            '</div><table class=\"ui-datepicker-calendar\"><thead>' +\r\n                            '<tr>';\r\n                        thead = showWeek ?\r\n                            '<th class=\"ui-datepicker-week-col\">' + this._get(inst, 'weekHeader') + '</th>' : '';\r\n\r\n                        for (dow = 0; dow < 7; dow++) { // days of the week\r\n                            day = (dow + firstDay) % 7;\r\n                            thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ?\r\n                                ' class=\"ui-datepicker-week-end\"' : '') + '>' +\r\n                                '<span title=\"' + dayNames[day] + '\">' + dayNamesMin[day] + '</span></th>';\r\n                        }\r\n                        calender += thead + '</tr></thead><tbody>';\r\n                        daysInMonth = this._getDaysInMonth(drawYear, drawMonth);\r\n\r\n                        if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {\r\n                            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);\r\n                        }\r\n                        leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;\r\n                        curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate\r\n                        numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows;\r\n                        this.maxRows = numRows;\r\n                        printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));\r\n\r\n                        for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows\r\n                            calender += '<tr>';\r\n                            tbody = !showWeek ? '' : '<td class=\"ui-datepicker-week-col\">' +\r\n                            this._get(inst, 'calculateWeek')(printDate) + '</td>';\r\n\r\n                            for (dow = 0; dow < 7; dow++) { // create date picker days\r\n                                daySettings = beforeShowDay ?\r\n                                    beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, ''];\r\n                                otherMonth = printDate.getMonth() !== drawMonth;\r\n                                unselectable = otherMonth && !selectOtherMonths || !daySettings[0] ||\r\n                                minDate && printDate < minDate || maxDate && printDate > maxDate;\r\n                                tbody += '<td class=\"' +\r\n                                ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends\r\n                                (otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months\r\n                                (printDate.getTime() === selectedDate.getTime() &&\r\n                                drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key\r\n                                defaultDate.getTime() === printDate.getTime() &&\r\n                                defaultDate.getTime() === selectedDate.getTime() ?\r\n                                    // or defaultDate is current printedDate and defaultDate is selectedDate\r\n                                ' ' + this._dayOverClass : '') + // highlight selected day\r\n                                (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled' : '') +\r\n                                (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates\r\n                                (printDate.getTime() === currentDate.getTime() ? ' ' + this._currentClass : '') +\r\n                                (printDate.getDate() === today.getDate() && printDate.getMonth() === today.getMonth() &&\r\n                                printDate.getYear() === today.getYear() ? ' ui-datepicker-today' : '')) + '\"' +\r\n                                ((!otherMonth || showOtherMonths) && daySettings[2] ?\r\n                                ' title=\"' + daySettings[2] + '\"' : '') + // cell title\r\n                                (unselectable ? '' : ' data-handler=\"selectDay\" data-event=\"click\" data-month=\"' +\r\n                                '' + printDate.getMonth() + '\" data-year=\"' + printDate.getFullYear() + '\"') + '>' +\r\n                                (otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months\r\n                                    unselectable ? '<span class=\"ui-state-default\">' + printDate.getDate() + '</span>'\r\n                                        : '<a class=\"ui-state-default' +\r\n                                    (printDate.getTime() === today.getTime() ? ' ' : '') +\r\n                                    (printDate.getTime() === currentDate.getTime() ? ' ui-state-active' : '') +\r\n                                    (otherMonth ? ' ui-priority-secondary' : '') +\r\n                                    '\" href=\"#\">' + printDate.getDate() + '</a>') + '</td>';\r\n                                printDate.setDate(printDate.getDate() + 1);\r\n                                printDate = this._daylightSavingAdjust(printDate);\r\n                            }\r\n                            calender += tbody + '</tr>';\r\n                        }\r\n                        drawMonth++;\r\n\r\n                        if (drawMonth > 11) {\r\n                            drawMonth = 0;\r\n                            drawYear++;\r\n                        }\r\n                        calender += '</tbody></table>' + (isMultiMonth ? '</div>' +\r\n                        (numMonths[0] > 0 && col === numMonths[1] - 1 ? '<div class=\"ui-datepicker-row-break\"></div>'\r\n                            : '') : '');\r\n                        group += calender;\r\n                    }\r\n                    html += group;\r\n                }\r\n                html += buttonPanel + ($.ui.ie6 && !inst.inline ?\r\n                    '<iframe src=\"javascript:false;\" class=\"ui-datepicker-cover\" frameborder=\"0\"></iframe>' : '');\r\n                inst._keyEvent = false;\r\n\r\n                return html;\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Set current date if the date is not set\r\n         * @protected\r\n         * @param {Object} element\r\n         */\r\n        _setCurrentDate: function (element) {\r\n            if (!element.val()) {\r\n                element[this._picker()]('setTimezoneDate').val('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init Datetimepicker\r\n         * @protected\r\n         * @param {Object} element\r\n         */\r\n        _initPicker: function (element) {\r\n            var picker = element[this._picker()](this.options),\r\n                pickerButtonText = picker.next('.ui-datepicker-trigger')\r\n                    .find('img')\r\n                    .attr('title');\r\n\r\n            picker.next('.ui-datepicker-trigger')\r\n                .addClass('v-middle')\r\n                .text('') // Remove jQuery UI datepicker generated image\r\n                .append('<span>' + pickerButtonText + '</span>');\r\n\r\n            $(element).attr('autocomplete', this.options.autoComplete ? 'on' : 'off');\r\n\r\n            this._setCurrentDate(element);\r\n        },\r\n\r\n        /**\r\n         * destroy instance of datetimepicker\r\n         */\r\n        _destroy: function () {\r\n            this.element[this._picker()]('destroy');\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Method is kept for backward compatibility and unit-tests acceptance\r\n         * see \\mage\\calendar\\calendar-test.js\r\n         * @return {Object} date\r\n         */\r\n        getTimezoneDate: function () {\r\n            return datepickerPrototype._getTimezoneDate.call(this, this.options);\r\n        }\r\n    });\r\n\r\n    calendarBasePrototype = $.mage.calendar.prototype;\r\n\r\n    /**\r\n     * Extension for Calendar - date and time format convert functionality\r\n     * @var {Object}\r\n     */\r\n    $.widget('mage.calendar', $.extend({}, calendarBasePrototype,\r\n            /** @lends {$.mage.calendar.prototype} */ {\r\n                /**\r\n                 * key - backend format, value - jquery format\r\n                 * @type {Object}\r\n                 * @private\r\n                 */\r\n                dateTimeFormat: {\r\n                    date: {\r\n                        'EEEE': 'DD',\r\n                        'EEE': 'D',\r\n                        'EE': 'D',\r\n                        'E': 'D',\r\n                        'D': 'o',\r\n                        'MMMM': 'MM',\r\n                        'MMM': 'M',\r\n                        'MM': 'mm',\r\n                        'M': 'mm',\r\n                        'yyyy': 'yy',\r\n                        'y': 'yy',\r\n                        'Y': 'yy',\r\n                        'yy': 'yy' // Always long year format on frontend\r\n                    },\r\n                    time: {\r\n                        'a': 'TT'\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Add Date and Time converting to _create method\r\n                 * @protected\r\n                 */\r\n                _create: function () {\r\n                    if (this.options.dateFormat) {\r\n                        this.options.dateFormat = this._convertFormat(this.options.dateFormat, 'date');\r\n                    }\r\n\r\n                    if (this.options.timeFormat) {\r\n                        this.options.timeFormat = this._convertFormat(this.options.timeFormat, 'time');\r\n                    }\r\n                    calendarBasePrototype._create.apply(this, arguments);\r\n                },\r\n\r\n                /**\r\n                 * Converting date or time format\r\n                 * @protected\r\n                 * @param {String} format\r\n                 * @param {String} type\r\n                 * @return {String}\r\n                 */\r\n                _convertFormat: function (format, type) {\r\n                    var symbols = format.match(/([a-z]+)/ig),\r\n                        separators = format.match(/([^a-z]+)/ig),\r\n                        self = this,\r\n                        convertedFormat = '';\r\n\r\n                    if (symbols) {\r\n                        $.each(symbols, function (key, val) {\r\n                            convertedFormat +=\r\n                                (self.dateTimeFormat[type][val] || val) +\r\n                                (separators[key] || '');\r\n                        });\r\n                    }\r\n\r\n                    return convertedFormat;\r\n                }\r\n            })\r\n    );\r\n\r\n    /**\r\n     * Widget dateRange\r\n     * @extends $.mage.calendar\r\n     */\r\n    $.widget('mage.dateRange', $.mage.calendar, {\r\n\r\n        /**\r\n         * creates two instances of datetimepicker for date range selection\r\n         * @protected\r\n         */\r\n        _initPicker: function () {\r\n            var from,\r\n                to;\r\n\r\n            if (this.options.from && this.options.to) {\r\n                from = this.element.find('#' + this.options.from.id);\r\n                to = this.element.find('#' + this.options.to.id);\r\n                this.options.onSelect = $.proxy(function (selectedDate) {\r\n                    to[this._picker()]('option', 'minDate', selectedDate);\r\n                }, this);\r\n                $.mage.calendar.prototype._initPicker.call(this, from);\r\n                from.on('change', $.proxy(function () {\r\n                    to[this._picker()]('option', 'minDate', from[this._picker()]('getDate'));\r\n                }, this));\r\n                this.options.onSelect = $.proxy(function (selectedDate) {\r\n                    from[this._picker()]('option', 'maxDate', selectedDate);\r\n                }, this);\r\n                $.mage.calendar.prototype._initPicker.call(this, to);\r\n                to.on('change', $.proxy(function () {\r\n                    from[this._picker()]('option', 'maxDate', to[this._picker()]('getDate'));\r\n                }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * destroy two instances of datetimepicker\r\n         */\r\n        _destroy: function () {\r\n            if (this.options.from) {\r\n                this.element.find('#' + this.options.from.id)[this._picker()]('destroy');\r\n            }\r\n\r\n            if (this.options.to) {\r\n                this.element.find('#' + this.options.to.id)[this._picker()]('destroy');\r\n            }\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    // Overrides the \"today\" button functionality to select today's date when clicked.\r\n    $.datepicker._gotoTodayOriginal = $.datepicker._gotoToday;\r\n\r\n    /**\r\n     * overwrite jQuery UI _showDatepicker function for proper HTML generation conditions.\r\n     *\r\n     */\r\n    $.datepicker._showDatepickerOriginal = $.datepicker._showDatepicker;\r\n\r\n    /**\r\n     * Triggers original method showDataPicker for rendering calendar\r\n     * @param {HTMLObject} input\r\n     * @private\r\n     */\r\n    $.datepicker._showDatepicker = function (input) {\r\n        if (!input.disabled) {\r\n            $.datepicker._showDatepickerOriginal.call(this, input);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * _gotoToday\r\n     * @param {Object} el\r\n     */\r\n    $.datepicker._gotoToday = function (el) {\r\n        //Set date/time according to timezone offset\r\n        $(el).datepicker('setTimezoneDate')\r\n            // To ensure that user can re-select date field without clicking outside it first.\r\n            .blur().trigger('change');\r\n    };\r\n\r\n    return {\r\n        dateRange:  $.mage.dateRange,\r\n        calendar:   $.mage.calendar\r\n    };\r\n});\r\n","mage/collapsible.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/core',\r\n    'jquery/jquery-storageapi',\r\n    'mage/mage'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var hideProps = {},\r\n        showProps = {};\r\n\r\n    hideProps.height = 'hide';\r\n    showProps.height = 'show';\r\n\r\n    $.widget('mage.collapsible', {\r\n        options: {\r\n            active: false,\r\n            disabled: false,\r\n            collapsible: true,\r\n            header: '[data-role=title]',\r\n            content: '[data-role=content]',\r\n            trigger: '[data-role=trigger]',\r\n            closedState: null,\r\n            openedState: null,\r\n            disabledState: null,\r\n            ajaxUrlElement: '[data-ajax=true]',\r\n            ajaxContent: false,\r\n            loadingClass: null,\r\n            saveState: false,\r\n            animate: false,\r\n            icons: {\r\n                activeHeader: null,\r\n                header: null\r\n            },\r\n            collateral: {\r\n                element: null,\r\n                openedState: null\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.storage = $.localStorage;\r\n            this.icons = false;\r\n\r\n            if (typeof this.options.icons === 'string') {\r\n                this.options.icons = $.parseJSON(this.options.icons);\r\n            }\r\n\r\n            this._processPanels();\r\n            this._processState();\r\n            this._refresh();\r\n\r\n            if (this.options.icons.header && this.options.icons.activeHeader) {\r\n                this._createIcons();\r\n                this.icons = true;\r\n            }\r\n\r\n            this.element.on('dimensionsChanged', function (e) {\r\n                if (e.target && e.target.classList.contains('active')) {\r\n                    this._scrollToTopIfNotVisible();\r\n                }\r\n            }.bind(this));\r\n\r\n            this._bind('click');\r\n            this._trigger('created');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _refresh: function () {\r\n            this.trigger.attr('tabIndex', 0);\r\n\r\n            if (this.options.active && !this.options.disabled) {\r\n                if (this.options.openedState) {\r\n                    this.element.addClass(this.options.openedState);\r\n                }\r\n\r\n                if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                    $(this.options.collateral.element).addClass(this.options.collateral.openedState);\r\n                }\r\n\r\n                if (this.options.ajaxContent) {\r\n                    this._loadContent();\r\n                }\r\n                // ARIA (updates aria attributes)\r\n                this.header.attr({\r\n                    'aria-selected': false\r\n                });\r\n            } else if (this.options.disabled) {\r\n                this.disable();\r\n            } else {\r\n                this.content.hide();\r\n\r\n                if (this.options.closedState) {\r\n                    this.element.addClass(this.options.closedState);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Processing the state:\r\n         *     If deep linking is used and the anchor is the id of the content or the content contains this id,\r\n         *     and the collapsible element is a nested one having collapsible parents, in order to see the content,\r\n         *     all the parents must be expanded.\r\n         * @private\r\n         */\r\n        _processState: function () {\r\n            var anchor = window.location.hash,\r\n                isValid = $.mage.isValidSelector(anchor),\r\n                urlPath = window.location.pathname.replace(/\\./g, ''),\r\n                state;\r\n\r\n            this.stateKey = encodeURIComponent(urlPath + this.element.attr('id'));\r\n\r\n            if (isValid &&\r\n                ($(this.content.find(anchor)).length > 0 || this.content.attr('id') === anchor.replace('#', ''))\r\n            ) {\r\n                this.element.parents('[data-collapsible=true]').collapsible('forceActivate');\r\n\r\n                if (!this.options.disabled) {\r\n                    this.options.active = true;\r\n\r\n                    if (this.options.saveState) { //eslint-disable-line max-depth\r\n                        this.storage.set(this.stateKey, true);\r\n                    }\r\n                }\r\n            } else if (this.options.saveState && !this.options.disabled) {\r\n                state = this.storage.get(this.stateKey);\r\n\r\n                if (typeof state === 'undefined' || state === null) {\r\n                    this.storage.set(this.stateKey, this.options.active);\r\n                } else if (state === true) {\r\n                    this.options.active = true;\r\n                } else if (state === false) {\r\n                    this.options.active = false;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _createIcons: function () {\r\n            var icons = this.options.icons;\r\n\r\n            if (icons) {\r\n                $('<span>')\r\n                    .addClass(icons.header)\r\n                    .attr('data-role', 'icons')\r\n                    .prependTo(this.header);\r\n\r\n                if (this.options.active && !this.options.disabled) {\r\n                    this.header.children('[data-role=icons]')\r\n                        .removeClass(icons.header)\r\n                        .addClass(icons.activeHeader);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroyIcons: function () {\r\n            this.header\r\n                .children('[data-role=icons]')\r\n                .remove();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            var options = this.options;\r\n\r\n            this.element.removeAttr('data-collapsible');\r\n\r\n            this.trigger.removeAttr('tabIndex');\r\n\r\n            if (options.openedState) {\r\n                this.element.removeClass(options.openedState);\r\n            }\r\n\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).removeClass(this.options.collateral.openedState);\r\n            }\r\n\r\n            if (options.closedState) {\r\n                this.element.removeClass(options.closedState);\r\n            }\r\n\r\n            if (options.disabledState) {\r\n                this.element.removeClass(options.disabledState);\r\n            }\r\n\r\n            if (this.icons) {\r\n                this._destroyIcons();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _processPanels: function () {\r\n            var headers, triggers;\r\n\r\n            this.element.attr('data-collapsible', 'true');\r\n\r\n            if (typeof this.options.header === 'object') {\r\n                this.header = this.options.header;\r\n            } else {\r\n                headers = this.element.find(this.options.header);\r\n\r\n                if (headers.length > 0) {\r\n                    this.header = headers.eq(0);\r\n                } else {\r\n                    this.header = this.element;\r\n                }\r\n            }\r\n\r\n            if (typeof this.options.content === 'object') {\r\n                this.content = this.options.content;\r\n            } else {\r\n                this.content = this.header.next(this.options.content).eq(0);\r\n            }\r\n\r\n            // ARIA (init aria attributes)\r\n            if (this.header.attr('id')) {\r\n                this.content.attr('aria-labelledby', this.header.attr('id'));\r\n            }\r\n\r\n            if (this.content.attr('id')) {\r\n                this.header.attr('aria-controls', this.content.attr('id'));\r\n            }\r\n\r\n            this.header\r\n                .attr({\r\n                    'role': 'tab',\r\n                    'aria-selected': this.options.active,\r\n                    'aria-expanded': this.options.active\r\n                });\r\n\r\n            // For collapsible widget only (not tabs or accordion)\r\n            if (this.header.parent().attr('role') !== 'presentation') {\r\n                this.header\r\n                    .parent()\r\n                    .attr('role', 'tablist');\r\n            }\r\n\r\n            this.content.attr({\r\n                'role': 'tabpanel',\r\n                'aria-hidden': !this.options.active\r\n            });\r\n\r\n            if (typeof this.options.trigger === 'object') {\r\n                this.trigger = this.options.trigger;\r\n            } else {\r\n                triggers = this.header.find(this.options.trigger);\r\n\r\n                if (triggers.length > 0) {\r\n                    this.trigger = triggers.eq(0);\r\n                } else {\r\n                    this.trigger = this.header;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var keyCode;\r\n\r\n            if (event.altKey || event.ctrlKey) {\r\n                return;\r\n            }\r\n\r\n            keyCode = $.ui.keyCode;\r\n\r\n            switch (event.keyCode) {\r\n                case keyCode.SPACE:\r\n                case keyCode.ENTER:\r\n                    this._eventHandler(event);\r\n                    break;\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _bind: function (event) {\r\n            var self = this;\r\n\r\n            this.events = {\r\n                keydown: '_keydown'\r\n            };\r\n\r\n            if (event) {\r\n                $.each(event.split(' '), function (index, eventName) {\r\n                    self.events[eventName] = '_eventHandler';\r\n                });\r\n            }\r\n            this._off(this.trigger);\r\n\r\n            if (!this.options.disabled) {\r\n                this._on(this.trigger, this.events);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable.\r\n         */\r\n        disable: function () {\r\n            this.options.disabled = true;\r\n            this._off(this.trigger);\r\n            this.forceDeactivate();\r\n\r\n            if (this.options.disabledState) {\r\n                this.element.addClass(this.options.disabledState);\r\n            }\r\n            this.trigger.attr('tabIndex', -1);\r\n        },\r\n\r\n        /**\r\n         * Enable.\r\n         */\r\n        enable: function () {\r\n            this.options.disabled = false;\r\n            this._on(this.trigger, this.events);\r\n            this.forceActivate();\r\n\r\n            if (this.options.disabledState) {\r\n                this.element.removeClass(this.options.disabledState);\r\n            }\r\n            this.trigger.attr('tabIndex', 0);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _eventHandler: function (event) {\r\n\r\n            if (this.options.active && this.options.collapsible) {\r\n                this.deactivate();\r\n            } else {\r\n                this.activate();\r\n\r\n            }\r\n            event.preventDefault();\r\n\r\n        },\r\n\r\n        /**\r\n         * @param {*} prop\r\n         * @private\r\n         */\r\n        _animate: function (prop) {\r\n            var duration,\r\n                easing,\r\n                animate = this.options.animate;\r\n\r\n            if (typeof animate === 'number') {\r\n                duration = animate;\r\n            }\r\n\r\n            if (typeof animate === 'string') {\r\n                animate = $.parseJSON(animate);\r\n            }\r\n            duration = duration || animate.duration;\r\n            easing = animate.easing;\r\n            this.content.animate(prop, duration, easing);\r\n        },\r\n\r\n        /**\r\n         * Deactivate.\r\n         */\r\n        deactivate: function () {\r\n            if (this.options.animate) {\r\n                this._animate(hideProps);\r\n            } else {\r\n                this.content.hide();\r\n            }\r\n            this._close();\r\n        },\r\n\r\n        /**\r\n         * Force deactivate.\r\n         */\r\n        forceDeactivate: function () {\r\n            this.content.hide();\r\n            this._close();\r\n\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _close: function () {\r\n            this.options.active = false;\r\n\r\n            if (this.options.saveState) {\r\n                this.storage.set(this.stateKey, false);\r\n            }\r\n\r\n            if (this.options.openedState) {\r\n                this.element.removeClass(this.options.openedState);\r\n            }\r\n\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).removeClass(this.options.collateral.openedState);\r\n            }\r\n\r\n            if (this.options.closedState) {\r\n                this.element.addClass(this.options.closedState);\r\n            }\r\n\r\n            if (this.icons) {\r\n                this.header.children('[data-role=icons]')\r\n                    .removeClass(this.options.icons.activeHeader)\r\n                    .addClass(this.options.icons.header);\r\n            }\r\n\r\n            // ARIA (updates aria attributes)\r\n            this.header.attr({\r\n                'aria-selected': 'false',\r\n                'aria-expanded': 'false'\r\n            });\r\n            this.content.attr({\r\n                'aria-hidden': 'true'\r\n            });\r\n\r\n            this.element.trigger('dimensionsChanged', {\r\n                opened: false\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Activate.\r\n         *\r\n         * @return void;\r\n         */\r\n        activate: function () {\r\n            if (this.options.disabled) {\r\n                return;\r\n            }\r\n\r\n            if (this.options.animate) {\r\n                this._animate(showProps);\r\n            } else {\r\n                this.content.show();\r\n            }\r\n            this._open();\r\n        },\r\n\r\n        /**\r\n         * Force activate.\r\n         */\r\n        forceActivate: function () {\r\n            if (!this.options.disabled) {\r\n                this.content.show();\r\n                this._open();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _open: function () {\r\n            this.element.trigger('beforeOpen');\r\n            this.options.active = true;\r\n\r\n            if (this.options.ajaxContent) {\r\n                this._loadContent();\r\n            }\r\n\r\n            if (this.options.saveState) {\r\n                this.storage.set(this.stateKey, true);\r\n            }\r\n\r\n            if (this.options.openedState) {\r\n                this.element.addClass(this.options.openedState);\r\n            }\r\n\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).addClass(this.options.collateral.openedState);\r\n            }\r\n\r\n            if (this.options.closedState) {\r\n                this.element.removeClass(this.options.closedState);\r\n            }\r\n\r\n            if (this.icons) {\r\n                this.header.children('[data-role=icons]')\r\n                    .removeClass(this.options.icons.header)\r\n                    .addClass(this.options.icons.activeHeader);\r\n            }\r\n\r\n            // ARIA (updates aria attributes)\r\n            this.header.attr({\r\n                'aria-selected': 'true',\r\n                'aria-expanded': 'true'\r\n            });\r\n            this.content.attr({\r\n                'aria-hidden': 'false'\r\n            });\r\n\r\n            this.element.trigger('dimensionsChanged', {\r\n                opened: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _loadContent: function () {\r\n            var url = this.element.find(this.options.ajaxUrlElement).attr('href'),\r\n                that = this;\r\n\r\n            if (url) {\r\n                that.xhr = $.get({\r\n                    url: url,\r\n                    dataType: 'html'\r\n                }, function () {\r\n                });\r\n            }\r\n\r\n            if (that.xhr && that.xhr.statusText !== 'canceled') {\r\n                if (that.options.loadingClass) {\r\n                    that.element.addClass(that.options.loadingClass);\r\n                }\r\n                that.content.attr('aria-busy', 'true');\r\n                that.xhr.done(function (response) {\r\n                    setTimeout(function () {\r\n                        that.content.html(response);\r\n                    }, 1);\r\n                });\r\n                that.xhr.always(function (jqXHR, status) {\r\n                    setTimeout(function () {\r\n                        if (status === 'abort') {\r\n                            that.content.stop(false, true);\r\n                        }\r\n\r\n                        if (that.options.loadingClass) {\r\n                            that.element.removeClass(that.options.loadingClass);\r\n                        }\r\n                        that.content.removeAttr('aria-busy');\r\n\r\n                        if (jqXHR === that.xhr) {\r\n                            delete that.xhr;\r\n                        }\r\n                    }, 1);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _scrollToTopIfNotVisible: function () {\r\n            if (this._isElementOutOfViewport()) {\r\n                this.header[0].scrollIntoView();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         * @return {Boolean}\r\n         */\r\n        _isElementOutOfViewport: function () {\r\n            var headerRect = this.header[0].getBoundingClientRect(),\r\n                contentRect = this.content.get().length ? this.content[0].getBoundingClientRect() : false,\r\n                headerOut,\r\n                contentOut;\r\n\r\n            headerOut = headerRect.bottom - headerRect.height < 0 ||\r\n                headerRect.right - headerRect.width < 0 ||\r\n                headerRect.left + headerRect.width > window.innerWidth ||\r\n                headerRect.top + headerRect.height > window.innerHeight;\r\n\r\n            contentOut = contentRect ? contentRect.bottom - contentRect.height < 0 ||\r\n                contentRect.right - contentRect.width < 0 ||\r\n                contentRect.left + contentRect.width > window.innerWidth ||\r\n                contentRect.top + contentRect.height > window.innerHeight : false;\r\n\r\n            return headerOut ? headerOut : contentOut;\r\n        }\r\n    });\r\n\r\n    return $.mage.collapsible;\r\n});\r\n","mage/common.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'domReady!'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /* Form with auto submit feature */\r\n    $('form[data-auto-submit=\"true\"]').submit();\r\n\r\n    //Add form keys.\r\n    $(document).on(\r\n        'submit',\r\n        'form',\r\n        function (e) {\r\n            var formKeyElement,\r\n                existingFormKeyElement,\r\n                isKeyPresentInForm,\r\n                isActionExternal,\r\n                baseUrl = window.BASE_URL,\r\n                form = $(e.target),\r\n                formKey = $('input[name=\"form_key\"]').val(),\r\n                formMethod = form.prop('method'),\r\n                formAction = form.prop('action');\r\n\r\n            isActionExternal = formAction.indexOf(baseUrl) !== 0;\r\n\r\n            existingFormKeyElement = form.find('input[name=\"form_key\"]');\r\n            isKeyPresentInForm = existingFormKeyElement.length;\r\n\r\n            /* Verifies that existing auto-added form key is a direct form child element,\r\n               protection from a case when one form contains another form. */\r\n            if (isKeyPresentInForm && existingFormKeyElement.attr('auto-added-form-key') === '1') {\r\n                isKeyPresentInForm = form.find('> input[name=\"form_key\"]').length;\r\n            }\r\n\r\n            if (formKey && !isKeyPresentInForm && !isActionExternal && formMethod !== 'get') {\r\n                formKeyElement = document.createElement('input');\r\n                formKeyElement.setAttribute('type', 'hidden');\r\n                formKeyElement.setAttribute('name', 'form_key');\r\n                formKeyElement.setAttribute('value', formKey);\r\n                formKeyElement.setAttribute('auto-added-form-key', '1');\r\n                form.get(0).appendChild(formKeyElement);\r\n            }\r\n        }\r\n    );\r\n});\r\n","mage/cookies.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/mage',\r\n    'jquery/jquery.cookie'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Helper for cookies manipulation\r\n     * @returns {CookieHelper}\r\n     * @constructor\r\n     */\r\n    var CookieHelper = function () {\r\n\r\n        /**\r\n         * Cookie default values.\r\n         * @type {Object}\r\n         */\r\n        this.defaults = {\r\n            expires: null,\r\n            path: '/',\r\n            domain: null,\r\n            secure: false,\r\n            lifetime: null\r\n        };\r\n\r\n        /**\r\n         * Calculate cookie expiration date based on its lifetime.\r\n         * @param {Object} options - Cookie option values\r\n         * @return {Date|null} Calculated cookie expiration date or null if no lifetime provided.\r\n         * @private\r\n         */\r\n        function lifetimeToExpires(options, defaults) {\r\n            var expires,\r\n                lifetime;\r\n\r\n            lifetime = options.lifetime || defaults.lifetime;\r\n\r\n            if (lifetime && lifetime > 0) {\r\n                expires = options.expires || new Date();\r\n\r\n                return new Date(expires.getTime() + lifetime * 1000);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * Set a cookie's value by cookie name based on optional cookie options.\r\n         * @param {String} name - The name of the cookie.\r\n         * @param {String} value - The cookie's value.\r\n         * @param {Object} options - Optional options (e.g. lifetime, expires, path, etc.)\r\n         */\r\n        this.set = function (name, value, options) {\r\n            var expires,\r\n                path,\r\n                domain,\r\n                secure;\r\n\r\n            options = $.extend({}, this.defaults, options || {});\r\n            expires = lifetimeToExpires(options, this.defaults) || options.expires;\r\n            path = options.path;\r\n            domain = options.domain;\r\n            secure = options.secure;\r\n\r\n            document.cookie = name + '=' + encodeURIComponent(value) +\r\n                (expires ? '; expires=' + expires.toUTCString() :  '') +\r\n                (path ? '; path=' + path : '') +\r\n                (domain ? '; domain=' + domain : '') +\r\n                (secure ? '; secure' : '');\r\n        };\r\n\r\n        /**\r\n         * Get a cookie's value by cookie name.\r\n         * @param {String} name  - The name of the cookie.\r\n         * @return {(null|String)}\r\n         */\r\n        this.get = function (name) {\r\n            var arg = name + '=',\r\n                aLength = arg.length,\r\n                cookie = document.cookie,\r\n                cLength = cookie.length,\r\n                i = 0,\r\n                j = 0;\r\n\r\n            while (i < cLength) {\r\n                j = i + aLength;\r\n\r\n                if (cookie.substring(i, j) === arg) {\r\n                    return this.getCookieVal(j);\r\n                }\r\n                i = cookie.indexOf(' ', i) + 1;\r\n\r\n                if (i === 0) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Clear a cookie's value by name.\r\n         * @param {String} name - The name of the cookie being cleared.\r\n         */\r\n        this.clear = function (name) {\r\n            if (this.get(name)) {\r\n                this.set(name, '', {\r\n                    expires: new Date('Jan 01 1970 00:00:01 GMT')\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Return URI decoded cookie component value (e.g. expires, path, etc.) based on a\r\n         * numeric offset in the document's cookie value.\r\n         * @param {Number} offset - Offset into the document's cookie value.\r\n         * @return {String}\r\n         */\r\n        this.getCookieVal = function (offset) {\r\n            var cookie = document.cookie,\r\n                endstr = cookie.indexOf(';', offset);\r\n\r\n            if (endstr === -1) {\r\n                endstr = cookie.length;\r\n            }\r\n\r\n            return decodeURIComponent(cookie.substring(offset, endstr));\r\n        };\r\n\r\n        return this;\r\n    };\r\n\r\n    $.extend(true, $, {\r\n        mage: {\r\n            cookies: new CookieHelper()\r\n        }\r\n    });\r\n\r\n    return function (pageOptions) {\r\n        $.extend($.mage.cookies.defaults, pageOptions);\r\n        $.extend($.cookie.defaults, $.mage.cookies.defaults);\r\n    };\r\n});\r\n","mage/dataPost.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'jquery-ui-modules/widget'\r\n], function ($, mageTemplate, uiConfirm) {\r\n    'use strict';\r\n\r\n    $.widget('mage.dataPost', {\r\n        options: {\r\n            formTemplate: '<form action=\"<%- data.action %>\" method=\"post\">' +\r\n            '<% _.each(data.data, function(value, index) { %>' +\r\n            '<input name=\"<%- index %>\" value=\"<%- value %>\">' +\r\n            '<% }) %></form>',\r\n            postTrigger: ['a[data-post]', 'button[data-post]', 'span[data-post]'],\r\n            formKeyInputSelector: 'input[name=\"form_key\"]'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _bind: function () {\r\n            var events = {};\r\n\r\n            $.each(this.options.postTrigger, function (index, value) {\r\n                events['click ' + value] = '_postDataAction';\r\n            });\r\n\r\n            this._on(events);\r\n        },\r\n\r\n        /**\r\n         * Handler for click.\r\n         *\r\n         * @param {Object} e\r\n         * @private\r\n         */\r\n        _postDataAction: function (e) {\r\n            var params = $(e.currentTarget).data('post');\r\n\r\n            e.preventDefault();\r\n            this.postData(params);\r\n        },\r\n\r\n        /**\r\n         * Data post action.\r\n         *\r\n         * @param {Object} params\r\n         */\r\n        postData: function (params) {\r\n            var formKey = $(this.options.formKeyInputSelector).val(),\r\n                $form, input;\r\n\r\n            if (formKey) {\r\n                params.data['form_key'] = formKey;\r\n            }\r\n\r\n            $form = $(mageTemplate(this.options.formTemplate, {\r\n                data: params\r\n            }));\r\n\r\n            if (params.files) {\r\n                $form[0].enctype = 'multipart/form-data';\r\n                $.each(params.files, function (key, files) {\r\n                    if (files instanceof FileList) {\r\n                        input = document.createElement('input');\r\n                        input.type = 'file';\r\n                        input.name = key;\r\n                        input.files = files;\r\n                        $form[0].appendChild(input);\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (params.data.confirmation) {\r\n                uiConfirm({\r\n                    content: params.data.confirmationMessage,\r\n                    actions: {\r\n                        /** @inheritdoc */\r\n                        confirm: function () {\r\n                            $form.appendTo('body').hide().submit();\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                $form.appendTo('body').hide().submit();\r\n            }\r\n        }\r\n    });\r\n\r\n    $(document).dataPost();\r\n\r\n    return $.mage.dataPost;\r\n});\r\n","mage/decorate.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'mage/translate'\r\n], function ($) {\r\n    var methods = {\r\n        /**\r\n         * Decorate a list (e.g. a <ul> containing <li>) recursively if specified.\r\n         * @param {Boolean} isRecursive\r\n         */\r\n        list: function (isRecursive) {\r\n            return this.each(function () {\r\n                var list = $(this),\r\n                    items;\r\n\r\n                if (list.length > 0) {\r\n                    items = typeof isRecursive === 'undefined' || isRecursive ?\r\n                        list.find('li') :\r\n                        list.children();\r\n                    items.decorate('generic', ['odd', 'even', 'last']);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Annotate a set of DOM elements with decorator classes.\r\n         * @param {Array} decoratorParams\r\n         */\r\n        generic: function (decoratorParams) {\r\n            var elements = $(this),\r\n                allSupportedParams;\r\n\r\n            if (elements) {\r\n                allSupportedParams = {\r\n                    even: 'odd', // Flip jQuery odd/even so that index 0 is odd.\r\n                    odd: 'even',\r\n                    last: 'last',\r\n                    first: 'first'\r\n                };\r\n\r\n                decoratorParams = decoratorParams || allSupportedParams;\r\n\r\n                $.each(decoratorParams, function (index, param) {\r\n                    if (param === 'even' || param === 'odd') {\r\n                        elements.filter(':' + param).removeClass('odd even').addClass(allSupportedParams[param]);\r\n                    } else {\r\n                        elements.filter(':' + param).addClass(allSupportedParams[param]);\r\n                    }\r\n                });\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Decorate DOM elements in an HTML table with specified classes.\r\n         * @param {Object} instanceOptions\r\n         */\r\n        table: function (instanceOptions) {\r\n            return this.each(function () {\r\n                var table = $(this),\r\n                    options;\r\n\r\n                if (table.length > 0) {\r\n                    options = {\r\n                        'tbody': false,\r\n                        'tbody tr': ['odd', 'even', 'first', 'last'],\r\n                        'thead tr': ['first', 'last'],\r\n                        'tfoot tr': ['first', 'last'],\r\n                        'tr td': ['last']\r\n                    };\r\n\r\n                    $.extend(options, instanceOptions || {});\r\n\r\n                    $.each(options, function (key, value) {\r\n                        if (options[key]) {\r\n                            if (key === 'tr td') {\r\n                                $.each(table.find('tr'), function () {\r\n                                    $(this).find('td').decorate('generic', options['tr td']);\r\n                                });\r\n                            } else {\r\n                                table.find(key).decorate('generic', value);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Annotate data list elements with CSS classes.\r\n         */\r\n        dataList: function () {\r\n            return this.each(function () {\r\n                var list = $(this);\r\n\r\n                if (list) {\r\n                    list.find('dt').decorate('generic', ['odd', 'even', 'last']);\r\n                    list.find('dd').decorate('generic', ['odd', 'even', 'last']);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} method\r\n     * @return {*}\r\n     */\r\n    $.fn.decorate = function (method) {\r\n        var message;\r\n\r\n        if (methods[method]) {\r\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method === 'object' || !method) {\r\n            return methods.init.apply(this, arguments);\r\n        }\r\n\r\n        message = $.mage.__('Method %s does not exist on jQuery.decorate');\r\n        $.error(message.replace('%s', method));\r\n    };\r\n});\r\n","mage/deletable-item.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * This widget is used to tag a DOM element as deletable. By default, it will use the click event on the item with a\r\n     * data role of delete to trigger the deletion.\r\n     */\r\n    $.widget('mage.deletableItem', {\r\n        options: {\r\n            deleteEvent: 'click',\r\n            deleteSelector: '[data-role=\"delete\"]',\r\n            hiddenClass: 'no-display'\r\n        },\r\n\r\n        /**\r\n         * This method binds elements found in this widget.\r\n         */\r\n        _bind: function () {\r\n            var handlers = {};\r\n\r\n            // since the first handler is dynamic, generate the object using array notation\r\n            handlers[this.options.deleteEvent + ' ' + this.options.deleteSelector] = '_onDeleteClicked';\r\n            handlers.hideDelete = '_onHideDelete';\r\n            handlers.showDelete = '_onShowDelete';\r\n\r\n            this._on(handlers);\r\n        },\r\n\r\n        /**\r\n         * This method constructs a new widget.\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * This method is to initialize the control\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            this._onHideDelete(); // by default, hide the control\r\n        },\r\n\r\n        /**\r\n         * This method removes the entity from the DOM.\r\n         * @private\r\n         */\r\n        _onDeleteClicked: function (e) {\r\n            e.stopPropagation();\r\n            this.element.trigger('deleteItem');\r\n        },\r\n\r\n        /**\r\n         * This method hides the delete capability of this item (i.e. making it not deletable)\r\n         * @private\r\n         */\r\n        _onHideDelete: function () {\r\n            this.element.find(this.options.deleteSelector).addClass(this.options.hiddenClass);\r\n        },\r\n\r\n        /**\r\n         * This method shows the delete capability of this item (i.e. making it deletable)\r\n         * @private\r\n         */\r\n        _onShowDelete: function () {\r\n            this.element.find(this.options.deleteSelector).removeClass(this.options.hiddenClass);\r\n        }\r\n    });\r\n\r\n    return $.mage.deletableItem;\r\n});\r\n","mage/dialog.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/dialog'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Dialog Widget - this widget is a wrapper for the jQuery UI Dialog\r\n     */\r\n    $.widget('mage.dialog', $.ui.dialog, {});\r\n\r\n    return $.mage.dialog;\r\n});\r\n","mage/dropdown.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/dialog',\r\n    'mage/translate'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var timer = null;\r\n\r\n    /**\r\n     * Dropdown Widget - this widget is a wrapper for the jQuery UI Dialog\r\n     */\r\n    $.widget('mage.dropdownDialog', $.ui.dialog, {\r\n        options: {\r\n            triggerEvent: 'click',\r\n            triggerClass: null,\r\n            parentClass: null,\r\n            triggerTarget: null,\r\n            defaultDialogClass: 'mage-dropdown-dialog',\r\n            dialogContentClass: null,\r\n            shadowHinter: null,\r\n            closeOnMouseLeave: true,\r\n            closeOnClickOutside: true,\r\n            minHeight: null,\r\n            minWidth: null,\r\n            width: null,\r\n            modal: false,\r\n            timeout: null,\r\n            autoOpen: false,\r\n            createTitleBar: false,\r\n            autoPosition: false,\r\n            autoSize: false,\r\n            draggable: false,\r\n            resizable: false,\r\n            bodyClass: '',\r\n            buttons: [\r\n                {\r\n                    'class': 'action close',\r\n                    'text': $.mage.__('Close'),\r\n\r\n                    /**\r\n                     * Click action.\r\n                     */\r\n                    'click': function () {\r\n                        $(this).dropdownDialog('close');\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n\r\n        /**\r\n         * extend default functionality to bind the opener for dropdown\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var _self = this;\r\n\r\n            this._super();\r\n            this.uiDialog.addClass(this.options.defaultDialogClass);\r\n\r\n            if (_self.options.triggerTarget) {\r\n                $(_self.options.triggerTarget).on(_self.options.triggerEvent, function (event) {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n\r\n                    if (!_self._isOpen) {\r\n                        $('.' + _self.options.defaultDialogClass + ' > .ui-dialog-content').dropdownDialog('close');\r\n                        _self.open();\r\n                    } else {\r\n                        _self.close(event);\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (_self.options.shadowHinter) {\r\n                _self.hinter = $('<div class=\"' + _self.options.shadowHinter + '\"/>');\r\n                _self.element.append(_self.hinter);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Extend default functionality to close the dropdown\r\n         * with custom delay on mouse out and also to close when clicking outside\r\n         */\r\n        open: function () {\r\n            var _self = this;\r\n\r\n            this._super();\r\n\r\n            if (_self.options.dialogContentClass) {\r\n                _self.element.addClass(_self.options.dialogContentClass);\r\n            }\r\n\r\n            if (_self.options.closeOnMouseLeave) {\r\n\r\n                this._mouseEnter(_self.uiDialog);\r\n                this._mouseLeave(_self.uiDialog);\r\n\r\n                if (_self.options.triggerTarget) {\r\n                    this._mouseLeave($(_self.options.triggerTarget));\r\n                }\r\n            }\r\n\r\n            if (_self.options.closeOnClickOutside) {\r\n                $('body').on('click.outsideDropdown', function (event) {\r\n                    if (_self._isOpen && !$(event.target).closest('.ui-dialog').length) {\r\n                        if (timer) {\r\n                            clearTimeout(timer);\r\n                        }\r\n                        _self.close(event);\r\n                    }\r\n                });\r\n            }\r\n            // adding the class on the opener and parent element for dropdown\r\n            if (_self.options.triggerClass) {\r\n                $(_self.options.triggerTarget).addClass(_self.options.triggerClass);\r\n            }\r\n\r\n            if (_self.options.parentClass) {\r\n                $(_self.options.appendTo).addClass(_self.options.parentClass);\r\n            }\r\n\r\n            if (_self.options.bodyClass) {\r\n                $('body').addClass(_self.options.bodyClass);\r\n            }\r\n\r\n            if (_self.options.shadowHinter) {\r\n                _self._setShadowHinterPosition();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * extend default functionality to reset the timer and remove the active class for opener\r\n         */\r\n        close: function () {\r\n            this._super();\r\n\r\n            if (this.options.dialogContentClass) {\r\n                this.element.removeClass(this.options.dialogContentClass);\r\n            }\r\n\r\n            if (this.options.triggerClass) {\r\n                $(this.options.triggerTarget).removeClass(this.options.triggerClass);\r\n            }\r\n\r\n            if (this.options.parentClass) {\r\n                $(this.options.appendTo).removeClass(this.options.parentClass);\r\n            }\r\n\r\n            if (this.options.bodyClass) {\r\n                $('body').removeClass(this.options.bodyClass);\r\n            }\r\n\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n            }\r\n\r\n            if (this.options.triggerTarget) {\r\n                $(this.options.triggerTarget).off('mouseleave');\r\n            }\r\n            this.uiDialog.off('mouseenter');\r\n            this.uiDialog.off('mouseleave');\r\n            $('body').off('click.outsideDropdown');\r\n        },\r\n\r\n        /**\r\n         * _setShadowHinterPosition\r\n         * @private\r\n         */\r\n        _setShadowHinterPosition: function () {\r\n            var _self = this,\r\n                offset;\r\n\r\n            offset = _self.options.position.of.offset().left -\r\n                _self.element.offset().left +\r\n                _self.options.position.of.outerWidth() / 2;\r\n            offset = isNaN(offset) ? 0 : Math.floor(offset);\r\n            _self.hinter.css('left', offset);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _position: function () {\r\n            if (this.options.autoPosition) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _createTitlebar: function () {\r\n            if (this.options.createTitleBar) {\r\n                this._super();\r\n            } else {\r\n                // the title bar close button is referenced\r\n                // in _focusTabbable function, so to prevent errors it must be declared\r\n                this.uiDialogTitlebarClose = $('<div>');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _size: function () {\r\n            if (this.options.autoSize) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} handler\r\n         * @private\r\n         */\r\n        _mouseLeave: function (handler) {\r\n            var _self = this;\r\n\r\n            handler.on('mouseleave', function (event) {\r\n                event.stopPropagation();\r\n\r\n                if (_self._isOpen) {\r\n                    if (timer) {\r\n                        clearTimeout(timer);\r\n                    }\r\n                    timer = setTimeout(function (e) {\r\n                        _self.close(e);\r\n                    }, _self.options.timeout);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} handler\r\n         * @private\r\n         */\r\n        _mouseEnter: function (handler) {\r\n            handler.on('mouseenter', function (event) {\r\n                event.stopPropagation();\r\n\r\n                if (timer) {\r\n                    clearTimeout(timer);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} key\r\n         * @param {*} value\r\n         * @private\r\n         */\r\n        _setOption: function (key, value) {\r\n            this._super(key, value);\r\n\r\n            if (key === 'triggerTarget') {\r\n                this.options.triggerTarget = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.dropdownDialog;\r\n});\r\n","mage/dropdowns.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {Object} options\r\n     */\r\n    $.fn.dropdown = function (options) {\r\n        var defaults = {\r\n                parent: null,\r\n                autoclose: true,\r\n                btnArrow: '.arrow',\r\n                menu: '[data-target=\"dropdown\"]',\r\n                activeClass: 'active'\r\n            },\r\n            actionElem = $(this),\r\n            self = this;\r\n\r\n        options = $.extend(defaults, options);\r\n        actionElem = $(this);\r\n        self = this;\r\n\r\n        /**\r\n         * @param {HTMLElement} elem\r\n         */\r\n        this.openDropdown = function (elem) {\r\n            elem\r\n                .addClass(options.activeClass)\r\n                .attr('aria-expanded', true)\r\n                .parent()\r\n                    .addClass(options.activeClass);\r\n\r\n            elem.parent()\r\n                .find(options.menu)\r\n                .attr('aria-hidden', false);\r\n\r\n            $(options.btnArrow, elem).text('-');\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} elem\r\n         */\r\n        this.closeDropdown = function (elem) {\r\n            elem.removeClass(options.activeClass)\r\n                .attr('aria-expanded', false)\r\n                .parent()\r\n                    .removeClass(options.activeClass);\r\n\r\n            elem.parent()\r\n                .find(options.menu)\r\n                .attr('aria-hidden', true);\r\n\r\n            $(options.btnArrow, elem).text('+');\r\n        };\r\n\r\n        /**\r\n         * Reset all dropdowns.\r\n         *\r\n         * @param {Object} param\r\n         */\r\n        this.reset = function (param) {\r\n            var params = param || {},\r\n                dropdowns = params.elems || actionElem;\r\n\r\n            dropdowns.each(function (index, elem) {\r\n                self.closeDropdown($(elem));\r\n            });\r\n        };\r\n\r\n        /* document Event bindings */\r\n        if (options.autoclose === true) {\r\n            $(document).on('click.hideDropdown', this.reset);\r\n            $(document).on('keyup.hideDropdown', function (e) {\r\n                var ESC_CODE = '27';\r\n\r\n                if (e.keyCode == ESC_CODE) { //eslint-disable-line eqeqeq\r\n                    self.reset();\r\n                }\r\n            });\r\n        }\r\n\r\n        if (options.events) {\r\n            $.each(options.events, function (index, event) {\r\n                $(document).on(event.name, event.selector, event.action);\r\n            });\r\n        }\r\n\r\n        return this.each(function () {\r\n            var elem = $(this),\r\n                parent = $(options.parent).length > 0 ? $(options.parent) : elem.parent(),\r\n                menu = $(options.menu, parent) || $('.dropdown-menu', parent);\r\n\r\n            // ARIA (adding aria attributes)\r\n            if (menu.length) {\r\n                elem.attr('aria-haspopup', true);\r\n            }\r\n\r\n            if (!elem.hasClass(options.activeClass)) {\r\n                elem.attr('aria-expanded', false);\r\n                menu.attr('aria-hidden', true);\r\n            } else {\r\n                elem.attr('aria-expanded', true);\r\n                menu.attr('aria-hidden', false);\r\n            }\r\n\r\n            if (!elem.is('a, button')) {\r\n                elem.attr('role', 'button');\r\n                elem.attr('tabindex', 0);\r\n            }\r\n\r\n            if (elem.attr('data-trigger-keypress-button')) {\r\n                elem.on('keypress', function (e) {\r\n                    var keyCode = e.keyCode || e.which,\r\n                        ENTER_CODE = 13;\r\n\r\n                    if (keyCode === ENTER_CODE) {\r\n                        e.preventDefault();\r\n                        elem.trigger('click.toggleDropdown');\r\n                    }\r\n                });\r\n            }\r\n\r\n            elem.on('click.toggleDropdown', function () {\r\n                var el = actionElem;\r\n\r\n                if (options.autoclose === true) {\r\n                    actionElem = $();\r\n                    $(document).trigger('click.hideDropdown');\r\n                    actionElem = el;\r\n                }\r\n\r\n                self[el.hasClass(options.activeClass) ? 'closeDropdown' : 'openDropdown'](elem);\r\n\r\n                return false;\r\n            });\r\n        });\r\n    };\r\n\r\n    return function (data, el) {\r\n        $(el).dropdown(data);\r\n    };\r\n});\r\n","mage/edit-trigger.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    var editTriggerPrototype;\r\n\r\n    $.widget('mage.editTrigger', {\r\n        options: {\r\n            img: '',\r\n            alt: '[TR]',\r\n            template: '#translate-inline-icon',\r\n            zIndex: 2000,\r\n            editSelector: '[data-translate]',\r\n            delay: 2000,\r\n            offsetTop: -3,\r\n            singleElement: true\r\n        },\r\n\r\n        /**\r\n         * editTriger creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.tmpl = mageTemplate(this.options.template);\r\n            this._initTrigger();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _getCss: function () {\r\n            return {\r\n                position: 'absolute',\r\n                cursor: 'pointer',\r\n                display: 'none',\r\n                'z-index': this.options.zIndex\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {*} appendTo\r\n         * @return {*|jQuery}\r\n         * @private\r\n         */\r\n        _createTrigger: function (appendTo) {\r\n            var tmpl = this.tmpl({\r\n                data: this.options\r\n            });\r\n\r\n            return $(tmpl)\r\n                .css(this._getCss())\r\n                .data('role', 'edit-trigger-element')\r\n                .appendTo(appendTo);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initTrigger: function () {\r\n            this.trigger = this._createTrigger($('body'));\r\n        },\r\n\r\n        /**\r\n         * Bind on mousemove event\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this.trigger.on('click.' + this.widgetName, $.proxy(this._onClick, this));\r\n            this.element.on('mousemove.' + this.widgetName, $.proxy(this._onMouseMove, this));\r\n        },\r\n\r\n        /**\r\n         * Show editTriger\r\n         */\r\n        show: function () {\r\n            if (this.trigger.is(':hidden')) {\r\n                this.trigger.show();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Hide editTriger\r\n         */\r\n        hide: function () {\r\n            this.currentTarget = null;\r\n\r\n            if (this.trigger && this.trigger.is(':visible')) {\r\n                this.trigger.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set editTriger position\r\n         * @protected\r\n         */\r\n        _setPosition: function (el) {\r\n            var offset = el.offset();\r\n\r\n            this.trigger.css({\r\n                top: offset.top + el.outerHeight() + this.options.offsetTop,\r\n                left: offset.left\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Show/hide trigger on mouse move.\r\n         *\r\n         * @param {jQuery.Event} e\r\n         * @protected\r\n         */\r\n        _onMouseMove: function (e) {\r\n            var target = $(e.target),\r\n                inner = target.find(this.options.editSelector);\r\n\r\n            if ($(e.target).is('button') && inner.length) {\r\n                target = inner;\r\n            } else if (!target.is(this.trigger) && !target.is(this.options.editSelector)) {\r\n                target = target.parents(this.options.editSelector).first();\r\n            }\r\n\r\n            if (target.length) {\r\n                if (!target.is(this.trigger)) {\r\n                    this._setPosition(target);\r\n                    this.currentTarget = target;\r\n                }\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Trigger event \"edit\" on element for translate.\r\n         *\r\n         * @param {jQuery.Event} e\r\n         * @protected\r\n         */\r\n        _onClick: function (e) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            $(this.currentTarget).trigger('edit.' + this.widgetName);\r\n            this.hide(true);\r\n        },\r\n\r\n        /**\r\n         * Destroy editTriger\r\n         */\r\n        destroy: function () {\r\n            this.trigger.remove();\r\n            this.element.off('.' + this.widgetName);\r\n\r\n            return $.Widget.prototype.destroy.call(this);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Extention for widget editTrigger - hide trigger with delay\r\n     */\r\n    editTriggerPrototype = $.mage.editTrigger.prototype;\r\n\r\n    $.widget('mage.editTrigger', $.extend({}, editTriggerPrototype, {\r\n        /**\r\n         * Added clear timeout on trigger show\r\n         */\r\n        show: function () {\r\n            editTriggerPrototype.show.apply(this, arguments);\r\n\r\n            if (this.options.delay) {\r\n                this._clearTimer();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Added setTimeout on trigger hide\r\n         */\r\n        hide: function (immediate) {\r\n            if (!immediate && this.options.delay) {\r\n                if (!this.timer) {\r\n                    this.timer = setTimeout($.proxy(function () {\r\n                        editTriggerPrototype.hide.apply(this, arguments);\r\n                        this._clearTimer();\r\n                    }, this), this.options.delay);\r\n                }\r\n            } else {\r\n                editTriggerPrototype.hide.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Clear timer\r\n         * @protected\r\n         */\r\n        _clearTimer: function () {\r\n            if (this.timer) {\r\n                clearTimeout(this.timer);\r\n                this.timer = null;\r\n            }\r\n        }\r\n    }));\r\n\r\n    return $.mage.editTrigger;\r\n});\r\n","mage/fieldset-controls.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * This widget will allow a control with the fieldsetResetControl widget attached to reset a set of input fields.\r\n     * The input fields to reset are defined by the inputSelector selector. The widget will store a clone of the fields\r\n     * on create, and on trigger of fieldsetReset event it resets the defined fields. The event is triggered by the\r\n     * reset control widget.\r\n     *\r\n     * For inputs of type file, the whole dom element is replaced as changing the value is a security violation\r\n     * For inputs of type checkbox or radio, the checked attribute is added or removed as appropriate\r\n     * For all others the jquery .val method is used to update to value to the original.\r\n     */\r\n    $.widget('mage.fieldsetControls', {\r\n        original: undefined,\r\n        options: {\r\n            inputSelector: '[data-reset=\"true\"]'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.original = this.element.find(this.options.inputSelector).clone(true);\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                'fieldsetReset': '_onReset'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @private\r\n         */\r\n        _onReset: function (e) {\r\n            var items;\r\n\r\n            e.stopPropagation();\r\n            // find all the ones we have to remove\r\n            items = this.element.find(this.options.inputSelector);\r\n            // loop over replacing each one.\r\n            items.each($.proxy(function (index, item) {\r\n                if ($(item).attr('type') == 'file') { //eslint-disable-line eqeqeq\r\n                    // Replace the current one we found with a clone of the original saved earlier\r\n                    $(item).replaceWith($(this.original[index]).clone(true));\r\n                } else if ($(item).attr('type') == 'checkbox' || $(item).attr('type') == 'radio') { //eslint-disable-line\r\n                    // Return to original state.\r\n                    if ($(this.original[index]).attr('checked') === undefined) {\r\n                        $(item).removeAttr('checked');\r\n                    } else {\r\n                        $(item).attr('checked', $(this.original[index]).attr('checked'));\r\n                    }\r\n                } else {\r\n                    // Replace the value with the original\r\n                    $(item).val($(this.original[index]).val());\r\n                }\r\n            }, this));\r\n        }\r\n    });\r\n\r\n    $.widget('mage.fieldsetResetControl', {\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                click: '_onClick'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @private\r\n         */\r\n        _onClick: function (e) {\r\n            e.stopPropagation();\r\n            $(this.element).trigger('fieldsetReset');\r\n        }\r\n    });\r\n\r\n    return {\r\n        fieldsetControls: $.mage.fieldsetControls,\r\n        fieldsetResetControl: $.mage.fieldsetResetControl\r\n    };\r\n});\r\n","mage/ie-class-fixer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable strict */\r\n(function () {\r\n    var userAgent = navigator.userAgent, // user agent identifier\r\n        html = document.documentElement, // html tag\r\n        gap = ''; // gap between classes\r\n\r\n    if (html.className) { // check if neighbour class exist in html tag\r\n        gap = ' ';\r\n    } // end if\r\n\r\n    if (userAgent.match(/Trident.*rv[ :]*11\\./)) { // Special case for IE11\r\n        html.className += gap + 'ie11';\r\n    } // end if\r\n\r\n})();\r\n","mage/item-table.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.itemTable', {\r\n        options: {\r\n            addBlock: '[data-template=\"add-block\"]',\r\n            addBlockData: {},\r\n            addEvent: 'click',\r\n            addSelector: '[data-role=\"add\"]',\r\n            itemsSelector: '[data-container=\"items\"]',\r\n            keepLastRow: true\r\n        },\r\n\r\n        /**\r\n         * This method adds a new instance of the block to the items.\r\n         * @private\r\n         */\r\n        _add: function () {\r\n            var hideShowDelete,\r\n                deletableItems,\r\n                addedBlock;\r\n\r\n            // adding a new row, so increment the count to give each row a unique index\r\n            this.rowIndex++;\r\n\r\n            // make sure the block data has the rowIndex\r\n            this.options.addBlockData.rowIndex = this.rowIndex;\r\n\r\n            // render the form\r\n            addedBlock = $(this.addBlockTmpl({\r\n                data: this.options.addBlockData\r\n            }));\r\n\r\n            // add the row to the item block\r\n            this.element.find(this.options.itemsSelector).append(addedBlock);\r\n\r\n            // initialize all mage content\r\n            addedBlock.trigger('contentUpdated');\r\n\r\n            // determine all existing items in the collection\r\n            deletableItems = this._getDeletableItems();\r\n\r\n            // for the most part, show the delete mechanism, except in the case where there is only one it should not\r\n            // be deleted\r\n            hideShowDelete = 'showDelete';\r\n\r\n            if (this.options.keepLastRow && deletableItems.length === 1) {\r\n                hideShowDelete = 'hideDelete';\r\n            }\r\n\r\n            // loop through each control and perform that action on the deletable item\r\n            $.each(deletableItems, function (index) {\r\n                $(deletableItems[index]).trigger(hideShowDelete);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * This method binds elements found in this widget.\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var handlers = {};\r\n\r\n            // since the first handler is dynamic, generate the object using array notation\r\n            handlers[this.options.addEvent + ' ' + this.options.addSelector] = '_add';\r\n            handlers.deleteItem = '_onDeleteItem';\r\n\r\n            this._on(handlers);\r\n        },\r\n\r\n        /**\r\n         * This method constructs a new widget.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n\r\n            this.addBlockTmpl = mageTemplate(this.options.addBlock);\r\n\r\n            // nothing in the table, so indicate that\r\n            this.rowIndex = -1;\r\n\r\n            // make sure the block data is an object\r\n            if (this.options.addBlockData == null || typeof this.options.addBlockData !== 'object') {\r\n                // reset the block data to an empty object\r\n                this.options.addBlockData = {};\r\n            }\r\n\r\n            // add the first row to the table\r\n            this._add();\r\n        },\r\n\r\n        /**\r\n         * This method returns the list of widgets associated with deletable items from the container (direct children\r\n         * only).\r\n         * @private\r\n         */\r\n        _getDeletableItems: function () {\r\n            return this.element.find(this.options.itemsSelector + '> .deletableItem');\r\n        },\r\n\r\n        /**\r\n         * This method removes the item associated with the message.\r\n         * @private\r\n         */\r\n        _onDeleteItem: function (e) {\r\n            var deletableItems;\r\n\r\n            // parent elements don't need to see this event\r\n            e.stopPropagation();\r\n\r\n            // remove the deletable item\r\n            $(e.target).remove();\r\n\r\n            if (this.options.keepLastRow) {\r\n                // determine if there is only one element remaining, in which case, disable the delete mechanism on it\r\n                deletableItems = this._getDeletableItems();\r\n\r\n                if (deletableItems.length === 1) {\r\n                    $(deletableItems[0]).trigger('hideDelete');\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.itemTable;\r\n});\r\n","mage/layout.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\n/* eslint-disable strict */\r\ndefine(['underscore'], function (_) {\r\n    return {\r\n        /**\r\n         * @param {Object} config\r\n         */\r\n        build: function (config) {\r\n            var types = _.map(_.flatten(config), function (item) {\r\n                return item.type;\r\n            });\r\n\r\n            require(types, function () {});\r\n        }\r\n    };\r\n});\r\n","mage/loader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget',\r\n    'mage/translate'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.loader', {\r\n        loaderStarted: 0,\r\n        options: {\r\n            icon: '',\r\n            texts: {\r\n                loaderText: $.mage.__('Please wait...'),\r\n                imgAlt: $.mage.__('Loading...')\r\n            },\r\n            template:\r\n                '<div class=\"loading-mask\" data-role=\"loader\">' +\r\n                    '<div class=\"loader\">' +\r\n                        '<img alt=\"<%- data.texts.imgAlt %>\" src=\"<%- data.icon %>\">' +\r\n                        '<p><%- data.texts.loaderText %></p>' +\r\n                    '</div>' +\r\n                '</div>'\r\n\r\n        },\r\n\r\n        /**\r\n         * Loader creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Bind on ajax events\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                'processStop': 'hide',\r\n                'processStart': 'show',\r\n                'show.loader': 'show',\r\n                'hide.loader': 'hide',\r\n                'contentUpdated.loader': '_contentUpdated'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Verify loader present after content updated\r\n         *\r\n         * This will be cleaned up by the task MAGETWO-11070\r\n         *\r\n         * @param {EventObject} e\r\n         * @private\r\n         */\r\n        _contentUpdated: function (e) {\r\n            this.show(e);\r\n        },\r\n\r\n        /**\r\n         * Show loader\r\n         */\r\n        show: function (e, ctx) {\r\n            this._render();\r\n            this.loaderStarted++;\r\n            this.spinner.show();\r\n\r\n            if (ctx) {\r\n                this.spinner\r\n                    .css({\r\n                        width: ctx.outerWidth(),\r\n                        height: ctx.outerHeight(),\r\n                        position: 'absolute'\r\n                    })\r\n                    .position({\r\n                        my: 'top left',\r\n                        at: 'top left',\r\n                        of: ctx\r\n                    });\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Hide loader\r\n         */\r\n        hide: function () {\r\n            if (this.loaderStarted > 0) {\r\n                this.loaderStarted--;\r\n\r\n                if (this.loaderStarted === 0) {\r\n                    this.spinner.hide();\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Render loader\r\n         * @protected\r\n         */\r\n        _render: function () {\r\n            var html;\r\n\r\n            if (!this.spinnerTemplate) {\r\n                this.spinnerTemplate = mageTemplate(this.options.template);\r\n\r\n                html = $(this.spinnerTemplate({\r\n                    data: this.options\r\n                }));\r\n\r\n                html.prependTo(this.element);\r\n\r\n                this.spinner = html;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Destroy loader\r\n         */\r\n        _destroy: function () {\r\n            this.spinner.remove();\r\n        }\r\n    });\r\n\r\n    /**\r\n     * This widget takes care of registering the needed loader listeners on the body\r\n     */\r\n    $.widget('mage.loaderAjax', {\r\n        options: {\r\n            defaultContainer: '[data-container=body]',\r\n            loadingClass: 'ajax-loading'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n            // There should only be one instance of this widget, and it should be attached\r\n            // to the body only. Having it on the page twice will trigger multiple processStarts.\r\n            if (window.console && !this.element.is(this.options.defaultContainer) && $.mage.isDevMode(undefined)) {\r\n                console.warn('This widget is intended to be attached to the body, not below.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            $(document).on({\r\n                'ajaxSend': this._onAjaxSend.bind(this),\r\n                'ajaxComplete': this._onAjaxComplete.bind(this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} loaderContext\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _getJqueryObj: function (loaderContext) {\r\n            var ctx;\r\n\r\n            // Check to see if context is jQuery object or not.\r\n            if (loaderContext) {\r\n                if (loaderContext.jquery) {\r\n                    ctx = loaderContext;\r\n                } else {\r\n                    ctx = $(loaderContext);\r\n                }\r\n            } else {\r\n                ctx = $('[data-container=\"body\"]');\r\n            }\r\n\r\n            return ctx;\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @param {Object} jqxhr\r\n         * @param {Object} settings\r\n         * @private\r\n         */\r\n        _onAjaxSend: function (e, jqxhr, settings) {\r\n            var ctx;\r\n\r\n            $(this.options.defaultContainer)\r\n                .addClass(this.options.loadingClass)\r\n                .attr({\r\n                    'aria-busy': true\r\n                });\r\n\r\n            if (settings && settings.showLoader) {\r\n                ctx = this._getJqueryObj(settings.loaderContext);\r\n                ctx.trigger('processStart');\r\n\r\n                // Check to make sure the loader is there on the page if not report it on the console.\r\n                // NOTE that this check should be removed before going live. It is just an aid to help\r\n                // in finding the uses of the loader that maybe broken.\r\n                if (window.console && !ctx.parents('[data-role=\"loader\"]').length) {\r\n                    console.warn('Expected to start loader but did not find one in the dom');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @param {Object} jqxhr\r\n         * @param {Object} settings\r\n         * @private\r\n         */\r\n        _onAjaxComplete: function (e, jqxhr, settings) {\r\n            $(this.options.defaultContainer)\r\n                .removeClass(this.options.loadingClass)\r\n                .attr('aria-busy', false);\r\n\r\n            if (settings && settings.showLoader) {\r\n                this._getJqueryObj(settings.loaderContext).trigger('processStop');\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return {\r\n        loader: $.mage.loader,\r\n        loaderAjax: $.mage.loaderAjax\r\n    };\r\n});\r\n","mage/mage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/apply/main'\r\n], function ($, mage) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Main namespace for Magento extensions\r\n     * @type {Object}\r\n     */\r\n    $.mage = $.mage || {};\r\n\r\n    /**\r\n     * Plugin mage, initialize components on elements\r\n     * @param {String} name - Components' path.\r\n     * @param {Object} config - Components' config.\r\n     * @returns {JQuery} Chainable.\r\n     */\r\n    $.fn.mage = function (name, config) {\r\n        config = config || {};\r\n\r\n        this.each(function (index, el) {\r\n            mage.applyFor(el, config, name);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    $.extend($.mage, {\r\n        /**\r\n         * Handle all components declared via data attribute\r\n         * @return {Object} $.mage\r\n         */\r\n        init: function () {\r\n            mage.apply();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Method handling redirects and page refresh\r\n         * @param {String} url - redirect URL\r\n         * @param {(undefined|String)} type - 'assign', 'reload', 'replace'\r\n         * @param {(undefined|Number)} timeout - timeout in milliseconds before processing the redirect or reload\r\n         * @param {(undefined|Boolean)} forced - true|false used for 'reload' only\r\n         */\r\n        redirect: function (url, type, timeout, forced) {\r\n            var _redirect;\r\n\r\n            forced  = !!forced;\r\n            timeout = timeout || 0;\r\n            type    = type || 'assign';\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _redirect = function () {\r\n                window.location[type](type === 'reload' ? forced : url);\r\n            };\r\n\r\n            timeout ? setTimeout(_redirect, timeout) : _redirect();\r\n        },\r\n\r\n        /**\r\n         * Checks if provided string is a valid selector.\r\n         * @param {String} selector - Selector to check.\r\n         * @returns {Boolean}\r\n         */\r\n        isValidSelector: function (selector) {\r\n            try {\r\n                document.querySelector(selector);\r\n\r\n                return true;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Init components inside of dynamically updated elements\r\n     */\r\n    $('body').on('contentUpdated', function () {\r\n        if (mage) {\r\n            mage.apply();\r\n        }\r\n    });\r\n\r\n    return $.mage;\r\n});\r\n","mage/menu.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'matchMedia',\r\n    'jquery-ui-modules/menu',\r\n    'jquery/jquery.mobile.custom',\r\n    'mage/translate'\r\n], function ($, mediaCheck) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Menu Widget - this widget is a wrapper for the jQuery UI Menu\r\n     */\r\n    $.widget('mage.menu', $.ui.menu, {\r\n        options: {\r\n            responsive: false,\r\n            expanded: false,\r\n            showDelay: 42,\r\n            hideDelay: 300,\r\n            delay: 0,\r\n            mediaBreakpoint: '(max-width: 767px)'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var self = this;\r\n\r\n            this.delay = this.options.delay;\r\n\r\n            this._super();\r\n            $(window).on('resize', function () {\r\n                self.element.find('.submenu-reverse').removeClass('submenu-reverse');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            this._super();\r\n\r\n            if (this.options.expanded === true) {\r\n                this.isExpanded();\r\n            }\r\n\r\n            if (this.options.responsive === true) {\r\n                mediaCheck({\r\n                    media: this.options.mediaBreakpoint,\r\n                    entry: $.proxy(function () {\r\n                        this._toggleMobileMode();\r\n                    }, this),\r\n                    exit: $.proxy(function () {\r\n                        this._toggleDesktopMode();\r\n                    }, this)\r\n                });\r\n            }\r\n\r\n            this._assignControls()._listen();\r\n            this._setActiveMenu();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _assignControls: function () {\r\n            this.controls = {\r\n                toggleBtn: $('[data-action=\"toggle-nav\"]'),\r\n                swipeArea: $('.nav-sections')\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _listen: function () {\r\n            var controls = this.controls,\r\n                toggle = this.toggle;\r\n\r\n            controls.toggleBtn.off('click');\r\n            controls.toggleBtn.on('click', toggle.bind(this));\r\n            controls.swipeArea.off('swipeleft');\r\n            controls.swipeArea.on('swipeleft', toggle.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Toggle.\r\n         */\r\n        toggle: function () {\r\n            var html = $('html');\r\n\r\n            if (html.hasClass('nav-open')) {\r\n                html.removeClass('nav-open');\r\n                setTimeout(function () {\r\n                    html.removeClass('nav-before-open');\r\n                }, this.options.hideDelay);\r\n            } else {\r\n                html.addClass('nav-before-open');\r\n                setTimeout(function () {\r\n                    html.addClass('nav-open');\r\n                }, this.options.showDelay);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Tries to figure out the active category for current page and add appropriate classes:\r\n         *  - 'active' class for active category\r\n         *  - 'has-active' class for all parents of active category\r\n         *\r\n         *  First, checks whether current URL is URL of category page,\r\n         *  otherwise tries to retrieve category URL in case of current URL is product view page URL\r\n         *  which has category tree path in it.\r\n         *\r\n         * @return void\r\n         * @private\r\n         */\r\n        _setActiveMenu: function () {\r\n            var currentUrl = window.location.href.split('?')[0];\r\n\r\n            if (!this._setActiveMenuForCategory(currentUrl)) {\r\n                this._setActiveMenuForProduct(currentUrl);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Looks for category with provided URL and adds 'active' CSS class to it if it was not set before.\r\n         * If menu item has parent categories, sets 'has-active' class to all af them.\r\n         *\r\n         * @param {String} url - possible category URL\r\n         * @returns {Boolean} - true if active category was founded by provided URL, otherwise return false\r\n         * @private\r\n         */\r\n        _setActiveMenuForCategory: function (url) {\r\n            var activeCategoryLink = this.element.find('a[href=\"' + url + '\"]'),\r\n                classes,\r\n                classNav;\r\n\r\n            if (!activeCategoryLink || !activeCategoryLink.hasClass('ui-corner-all')) {\r\n\r\n                //category was not found by provided URL\r\n                return false;\r\n            } else if (!activeCategoryLink.parent().hasClass('active')) {\r\n                activeCategoryLink.parent().addClass('active');\r\n                classes = activeCategoryLink.parent().attr('class');\r\n                classNav = classes.match(/(nav\\-)[0-9]+(\\-[0-9]+)+/gi);\r\n\r\n                if (classNav) {\r\n                    this._setActiveParent(classNav[0]);\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Sets 'has-active' CSS class to all parent categories which have part of provided class in childClassName\r\n         *\r\n         * @example\r\n         *  childClassName - 'nav-1-2-3'\r\n         *  CSS class 'has-active' will be added to categories have 'nav-1-2' and 'nav-1' classes\r\n         *\r\n         * @param {String} childClassName - Class name of active category <li> element\r\n         * @return void\r\n         * @private\r\n         */\r\n        _setActiveParent: function (childClassName) {\r\n            var parentElement,\r\n                parentClass = childClassName.substr(0, childClassName.lastIndexOf('-'));\r\n\r\n            if (parentClass.lastIndexOf('-') !== -1) {\r\n                parentElement = this.element.find('.' + parentClass);\r\n\r\n                if (parentElement) {\r\n                    parentElement.addClass('has-active');\r\n                }\r\n                this._setActiveParent(parentClass);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Tries to retrieve category URL from current URL and mark this category as active\r\n         * @see _setActiveMenuForCategory(url)\r\n         *\r\n         * @example\r\n         *  currentUrl - http://magento.com/category1/category12/product.html,\r\n         *  category URLs has extensions .phtml - http://magento.com/category1.phtml\r\n         *  method sets active category which has URL http://magento.com/category1/category12.phtml\r\n         *\r\n         * @param {String} currentUrl - current page URL without parameters\r\n         * @return void\r\n         * @private\r\n         */\r\n        _setActiveMenuForProduct: function (currentUrl) {\r\n            var categoryUrlExtension,\r\n                lastUrlSection,\r\n                possibleCategoryUrl,\r\n                //retrieve first category URL to know what extension is used for category URLs\r\n                firstCategoryUrl = this.element.find('> li a').attr('href');\r\n\r\n            if (firstCategoryUrl) {\r\n                lastUrlSection = firstCategoryUrl.substr(firstCategoryUrl.lastIndexOf('/'));\r\n                categoryUrlExtension = lastUrlSection.lastIndexOf('.') !== -1 ?\r\n                    lastUrlSection.substr(lastUrlSection.lastIndexOf('.')) : '';\r\n\r\n                possibleCategoryUrl = currentUrl.substr(0, currentUrl.lastIndexOf('/')) + categoryUrlExtension;\r\n                this._setActiveMenuForCategory(possibleCategoryUrl);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add class for expanded option.\r\n         */\r\n        isExpanded: function () {\r\n            var subMenus = this.element.find(this.options.menus),\r\n                expandedMenus = subMenus.find(this.options.menus);\r\n\r\n            expandedMenus.addClass('expanded');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _activate: function (event) {\r\n            window.location.href = this.active.find('> a').attr('href');\r\n            this.collapseAll(event);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var match, prev, character, skip, regex,\r\n                preventDefault = true;\r\n\r\n            /* eslint-disable max-depth */\r\n            /**\r\n             * @param {String} value\r\n             */\r\n            function escape(value) {\r\n                return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n            }\r\n\r\n            if (this.active.closest(this.options.menus).attr('aria-expanded') != 'true') { //eslint-disable-line eqeqeq\r\n\r\n                switch (event.keyCode) {\r\n                    case $.ui.keyCode.PAGE_UP:\r\n                        this.previousPage(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.PAGE_DOWN:\r\n                        this.nextPage(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.HOME:\r\n                        this._move('first', 'first', event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.END:\r\n                        this._move('last', 'last', event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.UP:\r\n                        this.previous(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.DOWN:\r\n                        if (this.active && !this.active.is('.ui-state-disabled')) {\r\n                            this.expand(event);\r\n                        }\r\n                        break;\r\n\r\n                    case $.ui.keyCode.LEFT:\r\n                        this.previous(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.RIGHT:\r\n                        this.next(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.ENTER:\r\n                    case $.ui.keyCode.SPACE:\r\n                        this._activate(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.ESCAPE:\r\n                        this.collapse(event);\r\n                        break;\r\n                    default:\r\n                        preventDefault = false;\r\n                        prev = this.previousFilter || '';\r\n                        character = String.fromCharCode(event.keyCode);\r\n                        skip = false;\r\n\r\n                        clearTimeout(this.filterTimer);\r\n\r\n                        if (character === prev) {\r\n                            skip = true;\r\n                        } else {\r\n                            character = prev + character;\r\n                        }\r\n\r\n                        regex = new RegExp('^' + escape(character), 'i');\r\n                        match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                            return regex.test($(this).children('a').text());\r\n                        });\r\n                        match = skip && match.index(this.active.next()) !== -1 ?\r\n                            this.active.nextAll('.ui-menu-item') :\r\n                            match;\r\n\r\n                        // If no matches on the current filter, reset to the last character pressed\r\n                        // to move down the menu to the first item that starts with that character\r\n                        if (!match.length) {\r\n                            character = String.fromCharCode(event.keyCode);\r\n                            regex = new RegExp('^' + escape(character), 'i');\r\n                            match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                                return regex.test($(this).children('a').text());\r\n                            });\r\n                        }\r\n\r\n                        if (match.length) {\r\n                            this.focus(event, match);\r\n\r\n                            if (match.length > 1) {\r\n                                this.previousFilter = character;\r\n                                this.filterTimer = this._delay(function () {\r\n                                    delete this.previousFilter;\r\n                                }, 1000);\r\n                            } else {\r\n                                delete this.previousFilter;\r\n                            }\r\n                        } else {\r\n                            delete this.previousFilter;\r\n                        }\r\n                }\r\n            } else {\r\n                switch (event.keyCode) {\r\n                    case $.ui.keyCode.DOWN:\r\n                        this.next(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.UP:\r\n                        this.previous(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.RIGHT:\r\n                        if (this.active && !this.active.is('.ui-state-disabled')) {\r\n                            this.expand(event);\r\n                        }\r\n                        break;\r\n\r\n                    case $.ui.keyCode.ENTER:\r\n                    case $.ui.keyCode.SPACE:\r\n                        this._activate(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.LEFT:\r\n                    case $.ui.keyCode.ESCAPE:\r\n                        this.collapse(event);\r\n                        break;\r\n                    default:\r\n                        preventDefault = false;\r\n                        prev = this.previousFilter || '';\r\n                        character = String.fromCharCode(event.keyCode);\r\n                        skip = false;\r\n\r\n                        clearTimeout(this.filterTimer);\r\n\r\n                        if (character === prev) {\r\n                            skip = true;\r\n                        } else {\r\n                            character = prev + character;\r\n                        }\r\n\r\n                        regex = new RegExp('^' + escape(character), 'i');\r\n                        match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                            return regex.test($(this).children('a').text());\r\n                        });\r\n                        match = skip && match.index(this.active.next()) !== -1 ?\r\n                            this.active.nextAll('.ui-menu-item') :\r\n                            match;\r\n\r\n                        // If no matches on the current filter, reset to the last character pressed\r\n                        // to move down the menu to the first item that starts with that character\r\n                        if (!match.length) {\r\n                            character = String.fromCharCode(event.keyCode);\r\n                            regex = new RegExp('^' + escape(character), 'i');\r\n                            match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                                return regex.test($(this).children('a').text());\r\n                            });\r\n                        }\r\n\r\n                        if (match.length) {\r\n                            this.focus(event, match);\r\n\r\n                            if (match.length > 1) {\r\n                                this.previousFilter = character;\r\n                                this.filterTimer = this._delay(function () {\r\n                                    delete this.previousFilter;\r\n                                }, 1000);\r\n                            } else {\r\n                                delete this.previousFilter;\r\n                            }\r\n                        } else {\r\n                            delete this.previousFilter;\r\n                        }\r\n                }\r\n            }\r\n\r\n            /* eslint-enable max-depth */\r\n            if (preventDefault) {\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _toggleMobileMode: function () {\r\n            var subMenus;\r\n\r\n            $(this.element).off('mouseenter mouseleave');\r\n            this._on({\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'click .ui-menu-item:has(a)': function (event) {\r\n                    var target;\r\n\r\n                    event.preventDefault();\r\n                    target = $(event.target).closest('.ui-menu-item');\r\n                    target.get(0).scrollIntoView();\r\n\r\n                    if (!target.hasClass('level-top') || !target.has('.ui-menu').length) {\r\n                        window.location.href = target.find('> a').attr('href');\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'click .ui-menu-item:has(.ui-state-active)': function (event) {\r\n                    this.collapseAll(event, true);\r\n                }\r\n            });\r\n\r\n            subMenus = this.element.find('.level-top');\r\n            $.each(subMenus, $.proxy(function (index, item) {\r\n                var category = $(item).find('> a span').not('.ui-menu-icon').text(),\r\n                    categoryUrl = $(item).find('> a').attr('href'),\r\n                    menu = $(item).find('> .ui-menu');\r\n\r\n                this.categoryLink = $('<a>')\r\n                    .attr('href', categoryUrl)\r\n                    .text($.mage.__('All %1').replace('%1', category));\r\n\r\n                this.categoryParent = $('<li>')\r\n                    .addClass('ui-menu-item all-category')\r\n                    .html(this.categoryLink);\r\n\r\n                if (menu.find('.all-category').length === 0) {\r\n                    menu.prepend(this.categoryParent);\r\n                }\r\n\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _toggleDesktopMode: function () {\r\n            var categoryParent, html;\r\n\r\n            $(this.element).off('click mousedown mouseenter mouseleave');\r\n            this._on({\r\n\r\n                /**\r\n                 * Prevent focus from sticking to links inside menu after clicking\r\n                 * them (focus should always stay on UL during navigation).\r\n                 */\r\n                'mousedown .ui-menu-item > a': function (event) {\r\n                    event.preventDefault();\r\n                },\r\n\r\n                /**\r\n                 * Prevent focus from sticking to links inside menu after clicking\r\n                 * them (focus should always stay on UL during navigation).\r\n                 */\r\n                'click .ui-state-disabled > a': function (event) {\r\n                    event.preventDefault();\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuer.Event} event\r\n                 */\r\n                'click .ui-menu-item:has(a)': function (event) {\r\n                    var target = $(event.target).closest('.ui-menu-item');\r\n\r\n                    if (!this.mouseHandled && target.not('.ui-state-disabled').length) {\r\n                        this.select(event);\r\n\r\n                        // Only set the mouseHandled flag if the event will bubble, see #9469.\r\n                        if (!event.isPropagationStopped()) {\r\n                            this.mouseHandled = true;\r\n                        }\r\n\r\n                        // Open submenu on click\r\n                        if (target.has('.ui-menu').length) {\r\n                            this.expand(event);\r\n                        } else if (!this.element.is(':focus') &&\r\n                            $(this.document[0].activeElement).closest('.ui-menu').length\r\n                        ) {\r\n                            // Redirect focus to the menu\r\n                            this.element.trigger('focus', [true]);\r\n\r\n                            // If the active item is on the top level, let it stay active.\r\n                            // Otherwise, blur the active item since it is no longer visible.\r\n                            if (this.active && this.active.parents('.ui-menu').length === 1) { //eslint-disable-line\r\n                                clearTimeout(this.timer);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'mouseenter .ui-menu-item': function (event) {\r\n                    var target = $(event.currentTarget),\r\n                        submenu = this.options.menus,\r\n                        ulElement,\r\n                        ulElementWidth,\r\n                        width,\r\n                        targetPageX,\r\n                        rightBound;\r\n\r\n                    if (target.has(submenu)) {\r\n                        ulElement = target.find(submenu);\r\n                        ulElementWidth = ulElement.outerWidth(true);\r\n                        width = target.outerWidth() * 2;\r\n                        targetPageX = target.offset().left;\r\n                        rightBound = $(window).width();\r\n\r\n                        if (ulElementWidth + width + targetPageX > rightBound) {\r\n                            ulElement.addClass('submenu-reverse');\r\n                        }\r\n\r\n                        if (targetPageX - ulElementWidth < 0) {\r\n                            ulElement.removeClass('submenu-reverse');\r\n                        }\r\n                    }\r\n\r\n                    // Remove ui-state-active class from siblings of the newly focused menu item\r\n                    // to avoid a jump caused by adjacent elements both having a class with a border\r\n                    target.siblings().children('.ui-state-active').removeClass('ui-state-active');\r\n                    this.focus(event, target);\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'mouseleave': function (event) {\r\n                    this.collapseAll(event, true);\r\n                },\r\n\r\n                /**\r\n                 * Mouse leave.\r\n                 */\r\n                'mouseleave .ui-menu': 'collapseAll'\r\n            });\r\n\r\n            categoryParent = this.element.find('.all-category');\r\n            html = $('html');\r\n\r\n            categoryParent.remove();\r\n\r\n            if (html.hasClass('nav-open')) {\r\n                html.removeClass('nav-open');\r\n                setTimeout(function () {\r\n                    html.removeClass('nav-before-open');\r\n                }, this.options.hideDelay);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} handler\r\n         * @param {Number} delay\r\n         * @return {Number}\r\n         * @private\r\n         */\r\n        _delay: function (handler, delay) {\r\n            var instance = this,\r\n\r\n                /**\r\n                 * @return {*}\r\n                 */\r\n                handlerProxy = function () {\r\n                    return (typeof handler === 'string' ? instance[handler] : handler).apply(instance, arguments);\r\n                };\r\n\r\n            return setTimeout(handlerProxy, delay || 0);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        expand: function (event) {\r\n            var newItem = this.active &&\r\n                this.active\r\n                    .children('.ui-menu')\r\n                    .children('.ui-menu-item')\r\n                    .first();\r\n\r\n            if (newItem && newItem.length) {\r\n                if (newItem.closest('.ui-menu').is(':visible') &&\r\n                    newItem.closest('.ui-menu').has('.all-categories')\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                // remove the active state class from the siblings\r\n                this.active.siblings().children('.ui-state-active').removeClass('ui-state-active');\r\n\r\n                this._open(newItem.parent());\r\n\r\n                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\r\n                this._delay(function () {\r\n                    this.focus(event, newItem);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        select: function (event) {\r\n            var ui;\r\n\r\n            this.active = this.active || $(event.target).closest('.ui-menu-item');\r\n\r\n            if (this.active.is('.all-category')) {\r\n                this.active = $(event.target).closest('.ui-menu-item');\r\n            }\r\n            ui = {\r\n                item: this.active\r\n            };\r\n\r\n            if (!this.active.has('.ui-menu').length) {\r\n                this.collapseAll(event, true);\r\n            }\r\n            this._trigger('select', event, ui);\r\n        }\r\n    });\r\n\r\n    $.widget('mage.navigation', $.mage.menu, {\r\n        options: {\r\n            responsiveAction: 'wrap', //option for responsive handling\r\n            maxItems: null, //option to set max number of menu items\r\n            container: '#menu', //container to check against navigation length\r\n            moreText: $.mage.__('more'),\r\n            breakpoint: 768\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            var that, responsive;\r\n\r\n            this._super();\r\n\r\n            that = this;\r\n            responsive = this.options.responsiveAction;\r\n\r\n            this.element\r\n                .addClass('ui-menu-responsive')\r\n                .attr('responsive', 'main');\r\n\r\n            this.setupMoreMenu();\r\n            this.setMaxItems();\r\n\r\n            //check responsive option\r\n            if (responsive == 'onResize') { //eslint-disable-line eqeqeq\r\n                $(window).on('resize', function () {\r\n                    if ($(window).width() > that.options.breakpoint) {\r\n                        that._responsive();\r\n                        $('[responsive=more]').show();\r\n                    } else {\r\n                        that.element.children().show();\r\n                        $('[responsive=more]').hide();\r\n                    }\r\n                });\r\n            } else if (responsive == 'onReload') { //eslint-disable-line eqeqeq\r\n                this._responsive();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Setup more menu.\r\n         */\r\n        setupMoreMenu: function () {\r\n            var moreListItems = this.element.children().clone(),\r\n                moreLink = $('<a>' + this.options.moreText + '</a>');\r\n\r\n            moreListItems.hide();\r\n\r\n            moreLink.attr('href', '#');\r\n\r\n            this.moreItemsList = $('<ul>')\r\n                .append(moreListItems);\r\n\r\n            this.moreListContainer = $('<li>')\r\n                .append(moreLink)\r\n                .append(this.moreItemsList);\r\n\r\n            this.responsiveMenu = $('<ul>')\r\n                .addClass('ui-menu-more')\r\n                .attr('responsive', 'more')\r\n                .append(this.moreListContainer)\r\n                .menu({\r\n                    position: {\r\n                        my: 'right top',\r\n                        at: 'right bottom'\r\n                    }\r\n                })\r\n                .insertAfter(this.element);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _responsive: function () {\r\n            var container = $(this.options.container),\r\n                containerSize = container.width(),\r\n                width = 0,\r\n                items = this.element.children('li'),\r\n                more = $('.ui-menu-more > li > ul > li a');\r\n\r\n            items = items.map(function () {\r\n                var item = {};\r\n\r\n                item.item = $(this);\r\n                item.itemSize = $(this).outerWidth();\r\n\r\n                return item;\r\n            });\r\n\r\n            $.each(items, function (index) {\r\n                var itemText = items[index].item\r\n                    .find('a:first')\r\n                    .text();\r\n\r\n                width += parseInt(items[index].itemSize, null); //eslint-disable-line radix\r\n\r\n                if (width < containerSize) {\r\n                    items[index].item.show();\r\n\r\n                    more.each(function () {\r\n                        var text = $(this).text();\r\n\r\n                        if (text === itemText) {\r\n                            $(this).parent().hide();\r\n                        }\r\n                    });\r\n                } else if (width > containerSize) {\r\n                    items[index].item.hide();\r\n\r\n                    more.each(function () {\r\n                        var text = $(this).text();\r\n\r\n                        if (text === itemText) {\r\n                            $(this).parent().show();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set max items.\r\n         */\r\n        setMaxItems: function () {\r\n            var items = this.element.children('li'),\r\n                itemsCount = items.length,\r\n                maxItems = this.options.maxItems,\r\n                overflow = itemsCount - maxItems,\r\n                overflowItems = items.slice(overflow);\r\n\r\n            overflowItems.hide();\r\n\r\n            overflowItems.each(function () {\r\n                var itemText = $(this).find('a:first').text();\r\n\r\n                $(this).hide();\r\n\r\n                $('.ui-menu-more > li > ul > li a').each(function () {\r\n                    var text = $(this).text();\r\n\r\n                    if (text === itemText) {\r\n                        $(this).parent().show();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    return {\r\n        menu: $.mage.menu,\r\n        navigation: $.mage.navigation\r\n    };\r\n});\r\n","mage/multiselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'text!mage/multiselect.html',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery-ui-modules/widget',\r\n    'jquery/editableMultiselect/js/jquery.multiselect'\r\n], function (_, $, searchTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.multiselect2', {\r\n        options: {\r\n            mselectContainer: 'section.mselect-list',\r\n            mselectItemsWrapperClass: 'mselect-items-wrapper',\r\n            mselectCheckedClass: 'mselect-checked',\r\n            containerClass: 'paginated',\r\n            searchInputClass: 'admin__action-multiselect-search',\r\n            selectedItemsCountClass: 'admin__action-multiselect-items-selected',\r\n            currentPage: 1,\r\n            lastAppendValue: 0,\r\n            updateDelay: 1000,\r\n            optionsLoaded: false\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            $.fn.multiselect.call(this.element, this.options);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _init: function () {\r\n            this.domElement = this.element.get(0);\r\n\r\n            this.$container = $(this.options.mselectContainer);\r\n            this.$wrapper = this.$container.find('.' + this.options.mselectItemsWrapperClass);\r\n            this.$item = this.$wrapper.find('div').first();\r\n            this.selectedValues = [];\r\n            this.values = {};\r\n\r\n            this.$container.addClass(this.options.containerClass).prepend(searchTemplate);\r\n            this.$input = this.$container.find('.' + this.options.searchInputClass);\r\n            this.$selectedCounter = this.$container.find('.' + this.options.selectedItemsCountClass);\r\n            this.filter = '';\r\n\r\n            if (this.domElement.options.length) {\r\n                this._setLastAppendOption(this.domElement.options[this.domElement.options.length - 1].value);\r\n            }\r\n\r\n            this._initElement();\r\n            this._events();\r\n        },\r\n\r\n        /**\r\n         * Leave only saved/selected options in select element.\r\n         *\r\n         * @private\r\n         */\r\n        _initElement: function () {\r\n            this.element.empty();\r\n            _.each(this.options.selectedValues, function (value) {\r\n                this._createSelectedOption({\r\n                    value: value,\r\n                    label: value\r\n                });\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Attach required events.\r\n         *\r\n         * @private\r\n         */\r\n        _events: function () {\r\n            var onKeyUp = _.debounce(this.onKeyUp, this.options.updateDelay);\r\n\r\n            _.bindAll(this, 'onScroll', 'onCheck', 'onOptionsChange');\r\n\r\n            this.$wrapper.on('scroll', this.onScroll);\r\n            this.$wrapper.on('change.mselectCheck', '[type=checkbox]', this.onCheck);\r\n            this.$input.on('keyup', _.bind(onKeyUp, this));\r\n            this.element.on('change.hiddenSelect', this.onOptionsChange);\r\n        },\r\n\r\n        /**\r\n         * Behaves multiselect scroll.\r\n         */\r\n        onScroll: function () {\r\n            var height = this.$wrapper.height(),\r\n                scrollHeight = this.$wrapper.prop('scrollHeight'),\r\n                scrollTop = Math.ceil(this.$wrapper.prop('scrollTop'));\r\n\r\n            if (!this.options.optionsLoaded && scrollHeight - height <= scrollTop) {\r\n                this.loadOptions();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Behaves keyup event on input search\r\n         */\r\n        onKeyUp: function () {\r\n            if (this.getSearchCriteria() === this.filter) {\r\n                return false;\r\n            }\r\n\r\n            this.setFilter();\r\n            this.clearMultiselectOptions();\r\n            this.setCurrentPage(0);\r\n            this.loadOptions();\r\n        },\r\n\r\n        /**\r\n         * Callback for select change event\r\n         */\r\n        onOptionsChange: function () {\r\n            this.selectedValues = _.map(this.domElement.options, function (option) {\r\n                this.values[option.value] = true;\r\n\r\n                return option.value;\r\n            }, this);\r\n\r\n            this._updateSelectedCounter();\r\n        },\r\n\r\n        /**\r\n         * Overrides native check behaviour.\r\n         *\r\n         * @param {Event} event\r\n         */\r\n        onCheck: function (event) {\r\n            var checkbox = event.target,\r\n                option = {\r\n                    value: checkbox.value,\r\n                    label: $(checkbox).parent('label').text()\r\n                };\r\n\r\n            checkbox.checked ? this._createSelectedOption(option) : this._removeSelectedOption(option);\r\n            event.stopPropagation();\r\n        },\r\n\r\n        /**\r\n         * Show error message.\r\n         *\r\n         * @param {String} message\r\n         */\r\n        onError: function (message) {\r\n            alert({\r\n                content: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates current filter state.\r\n         */\r\n        setFilter: function () {\r\n            this.filter = this.getSearchCriteria() || '';\r\n        },\r\n\r\n        /**\r\n         * Reads search input value.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getSearchCriteria: function () {\r\n            return $.trim(this.$input.val());\r\n        },\r\n\r\n        /**\r\n         * Load options data.\r\n         */\r\n        loadOptions: function () {\r\n            var nextPage = this.getCurrentPage() + 1;\r\n\r\n            this.$wrapper.trigger('processStart');\r\n            this.$input.prop('disabled', true);\r\n\r\n            $.get(this.options.nextPageUrl, {\r\n                p: nextPage,\r\n                s: this.filter\r\n            })\r\n            .done(function (response) {\r\n                if (response.success) {\r\n                    this.appendOptions(response.result);\r\n                    this.setCurrentPage(nextPage);\r\n                } else {\r\n                    this.onError(response.errorMessage);\r\n                }\r\n            }.bind(this))\r\n            .always(function () {\r\n                this.$wrapper.trigger('processStop');\r\n                this.$input.prop('disabled', false);\r\n\r\n                if (this.filter) {\r\n                    this.$input.focus();\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Append loaded options\r\n         *\r\n         * @param {Array} options\r\n         */\r\n        appendOptions: function (options) {\r\n            var divOptions = [];\r\n\r\n            if (!options.length) {\r\n                return false;\r\n            }\r\n\r\n            if (this.isOptionsLoaded(options)) {\r\n                return;\r\n            }\r\n\r\n            options.forEach(function (option) {\r\n                if (!this.values[option.value]) {\r\n                    this.values[option.value] = true;\r\n                    option.selected = this._isOptionSelected(option);\r\n                    divOptions.push(this._createMultiSelectOption(option));\r\n                    this._setLastAppendOption(option.value);\r\n                }\r\n            }, this);\r\n\r\n            this.$wrapper.append(divOptions);\r\n        },\r\n\r\n        /**\r\n         * Clear multiselect options\r\n         */\r\n        clearMultiselectOptions: function () {\r\n            this._setLastAppendOption(0);\r\n            this.values = {};\r\n            this.$wrapper.empty();\r\n        },\r\n\r\n        /**\r\n         * Checks if all options are already loaded\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        isOptionsLoaded: function (options) {\r\n            this.options.optionsLoaded = this.options.lastAppendValue === options[options.length - 1].value;\r\n\r\n            return this.options.optionsLoaded;\r\n        },\r\n\r\n        /**\r\n         * Setter for current page.\r\n         *\r\n         * @param {Number} page\r\n         */\r\n        setCurrentPage: function (page) {\r\n            this.options.currentPage = page;\r\n        },\r\n\r\n        /**\r\n         * Getter for current page.\r\n         *\r\n         * @return {Number}\r\n         */\r\n        getCurrentPage: function () {\r\n            return this.options.currentPage;\r\n        },\r\n\r\n        /**\r\n         * Creates new selected option for select element\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @private\r\n         */\r\n        _createSelectedOption: function (option) {\r\n            var selectOption = new Option(option.label, option.value, false, true);\r\n\r\n            this.element.append(selectOption);\r\n            this.selectedValues.push(option.value);\r\n            this._updateSelectedCounter();\r\n\r\n            return selectOption;\r\n        },\r\n\r\n        /**\r\n         * Remove passed option from select element\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @return {Object} option\r\n         * @private\r\n         */\r\n        _removeSelectedOption: function (option) {\r\n            var unselectedOption = _.findWhere(this.domElement.options, {\r\n                value: option.value\r\n            });\r\n\r\n            if (!_.isUndefined(unselectedOption)) {\r\n                this.domElement.remove(unselectedOption.index);\r\n                this.selectedValues.splice(_.indexOf(this.selectedValues, option.value), 1);\r\n                this._updateSelectedCounter();\r\n            }\r\n\r\n            return unselectedOption;\r\n        },\r\n\r\n        /**\r\n         * Creates new DIV option for multiselect widget\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @param {Boolean} option.selected - is option selected\r\n         * @private\r\n         */\r\n        _createMultiSelectOption: function (option) {\r\n            var item = this.$item.clone(),\r\n                checkbox = item.find('input'),\r\n                isSelected = !!option.selected;\r\n\r\n            checkbox.val(option.value)\r\n                .prop('checked', isSelected)\r\n                .toggleClass(this.options.mselectCheckedClass, isSelected);\r\n\r\n            item.find('label > span').text(option.label);\r\n\r\n            return item;\r\n        },\r\n\r\n        /**\r\n         * Checks if passed option should be selected\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @param {Boolean} option.selected - is option selected\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _isOptionSelected: function (option) {\r\n            return !!~this.selectedValues.indexOf(option.value);\r\n        },\r\n\r\n        /**\r\n         * Saves last added option value.\r\n         *\r\n         * @param {Number} value\r\n         * @private\r\n         */\r\n        _setLastAppendOption: function (value) {\r\n            this.options.lastAppendValue = value;\r\n        },\r\n\r\n        /**\r\n         * Updates counter of selected items.\r\n         *\r\n         * @private\r\n         */\r\n        _updateSelectedCounter: function () {\r\n            this.$selectedCounter.text(this.selectedValues.length);\r\n        }\r\n    });\r\n\r\n    return $.mage.multiselect2;\r\n});\r\n","mage/polyfill.js":"try {\r\n    if (!window.localStorage || !window.sessionStorage) {\r\n        throw new Error();\r\n    }\r\n\r\n    localStorage.setItem('storage_test', 1);\r\n    localStorage.removeItem('storage_test');\r\n} catch (e) {\r\n    (function () {\r\n        'use strict';\r\n\r\n        /**\r\n         * Returns a storage object to shim local or sessionStorage\r\n         * @param {String} type - either 'local' or 'session'\r\n         */\r\n        var Storage = function (type) {\r\n            var data;\r\n\r\n            /**\r\n             * Creates a cookie\r\n             * @param {String} name\r\n             * @param {String} value\r\n             * @param {Integer} days\r\n             */\r\n            function createCookie(name, value, days) {\r\n                var date, expires;\r\n\r\n                if (days) {\r\n                    date = new Date();\r\n                    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\r\n                    expires = '; expires=' + date.toGMTString();\r\n                } else {\r\n                    expires = '';\r\n                }\r\n                document.cookie = name + '=' + value + expires + '; path=/';\r\n            }\r\n\r\n            /**\r\n             * Reads value of a cookie\r\n             * @param {String} name\r\n             */\r\n            function readCookie(name) {\r\n                var nameEQ = name + '=',\r\n                    ca = document.cookie.split(';'),\r\n                    i = 0,\r\n                    c;\r\n\r\n                for (i = 0; i < ca.length; i++) {\r\n                    c = ca[i];\r\n\r\n                    while (c.charAt(0) === ' ') {\r\n                        c = c.substring(1, c.length);\r\n                    }\r\n\r\n                    if (c.indexOf(nameEQ) === 0) {\r\n                        return c.substring(nameEQ.length, c.length);\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            /**\r\n             * Returns cookie name based upon the storage type.\r\n             * If this is session storage, the function returns a unique cookie per tab\r\n             */\r\n            function getCookieName() {\r\n\r\n                if (type !== 'session') {\r\n                    return 'localstorage';\r\n                }\r\n\r\n                if (!window.name) {\r\n                    window.name = new Date().getTime();\r\n                }\r\n\r\n                return 'sessionStorage' + window.name;\r\n            }\r\n\r\n            /**\r\n             * Sets storage cookie to a data object\r\n             * @param {Object} dataObject\r\n             */\r\n            function setData(dataObject) {\r\n                data = encodeURIComponent(JSON.stringify(dataObject));\r\n                createCookie(getCookieName(), data, 365);\r\n            }\r\n\r\n            /**\r\n             * Clears value of cookie data\r\n             */\r\n            function clearData() {\r\n                createCookie(getCookieName(), '', 365);\r\n            }\r\n\r\n            /**\r\n             * @returns value of cookie data\r\n             */\r\n            function getData() {\r\n                var dataResponse = readCookie(getCookieName());\r\n\r\n                return dataResponse ? JSON.parse(decodeURIComponent(dataResponse)) : {};\r\n            }\r\n\r\n            data = getData();\r\n\r\n            return {\r\n                length: 0,\r\n\r\n                /**\r\n                 * Clears data from storage\r\n                 */\r\n                clear: function () {\r\n                    data = {};\r\n                    this.length = 0;\r\n                    clearData();\r\n                },\r\n\r\n                /**\r\n                 * Gets an item from storage\r\n                 * @param {String} key\r\n                 */\r\n                getItem: function (key) {\r\n                    return data[key] === undefined ? null : data[key];\r\n                },\r\n\r\n                /**\r\n                 * Gets an item by index from storage\r\n                 * @param {Integer} i\r\n                 */\r\n                key: function (i) {\r\n                    var ctr = 0,\r\n                        k;\r\n\r\n                    for (k in data) {\r\n\r\n                        if (data.hasOwnProperty(k)) {\r\n\r\n                            // eslint-disable-next-line max-depth\r\n                            if (ctr.toString() === i.toString()) {\r\n                                return k;\r\n                            }\r\n                            ctr++;\r\n                        }\r\n                    }\r\n\r\n                    return null;\r\n                },\r\n\r\n                /**\r\n                 * Removes an item from storage\r\n                 * @param {String} key\r\n                 */\r\n                removeItem: function (key) {\r\n                    delete data[key];\r\n                    this.length--;\r\n                    setData(data);\r\n                },\r\n\r\n                /**\r\n                 * Sets an item from storage\r\n                 * @param {String} key\r\n                 * @param {String} value\r\n                 */\r\n                setItem: function (key, value) {\r\n                    data[key] = value.toString();\r\n                    this.length++;\r\n                    setData(data);\r\n                }\r\n            };\r\n        };\r\n\r\n        window.localStorage.prototype = window.localStorage = new Storage('local');\r\n        window.sessionStorage.prototype = window.sessionStorage = new Storage('session');\r\n    })();\r\n}\r\n","mage/popup-window.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.popupWindow', {\r\n        options: {\r\n            centerBrowser: 0, // center window over browser window? {1 (YES) or 0 (NO)}. overrides top and left\r\n            centerScreen: 0, // center window over entire screen? {1 (YES) or 0 (NO)}. overrides top and left\r\n            height: 500, // sets the height in pixels of the window.\r\n            left: 0, // left position when the window appears.\r\n            location: 0, // determines whether the address bar is displayed {1 (YES) or 0 (NO)}.\r\n            menubar: 0, // determines whether the menu bar is displayed {1 (YES) or 0 (NO)}.\r\n            resizable: 0, // whether the window can be resized {1 (YES) or 0 (NO)}.\r\n            scrollbars: 0, // determines whether scrollbars appear on the window {1 (YES) or 0 (NO)}.\r\n            status: 0, // whether a status line appears at the bottom of the window {1 (YES) or 0 (NO)}.\r\n            width: 500, // sets the width in pixels of the window.\r\n            windowName: null, // name of window set from the name attribute of the element that invokes the click\r\n            windowURL: null, // url used for the popup\r\n            top: 0, // top position when the window appears.\r\n            toolbar: 0 // determines whether a toolbar is displayed {1 (YES) or 0 (NO)}.\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.element.on('click', $.proxy(this._openPopupWindow, this));\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _openPopupWindow: function (event) {\r\n            var element = $(event.target),\r\n                settings = this.options,\r\n                windowFeatures =\r\n                    'height=' + settings.height +\r\n                        ',width=' + settings.width +\r\n                        ',toolbar=' + settings.toolbar +\r\n                        ',scrollbars=' + settings.scrollbars +\r\n                        ',status=' + settings.status +\r\n                        ',resizable=' + settings.resizable +\r\n                        ',location=' + settings.location +\r\n                        ',menuBar=' + settings.menubar,\r\n                centeredX,\r\n                centeredY;\r\n\r\n            settings.windowName = settings.windowName || element.attr('name');\r\n            settings.windowURL = settings.windowURL || element.attr('href');\r\n\r\n            if (settings.centerBrowser) {\r\n                centeredY = window.screenY + (window.outerHeight / 2 - settings.height / 2);\r\n                centeredX = window.screenX + (window.outerWidth / 2 - settings.width / 2);\r\n                windowFeatures += ',left=' + centeredX + ',top=' + centeredY;\r\n            } else if (settings.centerScreen) {\r\n                centeredY = (screen.height - settings.height) / 2;\r\n                centeredX = (screen.width - settings.width) / 2;\r\n                windowFeatures += ',left=' + centeredX + ',top=' + centeredY;\r\n            } else {\r\n                windowFeatures += ',left=' + settings.left + ',top=' + settings.top;\r\n            }\r\n\r\n            window.open(settings.windowURL, settings.windowName, windowFeatures).focus();\r\n            event.preventDefault();\r\n        }\r\n    });\r\n\r\n    return $.mage.popupWindow;\r\n});\r\n","mage/redirect-url.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.redirectUrl', {\r\n        options: {\r\n            event: 'click',\r\n            url: undefined\r\n        },\r\n\r\n        /**\r\n         * This method binds elements found in this widget.\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var handlers = {};\r\n\r\n            handlers[this.options.event] = '_onEvent';\r\n            this._on(handlers);\r\n        },\r\n\r\n        /**\r\n         * This method constructs a new widget.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * This method set the url for the redirect.\r\n         * @private\r\n         */\r\n        _onEvent: function () {\r\n            if (this.options.url) {\r\n                location.href = this.options.url;\r\n            } else {\r\n                location.href = this.element.val();\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.redirectUrl;\r\n});\r\n","mage/smart-keyboard-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @return {Object}\r\n     * @constructor\r\n     */\r\n    function KeyboardHandler() {\r\n        var body = $('body'),\r\n            focusState = false,\r\n            tabFocusClass = '_keyfocus',\r\n            productsGrid = '[data-container=\"product-grid\"]',\r\n            catalogProductsGrid = $(productsGrid),\r\n            CODE_TAB = 9;\r\n\r\n        /**\r\n         * Handle logic, when onTabKeyPress fired at first.\r\n         * Then it changes state.\r\n         */\r\n        function onFocusInHandler() {\r\n            focusState = true;\r\n            body.addClass(tabFocusClass)\r\n                .off('focusin.keyboardHandler', onFocusInHandler);\r\n        }\r\n\r\n        /**\r\n         * Handle logic to remove state after onTabKeyPress to normal.\r\n         */\r\n        function onClickHandler() {\r\n            focusState = false;\r\n            body.removeClass(tabFocusClass)\r\n                .off('click', onClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Tab key onKeypress handler. Apply main logic:\r\n         *  - call differ actions onTabKeyPress and onClick\r\n         */\r\n        function smartKeyboardFocus() {\r\n            $(document).on('keydown keypress', function (event) {\r\n                if (event.which === CODE_TAB && !focusState) {\r\n                    body\r\n                        .on('focusin.keyboardHandler', onFocusInHandler)\r\n                        .on('click', onClickHandler);\r\n                }\r\n            });\r\n\r\n            // ARIA support for catalog grid products\r\n            if (catalogProductsGrid.length) {\r\n                body.on('focusin.gridProducts', productsGrid, function () {\r\n                    if (body.hasClass(tabFocusClass)) {\r\n                        $(this).addClass('active');\r\n                    }\r\n                });\r\n                body.on('focusout.gridProducts', productsGrid, function () {\r\n                    $(this).removeClass('active');\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Attach smart focus on specific element.\r\n         * @param {jQuery} element\r\n         */\r\n        function handleFocus(element) {\r\n            element.on('focusin.emulateTabFocus', function () {\r\n                focusState = true;\r\n                body.addClass(tabFocusClass);\r\n                element.off();\r\n            });\r\n\r\n            element.on('focusout.emulateTabFocus', function () {\r\n                focusState = false;\r\n                body.removeClass(tabFocusClass);\r\n                element.off();\r\n            });\r\n        }\r\n\r\n        return {\r\n            apply: smartKeyboardFocus,\r\n            focus: handleFocus\r\n        };\r\n    }\r\n\r\n    return new KeyboardHandler;\r\n});\r\n","mage/sticky.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.sticky', {\r\n        options: {\r\n            /**\r\n             * Element selector, who's height will be used to restrict the\r\n             * maximum offsetTop position of the stuck element.\r\n             * Default uses document body.\r\n             * @type {String}\r\n             */\r\n            container: '',\r\n\r\n            /**\r\n             * Spacing in pixels above the stuck element\r\n             * @type {Number|Function} Number or Function that will return a Number\r\n             */\r\n            spacingTop: 0,\r\n\r\n            /**\r\n             * Allows postponing sticking, until element will go out of the\r\n             * screen for the number of pixels.\r\n             * @type {Number|Function} Number or Function that will return a Number\r\n             */\r\n            stickAfter: 0,\r\n\r\n            /**\r\n             * CSS class for active sticky state\r\n             * @type {String}\r\n             */\r\n            stickyClass: '_sticky'\r\n        },\r\n\r\n        /**\r\n         * Retrieve option value\r\n         * @param  {String} option\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _getOptionValue: function (option) {\r\n            var value = this.options[option] || 0;\r\n\r\n            if (typeof value === 'function') {\r\n                value = this.options[option]();\r\n            }\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * Bind handlers to scroll event\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            $(window).on({\r\n                'scroll': $.proxy(this._stick, this),\r\n                'resize': $.proxy(this.reset, this)\r\n            });\r\n\r\n            this.element.on('dimensionsChanged', $.proxy(this.reset, this));\r\n\r\n            this.reset();\r\n        },\r\n\r\n        /**\r\n         * float Block on windowScroll\r\n         * @private\r\n         */\r\n        _stick: function () {\r\n            var offset,\r\n                isStatic,\r\n                stuck,\r\n                stickAfter;\r\n\r\n            isStatic = this.element.css('position') === 'static';\r\n\r\n            if (!isStatic && this.element.is(':visible')) {\r\n                offset = $(document).scrollTop() -\r\n                    this.parentOffset +\r\n                    this._getOptionValue('spacingTop');\r\n\r\n                offset = Math.max(0, Math.min(offset, this.maxOffset));\r\n\r\n                stuck = this.element.hasClass(this.options.stickyClass);\r\n                stickAfter = this._getOptionValue('stickAfter');\r\n\r\n                if (offset && !stuck && offset < stickAfter) {\r\n                    offset = 0;\r\n                }\r\n\r\n                this.element\r\n                    .toggleClass(this.options.stickyClass, offset > 0)\r\n                    .css('top', offset);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Defines maximum offset value of the element.\r\n         * @private\r\n         */\r\n        _calculateDimens: function () {\r\n            var $parent         = this.element.parent(),\r\n                topMargin       = parseInt(this.element.css('margin-top'), 10),\r\n                parentHeight    = $parent.height() - topMargin,\r\n                height          = this.element.innerHeight(),\r\n                maxScroll       = document.body.offsetHeight - window.innerHeight;\r\n\r\n            if (this.options.container.length > 0) {\r\n                maxScroll = $(this.options.container).height();\r\n            }\r\n\r\n            this.parentOffset   = $parent.offset().top + topMargin;\r\n            this.maxOffset      = maxScroll - this.parentOffset;\r\n\r\n            if (this.maxOffset + height >= parentHeight) {\r\n                this.maxOffset = parentHeight - height;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Facade method that palces sticky element where it should be.\r\n         */\r\n        reset: function () {\r\n            this._calculateDimens()\r\n                ._stick();\r\n        }\r\n    });\r\n\r\n    return $.mage.sticky;\r\n});\r\n","mage/storage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['jquery', 'mage/url'], function ($, urlBuilder) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Perform asynchronous GET request to server.\r\n         * @param {String} url\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        get: function (url, global, contentType) {\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'GET',\r\n                global: global,\r\n                contentType: contentType\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous POST request to server.\r\n         * @param {String} url\r\n         * @param {String} data\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        post: function (url, data, global, contentType) {\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'POST',\r\n                data: data,\r\n                global: global,\r\n                contentType: contentType\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous PUT request to server.\r\n         * @param {String} url\r\n         * @param {String} data\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        put: function (url, data, global, contentType, headers) {\r\n            var ajaxSettings = {};\r\n\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n            ajaxSettings.url = urlBuilder.build(url);\r\n            ajaxSettings.type = 'PUT';\r\n            ajaxSettings.data = data;\r\n            ajaxSettings.global = global;\r\n            ajaxSettings.contentType = contentType;\r\n\r\n            if (headers) {\r\n                ajaxSettings.headers = headers;\r\n            }\r\n\r\n            return $.ajax(ajaxSettings);\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous DELETE request to server.\r\n         * @param {String} url\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        delete: function (url, global, contentType) {\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'DELETE',\r\n                global: global,\r\n                contentType: contentType\r\n            });\r\n        }\r\n    };\r\n});\r\n","mage/tabs.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/core',\r\n    'mage/mage',\r\n    'mage/collapsible'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.tabs', {\r\n        options: {\r\n            active: 0,\r\n            disabled: [],\r\n            openOnFocus: true,\r\n            collapsible: false,\r\n            collapsibleElement: '[data-role=collapsible]',\r\n            header: '[data-role=title]',\r\n            content: '[data-role=content]',\r\n            trigger: '[data-role=trigger]',\r\n            closedState: null,\r\n            openedState: null,\r\n            disabledState: null,\r\n            ajaxUrlElement: '[data-ajax=true]',\r\n            ajaxContent: false,\r\n            loadingClass: null,\r\n            saveState: false,\r\n            animate: false,\r\n            icons: {\r\n                activeHeader: null,\r\n                header: null\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            if (typeof this.options.disabled === 'string') {\r\n                this.options.disabled = this.options.disabled.split(' ').map(function (item) {\r\n                    return parseInt(item, 10);\r\n                });\r\n            }\r\n            this._processPanels();\r\n            this._handleDeepLinking();\r\n            this._processTabIndex();\r\n            this._closeOthers();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            $.each(this.collapsibles, function () {\r\n                $(this).collapsible('destroy');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * If deep linking is used, all sections must be closed but the one that contains the anchor.\r\n         * @private\r\n         */\r\n        _handleDeepLinking: function () {\r\n            var self = this,\r\n                anchor = window.location.hash,\r\n                isValid = $.mage.isValidSelector(anchor),\r\n                anchorId = anchor.replace('#', '');\r\n\r\n            if (anchor && isValid) {\r\n                $.each(self.contents, function (i) {\r\n                    if ($(this).attr('id') === anchorId || $(this).find('#' + anchorId).length) {\r\n                        self.collapsibles.not(self.collapsibles.eq(i)).collapsible('forceDeactivate');\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * When the widget gets instantiated, the first tab that is not disabled receive focusable property\r\n         * All tabs receive tabIndex 0\r\n         * @private\r\n         */\r\n        _processTabIndex: function () {\r\n            var self = this;\r\n\r\n            self.triggers.attr('tabIndex', 0);\r\n            $.each(this.collapsibles, function (i) {\r\n                self.triggers.attr('tabIndex', 0);\r\n                self.triggers.eq(i).attr('tabIndex', 0);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Prepare the elements for instantiating the collapsible widget\r\n         * @private\r\n         */\r\n        _processPanels: function () {\r\n            this.contents = this.element.find(this.options.content);\r\n\r\n            this.collapsibles = this.element.find(this.options.collapsibleElement);\r\n\r\n            this.collapsibles\r\n                .attr('role', 'presentation')\r\n                .parent()\r\n                .attr('role', 'tablist');\r\n\r\n            this.headers = this.element.find(this.options.header);\r\n\r\n            if (this.headers.length === 0) {\r\n                this.headers = this.collapsibles;\r\n            }\r\n            this.triggers = this.element.find(this.options.trigger);\r\n\r\n            if (this.triggers.length === 0) {\r\n                this.triggers = this.headers;\r\n            }\r\n            this._callCollapsible();\r\n        },\r\n\r\n        /**\r\n         * Setting the disabled and active tabs and calling instantiation of collapsible\r\n         * @private\r\n         */\r\n        _callCollapsible: function () {\r\n            var self = this,\r\n                disabled = false,\r\n                active = false;\r\n\r\n            $.each(this.collapsibles, function (i) {\r\n                disabled = active = false;\r\n\r\n                if ($.inArray(i, self.options.disabled) !== -1) {\r\n                    disabled = true;\r\n                }\r\n\r\n                if (i === self.options.active) {\r\n                    active = true;\r\n                }\r\n                self._instantiateCollapsible(this, i, active, disabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Instantiate collapsible.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Number} index\r\n         * @param {*} active\r\n         * @param {*} disabled\r\n         * @private\r\n         */\r\n        _instantiateCollapsible: function (element, index, active, disabled) {\r\n            $(element).collapsible(\r\n                $.extend({}, this.options, {\r\n                    active: active,\r\n                    disabled: disabled,\r\n                    header: this.headers.eq(index),\r\n                    content: this.contents.eq(index),\r\n                    trigger: this.triggers.eq(index)\r\n                })\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Adding callback to close others tabs when one gets opened\r\n         * @private\r\n         */\r\n        _closeOthers: function () {\r\n            var self = this;\r\n\r\n            $.each(this.collapsibles, function () {\r\n                $(this).on('beforeOpen', function () {\r\n                    self.collapsibles.not(this).collapsible('forceDeactivate');\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        activate: function (index) {\r\n            this._toggleActivate('activate', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        deactivate: function (index) {\r\n            this._toggleActivate('deactivate', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} action\r\n         * @param {*} index\r\n         * @private\r\n         */\r\n        _toggleActivate: function (action, index) {\r\n            this.collapsibles.eq(index).collapsible(action);\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        disable: function (index) {\r\n            this._toggleEnable('disable', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        enable: function (index) {\r\n            this._toggleEnable('enable', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} action\r\n         * @param {*} index\r\n         * @private\r\n         */\r\n        _toggleEnable: function (action, index) {\r\n            var self = this;\r\n\r\n            if ($.isArray(index)) {\r\n                $.each(index, function () {\r\n                    self.collapsibles.eq(this).collapsible(action);\r\n                });\r\n            } else if (index === undefined) {\r\n                this.collapsibles.collapsible(action);\r\n            } else {\r\n                this.collapsibles.eq(index).collapsible(action);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var self = this,\r\n                keyCode, toFocus, toFocusIndex, enabledTriggers, length, currentIndex, nextToFocus;\r\n\r\n            if (event.altKey || event.ctrlKey) {\r\n                return;\r\n            }\r\n            keyCode = $.ui.keyCode;\r\n            toFocus = false;\r\n            enabledTriggers = [];\r\n\r\n            $.each(this.triggers, function () {\r\n                if (!self.collapsibles.eq(self.triggers.index($(this))).collapsible('option', 'disabled')) {\r\n                    enabledTriggers.push(this);\r\n                }\r\n            });\r\n            length = $(enabledTriggers).length;\r\n            currentIndex = $(enabledTriggers).index(event.target);\r\n\r\n            /**\r\n             * @param {String} direction\r\n             * @return {*}\r\n             */\r\n            nextToFocus = function (direction) {\r\n                if (length > 0) {\r\n                    if (direction === 'right') {\r\n                        toFocusIndex = (currentIndex + 1) % length;\r\n                    } else {\r\n                        toFocusIndex = (currentIndex + length - 1) % length;\r\n                    }\r\n\r\n                    return enabledTriggers[toFocusIndex];\r\n                }\r\n\r\n                return event.target;\r\n            };\r\n\r\n            switch (event.keyCode) {\r\n                case keyCode.RIGHT:\r\n                case keyCode.DOWN:\r\n                    toFocus = nextToFocus('right');\r\n                    break;\r\n\r\n                case keyCode.LEFT:\r\n                case keyCode.UP:\r\n                    toFocus = nextToFocus('left');\r\n                    break;\r\n\r\n                case keyCode.HOME:\r\n                    toFocus = enabledTriggers[0];\r\n                    break;\r\n\r\n                case keyCode.END:\r\n                    toFocus = enabledTriggers[length - 1];\r\n                    break;\r\n            }\r\n\r\n            if (toFocus) {\r\n                toFocusIndex = this.triggers.index(toFocus);\r\n                $(event.target).attr('tabIndex', -1);\r\n                $(toFocus).attr('tabIndex', 0);\r\n                toFocus.focus();\r\n\r\n                if (this.options.openOnFocus) {\r\n                    this.activate(toFocusIndex);\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var events = {\r\n                keydown: '_keydown'\r\n            };\r\n\r\n            this._off(this.triggers);\r\n            this._on(this.triggers, events);\r\n        }\r\n    });\r\n\r\n    return $.mage.tabs;\r\n});\r\n","mage/template.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if provided string is a valid DOM selector.\r\n     *\r\n     * @param {String} selector - Selector to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isSelector(selector) {\r\n        try {\r\n            document.querySelector(selector);\r\n\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unescapes characters used in underscore templates.\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {String}\r\n     */\r\n    function unescape(str) {\r\n        return str.replace(/&lt;%|%3C%/g, '<%').replace(/%&gt;|%%3E/g, '%>');\r\n    }\r\n\r\n    /**\r\n     * If 'tmpl' is a valid selector, returns target node's innerHTML if found.\r\n     * Else, returns empty string and emits console warning.\r\n     * If 'tmpl' is not a selector, returns 'tmpl' as is.\r\n     *\r\n     * @param {String} tmpl\r\n     * @returns {String}\r\n     */\r\n    function getTmplString(tmpl) {\r\n        if (isSelector(tmpl)) {\r\n            tmpl = document.querySelector(tmpl);\r\n\r\n            if (tmpl) {\r\n                tmpl = tmpl.innerHTML.trim();\r\n            } else {\r\n                console.warn('No template was found by selector: ' + tmpl);\r\n\r\n                tmpl = '';\r\n            }\r\n        }\r\n\r\n        return unescape(tmpl);\r\n    }\r\n\r\n    /**\r\n     * Compiles or renders template provided either\r\n     * by selector or by the template string.\r\n     *\r\n     * @param {String} tmpl - Template string or selector.\r\n     * @param {(Object|Array|Function)} [data] - Data object with which to render template.\r\n     * @returns {String|Function}\r\n     */\r\n    return function (tmpl, data) {\r\n        var render;\r\n\r\n        tmpl   = getTmplString(tmpl);\r\n        render = _.template(tmpl);\r\n\r\n        return !_.isUndefined(data) ?\r\n            render(data) :\r\n            render;\r\n    };\r\n});\r\n","mage/terms.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} args\r\n     */\r\n    $.fn.terms = function (args) {\r\n\r\n        // default\r\n        var defaults = {\r\n                start: 0,\r\n                wrapper: '',\r\n                showAnchor: '',\r\n                effects: 'slide'\r\n            },\r\n            options = $.extend(defaults, args);\r\n\r\n        this.each(function () {\r\n            var obj = $(this),\r\n                wrapper = options.wrapper !== '' ? '> ' + options.wrapper : '',\r\n                switches = $(wrapper + '> [data-section=\"title\"] > [data-toggle=\"switch\"]', obj),\r\n                terms = $(wrapper + '> [data-section=\"content\"]', obj),\r\n                t = switches.length,\r\n                marginTop = $(switches[0]).closest('[data-section=\"title\"]').css('position') == 'absolute' ? 0 : null, //eslint-disable-line\r\n                title,\r\n                current,\r\n\r\n                /**\r\n                 * @param {*} item\r\n                 */\r\n                showItem = function (item) {\r\n                    if (item != current && !$(switches[item]).closest('[data-section=\"title\"]').hasClass('disabled')) { //eslint-disable-line\r\n                        $(switches).closest('[data-section=\"title\"]').removeClass('active');\r\n\r\n                        if (options.wrapper !== '') {\r\n                            $(switches).parent().parent().removeClass('active');\r\n                        }\r\n                        $(terms).removeClass('active');\r\n                        $(switches[item]).closest('[data-section=\"title\"]').addClass('active');\r\n\r\n                        if (options.wrapper !== '') {\r\n                            $(switches[current]).parent().parent().addClass('active');\r\n                        }\r\n                        $(terms[item]).addClass('active');\r\n                        current = item;\r\n                    } else if (\r\n                        // Check if this is accordion width as criteria for now\r\n                        (obj.attr('data-sections') == 'accordion' || $(switches[item]).closest('[data-section=\"title\"]').css('width') == obj.css('width')) && //eslint-disable-line\r\n                        item == current && !$(switches[item]).closest('[data-section=\"title\"]').hasClass('disabled') //eslint-disable-line\r\n                    ) {\r\n                        $(switches).closest('[data-section=\"title\"]').removeClass('active');\r\n\r\n                        if (options.wrapper !== '') {\r\n                            $(switches).parent().parent().removeClass('active');\r\n                        }\r\n                        $(terms).removeClass('active');\r\n                        current = -1;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Init.\r\n                 */\r\n                init = function () {\r\n                    var linksList, i, classes, dataSection, itemHref, itemClass, fromUrl;\r\n\r\n                    if (t > 0) {\r\n                        if ($(switches[0]).closest('[data-section=\"title\"]').css('display') == 'table-cell') { //eslint-disable-line\r\n                            obj.addClass('adjusted');\r\n\r\n                            if (obj[0].tagName == 'DL') { //eslint-disable-line eqeqeq, max-depth\r\n                                linksList = $('<dd>');\r\n                            } else {\r\n                                linksList = $('<div>');\r\n                            }\r\n                            linksList.addClass('sections-nav');\r\n                            obj.prepend(linksList);\r\n\r\n                            for (i = 0; i < t; i++) { //eslint-disable-line max-depth\r\n                                title = $(switches[i]).html();\r\n                                classes = $(switches[i]).closest('[data-section=\"title\"]').attr('class');\r\n                                dataSection = $(switches[i]).closest('[data-section=\"title\"]').attr('data-section');\r\n                                itemHref = $(switches[i]).attr('href');\r\n                                itemClass = $(switches[i]).attr('class');\r\n                                $(switches[i]).parent('[data-section=\"title\"]').hide();\r\n                                switches[i] = $('<a/>', {\r\n                                    href: itemHref,\r\n                                    'class': itemClass,\r\n                                    html: title\r\n                                }).appendTo(linksList);\r\n                                $(switches[i]).wrap(\r\n                                    '<strong class=\"' + classes + '\" data-section=\"' + dataSection + '\" />'\r\n                                );\r\n                            }\r\n                        }\r\n                        $(switches).each(function (ind, el) {\r\n                            $(el).click(function (event) {\r\n                                event.preventDefault();\r\n                                showItem(ind);\r\n                            });\r\n\r\n                            if (marginTop !== null) {\r\n                                $(el).closest('[data-section=\"title\"]').css({\r\n                                    'top': marginTop + 'px'\r\n                                });\r\n                                marginTop += $(el).closest('[data-section=\"title\"]').outerHeight(true);\r\n                                obj.css({\r\n                                    'min-height': marginTop + 'px'\r\n                                });\r\n                            }\r\n                        });\r\n\r\n                        fromUrl = false;\r\n\r\n                        if (window.location.hash.length > 0) {\r\n                            $(terms).each(function (ind, el) {\r\n                                if ('#info-' + $(el).attr('id') == window.location.hash) { //eslint-disable-line eqeqeq\r\n                                    showItem(ind);\r\n                                    $('html, body').animate({\r\n                                        scrollTop: $(switches[ind]).offset().top\r\n                                    }, 700);\r\n                                    fromUrl = true;\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        if (fromUrl === false) {\r\n                            if (options.start % 1 === 0) { //eslint-disable-line max-depth\r\n                                current = options.start + 1;\r\n                                showItem(options.start);\r\n                            } else {\r\n                                $(terms).each(function (ind, el) {\r\n                                    if ($(el).attr('id') == options.start) { //eslint-disable-line eqeqeq\r\n                                        current = ind + 1;\r\n                                        showItem(ind);\r\n                                        $('html, body').animate({\r\n                                            scrollTop: $(switches[ind]).offset().top\r\n                                        }, 700);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n            init();\r\n        });\r\n    };\r\n\r\n    return function (data, el) {\r\n        $(el).terms(data);\r\n    };\r\n});\r\n","mage/toggle.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.toggleAdvanced', {\r\n        options: {\r\n            baseToggleClass: 'active' // Class used to be toggled on clicked element\r\n        },\r\n\r\n        /**\r\n         * Toggle creation\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.beforeCreate();\r\n            this._bindCore();\r\n            this.afterCreate();\r\n        },\r\n\r\n        /**\r\n         *  Core bound events & setup\r\n         * @protected\r\n         */\r\n        _bindCore: function () {\r\n            var widget = this;\r\n\r\n            this.element.on('click', $.proxy(function (e) {\r\n                widget._onClick();\r\n                e.preventDefault();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Binding Click event\r\n         *\r\n         * @protected\r\n         */\r\n        _onClick: function () {\r\n            this._prepareOptions();\r\n            this._toggleSelectors();\r\n        },\r\n\r\n        /**\r\n         * Method used to look for data attributes to override default options\r\n         *\r\n         * @protected\r\n         */\r\n        _prepareOptions: function () {\r\n            this.options.baseToggleClass = this.element.data('base-toggle-class') ?\r\n                this.element.data('base-toggle-class') : this.options.baseToggleClass;\r\n        },\r\n\r\n        /**\r\n         * Method responsible for hiding and revealing specified DOM elements\r\n         * Toggle the class on clicked element\r\n         *\r\n         * @protected\r\n         */\r\n        _toggleSelectors: function () {\r\n            this.element.toggleClass(this.options.baseToggleClass);\r\n        },\r\n\r\n        /**\r\n         * Method used to inject 3rd party functionality before create\r\n         * @public\r\n         */\r\n        beforeCreate: function () {},\r\n\r\n        /**\r\n         * Method used to inject 3rd party functionality after create\r\n         * @public\r\n         */\r\n        afterCreate: function () {}\r\n    });\r\n\r\n    // Extension for mage.toggle - Adding selectors support for other DOM elements we wish to toggle\r\n    $.widget('mage.toggleAdvanced', $.mage.toggleAdvanced, {\r\n\r\n        options: {\r\n            selectorsToggleClass: 'hidden',    // Class used to be toggled on selectors DOM elements\r\n            toggleContainers: null\r\n        },\r\n\r\n        /**\r\n         * Method responsible for hiding and revealing specified DOM elements\r\n         * If data-toggle-selectors attribute is present - toggle will be done on these selectors\r\n         * Otherwise we toggle the class on clicked element\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _toggleSelectors: function () {\r\n            this._super();\r\n\r\n            if (this.options.toggleContainers) {\r\n                $(this.options.toggleContainers).toggleClass(this.options.selectorsToggleClass);\r\n            } else {\r\n                this.element.toggleClass(this.options.baseToggleClass);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method used to look for data attributes to override default options\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _prepareOptions: function () {\r\n            this.options.selectorsToggleClass = this.element.data('selectors-toggle-class') ?\r\n                this.element.data('selectors-toggle-class') : this.options.selectorsToggleClass;\r\n            this.options.toggleContainers = this.element.data('toggle-selectors') ?\r\n                this.element.data('toggle-selectors') : this.options.toggleContainers;\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    // Extension for mage.toggle - Adding label toggle\r\n    $.widget('mage.toggleAdvanced', $.mage.toggleAdvanced, {\r\n\r\n        options: {\r\n            newLabel: null,             // Text of the new label to be used on toggle\r\n            curLabel: null,             // Text of the old label to be used on toggle\r\n            currentLabelElement: null   // Current label container\r\n        },\r\n\r\n        /**\r\n         * Binding Click event\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _onClick: function () {\r\n            this._super();\r\n            this._toggleLabel();\r\n        },\r\n\r\n        /**\r\n         * Method responsible for replacing clicked element labels\r\n         * @protected\r\n         */\r\n        _toggleLabel: function () {\r\n            var cachedLabel, currentLabelSelector;\r\n\r\n            if (this.options.newLabel) {\r\n                cachedLabel = this.options.newLabel;\r\n                currentLabelSelector = this.options.currentLabelElement ?\r\n                        $(this.options.currentLabelElement) : this.element;\r\n\r\n                this.element.data('toggle-label', this.options.curLabel);\r\n                currentLabelSelector.html(this.options.newLabel);\r\n\r\n                this.options.curLabel = this.options.newLabel;\r\n                this.options.newLabel = cachedLabel;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method used to look for data attributes to override default options\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _prepareOptions: function () {\r\n            this.options.newLabel = this.element.data('toggle-label') ?\r\n                this.element.data('toggle-label') : this.options.newLabel;\r\n\r\n            this.options.currentLabelElement = this.element.data('current-label-el') ?\r\n                this.element.data('current-label-el') : this.options.currentLabelElement;\r\n\r\n            if (!this.options.currentLabelElement) {\r\n                this.options.currentLabelElement = this.element;\r\n            }\r\n\r\n            this.options.curLabel = $(this.options.currentLabelElement).html();\r\n\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    return $.mage.toggleAdvanced;\r\n});\r\n","mage/tooltip.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/tooltip'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    //Widget Wrapper\r\n    $.widget('mage.tooltip', $.ui.tooltip, {});\r\n\r\n    return $.mage.tooltip;\r\n});\r\n","mage/translate-inline.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/dialog',\r\n    'mage/translate'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.translateInline', $.ui.dialog, {\r\n        options: {\r\n            translateForm: {\r\n                template: '#translate-form-template',\r\n                data: {\r\n                    id: 'translate-inline-form',\r\n                    message: 'Please refresh the page to see your changes after submitting this form.'\r\n                }\r\n            },\r\n            autoOpen: false,\r\n            translateArea: null,\r\n            modal: true,\r\n            dialogClass: 'popup-window',\r\n            width: '75%',\r\n            title: $.mage.__('Translate'),\r\n            height: 470,\r\n            position: {\r\n                my: 'left top',\r\n                at: 'center top',\r\n                of: 'body'\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('Submit'),\r\n                'class': 'action-primary',\r\n\r\n                /**\r\n                 * Click\r\n                 */\r\n                click: function () {\r\n                    $(this).translateInline('submit');\r\n                }\r\n            },\r\n            {\r\n                text: $.mage.__('Close'),\r\n                'class': 'action-close',\r\n\r\n                /**\r\n                 * Click.\r\n                 */\r\n                click: function () {\r\n                    $(this).translateInline('close');\r\n                }\r\n            }],\r\n\r\n            /**\r\n             * Open.\r\n             */\r\n            open: function () {\r\n                var topMargin;\r\n\r\n                $(this).closest('.ui-dialog').addClass('ui-dialog-active');\r\n                topMargin = jQuery(this).closest('.ui-dialog').children('.ui-dialog-titlebar').outerHeight() + 45;\r\n                jQuery(this).closest('.ui-dialog').css('margin-top', topMargin);\r\n            },\r\n\r\n            /**\r\n             * Close.\r\n             */\r\n            close: function () {\r\n                $(this).closest('.ui-dialog').removeClass('ui-dialog-active');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Translate Inline creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.tmpl = mageTemplate(this.options.translateForm.template);\r\n            (this.options.translateArea && $(this.options.translateArea).length ?\r\n                $(this.options.translateArea) :\r\n                this.element.closest('body'))\r\n                    .on('edit.editTrigger', $.proxy(this._onEdit, this));\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @param {*} templateData\r\n         * @return {*|jQuery|HTMLElement}\r\n         * @private\r\n         */\r\n        _prepareContent: function (templateData) {\r\n            var data = $.extend({\r\n                items: templateData,\r\n                escape: $.mage.escapeHTML\r\n            }, this.options.translateForm.data);\r\n\r\n            this.data = data;\r\n\r\n            return $(this.tmpl({\r\n                data: data\r\n            }));\r\n        },\r\n\r\n        /**\r\n         * Render translation form and open dialog\r\n         * @param {Object} e - object\r\n         * @protected\r\n         */\r\n        _onEdit: function (e) {\r\n            this.target = e.target;\r\n            this.element.html(this._prepareContent($(e.target).data('translate')));\r\n            this.open(e);\r\n        },\r\n\r\n        /**\r\n         * Submit.\r\n         */\r\n        submit: function () {\r\n            if (this.formIsSubmitted) {\r\n                return;\r\n            }\r\n            this._formSubmit();\r\n        },\r\n\r\n        /**\r\n         * Send ajax request on form submit\r\n         * @protected\r\n         */\r\n        _formSubmit: function () {\r\n            var parameters;\r\n\r\n            this.formIsSubmitted = true;\r\n            parameters = $.param({\r\n                area: this.options.area\r\n            }) + '&' + $('#' + this.options.translateForm.data.id).serialize();\r\n\r\n            $.ajax({\r\n                url: this.options.ajaxUrl,\r\n                type: 'POST',\r\n                data: parameters,\r\n                loaderContext: this.element,\r\n                showLoader: true\r\n            }).complete($.proxy(this._formSubmitComplete, this));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} response\r\n         * @private\r\n         */\r\n        _formSubmitComplete: function (response) {\r\n            this.close();\r\n            this.formIsSubmitted = false;\r\n            this._updatePlaceholder(response.responseJSON[this.data.items[0].original]);\r\n        },\r\n\r\n        /**\r\n         * @param {*} newValue\r\n         * @private\r\n         */\r\n        _updatePlaceholder: function (newValue) {\r\n            var target = jQuery(this.target);\r\n\r\n            target.data('translate')[0].shown = newValue;\r\n            target.data('translate')[0].translated = newValue;\r\n            target.html(newValue);\r\n        },\r\n\r\n        /**\r\n         * Destroy translateInline\r\n         */\r\n        destroy: function () {\r\n            this.element.off('.editTrigger');\r\n            this._super();\r\n        }\r\n    });\r\n    // @TODO move the \"escapeHTML\" method into the file with global utility functions\r\n    $.extend(true, $, {\r\n        mage: {\r\n            /**\r\n             * @param {String} str\r\n             * @return {Boolean}\r\n             */\r\n            escapeHTML: function (str) {\r\n                return str ?\r\n                    jQuery('<div/>').text(str).html().replace(/\"/g, '&quot;') :\r\n                    false;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.translateInline;\r\n});\r\n","mage/translate.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/mage',\r\n    'mageTranslationDictionary'\r\n], function ($, mage, dictionary) {\r\n    'use strict';\r\n\r\n    $.extend(true, $, {\r\n        mage: {\r\n            translate: (function () {\r\n                /**\r\n                 * Key-value translations storage\r\n                 * @type {Object}\r\n                 * @private\r\n                 */\r\n                var _data = dictionary;\r\n\r\n                return {\r\n                    /**\r\n                     * Add new translation (two string parameters) or several translations (object)\r\n                     */\r\n                    add: function () {\r\n                        if (arguments.length > 1) {\r\n                            _data[arguments[0]] = arguments[1];\r\n                        } else if (typeof arguments[0] === 'object') {\r\n                            $.extend(_data, arguments[0]);\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Make a translation with parsing (to handle case when _data represents tuple)\r\n                     * @param {String} text\r\n                     * @return {String}\r\n                     */\r\n                    translate: function (text) {\r\n                        return _data[text] ? _data[text] : text;\r\n                    }\r\n                };\r\n            }())\r\n        }\r\n    });\r\n    $.mage.__ = $.proxy($.mage.translate.translate, $.mage.translate);\r\n\r\n    return $.mage.__;\r\n});\r\n","mage/trim-input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.trimInput', {\r\n        options: {\r\n            cache: {}\r\n        },\r\n\r\n        /**\r\n         * Widget initialization\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.options.cache.input = $(this.element);\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Event binding, will monitor change, keyup and paste events.\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            if (this.options.cache.input.length) {\r\n                this._on(this.options.cache.input, {\r\n                    'change': this._trimInput,\r\n                    'keyup': this._trimInput,\r\n                    'paste': this._trimInput\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Trim value\r\n         * @private\r\n         */\r\n        _trimInput: function () {\r\n            // Safari caret position workaround: storing carter position\r\n            var caretStart, caretEnd, input;\r\n\r\n            caretStart = this.options.cache.input.get(0).selectionStart;\r\n            caretEnd = this.options.cache.input.get(0).selectionEnd;\r\n\r\n            input = this._getInputValue().trim();\r\n\r\n            this.options.cache.input.val(input);\r\n\r\n            // Safari caret position workaround: setting caret position to previously stored values\r\n            if (caretStart !== null && caretEnd !== null) {\r\n                this.options.cache.input.get(0).setSelectionRange(caretStart, caretEnd);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get input value\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getInputValue: function () {\r\n            return this.options.cache.input.val();\r\n        }\r\n    });\r\n\r\n    return $.mage.trimInput;\r\n});\r\n","mage/url.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable strict */\r\ndefine([], function () {\r\n    var baseUrl = '';\r\n\r\n    return {\r\n        /**\r\n         * @param {String} url\r\n         */\r\n        setBaseUrl: function (url) {\r\n            baseUrl = url;\r\n        },\r\n\r\n        /**\r\n         * @param {String} path\r\n         * @return {*}\r\n         */\r\n        build: function (path) {\r\n            if (path.indexOf(baseUrl) !== -1) {\r\n                return path;\r\n            }\r\n\r\n            return baseUrl + path;\r\n        }\r\n    };\r\n});\r\n","mage/validation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'moment',\r\n    'jquery-ui-modules/widget',\r\n    'jquery/validate',\r\n    'mage/translate'\r\n], function ($, moment) {\r\n    'use strict';\r\n\r\n    var creditCartTypes, rules, showLabel, originValidateDelegate;\r\n\r\n    $.extend(true, $, {\r\n        // @TODO: Move methods 'isEmpty', 'isEmptyNoTrim', 'parseNumber', 'stripHtml' in file with utility functions\r\n        mage: {\r\n            /**\r\n             * Check if string is empty with trim\r\n             * @param {String} value\r\n             */\r\n            isEmpty: function (value) {\r\n                return value === '' || value === undefined ||\r\n                    value == null || value.length === 0 || /^\\s+$/.test(value);\r\n            },\r\n\r\n            /**\r\n             * Check if string is empty no trim\r\n             * @param {String} value\r\n             */\r\n            isEmptyNoTrim: function (value) {\r\n                return value === '' || value == null || value.length === 0;\r\n            },\r\n\r\n            /**\r\n             * Checks if {value} is between numbers {from} and {to}\r\n             * @param {String} value\r\n             * @param {String} from\r\n             * @param {String} to\r\n             * @returns {Boolean}\r\n             */\r\n            isBetween: function (value, from, to) {\r\n                return ($.mage.isEmpty(from) || value >= $.mage.parseNumber(from)) &&\r\n                    ($.mage.isEmpty(to) || value <= $.mage.parseNumber(to));\r\n            },\r\n\r\n            /**\r\n             * Parse price string\r\n             * @param {String} value\r\n             */\r\n            parseNumber: function (value) {\r\n                var isDot, isComa;\r\n\r\n                if (typeof value !== 'string') {\r\n                    return parseFloat(value);\r\n                }\r\n                isDot = value.indexOf('.');\r\n                isComa = value.indexOf(',');\r\n\r\n                if (isDot !== -1 && isComa !== -1) {\r\n                    if (isComa > isDot) {\r\n                        value = value.replace('.', '').replace(',', '.');\r\n                    } else {\r\n                        value = value.replace(',', '');\r\n                    }\r\n                } else if (isComa !== -1) {\r\n                    value = value.replace(',', '.');\r\n                }\r\n\r\n                return parseFloat(value);\r\n            },\r\n\r\n            /**\r\n             * Removes HTML tags and space characters, numbers and punctuation.\r\n             *\r\n             * @param {String} value - Value being stripped.\r\n             * @return {String}\r\n             */\r\n            stripHtml: function (value) {\r\n                return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ')\r\n                    .replace(/[0-9.(),;:!?%#$'\"_+=\\/-]*/g, '');\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @param {String} name\r\n     * @param {*} method\r\n     * @param {*} message\r\n     * @param {*} dontSkip\r\n     */\r\n    $.validator.addMethod = function (name, method, message, dontSkip) {\r\n        $.validator.methods[name] = method;\r\n        $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];\r\n\r\n        if (method.length < 3 || dontSkip) {\r\n            $.validator.addClassRules(name, $.validator.normalizeRule(name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Javascript object with credit card types\r\n     * 0 - regexp for card number\r\n     * 1 - regexp for cvn\r\n     * 2 - check or not credit card number trough Luhn algorithm by\r\n     */\r\n    creditCartTypes = {\r\n        'SO': [\r\n            new RegExp('^(6334[5-9]([0-9]{11}|[0-9]{13,14}))|(6767([0-9]{12}|[0-9]{14,15}))$'),\r\n            new RegExp('^([0-9]{3}|[0-9]{4})?$'),\r\n            true\r\n        ],\r\n        'SM': [\r\n            new RegExp('(^(5[0678])[0-9]{11,18}$)|(^(6[^05])[0-9]{11,18}$)|' +\r\n                '(^(601)[^1][0-9]{9,16}$)|(^(6011)[0-9]{9,11}$)|(^(6011)[0-9]{13,16}$)|' +\r\n                '(^(65)[0-9]{11,13}$)|(^(65)[0-9]{15,18}$)|(^(49030)[2-9]([0-9]{10}$|[0-9]{12,13}$))|' +\r\n                '(^(49033)[5-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49110)[1-2]([0-9]{10}$|[0-9]{12,13}$))|' +\r\n                '(^(49117)[4-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49118)[0-2]([0-9]{10}$|[0-9]{12,13}$))|' +\r\n                '(^(4936)([0-9]{12}$|[0-9]{14,15}$))'), new RegExp('^([0-9]{3}|[0-9]{4})?$'),\r\n            true\r\n        ],\r\n        'VI': [new RegExp('^4[0-9]{12}([0-9]{3})?$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MC': [\r\n            new RegExp('^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$'),\r\n            new RegExp('^[0-9]{3}$'),\r\n            true\r\n        ],\r\n        'AE': [new RegExp('^3[47][0-9]{13}$'), new RegExp('^[0-9]{4}$'), true],\r\n        'DI': [new RegExp('^(6011(0|[2-4]|74|7[7-9]|8[6-9]|9)|6(4[4-9]|5))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'JCB': [new RegExp('^35(2[8-9]|[3-8])\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'DN': [new RegExp('^(3(0[0-5]|095|6|[8-9]))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'UN': [\r\n            new RegExp('^(622(1(2[6-9]|[3-9])|[3-8]|9([[0-1]|2[0-5]))|62[4-6]|628([2-8]))\\\\d*?$'),\r\n            new RegExp('^[0-9]{3}$'),\r\n            true\r\n        ],\r\n        'MI': [new RegExp('^(5(0|[6-9])|63|67(?!59|6770|6774))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MD': [new RegExp('^6759(?!24|38|40|6[3-9]|70|76)|676770|676774\\\\d*$'), new RegExp('^[0-9]{3}$'), true]\r\n    };\r\n\r\n    /**\r\n     * validate credit card number using mod10\r\n     * @param {String} s\r\n     * @return {Boolean}\r\n     */\r\n    function validateCreditCard(s) {\r\n        // remove non-numerics\r\n        var v = '0123456789',\r\n            w = '',\r\n            i, j, k, m, c, a, x;\r\n\r\n        for (i = 0; i < s.length; i++) {\r\n            x = s.charAt(i);\r\n\r\n            if (v.indexOf(x, 0) !== -1) {\r\n                w += x;\r\n            }\r\n        }\r\n        // validate number\r\n        j = w.length / 2;\r\n        k = Math.floor(j);\r\n        m = Math.ceil(j) - k;\r\n        c = 0;\r\n\r\n        for (i = 0; i < k; i++) {\r\n            a = w.charAt(i * 2 + m) * 2;\r\n            c += a > 9 ? Math.floor(a / 10 + a % 10) : a;\r\n        }\r\n\r\n        for (i = 0; i < k + m; i++) {\r\n            c += w.charAt(i * 2 + 1 - m) * 1;\r\n        }\r\n\r\n        return c % 10 === 0;\r\n    }\r\n\r\n    /**\r\n     * validate all table required inputs at once, using single hidden input\r\n     * @param {String} value\r\n     * @param {HTMLElement} element\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    function tableSingleValidation(value, element) {\r\n        var empty = $(element).closest('table')\r\n            .find('input.required-option:visible')\r\n            .filter(function (i, el) {\r\n                if ($(el).is('disabled')) {\r\n                    return $.mage.isEmpty(el.value);\r\n                }\r\n            })\r\n            .length;\r\n\r\n        return empty === 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {float} qty\r\n     * @param {float} qtyIncrements\r\n     * @returns {float}\r\n     */\r\n    function resolveModulo(qty, qtyIncrements) {\r\n        while (qtyIncrements < 1) {\r\n            qty *= 10;\r\n            qtyIncrements *= 10;\r\n        }\r\n\r\n        return qty % qtyIncrements;\r\n    }\r\n\r\n    /**\r\n     * Collection of validation rules including rules from additional-methods.js\r\n     * @type {Object}\r\n     */\r\n    rules = {\r\n        'max-words': [\r\n            function (value, element, params) {\r\n                return this.optional(element) || $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length <= params;\r\n            },\r\n            $.mage.__('Please enter {0} words or less.')\r\n        ],\r\n        'min-words': [\r\n            function (value, element, params) {\r\n                return this.optional(element) || $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length >= params;\r\n            },\r\n            $.mage.__('Please enter at least {0} words.')\r\n        ],\r\n        'range-words': [\r\n            function (value, element, params) {\r\n                return this.optional(element) ||\r\n                    $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length >= params[0] &&\r\n                    value.match(/bw+b/g).length < params[1];\r\n            },\r\n            $.mage.__('Please enter between {0} and {1} words.')\r\n        ],\r\n        'letters-with-basic-punc': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^[a-z\\-.,()'\\\"\\s]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters or punctuation only please')\r\n        ],\r\n        'alphanumeric': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\w+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters, numbers, spaces or underscores only please')\r\n        ],\r\n        'letters-only': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^[a-z]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters only please')\r\n        ],\r\n        'no-whitespace': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\S+$/i.test(value);\r\n            },\r\n            $.mage.__('No white space please')\r\n        ],\r\n        'no-marginal-whitespace': [\r\n            function (value, element) {\r\n                return this.optional(element) || !/^\\s+|\\s+$/i.test(value);\r\n            },\r\n            $.mage.__('No marginal white space please')\r\n        ],\r\n        'zip-range': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^90[2-5]-\\d{2}-\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx')\r\n        ],\r\n        'integer': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^-?\\d+$/.test(value);\r\n            },\r\n            $.mage.__('A positive or negative non-decimal number please')\r\n        ],\r\n        'vinUS': [\r\n            function (v) {\r\n                var i, n, d, f, cd, cdv, LL, VL, FL, rs;\r\n\r\n                /* eslint-disable max-depth */\r\n                if (v.length !== 17) {\r\n                    return false;\r\n                }\r\n\r\n                LL = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L',\r\n                    'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n                VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9];\r\n                FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];\r\n                rs = 0;\r\n\r\n                for (i = 0; i < 17; i++) {\r\n                    f = FL[i];\r\n                    d = v.slice(i, i + 1);\r\n\r\n                    if (i === 8) {\r\n                        cdv = d;\r\n                    }\r\n\r\n                    if (!isNaN(d)) {\r\n                        d *= f;\r\n                    } else {\r\n                        for (n = 0; n < LL.length; n++) {\r\n                            if (d.toUpperCase() === LL[n]) {\r\n                                d = VL[n];\r\n                                d *= f;\r\n\r\n                                if (isNaN(cdv) && n === 8) {\r\n                                    cdv = LL[n];\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    rs += d;\r\n                }\r\n\r\n                /* eslint-enable max-depth */\r\n                cd = rs % 11;\r\n\r\n                if (cd === 10) {\r\n                    cd = 'X';\r\n                }\r\n\r\n                if (cd === cdv) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('The specified vehicle identification number (VIN) is invalid.')\r\n        ],\r\n        'dateITA': [\r\n            function (value, element) {\r\n                var check = false,\r\n                    re = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/,\r\n                    adata, gg, mm, aaaa, xdata;\r\n\r\n                if (re.test(value)) {\r\n                    adata = value.split('/');\r\n                    gg = parseInt(adata[0], 10);\r\n                    mm = parseInt(adata[1], 10);\r\n                    aaaa = parseInt(adata[2], 10);\r\n                    xdata = new Date(aaaa, mm - 1, gg);\r\n\r\n                    if (xdata.getFullYear() === aaaa &&\r\n                        xdata.getMonth() === mm - 1 &&\r\n                        xdata.getDate() === gg\r\n                    ) {\r\n                        check = true;\r\n                    } else {\r\n                        check = false;\r\n                    }\r\n                } else {\r\n                    check = false;\r\n                }\r\n\r\n                return this.optional(element) || check;\r\n            },\r\n            $.mage.__('Please enter a correct date')\r\n        ],\r\n        'dateNL': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\d\\d?[\\.\\/-]\\d\\d?[\\.\\/-]\\d\\d\\d?\\d?$/.test(value);\r\n            },\r\n            'Vul hier een geldige datum in.'\r\n        ],\r\n        'time': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^([01]\\d|2[0-3])(:[0-5]\\d){0,2}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 and 23:59')\r\n        ],\r\n        'time12h': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\s[AP]M))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 am and 12:00 pm')\r\n        ],\r\n        'phoneUS': [\r\n            function (phoneNumber, element) {\r\n                phoneNumber = phoneNumber.replace(/\\s+/g, '');\r\n\r\n                return this.optional(element) || phoneNumber.length > 9 &&\r\n                    phoneNumber.match(/^(1-?)?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})-?[2-9]\\d{2}-?\\d{4}$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        'phoneUK': [\r\n            function (phoneNumber, element) {\r\n                return this.optional(element) || phoneNumber.length > 9 &&\r\n                    phoneNumber.match(/^(\\(?(0|\\+44)[1-9]{1}\\d{1,4}?\\)?\\s?\\d{3,4}\\s?\\d{3,4})$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        'mobileUK': [\r\n            function (phoneNumber, element) {\r\n                return this.optional(element) || phoneNumber.length > 9 &&\r\n                    phoneNumber.match(/^((0|\\+44)7\\d{3}\\s?\\d{6})$/);\r\n            },\r\n            $.mage.__('Please specify a valid mobile number')\r\n        ],\r\n        'stripped-min-length': [\r\n            function (value, element, param) {\r\n                return value.length >= param;\r\n            },\r\n            $.mage.__('Please enter at least {0} characters')\r\n        ],\r\n\r\n        /* detect chars that would require more than 3 bytes */\r\n        'validate-no-utf8mb4-characters': [\r\n            function (value) {\r\n                var validator = this,\r\n                    message = $.mage.__('Please remove invalid characters: {0}.'),\r\n                    matches = value.match(/(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g),\r\n                    result = matches === null;\r\n\r\n                if (!result) {\r\n                    validator.charErrorMessage = message.replace('{0}', matches.join());\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.charErrorMessage;\r\n            }\r\n        ],\r\n\r\n        /* eslint-disable max-len */\r\n        'email2': [\r\n            function (value, element) {\r\n                return this.optional(element) ||\r\n                    /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i.test(value);\r\n            },\r\n            $.validator.messages.email\r\n        ],\r\n        'url2': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\r\n            },\r\n            $.validator.messages.url\r\n        ],\r\n\r\n        /* eslint-enable max-len */\r\n        'credit-card-types': [\r\n            function (value, element, param) {\r\n                var validTypes;\r\n\r\n                if (/[^0-9-]+/.test(value)) {\r\n                    return false;\r\n                }\r\n                value = value.replace(/\\D/g, '');\r\n\r\n                validTypes = 0x0000;\r\n\r\n                if (param.mastercard) {\r\n                    validTypes |= 0x0001;\r\n                }\r\n\r\n                if (param.visa) {\r\n                    validTypes |= 0x0002;\r\n                }\r\n\r\n                if (param.amex) {\r\n                    validTypes |= 0x0004;\r\n                }\r\n\r\n                if (param.dinersclub) {\r\n                    validTypes |= 0x0008;\r\n                }\r\n\r\n                if (param.enroute) {\r\n                    validTypes |= 0x0010;\r\n                }\r\n\r\n                if (param.discover) {\r\n                    validTypes |= 0x0020;\r\n                }\r\n\r\n                if (param.jcb) {\r\n                    validTypes |= 0x0040;\r\n                }\r\n\r\n                if (param.unknown) {\r\n                    validTypes |= 0x0080;\r\n                }\r\n\r\n                if (param.all) {\r\n                    validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\r\n                }\r\n\r\n                if (validTypes & 0x0001 && /^(51|52|53|54|55)/.test(value)) { //mastercard\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0002 && /^(4)/.test(value)) { //visa\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0004 && /^(34|37)/.test(value)) { //amex\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0008 && /^(300|301|302|303|304|305|36|38)/.test(value)) { //dinersclub\r\n                    return value.length === 14;\r\n                }\r\n\r\n                if (validTypes & 0x0010 && /^(2014|2149)/.test(value)) { //enroute\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0080) { //unknown\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n\r\n        /* eslint-disable max-len */\r\n        'ipv4': [\r\n            function (value, element) {\r\n                return this.optional(element) ||\r\n                    /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v4 address.')\r\n        ],\r\n        'ipv6': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v6 address.')\r\n        ],\r\n\r\n        /* eslint-enable max-len */\r\n        'pattern': [\r\n            function (value, element, param) {\r\n                return this.optional(element) || new RegExp(param).test(value);\r\n            },\r\n            $.mage.__('Invalid format.')\r\n        ],\r\n        'allow-container-className': [\r\n            function (element) {\r\n                if (element.type === 'radio' || element.type === 'checkbox') {\r\n                    return $(element).hasClass('change-container-classname');\r\n                }\r\n            },\r\n            ''\r\n        ],\r\n        'validate-no-html-tags': [\r\n            function (value) {\r\n                return !/<(\\/)?\\w+/.test(value);\r\n            },\r\n            $.mage.__('HTML tags are not allowed.')\r\n        ],\r\n        'validate-select': [\r\n            function (value) {\r\n                return value !== 'none' && value != null && value.length !== 0;\r\n            },\r\n            $.mage.__('Please select an option.')\r\n        ],\r\n        'validate-no-empty': [\r\n            function (value) {\r\n                return !$.mage.isEmpty(value);\r\n            },\r\n            $.mage.__('Empty Value.')\r\n        ],\r\n        'validate-alphanum-with-spaces': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z0-9 ]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or spaces only in this field.')\r\n        ],\r\n        'validate-data': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[A-Za-z]+[A-Za-z0-9_]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.') //eslint-disable-line max-len\r\n        ],\r\n        'validate-street': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[ \\w]{3,}([A-Za-z]\\.)?([ \\w]*\\#\\d+)?(\\r\\n| )[ \\w]{3,}/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), spaces and \"#\" in this field.')\r\n        ],\r\n        'validate-phoneStrict': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        'validate-phoneLax': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) ||\r\n                    /^((\\d[\\-. ]?)?((\\(\\d{3}\\))|\\d{3}))?[\\-. ]?\\d{3}[\\-. ]?\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        'validate-fax': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid fax number (Ex: 123-456-7890).')\r\n        ],\r\n        'validate-email': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i.test(v); //eslint-disable-line max-len\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        'validate-emailSender': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[\\S ]+$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        'validate-password': [\r\n            function (v) {\r\n                var pass;\r\n\r\n                if (v == null) {\r\n                    return false;\r\n                }\r\n                //strip leading and trailing spaces\r\n                pass = $.trim(v);\r\n\r\n                if (!pass.length) {\r\n                    return true;\r\n                }\r\n\r\n                return !(pass.length > 0 && pass.length < 6);\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'validate-admin-password': [\r\n            function (v) {\r\n                var pass;\r\n\r\n                if (v == null) {\r\n                    return false;\r\n                }\r\n                pass = $.trim(v);\r\n                // strip leading and trailing spaces\r\n                if (pass.length === 0) {\r\n                    return true;\r\n                }\r\n\r\n                if (!/[a-z]/i.test(v) || !/[0-9]/.test(v)) {\r\n                    return false;\r\n                }\r\n\r\n                if (pass.length < 7) {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 7 or more characters, using both numeric and alphabetic.')\r\n        ],\r\n        'validate-customer-password': [\r\n            function (v, elm) {\r\n                var validator = this,\r\n                    counter = 0,\r\n                    passwordMinLength = $(elm).data('password-min-length'),\r\n                    passwordMinCharacterSets = $(elm).data('password-min-character-sets'),\r\n                    pass = $.trim(v),\r\n                    result = pass.length >= passwordMinLength;\r\n\r\n                if (result === false) {\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum length of this field must be equal or greater than %1 symbols. Leading and trailing spaces will be ignored.').replace('%1', passwordMinLength); //eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                if (pass.match(/\\d+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[a-z]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[A-Z]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[^a-zA-Z0-9]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (counter < passwordMinCharacterSets) {\r\n                    result = false;\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum of different classes of characters in password is %1. Classes of characters: Lower Case, Upper Case, Digits, Special Characters.').replace('%1', passwordMinCharacterSets); //eslint-disable-line max-len\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.passwordErrorMessage;\r\n            }\r\n        ],\r\n        'validate-url': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = (v || '').replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n\r\n                return (/^(http|https|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i).test(v); //eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. Protocol is required (http://, https:// or ftp://).')\r\n        ],\r\n        'validate-clean-url': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(http|https|ftp):\\/\\/(([A-Z0-9][A-Z0-9_-]*)(\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v) || /^(www)((\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v); //eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. For example http://www.example.com or www.example.com.')\r\n        ],\r\n        'validate-xml-identifier': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[A-Z][A-Z0-9_\\/-]*$/i.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid XML-identifier (Ex: something_1, block5, id-4).')\r\n        ],\r\n        'validate-ssn': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^\\d{3}-?\\d{2}-?\\d{4}$/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid social security number (Ex: 123-45-6789).')\r\n        ],\r\n        'validate-zip-us': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid zip code (Ex: 90602 or 90602-1234).')\r\n        ],\r\n        'validate-date-au': [\r\n            function (v) {\r\n                var regex, d;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                regex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/;\r\n\r\n                if ($.mage.isEmpty(v) || !regex.test(v)) {\r\n                    return false;\r\n                }\r\n                d = new Date(v.replace(regex, '$2/$1/$3'));\r\n\r\n                return parseInt(RegExp.$2, 10) === 1 + d.getMonth() &&\r\n                    parseInt(RegExp.$1, 10) === d.getDate() &&\r\n                    parseInt(RegExp.$3, 10) === d.getFullYear();\r\n\r\n            },\r\n            $.mage.__('Please use this date format: dd/mm/yyyy. For example 17/03/2006 for the 17th of March, 2006.')\r\n        ],\r\n        'validate-currency-dollar': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^\\$?\\-?([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}\\d*(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$/.test(v); //eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid $ amount. For example $100.00.')\r\n        ],\r\n        'validate-not-negative-number': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n\r\n                return !isNaN(v) && v >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        // validate-not-negative-number should be replaced in all places with this one and then removed\r\n        'validate-zero-or-greater': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n\r\n                return !isNaN(v) && v >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        'validate-greater-than-zero': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n\r\n                return !isNaN(v) && v > 0;\r\n            },\r\n            $.mage.__('Please enter a number greater than 0 in this field.')\r\n        ],\r\n        'validate-css-length': [\r\n            function (v) {\r\n                if (v !== '') {\r\n                    return (/^[0-9]*\\.*[0-9]+(px|pc|pt|ex|em|mm|cm|in|%)?$/).test(v);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please input a valid CSS-length (Ex: 100px, 77pt, 20em, .5ex or 50%).')\r\n        ],\r\n        // Additional methods\r\n        'validate-number': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || !isNaN($.mage.parseNumber(v)) && /^\\s*-?\\d*(\\.\\d*)?\\s*$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'required-number': [\r\n            function (v) {\r\n                return !!v.length;\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'validate-number-range': [\r\n            function (v, elm, param) {\r\n                var numValue, dataAttrRange, classNameRange, result, range, m, classes, ii;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                numValue = $.mage.parseNumber(v);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                dataAttrRange = /^(-?[\\d.,]+)?-(-?[\\d.,]+)?$/;\r\n                classNameRange = /^number-range-(-?[\\d.,]+)?-(-?[\\d.,]+)?$/;\r\n                result = true;\r\n                range = param;\r\n\r\n                if (typeof range === 'string') {\r\n                    m = dataAttrRange.exec(range);\r\n\r\n                    if (m) {\r\n                        result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                    } else {\r\n                        result = false;\r\n                    }\r\n                } else if (elm && elm.className) {\r\n                    classes = elm.className.split(' ');\r\n                    ii = classes.length;\r\n\r\n                    while (ii--) {\r\n                        range = classes[ii];\r\n                        m = classNameRange.exec(range);\r\n\r\n                        if (m) { //eslint-disable-line max-depth\r\n                            result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.'),\r\n            true\r\n        ],\r\n        'validate-digits': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || !/[^\\d]/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'validate-forbidden-extensions': [\r\n            function (v, elem) {\r\n                var forbiddenExtensions = $(elem).attr('data-validation-params'),\r\n                    forbiddenExtensionsArray = forbiddenExtensions.split(','),\r\n                    extensionsArray = v.split(','),\r\n                    result = true;\r\n\r\n                this.validateExtensionsMessage = $.mage.__('Forbidden extensions has been used. Avoid usage of ') +\r\n                    forbiddenExtensions;\r\n\r\n                $.each(extensionsArray, function (key, extension) {\r\n                    if (forbiddenExtensionsArray.indexOf(extension) !== -1) {\r\n                        result = false;\r\n                    }\r\n                });\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.validateExtensionsMessage;\r\n            }\r\n        ],\r\n        'validate-digits-range': [\r\n            function (v, elm, param) {\r\n                var numValue, dataAttrRange, classNameRange, result, range, m, classes, ii;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                numValue = $.mage.parseNumber(v);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                dataAttrRange = /^(-?\\d+)?-(-?\\d+)?$/;\r\n                classNameRange = /^digits-range-(-?\\d+)?-(-?\\d+)?$/;\r\n                result = true;\r\n                range = param;\r\n\r\n                if (typeof range === 'string') {\r\n                    m = dataAttrRange.exec(range);\r\n\r\n                    if (m) {\r\n                        result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                    } else {\r\n                        result = false;\r\n                    }\r\n                } else if (elm && elm.className) {\r\n                    classes = elm.className.split(' ');\r\n                    ii = classes.length;\r\n\r\n                    while (ii--) {\r\n                        range = classes[ii];\r\n                        m = classNameRange.exec(range);\r\n\r\n                        if (m) { //eslint-disable-line max-depth\r\n                            result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.'),\r\n            true\r\n        ],\r\n        'validate-range': [\r\n            function (v, elm) {\r\n                var minValue, maxValue, ranges, reRange, result, values,\r\n                    i, name, validRange, minValidRange, maxValidRange;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                } else if ($.validator.methods['validate-digits'] && $.validator.methods['validate-digits'](v)) {\r\n                    minValue = maxValue = $.mage.parseNumber(v);\r\n                } else {\r\n                    ranges = /^(-?\\d+)?-(-?\\d+)?$/.exec(v);\r\n\r\n                    if (ranges) {\r\n                        minValue = $.mage.parseNumber(ranges[1]);\r\n                        maxValue = $.mage.parseNumber(ranges[2]);\r\n\r\n                        if (minValue > maxValue) { //eslint-disable-line max-depth\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n                reRange = /^range-(-?\\d+)?-(-?\\d+)?$/;\r\n                result = true;\r\n                values = $(elm).prop('class').split(' ');\r\n\r\n                for (i = values.length - 1; i >= 0; i--) {\r\n                    name = values[i];\r\n                    validRange = reRange.exec(name);\r\n\r\n                    if (validRange) {\r\n                        minValidRange = $.mage.parseNumber(validRange[1]);\r\n                        maxValidRange = $.mage.parseNumber(validRange[2]);\r\n                        result = result &&\r\n                            (isNaN(minValidRange) || minValue >= minValidRange) &&\r\n                            (isNaN(maxValidRange) || maxValue <= maxValidRange);\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        'validate-alpha': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use letters only (a-z or A-Z) in this field.')\r\n        ],\r\n        'validate-code': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z]+[a-zA-Z0-9_]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.') //eslint-disable-line max-len\r\n        ],\r\n        'validate-alphanum': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z0-9]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z) or numbers (0-9) in this field. No spaces or other characters are allowed.') //eslint-disable-line max-len\r\n        ],\r\n        'validate-not-number-first': [\r\n            function (value) {\r\n                return $.mage.isEmptyNoTrim(value) || /^[^0-9-\\.].*$/.test(value.trim());\r\n            },\r\n            $.mage.__('First character must be letter.')\r\n        ],\r\n        'validate-date': [\r\n            function (value, params, additionalParams) {\r\n                var test = moment(value, additionalParams.dateFormat);\r\n\r\n                return $.mage.isEmptyNoTrim(value) || test.isValid();\r\n            },\r\n            $.mage.__('Please enter a valid date.')\r\n\r\n        ],\r\n        'validate-date-range': [\r\n            function (v, elm) {\r\n                var m = /\\bdate-range-(\\w+)-(\\w+)\\b/.exec(elm.className),\r\n                    currentYear, normalizedTime, dependentElements;\r\n\r\n                if (!m || m[2] === 'to' || $.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                currentYear = new Date().getFullYear() + '';\r\n\r\n                /**\r\n                 * @param {String} vd\r\n                 * @return {Number}\r\n                 */\r\n                normalizedTime = function (vd) {\r\n                    vd = vd.split(/[.\\/]/);\r\n\r\n                    if (vd[2] && vd[2].length < 4) {\r\n                        vd[2] = currentYear.substr(0, vd[2].length) + vd[2];\r\n                    }\r\n\r\n                    return new Date(vd.join('/')).getTime();\r\n                };\r\n\r\n                dependentElements = $(elm.form).find('.validate-date-range.date-range-' + m[1] + '-to');\r\n\r\n                return !dependentElements.length || $.mage.isEmptyNoTrim(dependentElements[0].value) ||\r\n                    normalizedTime(v) <= normalizedTime(dependentElements[0].value);\r\n            },\r\n            $.mage.__('Make sure the To Date is later than or the same as the From Date.')\r\n        ],\r\n        'validate-cpassword': [\r\n            function () {\r\n                var conf = $('#confirmation').length > 0 ? $('#confirmation') : $($('.validate-cpassword')[0]),\r\n                    pass = false,\r\n                    passwordElements, i, passwordElement;\r\n\r\n                if ($('#password')) {\r\n                    pass = $('#password');\r\n                }\r\n                passwordElements = $('.validate-password');\r\n\r\n                for (i = 0; i < passwordElements.length; i++) {\r\n                    passwordElement = $(passwordElements[i]);\r\n\r\n                    if (passwordElement.closest('form').attr('id') === conf.closest('form').attr('id')) {\r\n                        pass = passwordElement;\r\n                    }\r\n                }\r\n\r\n                if ($('.validate-admin-password').length) {\r\n                    pass = $($('.validate-admin-password')[0]);\r\n                }\r\n\r\n                return pass.val() === conf.val();\r\n            },\r\n            $.mage.__('Please make sure your passwords match.')\r\n        ],\r\n        'validate-identifier': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-z0-9][a-z0-9_\\/-]+(\\.[a-z0-9_-]+)?$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid URL Key (Ex: \"example-page\", \"example-page.html\" or \"anotherlevel/example-page\").') //eslint-disable-line max-len\r\n        ],\r\n        'validate-zip-international': [\r\n\r\n            /*function(v) {\r\n             // @TODO: Cleanup\r\n             return Validation.get('IsEmpty').test(v) ||\r\n             /(^[A-z0-9]{2,10}([\\s]{0,1}|[\\-]{0,1})[A-z0-9]{2,10}$)/.test(v);\r\n             }*/\r\n            function () {\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a valid zip code.')\r\n        ],\r\n        'validate-one-required': [\r\n            function (v, elm) {\r\n                var p = $(elm).parent(),\r\n                    options = p.find('input');\r\n\r\n                return options.map(function (el) {\r\n                    return $(el).val();\r\n                }).length > 0;\r\n            },\r\n            $.mage.__('Please select one of the options above.')\r\n        ],\r\n        'validate-state': [\r\n            function (v) {\r\n                return v !== 0 || v === '';\r\n            },\r\n            $.mage.__('Please select State/Province.')\r\n        ],\r\n        'required-file': [\r\n            function (v, elm) {\r\n                var result = !$.mage.isEmptyNoTrim(v),\r\n                    ovId;\r\n\r\n                if (!result) {\r\n                    ovId = $('#' + $(elm).attr('id') + '_value');\r\n\r\n                    if (ovId.length > 0) {\r\n                        result = !$.mage.isEmptyNoTrim(ovId.val());\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('Please select a file.')\r\n        ],\r\n        'validate-ajax-error': [\r\n            function (v, element) {\r\n                element = $(element);\r\n                element.on('change.ajaxError', function () {\r\n                    element.removeClass('validate-ajax-error');\r\n                    element.off('change.ajaxError');\r\n                });\r\n\r\n                return !element.hasClass('validate-ajax-error');\r\n            },\r\n            ''\r\n        ],\r\n        'validate-optional-datetime': [\r\n            function (v, elm, param) {\r\n                var dateTimeParts = $('.datetime-picker[id^=\"options_' + param + '\"]'),\r\n                    hasWithValue = false,\r\n                    hasWithNoValue = false,\r\n                    pattern = /day_part$/i,\r\n                    i;\r\n\r\n                for (i = 0; i < dateTimeParts.length; i++) {\r\n                    if (!pattern.test($(dateTimeParts[i]).attr('id'))) {\r\n                        if ($(dateTimeParts[i]).val() === 's') { //eslint-disable-line max-depth\r\n                            hasWithValue = true;\r\n                        } else {\r\n                            hasWithNoValue = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return hasWithValue ^ hasWithNoValue;\r\n            },\r\n            $.mage.__('The field isn\\'t complete.')\r\n        ],\r\n        'validate-required-datetime': [\r\n            function (v, elm, param) {\r\n                var dateTimeParts = $('.datetime-picker[id^=\"options_' + param + '\"]'),\r\n                    i;\r\n\r\n                for (i = 0; i < dateTimeParts.length; i++) {\r\n                    if (dateTimeParts[i].value === '') {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'validate-one-required-by-name': [\r\n            function (v, elm, selector) {\r\n                var name = elm.name.replace(/([\\\\\"])/g, '\\\\$1'),\r\n                    container = this.currentForm;\r\n\r\n                selector = selector === true ? 'input[name=\"' + name + '\"]:checked' : selector;\r\n\r\n                return !!container.querySelectorAll(selector).length;\r\n            },\r\n            $.mage.__('Please select one of the options.')\r\n        ],\r\n        'less-than-equals-to': [\r\n            function (value, element, params) {\r\n                if ($.isNumeric($(params).val()) && $.isNumeric(value)) {\r\n                    this.lteToVal = $(params).val();\r\n\r\n                    return parseFloat(value) <= parseFloat($(params).val());\r\n                }\r\n\r\n                return true;\r\n            },\r\n            function () {\r\n                var message = $.mage.__('Please enter a value less than or equal to %s.');\r\n\r\n                return message.replace('%s', this.lteToVal);\r\n            }\r\n        ],\r\n        'greater-than-equals-to': [\r\n            function (value, element, params) {\r\n                if ($.isNumeric($(params).val()) && $.isNumeric(value)) {\r\n                    this.gteToVal = $(params).val();\r\n\r\n                    return parseFloat(value) >= parseFloat($(params).val());\r\n                }\r\n\r\n                return true;\r\n            },\r\n            function () {\r\n                var message = $.mage.__('Please enter a value greater than or equal to %s.');\r\n\r\n                return message.replace('%s', this.gteToVal);\r\n            }\r\n        ],\r\n        'validate-emails': [\r\n            function (value) {\r\n                var validRegexp, emails, i;\r\n\r\n                if ($.mage.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n                validRegexp = /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i; //eslint-disable-line max-len\r\n                emails = value.split(/[\\s\\n\\,]+/g);\r\n\r\n                for (i = 0; i < emails.length; i++) {\r\n                    if (!validRegexp.test(emails[i].trim())) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter valid email addresses, separated by commas. For example, johndoe@domain.com, johnsmith@domain.com.') //eslint-disable-line max-len\r\n        ],\r\n\r\n        'validate-cc-type-select': [\r\n\r\n            /**\r\n             * Validate credit card type matches credit card number\r\n             * @param {*} value - select credit card type\r\n             * @param {*} element - element contains the select box for credit card types\r\n             * @param {*} params - selector for credit card number\r\n             * @return {Boolean}\r\n             */\r\n            function (value, element, params) {\r\n                if (value && params && creditCartTypes[value]) {\r\n                    return creditCartTypes[value][0].test($(params).val().replace(/\\s+/g, ''));\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Card type does not match credit card number.')\r\n        ],\r\n        'validate-cc-number': [\r\n\r\n            /**\r\n             * Validate credit card number based on mod 10.\r\n             *\r\n             * @param {*} value - credit card number\r\n             * @return {Boolean}\r\n             */\r\n            function (value) {\r\n                if (value) {\r\n                    return validateCreditCard(value);\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        'validate-cc-type': [\r\n\r\n            /**\r\n             * Validate credit card number is for the correct credit card type.\r\n             *\r\n             * @param {String} value - credit card number\r\n             * @param {*} element - element contains credit card number\r\n             * @param {*} params - selector for credit card type\r\n             * @return {Boolean}\r\n             */\r\n            function (value, element, params) {\r\n                var ccType;\r\n\r\n                if (value && params) {\r\n                    ccType = $(params).val();\r\n                    value = value.replace(/\\s/g, '').replace(/\\-/g, '');\r\n\r\n                    if (creditCartTypes[ccType] && creditCartTypes[ccType][0]) {\r\n                        return creditCartTypes[ccType][0].test(value);\r\n                    } else if (creditCartTypes[ccType] && !creditCartTypes[ccType][0]) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Credit card number does not match credit card type.')\r\n        ],\r\n        'validate-cc-exp': [\r\n\r\n            /**\r\n             * Validate credit card expiration date, make sure it's within the year and not before current month.\r\n             *\r\n             * @param {*} value - month\r\n             * @param {*} element - element contains month\r\n             * @param {*} params - year selector\r\n             * @return {Boolean}\r\n             */\r\n            function (value, element, params) {\r\n                var isValid = false,\r\n                    month, year, currentTime, currentMonth, currentYear;\r\n\r\n                if (value && params) {\r\n                    month = value;\r\n                    year = $(params).val();\r\n                    currentTime = new Date();\r\n                    currentMonth = currentTime.getMonth() + 1;\r\n                    currentYear = currentTime.getFullYear();\r\n\r\n                    isValid = !year || year > currentYear || year == currentYear && month >= currentMonth; //eslint-disable-line\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('Incorrect credit card expiration date.')\r\n        ],\r\n        'validate-cc-cvn': [\r\n\r\n            /**\r\n             * Validate credit card cvn based on credit card type.\r\n             *\r\n             * @param {*} value - credit card cvn\r\n             * @param {*} element - element contains credit card cvn\r\n             * @param {*} params - credit card type selector\r\n             * @return {*}\r\n             */\r\n            function (value, element, params) {\r\n                var ccType;\r\n\r\n                if (value && params) {\r\n                    ccType = $(params).val();\r\n\r\n                    if (creditCartTypes[ccType] && creditCartTypes[ccType][0]) {\r\n                        return creditCartTypes[ccType][1].test(value);\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card verification number.')\r\n        ],\r\n        'validate-cc-ukss': [\r\n\r\n            /**\r\n             * Validate Switch/Solo/Maestro issue number and start date is filled.\r\n             *\r\n             * @param {*} value - input field value\r\n             * @return {*}\r\n             */\r\n            function (value) {\r\n                return value;\r\n            },\r\n            $.mage.__('Please enter issue number or start date for switch/solo card type.')\r\n        ],\r\n        'validate-length': [\r\n            function (v, elm) {\r\n                var reMax = new RegExp(/^maximum-length-[0-9]+$/),\r\n                    reMin = new RegExp(/^minimum-length-[0-9]+$/),\r\n                    validator = this,\r\n                    result = true,\r\n                    length = 0;\r\n\r\n                $.each(elm.className.split(' '), function (index, name) {\r\n                    if (name.match(reMax) && result) {\r\n                        length = name.split('-')[2];\r\n                        result = v.length <= length;\r\n                        validator.validateMessage =\r\n                            $.mage.__('Please enter less or equal than %1 symbols.').replace('%1', length);\r\n                    }\r\n\r\n                    if (name.match(reMin) && result && !$.mage.isEmpty(v)) {\r\n                        length = name.split('-')[2];\r\n                        result = v.length >= length;\r\n                        validator.validateMessage =\r\n                            $.mage.__('Please enter more or equal than %1 symbols.').replace('%1', length);\r\n                    }\r\n                });\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.validateMessage;\r\n            }\r\n        ],\r\n        'required-entry': [\r\n            function (value) {\r\n                return !$.mage.isEmpty(value);\r\n            }, $.mage.__('This is a required field.')\r\n        ],\r\n        'not-negative-amount': [\r\n            function (v) {\r\n                if (v.length) {\r\n                    return (/^\\s*\\d+([,.]\\d+)*\\s*%?\\s*$/).test(v);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter positive number in this field.')\r\n        ],\r\n        'validate-per-page-value-list': [\r\n            function (v) {\r\n                var isValid = true,\r\n                    values = v.split(','),\r\n                    i;\r\n\r\n                if ($.mage.isEmpty(v)) {\r\n                    return isValid;\r\n                }\r\n\r\n                for (i = 0; i < values.length; i++) {\r\n                    if (!/^[0-9]+$/.test(values[i])) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('Please enter a valid value, ex: 10,20,30')\r\n        ],\r\n        'validate-per-page-value': [\r\n            function (v, elm) {\r\n                var values;\r\n\r\n                if ($.mage.isEmpty(v)) {\r\n                    return false;\r\n                }\r\n                values = $('#' + elm.id + '_values').val().split(',');\r\n\r\n                return values.indexOf(v) !== -1;\r\n            },\r\n            $.mage.__('Please enter a valid value from list')\r\n        ],\r\n        'validate-new-password': [\r\n            function (v) {\r\n                if ($.validator.methods['validate-password'] && !$.validator.methods['validate-password'](v)) {\r\n                    return false;\r\n                }\r\n\r\n                if ($.mage.isEmpty(v) && v !== '') {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'required-if-not-specified': [\r\n            function (value, element, params) {\r\n                var valid = false,\r\n                    alternate = $(params),\r\n                    alternateValue;\r\n\r\n                if (alternate.length > 0) {\r\n                    valid = this.check(alternate);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        alternateValue = alternate.val();\r\n\r\n                        if (typeof alternateValue == 'undefined' || alternateValue.length === 0) { //eslint-disable-line\r\n                            valid = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!valid) {\r\n                    valid = !this.optional(element);\r\n                }\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'required-if-all-sku-empty-and-file-not-loaded': [\r\n            function (value, element, params) {\r\n                var valid = false,\r\n                    alternate = $(params.specifiedId),\r\n                    alternateValue;\r\n\r\n                if (alternate.length > 0) {\r\n                    valid = this.check(alternate);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        alternateValue = alternate.val();\r\n\r\n                        if (typeof alternateValue == 'undefined' || alternateValue.length === 0) { //eslint-disable-line\r\n                            valid = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!valid) {\r\n                    valid = !this.optional(element);\r\n                }\r\n\r\n                $('input[' + params.dataSku + '=true]').each(function () {\r\n                    if ($(this).val() !== '') {\r\n                        valid = true;\r\n                    }\r\n                });\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('Please enter valid SKU key.')\r\n        ],\r\n        'required-if-specified': [\r\n            function (value, element, params) {\r\n                var valid = true,\r\n                    dependent = $(params),\r\n                    dependentValue;\r\n\r\n                if (dependent.length > 0) {\r\n                    valid = this.check(dependent);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        dependentValue = dependent.val();\r\n                        valid = typeof dependentValue != 'undefined' && dependentValue.length > 0;\r\n                    }\r\n                }\r\n\r\n                if (valid) {\r\n                    valid = !this.optional(element);\r\n                } else {\r\n                    valid = true; // dependent was not valid, so don't even check\r\n                }\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'required-number-if-specified': [\r\n            function (value, element, params) {\r\n                var valid = true,\r\n                    dependent = $(params),\r\n                    depeValue;\r\n\r\n                if (dependent.length) {\r\n                    valid = this.check(dependent);\r\n\r\n                    if (valid) {\r\n                        depeValue = dependent[0].value;\r\n                        valid = !!(depeValue && depeValue.length);\r\n                    }\r\n                }\r\n\r\n                return valid ? !!value.length : true;\r\n            },\r\n            $.mage.__('Please enter a valid number.')\r\n        ],\r\n        'datetime-validation': [\r\n            function (value, element) {\r\n                var isValid = true;\r\n\r\n                if ($(element).val().length === 0) {\r\n                    isValid = false;\r\n                    $(element).addClass('mage-error');\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('This is required field')\r\n        ],\r\n        'required-text-swatch-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in each row.')\r\n        ],\r\n        'required-visual-swatch-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in each row.')\r\n        ],\r\n        'required-dropdown-attribute-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in each row.')\r\n        ],\r\n        'validate-item-quantity': [\r\n            function (value, element, params) {\r\n                var validator = this,\r\n                    result = false,\r\n                    // obtain values for validation\r\n                    qty = $.mage.parseNumber(value),\r\n                    isMinAllowedValid = typeof params.minAllowed === 'undefined' ||\r\n                        qty >= $.mage.parseNumber(params.minAllowed),\r\n                    isMaxAllowedValid = typeof params.maxAllowed === 'undefined' ||\r\n                        qty <= $.mage.parseNumber(params.maxAllowed),\r\n                    isQtyIncrementsValid = typeof params.qtyIncrements === 'undefined' ||\r\n                        resolveModulo(qty, $.mage.parseNumber(params.qtyIncrements)) === 0.0;\r\n\r\n                result = qty > 0;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('Please enter a quantity greater than 0.');//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isMinAllowedValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('The fewest you may purchase is %1.').replace('%1', params.minAllowed);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isMaxAllowedValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('The maximum you may purchase is %1.').replace('%1', params.maxAllowed);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isQtyIncrementsValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('You can buy this product only in quantities of %1 at a time.').replace('%1', params.qtyIncrements);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.itemQtyErrorMessage;\r\n            }\r\n        ],\r\n        'password-not-equal-to-user-name': [\r\n            function (value, element, params) {\r\n                if (typeof params === 'string') {\r\n                    return value.toLowerCase() !== params.toLowerCase();\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('The password can\\'t be the same as the email address. Create a new password and try again.')\r\n        ]\r\n    };\r\n\r\n    $.each(rules, function (i, rule) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n    $.validator.addClassRules({\r\n        'required-option': {\r\n            required: true\r\n        },\r\n        'required-options-count': {\r\n            required: true\r\n        },\r\n        'validate-both-passwords': {\r\n            'validate-cpassword': true\r\n        }\r\n    });\r\n    $.validator.messages = $.extend($.validator.messages, {\r\n        required: $.mage.__('This is a required field.'),\r\n        remote: $.mage.__('Please fix this field.'),\r\n        email: $.mage.__('Please enter a valid email address.'),\r\n        url: $.mage.__('Please enter a valid URL.'),\r\n        date: $.mage.__('Please enter a valid date.'),\r\n        dateISO: $.mage.__('Please enter a valid date (ISO).'),\r\n        number: $.mage.__('Please enter a valid number.'),\r\n        digits: $.mage.__('Please enter only digits.'),\r\n        creditcard: $.mage.__('Please enter a valid credit card number.'),\r\n        equalTo: $.mage.__('Please enter the same value again.'),\r\n        maxlength: $.validator.format($.mage.__('Please enter no more than {0} characters.')),\r\n        minlength: $.validator.format($.mage.__('Please enter at least {0} characters.')),\r\n        rangelength: $.validator.format($.mage.__('Please enter a value between {0} and {1} characters long.')),\r\n        range: $.validator.format($.mage.__('Please enter a value between {0} and {1}.')),\r\n        max: $.validator.format($.mage.__('Please enter a value less than or equal to {0}.')),\r\n        min: $.validator.format($.mage.__('Please enter a value greater than or equal to {0}.'))\r\n    });\r\n\r\n    if ($.metadata) {\r\n        // Setting the type as html5 to enable data-validate attribute\r\n        $.metadata.setType('html5');\r\n    }\r\n\r\n    showLabel = $.validator.prototype.showLabel;\r\n    $.extend(true, $.validator.prototype, {\r\n        /**\r\n         * @param {*} element\r\n         * @param {*} message\r\n         */\r\n        showLabel: function (element, message) {\r\n            var label, elem;\r\n\r\n            showLabel.call(this, element, message);\r\n\r\n            // ARIA (adding aria-invalid & aria-describedby)\r\n            label = this.errorsFor(element);\r\n            elem = $(element);\r\n\r\n            if (!label.attr('id')) {\r\n                label.attr('id', this.idOrName(element) + '-error');\r\n            }\r\n            elem.attr('aria-invalid', 'true')\r\n                .attr('aria-describedby', label.attr('id'));\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Validate form field without instantiating validate plug-in.\r\n     *\r\n     * @param {Element|String} element - DOM element or selector\r\n     * @return {Boolean} validation result\r\n     */\r\n    $.validator.validateElement = function (element) {\r\n        var form, validator, valid, classes;\r\n\r\n        element = $(element);\r\n        form = element.get(0).form;\r\n        validator = form ? $(form).data('validator') : null;\r\n\r\n        if (validator) {\r\n            return validator.element(element.get(0));\r\n        }\r\n        valid = true;\r\n        classes = element.prop('class').split(' ');\r\n        $.each(classes, $.proxy(function (i, className) {\r\n            if (this.methods[className] && !this.methods[className](element.val(), element.get(0))) {\r\n                valid = false;\r\n\r\n                return valid;\r\n            }\r\n        }, this));\r\n\r\n        return valid;\r\n    };\r\n\r\n    originValidateDelegate = $.fn.validateDelegate;\r\n\r\n    /**\r\n     * @return {*}\r\n     */\r\n    $.fn.validateDelegate = function () {\r\n        if (!this[0].form) {\r\n            return this;\r\n        }\r\n\r\n        return originValidateDelegate.apply(this, arguments);\r\n    };\r\n\r\n    /**\r\n     * Validate single element.\r\n     *\r\n     * @param {Element} element\r\n     * @param {Object} config\r\n     * @returns {*}\r\n     */\r\n    $.validator.validateSingleElement = function (element, config) {\r\n        var errors = {},\r\n            valid = true,\r\n            validateConfig = {\r\n                errorElement: 'label',\r\n                ignore: '.ignore-validate',\r\n                hideError: false\r\n            },\r\n            form, validator, classes, elementValue;\r\n\r\n        $.extend(validateConfig, config);\r\n        element = $(element).not(validateConfig.ignore);\r\n\r\n        if (!element.length) {\r\n            return true;\r\n        }\r\n\r\n        form = element.get(0).form;\r\n        validator = form ? $(form).data('validator') : null;\r\n\r\n        if (validator) {\r\n            return validator.element(element.get(0));\r\n        }\r\n\r\n        classes = element.prop('class').split(' ');\r\n        validator = element.parent().data('validator') ||\r\n            $.mage.validation(validateConfig, element.parent()).validate;\r\n\r\n        element.removeClass(validator.settings.errorClass);\r\n        validator.toHide = validator.toShow;\r\n        validator.hideErrors();\r\n        validator.toShow = validator.toHide = $([]);\r\n\r\n        $.each(classes, $.proxy(function (i, className) {\r\n            elementValue = element.val();\r\n\r\n            if (element.is(':checkbox') || element.is(':radio')) {\r\n                elementValue = element.is(':checked') || null;\r\n            }\r\n\r\n            if (this.methods[className] && !this.methods[className](elementValue, element.get(0))) {\r\n                valid = false;\r\n                errors[element.get(0).name] = this.messages[className];\r\n                validator.invalid[element.get(0).name] = true;\r\n\r\n                if (!validateConfig.hideError) {\r\n                    validator.showErrors(errors);\r\n                }\r\n\r\n                return valid;\r\n            }\r\n        }, this));\r\n\r\n        return valid;\r\n    };\r\n\r\n    $.widget('mage.validation', {\r\n        options: {\r\n            meta: 'validate',\r\n            onfocusout: false,\r\n            onkeyup: false,\r\n            onclick: false,\r\n            ignoreTitle: true,\r\n            errorClass: 'mage-error',\r\n            errorElement: 'div',\r\n\r\n            /**\r\n             * @param {*} error\r\n             * @param {*} element\r\n             */\r\n            errorPlacement: function (error, element) {\r\n                var errorPlacement = element,\r\n                    fieldWrapper;\r\n\r\n                // logic for date-picker error placement\r\n                if (element.hasClass('_has-datepicker')) {\r\n                    errorPlacement = element.siblings('button');\r\n                }\r\n                // logic for field wrapper\r\n                fieldWrapper = element.closest('.addon');\r\n\r\n                if (fieldWrapper.length) {\r\n                    errorPlacement = fieldWrapper.after(error);\r\n                }\r\n                //logic for checkboxes/radio\r\n                if (element.is(':checkbox') || element.is(':radio')) {\r\n                    errorPlacement = element.parents('.control').children().last();\r\n\r\n                    //fallback if group does not have .control parent\r\n                    if (!errorPlacement.length) {\r\n                        errorPlacement = element.siblings('label').last();\r\n                    }\r\n                }\r\n                //logic for control with tooltip\r\n                if (element.siblings('.tooltip').length) {\r\n                    errorPlacement = element.siblings('.tooltip');\r\n                }\r\n                //logic for select with tooltip in after element\r\n                if (element.next().find('.tooltip').length) {\r\n                    errorPlacement = element.next();\r\n                }\r\n                errorPlacement.after(error);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if form pass validation rules without submit.\r\n         *\r\n         * @return boolean\r\n         */\r\n        isValid: function () {\r\n            return this.element.valid();\r\n        },\r\n\r\n        /**\r\n         * Remove validation error messages\r\n         */\r\n        clearError: function () {\r\n            if (arguments.length) {\r\n                $.each(arguments, $.proxy(function (index, item) {\r\n                    this.validate.prepareElement(item);\r\n                    this.validate.hideErrors();\r\n                }, this));\r\n            } else {\r\n                this.validate.resetForm();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validation creation.\r\n         *\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.validate = this.element.validate(this.options);\r\n\r\n            // ARIA (adding aria-required attribute)\r\n            this.element\r\n                .find('.field.required')\r\n                .find('.control')\r\n                .find('input, select, textarea')\r\n                .attr('aria-required', 'true');\r\n\r\n            this._listenFormValidate();\r\n        },\r\n\r\n        /**\r\n         * Validation listening.\r\n         *\r\n         * @protected\r\n         */\r\n        _listenFormValidate: function () {\r\n            $('form').on('invalid-form.validate', this.listenFormValidateHandler);\r\n        },\r\n\r\n        /**\r\n         * Handle form validation. Focus on first invalid form field.\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} validation\r\n         */\r\n        listenFormValidateHandler: function (event, validation) {\r\n            var firstActive = $(validation.errorList[0].element || []),\r\n                lastActive = $(validation.findLastActive() ||\r\n                    validation.errorList.length && validation.errorList[0].element || []),\r\n                windowHeight = $(window).height(),\r\n                parent, successList;\r\n\r\n            if (lastActive.is(':hidden')) {\r\n                parent = lastActive.parent();\r\n                $('html, body').animate({\r\n                    scrollTop: parent.offset().top - windowHeight / 2\r\n                });\r\n            }\r\n\r\n            // ARIA (removing aria attributes if success)\r\n            successList = validation.successList;\r\n\r\n            if (successList.length) {\r\n                $.each(successList, function () {\r\n                    $(this)\r\n                        .removeAttr('aria-describedby')\r\n                        .removeAttr('aria-invalid');\r\n                });\r\n            }\r\n\r\n            if (firstActive.length) {\r\n                $('body').stop().animate({\r\n                    scrollTop: firstActive.offset().top - windowHeight / 2\r\n                });\r\n                firstActive.focus();\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.validation;\r\n});\r\n","mage/app/config.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\n/* eslint-disable strict */\r\ndefine([], function () {\r\n    return {\r\n        /**\r\n         * Get base url.\r\n         */\r\n        getBaseUrl: function () {\r\n            return this.values.baseUrl;\r\n        },\r\n\r\n        /**\r\n         * Get form key.\r\n         */\r\n        getFormKey: function () {\r\n            return this.values.formKey;\r\n        }\r\n    };\r\n});\r\n","mage/apply/main.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    './scripts'\r\n], function (_, $, processScripts) {\r\n    'use strict';\r\n\r\n    var dataAttr = 'data-mage-init',\r\n        nodeSelector = '[' + dataAttr + ']';\r\n\r\n    /**\r\n     * Initializes components assigned to a specified element via data-* attribute.\r\n     *\r\n     * @param {HTMLElement} el - Element to initialize components with.\r\n     * @param {Object|String} config - Initial components' config.\r\n     * @param {String} component - Components' path.\r\n     */\r\n    function init(el, config, component) {\r\n        require([component], function (fn) {\r\n\r\n            if (typeof fn === 'object') {\r\n                fn = fn[component].bind(fn);\r\n            }\r\n\r\n            if (_.isFunction(fn)) {\r\n                fn(config, el);\r\n            } else if ($(el)[component]) {\r\n                $(el)[component](config);\r\n            }\r\n        }, function (error) {\r\n            if ('console' in window && typeof window.console.error === 'function') {\r\n                console.error(error);\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses elements 'data-mage-init' attribute as a valid JSON data.\r\n     * Note: data-mage-init attribute will be removed.\r\n     *\r\n     * @param {HTMLElement} el - Element whose attribute should be parsed.\r\n     * @returns {Object}\r\n     */\r\n    function getData(el) {\r\n        var data = el.getAttribute(dataAttr);\r\n\r\n        el.removeAttribute(dataAttr);\r\n\r\n        return {\r\n            el: el,\r\n            data: JSON.parse(data)\r\n        };\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Initializes components assigned to HTML elements via [data-mage-init].\r\n         *\r\n         * @example Sample 'data-mage-init' declaration.\r\n         *      data-mage-init='{\"path/to/component\": {\"foo\": \"bar\"}}'\r\n         */\r\n        apply: function (context) {\r\n            var virtuals = processScripts(!context ? document : context),\r\n                nodes = document.querySelectorAll(nodeSelector);\r\n\r\n            _.toArray(nodes)\r\n                .map(getData)\r\n                .concat(virtuals)\r\n                .forEach(function (itemContainer) {\r\n                    var element = itemContainer.el;\r\n\r\n                    _.each(itemContainer.data, function (obj, key) {\r\n                            if (obj.mixins) {\r\n                                require(obj.mixins, function () { //eslint-disable-line max-nested-callbacks\r\n                                    var i, len;\r\n\r\n                                    for (i = 0, len = arguments.length; i < len; i++) {\r\n                                        $.extend(\r\n                                            true,\r\n                                            itemContainer.data[key],\r\n                                            arguments[i](itemContainer.data[key], element)\r\n                                        );\r\n                                    }\r\n\r\n                                    delete obj.mixins;\r\n                                    init.call(null, element, obj, key);\r\n                                });\r\n                            } else {\r\n                                init.call(null, element, obj, key);\r\n                            }\r\n\r\n                        }\r\n                    );\r\n\r\n                });\r\n        },\r\n        applyFor: init\r\n    };\r\n});\r\n","mage/apply/scripts.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery'\r\n], function (_, $) {\r\n    'use strict';\r\n\r\n    var scriptSelector = 'script[type=\"text/x-magento-init\"]',\r\n        dataAttr = 'data-mage-init',\r\n        virtuals = [];\r\n\r\n    /**\r\n     * Adds components to the virtual list.\r\n     *\r\n     * @param {Object} components\r\n     */\r\n    function addVirtual(components) {\r\n        virtuals.push({\r\n            el: false,\r\n            data: components\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Merges provided data with a current data\r\n     * of a elements' \"data-mage-init\" attribute.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {HTMLElement} elem - Element whose data should be modified.\r\n     */\r\n    function setData(components, elem) {\r\n        var data = elem.getAttribute(dataAttr);\r\n\r\n        data = data ? JSON.parse(data) : {};\r\n        _.each(components, function (obj, key) {\r\n            if (_.has(obj, 'mixins')) {\r\n                data[key] = data[key] || {};\r\n                data[key].mixins = data[key].mixins || [];\r\n                data[key].mixins = data[key].mixins.concat(obj.mixins);\r\n                delete obj.mixins;\r\n            }\r\n        });\r\n\r\n        data = $.extend(true, data, components);\r\n        data = JSON.stringify(data);\r\n        elem.setAttribute(dataAttr, data);\r\n    }\r\n\r\n    /**\r\n     * Search for the elements by privded selector and extends theirs data.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {String} selector - Selector for the elements.\r\n     */\r\n    function processElems(components, selector) {\r\n        var elems,\r\n            iterator;\r\n\r\n        if (selector === '*') {\r\n            addVirtual(components);\r\n\r\n            return;\r\n        }\r\n\r\n        elems = document.querySelectorAll(selector);\r\n        iterator = setData.bind(null, components);\r\n\r\n        _.toArray(elems).forEach(iterator);\r\n    }\r\n\r\n    /**\r\n     * Parses content of a provided script node.\r\n     * Note: node will be removed from DOM.\r\n     *\r\n     * @param {HTMLScriptElement} node - Node to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function getNodeData(node) {\r\n        var data = node.textContent;\r\n\r\n        node.parentNode.removeChild(node);\r\n\r\n        return JSON.parse(data);\r\n    }\r\n\r\n    /**\r\n     * Parses 'script' tags with a custom type attribute and moves it's data\r\n     * to a 'data-mage-init' attribute of an element found by provided selector.\r\n     * Note: All found script nodes will be removed from DOM.\r\n     *\r\n     * @returns {Array} An array of components not assigned to the specific element.\r\n     *\r\n     * @example Sample declaration.\r\n     *      <script type=\"text/x-magento-init\">\r\n     *          {\r\n     *              \"body\": {\r\n     *                  \"path/to/component\": {\"foo\": \"bar\"}\r\n     *              }\r\n     *          }\r\n     *      </script>\r\n     *\r\n     * @example Providing data without selector.\r\n     *      {\r\n     *          \"*\": {\r\n     *              \"path/to/component\": {\"bar\": \"baz\"}\r\n     *          }\r\n     *      }\r\n     */\r\n    return function () {\r\n        var nodes = document.querySelectorAll(scriptSelector);\r\n\r\n        _.toArray(nodes)\r\n            .map(getNodeData)\r\n            .forEach(function (item) {\r\n                _.each(item, processElems);\r\n            });\r\n\r\n        return virtuals.splice(0, virtuals.length);\r\n    };\r\n});\r\n","mage/gallery/gallery.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'fotorama/fotorama',\r\n    'underscore',\r\n    'matchMedia',\r\n    'mage/template',\r\n    'text!mage/gallery/gallery.html',\r\n    'uiClass',\r\n    'mage/translate'\r\n], function ($, fotorama, _, mediaCheck, template, galleryTpl, Class, $t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Retrieves index if the main item.\r\n     * @param {Array.<Object>} data - Set of gallery items.\r\n     */\r\n    var getMainImageIndex = function (data) {\r\n            var mainIndex;\r\n\r\n            if (_.every(data, function (item) {\r\n                    return _.isObject(item);\r\n                })\r\n            ) {\r\n                mainIndex = _.findIndex(data, function (item) {\r\n                    return item.isMain;\r\n                });\r\n            }\r\n\r\n            return mainIndex > 0 ? mainIndex : 0;\r\n        },\r\n\r\n        /**\r\n         * Helper for parse translate property\r\n         *\r\n         * @param {Element} el - el that to parse\r\n         * @returns {Array} - array of properties.\r\n         */\r\n        getTranslate = function (el) {\r\n            var slideTransform = $(el).attr('style').split(';');\r\n\r\n            slideTransform = $.map(slideTransform, function (style) {\r\n                style = style.trim();\r\n\r\n                if (style.startsWith('transform: translate3d')) {\r\n                    return style.match(/transform: translate3d\\((.+)px,(.+)px,(.+)px\\)/);\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return slideTransform.filter(Boolean);\r\n        },\r\n\r\n        /**\r\n         * @param {*} str\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _toNumber = function (str) {\r\n            var type = typeof str;\r\n\r\n            if (type === 'string') {\r\n                return parseInt(str); //eslint-disable-line radix\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n    return Class.extend({\r\n\r\n        defaults: {\r\n            settings: {},\r\n            config: {},\r\n            startConfig: {}\r\n        },\r\n\r\n        /**\r\n         * Checks if device has touch interface.\r\n         * @return {Boolean} The result of searching touch events on device.\r\n         */\r\n        isTouchEnabled: (function () {\r\n            return 'ontouchstart' in document.documentElement;\r\n        })(),\r\n\r\n        /**\r\n         * Initializes gallery.\r\n         * @param {Object} config - Gallery configuration.\r\n         * @param {String} element - String selector of gallery DOM element.\r\n         */\r\n        initialize: function (config, element) {\r\n            var self = this;\r\n\r\n            this._super();\r\n\r\n            _.bindAll(this,\r\n                '_focusSwitcher'\r\n            );\r\n\r\n            /*turn off arrows for touch devices*/\r\n            if (this.isTouchEnabled) {\r\n                config.options.arrows = false;\r\n\r\n                if (config.fullscreen) {\r\n                    config.fullscreen.arrows = false;\r\n                }\r\n            }\r\n\r\n            config.options.width = _toNumber(config.options.width);\r\n            config.options.height = _toNumber(config.options.height);\r\n            config.options.thumbwidth = _toNumber(config.options.thumbwidth);\r\n            config.options.thumbheight = _toNumber(config.options.thumbheight);\r\n\r\n            config.options.swipe = true;\r\n            this.config = config;\r\n\r\n            this.settings = {\r\n                $element: $(element),\r\n                $pageWrapper: $('body>.page-wrapper'),\r\n                currentConfig: config,\r\n                defaultConfig: _.clone(config),\r\n                fullscreenConfig: _.clone(config.fullscreen),\r\n                breakpoints: config.breakpoints,\r\n                activeBreakpoint: {},\r\n                fotoramaApi: null,\r\n                isFullscreen: false,\r\n                api: null,\r\n                data: _.clone(config.data)\r\n            };\r\n            config.options.ratio = config.options.width / config.options.height;\r\n            config.options.height = null;\r\n\r\n            $.extend(true, this.startConfig, config);\r\n\r\n            this.initGallery();\r\n            this.initApi();\r\n            this.setupBreakpoints();\r\n            this.initFullscreenSettings();\r\n\r\n            this.settings.$element.on('click', '.fotorama__stage__frame', function () {\r\n                if (\r\n                    !$(this).parents('.fotorama__shadows--left, .fotorama__shadows--right').length &&\r\n                    !$(this).hasClass('fotorama-video-container')\r\n                ) {\r\n                    self.openFullScreen();\r\n                }\r\n            });\r\n\r\n            if (this.isTouchEnabled && this.settings.isFullscreen) {\r\n                this.settings.$element.on('tap', '.fotorama__stage__frame', function () {\r\n                    var translate = getTranslate($(this).parents('.fotorama__stage__shaft'));\r\n\r\n                    if (translate[1] === '0' && !$(this).hasClass('fotorama-video-container')) {\r\n                        self.openFullScreen();\r\n                        self.settings.$pageWrapper.hide();\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Open gallery fullscreen\r\n         */\r\n        openFullScreen: function () {\r\n            this.settings.api.fotorama.requestFullScreen();\r\n            this.settings.$fullscreenIcon.css({\r\n                opacity: 1,\r\n                visibility: 'visible',\r\n                display: 'block'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Gallery fullscreen settings.\r\n         */\r\n        initFullscreenSettings: function () {\r\n            var settings = this.settings,\r\n                self = this;\r\n\r\n            settings.$gallery = this.settings.$element.find('[data-gallery-role=\"gallery\"]');\r\n            settings.$fullscreenIcon = this.settings.$element.find('[data-gallery-role=\"fotorama__fullscreen-icon\"]');\r\n            settings.focusableStart = this.settings.$element.find('[data-gallery-role=\"fotorama__focusable-start\"]');\r\n            settings.focusableEnd = this.settings.$element.find('[data-gallery-role=\"fotorama__focusable-end\"]');\r\n            settings.closeIcon = this.settings.$element.find('[data-gallery-role=\"fotorama__fullscreen-icon\"]');\r\n            settings.fullscreenConfig.swipe = true;\r\n\r\n            settings.$gallery.on('fotorama:fullscreenenter', function () {\r\n                settings.closeIcon.show();\r\n                settings.focusableStart.attr('tabindex', '0');\r\n                settings.focusableEnd.attr('tabindex', '0');\r\n                settings.focusableStart.bind('focusin', self._focusSwitcher);\r\n                settings.focusableEnd.bind('focusin', self._focusSwitcher);\r\n                settings.api.updateOptions(settings.defaultConfig.options, true);\r\n                settings.api.updateOptions(settings.fullscreenConfig, true);\r\n\r\n                if (!_.isEqual(settings.activeBreakpoint, {}) && settings.breakpoints) {\r\n                    settings.api.updateOptions(settings.activeBreakpoint.options, true);\r\n                }\r\n                settings.isFullscreen = true;\r\n            });\r\n\r\n            settings.$gallery.on('fotorama:fullscreenexit', function () {\r\n                settings.closeIcon.hide();\r\n                settings.focusableStart.attr('tabindex', '-1');\r\n                settings.focusableEnd.attr('tabindex', '-1');\r\n                settings.api.updateOptions(settings.defaultConfig.options, true);\r\n                settings.focusableStart.unbind('focusin', this._focusSwitcher);\r\n                settings.focusableEnd.unbind('focusin', this._focusSwitcher);\r\n                settings.closeIcon.hide();\r\n\r\n                if (!_.isEqual(settings.activeBreakpoint, {}) && settings.breakpoints) {\r\n                    settings.api.updateOptions(settings.activeBreakpoint.options, true);\r\n                }\r\n                settings.isFullscreen = false;\r\n                settings.$element.data('gallery').updateOptions({\r\n                    swipe: true\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Switcher focus.\r\n         */\r\n        _focusSwitcher: function (e) {\r\n            var target = $(e.target),\r\n                settings = this.settings;\r\n\r\n            if (target.is(settings.focusableStart)) {\r\n                this._setFocus('start');\r\n            } else if (target.is(settings.focusableEnd)) {\r\n                this._setFocus('end');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set focus to element.\r\n         * @param {String} position - can be \"start\" and \"end\"\r\n         *      positions.\r\n         *      If position is \"end\" - sets focus to first\r\n         *      focusable element in modal window scope.\r\n         *      If position is \"start\" - sets focus to last\r\n         *      focusable element in modal window scope\r\n         */\r\n        _setFocus: function (position) {\r\n            var settings = this.settings,\r\n                focusableElements,\r\n                infelicity;\r\n\r\n            if (position === 'end') {\r\n                settings.$gallery.find(settings.closeIcon).focus();\r\n            } else if (position === 'start') {\r\n                infelicity = 3; //Constant for find last focusable element\r\n                focusableElements = settings.$gallery.find(':focusable');\r\n                focusableElements.eq(focusableElements.length - infelicity).focus();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes gallery with configuration options.\r\n         */\r\n        initGallery: function () {\r\n            var breakpoints = {},\r\n                settings = this.settings,\r\n                config = this.config,\r\n                tpl = template(galleryTpl, {\r\n                    next: $t('Next'),\r\n                    previous: $t('Previous')\r\n                }),\r\n                mainImageIndex;\r\n\r\n            if (settings.breakpoints) {\r\n                _.each(_.values(settings.breakpoints), function (breakpoint) {\r\n                    var conditions;\r\n\r\n                    _.each(_.pairs(breakpoint.conditions), function (pair) {\r\n                        conditions = conditions ? conditions + ' and (' + pair[0] + ': ' + pair[1] + ')' :\r\n                        '(' + pair[0] + ': ' + pair[1] + ')';\r\n                    });\r\n                    breakpoints[conditions] = breakpoint.options;\r\n                });\r\n                settings.breakpoints = breakpoints;\r\n            }\r\n\r\n            _.extend(config, config.options);\r\n            config.options = undefined;\r\n\r\n            config.click = false;\r\n            config.breakpoints = null;\r\n            settings.currentConfig = config;\r\n            settings.$element.html(tpl);\r\n            settings.$element.removeClass('_block-content-loading');\r\n            settings.$elementF = $(settings.$element.children()[0]);\r\n            settings.$elementF.fotorama(config);\r\n            settings.fotoramaApi = settings.$elementF.data('fotorama');\r\n            $.extend(true, config, this.startConfig);\r\n\r\n            mainImageIndex = getMainImageIndex(config.data);\r\n\r\n            if (mainImageIndex) {\r\n                this.settings.fotoramaApi.show({\r\n                    index: mainImageIndex,\r\n                    time: 0\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates breakpoints for gallery.\r\n         */\r\n        setupBreakpoints: function () {\r\n            var pairs,\r\n                settings = this.settings,\r\n                config = this.config,\r\n                startConfig = this.startConfig,\r\n                isTouchEnabled = this.isTouchEnabled;\r\n\r\n            if (_.isObject(settings.breakpoints)) {\r\n                pairs = _.pairs(settings.breakpoints);\r\n                _.each(pairs, function (pair) {\r\n                    mediaCheck({\r\n                        media: pair[0],\r\n\r\n                        /**\r\n                         * Is triggered when breakpoint enties.\r\n                         */\r\n                        entry: function () {\r\n                            $.extend(true, config, _.clone(startConfig));\r\n\r\n                            settings.api.updateOptions(settings.defaultConfig.options, true);\r\n\r\n                            if (settings.isFullscreen) {\r\n                                settings.api.updateOptions(settings.fullscreenConfig, true);\r\n                            }\r\n\r\n                            if (isTouchEnabled) {\r\n                                settings.breakpoints[pair[0]].options.arrows = false;\r\n\r\n                                if (settings.breakpoints[pair[0]].options.fullscreen) {\r\n                                    settings.breakpoints[pair[0]].options.fullscreen.arrows = false;\r\n                                }\r\n                            }\r\n\r\n                            settings.api.updateOptions(settings.breakpoints[pair[0]].options, true);\r\n                            $.extend(true, config, settings.breakpoints[pair[0]]);\r\n                            settings.activeBreakpoint = settings.breakpoints[pair[0]];\r\n                        },\r\n\r\n                        /**\r\n                         * Is triggered when breakpoint exits.\r\n                         */\r\n                        exit: function () {\r\n                            $.extend(true, config, _.clone(startConfig));\r\n                            settings.api.updateOptions(settings.defaultConfig.options, true);\r\n\r\n                            if (settings.isFullscreen) {\r\n                                settings.api.updateOptions(settings.fullscreenConfig, true);\r\n                            }\r\n                            settings.activeBreakpoint = {};\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates gallery's API.\r\n         */\r\n        initApi: function () {\r\n            var settings = this.settings,\r\n                config = this.config,\r\n                api = {\r\n\r\n                    /**\r\n                     * Contains fotorama's API methods.\r\n                     */\r\n                    fotorama: settings.fotoramaApi,\r\n\r\n                    /**\r\n                     * Displays the last image on preview.\r\n                     */\r\n                    last: function () {\r\n                        settings.fotoramaApi.show('>>');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays the first image on preview.\r\n                     */\r\n                    first: function () {\r\n                        settings.fotoramaApi.show('<<');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays previous element on preview.\r\n                     */\r\n                    prev: function () {\r\n                        settings.fotoramaApi.show('<');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays next element on preview.\r\n                     */\r\n                    next: function () {\r\n                        settings.fotoramaApi.show('>');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays image with appropriate count number on preview.\r\n                     * @param {Number} index - Number of image that should be displayed.\r\n                     */\r\n                    seek: function (index) {\r\n                        if (_.isNumber(index) && index !== 0) {\r\n\r\n                            if (index > 0) {\r\n                                index -= 1;\r\n                            }\r\n                            settings.fotoramaApi.show(index);\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Updates gallery with new set of options.\r\n                     * @param {Object} configuration - Standart gallery configuration object.\r\n                     * @param {Boolean} isInternal - Is this function called via breakpoints.\r\n                     */\r\n                    updateOptions: function (configuration, isInternal) {\r\n\r\n                        var $selectable = $('a[href], area[href], input, select, ' +\r\n                                'textarea, button, iframe, object, embed, *[tabindex], *[contenteditable]')\r\n                                .not('[tabindex=-1], [disabled], :hidden'),\r\n                            $focus = $(':focus'),\r\n                            index;\r\n\r\n                        if (_.isObject(configuration)) {\r\n\r\n                            //Saves index of focus\r\n                            $selectable.each(function (number) {\r\n                                if ($(this).is($focus)) {\r\n                                    index = number;\r\n                                }\r\n                            });\r\n\r\n                            if (this.isTouchEnabled) {\r\n                                configuration.arrows = false;\r\n                            }\r\n                            configuration.click = false;\r\n                            configuration.breakpoints = null;\r\n\r\n                            if (!isInternal) {\r\n                                !_.isEqual(settings.activeBreakpoint, {} && settings.brekpoints) ?\r\n                                    $.extend(true, settings.activeBreakpoint.options, configuration) :\r\n\r\n                                    settings.isFullscreen ?\r\n                                        $.extend(true, settings.fullscreenConfig, configuration) :\r\n                                        $.extend(true, settings.defaultConfig.options, configuration);\r\n\r\n                            }\r\n                            $.extend(true, settings.currentConfig.options, configuration);\r\n                            settings.fotoramaApi.setOptions(settings.currentConfig.options);\r\n\r\n                            if (_.isNumber(index)) {\r\n                                $selectable.eq(index).focus();\r\n                            }\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Updates gallery with specific set of items.\r\n                     * @param {Array.<Object>} data - Set of gallery items to update.\r\n                     */\r\n                    updateData: function (data) {\r\n                        var mainImageIndex;\r\n\r\n                        if (_.isArray(data)) {\r\n                            settings.fotoramaApi.load(data);\r\n                            mainImageIndex = getMainImageIndex(data);\r\n\r\n                            if (mainImageIndex) {\r\n                                settings.fotoramaApi.show({\r\n                                    index: mainImageIndex,\r\n                                    time: 0\r\n                                });\r\n                            }\r\n\r\n                            $.extend(false, settings, {\r\n                                data: data,\r\n                                defaultConfig: data\r\n                            });\r\n                            $.extend(false, config, {\r\n                                data: data\r\n                            });\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Returns current images list\r\n                     *\r\n                     * @returns {Array}\r\n                     */\r\n                    returnCurrentImages: function () {\r\n                        var images = [];\r\n\r\n                        _.each(this.fotorama.data, function (item) {\r\n                            images.push(_.omit(item, '$navThumbFrame', '$navDotFrame', '$stageFrame', 'labelledby'));\r\n                        });\r\n\r\n                        return images;\r\n                    },\r\n\r\n                    /**\r\n                     * Updates gallery data partially by index\r\n                     * @param {Number} index - Index of image in data array to be updated.\r\n                     * @param {Object} item - Standart gallery image object.\r\n                     *\r\n                     */\r\n                    updateDataByIndex: function (index, item) {\r\n                        settings.fotoramaApi.spliceByIndex(index, item);\r\n                    }\r\n                };\r\n\r\n            settings.$element.data('gallery', api);\r\n            settings.api = settings.$element.data('gallery');\r\n            settings.$element.trigger('gallery:loaded');\r\n        }\r\n    });\r\n});\r\n"}
}});
