require.config({"config": {
        "jsbuild":{"Solwin_ScrolltoTop/js/jscolor.min.js":"/**\n * jscolor - JavaScript Color Picker\n *\n * @link    http://jscolor.com\n * @license For open source use: GPLv3\n *          For commercial use: JSColor Commercial License\n * @author  Jan Odvarko\n *\n * See usage examples at http://jscolor.com/examples/\n */\"use strict\";window.jscolor||(window.jscolor=function(){var e={register:function(){e.attachDOMReadyEvent(e.init),e.attachEvent(document,\"mousedown\",e.onDocumentMouseDown),e.attachEvent(document,\"touchstart\",e.onDocumentTouchStart),e.attachEvent(window,\"resize\",e.onWindowResize)},init:function(){e.jscolor.lookupClass&&e.jscolor.installByClassName(e.jscolor.lookupClass)},tryInstallOnElements:function(t,n){var r=new RegExp(\"(^|\\\\s)(\"+n+\")(\\\\s*(\\\\{[^}]*\\\\})|\\\\s|$)\",\"i\");for(var i=0;i<t.length;i+=1){if(t[i].type!==undefined&&t[i].type.toLowerCase()==\"color\"&&e.isColorAttrSupported)continue;var s;if(!t[i].jscolor&&t[i].className&&(s=t[i].className.match(r))){var o=t[i],u=null,a=e.getDataAttr(o,\"jscolor\");a!==null?u=a:s[4]&&(u=s[4]);var f={};if(u)try{f=(new Function(\"return (\"+u+\")\"))()}catch(l){e.warn(\"Error parsing jscolor options: \"+l+\":\\n\"+u)}o.jscolor=new e.jscolor(o,f)}}},isColorAttrSupported:function(){var e=document.createElement(\"input\");if(e.setAttribute){e.setAttribute(\"type\",\"color\");if(e.type.toLowerCase()==\"color\")return!0}return!1}(),isCanvasSupported:function(){var e=document.createElement(\"canvas\");return!!e.getContext&&!!e.getContext(\"2d\")}(),fetchElement:function(e){return typeof e==\"string\"?document.getElementById(e):e},isElementType:function(e,t){return e.nodeName.toLowerCase()===t.toLowerCase()},getDataAttr:function(e,t){var n=\"data-\"+t,r=e.getAttribute(n);return r!==null?r:null},attachEvent:function(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent&&e.attachEvent(\"on\"+t,n)},detachEvent:function(e,t,n){e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent&&e.detachEvent(\"on\"+t,n)},_attachedGroupEvents:{},attachGroupEvent:function(t,n,r,i){e._attachedGroupEvents.hasOwnProperty(t)||(e._attachedGroupEvents[t]=[]),e._attachedGroupEvents[t].push([n,r,i]),e.attachEvent(n,r,i)},detachGroupEvents:function(t){if(e._attachedGroupEvents.hasOwnProperty(t)){for(var n=0;n<e._attachedGroupEvents[t].length;n+=1){var r=e._attachedGroupEvents[t][n];e.detachEvent(r[0],r[1],r[2])}delete e._attachedGroupEvents[t]}},attachDOMReadyEvent:function(e){var t=!1,n=function(){t||(t=!0,e())};if(document.readyState===\"complete\"){setTimeout(n,1);return}if(document.addEventListener)document.addEventListener(\"DOMContentLoaded\",n,!1),window.addEventListener(\"load\",n,!1);else if(document.attachEvent){document.attachEvent(\"onreadystatechange\",function(){document.readyState===\"complete\"&&(document.detachEvent(\"onreadystatechange\",arguments.callee),n())}),window.attachEvent(\"onload\",n);if(document.documentElement.doScroll&&window==window.top){var r=function(){if(!document.body)return;try{document.documentElement.doScroll(\"left\"),n()}catch(e){setTimeout(r,1)}};r()}}},warn:function(e){window.console&&window.console.warn&&window.console.warn(e)},preventDefault:function(e){e.preventDefault&&e.preventDefault(),e.returnValue=!1},captureTarget:function(t){t.setCapture&&(e._capturedTarget=t,e._capturedTarget.setCapture())},releaseTarget:function(){e._capturedTarget&&(e._capturedTarget.releaseCapture(),e._capturedTarget=null)},fireEvent:function(e,t){if(!e)return;if(document.createEvent){var n=document.createEvent(\"HTMLEvents\");n.initEvent(t,!0,!0),e.dispatchEvent(n)}else if(document.createEventObject){var n=document.createEventObject();e.fireEvent(\"on\"+t,n)}else e[\"on\"+t]&&e[\"on\"+t]()},classNameToList:function(e){return e.replace(/^\\s+|\\s+$/g,\"\").split(/\\s+/)},hasClass:function(e,t){return t?-1!=(\" \"+e.className.replace(/\\s+/g,\" \")+\" \").indexOf(\" \"+t+\" \"):!1},setClass:function(t,n){var r=e.classNameToList(n);for(var i=0;i<r.length;i+=1)e.hasClass(t,r[i])||(t.className+=(t.className?\" \":\"\")+r[i])},unsetClass:function(t,n){var r=e.classNameToList(n);for(var i=0;i<r.length;i+=1){var s=new RegExp(\"^\\\\s*\"+r[i]+\"\\\\s*|\"+\"\\\\s*\"+r[i]+\"\\\\s*$|\"+\"\\\\s+\"+r[i]+\"(\\\\s+)\",\"g\");t.className=t.className.replace(s,\"$1\")}},getStyle:function(e){return window.getComputedStyle?window.getComputedStyle(e):e.currentStyle},setStyle:function(){var e=document.createElement(\"div\"),t=function(t){for(var n=0;n<t.length;n+=1)if(t[n]in e.style)return t[n]},n={borderRadius:t([\"borderRadius\",\"MozBorderRadius\",\"webkitBorderRadius\"]),boxShadow:t([\"boxShadow\",\"MozBoxShadow\",\"webkitBoxShadow\"])};return function(e,t,r){switch(t.toLowerCase()){case\"opacity\":var i=Math.round(parseFloat(r)*100);e.style.opacity=r,e.style.filter=\"alpha(opacity=\"+i+\")\";break;default:e.style[n[t]]=r}}}(),setBorderRadius:function(t,n){e.setStyle(t,\"borderRadius\",n||\"0\")},setBoxShadow:function(t,n){e.setStyle(t,\"boxShadow\",n||\"none\")},getElementPos:function(t,n){var r=0,i=0,s=t.getBoundingClientRect();r=s.left,i=s.top;if(!n){var o=e.getViewPos();r+=o[0],i+=o[1]}return[r,i]},getElementSize:function(e){return[e.offsetWidth,e.offsetHeight]},getAbsPointerPos:function(e){e||(e=window.event);var t=0,n=0;return typeof e.changedTouches!=\"undefined\"&&e.changedTouches.length?(t=e.changedTouches[0].clientX,n=e.changedTouches[0].clientY):typeof e.clientX==\"number\"&&(t=e.clientX,n=e.clientY),{x:t,y:n}},getRelPointerPos:function(e){e||(e=window.event);var t=e.target||e.srcElement,n=t.getBoundingClientRect(),r=0,i=0,s=0,o=0;return typeof e.changedTouches!=\"undefined\"&&e.changedTouches.length?(s=e.changedTouches[0].clientX,o=e.changedTouches[0].clientY):typeof e.clientX==\"number\"&&(s=e.clientX,o=e.clientY),r=s-n.left,i=o-n.top,{x:r,y:i}},getViewPos:function(){var e=document.documentElement;return[(window.pageXOffset||e.scrollLeft)-(e.clientLeft||0),(window.pageYOffset||e.scrollTop)-(e.clientTop||0)]},getViewSize:function(){var e=document.documentElement;return[window.innerWidth||e.clientWidth,window.innerHeight||e.clientHeight]},redrawPosition:function(){if(e.picker&&e.picker.owner){var t=e.picker.owner,n,r;t.fixed?(n=e.getElementPos(t.targetElement,!0),r=[0,0]):(n=e.getElementPos(t.targetElement),r=e.getViewPos());var i=e.getElementSize(t.targetElement),s=e.getViewSize(),o=e.getPickerOuterDims(t),u,a,f;switch(t.position.toLowerCase()){case\"left\":u=1,a=0,f=-1;break;case\"right\":u=1,a=0,f=1;break;case\"top\":u=0,a=1,f=-1;break;default:u=0,a=1,f=1}var l=(i[a]+o[a])/2;if(!t.smartPosition)var c=[n[u],n[a]+i[a]-l+l*f];else var c=[-r[u]+n[u]+o[u]>s[u]?-r[u]+n[u]+i[u]/2>s[u]/2&&n[u]+i[u]-o[u]>=0?n[u]+i[u]-o[u]:n[u]:n[u],-r[a]+n[a]+i[a]+o[a]-l+l*f>s[a]?-r[a]+n[a]+i[a]/2>s[a]/2&&n[a]+i[a]-l-l*f>=0?n[a]+i[a]-l-l*f:n[a]+i[a]-l+l*f:n[a]+i[a]-l+l*f>=0?n[a]+i[a]-l+l*f:n[a]+i[a]-l-l*f];var h=c[u],p=c[a],d=t.fixed?\"fixed\":\"absolute\",v=(c[0]+o[0]>n[0]||c[0]<n[0]+i[0])&&c[1]+o[1]<n[1]+i[1];e._drawPosition(t,h,p,d,v)}},_drawPosition:function(t,n,r,i,s){var o=s?0:t.shadowBlur;e.picker.wrap.style.position=i,e.picker.wrap.style.left=n+\"px\",e.picker.wrap.style.top=r+\"px\",e.setBoxShadow(e.picker.boxS,t.shadow?new e.BoxShadow(0,o,t.shadowBlur,0,t.shadowColor):null)},getPickerDims:function(t){var n=!!e.getSliderComponent(t),r=[2*t.insetWidth+2*t.padding+t.width+(n?2*t.insetWidth+e.getPadToSliderPadding(t)+t.sliderSize:0),2*t.insetWidth+2*t.padding+t.height+(t.closable?2*t.insetWidth+t.padding+t.buttonHeight:0)];return r},getPickerOuterDims:function(t){var n=e.getPickerDims(t);return[n[0]+2*t.borderWidth,n[1]+2*t.borderWidth]},getPadToSliderPadding:function(e){return Math.max(e.padding,1.5*(2*e.pointerBorderWidth+e.pointerThickness))},getPadYComponent:function(e){switch(e.mode.charAt(1).toLowerCase()){case\"v\":return\"v\"}return\"s\"},getSliderComponent:function(e){if(e.mode.length>2)switch(e.mode.charAt(2).toLowerCase()){case\"s\":return\"s\";case\"v\":return\"v\"}return null},onDocumentMouseDown:function(t){t||(t=window.event);var n=t.target||t.srcElement;n._jscLinkedInstance?n._jscLinkedInstance.showOnClick&&n._jscLinkedInstance.show():n._jscControlName?e.onControlPointerStart(t,n,n._jscControlName,\"mouse\"):e.picker&&e.picker.owner&&e.picker.owner.hide()},onDocumentTouchStart:function(t){t||(t=window.event);var n=t.target||t.srcElement;n._jscLinkedInstance?n._jscLinkedInstance.showOnClick&&n._jscLinkedInstance.show():n._jscControlName?e.onControlPointerStart(t,n,n._jscControlName,\"touch\"):e.picker&&e.picker.owner&&e.picker.owner.hide()},onWindowResize:function(t){e.redrawPosition()},onParentScroll:function(t){e.picker&&e.picker.owner&&e.picker.owner.hide()},_pointerMoveEvent:{mouse:\"mousemove\",touch:\"touchmove\"},_pointerEndEvent:{mouse:\"mouseup\",touch:\"touchend\"},_pointerOrigin:null,_capturedTarget:null,onControlPointerStart:function(t,n,r,i){var s=n._jscInstance;e.preventDefault(t),e.captureTarget(n);var o=function(s,o){e.attachGroupEvent(\"drag\",s,e._pointerMoveEvent[i],e.onDocumentPointerMove(t,n,r,i,o)),e.attachGroupEvent(\"drag\",s,e._pointerEndEvent[i],e.onDocumentPointerEnd(t,n,r,i))};o(document,[0,0]);if(window.parent&&window.frameElement){var u=window.frameElement.getBoundingClientRect(),a=[-u.left,-u.top];o(window.parent.window.document,a)}var f=e.getAbsPointerPos(t),l=e.getRelPointerPos(t);e._pointerOrigin={x:f.x-l.x,y:f.y-l.y};switch(r){case\"pad\":switch(e.getSliderComponent(s)){case\"s\":s.hsv[1]===0&&s.fromHSV(null,100,null);break;case\"v\":s.hsv[2]===0&&s.fromHSV(null,null,100)}e.setPad(s,t,0,0);break;case\"sld\":e.setSld(s,t,0)}e.dispatchFineChange(s)},onDocumentPointerMove:function(t,n,r,i,s){return function(t){var i=n._jscInstance;switch(r){case\"pad\":t||(t=window.event),e.setPad(i,t,s[0],s[1]),e.dispatchFineChange(i);break;case\"sld\":t||(t=window.event),e.setSld(i,t,s[1]),e.dispatchFineChange(i)}}},onDocumentPointerEnd:function(t,n,r,i){return function(t){var r=n._jscInstance;e.detachGroupEvents(\"drag\"),e.releaseTarget(),e.dispatchChange(r)}},dispatchChange:function(t){t.valueElement&&e.isElementType(t.valueElement,\"input\")&&e.fireEvent(t.valueElement,\"change\")},dispatchFineChange:function(e){if(e.onFineChange){var t;typeof e.onFineChange==\"string\"?t=new Function(e.onFineChange):t=e.onFineChange,t.call(e)}},setPad:function(t,n,r,i){var s=e.getAbsPointerPos(n),o=r+s.x-e._pointerOrigin.x-t.padding-t.insetWidth,u=i+s.y-e._pointerOrigin.y-t.padding-t.insetWidth,a=o*(360/(t.width-1)),f=100-u*(100/(t.height-1));switch(e.getPadYComponent(t)){case\"s\":t.fromHSV(a,f,null,e.leaveSld);break;case\"v\":t.fromHSV(a,null,f,e.leaveSld)}},setSld:function(t,n,r){var i=e.getAbsPointerPos(n),s=r+i.y-e._pointerOrigin.y-t.padding-t.insetWidth,o=100-s*(100/(t.height-1));switch(e.getSliderComponent(t)){case\"s\":t.fromHSV(null,o,null,e.leavePad);break;case\"v\":t.fromHSV(null,null,o,e.leavePad)}},_vmlNS:\"jsc_vml_\",_vmlCSS:\"jsc_vml_css_\",_vmlReady:!1,initVML:function(){if(!e._vmlReady){var t=document;t.namespaces[e._vmlNS]||t.namespaces.add(e._vmlNS,\"urn:schemas-microsoft-com:vml\");if(!t.styleSheets[e._vmlCSS]){var n=[\"shape\",\"shapetype\",\"group\",\"background\",\"path\",\"formulas\",\"handles\",\"fill\",\"stroke\",\"shadow\",\"textbox\",\"textpath\",\"imagedata\",\"line\",\"polyline\",\"curve\",\"rect\",\"roundrect\",\"oval\",\"arc\",\"image\"],r=t.createStyleSheet();r.owningElement.id=e._vmlCSS;for(var i=0;i<n.length;i+=1)r.addRule(e._vmlNS+\"\\\\:\"+n[i],\"behavior:url(#default#VML);\")}e._vmlReady=!0}},createPalette:function(){var t={elm:null,draw:null};if(e.isCanvasSupported){var n=document.createElement(\"canvas\"),r=n.getContext(\"2d\"),i=function(e,t,i){n.width=e,n.height=t,r.clearRect(0,0,n.width,n.height);var s=r.createLinearGradient(0,0,n.width,0);s.addColorStop(0,\"#F00\"),s.addColorStop(1/6,\"#FF0\"),s.addColorStop(2/6,\"#0F0\"),s.addColorStop(.5,\"#0FF\"),s.addColorStop(4/6,\"#00F\"),s.addColorStop(5/6,\"#F0F\"),s.addColorStop(1,\"#F00\"),r.fillStyle=s,r.fillRect(0,0,n.width,n.height);var o=r.createLinearGradient(0,0,0,n.height);switch(i.toLowerCase()){case\"s\":o.addColorStop(0,\"rgba(255,255,255,0)\"),o.addColorStop(1,\"rgba(255,255,255,1)\");break;case\"v\":o.addColorStop(0,\"rgba(0,0,0,0)\"),o.addColorStop(1,\"rgba(0,0,0,1)\")}r.fillStyle=o,r.fillRect(0,0,n.width,n.height)};t.elm=n,t.draw=i}else{e.initVML();var s=document.createElement(\"div\");s.style.position=\"relative\",s.style.overflow=\"hidden\";var o=document.createElement(e._vmlNS+\":fill\");o.type=\"gradient\",o.method=\"linear\",o.angle=\"90\",o.colors=\"16.67% #F0F, 33.33% #00F, 50% #0FF, 66.67% #0F0, 83.33% #FF0\";var u=document.createElement(e._vmlNS+\":rect\");u.style.position=\"absolute\",u.style.left=\"-1px\",u.style.top=\"-1px\",u.stroked=!1,u.appendChild(o),s.appendChild(u);var a=document.createElement(e._vmlNS+\":fill\");a.type=\"gradient\",a.method=\"linear\",a.angle=\"180\",a.opacity=\"0\";var f=document.createElement(e._vmlNS+\":rect\");f.style.position=\"absolute\",f.style.left=\"-1px\",f.style.top=\"-1px\",f.stroked=!1,f.appendChild(a),s.appendChild(f);var i=function(e,t,n){s.style.width=e+\"px\",s.style.height=t+\"px\",u.style.width=f.style.width=e+1+\"px\",u.style.height=f.style.height=t+1+\"px\",o.color=\"#F00\",o.color2=\"#F00\";switch(n.toLowerCase()){case\"s\":a.color=a.color2=\"#FFF\";break;case\"v\":a.color=a.color2=\"#000\"}};t.elm=s,t.draw=i}return t},createSliderGradient:function(){var t={elm:null,draw:null};if(e.isCanvasSupported){var n=document.createElement(\"canvas\"),r=n.getContext(\"2d\"),i=function(e,t,i,s){n.width=e,n.height=t,r.clearRect(0,0,n.width,n.height);var o=r.createLinearGradient(0,0,0,n.height);o.addColorStop(0,i),o.addColorStop(1,s),r.fillStyle=o,r.fillRect(0,0,n.width,n.height)};t.elm=n,t.draw=i}else{e.initVML();var s=document.createElement(\"div\");s.style.position=\"relative\",s.style.overflow=\"hidden\";var o=document.createElement(e._vmlNS+\":fill\");o.type=\"gradient\",o.method=\"linear\",o.angle=\"180\";var u=document.createElement(e._vmlNS+\":rect\");u.style.position=\"absolute\",u.style.left=\"-1px\",u.style.top=\"-1px\",u.stroked=!1,u.appendChild(o),s.appendChild(u);var i=function(e,t,n,r){s.style.width=e+\"px\",s.style.height=t+\"px\",u.style.width=e+1+\"px\",u.style.height=t+1+\"px\",o.color=n,o.color2=r};t.elm=s,t.draw=i}return t},leaveValue:1,leaveStyle:2,leavePad:4,leaveSld:8,BoxShadow:function(){var e=function(e,t,n,r,i,s){this.hShadow=e,this.vShadow=t,this.blur=n,this.spread=r,this.color=i,this.inset=!!s};return e.prototype.toString=function(){var e=[Math.round(this.hShadow)+\"px\",Math.round(this.vShadow)+\"px\",Math.round(this.blur)+\"px\",Math.round(this.spread)+\"px\",this.color];return this.inset&&e.push(\"inset\"),e.join(\" \")},e}(),jscolor:function(t,n){function i(e,t,n){e/=255,t/=255,n/=255;var r=Math.min(Math.min(e,t),n),i=Math.max(Math.max(e,t),n),s=i-r;if(s===0)return[null,0,100*i];var o=e===r?3+(n-t)/s:t===r?5+(e-n)/s:1+(t-e)/s;return[60*(o===6?0:o),100*(s/i),100*i]}function s(e,t,n){var r=255*(n/100);if(e===null)return[r,r,r];e/=60,t/=100;var i=Math.floor(e),s=i%2?e-i:1-(e-i),o=r*(1-t),u=r*(1-t*s);switch(i){case 6:case 0:return[r,u,o];case 1:return[u,r,o];case 2:return[o,r,u];case 3:return[o,u,r];case 4:return[u,o,r];case 5:return[r,o,u]}}function o(){e.unsetClass(d.targetElement,d.activeClass),e.picker.wrap.parentNode.removeChild(e.picker.wrap),delete e.picker.owner}function u(){function l(){var e=d.insetColor.split(/\\s+/),n=e.length<2?e[0]:e[1]+\" \"+e[0]+\" \"+e[0]+\" \"+e[1];t.btn.style.borderColor=n}d._processParentElementsInDOM(),e.picker||(e.picker={owner:null,wrap:document.createElement(\"div\"),box:document.createElement(\"div\"),boxS:document.createElement(\"div\"),boxB:document.createElement(\"div\"),pad:document.createElement(\"div\"),padB:document.createElement(\"div\"),padM:document.createElement(\"div\"),padPal:e.createPalette(),cross:document.createElement(\"div\"),crossBY:document.createElement(\"div\"),crossBX:document.createElement(\"div\"),crossLY:document.createElement(\"div\"),crossLX:document.createElement(\"div\"),sld:document.createElement(\"div\"),sldB:document.createElement(\"div\"),sldM:document.createElement(\"div\"),sldGrad:e.createSliderGradient(),sldPtrS:document.createElement(\"div\"),sldPtrIB:document.createElement(\"div\"),sldPtrMB:document.createElement(\"div\"),sldPtrOB:document.createElement(\"div\"),btn:document.createElement(\"div\"),btnT:document.createElement(\"span\")},e.picker.pad.appendChild(e.picker.padPal.elm),e.picker.padB.appendChild(e.picker.pad),e.picker.cross.appendChild(e.picker.crossBY),e.picker.cross.appendChild(e.picker.crossBX),e.picker.cross.appendChild(e.picker.crossLY),e.picker.cross.appendChild(e.picker.crossLX),e.picker.padB.appendChild(e.picker.cross),e.picker.box.appendChild(e.picker.padB),e.picker.box.appendChild(e.picker.padM),e.picker.sld.appendChild(e.picker.sldGrad.elm),e.picker.sldB.appendChild(e.picker.sld),e.picker.sldB.appendChild(e.picker.sldPtrOB),e.picker.sldPtrOB.appendChild(e.picker.sldPtrMB),e.picker.sldPtrMB.appendChild(e.picker.sldPtrIB),e.picker.sldPtrIB.appendChild(e.picker.sldPtrS),e.picker.box.appendChild(e.picker.sldB),e.picker.box.appendChild(e.picker.sldM),e.picker.btn.appendChild(e.picker.btnT),e.picker.box.appendChild(e.picker.btn),e.picker.boxB.appendChild(e.picker.box),e.picker.wrap.appendChild(e.picker.boxS),e.picker.wrap.appendChild(e.picker.boxB));var t=e.picker,n=!!e.getSliderComponent(d),r=e.getPickerDims(d),i=2*d.pointerBorderWidth+d.pointerThickness+2*d.crossSize,s=e.getPadToSliderPadding(d),o=Math.min(d.borderRadius,Math.round(d.padding*Math.PI)),u=\"crosshair\";t.wrap.style.clear=\"both\",t.wrap.style.width=r[0]+2*d.borderWidth+\"px\",t.wrap.style.height=r[1]+2*d.borderWidth+\"px\",t.wrap.style.zIndex=d.zIndex,t.box.style.width=r[0]+\"px\",t.box.style.height=r[1]+\"px\",t.boxS.style.position=\"absolute\",t.boxS.style.left=\"0\",t.boxS.style.top=\"0\",t.boxS.style.width=\"100%\",t.boxS.style.height=\"100%\",e.setBorderRadius(t.boxS,o+\"px\"),t.boxB.style.position=\"relative\",t.boxB.style.border=d.borderWidth+\"px solid\",t.boxB.style.borderColor=d.borderColor,t.boxB.style.background=d.backgroundColor,e.setBorderRadius(t.boxB,o+\"px\"),t.padM.style.background=t.sldM.style.background=\"#FFF\",e.setStyle(t.padM,\"opacity\",\"0\"),e.setStyle(t.sldM,\"opacity\",\"0\"),t.pad.style.position=\"relative\",t.pad.style.width=d.width+\"px\",t.pad.style.height=d.height+\"px\",t.padPal.draw(d.width,d.height,e.getPadYComponent(d)),t.padB.style.position=\"absolute\",t.padB.style.left=d.padding+\"px\",t.padB.style.top=d.padding+\"px\",t.padB.style.border=d.insetWidth+\"px solid\",t.padB.style.borderColor=d.insetColor,t.padM._jscInstance=d,t.padM._jscControlName=\"pad\",t.padM.style.position=\"absolute\",t.padM.style.left=\"0\",t.padM.style.top=\"0\",t.padM.style.width=d.padding+2*d.insetWidth+d.width+s/2+\"px\",t.padM.style.height=r[1]+\"px\",t.padM.style.cursor=u,t.cross.style.position=\"absolute\",t.cross.style.left=t.cross.style.top=\"0\",t.cross.style.width=t.cross.style.height=i+\"px\",t.crossBY.style.position=t.crossBX.style.position=\"absolute\",t.crossBY.style.background=t.crossBX.style.background=d.pointerBorderColor,t.crossBY.style.width=t.crossBX.style.height=2*d.pointerBorderWidth+d.pointerThickness+\"px\",t.crossBY.style.height=t.crossBX.style.width=i+\"px\",t.crossBY.style.left=t.crossBX.style.top=Math.floor(i/2)-Math.floor(d.pointerThickness/2)-d.pointerBorderWidth+\"px\",t.crossBY.style.top=t.crossBX.style.left=\"0\",t.crossLY.style.position=t.crossLX.style.position=\"absolute\",t.crossLY.style.background=t.crossLX.style.background=d.pointerColor,t.crossLY.style.height=t.crossLX.style.width=i-2*d.pointerBorderWidth+\"px\",t.crossLY.style.width=t.crossLX.style.height=d.pointerThickness+\"px\",t.crossLY.style.left=t.crossLX.style.top=Math.floor(i/2)-Math.floor(d.pointerThickness/2)+\"px\",t.crossLY.style.top=t.crossLX.style.left=d.pointerBorderWidth+\"px\",t.sld.style.overflow=\"hidden\",t.sld.style.width=d.sliderSize+\"px\",t.sld.style.height=d.height+\"px\",t.sldGrad.draw(d.sliderSize,d.height,\"#000\",\"#000\"),t.sldB.style.display=n?\"block\":\"none\",t.sldB.style.position=\"absolute\",t.sldB.style.right=d.padding+\"px\",t.sldB.style.top=d.padding+\"px\",t.sldB.style.border=d.insetWidth+\"px solid\",t.sldB.style.borderColor=d.insetColor,t.sldM._jscInstance=d,t.sldM._jscControlName=\"sld\",t.sldM.style.display=n?\"block\":\"none\",t.sldM.style.position=\"absolute\",t.sldM.style.right=\"0\",t.sldM.style.top=\"0\",t.sldM.style.width=d.sliderSize+s/2+d.padding+2*d.insetWidth+\"px\",t.sldM.style.height=r[1]+\"px\",t.sldM.style.cursor=\"default\",t.sldPtrIB.style.border=t.sldPtrOB.style.border=d.pointerBorderWidth+\"px solid \"+d.pointerBorderColor,t.sldPtrOB.style.position=\"absolute\",t.sldPtrOB.style.left=-(2*d.pointerBorderWidth+d.pointerThickness)+\"px\",t.sldPtrOB.style.top=\"0\",t.sldPtrMB.style.border=d.pointerThickness+\"px solid \"+d.pointerColor,t.sldPtrS.style.width=d.sliderSize+\"px\",t.sldPtrS.style.height=m+\"px\",t.btn.style.display=d.closable?\"block\":\"none\",t.btn.style.position=\"absolute\",t.btn.style.left=d.padding+\"px\",t.btn.style.bottom=d.padding+\"px\",t.btn.style.padding=\"0 15px\",t.btn.style.height=d.buttonHeight+\"px\",t.btn.style.border=d.insetWidth+\"px solid\",l(),t.btn.style.color=d.buttonColor,t.btn.style.font=\"12px sans-serif\",t.btn.style.textAlign=\"center\";try{t.btn.style.cursor=\"pointer\"}catch(c){t.btn.style.cursor=\"hand\"}t.btn.onmousedown=function(){d.hide()},t.btnT.style.lineHeight=d.buttonHeight+\"px\",t.btnT.innerHTML=\"\",t.btnT.appendChild(document.createTextNode(d.closeText)),a(),f(),e.picker.owner&&e.picker.owner!==d&&e.unsetClass(e.picker.owner.targetElement,d.activeClass),e.picker.owner=d,e.isElementType(v,\"body\")?e.redrawPosition():e._drawPosition(d,0,0,\"relative\",!1),t.wrap.parentNode!=v&&v.appendChild(t.wrap),e.setClass(d.targetElement,d.activeClass)}function a(){switch(e.getPadYComponent(d)){case\"s\":var t=1;break;case\"v\":var t=2}var n=Math.round(d.hsv[0]/360*(d.width-1)),r=Math.round((1-d.hsv[t]/100)*(d.height-1)),i=2*d.pointerBorderWidth+d.pointerThickness+2*d.crossSize,o=-Math.floor(i/2);e.picker.cross.style.left=n+o+\"px\",e.picker.cross.style.top=r+o+\"px\";switch(e.getSliderComponent(d)){case\"s\":var u=s(d.hsv[0],100,d.hsv[2]),a=s(d.hsv[0],0,d.hsv[2]),f=\"rgb(\"+Math.round(u[0])+\",\"+Math.round(u[1])+\",\"+Math.round(u[2])+\")\",l=\"rgb(\"+Math.round(a[0])+\",\"+Math.round(a[1])+\",\"+Math.round(a[2])+\")\";e.picker.sldGrad.draw(d.sliderSize,d.height,f,l);break;case\"v\":var c=s(d.hsv[0],d.hsv[1],100),f=\"rgb(\"+Math.round(c[0])+\",\"+Math.round(c[1])+\",\"+Math.round(c[2])+\")\",l=\"#000\";e.picker.sldGrad.draw(d.sliderSize,d.height,f,l)}}function f(){var t=e.getSliderComponent(d);if(t){switch(t){case\"s\":var n=1;break;case\"v\":var n=2}var r=Math.round((1-d.hsv[n]/100)*(d.height-1));e.picker.sldPtrOB.style.top=r-(2*d.pointerBorderWidth+d.pointerThickness)-Math.floor(m/2)+\"px\"}}function l(){return e.picker&&e.picker.owner===d}function c(){d.importColor()}this.value=null,this.valueElement=t,this.styleElement=t,this.required=!0,this.refine=!0,this.hash=!1,this.uppercase=!0,this.onFineChange=null,this.activeClass=\"jscolor-active\",this.minS=0,this.maxS=100,this.minV=0,this.maxV=100,this.hsv=[0,0,100],this.rgb=[255,255,255],this.width=181,this.height=101,this.showOnClick=!0,this.mode=\"HSV\",this.position=\"bottom\",this.smartPosition=!0,this.sliderSize=16,this.crossSize=8,this.closable=!1,this.closeText=\"Close\",this.buttonColor=\"#000000\",this.buttonHeight=18,this.padding=12,this.backgroundColor=\"#FFFFFF\",this.borderWidth=1,this.borderColor=\"#BBBBBB\",this.borderRadius=8,this.insetWidth=1,this.insetColor=\"#BBBBBB\",this.shadow=!0,this.shadowBlur=15,this.shadowColor=\"rgba(0,0,0,0.2)\",this.pointerColor=\"#4C4C4C\",this.pointerBorderColor=\"#FFFFFF\",this.pointerBorderWidth=1,this.pointerThickness=2,this.zIndex=1e3,this.container=null;for(var r in n)n.hasOwnProperty(r)&&(this[r]=n[r]);this.hide=function(){l()&&o()},this.show=function(){u()},this.redraw=function(){l()&&u()},this.importColor=function(){this.valueElement?e.isElementType(this.valueElement,\"input\")?this.refine?!this.required&&/^\\s*$/.test(this.valueElement.value)?(this.valueElement.value=\"\",this.styleElement&&(this.styleElement.style.backgroundImage=this.styleElement._jscOrigStyle.backgroundImage,this.styleElement.style.backgroundColor=this.styleElement._jscOrigStyle.backgroundColor,this.styleElement.style.color=this.styleElement._jscOrigStyle.color),this.exportColor(e.leaveValue|e.leaveStyle)):this.fromString(this.valueElement.value)||this.exportColor():this.fromString(this.valueElement.value,e.leaveValue)||(this.styleElement&&(this.styleElement.style.backgroundImage=this.styleElement._jscOrigStyle.backgroundImage,this.styleElement.style.backgroundColor=this.styleElement._jscOrigStyle.backgroundColor,this.styleElement.style.color=this.styleElement._jscOrigStyle.color),this.exportColor(e.leaveValue|e.leaveStyle)):this.exportColor():this.exportColor()},this.exportColor=function(t){if(!(t&e.leaveValue)&&this.valueElement){var n=this.toString();this.uppercase&&(n=n.toUpperCase()),this.hash&&(n=\"#\"+n),e.isElementType(this.valueElement,\"input\")?this.valueElement.value=n:this.valueElement.innerHTML=n}t&e.leaveStyle||this.styleElement&&(this.styleElement.style.backgroundImage=\"none\",this.styleElement.style.backgroundColor=\"#\"+this.toString(),this.styleElement.style.color=this.isLight()?\"#000\":\"#FFF\"),!(t&e.leavePad)&&l()&&a(),!(t&e.leaveSld)&&l()&&f()},this.fromHSV=function(e,t,n,r){if(e!==null){if(isNaN(e))return!1;e=Math.max(0,Math.min(360,e))}if(t!==null){if(isNaN(t))return!1;t=Math.max(0,Math.min(100,this.maxS,t),this.minS)}if(n!==null){if(isNaN(n))return!1;n=Math.max(0,Math.min(100,this.maxV,n),this.minV)}this.rgb=s(e===null?this.hsv[0]:this.hsv[0]=e,t===null?this.hsv[1]:this.hsv[1]=t,n===null?this.hsv[2]:this.hsv[2]=n),this.exportColor(r)},this.fromRGB=function(e,t,n,r){if(e!==null){if(isNaN(e))return!1;e=Math.max(0,Math.min(255,e))}if(t!==null){if(isNaN(t))return!1;t=Math.max(0,Math.min(255,t))}if(n!==null){if(isNaN(n))return!1;n=Math.max(0,Math.min(255,n))}var o=i(e===null?this.rgb[0]:e,t===null?this.rgb[1]:t,n===null?this.rgb[2]:n);o[0]!==null&&(this.hsv[0]=Math.max(0,Math.min(360,o[0]))),o[2]!==0&&(this.hsv[1]=o[1]===null?null:Math.max(0,this.minS,Math.min(100,this.maxS,o[1]))),this.hsv[2]=o[2]===null?null:Math.max(0,this.minV,Math.min(100,this.maxV,o[2]));var u=s(this.hsv[0],this.hsv[1],this.hsv[2]);this.rgb[0]=u[0],this.rgb[1]=u[1],this.rgb[2]=u[2],this.exportColor(r)},this.fromString=function(e,t){var n;if(n=e.match(/^\\W*([0-9A-F]{3}([0-9A-F]{3})?)\\W*$/i))return n[1].length===6?this.fromRGB(parseInt(n[1].substr(0,2),16),parseInt(n[1].substr(2,2),16),parseInt(n[1].substr(4,2),16),t):this.fromRGB(parseInt(n[1].charAt(0)+n[1].charAt(0),16),parseInt(n[1].charAt(1)+n[1].charAt(1),16),parseInt(n[1].charAt(2)+n[1].charAt(2),16),t),!0;if(n=e.match(/^\\W*rgba?\\(([^)]*)\\)\\W*$/i)){var r=n[1].split(\",\"),i=/^\\s*(\\d*)(\\.\\d+)?\\s*$/,s,o,u;if(r.length>=3&&(s=r[0].match(i))&&(o=r[1].match(i))&&(u=r[2].match(i))){var a=parseFloat((s[1]||\"0\")+(s[2]||\"\")),f=parseFloat((o[1]||\"0\")+(o[2]||\"\")),l=parseFloat((u[1]||\"0\")+(u[2]||\"\"));return this.fromRGB(a,f,l,t),!0}}return!1},this.toString=function(){return(256|Math.round(this.rgb[0])).toString(16).substr(1)+(256|Math.round(this.rgb[1])).toString(16).substr(1)+(256|Math.round(this.rgb[2])).toString(16).substr(1)},this.toHEXString=function(){return\"#\"+this.toString().toUpperCase()},this.toRGBString=function(){return\"rgb(\"+Math.round(this.rgb[0])+\",\"+Math.round(this.rgb[1])+\",\"+Math.round(this.rgb[2])+\")\"},this.isLight=function(){return.213*this.rgb[0]+.715*this.rgb[1]+.072*this.rgb[2]>127.5},this._processParentElementsInDOM=function(){if(this._linkedElementsProcessed)return;this._linkedElementsProcessed=!0;var t=this.targetElement;do{var n=e.getStyle(t);n&&n.position.toLowerCase()===\"fixed\"&&(this.fixed=!0),t!==this.targetElement&&(t._jscEventsAttached||(e.attachEvent(t,\"scroll\",e.onParentScroll),t._jscEventsAttached=!0))}while((t=t.parentNode)&&!e.isElementType(t,\"body\"))};if(typeof t==\"string\"){var h=t,p=document.getElementById(h);p?this.targetElement=p:e.warn(\"Could not find target element with ID '\"+h+\"'\")}else t?this.targetElement=t:e.warn(\"Invalid target element: '\"+t+\"'\");if(this.targetElement._jscLinkedInstance){e.warn(\"Cannot link jscolor twice to the same element. Skipping.\");return}this.targetElement._jscLinkedInstance=this,this.valueElement=e.fetchElement(this.valueElement),this.styleElement=e.fetchElement(this.styleElement);var d=this,v=this.container?e.fetchElement(this.container):document.getElementsByTagName(\"body\")[0],m=3;if(e.isElementType(this.targetElement,\"button\"))if(this.targetElement.onclick){var g=this.targetElement.onclick;this.targetElement.onclick=function(e){return g.call(this,e),!1}}else this.targetElement.onclick=function(){return!1};if(this.valueElement&&e.isElementType(this.valueElement,\"input\")){var y=function(){d.fromString(d.valueElement.value,e.leaveValue),e.dispatchFineChange(d)};e.attachEvent(this.valueElement,\"keyup\",y),e.attachEvent(this.valueElement,\"input\",y),e.attachEvent(this.valueElement,\"blur\",c),this.valueElement.setAttribute(\"autocomplete\",\"off\")}this.styleElement&&(this.styleElement._jscOrigStyle={backgroundImage:this.styleElement.style.backgroundImage,backgroundColor:this.styleElement.style.backgroundColor,color:this.styleElement.style.color}),this.value?this.fromString(this.value)||this.exportColor():this.importColor()}};return e.jscolor.lookupClass=\"jscolor\",e.jscolor.installByClassName=function(t){var n=document.getElementsByTagName(\"input\"),r=document.getElementsByTagName(\"button\");e.tryInstallOnElements(n,t),e.tryInstallOnElements(r,t)},e.register(),e.jscolor}());","UOL_PagSeguro/js/jquery.dataTables.min.js":"/*! DataTables 1.10.12\n * \u00c2\u00a92008-2015 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     1.10.12\n * @file        jquery.dataTables.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2008-2015 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\n\n(function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === 'function' && define.amd ) {\n        // AMD\n        define( ['jquery'], function ( $ ) {\n            return factory( $, window, document );\n        } );\n    }\n    else if ( typeof exports === 'object' ) {\n        // CommonJS\n        module.exports = function (root, $) {\n            if ( ! root ) {\n                // CommonJS environments without a window global must pass a\n                // root. This will give an error otherwise\n                root = window;\n            }\n\n            if ( ! $ ) {\n                $ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window\n                    require('jquery') :\n                    require('jquery')( root );\n            }\n\n            return factory( $, root, root.document );\n        };\n    }\n    else {\n        // Browser\n        factory( jQuery, window, document );\n    }\n}\n(function( $, window, document, undefined ) {\n    \"use strict\";\n\n    /**\n     * DataTables is a plug-in for the jQuery Javascript library. It is a highly\n     * flexible tool, based upon the foundations of progressive enhancement,\n     * which will add advanced interaction controls to any HTML table. For a\n     * full list of features please refer to\n     * [DataTables.net](href=\"http://datatables.net).\n     *\n     * Note that the `DataTable` object is not a global variable but is aliased\n     * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\n     * be  accessed.\n     *\n     *  @class\n     *  @param {object} [init={}] Configuration object for DataTables. Options\n     *    are defined by {@link DataTable.defaults}\n     *  @requires jQuery 1.7+\n     *\n     *  @example\n     *    // Basic initialisation\n     *    $(document).ready( function {\n\t *      $('#example').dataTable();\n\t *    } );\n     *\n     *  @example\n     *    // Initialisation with configuration options - in this case, disable\n     *    // pagination and sorting.\n     *    $(document).ready( function {\n\t *      $('#example').dataTable( {\n\t *        \"paginate\": false,\n\t *        \"sort\": false\n\t *      } );\n\t *    } );\n     */\n    var DataTable = function ( options )\n    {\n        /**\n         * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n         * return the resulting jQuery object.\n         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n         *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n         *    criterion (\"applied\") or all TR elements (i.e. no filter).\n         *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n         *    Can be either 'current', whereby the current sorting of the table is used, or\n         *    'original' whereby the original order the data was read into the table is used.\n         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n         *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n         *    'current' and filter is 'applied', regardless of what they might be given as.\n         *  @returns {object} jQuery object, filtered by the given selector.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Highlight every second row\n\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n\t\t *    } );\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then\n\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.\n\t\t *      oTable.fnFilter('Webkit');\n\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n\t\t *      oTable.fnFilter('');\n\t\t *    } );\n         */\n        this.$ = function ( sSelector, oOpts )\n        {\n            return this.api(true).$( sSelector, oOpts );\n        };\n\n\n        /**\n         * Almost identical to $ in operation, but in this case returns the data for the matched\n         * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n         * rather than any descendants, so the data can be obtained for the row/cell. If matching\n         * rows are found, the data returned is the original data array/object that was used to\n         * create the row (or a generated array if from a DOM source).\n         *\n         * This method is often useful in-combination with $ where both functions are given the\n         * same parameters and the array indexes will match identically.\n         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n         *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n         *    criterion (\"applied\") or all elements (i.e. no filter).\n         *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n         *    Can be either 'current', whereby the current sorting of the table is used, or\n         *    'original' whereby the original order the data was read into the table is used.\n         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n         *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n         *    'current' and filter is 'applied', regardless of what they might be given as.\n         *  @returns {array} Data for the matched elements. If any elements, as a result of the\n         *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n         *    entry in the array.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Get the data from the first row in the table\n\t\t *      var data = oTable._('tr:first');\n\t\t *\n\t\t *      // Do something useful with the data\n\t\t *      alert( \"First cell is: \"+data[0] );\n\t\t *    } );\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Filter to 'Webkit' and get all data for\n\t\t *      oTable.fnFilter('Webkit');\n\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});\n\t\t *\n\t\t *      // Do something with the data\n\t\t *      alert( data.length+\" rows matched the search\" );\n\t\t *    } );\n         */\n        this._ = function ( sSelector, oOpts )\n        {\n            return this.api(true).rows( sSelector, oOpts ).data();\n        };\n\n\n        /**\n         * Create a DataTables Api instance, with the currently selected tables for\n         * the Api's context.\n         * @param {boolean} [traditional=false] Set the API instance's context to be\n         *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n         *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n         *   or if all tables captured in the jQuery object should be used.\n         * @return {DataTables.Api}\n         */\n        this.api = function ( traditional )\n        {\n            return traditional ?\n                new _Api(\n                    _fnSettingsFromNode( this[ _ext.iApiIndex ] )\n                ) :\n                new _Api( this );\n        };\n\n\n        /**\n         * Add a single new row or multiple rows of data to the table. Please note\n         * that this is suitable for client-side processing only - if you are using\n         * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n         * must add it to the data source, i.e. the server-side, through an Ajax call.\n         *  @param {array|object} data The data to be added to the table. This can be:\n         *    <ul>\n         *      <li>1D array of data - add a single row with the data provided</li>\n         *      <li>2D array of arrays - add multiple rows in a single call</li>\n         *      <li>object - data object when using <i>mData</i></li>\n         *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n         *    </ul>\n         *  @param {bool} [redraw=true] redraw the table or not\n         *  @returns {array} An array of integers, representing the list of indexes in\n         *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n         *    the table.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    // Global var for counter\n         *    var giCount = 2;\n         *\n         *    $(document).ready(function() {\n\t\t *      $('#example').dataTable();\n\t\t *    } );\n         *\n         *    function fnClickAddRow() {\n\t\t *      $('#example').dataTable().fnAddData( [\n\t\t *        giCount+\".1\",\n\t\t *        giCount+\".2\",\n\t\t *        giCount+\".3\",\n\t\t *        giCount+\".4\" ]\n\t\t *      );\n\t\t *\n\t\t *      giCount++;\n\t\t *    }\n         */\n        this.fnAddData = function( data, redraw )\n        {\n            var api = this.api( true );\n\n            /* Check if we want to add multiple rows or not */\n            var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\n                api.rows.add( data ) :\n                api.row.add( data );\n\n            if ( redraw === undefined || redraw ) {\n                api.draw();\n            }\n\n            return rows.flatten().toArray();\n        };\n\n\n        /**\n         * This function will make DataTables recalculate the column sizes, based on the data\n         * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n         * through the sWidth parameter). This can be useful when the width of the table's\n         * parent element changes (for example a window resize).\n         *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable( {\n\t\t *        \"sScrollY\": \"200px\",\n\t\t *        \"bPaginate\": false\n\t\t *      } );\n\t\t *\n\t\t *      $(window).bind('resize', function () {\n\t\t *        oTable.fnAdjustColumnSizing();\n\t\t *      } );\n\t\t *    } );\n         */\n        this.fnAdjustColumnSizing = function ( bRedraw )\n        {\n            var api = this.api( true ).columns.adjust();\n            var settings = api.settings()[0];\n            var scroll = settings.oScroll;\n\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw( false );\n            }\n            else if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\n                /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n                _fnScrollDraw( settings );\n            }\n        };\n\n\n        /**\n         * Quickly and simply clear a table\n         *  @param {bool} [bRedraw=true] redraw the table or not\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n\t\t *      oTable.fnClearTable();\n\t\t *    } );\n         */\n        this.fnClearTable = function( bRedraw )\n        {\n            var api = this.api( true ).clear();\n\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw();\n            }\n        };\n\n\n        /**\n         * The exact opposite of 'opening' a row, this function will close any rows which\n         * are currently 'open'.\n         *  @param {node} nTr the table row to 'close'\n         *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n         */\n        this.fnClose = function( nTr )\n        {\n            this.api( true ).row( nTr ).child.hide();\n        };\n\n\n        /**\n         * Remove a row for the table\n         *  @param {mixed} target The index of the row from aoData to be deleted, or\n         *    the TR element you want to delete\n         *  @param {function|null} [callBack] Callback function\n         *  @param {bool} [redraw=true] Redraw the table or not\n         *  @returns {array} The row that was deleted\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Immediately remove the first row\n\t\t *      oTable.fnDeleteRow( 0 );\n\t\t *    } );\n         */\n        this.fnDeleteRow = function( target, callback, redraw )\n        {\n            var api = this.api( true );\n            var rows = api.rows( target );\n            var settings = rows.settings()[0];\n            var data = settings.aoData[ rows[0][0] ];\n\n            rows.remove();\n\n            if ( callback ) {\n                callback.call( this, settings, data );\n            }\n\n            if ( redraw === undefined || redraw ) {\n                api.draw();\n            }\n\n            return data;\n        };\n\n\n        /**\n         * Restore the table to it's original state in the DOM by removing all of DataTables\n         * enhancements, alterations to the DOM structure of the table and event listeners.\n         *  @param {boolean} [remove=false] Completely remove the table from the DOM\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnDestroy();\n\t\t *    } );\n         */\n        this.fnDestroy = function ( remove )\n        {\n            this.api( true ).destroy( remove );\n        };\n\n\n        /**\n         * Redraw the table\n         *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n\t\t *      oTable.fnDraw();\n\t\t *    } );\n         */\n        this.fnDraw = function( complete )\n        {\n            // Note that this isn't an exact match to the old call to _fnDraw - it takes\n            // into account the new data, but can hold position.\n            this.api( true ).draw( complete );\n        };\n\n\n        /**\n         * Filter the input based on data\n         *  @param {string} sInput String to filter the table on\n         *  @param {int|null} [iColumn] Column to limit filtering to\n         *  @param {bool} [bRegex=false] Treat as regular expression or not\n         *  @param {bool} [bSmart=true] Perform smart filtering or not\n         *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n         *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sometime later - filter...\n\t\t *      oTable.fnFilter( 'test string' );\n\t\t *    } );\n         */\n        this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\n        {\n            var api = this.api( true );\n\n            if ( iColumn === null || iColumn === undefined ) {\n                api.search( sInput, bRegex, bSmart, bCaseInsensitive );\n            }\n            else {\n                api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\n            }\n\n            api.draw();\n        };\n\n\n        /**\n         * Get the data for the whole table, an individual row or an individual cell based on the\n         * provided parameters.\n         *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n         *    a TR node then the data source for the whole row will be returned. If given as a\n         *    TD/TH cell node then iCol will be automatically calculated and the data for the\n         *    cell returned. If given as an integer, then this is treated as the aoData internal\n         *    data index for the row (see fnGetPosition) and the data for that row used.\n         *  @param {int} [col] Optional column index that you want the data of.\n         *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n         *    returned. If mRow is defined, just data for that row, and is iCol is\n         *    defined, only data for the designated cell is returned.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    // Row data\n         *    $(document).ready(function() {\n\t\t *      oTable = $('#example').dataTable();\n\t\t *\n\t\t *      oTable.$('tr').click( function () {\n\t\t *        var data = oTable.fnGetData( this );\n\t\t *        // ... do something with the array / object of data for the row\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Individual cell data\n         *    $(document).ready(function() {\n\t\t *      oTable = $('#example').dataTable();\n\t\t *\n\t\t *      oTable.$('td').click( function () {\n\t\t *        var sData = oTable.fnGetData( this );\n\t\t *        alert( 'The cell clicked on had the value of '+sData );\n\t\t *      } );\n\t\t *    } );\n         */\n        this.fnGetData = function( src, col )\n        {\n            var api = this.api( true );\n\n            if ( src !== undefined ) {\n                var type = src.nodeName ? src.nodeName.toLowerCase() : '';\n\n                return col !== undefined || type == 'td' || type == 'th' ?\n                    api.cell( src, col ).data() :\n                api.row( src ).data() || null;\n            }\n\n            return api.data().toArray();\n        };\n\n\n        /**\n         * Get an array of the TR nodes that are used in the table's body. Note that you will\n         * typically want to use the '$' API method in preference to this as it is more\n         * flexible.\n         *  @param {int} [iRow] Optional row index for the TR element you want\n         *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n         *    in the table's body, or iRow is defined, just the TR element requested.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Get the nodes from the table\n\t\t *      var nNodes = oTable.fnGetNodes( );\n\t\t *    } );\n         */\n        this.fnGetNodes = function( iRow )\n        {\n            var api = this.api( true );\n\n            return iRow !== undefined ?\n                api.row( iRow ).node() :\n                api.rows().nodes().flatten().toArray();\n        };\n\n\n        /**\n         * Get the array indexes of a particular cell from it's DOM element\n         * and column index including hidden columns\n         *  @param {node} node this can either be a TR, TD or TH in the table's body\n         *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n         *    if given as a cell, an array of [row index, column index (visible),\n         *    column index (all)] is given.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      $('#example tbody td').click( function () {\n\t\t *        // Get the position of the current data from the node\n\t\t *        var aPos = oTable.fnGetPosition( this );\n\t\t *\n\t\t *        // Get the data array for this row\n\t\t *        var aData = oTable.fnGetData( aPos[0] );\n\t\t *\n\t\t *        // Update the data array and return the value\n\t\t *        aData[ aPos[1] ] = 'clicked';\n\t\t *        this.innerHTML = 'clicked';\n\t\t *      } );\n\t\t *\n\t\t *      // Init DataTables\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n         */\n        this.fnGetPosition = function( node )\n        {\n            var api = this.api( true );\n            var nodeName = node.nodeName.toUpperCase();\n\n            if ( nodeName == 'TR' ) {\n                return api.row( node ).index();\n            }\n            else if ( nodeName == 'TD' || nodeName == 'TH' ) {\n                var cell = api.cell( node ).index();\n\n                return [\n                    cell.row,\n                    cell.columnVisible,\n                    cell.column\n                ];\n            }\n            return null;\n        };\n\n\n        /**\n         * Check to see if a row is 'open' or not.\n         *  @param {node} nTr the table row to check\n         *  @returns {boolean} true if the row is currently open, false otherwise\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n         */\n        this.fnIsOpen = function( nTr )\n        {\n            return this.api( true ).row( nTr ).child.isShown();\n        };\n\n\n        /**\n         * This function will place a new row directly after a row which is currently\n         * on display on the page, with the HTML contents that is passed into the\n         * function. This can be used, for example, to ask for confirmation that a\n         * particular record should be deleted.\n         *  @param {node} nTr The table row to 'open'\n         *  @param {string|node|jQuery} mHtml The HTML to put into the row\n         *  @param {string} sClass Class to give the new TD cell\n         *  @returns {node} The row opened. Note that if the table row passed in as the\n         *    first parameter, is not found in the table, this method will silently\n         *    return.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n         */\n        this.fnOpen = function( nTr, mHtml, sClass )\n        {\n            return this.api( true )\n                .row( nTr )\n                .child( mHtml, sClass )\n                .show()\n                .child()[0];\n        };\n\n\n        /**\n         * Change the pagination - provides the internal logic for pagination in a simple API\n         * function. With this function you can have a DataTables table go to the next,\n         * previous, first or last pages.\n         *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n         *    or page number to jump to (integer), note that page 0 is the first page.\n         *  @param {bool} [bRedraw=true] Redraw the table or not\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnPageChange( 'next' );\n\t\t *    } );\n         */\n        this.fnPageChange = function ( mAction, bRedraw )\n        {\n            var api = this.api( true ).page( mAction );\n\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw(false);\n            }\n        };\n\n\n        /**\n         * Show a particular column\n         *  @param {int} iCol The column whose display should be changed\n         *  @param {bool} bShow Show (true) or hide (false) the column\n         *  @param {bool} [bRedraw=true] Redraw the table or not\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Hide the second column after initialisation\n\t\t *      oTable.fnSetColumnVis( 1, false );\n\t\t *    } );\n         */\n        this.fnSetColumnVis = function ( iCol, bShow, bRedraw )\n        {\n            var api = this.api( true ).column( iCol ).visible( bShow );\n\n            if ( bRedraw === undefined || bRedraw ) {\n                api.columns.adjust().draw();\n            }\n        };\n\n\n        /**\n         * Get the settings for a particular table for external manipulation\n         *  @returns {object} DataTables settings object. See\n         *    {@link DataTable.models.oSettings}\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      var oSettings = oTable.fnSettings();\n\t\t *\n\t\t *      // Show an example parameter from the settings\n\t\t *      alert( oSettings._iDisplayStart );\n\t\t *    } );\n         */\n        this.fnSettings = function()\n        {\n            return _fnSettingsFromNode( this[_ext.iApiIndex] );\n        };\n\n\n        /**\n         * Sort the table by a particular column\n         *  @param {int} iCol the data index to sort on. Note that this will not match the\n         *    'display index' if you have hidden data entries\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sort immediately with columns 0 and 1\n\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n\t\t *    } );\n         */\n        this.fnSort = function( aaSort )\n        {\n            this.api( true ).order( aaSort ).draw();\n        };\n\n\n        /**\n         * Attach a sort listener to an element for a given column\n         *  @param {node} nNode the element to attach the sort listener to\n         *  @param {int} iColumn the column that a click on this node will sort on\n         *  @param {function} [fnCallback] callback function when sort is run\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sort on column 1, when 'sorter' is clicked on\n\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n\t\t *    } );\n         */\n        this.fnSortListener = function( nNode, iColumn, fnCallback )\n        {\n            this.api( true ).order.listener( nNode, iColumn, fnCallback );\n        };\n\n\n        /**\n         * Update a table cell or row - this method will accept either a single value to\n         * update the cell with, an array of values with one element for each column or\n         * an object in the same format as the original data source. The function is\n         * self-referencing in order to make the multi column updates easier.\n         *  @param {object|array|string} mData Data to update the cell/row with\n         *  @param {node|int} mRow TR element you want to update or the aoData index\n         *  @param {int} [iColumn] The column to update, give as null or undefined to\n         *    update a whole row.\n         *  @param {bool} [bRedraw=true] Redraw the table or not\n         *  @param {bool} [bAction=true] Perform pre-draw actions or not\n         *  @returns {int} 0 on success, 1 on error\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n\t\t *    } );\n         */\n        this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\n        {\n            var api = this.api( true );\n\n            if ( iColumn === undefined || iColumn === null ) {\n                api.row( mRow ).data( mData );\n            }\n            else {\n                api.cell( mRow, iColumn ).data( mData );\n            }\n\n            if ( bAction === undefined || bAction ) {\n                api.columns.adjust();\n            }\n\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw();\n            }\n            return 0;\n        };\n\n\n        /**\n         * Provide a common method for plug-ins to check the version of DataTables being used, in order\n         * to ensure compatibility.\n         *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n         *    formats \"X\" and \"X.Y\" are also acceptable.\n         *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n         *    version, or false if this version of DataTales is not suitable\n         *  @method\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n\t\t *    } );\n         */\n        this.fnVersionCheck = _ext.fnVersionCheck;\n\n\n        var _that = this;\n        var emptyInit = options === undefined;\n        var len = this.length;\n\n        if ( emptyInit ) {\n            options = {};\n        }\n\n        this.oApi = this.internal = _ext.internal;\n\n        // Extend with old style plug-in API methods\n        for ( var fn in DataTable.ext.internal ) {\n            if ( fn ) {\n                this[fn] = _fnExternApiFunc(fn);\n            }\n        }\n\n        this.each(function() {\n            // For each initialisation we want to give it a clean initialisation\n            // object that can be bashed around\n            var o = {};\n            var oInit = len > 1 ? // optimisation for single table case\n                _fnExtend( o, options, true ) :\n                options;\n\n            /*global oInit,_that,emptyInit*/\n            var i=0, iLen, j, jLen, k, kLen;\n            var sId = this.getAttribute( 'id' );\n            var bInitHandedOff = false;\n            var defaults = DataTable.defaults;\n            var $this = $(this);\n\n\n            /* Sanity check */\n            if ( this.nodeName.toLowerCase() != 'table' )\n            {\n                _fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\n                return;\n            }\n\n            /* Backwards compatibility for the defaults */\n            _fnCompatOpts( defaults );\n            _fnCompatCols( defaults.column );\n\n            /* Convert the camel-case defaults to Hungarian */\n            _fnCamelToHungarian( defaults, defaults, true );\n            _fnCamelToHungarian( defaults.column, defaults.column, true );\n\n            /* Setting up the initialisation object */\n            _fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );\n\n\n\n            /* Check to see if we are re-initialising a table */\n            var allSettings = DataTable.settings;\n            for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\n            {\n                var s = allSettings[i];\n\n                /* Base check on table node */\n                if ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )\n                {\n                    var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n                    var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\n                    if ( emptyInit || bRetrieve )\n                    {\n                        return s.oInstance;\n                    }\n                    else if ( bDestroy )\n                    {\n                        s.oInstance.fnDestroy();\n                        break;\n                    }\n                    else\n                    {\n                        _fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\n                        return;\n                    }\n                }\n\n                /* If the element we are initialising has the same ID as a table which was previously\n                 * initialised, but the table nodes don't match (from before) then we destroy the old\n                 * instance by simply deleting it. This is under the assumption that the table has been\n                 * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n                 */\n                if ( s.sTableId == this.id )\n                {\n                    allSettings.splice( i, 1 );\n                    break;\n                }\n            }\n\n            /* Ensure the table has an ID - required for accessibility */\n            if ( sId === null || sId === \"\" )\n            {\n                sId = \"DataTables_Table_\"+(DataTable.ext._unique++);\n                this.id = sId;\n            }\n\n            /* Create the settings object for this table and set some of the default parameters */\n            var oSettings = $.extend( true, {}, DataTable.models.oSettings, {\n                \"sDestroyWidth\": $this[0].style.width,\n                \"sInstance\":     sId,\n                \"sTableId\":      sId\n            } );\n            oSettings.nTable = this;\n            oSettings.oApi   = _that.internal;\n            oSettings.oInit  = oInit;\n\n            allSettings.push( oSettings );\n\n            // Need to add the instance after the instance after the settings object has been added\n            // to the settings array, so we can self reference the table instance if more than one\n            oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\n\n            // Backwards compatibility, before we apply all the defaults\n            _fnCompatOpts( oInit );\n\n            if ( oInit.oLanguage )\n            {\n                _fnLanguageCompat( oInit.oLanguage );\n            }\n\n            // If the length menu is given, but the init display length is not, use the length menu\n            if ( oInit.aLengthMenu && ! oInit.iDisplayLength )\n            {\n                oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\n                    oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n            }\n\n            // Apply the defaults and init options to make a single init object will all\n            // options defined from defaults and instance options.\n            oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\n\n\n            // Map the initialisation options onto the settings object\n            _fnMap( oSettings.oFeatures, oInit, [\n                \"bPaginate\",\n                \"bLengthChange\",\n                \"bFilter\",\n                \"bSort\",\n                \"bSortMulti\",\n                \"bInfo\",\n                \"bProcessing\",\n                \"bAutoWidth\",\n                \"bSortClasses\",\n                \"bServerSide\",\n                \"bDeferRender\"\n            ] );\n            _fnMap( oSettings, oInit, [\n                \"asStripeClasses\",\n                \"ajax\",\n                \"fnServerData\",\n                \"fnFormatNumber\",\n                \"sServerMethod\",\n                \"aaSorting\",\n                \"aaSortingFixed\",\n                \"aLengthMenu\",\n                \"sPaginationType\",\n                \"sAjaxSource\",\n                \"sAjaxDataProp\",\n                \"iStateDuration\",\n                \"sDom\",\n                \"bSortCellsTop\",\n                \"iTabIndex\",\n                \"fnStateLoadCallback\",\n                \"fnStateSaveCallback\",\n                \"renderer\",\n                \"searchDelay\",\n                \"rowId\",\n                [ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\n                [ \"oSearch\", \"oPreviousSearch\" ],\n                [ \"aoSearchCols\", \"aoPreSearchCols\" ],\n                [ \"iDisplayLength\", \"_iDisplayLength\" ],\n                [ \"bJQueryUI\", \"bJUI\" ]\n            ] );\n            _fnMap( oSettings.oScroll, oInit, [\n                [ \"sScrollX\", \"sX\" ],\n                [ \"sScrollXInner\", \"sXInner\" ],\n                [ \"sScrollY\", \"sY\" ],\n                [ \"bScrollCollapse\", \"bCollapse\" ]\n            ] );\n            _fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\n\n            /* Callback functions which are array driven */\n            _fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\n            _fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\n            _fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\n            _fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\n            _fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\n            _fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\n            _fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\n            _fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\n            _fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\n            _fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\n            _fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\n\n            oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );\n\n            /* Browser support detection */\n            _fnBrowserDetect( oSettings );\n\n            var oClasses = oSettings.oClasses;\n\n            // @todo Remove in 1.11\n            if ( oInit.bJQueryUI )\n            {\n                /* Use the JUI classes object for display. You could clone the oStdClasses object if\n                 * you want to have multiple tables with multiple independent classes\n                 */\n                $.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );\n\n                if ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )\n                {\n                    /* Set the DOM to use a layout suitable for jQuery UI's theming */\n                    oSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';\n                }\n\n                if ( ! oSettings.renderer ) {\n                    oSettings.renderer = 'jqueryui';\n                }\n                else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {\n                    oSettings.renderer.header = 'jqueryui';\n                }\n            }\n            else\n            {\n                $.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\n            }\n            $this.addClass( oClasses.sTable );\n\n\n            if ( oSettings.iInitDisplayStart === undefined )\n            {\n                /* Display start point, taking into account the save saving */\n                oSettings.iInitDisplayStart = oInit.iDisplayStart;\n                oSettings._iDisplayStart = oInit.iDisplayStart;\n            }\n\n            if ( oInit.iDeferLoading !== null )\n            {\n                oSettings.bDeferLoading = true;\n                var tmp = $.isArray( oInit.iDeferLoading );\n                oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n                oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n            }\n\n            /* Language definitions */\n            var oLanguage = oSettings.oLanguage;\n            $.extend( true, oLanguage, oInit.oLanguage );\n\n            if ( oLanguage.sUrl !== \"\" )\n            {\n                /* Get the language definitions from a file - because this Ajax call makes the language\n                 * get async to the remainder of this function we use bInitHandedOff to indicate that\n                 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n                 */\n                $.ajax( {\n                    dataType: 'json',\n                    url: oLanguage.sUrl,\n                    success: function ( json ) {\n                        _fnLanguageCompat( json );\n                        _fnCamelToHungarian( defaults.oLanguage, json );\n                        $.extend( true, oLanguage, json );\n                        _fnInitialise( oSettings );\n                    },\n                    error: function () {\n                        // Error occurred loading language file, continue on as best we can\n                        _fnInitialise( oSettings );\n                    }\n                } );\n                bInitHandedOff = true;\n            }\n\n            /*\n             * Stripes\n             */\n            if ( oInit.asStripeClasses === null )\n            {\n                oSettings.asStripeClasses =[\n                    oClasses.sStripeOdd,\n                    oClasses.sStripeEven\n                ];\n            }\n\n            /* Remove row stripe classes if they are already on the table row */\n            var stripeClasses = oSettings.asStripeClasses;\n            var rowOne = $this.children('tbody').find('tr').eq(0);\n            if ( $.inArray( true, $.map( stripeClasses, function(el, i) {\n                    return rowOne.hasClass(el);\n                } ) ) !== -1 ) {\n                $('tbody tr', this).removeClass( stripeClasses.join(' ') );\n                oSettings.asDestroyStripes = stripeClasses.slice();\n            }\n\n            /*\n             * Columns\n             * See if we should load columns automatically or use defined ones\n             */\n            var anThs = [];\n            var aoColumnsInit;\n            var nThead = this.getElementsByTagName('thead');\n            if ( nThead.length !== 0 )\n            {\n                _fnDetectHeader( oSettings.aoHeader, nThead[0] );\n                anThs = _fnGetUniqueThs( oSettings );\n            }\n\n            /* If not given a column array, generate one with nulls */\n            if ( oInit.aoColumns === null )\n            {\n                aoColumnsInit = [];\n                for ( i=0, iLen=anThs.length ; i<iLen ; i++ )\n                {\n                    aoColumnsInit.push( null );\n                }\n            }\n            else\n            {\n                aoColumnsInit = oInit.aoColumns;\n            }\n\n            /* Add the columns */\n            for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\n            {\n                _fnAddColumn( oSettings, anThs ? anThs[i] : null );\n            }\n\n            /* Apply the column definitions */\n            _fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n                _fnColumnOptions( oSettings, iCol, oDef );\n            } );\n\n            /* HTML5 attribute detection - build an mData object automatically if the\n             * attributes are found\n             */\n            if ( rowOne.length ) {\n                var a = function ( cell, name ) {\n                    return cell.getAttribute( 'data-'+name ) !== null ? name : null;\n                };\n\n                $( rowOne[0] ).children('th, td').each( function (i, cell) {\n                    var col = oSettings.aoColumns[i];\n\n                    if ( col.mData === i ) {\n                        var sort = a( cell, 'sort' ) || a( cell, 'order' );\n                        var filter = a( cell, 'filter' ) || a( cell, 'search' );\n\n                        if ( sort !== null || filter !== null ) {\n                            col.mData = {\n                                _:      i+'.display',\n                                sort:   sort !== null   ? i+'.@data-'+sort   : undefined,\n                                type:   sort !== null   ? i+'.@data-'+sort   : undefined,\n                                filter: filter !== null ? i+'.@data-'+filter : undefined\n                            };\n\n                            _fnColumnOptions( oSettings, i );\n                        }\n                    }\n                } );\n            }\n\n            var features = oSettings.oFeatures;\n\n            /* Must be done after everything which can be overridden by the state saving! */\n            if ( oInit.bStateSave )\n            {\n                features.bStateSave = true;\n                _fnLoadState( oSettings, oInit );\n                _fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\n            }\n\n\n            /*\n             * Sorting\n             * @todo For modularisation (1.11) this needs to do into a sort start up handler\n             */\n\n            // If aaSorting is not defined, then we use the first indicator in asSorting\n            // in case that has been altered, so the default sort reflects that option\n            if ( oInit.aaSorting === undefined )\n            {\n                var sorting = oSettings.aaSorting;\n                for ( i=0, iLen=sorting.length ; i<iLen ; i++ )\n                {\n                    sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\n                }\n            }\n\n            /* Do a first pass on the sorting classes (allows any size changes to be taken into\n             * account, and also will apply sorting disabled classes if disabled\n             */\n            _fnSortingClasses( oSettings );\n\n            if ( features.bSort )\n            {\n                _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n                    if ( oSettings.bSorted ) {\n                        var aSort = _fnSortFlatten( oSettings );\n                        var sortedColumns = {};\n\n                        $.each( aSort, function (i, val) {\n                            sortedColumns[ val.src ] = val.dir;\n                        } );\n\n                        _fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\n                        _fnSortAria( oSettings );\n                    }\n                } );\n            }\n\n            _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n                if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\n                    _fnSortingClasses( oSettings );\n                }\n            }, 'sc' );\n\n\n            /*\n             * Final init\n             * Cache the header, body and footer as required, creating them if needed\n             */\n\n            // Work around for Webkit bug 83867 - store the caption-side before removing from doc\n            var captions = $this.children('caption').each( function () {\n                this._captionSide = $this.css('caption-side');\n            } );\n\n            var thead = $this.children('thead');\n            if ( thead.length === 0 )\n            {\n                thead = $('<thead/>').appendTo(this);\n            }\n            oSettings.nTHead = thead[0];\n\n            var tbody = $this.children('tbody');\n            if ( tbody.length === 0 )\n            {\n                tbody = $('<tbody/>').appendTo(this);\n            }\n            oSettings.nTBody = tbody[0];\n\n            var tfoot = $this.children('tfoot');\n            if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") )\n            {\n                // If we are a scrolling table, and no footer has been given, then we need to create\n                // a tfoot element for the caption element to be appended to\n                tfoot = $('<tfoot/>').appendTo(this);\n            }\n\n            if ( tfoot.length === 0 || tfoot.children().length === 0 ) {\n                $this.addClass( oClasses.sNoFooter );\n            }\n            else if ( tfoot.length > 0 ) {\n                oSettings.nTFoot = tfoot[0];\n                _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\n            }\n\n            /* Check if there is data passing into the constructor */\n            if ( oInit.aaData )\n            {\n                for ( i=0 ; i<oInit.aaData.length ; i++ )\n                {\n                    _fnAddData( oSettings, oInit.aaData[ i ] );\n                }\n            }\n            else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' )\n            {\n                /* Grab the data from the page - only do this when deferred loading or no Ajax\n                 * source since there is no point in reading the DOM data if we are then going\n                 * to replace it with Ajax data\n                 */\n                _fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\n            }\n\n            /* Copy the data index array */\n            oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n\n            /* Initialisation complete - table can be drawn */\n            oSettings.bInitialised = true;\n\n            /* Check if we need to initialise the table (it might not have been handed off to the\n             * language processor)\n             */\n            if ( bInitHandedOff === false )\n            {\n                _fnInitialise( oSettings );\n            }\n        } );\n        _that = null;\n        return this;\n    };\n\n\n    /*\n     * It is useful to have variables which are scoped locally so only the\n     * DataTables functions can access them and they don't leak into global space.\n     * At the same time these functions are often useful over multiple files in the\n     * core and API, so we list, or at least document, all variables which are used\n     * by DataTables as private variables here. This also ensures that there is no\n     * clashing of variable names and that they can easily referenced for reuse.\n     */\n\n\n    // Defined else where\n    //  _selector_run\n    //  _selector_opts\n    //  _selector_first\n    //  _selector_row_indexes\n\n    var _ext; // DataTable.ext\n    var _Api; // DataTable.Api\n    var _api_register; // DataTable.Api.register\n    var _api_registerPlural; // DataTable.Api.registerPlural\n\n    var _re_dic = {};\n    var _re_new_lines = /[\\r\\n]/g;\n    var _re_html = /<.*?>/g;\n    var _re_date_start = /^[\\w\\+\\-]/;\n    var _re_date_end = /[\\w\\+\\-]$/;\n\n    // Escape regular expression special characters\n    var _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\n\n    // http://en.wikipedia.org/wiki/Foreign_exchange_market\n    // - \\u20BD - Russian ruble.\n    // - \\u20a9 - South Korean Won\n    // - \\u20BA - Turkish Lira\n    // - \\u20B9 - Indian Rupee\n    // - R - Brazil (R$) and South Africa\n    // - fr - Swiss Franc\n    // - kr - Swedish krona, Norwegian krone and Danish krone\n    // - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n    //   standards as thousands separators.\n    var _re_formatted_numeric = /[',$\u00c2\u00a3\u00e2\u201a\u00ac\u00c2\u00a5%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfk]/gi;\n\n\n    var _empty = function ( d ) {\n        return !d || d === true || d === '-' ? true : false;\n    };\n\n\n    var _intVal = function ( s ) {\n        var integer = parseInt( s, 10 );\n        return !isNaN(integer) && isFinite(s) ? integer : null;\n    };\n\n    // Convert from a formatted number with characters other than `.` as the\n    // decimal place, to a Javascript number\n    var _numToDecimal = function ( num, decimalPoint ) {\n        // Cache created regular expressions for speed as this function is called often\n        if ( ! _re_dic[ decimalPoint ] ) {\n            _re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\n        }\n        return typeof num === 'string' && decimalPoint !== '.' ?\n            num.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\n            num;\n    };\n\n\n    var _isNumber = function ( d, decimalPoint, formatted ) {\n        var strType = typeof d === 'string';\n\n        // If empty return immediately so there must be a number if it is a\n        // formatted string (this stops the string \"k\", or \"kr\", etc being detected\n        // as a formatted number for currency\n        if ( _empty( d ) ) {\n            return true;\n        }\n\n        if ( decimalPoint && strType ) {\n            d = _numToDecimal( d, decimalPoint );\n        }\n\n        if ( formatted && strType ) {\n            d = d.replace( _re_formatted_numeric, '' );\n        }\n\n        return !isNaN( parseFloat(d) ) && isFinite( d );\n    };\n\n\n    // A string without HTML in it can be considered to be HTML still\n    var _isHtml = function ( d ) {\n        return _empty( d ) || typeof d === 'string';\n    };\n\n\n    var _htmlNumeric = function ( d, decimalPoint, formatted ) {\n        if ( _empty( d ) ) {\n            return true;\n        }\n\n        var html = _isHtml( d );\n        return ! html ?\n            null :\n            _isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\n                true :\n                null;\n    };\n\n\n    var _pluck = function ( a, prop, prop2 ) {\n        var out = [];\n        var i=0, ien=a.length;\n\n        // Could have the test in the loop for slightly smaller code, but speed\n        // is essential here\n        if ( prop2 !== undefined ) {\n            for ( ; i<ien ; i++ ) {\n                if ( a[i] && a[i][ prop ] ) {\n                    out.push( a[i][ prop ][ prop2 ] );\n                }\n            }\n        }\n        else {\n            for ( ; i<ien ; i++ ) {\n                if ( a[i] ) {\n                    out.push( a[i][ prop ] );\n                }\n            }\n        }\n\n        return out;\n    };\n\n\n    // Basically the same as _pluck, but rather than looping over `a` we use `order`\n    // as the indexes to pick from `a`\n    var _pluck_order = function ( a, order, prop, prop2 )\n    {\n        var out = [];\n        var i=0, ien=order.length;\n\n        // Could have the test in the loop for slightly smaller code, but speed\n        // is essential here\n        if ( prop2 !== undefined ) {\n            for ( ; i<ien ; i++ ) {\n                if ( a[ order[i] ][ prop ] ) {\n                    out.push( a[ order[i] ][ prop ][ prop2 ] );\n                }\n            }\n        }\n        else {\n            for ( ; i<ien ; i++ ) {\n                out.push( a[ order[i] ][ prop ] );\n            }\n        }\n\n        return out;\n    };\n\n\n    var _range = function ( len, start )\n    {\n        var out = [];\n        var end;\n\n        if ( start === undefined ) {\n            start = 0;\n            end = len;\n        }\n        else {\n            end = start;\n            start = len;\n        }\n\n        for ( var i=start ; i<end ; i++ ) {\n            out.push( i );\n        }\n\n        return out;\n    };\n\n\n    var _removeEmpty = function ( a )\n    {\n        var out = [];\n\n        for ( var i=0, ien=a.length ; i<ien ; i++ ) {\n            if ( a[i] ) { // careful - will remove all falsy values!\n                out.push( a[i] );\n            }\n        }\n\n        return out;\n    };\n\n\n    var _stripHtml = function ( d ) {\n        return d.replace( _re_html, '' );\n    };\n\n\n    /**\n     * Find the unique elements in a source array.\n     *\n     * @param  {array} src Source array\n     * @return {array} Array of unique items\n     * @ignore\n     */\n    var _unique = function ( src )\n    {\n        // A faster unique method is to use object keys to identify used values,\n        // but this doesn't work with arrays or objects, which we must also\n        // consider. See jsperf.com/compare-array-unique-versions/4 for more\n        // information.\n        var\n            out = [],\n            val,\n            i, ien=src.length,\n            j, k=0;\n\n        again: for ( i=0 ; i<ien ; i++ ) {\n            val = src[i];\n\n            for ( j=0 ; j<k ; j++ ) {\n                if ( out[j] === val ) {\n                    continue again;\n                }\n            }\n\n            out.push( val );\n            k++;\n        }\n\n        return out;\n    };\n\n\n    /**\n     * DataTables utility methods\n     *\n     * This namespace provides helper methods that DataTables uses internally to\n     * create a DataTable, but which are not exclusively used only for DataTables.\n     * These methods can be used by extension authors to save the duplication of\n     * code.\n     *\n     *  @namespace\n     */\n    DataTable.util = {\n        /**\n         * Throttle the calls to a function. Arguments and context are maintained\n         * for the throttled function.\n         *\n         * @param {function} fn Function to be called\n         * @param {integer} freq Call frequency in mS\n         * @return {function} Wrapped function\n         */\n        throttle: function ( fn, freq ) {\n            var\n                frequency = freq !== undefined ? freq : 200,\n                last,\n                timer;\n\n            return function () {\n                var\n                    that = this,\n                    now  = +new Date(),\n                    args = arguments;\n\n                if ( last && now < last + frequency ) {\n                    clearTimeout( timer );\n\n                    timer = setTimeout( function () {\n                        last = undefined;\n                        fn.apply( that, args );\n                    }, frequency );\n                }\n                else {\n                    last = now;\n                    fn.apply( that, args );\n                }\n            };\n        },\n\n\n        /**\n         * Escape a string such that it can be used in a regular expression\n         *\n         *  @param {string} val string to escape\n         *  @returns {string} escaped string\n         */\n        escapeRegex: function ( val ) {\n            return val.replace( _re_escape_regex, '\\\\$1' );\n        }\n    };\n\n\n\n    /**\n     * Create a mapping object that allows camel case parameters to be looked up\n     * for their Hungarian counterparts. The mapping is stored in a private\n     * parameter called `_hungarianMap` which can be accessed on the source object.\n     *  @param {object} o\n     *  @memberof DataTable#oApi\n     */\n    function _fnHungarianMap ( o )\n    {\n        var\n            hungarian = 'a aa ai ao as b fn i m o s ',\n            match,\n            newKey,\n            map = {};\n\n        $.each( o, function (key, val) {\n            match = key.match(/^([^A-Z]+?)([A-Z])/);\n\n            if ( match && hungarian.indexOf(match[1]+' ') !== -1 )\n            {\n                newKey = key.replace( match[0], match[2].toLowerCase() );\n                map[ newKey ] = key;\n\n                if ( match[1] === 'o' )\n                {\n                    _fnHungarianMap( o[key] );\n                }\n            }\n        } );\n\n        o._hungarianMap = map;\n    }\n\n\n    /**\n     * Convert from camel case parameters to Hungarian, based on a Hungarian map\n     * created by _fnHungarianMap.\n     *  @param {object} src The model object which holds all parameters that can be\n     *    mapped.\n     *  @param {object} user The object to convert from camel case to Hungarian.\n     *  @param {boolean} force When set to `true`, properties which already have a\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\n     *    won't be.\n     *  @memberof DataTable#oApi\n     */\n    function _fnCamelToHungarian ( src, user, force )\n    {\n        if ( ! src._hungarianMap ) {\n            _fnHungarianMap( src );\n        }\n\n        var hungarianKey;\n\n        $.each( user, function (key, val) {\n            hungarianKey = src._hungarianMap[ key ];\n\n            if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\n            {\n                // For objects, we need to buzz down into the object to copy parameters\n                if ( hungarianKey.charAt(0) === 'o' )\n                {\n                    // Copy the camelCase options over to the hungarian\n                    if ( ! user[ hungarianKey ] ) {\n                        user[ hungarianKey ] = {};\n                    }\n                    $.extend( true, user[hungarianKey], user[key] );\n\n                    _fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\n                }\n                else {\n                    user[hungarianKey] = user[ key ];\n                }\n            }\n        } );\n    }\n\n\n    /**\n     * Language compatibility - when certain options are given, and others aren't, we\n     * need to duplicate the values over, in order to provide backwards compatibility\n     * with older language files.\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnLanguageCompat( lang )\n    {\n        var defaults = DataTable.defaults.oLanguage;\n        var zeroRecords = lang.sZeroRecords;\n\n        /* Backwards compatibility - if there is no sEmptyTable given, then use the same as\n         * sZeroRecords - assuming that is given.\n         */\n        if ( ! lang.sEmptyTable && zeroRecords &&\n            defaults.sEmptyTable === \"No data available in table\" )\n        {\n            _fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\n        }\n\n        /* Likewise with loading records */\n        if ( ! lang.sLoadingRecords && zeroRecords &&\n            defaults.sLoadingRecords === \"Loading...\" )\n        {\n            _fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\n        }\n\n        // Old parameter name of the thousands separator mapped onto the new\n        if ( lang.sInfoThousands ) {\n            lang.sThousands = lang.sInfoThousands;\n        }\n\n        var decimal = lang.sDecimal;\n        if ( decimal ) {\n            _addNumericSort( decimal );\n        }\n    }\n\n\n    /**\n     * Map one parameter onto another\n     *  @param {object} o Object to map\n     *  @param {*} knew The new parameter name\n     *  @param {*} old The old parameter name\n     */\n    var _fnCompatMap = function ( o, knew, old ) {\n        if ( o[ knew ] !== undefined ) {\n            o[ old ] = o[ knew ];\n        }\n    };\n\n\n    /**\n     * Provide backwards compatibility for the main DT options. Note that the new\n     * options are mapped onto the old parameters, so this is an external interface\n     * change only.\n     *  @param {object} init Object to map\n     */\n    function _fnCompatOpts ( init )\n    {\n        _fnCompatMap( init, 'ordering',      'bSort' );\n        _fnCompatMap( init, 'orderMulti',    'bSortMulti' );\n        _fnCompatMap( init, 'orderClasses',  'bSortClasses' );\n        _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\n        _fnCompatMap( init, 'order',         'aaSorting' );\n        _fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\n        _fnCompatMap( init, 'paging',        'bPaginate' );\n        _fnCompatMap( init, 'pagingType',    'sPaginationType' );\n        _fnCompatMap( init, 'pageLength',    'iDisplayLength' );\n        _fnCompatMap( init, 'searching',     'bFilter' );\n\n        // Boolean initialisation of x-scrolling\n        if ( typeof init.sScrollX === 'boolean' ) {\n            init.sScrollX = init.sScrollX ? '100%' : '';\n        }\n        if ( typeof init.scrollX === 'boolean' ) {\n            init.scrollX = init.scrollX ? '100%' : '';\n        }\n\n        // Column search objects are in an array, so it needs to be converted\n        // element by element\n        var searchCols = init.aoSearchCols;\n\n        if ( searchCols ) {\n            for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\n                if ( searchCols[i] ) {\n                    _fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Provide backwards compatibility for column options. Note that the new options\n     * are mapped onto the old parameters, so this is an external interface change\n     * only.\n     *  @param {object} init Object to map\n     */\n    function _fnCompatCols ( init )\n    {\n        _fnCompatMap( init, 'orderable',     'bSortable' );\n        _fnCompatMap( init, 'orderData',     'aDataSort' );\n        _fnCompatMap( init, 'orderSequence', 'asSorting' );\n        _fnCompatMap( init, 'orderDataType', 'sortDataType' );\n\n        // orderData can be given as an integer\n        var dataSort = init.aDataSort;\n        if ( dataSort && ! $.isArray( dataSort ) ) {\n            init.aDataSort = [ dataSort ];\n        }\n    }\n\n\n    /**\n     * Browser feature detection for capabilities, quirks\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnBrowserDetect( settings )\n    {\n        // We don't need to do this every time DataTables is constructed, the values\n        // calculated are specific to the browser and OS configuration which we\n        // don't expect to change between initialisations\n        if ( ! DataTable.__browser ) {\n            var browser = {};\n            DataTable.__browser = browser;\n\n            // Scrolling feature / quirks detection\n            var n = $('<div/>')\n                .css( {\n                    position: 'fixed',\n                    top: 0,\n                    left: 0,\n                    height: 1,\n                    width: 1,\n                    overflow: 'hidden'\n                } )\n                .append(\n                    $('<div/>')\n                        .css( {\n                            position: 'absolute',\n                            top: 1,\n                            left: 1,\n                            width: 100,\n                            overflow: 'scroll'\n                        } )\n                        .append(\n                            $('<div/>')\n                                .css( {\n                                    width: '100%',\n                                    height: 10\n                                } )\n                        )\n                )\n                .appendTo( 'body' );\n\n            var outer = n.children();\n            var inner = outer.children();\n\n            // Numbers below, in order, are:\n            // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n            //\n            // IE6 XP:                           100 100 100  83\n            // IE7 Vista:                        100 100 100  83\n            // IE 8+ Windows:                     83  83 100  83\n            // Evergreen Windows:                 83  83 100  83\n            // Evergreen Mac with scrollbars:     85  85 100  85\n            // Evergreen Mac without scrollbars: 100 100 100 100\n\n            // Get scrollbar width\n            browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\n\n            // IE6/7 will oversize a width 100% element inside a scrolling element, to\n            // include the width of the scrollbar, while other browsers ensure the inner\n            // element is contained without forcing scrolling\n            browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;\n\n            // In rtl text layout, some browsers (most, but not all) will place the\n            // scrollbar on the left, rather than the right.\n            browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;\n\n            // IE8- don't provide height and width for getBoundingClientRect\n            browser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n\n            n.remove();\n        }\n\n        $.extend( settings.oBrowser, DataTable.__browser );\n        settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n    }\n\n\n    /**\n     * Array.prototype reduce[Right] method, used for browsers which don't support\n     * JS 1.6. Done this way to reduce code size, since we iterate either way\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnReduce ( that, fn, init, start, end, inc )\n    {\n        var\n            i = start,\n            value,\n            isSet = false;\n\n        if ( init !== undefined ) {\n            value = init;\n            isSet = true;\n        }\n\n        while ( i !== end ) {\n            if ( ! that.hasOwnProperty(i) ) {\n                continue;\n            }\n\n            value = isSet ?\n                fn( value, that[i], i, that ) :\n                that[i];\n\n            isSet = true;\n            i += inc;\n        }\n\n        return value;\n    }\n\n    /**\n     * Add a column to the list used for the table with default values\n     *  @param {object} oSettings dataTables settings object\n     *  @param {node} nTh The th element for this column\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddColumn( oSettings, nTh )\n    {\n        // Add column to aoColumns array\n        var oDefaults = DataTable.defaults.column;\n        var iCol = oSettings.aoColumns.length;\n        var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\n            \"nTh\": nTh ? nTh : document.createElement('th'),\n            \"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\n            \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n            \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n            idx: iCol\n        } );\n        oSettings.aoColumns.push( oCol );\n\n        // Add search object for column specific search. Note that the `searchCols[ iCol ]`\n        // passed into extend can be undefined. This allows the user to give a default\n        // with only some of the parameters defined, and also not give a default\n        var searchCols = oSettings.aoPreSearchCols;\n        searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\n\n        // Use the default column options function to initialise classes etc\n        _fnColumnOptions( oSettings, iCol, $(nTh).data() );\n    }\n\n\n    /**\n     * Apply options for a column\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iCol column index to consider\n     *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnOptions( oSettings, iCol, oOptions )\n    {\n        var oCol = oSettings.aoColumns[ iCol ];\n        var oClasses = oSettings.oClasses;\n        var th = $(oCol.nTh);\n\n        // Try to get width information from the DOM. We can't get it from CSS\n        // as we'd need to parse the CSS stylesheet. `width` option can override\n        if ( ! oCol.sWidthOrig ) {\n            // Width attribute\n            oCol.sWidthOrig = th.attr('width') || null;\n\n            // Style attribute\n            var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n            if ( t ) {\n                oCol.sWidthOrig = t[1];\n            }\n        }\n\n        /* User specified column options */\n        if ( oOptions !== undefined && oOptions !== null )\n        {\n            // Backwards compatibility\n            _fnCompatCols( oOptions );\n\n            // Map camel case parameters to their Hungarian counterparts\n            _fnCamelToHungarian( DataTable.defaults.column, oOptions );\n\n            /* Backwards compatibility for mDataProp */\n            if ( oOptions.mDataProp !== undefined && !oOptions.mData )\n            {\n                oOptions.mData = oOptions.mDataProp;\n            }\n\n            if ( oOptions.sType )\n            {\n                oCol._sManualType = oOptions.sType;\n            }\n\n            // `class` is a reserved word in Javascript, so we need to provide\n            // the ability to use a valid name for the camel case input\n            if ( oOptions.className && ! oOptions.sClass )\n            {\n                oOptions.sClass = oOptions.className;\n            }\n\n            $.extend( oCol, oOptions );\n            _fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\n\n            /* iDataSort to be applied (backwards compatibility), but aDataSort will take\n             * priority if defined\n             */\n            if ( oOptions.iDataSort !== undefined )\n            {\n                oCol.aDataSort = [ oOptions.iDataSort ];\n            }\n            _fnMap( oCol, oOptions, \"aDataSort\" );\n        }\n\n        /* Cache the data get and set functions for speed */\n        var mDataSrc = oCol.mData;\n        var mData = _fnGetObjectDataFn( mDataSrc );\n        var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\n\n        var attrTest = function( src ) {\n            return typeof src === 'string' && src.indexOf('@') !== -1;\n        };\n        oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\n                attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\n            );\n        oCol._setter = null;\n\n        oCol.fnGetData = function (rowData, type, meta) {\n            var innerData = mData( rowData, type, undefined, meta );\n\n            return mRender && type ?\n                mRender( innerData, type, rowData, meta ) :\n                innerData;\n        };\n        oCol.fnSetData = function ( rowData, val, meta ) {\n            return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\n        };\n\n        // Indicate if DataTables should read DOM data as an object or array\n        // Used in _fnGetRowElements\n        if ( typeof mDataSrc !== 'number' ) {\n            oSettings._rowReadObject = true;\n        }\n\n        /* Feature sorting overrides column specific when off */\n        if ( !oSettings.oFeatures.bSort )\n        {\n            oCol.bSortable = false;\n            th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\n        }\n\n        /* Check that the class assignment is correct for sorting */\n        var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n        var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n        if ( !oCol.bSortable || (!bAsc && !bDesc) )\n        {\n            oCol.sSortingClass = oClasses.sSortableNone;\n            oCol.sSortingClassJUI = \"\";\n        }\n        else if ( bAsc && !bDesc )\n        {\n            oCol.sSortingClass = oClasses.sSortableAsc;\n            oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n        }\n        else if ( !bAsc && bDesc )\n        {\n            oCol.sSortingClass = oClasses.sSortableDesc;\n            oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n        }\n        else\n        {\n            oCol.sSortingClass = oClasses.sSortable;\n            oCol.sSortingClassJUI = oClasses.sSortJUI;\n        }\n    }\n\n\n    /**\n     * Adjust the table column widths for new data. Note: you would probably want to\n     * do a redraw after calling this function!\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnAdjustColumnSizing ( settings )\n    {\n        /* Not interested in doing column width calculation if auto-width is disabled */\n        if ( settings.oFeatures.bAutoWidth !== false )\n        {\n            var columns = settings.aoColumns;\n\n            _fnCalculateColumnWidths( settings );\n            for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\n            {\n                columns[i].nTh.style.width = columns[i].sWidth;\n            }\n        }\n\n        var scroll = settings.oScroll;\n        if ( scroll.sY !== '' || scroll.sX !== '')\n        {\n            _fnScrollDraw( settings );\n        }\n\n        _fnCallbackFire( settings, null, 'column-sizing', [settings] );\n    }\n\n\n    /**\n     * Covert the index of a visible column to the index in the data array (take account\n     * of hidden columns)\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iMatch Visible column index to lookup\n     *  @returns {int} i the data index\n     *  @memberof DataTable#oApi\n     */\n    function _fnVisibleToColumnIndex( oSettings, iMatch )\n    {\n        var aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\n        return typeof aiVis[iMatch] === 'number' ?\n            aiVis[iMatch] :\n            null;\n    }\n\n\n    /**\n     * Covert the index of an index in the data array and convert it to the visible\n     *   column index (take account of hidden columns)\n     *  @param {int} iMatch Column index to lookup\n     *  @param {object} oSettings dataTables settings object\n     *  @returns {int} i the data index\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnIndexToVisible( oSettings, iMatch )\n    {\n        var aiVis = _fnGetColumns( oSettings, 'bVisible' );\n        var iPos = $.inArray( iMatch, aiVis );\n\n        return iPos !== -1 ? iPos : null;\n    }\n\n\n    /**\n     * Get the number of visible columns\n     *  @param {object} oSettings dataTables settings object\n     *  @returns {int} i the number of visible columns\n     *  @memberof DataTable#oApi\n     */\n    function _fnVisbleColumns( oSettings )\n    {\n        var vis = 0;\n\n        // No reduce in IE8, use a loop for now\n        $.each( oSettings.aoColumns, function ( i, col ) {\n            if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {\n                vis++;\n            }\n        } );\n\n        return vis;\n    }\n\n\n    /**\n     * Get an array of column indexes that match a given property\n     *  @param {object} oSettings dataTables settings object\n     *  @param {string} sParam Parameter in aoColumns to look for - typically\n     *    bVisible or bSearchable\n     *  @returns {array} Array of indexes with matched properties\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetColumns( oSettings, sParam )\n    {\n        var a = [];\n\n        $.map( oSettings.aoColumns, function(val, i) {\n            if ( val[sParam] ) {\n                a.push( i );\n            }\n        } );\n\n        return a;\n    }\n\n\n    /**\n     * Calculate the 'type' of a column\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnTypes ( settings )\n    {\n        var columns = settings.aoColumns;\n        var data = settings.aoData;\n        var types = DataTable.ext.type.detect;\n        var i, ien, j, jen, k, ken;\n        var col, cell, detectedType, cache;\n\n        // For each column, spin over the\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\n            col = columns[i];\n            cache = [];\n\n            if ( ! col.sType && col._sManualType ) {\n                col.sType = col._sManualType;\n            }\n            else if ( ! col.sType ) {\n                for ( j=0, jen=types.length ; j<jen ; j++ ) {\n                    for ( k=0, ken=data.length ; k<ken ; k++ ) {\n                        // Use a cache array so we only need to get the type data\n                        // from the formatter once (when using multiple detectors)\n                        if ( cache[k] === undefined ) {\n                            cache[k] = _fnGetCellData( settings, k, i, 'type' );\n                        }\n\n                        detectedType = types[j]( cache[k], settings );\n\n                        // If null, then this type can't apply to this column, so\n                        // rather than testing all cells, break out. There is an\n                        // exception for the last type which is `html`. We need to\n                        // scan all rows since it is possible to mix string and HTML\n                        // types\n                        if ( ! detectedType && j !== types.length-1 ) {\n                            break;\n                        }\n\n                        // Only a single match is needed for html type since it is\n                        // bottom of the pile and very similar to string\n                        if ( detectedType === 'html' ) {\n                            break;\n                        }\n                    }\n\n                    // Type is valid for all data points in the column - use this\n                    // type\n                    if ( detectedType ) {\n                        col.sType = detectedType;\n                        break;\n                    }\n                }\n\n                // Fall back - if no type was detected, always use string\n                if ( ! col.sType ) {\n                    col.sType = 'string';\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Take the column definitions and static columns arrays and calculate how\n     * they relate to column indexes. The callback function will then apply the\n     * definition found for a column to a suitable configuration object.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n     *  @param {array} aoCols The aoColumns array that defines columns individually\n     *  @param {function} fn Callback function - takes two parameters, the calculated\n     *    column index and the definition for that column.\n     *  @memberof DataTable#oApi\n     */\n    function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\n    {\n        var i, iLen, j, jLen, k, kLen, def;\n        var columns = oSettings.aoColumns;\n\n        // Column definitions with aTargets\n        if ( aoColDefs )\n        {\n            /* Loop over the definitions array - loop in reverse so first instance has priority */\n            for ( i=aoColDefs.length-1 ; i>=0 ; i-- )\n            {\n                def = aoColDefs[i];\n\n                /* Each definition can target multiple columns, as it is an array */\n                var aTargets = def.targets !== undefined ?\n                    def.targets :\n                    def.aTargets;\n\n                if ( ! $.isArray( aTargets ) )\n                {\n                    aTargets = [ aTargets ];\n                }\n\n                for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\n                {\n                    if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\n                    {\n                        /* Add columns that we don't yet know about */\n                        while( columns.length <= aTargets[j] )\n                        {\n                            _fnAddColumn( oSettings );\n                        }\n\n                        /* Integer, basic index */\n                        fn( aTargets[j], def );\n                    }\n                    else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\n                    {\n                        /* Negative integer, right to left column counting */\n                        fn( columns.length+aTargets[j], def );\n                    }\n                    else if ( typeof aTargets[j] === 'string' )\n                    {\n                        /* Class name matching on TH element */\n                        for ( k=0, kLen=columns.length ; k<kLen ; k++ )\n                        {\n                            if ( aTargets[j] == \"_all\" ||\n                                $(columns[k].nTh).hasClass( aTargets[j] ) )\n                            {\n                                fn( k, def );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Statically defined columns array\n        if ( aoCols )\n        {\n            for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\n            {\n                fn( i, aoCols[i] );\n            }\n        }\n    }\n\n    /**\n     * Add a data array to the table, creating DOM node etc. This is the parallel to\n     * _fnGatherData, but for adding rows from a Javascript source, rather than a\n     * DOM source.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {array} aData data array to be added\n     *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n     *    DataTables will create a row automatically\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n     *    if nTr is.\n     *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddData ( oSettings, aDataIn, nTr, anTds )\n    {\n        /* Create the object for storing information about this new row */\n        var iRow = oSettings.aoData.length;\n        var oData = $.extend( true, {}, DataTable.models.oRow, {\n            src: nTr ? 'dom' : 'data',\n            idx: iRow\n        } );\n\n        oData._aData = aDataIn;\n        oSettings.aoData.push( oData );\n\n        /* Create the cells */\n        var nTd, sThisType;\n        var columns = oSettings.aoColumns;\n\n        // Invalidate the column types as the new data needs to be revalidated\n        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n        {\n            columns[i].sType = null;\n        }\n\n        /* Add to the display array */\n        oSettings.aiDisplayMaster.push( iRow );\n\n        var id = oSettings.rowIdFn( aDataIn );\n        if ( id !== undefined ) {\n            oSettings.aIds[ id ] = oData;\n        }\n\n        /* Create the DOM information, or register it if already present */\n        if ( nTr || ! oSettings.oFeatures.bDeferRender )\n        {\n            _fnCreateTr( oSettings, iRow, nTr, anTds );\n        }\n\n        return iRow;\n    }\n\n\n    /**\n     * Add one or more TR elements to the table. Generally we'd expect to\n     * use this for reading data from a DOM sourced table, but it could be\n     * used for an TR element. Note that if a TR is given, it is used (i.e.\n     * it is not cloned).\n     *  @param {object} settings dataTables settings object\n     *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n     *  @returns {array} Array of indexes for the added rows\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddTr( settings, trs )\n    {\n        var row;\n\n        // Allow an individual node to be passed in\n        if ( ! (trs instanceof $) ) {\n            trs = $(trs);\n        }\n\n        return trs.map( function (i, el) {\n            row = _fnGetRowElements( settings, el );\n            return _fnAddData( settings, row.data, el, row.cells );\n        } );\n    }\n\n\n    /**\n     * Take a TR element and convert it to an index in aoData\n     *  @param {object} oSettings dataTables settings object\n     *  @param {node} n the TR element to find\n     *  @returns {int} index if the node is found, null if not\n     *  @memberof DataTable#oApi\n     */\n    function _fnNodeToDataIndex( oSettings, n )\n    {\n        return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\n    }\n\n\n    /**\n     * Take a TD element and convert it into a column data index (not the visible index)\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iRow The row number the TD/TH can be found in\n     *  @param {node} n The TD/TH element to find\n     *  @returns {int} index if the node is found, -1 if not\n     *  @memberof DataTable#oApi\n     */\n    function _fnNodeToColumnIndex( oSettings, iRow, n )\n    {\n        return $.inArray( n, oSettings.aoData[ iRow ].anCells );\n    }\n\n\n    /**\n     * Get the data for a given cell from the internal cache, taking into account data mapping\n     *  @param {object} settings dataTables settings object\n     *  @param {int} rowIdx aoData row id\n     *  @param {int} colIdx Column index\n     *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\n     *  @returns {*} Cell data\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetCellData( settings, rowIdx, colIdx, type )\n    {\n        var draw           = settings.iDraw;\n        var col            = settings.aoColumns[colIdx];\n        var rowData        = settings.aoData[rowIdx]._aData;\n        var defaultContent = col.sDefaultContent;\n        var cellData       = col.fnGetData( rowData, type, {\n            settings: settings,\n            row:      rowIdx,\n            col:      colIdx\n        } );\n\n        if ( cellData === undefined ) {\n            if ( settings.iDrawError != draw && defaultContent === null ) {\n                _fnLog( settings, 0, \"Requested unknown parameter \"+\n                    (typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\n                    \" for row \"+rowIdx+\", column \"+colIdx, 4 );\n                settings.iDrawError = draw;\n            }\n            return defaultContent;\n        }\n\n        // When the data source is null and a specific data type is requested (i.e.\n        // not the original data), we can use default column data\n        if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {\n            cellData = defaultContent;\n        }\n        else if ( typeof cellData === 'function' ) {\n            // If the data source is a function, then we run it and use the return,\n            // executing in the scope of the data object (for instances)\n            return cellData.call( rowData );\n        }\n\n        if ( cellData === null && type == 'display' ) {\n            return '';\n        }\n        return cellData;\n    }\n\n\n    /**\n     * Set the value for a specific cell, into the internal data cache\n     *  @param {object} settings dataTables settings object\n     *  @param {int} rowIdx aoData row id\n     *  @param {int} colIdx Column index\n     *  @param {*} val Value to set\n     *  @memberof DataTable#oApi\n     */\n    function _fnSetCellData( settings, rowIdx, colIdx, val )\n    {\n        var col     = settings.aoColumns[colIdx];\n        var rowData = settings.aoData[rowIdx]._aData;\n\n        col.fnSetData( rowData, val, {\n            settings: settings,\n            row:      rowIdx,\n            col:      colIdx\n        }  );\n    }\n\n\n    // Private variable that is used to match action syntax in the data property object\n    var __reArray = /\\[.*?\\]$/;\n    var __reFn = /\\(\\)$/;\n\n    /**\n     * Split string on periods, taking into account escaped periods\n     * @param  {string} str String to split\n     * @return {array} Split string\n     */\n    function _fnSplitObjNotation( str )\n    {\n        return $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {\n            return s.replace(/\\\\./g, '.');\n        } );\n    }\n\n\n    /**\n     * Return a function that can be used to get data from a source object, taking\n     * into account the ability to use nested objects as a source\n     *  @param {string|int|function} mSource The data source for the object\n     *  @returns {function} Data get function\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetObjectDataFn( mSource )\n    {\n        if ( $.isPlainObject( mSource ) )\n        {\n            /* Build an object of get functions, and wrap them in a single call */\n            var o = {};\n            $.each( mSource, function (key, val) {\n                if ( val ) {\n                    o[key] = _fnGetObjectDataFn( val );\n                }\n            } );\n\n            return function (data, type, row, meta) {\n                var t = o[type] || o._;\n                return t !== undefined ?\n                    t(data, type, row, meta) :\n                    data;\n            };\n        }\n        else if ( mSource === null )\n        {\n            /* Give an empty string for rendering / sorting etc */\n            return function (data) { // type, row and meta also passed, but not used\n                return data;\n            };\n        }\n        else if ( typeof mSource === 'function' )\n        {\n            return function (data, type, row, meta) {\n                return mSource( data, type, row, meta );\n            };\n        }\n        else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n            mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n        {\n            /* If there is a . in the source string then the data source is in a\n             * nested object so we loop over the data for each level to get the next\n             * level down. On each loop we test for undefined, and if found immediately\n             * return. This allows entire objects to be missing and sDefaultContent to\n             * be used if defined, rather than throwing an error\n             */\n            var fetchData = function (data, type, src) {\n                var arrayNotation, funcNotation, out, innerSrc;\n\n                if ( src !== \"\" )\n                {\n                    var a = _fnSplitObjNotation( src );\n\n                    for ( var i=0, iLen=a.length ; i<iLen ; i++ )\n                    {\n                        // Check if we are dealing with special notation\n                        arrayNotation = a[i].match(__reArray);\n                        funcNotation = a[i].match(__reFn);\n\n                        if ( arrayNotation )\n                        {\n                            // Array notation\n                            a[i] = a[i].replace(__reArray, '');\n\n                            // Condition allows simply [] to be passed in\n                            if ( a[i] !== \"\" ) {\n                                data = data[ a[i] ];\n                            }\n                            out = [];\n\n                            // Get the remainder of the nested object to get\n                            a.splice( 0, i+1 );\n                            innerSrc = a.join('.');\n\n                            // Traverse each entry in the array getting the properties requested\n                            if ( $.isArray( data ) ) {\n                                for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\n                                    out.push( fetchData( data[j], type, innerSrc ) );\n                                }\n                            }\n\n                            // If a string is given in between the array notation indicators, that\n                            // is used to join the strings together, otherwise an array is returned\n                            var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\n                            data = (join===\"\") ? out : out.join(join);\n\n                            // The inner call to fetchData has already traversed through the remainder\n                            // of the source requested, so we exit from the loop\n                            break;\n                        }\n                        else if ( funcNotation )\n                        {\n                            // Function call\n                            a[i] = a[i].replace(__reFn, '');\n                            data = data[ a[i] ]();\n                            continue;\n                        }\n\n                        if ( data === null || data[ a[i] ] === undefined )\n                        {\n                            return undefined;\n                        }\n                        data = data[ a[i] ];\n                    }\n                }\n\n                return data;\n            };\n\n            return function (data, type) { // row and meta also passed, but not used\n                return fetchData( data, type, mSource );\n            };\n        }\n        else\n        {\n            /* Array or flat object mapping */\n            return function (data, type) { // row and meta also passed, but not used\n                return data[mSource];\n            };\n        }\n    }\n\n\n    /**\n     * Return a function that can be used to set data from a source object, taking\n     * into account the ability to use nested objects as a source\n     *  @param {string|int|function} mSource The data source for the object\n     *  @returns {function} Data set function\n     *  @memberof DataTable#oApi\n     */\n    function _fnSetObjectDataFn( mSource )\n    {\n        if ( $.isPlainObject( mSource ) )\n        {\n            /* Unlike get, only the underscore (global) option is used for for\n             * setting data since we don't know the type here. This is why an object\n             * option is not documented for `mData` (which is read/write), but it is\n             * for `mRender` which is read only.\n             */\n            return _fnSetObjectDataFn( mSource._ );\n        }\n        else if ( mSource === null )\n        {\n            /* Nothing to do when the data source is null */\n            return function () {};\n        }\n        else if ( typeof mSource === 'function' )\n        {\n            return function (data, val, meta) {\n                mSource( data, 'set', val, meta );\n            };\n        }\n        else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n            mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n        {\n            /* Like the get, we need to get data from a nested object */\n            var setData = function (data, val, src) {\n                var a = _fnSplitObjNotation( src ), b;\n                var aLast = a[a.length-1];\n                var arrayNotation, funcNotation, o, innerSrc;\n\n                for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\n                {\n                    // Check if we are dealing with an array notation request\n                    arrayNotation = a[i].match(__reArray);\n                    funcNotation = a[i].match(__reFn);\n\n                    if ( arrayNotation )\n                    {\n                        a[i] = a[i].replace(__reArray, '');\n                        data[ a[i] ] = [];\n\n                        // Get the remainder of the nested object to set so we can recurse\n                        b = a.slice();\n                        b.splice( 0, i+1 );\n                        innerSrc = b.join('.');\n\n                        // Traverse each entry in the array setting the properties requested\n                        if ( $.isArray( val ) )\n                        {\n                            for ( var j=0, jLen=val.length ; j<jLen ; j++ )\n                            {\n                                o = {};\n                                setData( o, val[j], innerSrc );\n                                data[ a[i] ].push( o );\n                            }\n                        }\n                        else\n                        {\n                            // We've been asked to save data to an array, but it\n                            // isn't array data to be saved. Best that can be done\n                            // is to just save the value.\n                            data[ a[i] ] = val;\n                        }\n\n                        // The inner call to setData has already traversed through the remainder\n                        // of the source and has set the data, thus we can exit here\n                        return;\n                    }\n                    else if ( funcNotation )\n                    {\n                        // Function call\n                        a[i] = a[i].replace(__reFn, '');\n                        data = data[ a[i] ]( val );\n                    }\n\n                    // If the nested object doesn't currently exist - since we are\n                    // trying to set the value - create it\n                    if ( data[ a[i] ] === null || data[ a[i] ] === undefined )\n                    {\n                        data[ a[i] ] = {};\n                    }\n                    data = data[ a[i] ];\n                }\n\n                // Last item in the input - i.e, the actual set\n                if ( aLast.match(__reFn ) )\n                {\n                    // Function call\n                    data = data[ aLast.replace(__reFn, '') ]( val );\n                }\n                else\n                {\n                    // If array notation is used, we just want to strip it and use the property name\n                    // and assign the value. If it isn't used, then we get the result we want anyway\n                    data[ aLast.replace(__reArray, '') ] = val;\n                }\n            };\n\n            return function (data, val) { // meta is also passed in, but not used\n                return setData( data, val, mSource );\n            };\n        }\n        else\n        {\n            /* Array or flat object mapping */\n            return function (data, val) { // meta is also passed in, but not used\n                data[mSource] = val;\n            };\n        }\n    }\n\n\n    /**\n     * Return an array with the full table data\n     *  @param {object} oSettings dataTables settings object\n     *  @returns array {array} aData Master data array\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetDataMaster ( settings )\n    {\n        return _pluck( settings.aoData, '_aData' );\n    }\n\n\n    /**\n     * Nuke the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnClearTable( settings )\n    {\n        settings.aoData.length = 0;\n        settings.aiDisplayMaster.length = 0;\n        settings.aiDisplay.length = 0;\n        settings.aIds = {};\n    }\n\n\n    /**\n     * Take an array of integers (index array) and remove a target integer (value - not\n     * the key!)\n     *  @param {array} a Index array to target\n     *  @param {int} iTarget value to find\n     *  @memberof DataTable#oApi\n     */\n    function _fnDeleteIndex( a, iTarget, splice )\n    {\n        var iTargetIndex = -1;\n\n        for ( var i=0, iLen=a.length ; i<iLen ; i++ )\n        {\n            if ( a[i] == iTarget )\n            {\n                iTargetIndex = i;\n            }\n            else if ( a[i] > iTarget )\n            {\n                a[i]--;\n            }\n        }\n\n        if ( iTargetIndex != -1 && splice === undefined )\n        {\n            a.splice( iTargetIndex, 1 );\n        }\n    }\n\n\n    /**\n     * Mark cached data as invalid such that a re-read of the data will occur when\n     * the cached data is next requested. Also update from the data source object.\n     *\n     * @param {object} settings DataTables settings object\n     * @param {int}    rowIdx   Row index to invalidate\n     * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n     *     or 'data'\n     * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n     *     row will be invalidated\n     * @memberof DataTable#oApi\n     *\n     * @todo For the modularisation of v1.11 this will need to become a callback, so\n     *   the sort and filter methods can subscribe to it. That will required\n     *   initialisation options for sorting, which is why it is not already baked in\n     */\n    function _fnInvalidate( settings, rowIdx, src, colIdx )\n    {\n        var row = settings.aoData[ rowIdx ];\n        var i, ien;\n        var cellWrite = function ( cell, col ) {\n            // This is very frustrating, but in IE if you just write directly\n            // to innerHTML, and elements that are overwritten are GC'ed,\n            // even if there is a reference to them elsewhere\n            while ( cell.childNodes.length ) {\n                cell.removeChild( cell.firstChild );\n            }\n\n            cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\n        };\n\n        // Are we reading last data from DOM or the data object?\n        if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\n            // Read the data from the DOM\n            row._aData = _fnGetRowElements(\n                settings, row, colIdx, colIdx === undefined ? undefined : row._aData\n            )\n                .data;\n        }\n        else {\n            // Reading from data object, update the DOM\n            var cells = row.anCells;\n\n            if ( cells ) {\n                if ( colIdx !== undefined ) {\n                    cellWrite( cells[colIdx], colIdx );\n                }\n                else {\n                    for ( i=0, ien=cells.length ; i<ien ; i++ ) {\n                        cellWrite( cells[i], i );\n                    }\n                }\n            }\n        }\n\n        // For both row and cell invalidation, the cached data for sorting and\n        // filtering is nulled out\n        row._aSortData = null;\n        row._aFilterData = null;\n\n        // Invalidate the type for a specific column (if given) or all columns since\n        // the data might have changed\n        var cols = settings.aoColumns;\n        if ( colIdx !== undefined ) {\n            cols[ colIdx ].sType = null;\n        }\n        else {\n            for ( i=0, ien=cols.length ; i<ien ; i++ ) {\n                cols[i].sType = null;\n            }\n\n            // Update DataTables special `DT_*` attributes for the row\n            _fnRowAttributes( settings, row );\n        }\n    }\n\n\n    /**\n     * Build a data source object from an HTML row, reading the contents of the\n     * cells that are in the row.\n     *\n     * @param {object} settings DataTables settings object\n     * @param {node|object} TR element from which to read data or existing row\n     *   object from which to re-read the data from the cells\n     * @param {int} [colIdx] Optional column index\n     * @param {array|object} [d] Data source object. If `colIdx` is given then this\n     *   parameter should also be given and will be used to write the data into.\n     *   Only the column in question will be written\n     * @returns {object} Object with two parameters: `data` the data read, in\n     *   document order, and `cells` and array of nodes (they can be useful to the\n     *   caller, so rather than needing a second traversal to get them, just return\n     *   them from here).\n     * @memberof DataTable#oApi\n     */\n    function _fnGetRowElements( settings, row, colIdx, d )\n    {\n        var\n            tds = [],\n            td = row.firstChild,\n            name, col, o, i=0, contents,\n            columns = settings.aoColumns,\n            objectRead = settings._rowReadObject;\n\n        // Allow the data object to be passed in, or construct\n        d = d !== undefined ?\n            d :\n            objectRead ?\n            {} :\n                [];\n\n        var attr = function ( str, td  ) {\n            if ( typeof str === 'string' ) {\n                var idx = str.indexOf('@');\n\n                if ( idx !== -1 ) {\n                    var attr = str.substring( idx+1 );\n                    var setter = _fnSetObjectDataFn( str );\n                    setter( d, td.getAttribute( attr ) );\n                }\n            }\n        };\n\n        // Read data from a cell and store into the data object\n        var cellProcess = function ( cell ) {\n            if ( colIdx === undefined || colIdx === i ) {\n                col = columns[i];\n                contents = $.trim(cell.innerHTML);\n\n                if ( col && col._bAttrSrc ) {\n                    var setter = _fnSetObjectDataFn( col.mData._ );\n                    setter( d, contents );\n\n                    attr( col.mData.sort, cell );\n                    attr( col.mData.type, cell );\n                    attr( col.mData.filter, cell );\n                }\n                else {\n                    // Depending on the `data` option for the columns the data can\n                    // be read to either an object or an array.\n                    if ( objectRead ) {\n                        if ( ! col._setter ) {\n                            // Cache the setter function\n                            col._setter = _fnSetObjectDataFn( col.mData );\n                        }\n                        col._setter( d, contents );\n                    }\n                    else {\n                        d[i] = contents;\n                    }\n                }\n            }\n\n            i++;\n        };\n\n        if ( td ) {\n            // `tr` element was passed in\n            while ( td ) {\n                name = td.nodeName.toUpperCase();\n\n                if ( name == \"TD\" || name == \"TH\" ) {\n                    cellProcess( td );\n                    tds.push( td );\n                }\n\n                td = td.nextSibling;\n            }\n        }\n        else {\n            // Existing row object passed in\n            tds = row.anCells;\n\n            for ( var j=0, jen=tds.length ; j<jen ; j++ ) {\n                cellProcess( tds[j] );\n            }\n        }\n\n        // Read the ID from the DOM if present\n        var rowNode = row.firstChild ? row : row.nTr;\n\n        if ( rowNode ) {\n            var id = rowNode.getAttribute( 'id' );\n\n            if ( id ) {\n                _fnSetObjectDataFn( settings.rowId )( d, id );\n            }\n        }\n\n        return {\n            data: d,\n            cells: tds\n        };\n    }\n    /**\n     * Create a new TR element (and it's TD children) for a row\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iRow Row to consider\n     *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n     *    DataTables will create a row automatically\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n     *    if nTr is.\n     *  @memberof DataTable#oApi\n     */\n    function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\n    {\n        var\n            row = oSettings.aoData[iRow],\n            rowData = row._aData,\n            cells = [],\n            nTr, nTd, oCol,\n            i, iLen;\n\n        if ( row.nTr === null )\n        {\n            nTr = nTrIn || document.createElement('tr');\n\n            row.nTr = nTr;\n            row.anCells = cells;\n\n            /* Use a private property on the node to allow reserve mapping from the node\n             * to the aoData array for fast look up\n             */\n            nTr._DT_RowIndex = iRow;\n\n            /* Special parameters can be given by the data source to be used on the row */\n            _fnRowAttributes( oSettings, row );\n\n            /* Process each column */\n            for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\n            {\n                oCol = oSettings.aoColumns[i];\n\n                nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );\n                nTd._DT_CellIndex = {\n                    row: iRow,\n                    column: i\n                };\n\n                cells.push( nTd );\n\n                // Need to create the HTML if new, or if a rendering function is defined\n                if ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&\n                    (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')\n                ) {\n                    nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\n                }\n\n                /* Add user defined class */\n                if ( oCol.sClass )\n                {\n                    nTd.className += ' '+oCol.sClass;\n                }\n\n                // Visibility - add or remove as required\n                if ( oCol.bVisible && ! nTrIn )\n                {\n                    nTr.appendChild( nTd );\n                }\n                else if ( ! oCol.bVisible && nTrIn )\n                {\n                    nTd.parentNode.removeChild( nTd );\n                }\n\n                if ( oCol.fnCreatedCell )\n                {\n                    oCol.fnCreatedCell.call( oSettings.oInstance,\n                        nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\n                    );\n                }\n            }\n\n            _fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );\n        }\n\n        // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\n        // and deployed\n        row.nTr.setAttribute( 'role', 'row' );\n    }\n\n\n    /**\n     * Add attributes to a row based on the special `DT_*` parameters in a data\n     * source object.\n     *  @param {object} settings DataTables settings object\n     *  @param {object} DataTables row object for the row to be modified\n     *  @memberof DataTable#oApi\n     */\n    function _fnRowAttributes( settings, row )\n    {\n        var tr = row.nTr;\n        var data = row._aData;\n\n        if ( tr ) {\n            var id = settings.rowIdFn( data );\n\n            if ( id ) {\n                tr.id = id;\n            }\n\n            if ( data.DT_RowClass ) {\n                // Remove any classes added by DT_RowClass before\n                var a = data.DT_RowClass.split(' ');\n                row.__rowc = row.__rowc ?\n                    _unique( row.__rowc.concat( a ) ) :\n                    a;\n\n                $(tr)\n                    .removeClass( row.__rowc.join(' ') )\n                    .addClass( data.DT_RowClass );\n            }\n\n            if ( data.DT_RowAttr ) {\n                $(tr).attr( data.DT_RowAttr );\n            }\n\n            if ( data.DT_RowData ) {\n                $(tr).data( data.DT_RowData );\n            }\n        }\n    }\n\n\n    /**\n     * Create the HTML header for the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnBuildHead( oSettings )\n    {\n        var i, ien, cell, row, column;\n        var thead = oSettings.nTHead;\n        var tfoot = oSettings.nTFoot;\n        var createHeader = $('th, td', thead).length === 0;\n        var classes = oSettings.oClasses;\n        var columns = oSettings.aoColumns;\n\n        if ( createHeader ) {\n            row = $('<tr/>').appendTo( thead );\n        }\n\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\n            column = columns[i];\n            cell = $( column.nTh ).addClass( column.sClass );\n\n            if ( createHeader ) {\n                cell.appendTo( row );\n            }\n\n            // 1.11 move into sorting\n            if ( oSettings.oFeatures.bSort ) {\n                cell.addClass( column.sSortingClass );\n\n                if ( column.bSortable !== false ) {\n                    cell\n                        .attr( 'tabindex', oSettings.iTabIndex )\n                        .attr( 'aria-controls', oSettings.sTableId );\n\n                    _fnSortAttachListener( oSettings, column.nTh, i );\n                }\n            }\n\n            if ( column.sTitle != cell[0].innerHTML ) {\n                cell.html( column.sTitle );\n            }\n\n            _fnRenderer( oSettings, 'header' )(\n                oSettings, cell, column, classes\n            );\n        }\n\n        if ( createHeader ) {\n            _fnDetectHeader( oSettings.aoHeader, thead );\n        }\n\n        /* ARIA role for the rows */\n        $(thead).find('>tr').attr('role', 'row');\n\n        /* Deal with the footer - add classes if required */\n        $(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\n        $(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\n\n        // Cache the footer cells. Note that we only take the cells from the first\n        // row in the footer. If there is more than one row the user wants to\n        // interact with, they need to use the table().foot() method. Note also this\n        // allows cells to be used for multiple columns using colspan\n        if ( tfoot !== null ) {\n            var cells = oSettings.aoFooter[0];\n\n            for ( i=0, ien=cells.length ; i<ien ; i++ ) {\n                column = columns[i];\n                column.nTf = cells[i].cell;\n\n                if ( column.sClass ) {\n                    $(column.nTf).addClass( column.sClass );\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Draw the header (or footer) element based on the column visibility states. The\n     * methodology here is to use the layout array from _fnDetectHeader, modified for\n     * the instantaneous column visibility, to construct the new layout. The grid is\n     * traversed over cell at a time in a rows x columns grid fashion, although each\n     * cell insert can cover multiple elements in the grid - which is tracks using the\n     * aApplied array. Cell inserts in the grid will only occur where there isn't\n     * already a cell in that position.\n     *  @param {object} oSettings dataTables settings object\n     *  @param array {objects} aoSource Layout array from _fnDetectHeader\n     *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n     *  @memberof DataTable#oApi\n     */\n    function _fnDrawHead( oSettings, aoSource, bIncludeHidden )\n    {\n        var i, iLen, j, jLen, k, kLen, n, nLocalTr;\n        var aoLocal = [];\n        var aApplied = [];\n        var iColumns = oSettings.aoColumns.length;\n        var iRowspan, iColspan;\n\n        if ( ! aoSource )\n        {\n            return;\n        }\n\n        if (  bIncludeHidden === undefined )\n        {\n            bIncludeHidden = false;\n        }\n\n        /* Make a copy of the master layout array, but without the visible columns in it */\n        for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\n        {\n            aoLocal[i] = aoSource[i].slice();\n            aoLocal[i].nTr = aoSource[i].nTr;\n\n            /* Remove any columns which are currently hidden */\n            for ( j=iColumns-1 ; j>=0 ; j-- )\n            {\n                if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\n                {\n                    aoLocal[i].splice( j, 1 );\n                }\n            }\n\n            /* Prep the applied array - it needs an element for each row */\n            aApplied.push( [] );\n        }\n\n        for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\n        {\n            nLocalTr = aoLocal[i].nTr;\n\n            /* All cells are going to be replaced, so empty out the row */\n            if ( nLocalTr )\n            {\n                while( (n = nLocalTr.firstChild) )\n                {\n                    nLocalTr.removeChild( n );\n                }\n            }\n\n            for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\n            {\n                iRowspan = 1;\n                iColspan = 1;\n\n                /* Check to see if there is already a cell (row/colspan) covering our target\n                 * insert point. If there is, then there is nothing to do.\n                 */\n                if ( aApplied[i][j] === undefined )\n                {\n                    nLocalTr.appendChild( aoLocal[i][j].cell );\n                    aApplied[i][j] = 1;\n\n                    /* Expand the cell to cover as many rows as needed */\n                    while ( aoLocal[i+iRowspan] !== undefined &&\n                    aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\n                    {\n                        aApplied[i+iRowspan][j] = 1;\n                        iRowspan++;\n                    }\n\n                    /* Expand the cell to cover as many columns as needed */\n                    while ( aoLocal[i][j+iColspan] !== undefined &&\n                    aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\n                    {\n                        /* Must update the applied array over the rows for the columns */\n                        for ( k=0 ; k<iRowspan ; k++ )\n                        {\n                            aApplied[i+k][j+iColspan] = 1;\n                        }\n                        iColspan++;\n                    }\n\n                    /* Do the actual expansion in the DOM */\n                    $(aoLocal[i][j].cell)\n                        .attr('rowspan', iRowspan)\n                        .attr('colspan', iColspan);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Insert the required TR nodes into the table for display\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnDraw( oSettings )\n    {\n        /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n        var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\n        if ( $.inArray( false, aPreDraw ) !== -1 )\n        {\n            _fnProcessingDisplay( oSettings, false );\n            return;\n        }\n\n        var i, iLen, n;\n        var anRows = [];\n        var iRowCount = 0;\n        var asStripeClasses = oSettings.asStripeClasses;\n        var iStripes = asStripeClasses.length;\n        var iOpenRows = oSettings.aoOpenRows.length;\n        var oLang = oSettings.oLanguage;\n        var iInitDisplayStart = oSettings.iInitDisplayStart;\n        var bServerSide = _fnDataSource( oSettings ) == 'ssp';\n        var aiDisplay = oSettings.aiDisplay;\n\n        oSettings.bDrawing = true;\n\n        /* Check and see if we have an initial draw position from state saving */\n        if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\n        {\n            oSettings._iDisplayStart = bServerSide ?\n                iInitDisplayStart :\n                iInitDisplayStart >= oSettings.fnRecordsDisplay() ?\n                    0 :\n                    iInitDisplayStart;\n\n            oSettings.iInitDisplayStart = -1;\n        }\n\n        var iDisplayStart = oSettings._iDisplayStart;\n        var iDisplayEnd = oSettings.fnDisplayEnd();\n\n        /* Server-side processing draw intercept */\n        if ( oSettings.bDeferLoading )\n        {\n            oSettings.bDeferLoading = false;\n            oSettings.iDraw++;\n            _fnProcessingDisplay( oSettings, false );\n        }\n        else if ( !bServerSide )\n        {\n            oSettings.iDraw++;\n        }\n        else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\n        {\n            return;\n        }\n\n        if ( aiDisplay.length !== 0 )\n        {\n            var iStart = bServerSide ? 0 : iDisplayStart;\n            var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\n            for ( var j=iStart ; j<iEnd ; j++ )\n            {\n                var iDataIndex = aiDisplay[j];\n                var aoData = oSettings.aoData[ iDataIndex ];\n                if ( aoData.nTr === null )\n                {\n                    _fnCreateTr( oSettings, iDataIndex );\n                }\n\n                var nRow = aoData.nTr;\n\n                /* Remove the old striping classes and then add the new one */\n                if ( iStripes !== 0 )\n                {\n                    var sStripe = asStripeClasses[ iRowCount % iStripes ];\n                    if ( aoData._sRowStripe != sStripe )\n                    {\n                        $(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\n                        aoData._sRowStripe = sStripe;\n                    }\n                }\n\n                // Row callback functions - might want to manipulate the row\n                // iRowCount and j are not currently documented. Are they at all\n                // useful?\n                _fnCallbackFire( oSettings, 'aoRowCallback', null,\n                    [nRow, aoData._aData, iRowCount, j] );\n\n                anRows.push( nRow );\n                iRowCount++;\n            }\n        }\n        else\n        {\n            /* Table is empty - create a row with an empty message in it */\n            var sZero = oLang.sZeroRecords;\n            if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\n            {\n                sZero = oLang.sLoadingRecords;\n            }\n            else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\n            {\n                sZero = oLang.sEmptyTable;\n            }\n\n            anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\n                .append( $('<td />', {\n                    'valign':  'top',\n                    'colSpan': _fnVisbleColumns( oSettings ),\n                    'class':   oSettings.oClasses.sRowEmpty\n                } ).html( sZero ) )[0];\n        }\n\n        /* Header and footer callbacks */\n        _fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\n            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\n        _fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\n            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\n        var body = $(oSettings.nTBody);\n\n        body.children().detach();\n        body.append( $(anRows) );\n\n        /* Call all required callback functions for the end of a draw */\n        _fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\n\n        /* Draw is complete, sorting and filtering must be as well */\n        oSettings.bSorted = false;\n        oSettings.bFiltered = false;\n        oSettings.bDrawing = false;\n    }\n\n\n    /**\n     * Redraw the table - taking account of the various features which are enabled\n     *  @param {object} oSettings dataTables settings object\n     *  @param {boolean} [holdPosition] Keep the current paging position. By default\n     *    the paging is reset to the first page\n     *  @memberof DataTable#oApi\n     */\n    function _fnReDraw( settings, holdPosition )\n    {\n        var\n            features = settings.oFeatures,\n            sort     = features.bSort,\n            filter   = features.bFilter;\n\n        if ( sort ) {\n            _fnSort( settings );\n        }\n\n        if ( filter ) {\n            _fnFilterComplete( settings, settings.oPreviousSearch );\n        }\n        else {\n            // No filtering, so we want to just use the display master\n            settings.aiDisplay = settings.aiDisplayMaster.slice();\n        }\n\n        if ( holdPosition !== true ) {\n            settings._iDisplayStart = 0;\n        }\n\n        // Let any modules know about the draw hold position state (used by\n        // scrolling internally)\n        settings._drawHold = holdPosition;\n\n        _fnDraw( settings );\n\n        settings._drawHold = false;\n    }\n\n\n    /**\n     * Add the options to the page HTML for the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddOptionsHtml ( oSettings )\n    {\n        var classes = oSettings.oClasses;\n        var table = $(oSettings.nTable);\n        var holding = $('<div/>').insertBefore( table ); // Holding element for speed\n        var features = oSettings.oFeatures;\n\n        // All DataTables are wrapped in a div\n        var insert = $('<div/>', {\n            id:      oSettings.sTableId+'_wrapper',\n            'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\n        } );\n\n        oSettings.nHolding = holding[0];\n        oSettings.nTableWrapper = insert[0];\n        oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n\n        /* Loop over the user set positioning and place the elements as needed */\n        var aDom = oSettings.sDom.split('');\n        var featureNode, cOption, nNewNode, cNext, sAttr, j;\n        for ( var i=0 ; i<aDom.length ; i++ )\n        {\n            featureNode = null;\n            cOption = aDom[i];\n\n            if ( cOption == '<' )\n            {\n                /* New container div */\n                nNewNode = $('<div/>')[0];\n\n                /* Check to see if we should append an id and/or a class name to the container */\n                cNext = aDom[i+1];\n                if ( cNext == \"'\" || cNext == '\"' )\n                {\n                    sAttr = \"\";\n                    j = 2;\n                    while ( aDom[i+j] != cNext )\n                    {\n                        sAttr += aDom[i+j];\n                        j++;\n                    }\n\n                    /* Replace jQuery UI constants @todo depreciated */\n                    if ( sAttr == \"H\" )\n                    {\n                        sAttr = classes.sJUIHeader;\n                    }\n                    else if ( sAttr == \"F\" )\n                    {\n                        sAttr = classes.sJUIFooter;\n                    }\n\n                    /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n                     * breaks the string into parts and applies them as needed\n                     */\n                    if ( sAttr.indexOf('.') != -1 )\n                    {\n                        var aSplit = sAttr.split('.');\n                        nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\n                        nNewNode.className = aSplit[1];\n                    }\n                    else if ( sAttr.charAt(0) == \"#\" )\n                    {\n                        nNewNode.id = sAttr.substr(1, sAttr.length-1);\n                    }\n                    else\n                    {\n                        nNewNode.className = sAttr;\n                    }\n\n                    i += j; /* Move along the position array */\n                }\n\n                insert.append( nNewNode );\n                insert = $(nNewNode);\n            }\n            else if ( cOption == '>' )\n            {\n                /* End container div */\n                insert = insert.parent();\n            }\n            // @todo Move options into their own plugins?\n            else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\n            {\n                /* Length */\n                featureNode = _fnFeatureHtmlLength( oSettings );\n            }\n            else if ( cOption == 'f' && features.bFilter )\n            {\n                /* Filter */\n                featureNode = _fnFeatureHtmlFilter( oSettings );\n            }\n            else if ( cOption == 'r' && features.bProcessing )\n            {\n                /* pRocessing */\n                featureNode = _fnFeatureHtmlProcessing( oSettings );\n            }\n            else if ( cOption == 't' )\n            {\n                /* Table */\n                featureNode = _fnFeatureHtmlTable( oSettings );\n            }\n            else if ( cOption ==  'i' && features.bInfo )\n            {\n                /* Info */\n                featureNode = _fnFeatureHtmlInfo( oSettings );\n            }\n            else if ( cOption == 'p' && features.bPaginate )\n            {\n                /* Pagination */\n                featureNode = _fnFeatureHtmlPaginate( oSettings );\n            }\n            else if ( DataTable.ext.feature.length !== 0 )\n            {\n                /* Plug-in features */\n                var aoFeatures = DataTable.ext.feature;\n                for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\n                {\n                    if ( cOption == aoFeatures[k].cFeature )\n                    {\n                        featureNode = aoFeatures[k].fnInit( oSettings );\n                        break;\n                    }\n                }\n            }\n\n            /* Add to the 2D features array */\n            if ( featureNode )\n            {\n                var aanFeatures = oSettings.aanFeatures;\n\n                if ( ! aanFeatures[cOption] )\n                {\n                    aanFeatures[cOption] = [];\n                }\n\n                aanFeatures[cOption].push( featureNode );\n                insert.append( featureNode );\n            }\n        }\n\n        /* Built our DOM structure - replace the holding div with what we want */\n        holding.replaceWith( insert );\n        oSettings.nHolding = null;\n    }\n\n\n    /**\n     * Use the DOM source to create up an array of header cells. The idea here is to\n     * create a layout grid (array) of rows x columns, which contains a reference\n     * to the cell that that point in the grid (regardless of col/rowspan), such that\n     * any column / row could be removed and the new grid constructed\n     *  @param array {object} aLayout Array to store the calculated layout in\n     *  @param {node} nThead The header/footer element for the table\n     *  @memberof DataTable#oApi\n     */\n    function _fnDetectHeader ( aLayout, nThead )\n    {\n        var nTrs = $(nThead).children('tr');\n        var nTr, nCell;\n        var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n        var bUnique;\n        var fnShiftCol = function ( a, i, j ) {\n            var k = a[i];\n            while ( k[j] ) {\n                j++;\n            }\n            return j;\n        };\n\n        aLayout.splice( 0, aLayout.length );\n\n        /* We know how many rows there are in the layout - so prep it */\n        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n        {\n            aLayout.push( [] );\n        }\n\n        /* Calculate a layout array */\n        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n        {\n            nTr = nTrs[i];\n            iColumn = 0;\n\n            /* For every cell in the row... */\n            nCell = nTr.firstChild;\n            while ( nCell ) {\n                if ( nCell.nodeName.toUpperCase() == \"TD\" ||\n                    nCell.nodeName.toUpperCase() == \"TH\" )\n                {\n                    /* Get the col and rowspan attributes from the DOM and sanitise them */\n                    iColspan = nCell.getAttribute('colspan') * 1;\n                    iRowspan = nCell.getAttribute('rowspan') * 1;\n                    iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\n                    iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\n\n                    /* There might be colspan cells already in this row, so shift our target\n                     * accordingly\n                     */\n                    iColShifted = fnShiftCol( aLayout, i, iColumn );\n\n                    /* Cache calculation for unique columns */\n                    bUnique = iColspan === 1 ? true : false;\n\n                    /* If there is col / rowspan, copy the information into the layout grid */\n                    for ( l=0 ; l<iColspan ; l++ )\n                    {\n                        for ( k=0 ; k<iRowspan ; k++ )\n                        {\n                            aLayout[i+k][iColShifted+l] = {\n                                \"cell\": nCell,\n                                \"unique\": bUnique\n                            };\n                            aLayout[i+k].nTr = nTr;\n                        }\n                    }\n                }\n                nCell = nCell.nextSibling;\n            }\n        }\n    }\n\n\n    /**\n     * Get an array of unique th elements, one for each column\n     *  @param {object} oSettings dataTables settings object\n     *  @param {node} nHeader automatically detect the layout from this node - optional\n     *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n     *  @returns array {node} aReturn list of unique th's\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetUniqueThs ( oSettings, nHeader, aLayout )\n    {\n        var aReturn = [];\n        if ( !aLayout )\n        {\n            aLayout = oSettings.aoHeader;\n            if ( nHeader )\n            {\n                aLayout = [];\n                _fnDetectHeader( aLayout, nHeader );\n            }\n        }\n\n        for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\n        {\n            for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\n            {\n                if ( aLayout[i][j].unique &&\n                    (!aReturn[j] || !oSettings.bSortCellsTop) )\n                {\n                    aReturn[j] = aLayout[i][j].cell;\n                }\n            }\n        }\n\n        return aReturn;\n    }\n\n    /**\n     * Create an Ajax call based on the table's settings, taking into account that\n     * parameters can have multiple forms, and backwards compatibility.\n     *\n     * @param {object} oSettings dataTables settings object\n     * @param {array} data Data to send to the server, required by\n     *     DataTables - may be augmented by developer callbacks\n     * @param {function} fn Callback function to run when data is obtained\n     */\n    function _fnBuildAjax( oSettings, data, fn )\n    {\n        // Compatibility with 1.9-, allow fnServerData and event to manipulate\n        _fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\n\n        // Convert to object based for 1.10+ if using the old array scheme which can\n        // come from server-side processing or serverParams\n        if ( data && $.isArray(data) ) {\n            var tmp = {};\n            var rbracket = /(.*?)\\[\\]$/;\n\n            $.each( data, function (key, val) {\n                var match = val.name.match(rbracket);\n\n                if ( match ) {\n                    // Support for arrays\n                    var name = match[0];\n\n                    if ( ! tmp[ name ] ) {\n                        tmp[ name ] = [];\n                    }\n                    tmp[ name ].push( val.value );\n                }\n                else {\n                    tmp[val.name] = val.value;\n                }\n            } );\n            data = tmp;\n        }\n\n        var ajaxData;\n        var ajax = oSettings.ajax;\n        var instance = oSettings.oInstance;\n        var callback = function ( json ) {\n            _fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\n            fn( json );\n        };\n\n        if ( $.isPlainObject( ajax ) && ajax.data )\n        {\n            ajaxData = ajax.data;\n\n            var newData = $.isFunction( ajaxData ) ?\n                ajaxData( data, oSettings ) :  // fn can manipulate data or return\n                ajaxData;                      // an object object or array to merge\n\n            // If the function returned something, use that alone\n            data = $.isFunction( ajaxData ) && newData ?\n                newData :\n                $.extend( true, data, newData );\n\n            // Remove the data property as we've resolved it already and don't want\n            // jQuery to do it again (it is restored at the end of the function)\n            delete ajax.data;\n        }\n\n        var baseAjax = {\n            \"data\": data,\n            \"success\": function (json) {\n                var error = json.error || json.sError;\n                if ( error ) {\n                    _fnLog( oSettings, 0, error );\n                }\n\n                oSettings.json = json;\n                callback( json );\n            },\n            \"dataType\": \"json\",\n            \"cache\": false,\n            \"type\": oSettings.sServerMethod,\n            \"error\": function (xhr, error, thrown) {\n                var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\n\n                if ( $.inArray( true, ret ) === -1 ) {\n                    if ( error == \"parsererror\" ) {\n                        _fnLog( oSettings, 0, 'Invalid JSON response', 1 );\n                    }\n                    else if ( xhr.readyState === 4 ) {\n                        _fnLog( oSettings, 0, 'Ajax error', 7 );\n                    }\n                }\n\n                _fnProcessingDisplay( oSettings, false );\n            }\n        };\n\n        // Store the data submitted for the API\n        oSettings.oAjaxData = data;\n\n        // Allow plug-ins and external processes to modify the data\n        _fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\n\n        if ( oSettings.fnServerData )\n        {\n            // DataTables 1.9- compatibility\n            oSettings.fnServerData.call( instance,\n                oSettings.sAjaxSource,\n                $.map( data, function (val, key) { // Need to convert back to 1.9 trad format\n                    return { name: key, value: val };\n                } ),\n                callback,\n                oSettings\n            );\n        }\n        else if ( oSettings.sAjaxSource || typeof ajax === 'string' )\n        {\n            // DataTables 1.9- compatibility\n            oSettings.jqXHR = $.ajax( $.extend( baseAjax, {\n                url: ajax || oSettings.sAjaxSource\n            } ) );\n        }\n        else if ( $.isFunction( ajax ) )\n        {\n            // Is a function - let the caller define what needs to be done\n            oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\n        }\n        else\n        {\n            // Object to extend the base settings\n            oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\n\n            // Restore for next time around\n            ajax.data = ajaxData;\n        }\n    }\n\n\n    /**\n     * Update the table using an Ajax call\n     *  @param {object} settings dataTables settings object\n     *  @returns {boolean} Block the table drawing or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnAjaxUpdate( settings )\n    {\n        if ( settings.bAjaxDataGet ) {\n            settings.iDraw++;\n            _fnProcessingDisplay( settings, true );\n\n            _fnBuildAjax(\n                settings,\n                _fnAjaxParameters( settings ),\n                function(json) {\n                    _fnAjaxUpdateDraw( settings, json );\n                }\n            );\n\n            return false;\n        }\n        return true;\n    }\n\n\n    /**\n     * Build up the parameters in an object needed for a server-side processing\n     * request. Note that this is basically done twice, is different ways - a modern\n     * method which is used by default in DataTables 1.10 which uses objects and\n     * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n     * the sAjaxSource option is used in the initialisation, or the legacyAjax\n     * option is set.\n     *  @param {object} oSettings dataTables settings object\n     *  @returns {bool} block the table drawing or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnAjaxParameters( settings )\n    {\n        var\n            columns = settings.aoColumns,\n            columnCount = columns.length,\n            features = settings.oFeatures,\n            preSearch = settings.oPreviousSearch,\n            preColSearch = settings.aoPreSearchCols,\n            i, data = [], dataProp, column, columnSearch,\n            sort = _fnSortFlatten( settings ),\n            displayStart = settings._iDisplayStart,\n            displayLength = features.bPaginate !== false ?\n                settings._iDisplayLength :\n                -1;\n\n        var param = function ( name, value ) {\n            data.push( { 'name': name, 'value': value } );\n        };\n\n        // DataTables 1.9- compatible method\n        param( 'sEcho',          settings.iDraw );\n        param( 'iColumns',       columnCount );\n        param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\n        param( 'iDisplayStart',  displayStart );\n        param( 'iDisplayLength', displayLength );\n\n        // DataTables 1.10+ method\n        var d = {\n            draw:    settings.iDraw,\n            columns: [],\n            order:   [],\n            start:   displayStart,\n            length:  displayLength,\n            search:  {\n                value: preSearch.sSearch,\n                regex: preSearch.bRegex\n            }\n        };\n\n        for ( i=0 ; i<columnCount ; i++ ) {\n            column = columns[i];\n            columnSearch = preColSearch[i];\n            dataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\n\n            d.columns.push( {\n                data:       dataProp,\n                name:       column.sName,\n                searchable: column.bSearchable,\n                orderable:  column.bSortable,\n                search:     {\n                    value: columnSearch.sSearch,\n                    regex: columnSearch.bRegex\n                }\n            } );\n\n            param( \"mDataProp_\"+i, dataProp );\n\n            if ( features.bFilter ) {\n                param( 'sSearch_'+i,     columnSearch.sSearch );\n                param( 'bRegex_'+i,      columnSearch.bRegex );\n                param( 'bSearchable_'+i, column.bSearchable );\n            }\n\n            if ( features.bSort ) {\n                param( 'bSortable_'+i, column.bSortable );\n            }\n        }\n\n        if ( features.bFilter ) {\n            param( 'sSearch', preSearch.sSearch );\n            param( 'bRegex', preSearch.bRegex );\n        }\n\n        if ( features.bSort ) {\n            $.each( sort, function ( i, val ) {\n                d.order.push( { column: val.col, dir: val.dir } );\n\n                param( 'iSortCol_'+i, val.col );\n                param( 'sSortDir_'+i, val.dir );\n            } );\n\n            param( 'iSortingCols', sort.length );\n        }\n\n        // If the legacy.ajax parameter is null, then we automatically decide which\n        // form to use, based on sAjaxSource\n        var legacy = DataTable.ext.legacy.ajax;\n        if ( legacy === null ) {\n            return settings.sAjaxSource ? data : d;\n        }\n\n        // Otherwise, if legacy has been specified then we use that to decide on the\n        // form\n        return legacy ? data : d;\n    }\n\n\n    /**\n     * Data the data from the server (nuking the old) and redraw the table\n     *  @param {object} oSettings dataTables settings object\n     *  @param {object} json json data return from the server.\n     *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n     *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n     *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n     *  @param {array} json.aaData The data to display on this page\n     *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n     *  @memberof DataTable#oApi\n     */\n    function _fnAjaxUpdateDraw ( settings, json )\n    {\n        // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n        // Support both\n        var compat = function ( old, modern ) {\n            return json[old] !== undefined ? json[old] : json[modern];\n        };\n\n        var data = _fnAjaxDataSrc( settings, json );\n        var draw            = compat( 'sEcho',                'draw' );\n        var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\n        var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\n\n        if ( draw ) {\n            // Protect against out of sequence returns\n            if ( draw*1 < settings.iDraw ) {\n                return;\n            }\n            settings.iDraw = draw * 1;\n        }\n\n        _fnClearTable( settings );\n        settings._iRecordsTotal   = parseInt(recordsTotal, 10);\n        settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\n        for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n            _fnAddData( settings, data[i] );\n        }\n        settings.aiDisplay = settings.aiDisplayMaster.slice();\n\n        settings.bAjaxDataGet = false;\n        _fnDraw( settings );\n\n        if ( ! settings._bInitComplete ) {\n            _fnInitComplete( settings, json );\n        }\n\n        settings.bAjaxDataGet = true;\n        _fnProcessingDisplay( settings, false );\n    }\n\n\n    /**\n     * Get the data from the JSON data source to use for drawing a table. Using\n     * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n     * source object, or from a processing function.\n     *  @param {object} oSettings dataTables settings object\n     *  @param  {object} json Data source object / array from the server\n     *  @return {array} Array of data to use\n     */\n    function _fnAjaxDataSrc ( oSettings, json )\n    {\n        var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\n            oSettings.ajax.dataSrc :\n            oSettings.sAjaxDataProp; // Compatibility with 1.9-.\n\n        // Compatibility with 1.9-. In order to read from aaData, check if the\n        // default has been changed, if not, check for aaData\n        if ( dataSrc === 'data' ) {\n            return json.aaData || json[dataSrc];\n        }\n\n        return dataSrc !== \"\" ?\n            _fnGetObjectDataFn( dataSrc )( json ) :\n            json;\n    }\n\n    /**\n     * Generate the node required for filtering text\n     *  @returns {node} Filter control element\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlFilter ( settings )\n    {\n        var classes = settings.oClasses;\n        var tableId = settings.sTableId;\n        var language = settings.oLanguage;\n        var previousSearch = settings.oPreviousSearch;\n        var features = settings.aanFeatures;\n        var input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\n\n        var str = language.sSearch;\n        str = str.match(/_INPUT_/) ?\n            str.replace('_INPUT_', input) :\n        str+input;\n\n        var filter = $('<div/>', {\n            'id': ! features.f ? tableId+'_filter' : null,\n            'class': classes.sFilter\n        } )\n            .append( $('<label/>' ).append( str ) );\n\n        var searchFn = function() {\n            /* Update all other filter input elements for the new display */\n            var n = features.f;\n            var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n\n            /* Now do the filter */\n            if ( val != previousSearch.sSearch ) {\n                _fnFilterComplete( settings, {\n                    \"sSearch\": val,\n                    \"bRegex\": previousSearch.bRegex,\n                    \"bSmart\": previousSearch.bSmart ,\n                    \"bCaseInsensitive\": previousSearch.bCaseInsensitive\n                } );\n\n                // Need to redraw, without resorting\n                settings._iDisplayStart = 0;\n                _fnDraw( settings );\n            }\n        };\n\n        var searchDelay = settings.searchDelay !== null ?\n            settings.searchDelay :\n            _fnDataSource( settings ) === 'ssp' ?\n                400 :\n                0;\n\n        var jqFilter = $('input', filter)\n            .val( previousSearch.sSearch )\n            .attr( 'placeholder', language.sSearchPlaceholder )\n            .bind(\n                'keyup.DT search.DT input.DT paste.DT cut.DT',\n                searchDelay ?\n                    _fnThrottle( searchFn, searchDelay ) :\n                    searchFn\n            )\n            .bind( 'keypress.DT', function(e) {\n                /* Prevent form submission */\n                if ( e.keyCode == 13 ) {\n                    return false;\n                }\n            } )\n            .attr('aria-controls', tableId);\n\n        // Update the input elements whenever the table is filtered\n        $(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\n            if ( settings === s ) {\n                // IE9 throws an 'unknown error' if document.activeElement is used\n                // inside an iframe or frame...\n                try {\n                    if ( jqFilter[0] !== document.activeElement ) {\n                        jqFilter.val( previousSearch.sSearch );\n                    }\n                }\n                catch ( e ) {}\n            }\n        } );\n\n        return filter[0];\n    }\n\n\n    /**\n     * Filter the table using both the global filter and column based filtering\n     *  @param {object} oSettings dataTables settings object\n     *  @param {object} oSearch search information\n     *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterComplete ( oSettings, oInput, iForce )\n    {\n        var oPrevSearch = oSettings.oPreviousSearch;\n        var aoPrevSearch = oSettings.aoPreSearchCols;\n        var fnSaveFilter = function ( oFilter ) {\n            /* Save the filtering values */\n            oPrevSearch.sSearch = oFilter.sSearch;\n            oPrevSearch.bRegex = oFilter.bRegex;\n            oPrevSearch.bSmart = oFilter.bSmart;\n            oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n        };\n        var fnRegex = function ( o ) {\n            // Backwards compatibility with the bEscapeRegex option\n            return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n        };\n\n        // Resolve any column types that are unknown due to addition or invalidation\n        // @todo As per sort - can this be moved into an event handler?\n        _fnColumnTypes( oSettings );\n\n        /* In server-side processing all filtering is done by the server, so no point hanging around here */\n        if ( _fnDataSource( oSettings ) != 'ssp' )\n        {\n            /* Global filter */\n            _fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\n            fnSaveFilter( oInput );\n\n            /* Now do the individual column filter */\n            for ( var i=0 ; i<aoPrevSearch.length ; i++ )\n            {\n                _fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\n                    aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\n            }\n\n            /* Custom filtering */\n            _fnFilterCustom( oSettings );\n        }\n        else\n        {\n            fnSaveFilter( oInput );\n        }\n\n        /* Tell the draw function we have been filtering */\n        oSettings.bFiltered = true;\n        _fnCallbackFire( oSettings, null, 'search', [oSettings] );\n    }\n\n\n    /**\n     * Apply custom filtering functions\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterCustom( settings )\n    {\n        var filters = DataTable.ext.search;\n        var displayRows = settings.aiDisplay;\n        var row, rowIdx;\n\n        for ( var i=0, ien=filters.length ; i<ien ; i++ ) {\n            var rows = [];\n\n            // Loop over each row and see if it should be included\n            for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\n                rowIdx = displayRows[ j ];\n                row = settings.aoData[ rowIdx ];\n\n                if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\n                    rows.push( rowIdx );\n                }\n            }\n\n            // So the array reference doesn't break set the results into the\n            // existing array\n            displayRows.length = 0;\n            $.merge( displayRows, rows );\n        }\n    }\n\n\n    /**\n     * Filter the table on a per-column basis\n     *  @param {object} oSettings dataTables settings object\n     *  @param {string} sInput string to filter on\n     *  @param {int} iColumn column to filter\n     *  @param {bool} bRegex treat search string as a regular expression or not\n     *  @param {bool} bSmart use smart filtering or not\n     *  @param {bool} bCaseInsensitive Do case insenstive matching or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\n    {\n        if ( searchStr === '' ) {\n            return;\n        }\n\n        var data;\n        var display = settings.aiDisplay;\n        var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\n\n        for ( var i=display.length-1 ; i>=0 ; i-- ) {\n            data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\n\n            if ( ! rpSearch.test( data ) ) {\n                display.splice( i, 1 );\n            }\n        }\n    }\n\n\n    /**\n     * Filter the data table based on user input and draw the table\n     *  @param {object} settings dataTables settings object\n     *  @param {string} input string to filter on\n     *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n     *  @param {bool} regex treat as a regular expression or not\n     *  @param {bool} smart perform smart filtering or not\n     *  @param {bool} caseInsensitive Do case insenstive matching or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilter( settings, input, force, regex, smart, caseInsensitive )\n    {\n        var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\n        var prevSearch = settings.oPreviousSearch.sSearch;\n        var displayMaster = settings.aiDisplayMaster;\n        var display, invalidated, i;\n\n        // Need to take account of custom filtering functions - always filter\n        if ( DataTable.ext.search.length !== 0 ) {\n            force = true;\n        }\n\n        // Check if any of the rows were invalidated\n        invalidated = _fnFilterData( settings );\n\n        // If the input is blank - we just want the full data set\n        if ( input.length <= 0 ) {\n            settings.aiDisplay = displayMaster.slice();\n        }\n        else {\n            // New search - start from the master array\n            if ( invalidated ||\n                force ||\n                prevSearch.length > input.length ||\n                input.indexOf(prevSearch) !== 0 ||\n                settings.bSorted // On resort, the display master needs to be\n                                 // re-filtered since indexes will have changed\n            ) {\n                settings.aiDisplay = displayMaster.slice();\n            }\n\n            // Search the display array\n            display = settings.aiDisplay;\n\n            for ( i=display.length-1 ; i>=0 ; i-- ) {\n                if ( ! rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\n                    display.splice( i, 1 );\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Build a regular expression object suitable for searching a table\n     *  @param {string} sSearch string to search for\n     *  @param {bool} bRegex treat as a regular expression or not\n     *  @param {bool} bSmart perform smart filtering or not\n     *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n     *  @returns {RegExp} constructed object\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\n    {\n        search = regex ?\n            search :\n            _fnEscapeRegex( search );\n\n        if ( smart ) {\n            /* For smart filtering we want to allow the search to work regardless of\n             * word order. We also want double quoted text to be preserved, so word\n             * order is important - a la google. So this is what we want to\n             * generate:\n             *\n             * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n             */\n            var a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {\n                if ( word.charAt(0) === '\"' ) {\n                    var m = word.match( /^\"(.*)\"$/ );\n                    word = m ? m[1] : word;\n                }\n\n                return word.replace('\"', '');\n            } );\n\n            search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\n        }\n\n        return new RegExp( search, caseInsensitive ? 'i' : '' );\n    }\n\n\n    /**\n     * Escape a string such that it can be used in a regular expression\n     *  @param {string} sVal string to escape\n     *  @returns {string} escaped string\n     *  @memberof DataTable#oApi\n     */\n    var _fnEscapeRegex = DataTable.util.escapeRegex;\n\n    var __filter_div = $('<div>')[0];\n    var __filter_div_textContent = __filter_div.textContent !== undefined;\n\n    // Update the filtering data for each row if needed (by invalidation or first run)\n    function _fnFilterData ( settings )\n    {\n        var columns = settings.aoColumns;\n        var column;\n        var i, j, ien, jen, filterData, cellData, row;\n        var fomatters = DataTable.ext.type.search;\n        var wasInvalidated = false;\n\n        for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n            row = settings.aoData[i];\n\n            if ( ! row._aFilterData ) {\n                filterData = [];\n\n                for ( j=0, jen=columns.length ; j<jen ; j++ ) {\n                    column = columns[j];\n\n                    if ( column.bSearchable ) {\n                        cellData = _fnGetCellData( settings, i, j, 'filter' );\n\n                        if ( fomatters[ column.sType ] ) {\n                            cellData = fomatters[ column.sType ]( cellData );\n                        }\n\n                        // Search in DataTables 1.10 is string based. In 1.11 this\n                        // should be altered to also allow strict type checking.\n                        if ( cellData === null ) {\n                            cellData = '';\n                        }\n\n                        if ( typeof cellData !== 'string' && cellData.toString ) {\n                            cellData = cellData.toString();\n                        }\n                    }\n                    else {\n                        cellData = '';\n                    }\n\n                    // If it looks like there is an HTML entity in the string,\n                    // attempt to decode it so sorting works as expected. Note that\n                    // we could use a single line of jQuery to do this, but the DOM\n                    // method used here is much faster http://jsperf.com/html-decode\n                    if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\n                        __filter_div.innerHTML = cellData;\n                        cellData = __filter_div_textContent ?\n                            __filter_div.textContent :\n                            __filter_div.innerText;\n                    }\n\n                    if ( cellData.replace ) {\n                        cellData = cellData.replace(/[\\r\\n]/g, '');\n                    }\n\n                    filterData.push( cellData );\n                }\n\n                row._aFilterData = filterData;\n                row._sFilterRow = filterData.join('  ');\n                wasInvalidated = true;\n            }\n        }\n\n        return wasInvalidated;\n    }\n\n\n    /**\n     * Convert from the internal Hungarian notation to camelCase for external\n     * interaction\n     *  @param {object} obj Object to convert\n     *  @returns {object} Inverted object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSearchToCamel ( obj )\n    {\n        return {\n            search:          obj.sSearch,\n            smart:           obj.bSmart,\n            regex:           obj.bRegex,\n            caseInsensitive: obj.bCaseInsensitive\n        };\n    }\n\n\n\n    /**\n     * Convert from camelCase notation to the internal Hungarian. We could use the\n     * Hungarian convert function here, but this is cleaner\n     *  @param {object} obj Object to convert\n     *  @returns {object} Inverted object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSearchToHung ( obj )\n    {\n        return {\n            sSearch:          obj.search,\n            bSmart:           obj.smart,\n            bRegex:           obj.regex,\n            bCaseInsensitive: obj.caseInsensitive\n        };\n    }\n\n    /**\n     * Generate the node required for the info display\n     *  @param {object} oSettings dataTables settings object\n     *  @returns {node} Information element\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlInfo ( settings )\n    {\n        var\n            tid = settings.sTableId,\n            nodes = settings.aanFeatures.i,\n            n = $('<div/>', {\n                'class': settings.oClasses.sInfo,\n                'id': ! nodes ? tid+'_info' : null\n            } );\n\n        if ( ! nodes ) {\n            // Update display on each draw\n            settings.aoDrawCallback.push( {\n                \"fn\": _fnUpdateInfo,\n                \"sName\": \"information\"\n            } );\n\n            n\n                .attr( 'role', 'status' )\n                .attr( 'aria-live', 'polite' );\n\n            // Table is described by our info div\n            $(settings.nTable).attr( 'aria-describedby', tid+'_info' );\n        }\n\n        return n[0];\n    }\n\n\n    /**\n     * Update the information elements in the display\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnUpdateInfo ( settings )\n    {\n        /* Show information about the table */\n        var nodes = settings.aanFeatures.i;\n        if ( nodes.length === 0 ) {\n            return;\n        }\n\n        var\n            lang  = settings.oLanguage,\n            start = settings._iDisplayStart+1,\n            end   = settings.fnDisplayEnd(),\n            max   = settings.fnRecordsTotal(),\n            total = settings.fnRecordsDisplay(),\n            out   = total ?\n                lang.sInfo :\n                lang.sInfoEmpty;\n\n        if ( total !== max ) {\n            /* Record set after filtering */\n            out += ' ' + lang.sInfoFiltered;\n        }\n\n        // Convert the macros\n        out += lang.sInfoPostFix;\n        out = _fnInfoMacros( settings, out );\n\n        var callback = lang.fnInfoCallback;\n        if ( callback !== null ) {\n            out = callback.call( settings.oInstance,\n                settings, start, end, max, total, out\n            );\n        }\n\n        $(nodes).html( out );\n    }\n\n\n    function _fnInfoMacros ( settings, str )\n    {\n        // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n        // internally\n        var\n            formatter  = settings.fnFormatNumber,\n            start      = settings._iDisplayStart+1,\n            len        = settings._iDisplayLength,\n            vis        = settings.fnRecordsDisplay(),\n            all        = len === -1;\n\n        return str.\n        replace(/_START_/g, formatter.call( settings, start ) ).\n        replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\n        replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\n        replace(/_TOTAL_/g, formatter.call( settings, vis ) ).\n        replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\n        replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\n    }\n\n\n\n    /**\n     * Draw the table for the first time, adding all required features\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnInitialise ( settings )\n    {\n        var i, iLen, iAjaxStart=settings.iInitDisplayStart;\n        var columns = settings.aoColumns, column;\n        var features = settings.oFeatures;\n        var deferLoading = settings.bDeferLoading; // value modified by the draw\n\n        /* Ensure that the table data is fully initialised */\n        if ( ! settings.bInitialised ) {\n            setTimeout( function(){ _fnInitialise( settings ); }, 200 );\n            return;\n        }\n\n        /* Show the display HTML options */\n        _fnAddOptionsHtml( settings );\n\n        /* Build and draw the header / footer for the table */\n        _fnBuildHead( settings );\n        _fnDrawHead( settings, settings.aoHeader );\n        _fnDrawHead( settings, settings.aoFooter );\n\n        /* Okay to show that something is going on now */\n        _fnProcessingDisplay( settings, true );\n\n        /* Calculate sizes for columns */\n        if ( features.bAutoWidth ) {\n            _fnCalculateColumnWidths( settings );\n        }\n\n        for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\n            column = columns[i];\n\n            if ( column.sWidth ) {\n                column.nTh.style.width = _fnStringToCss( column.sWidth );\n            }\n        }\n\n        _fnCallbackFire( settings, null, 'preInit', [settings] );\n\n        // If there is default sorting required - let's do it. The sort function\n        // will do the drawing for us. Otherwise we draw the table regardless of the\n        // Ajax source - this allows the table to look initialised for Ajax sourcing\n        // data (show 'loading' message possibly)\n        _fnReDraw( settings );\n\n        // Server-side processing init complete is done by _fnAjaxUpdateDraw\n        var dataSrc = _fnDataSource( settings );\n        if ( dataSrc != 'ssp' || deferLoading ) {\n            // if there is an ajax source load the data\n            if ( dataSrc == 'ajax' ) {\n                _fnBuildAjax( settings, [], function(json) {\n                    var aData = _fnAjaxDataSrc( settings, json );\n\n                    // Got the data - add it to the table\n                    for ( i=0 ; i<aData.length ; i++ ) {\n                        _fnAddData( settings, aData[i] );\n                    }\n\n                    // Reset the init display for cookie saving. We've already done\n                    // a filter, and therefore cleared it before. So we need to make\n                    // it appear 'fresh'\n                    settings.iInitDisplayStart = iAjaxStart;\n\n                    _fnReDraw( settings );\n\n                    _fnProcessingDisplay( settings, false );\n                    _fnInitComplete( settings, json );\n                }, settings );\n            }\n            else {\n                _fnProcessingDisplay( settings, false );\n                _fnInitComplete( settings );\n            }\n        }\n    }\n\n\n    /**\n     * Draw the table for the first time, adding all required features\n     *  @param {object} oSettings dataTables settings object\n     *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n     *    with client-side processing (optional)\n     *  @memberof DataTable#oApi\n     */\n    function _fnInitComplete ( settings, json )\n    {\n        settings._bInitComplete = true;\n\n        // When data was added after the initialisation (data or Ajax) we need to\n        // calculate the column sizing\n        if ( json || settings.oInit.aaData ) {\n            _fnAdjustColumnSizing( settings );\n        }\n\n        _fnCallbackFire( settings, null, 'plugin-init', [settings, json] );\n        _fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\n    }\n\n\n    function _fnLengthChange ( settings, val )\n    {\n        var len = parseInt( val, 10 );\n        settings._iDisplayLength = len;\n\n        _fnLengthOverflow( settings );\n\n        // Fire length change event\n        _fnCallbackFire( settings, null, 'length', [settings, len] );\n    }\n\n\n    /**\n     * Generate the node required for user display length changing\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Display length feature node\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlLength ( settings )\n    {\n        var\n            classes  = settings.oClasses,\n            tableId  = settings.sTableId,\n            menu     = settings.aLengthMenu,\n            d2       = $.isArray( menu[0] ),\n            lengths  = d2 ? menu[0] : menu,\n            language = d2 ? menu[1] : menu;\n\n        var select = $('<select/>', {\n            'name':          tableId+'_length',\n            'aria-controls': tableId,\n            'class':         classes.sLengthSelect\n        } );\n\n        for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\n            select[0][ i ] = new Option( language[i], lengths[i] );\n        }\n\n        var div = $('<div><label/></div>').addClass( classes.sLength );\n        if ( ! settings.aanFeatures.l ) {\n            div[0].id = tableId+'_length';\n        }\n\n        div.children().append(\n            settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\n        );\n\n        // Can't use `select` variable as user might provide their own and the\n        // reference is broken by the use of outerHTML\n        $('select', div)\n            .val( settings._iDisplayLength )\n            .bind( 'change.DT', function(e) {\n                _fnLengthChange( settings, $(this).val() );\n                _fnDraw( settings );\n            } );\n\n        // Update node value whenever anything changes the table's length\n        $(settings.nTable).bind( 'length.dt.DT', function (e, s, len) {\n            if ( settings === s ) {\n                $('select', div).val( len );\n            }\n        } );\n\n        return div[0];\n    }\n\n\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Note that most of the paging logic is done in\n     * DataTable.ext.pager\n     */\n\n    /**\n     * Generate the node required for default pagination\n     *  @param {object} oSettings dataTables settings object\n     *  @returns {node} Pagination feature node\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlPaginate ( settings )\n    {\n        var\n            type   = settings.sPaginationType,\n            plugin = DataTable.ext.pager[ type ],\n            modern = typeof plugin === 'function',\n            redraw = function( settings ) {\n                _fnDraw( settings );\n            },\n            node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\n            features = settings.aanFeatures;\n\n        if ( ! modern ) {\n            plugin.fnInit( settings, node, redraw );\n        }\n\n        /* Add a draw callback for the pagination on first instance, to update the paging display */\n        if ( ! features.p )\n        {\n            node.id = settings.sTableId+'_paginate';\n\n            settings.aoDrawCallback.push( {\n                \"fn\": function( settings ) {\n                    if ( modern ) {\n                        var\n                            start      = settings._iDisplayStart,\n                            len        = settings._iDisplayLength,\n                            visRecords = settings.fnRecordsDisplay(),\n                            all        = len === -1,\n                            page = all ? 0 : Math.ceil( start / len ),\n                            pages = all ? 1 : Math.ceil( visRecords / len ),\n                            buttons = plugin(page, pages),\n                            i, ien;\n\n                        for ( i=0, ien=features.p.length ; i<ien ; i++ ) {\n                            _fnRenderer( settings, 'pageButton' )(\n                                settings, features.p[i], i, buttons, page, pages\n                            );\n                        }\n                    }\n                    else {\n                        plugin.fnUpdate( settings, redraw );\n                    }\n                },\n                \"sName\": \"pagination\"\n            } );\n        }\n\n        return node;\n    }\n\n\n    /**\n     * Alter the display settings to change the page\n     *  @param {object} settings DataTables settings object\n     *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n     *    \"next\" or \"last\" or page number to jump to (integer)\n     *  @param [bool] redraw Automatically draw the update or not\n     *  @returns {bool} true page has changed, false - no change\n     *  @memberof DataTable#oApi\n     */\n    function _fnPageChange ( settings, action, redraw )\n    {\n        var\n            start     = settings._iDisplayStart,\n            len       = settings._iDisplayLength,\n            records   = settings.fnRecordsDisplay();\n\n        if ( records === 0 || len === -1 )\n        {\n            start = 0;\n        }\n        else if ( typeof action === \"number\" )\n        {\n            start = action * len;\n\n            if ( start > records )\n            {\n                start = 0;\n            }\n        }\n        else if ( action == \"first\" )\n        {\n            start = 0;\n        }\n        else if ( action == \"previous\" )\n        {\n            start = len >= 0 ?\n            start - len :\n                0;\n\n            if ( start < 0 )\n            {\n                start = 0;\n            }\n        }\n        else if ( action == \"next\" )\n        {\n            if ( start + len < records )\n            {\n                start += len;\n            }\n        }\n        else if ( action == \"last\" )\n        {\n            start = Math.floor( (records-1) / len) * len;\n        }\n        else\n        {\n            _fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\n        }\n\n        var changed = settings._iDisplayStart !== start;\n        settings._iDisplayStart = start;\n\n        if ( changed ) {\n            _fnCallbackFire( settings, null, 'page', [settings] );\n\n            if ( redraw ) {\n                _fnDraw( settings );\n            }\n        }\n\n        return changed;\n    }\n\n\n\n    /**\n     * Generate the node required for the processing node\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Processing element\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlProcessing ( settings )\n    {\n        return $('<div/>', {\n            'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\n            'class': settings.oClasses.sProcessing\n        } )\n            .html( settings.oLanguage.sProcessing )\n            .insertBefore( settings.nTable )[0];\n    }\n\n\n    /**\n     * Display or hide the processing indicator\n     *  @param {object} settings dataTables settings object\n     *  @param {bool} show Show the processing indicator (true) or not (false)\n     *  @memberof DataTable#oApi\n     */\n    function _fnProcessingDisplay ( settings, show )\n    {\n        if ( settings.oFeatures.bProcessing ) {\n            $(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\n        }\n\n        _fnCallbackFire( settings, null, 'processing', [settings, show] );\n    }\n\n    /**\n     * Add any control elements for the table - specifically scrolling\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Node to add to the DOM\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlTable ( settings )\n    {\n        var table = $(settings.nTable);\n\n        // Add the ARIA grid role to the table\n        table.attr( 'role', 'grid' );\n\n        // Scrolling from here on in\n        var scroll = settings.oScroll;\n\n        if ( scroll.sX === '' && scroll.sY === '' ) {\n            return settings.nTable;\n        }\n\n        var scrollX = scroll.sX;\n        var scrollY = scroll.sY;\n        var classes = settings.oClasses;\n        var caption = table.children('caption');\n        var captionSide = caption.length ? caption[0]._captionSide : null;\n        var headerClone = $( table[0].cloneNode(false) );\n        var footerClone = $( table[0].cloneNode(false) );\n        var footer = table.children('tfoot');\n        var _div = '<div/>';\n        var size = function ( s ) {\n            return !s ? null : _fnStringToCss( s );\n        };\n\n        if ( ! footer.length ) {\n            footer = null;\n        }\n\n        /*\n         * The HTML structure that we want to generate in this function is:\n         *  div - scroller\n         *    div - scroll head\n         *      div - scroll head inner\n         *        table - scroll head table\n         *          thead - thead\n         *    div - scroll body\n         *      table - table (master table)\n         *        thead - thead clone for sizing\n         *        tbody - tbody\n         *    div - scroll foot\n         *      div - scroll foot inner\n         *        table - scroll foot table\n         *          tfoot - tfoot\n         */\n        var scroller = $( _div, { 'class': classes.sScrollWrapper } )\n            .append(\n                $(_div, { 'class': classes.sScrollHead } )\n                    .css( {\n                        overflow: 'hidden',\n                        position: 'relative',\n                        border: 0,\n                        width: scrollX ? size(scrollX) : '100%'\n                    } )\n                    .append(\n                        $(_div, { 'class': classes.sScrollHeadInner } )\n                            .css( {\n                                'box-sizing': 'content-box',\n                                width: scroll.sXInner || '100%'\n                            } )\n                            .append(\n                                headerClone\n                                    .removeAttr('id')\n                                    .css( 'margin-left', 0 )\n                                    .append( captionSide === 'top' ? caption : null )\n                                    .append(\n                                        table.children('thead')\n                                    )\n                            )\n                    )\n            )\n            .append(\n                $(_div, { 'class': classes.sScrollBody } )\n                    .css( {\n                        position: 'relative',\n                        overflow: 'auto',\n                        width: size( scrollX )\n                    } )\n                    .append( table )\n            );\n\n        if ( footer ) {\n            scroller.append(\n                $(_div, { 'class': classes.sScrollFoot } )\n                    .css( {\n                        overflow: 'hidden',\n                        border: 0,\n                        width: scrollX ? size(scrollX) : '100%'\n                    } )\n                    .append(\n                        $(_div, { 'class': classes.sScrollFootInner } )\n                            .append(\n                                footerClone\n                                    .removeAttr('id')\n                                    .css( 'margin-left', 0 )\n                                    .append( captionSide === 'bottom' ? caption : null )\n                                    .append(\n                                        table.children('tfoot')\n                                    )\n                            )\n                    )\n            );\n        }\n\n        var children = scroller.children();\n        var scrollHead = children[0];\n        var scrollBody = children[1];\n        var scrollFoot = footer ? children[2] : null;\n\n        // When the body is scrolled, then we also want to scroll the headers\n        if ( scrollX ) {\n            $(scrollBody).on( 'scroll.DT', function (e) {\n                var scrollLeft = this.scrollLeft;\n\n                scrollHead.scrollLeft = scrollLeft;\n\n                if ( footer ) {\n                    scrollFoot.scrollLeft = scrollLeft;\n                }\n            } );\n        }\n\n        $(scrollBody).css(\n            scrollY && scroll.bCollapse ? 'max-height' : 'height',\n            scrollY\n        );\n\n        settings.nScrollHead = scrollHead;\n        settings.nScrollBody = scrollBody;\n        settings.nScrollFoot = scrollFoot;\n\n        // On redraw - align columns\n        settings.aoDrawCallback.push( {\n            \"fn\": _fnScrollDraw,\n            \"sName\": \"scrolling\"\n        } );\n\n        return scroller[0];\n    }\n\n\n\n    /**\n     * Update the header, footer and body tables for resizing - i.e. column\n     * alignment.\n     *\n     * Welcome to the most horrible function DataTables. The process that this\n     * function follows is basically:\n     *   1. Re-create the table inside the scrolling div\n     *   2. Take live measurements from the DOM\n     *   3. Apply the measurements to align the columns\n     *   4. Clean up\n     *\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnScrollDraw ( settings )\n    {\n        // Given that this is such a monster function, a lot of variables are use\n        // to try and keep the minimised size as small as possible\n        var\n            scroll         = settings.oScroll,\n            scrollX        = scroll.sX,\n            scrollXInner   = scroll.sXInner,\n            scrollY        = scroll.sY,\n            barWidth       = scroll.iBarWidth,\n            divHeader      = $(settings.nScrollHead),\n            divHeaderStyle = divHeader[0].style,\n            divHeaderInner = divHeader.children('div'),\n            divHeaderInnerStyle = divHeaderInner[0].style,\n            divHeaderTable = divHeaderInner.children('table'),\n            divBodyEl      = settings.nScrollBody,\n            divBody        = $(divBodyEl),\n            divBodyStyle   = divBodyEl.style,\n            divFooter      = $(settings.nScrollFoot),\n            divFooterInner = divFooter.children('div'),\n            divFooterTable = divFooterInner.children('table'),\n            header         = $(settings.nTHead),\n            table          = $(settings.nTable),\n            tableEl        = table[0],\n            tableStyle     = tableEl.style,\n            footer         = settings.nTFoot ? $(settings.nTFoot) : null,\n            browser        = settings.oBrowser,\n            ie67           = browser.bScrollOversize,\n            dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),\n            headerTrgEls, footerTrgEls,\n            headerSrcEls, footerSrcEls,\n            headerCopy, footerCopy,\n            headerWidths=[], footerWidths=[],\n            headerContent=[], footerContent=[],\n            idx, correction, sanityWidth,\n            zeroOut = function(nSizer) {\n                var style = nSizer.style;\n                style.paddingTop = \"0\";\n                style.paddingBottom = \"0\";\n                style.borderTopWidth = \"0\";\n                style.borderBottomWidth = \"0\";\n                style.height = 0;\n            };\n\n        // If the scrollbar visibility has changed from the last draw, we need to\n        // adjust the column sizes as the table width will have changed to account\n        // for the scrollbar\n        var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n\n        if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {\n            settings.scrollBarVis = scrollBarVis;\n            _fnAdjustColumnSizing( settings );\n            return; // adjust column sizing will call this function again\n        }\n        else {\n            settings.scrollBarVis = scrollBarVis;\n        }\n\n        /*\n         * 1. Re-create the table inside the scrolling div\n         */\n\n        // Remove the old minimised thead and tfoot elements in the inner table\n        table.children('thead, tfoot').remove();\n\n        if ( footer ) {\n            footerCopy = footer.clone().prependTo( table );\n            footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n            footerSrcEls = footerCopy.find('tr');\n        }\n\n        // Clone the current header and footer elements and then place it into the inner table\n        headerCopy = header.clone().prependTo( table );\n        headerTrgEls = header.find('tr'); // original header is in its own table\n        headerSrcEls = headerCopy.find('tr');\n        headerCopy.find('th, td').removeAttr('tabindex');\n\n\n        /*\n         * 2. Take live measurements from the DOM - do not alter the DOM itself!\n         */\n\n        // Remove old sizing and apply the calculated column widths\n        // Get the unique column headers in the newly created (cloned) header. We want to apply the\n        // calculated sizes to this header\n        if ( ! scrollX )\n        {\n            divBodyStyle.width = '100%';\n            divHeader[0].style.width = '100%';\n        }\n\n        $.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\n            idx = _fnVisibleToColumnIndex( settings, i );\n            el.style.width = settings.aoColumns[idx].sWidth;\n        } );\n\n        if ( footer ) {\n            _fnApplyToChildren( function(n) {\n                n.style.width = \"\";\n            }, footerSrcEls );\n        }\n\n        // Size the table as a whole\n        sanityWidth = table.outerWidth();\n        if ( scrollX === \"\" ) {\n            // No x scrolling\n            tableStyle.width = \"100%\";\n\n            // IE7 will make the width of the table when 100% include the scrollbar\n            // - which is shouldn't. When there is a scrollbar we need to take this\n            // into account.\n            if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\n                divBody.css('overflow-y') == \"scroll\")\n            ) {\n                tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\n            }\n\n            // Recalculate the sanity width\n            sanityWidth = table.outerWidth();\n        }\n        else if ( scrollXInner !== \"\" ) {\n            // legacy x scroll inner has been given - use it\n            tableStyle.width = _fnStringToCss(scrollXInner);\n\n            // Recalculate the sanity width\n            sanityWidth = table.outerWidth();\n        }\n\n        // Hidden header should have zero height, so remove padding and borders. Then\n        // set the width based on the real headers\n\n        // Apply all styles in one pass\n        _fnApplyToChildren( zeroOut, headerSrcEls );\n\n        // Read all widths in next pass\n        _fnApplyToChildren( function(nSizer) {\n            headerContent.push( nSizer.innerHTML );\n            headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n        }, headerSrcEls );\n\n        // Apply all widths in final pass\n        _fnApplyToChildren( function(nToSize, i) {\n            // Only apply widths to the DataTables detected header cells - this\n            // prevents complex headers from having contradictory sizes applied\n            if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {\n                nToSize.style.width = headerWidths[i];\n            }\n        }, headerTrgEls );\n\n        $(headerSrcEls).height(0);\n\n        /* Same again with the footer if we have one */\n        if ( footer )\n        {\n            _fnApplyToChildren( zeroOut, footerSrcEls );\n\n            _fnApplyToChildren( function(nSizer) {\n                footerContent.push( nSizer.innerHTML );\n                footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n            }, footerSrcEls );\n\n            _fnApplyToChildren( function(nToSize, i) {\n                nToSize.style.width = footerWidths[i];\n            }, footerTrgEls );\n\n            $(footerSrcEls).height(0);\n        }\n\n\n        /*\n         * 3. Apply the measurements\n         */\n\n        // \"Hide\" the header and footer that we used for the sizing. We need to keep\n        // the content of the cell so that the width applied to the header and body\n        // both match, but we want to hide it completely. We want to also fix their\n        // width to what they currently are\n        _fnApplyToChildren( function(nSizer, i) {\n            nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';\n            nSizer.style.width = headerWidths[i];\n        }, headerSrcEls );\n\n        if ( footer )\n        {\n            _fnApplyToChildren( function(nSizer, i) {\n                nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+footerContent[i]+'</div>';\n                nSizer.style.width = footerWidths[i];\n            }, footerSrcEls );\n        }\n\n        // Sanity check that the table is of a sensible width. If not then we are going to get\n        // misalignment - try to prevent this by not allowing the table to shrink below its min width\n        if ( table.outerWidth() < sanityWidth )\n        {\n            // The min width depends upon if we have a vertical scrollbar visible or not */\n            correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\n            divBody.css('overflow-y') == \"scroll\")) ?\n            sanityWidth+barWidth :\n                sanityWidth;\n\n            // IE6/7 are a law unto themselves...\n            if ( ie67 && (divBodyEl.scrollHeight >\n                divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\n            ) {\n                tableStyle.width = _fnStringToCss( correction-barWidth );\n            }\n\n            // And give the user a warning that we've stopped the table getting too small\n            if ( scrollX === \"\" || scrollXInner !== \"\" ) {\n                _fnLog( settings, 1, 'Possible column misalignment', 6 );\n            }\n        }\n        else\n        {\n            correction = '100%';\n        }\n\n        // Apply to the container elements\n        divBodyStyle.width = _fnStringToCss( correction );\n        divHeaderStyle.width = _fnStringToCss( correction );\n\n        if ( footer ) {\n            settings.nScrollFoot.style.width = _fnStringToCss( correction );\n        }\n\n\n        /*\n         * 4. Clean up\n         */\n        if ( ! scrollY ) {\n            /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n             * the scrollbar height from the visible display, rather than adding it on. We need to\n             * set the height in order to sort this. Don't want to do it in any other browsers.\n             */\n            if ( ie67 ) {\n                divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\n            }\n        }\n\n        /* Finally set the width's of the header and footer tables */\n        var iOuterWidth = table.outerWidth();\n        divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\n        divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\n\n        // Figure out if there are scrollbar present - if so then we need a the header and footer to\n        // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n        var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n        var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\n        divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\n\n        if ( footer ) {\n            divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\n            divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\n            divFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\n        }\n\n        // Correct DOM ordering for colgroup - comes before the thead\n        table.children('colgroup').insertBefore( table.children('thead') );\n\n        /* Adjust the position of the header in case we loose the y-scrollbar */\n        divBody.scroll();\n\n        // If sorting or filtering has occurred, jump the scrolling back to the top\n        // only if we aren't holding the position\n        if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\n            divBodyEl.scrollTop = 0;\n        }\n    }\n\n\n\n    /**\n     * Apply a given function to the display child nodes of an element array (typically\n     * TD children of TR rows\n     *  @param {function} fn Method to apply to the objects\n     *  @param array {nodes} an1 List of elements to look through for display children\n     *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n     *  @memberof DataTable#oApi\n     */\n    function _fnApplyToChildren( fn, an1, an2 )\n    {\n        var index=0, i=0, iLen=an1.length;\n        var nNode1, nNode2;\n\n        while ( i < iLen ) {\n            nNode1 = an1[i].firstChild;\n            nNode2 = an2 ? an2[i].firstChild : null;\n\n            while ( nNode1 ) {\n                if ( nNode1.nodeType === 1 ) {\n                    if ( an2 ) {\n                        fn( nNode1, nNode2, index );\n                    }\n                    else {\n                        fn( nNode1, index );\n                    }\n\n                    index++;\n                }\n\n                nNode1 = nNode1.nextSibling;\n                nNode2 = an2 ? nNode2.nextSibling : null;\n            }\n\n            i++;\n        }\n    }\n\n\n\n    var __re_html_remove = /<.*?>/g;\n\n\n    /**\n     * Calculate the width of columns for the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnCalculateColumnWidths ( oSettings )\n    {\n        var\n            table = oSettings.nTable,\n            columns = oSettings.aoColumns,\n            scroll = oSettings.oScroll,\n            scrollY = scroll.sY,\n            scrollX = scroll.sX,\n            scrollXInner = scroll.sXInner,\n            columnCount = columns.length,\n            visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\n            headerCells = $('th', oSettings.nTHead),\n            tableWidthAttr = table.getAttribute('width'), // from DOM element\n            tableContainer = table.parentNode,\n            userInputs = false,\n            i, column, columnIdx, width, outerWidth,\n            browser = oSettings.oBrowser,\n            ie67 = browser.bScrollOversize;\n\n        var styleWidth = table.style.width;\n        if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\n            tableWidthAttr = styleWidth;\n        }\n\n        /* Convert any user input sizes into pixel sizes */\n        for ( i=0 ; i<visibleColumns.length ; i++ ) {\n            column = columns[ visibleColumns[i] ];\n\n            if ( column.sWidth !== null ) {\n                column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\n\n                userInputs = true;\n            }\n        }\n\n        /* If the number of columns in the DOM equals the number that we have to\n         * process in DataTables, then we can use the offsets that are created by\n         * the web- browser. No custom sizes can be set in order for this to happen,\n         * nor scrolling used\n         */\n        if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&\n            columnCount == _fnVisbleColumns( oSettings ) &&\n            columnCount == headerCells.length\n        ) {\n            for ( i=0 ; i<columnCount ; i++ ) {\n                var colIdx = _fnVisibleToColumnIndex( oSettings, i );\n\n                if ( colIdx !== null ) {\n                    columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );\n                }\n            }\n        }\n        else\n        {\n            // Otherwise construct a single row, worst case, table with the widest\n            // node in the data, assign any user defined widths, then insert it into\n            // the DOM and allow the browser to do all the hard work of calculating\n            // table widths\n            var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n                .css( 'visibility', 'hidden' )\n                .removeAttr( 'id' );\n\n            // Clean up the table body\n            tmpTable.find('tbody tr').remove();\n            var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\n\n            // Clone the table header and footer - we can't use the header / footer\n            // from the cloned table, since if scrolling is active, the table's\n            // real header and footer are contained in different table tags\n            tmpTable.find('thead, tfoot').remove();\n            tmpTable\n                .append( $(oSettings.nTHead).clone() )\n                .append( $(oSettings.nTFoot).clone() );\n\n            // Remove any assigned widths from the footer (from scrolling)\n            tmpTable.find('tfoot th, tfoot td').css('width', '');\n\n            // Apply custom sizing to the cloned header\n            headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\n\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\n                column = columns[ visibleColumns[i] ];\n\n                headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\n                    _fnStringToCss( column.sWidthOrig ) :\n                    '';\n\n                // For scrollX we need to force the column width otherwise the\n                // browser will collapse it. If this width is smaller than the\n                // width the column requires, then it will have no effect\n                if ( column.sWidthOrig && scrollX ) {\n                    $( headerCells[i] ).append( $('<div/>').css( {\n                        width: column.sWidthOrig,\n                        margin: 0,\n                        padding: 0,\n                        border: 0,\n                        height: 1\n                    } ) );\n                }\n            }\n\n            // Find the widest cell for each column and put it into the table\n            if ( oSettings.aoData.length ) {\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\n                    columnIdx = visibleColumns[i];\n                    column = columns[ columnIdx ];\n\n                    $( _fnGetWidestNode( oSettings, columnIdx ) )\n                        .clone( false )\n                        .append( column.sContentPadding )\n                        .appendTo( tr );\n                }\n            }\n\n            // Tidy the temporary table - remove name attributes so there aren't\n            // duplicated in the dom (radio elements for example)\n            $('[name]', tmpTable).removeAttr('name');\n\n            // Table has been built, attach to the document so we can work with it.\n            // A holding element is used, positioned at the top of the container\n            // with minimal height, so it has no effect on if the container scrolls\n            // or not. Otherwise it might trigger scrolling when it actually isn't\n            // needed\n            var holder = $('<div/>').css( scrollX || scrollY ?\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    height: 1,\n                    right: 0,\n                    overflow: 'hidden'\n                } :\n                {}\n                )\n                .append( tmpTable )\n                .appendTo( tableContainer );\n\n            // When scrolling (X or Y) we want to set the width of the table as\n            // appropriate. However, when not scrolling leave the table width as it\n            // is. This results in slightly different, but I think correct behaviour\n            if ( scrollX && scrollXInner ) {\n                tmpTable.width( scrollXInner );\n            }\n            else if ( scrollX ) {\n                tmpTable.css( 'width', 'auto' );\n                tmpTable.removeAttr('width');\n\n                // If there is no width attribute or style, then allow the table to\n                // collapse\n                if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {\n                    tmpTable.width( tableContainer.clientWidth );\n                }\n            }\n            else if ( scrollY ) {\n                tmpTable.width( tableContainer.clientWidth );\n            }\n            else if ( tableWidthAttr ) {\n                tmpTable.width( tableWidthAttr );\n            }\n\n            // Get the width of each column in the constructed table - we need to\n            // know the inner width (so it can be assigned to the other table's\n            // cells) and the outer width so we can calculate the full width of the\n            // table. This is safe since DataTables requires a unique cell for each\n            // column, but if ever a header can span multiple columns, this will\n            // need to be modified.\n            var total = 0;\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\n                var cell = $(headerCells[i]);\n                var border = cell.outerWidth() - cell.width();\n\n                // Use getBounding... where possible (not IE8-) because it can give\n                // sub-pixel accuracy, which we then want to round up!\n                var bounding = browser.bBounding ?\n                    Math.ceil( headerCells[i].getBoundingClientRect().width ) :\n                    cell.outerWidth();\n\n                // Total is tracked to remove any sub-pixel errors as the outerWidth\n                // of the table might not equal the total given here (IE!).\n                total += bounding;\n\n                // Width for each column to use\n                columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );\n            }\n\n            table.style.width = _fnStringToCss( total );\n\n            // Finished with the table - ditch it\n            holder.remove();\n        }\n\n        // If there is a width attr, we want to attach an event listener which\n        // allows the table sizing to automatically adjust when the window is\n        // resized. Use the width attr rather than CSS, since we can't know if the\n        // CSS is a relative value or absolute - DOM read is always px.\n        if ( tableWidthAttr ) {\n            table.style.width = _fnStringToCss( tableWidthAttr );\n        }\n\n        if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\n            var bindResize = function () {\n                $(window).bind('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\n                    _fnAdjustColumnSizing( oSettings );\n                } ) );\n            };\n\n            // IE6/7 will crash if we bind a resize event handler on page load.\n            // To be removed in 1.11 which drops IE6/7 support\n            if ( ie67 ) {\n                setTimeout( bindResize, 1000 );\n            }\n            else {\n                bindResize();\n            }\n\n            oSettings._reszEvt = true;\n        }\n    }\n\n\n    /**\n     * Throttle the calls to a function. Arguments and context are maintained for\n     * the throttled function\n     *  @param {function} fn Function to be called\n     *  @param {int} [freq=200] call frequency in mS\n     *  @returns {function} wrapped function\n     *  @memberof DataTable#oApi\n     */\n    var _fnThrottle = DataTable.util.throttle;\n\n\n    /**\n     * Convert a CSS unit width to pixels (e.g. 2em)\n     *  @param {string} width width to be converted\n     *  @param {node} parent parent to get the with for (required for relative widths) - optional\n     *  @returns {int} width in pixels\n     *  @memberof DataTable#oApi\n     */\n    function _fnConvertToWidth ( width, parent )\n    {\n        if ( ! width ) {\n            return 0;\n        }\n\n        var n = $('<div/>')\n            .css( 'width', _fnStringToCss( width ) )\n            .appendTo( parent || document.body );\n\n        var val = n[0].offsetWidth;\n        n.remove();\n\n        return val;\n    }\n\n\n    /**\n     * Get the widest node\n     *  @param {object} settings dataTables settings object\n     *  @param {int} colIdx column of interest\n     *  @returns {node} widest table node\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetWidestNode( settings, colIdx )\n    {\n        var idx = _fnGetMaxLenString( settings, colIdx );\n        if ( idx < 0 ) {\n            return null;\n        }\n\n        var data = settings.aoData[ idx ];\n        return ! data.nTr ? // Might not have been created when deferred rendering\n            $('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\n            data.anCells[ colIdx ];\n    }\n\n\n    /**\n     * Get the maximum strlen for each data column\n     *  @param {object} settings dataTables settings object\n     *  @param {int} colIdx column of interest\n     *  @returns {string} max string length for each column\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetMaxLenString( settings, colIdx )\n    {\n        var s, max=-1, maxIdx = -1;\n\n        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n            s = _fnGetCellData( settings, i, colIdx, 'display' )+'';\n            s = s.replace( __re_html_remove, '' );\n            s = s.replace( /&nbsp;/g, ' ' );\n\n            if ( s.length > max ) {\n                max = s.length;\n                maxIdx = i;\n            }\n        }\n\n        return maxIdx;\n    }\n\n\n    /**\n     * Append a CSS unit (only if required) to a string\n     *  @param {string} value to css-ify\n     *  @returns {string} value with css unit\n     *  @memberof DataTable#oApi\n     */\n    function _fnStringToCss( s )\n    {\n        if ( s === null ) {\n            return '0px';\n        }\n\n        if ( typeof s == 'number' ) {\n            return s < 0 ?\n                '0px' :\n            s+'px';\n        }\n\n        // Check it has a unit character already\n        return s.match(/\\d$/) ?\n        s+'px' :\n            s;\n    }\n\n\n\n    function _fnSortFlatten ( settings )\n    {\n        var\n            i, iLen, k, kLen,\n            aSort = [],\n            aiOrig = [],\n            aoColumns = settings.aoColumns,\n            aDataSort, iCol, sType, srcCol,\n            fixed = settings.aaSortingFixed,\n            fixedObj = $.isPlainObject( fixed ),\n            nestedSort = [],\n            add = function ( a ) {\n                if ( a.length && ! $.isArray( a[0] ) ) {\n                    // 1D array\n                    nestedSort.push( a );\n                }\n                else {\n                    // 2D array\n                    $.merge( nestedSort, a );\n                }\n            };\n\n        // Build the sort array, with pre-fix and post-fix options if they have been\n        // specified\n        if ( $.isArray( fixed ) ) {\n            add( fixed );\n        }\n\n        if ( fixedObj && fixed.pre ) {\n            add( fixed.pre );\n        }\n\n        add( settings.aaSorting );\n\n        if (fixedObj && fixed.post ) {\n            add( fixed.post );\n        }\n\n        for ( i=0 ; i<nestedSort.length ; i++ )\n        {\n            srcCol = nestedSort[i][0];\n            aDataSort = aoColumns[ srcCol ].aDataSort;\n\n            for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\n            {\n                iCol = aDataSort[k];\n                sType = aoColumns[ iCol ].sType || 'string';\n\n                if ( nestedSort[i]._idx === undefined ) {\n                    nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\n                }\n\n                aSort.push( {\n                    src:       srcCol,\n                    col:       iCol,\n                    dir:       nestedSort[i][1],\n                    index:     nestedSort[i]._idx,\n                    type:      sType,\n                    formatter: DataTable.ext.type.order[ sType+\"-pre\" ]\n                } );\n            }\n        }\n\n        return aSort;\n    }\n\n    /**\n     * Change the order of the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     *  @todo This really needs split up!\n     */\n    function _fnSort ( oSettings )\n    {\n        var\n            i, ien, iLen, j, jLen, k, kLen,\n            sDataType, nTh,\n            aiOrig = [],\n            oExtSort = DataTable.ext.type.order,\n            aoData = oSettings.aoData,\n            aoColumns = oSettings.aoColumns,\n            aDataSort, data, iCol, sType, oSort,\n            formatters = 0,\n            sortCol,\n            displayMaster = oSettings.aiDisplayMaster,\n            aSort;\n\n        // Resolve any column types that are unknown due to addition or invalidation\n        // @todo Can this be moved into a 'data-ready' handler which is called when\n        //   data is going to be used in the table?\n        _fnColumnTypes( oSettings );\n\n        aSort = _fnSortFlatten( oSettings );\n\n        for ( i=0, ien=aSort.length ; i<ien ; i++ ) {\n            sortCol = aSort[i];\n\n            // Track if we can use the fast sort algorithm\n            if ( sortCol.formatter ) {\n                formatters++;\n            }\n\n            // Load the data needed for the sort, for each cell\n            _fnSortData( oSettings, sortCol.col );\n        }\n\n        /* No sorting required if server-side or no sorting array */\n        if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\n        {\n            // Create a value - key array of the current row positions such that we can use their\n            // current position during the sort, if values match, in order to perform stable sorting\n            for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\n                aiOrig[ displayMaster[i] ] = i;\n            }\n\n            /* Do the sort - here we want multi-column sorting based on a given data source (column)\n             * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n             * follow on it's own, but this is what we want (example two column sorting):\n             *  fnLocalSorting = function(a,b){\n             *    var iTest;\n             *    iTest = oSort['string-asc']('data11', 'data12');\n             *      if (iTest !== 0)\n             *        return iTest;\n             *    iTest = oSort['numeric-desc']('data21', 'data22');\n             *    if (iTest !== 0)\n             *      return iTest;\n             *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n             *  }\n             * Basically we have a test for each sorting column, if the data in that column is equal,\n             * test the next column. If all columns match, then we use a numeric sort on the row\n             * positions in the original data array to provide a stable sort.\n             *\n             * Note - I know it seems excessive to have two sorting methods, but the first is around\n             * 15% faster, so the second is only maintained for backwards compatibility with sorting\n             * methods which do not have a pre-sort formatting function.\n             */\n            if ( formatters === aSort.length ) {\n                // All sort types have formatting functions\n                displayMaster.sort( function ( a, b ) {\n                    var\n                        x, y, k, test, sort,\n                        len=aSort.length,\n                        dataA = aoData[a]._aSortData,\n                        dataB = aoData[b]._aSortData;\n\n                    for ( k=0 ; k<len ; k++ ) {\n                        sort = aSort[k];\n\n                        x = dataA[ sort.col ];\n                        y = dataB[ sort.col ];\n\n                        test = x<y ? -1 : x>y ? 1 : 0;\n                        if ( test !== 0 ) {\n                            return sort.dir === 'asc' ? test : -test;\n                        }\n                    }\n\n                    x = aiOrig[a];\n                    y = aiOrig[b];\n                    return x<y ? -1 : x>y ? 1 : 0;\n                } );\n            }\n            else {\n                // Depreciated - remove in 1.11 (providing a plug-in option)\n                // Not all sort types have formatting methods, so we have to call their sorting\n                // methods.\n                displayMaster.sort( function ( a, b ) {\n                    var\n                        x, y, k, l, test, sort, fn,\n                        len=aSort.length,\n                        dataA = aoData[a]._aSortData,\n                        dataB = aoData[b]._aSortData;\n\n                    for ( k=0 ; k<len ; k++ ) {\n                        sort = aSort[k];\n\n                        x = dataA[ sort.col ];\n                        y = dataB[ sort.col ];\n\n                        fn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\n                        test = fn( x, y );\n                        if ( test !== 0 ) {\n                            return test;\n                        }\n                    }\n\n                    x = aiOrig[a];\n                    y = aiOrig[b];\n                    return x<y ? -1 : x>y ? 1 : 0;\n                } );\n            }\n        }\n\n        /* Tell the draw function that we have sorted the data */\n        oSettings.bSorted = true;\n    }\n\n\n    function _fnSortAria ( settings )\n    {\n        var label;\n        var nextSort;\n        var columns = settings.aoColumns;\n        var aSort = _fnSortFlatten( settings );\n        var oAria = settings.oLanguage.oAria;\n\n        // ARIA attributes - need to loop all columns, to update all (removing old\n        // attributes as needed)\n        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n        {\n            var col = columns[i];\n            var asSorting = col.asSorting;\n            var sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\n            var th = col.nTh;\n\n            // IE7 is throwing an error when setting these properties with jQuery's\n            // attr() and removeAttr() methods...\n            th.removeAttribute('aria-sort');\n\n            /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n            if ( col.bSortable ) {\n                if ( aSort.length > 0 && aSort[0].col == i ) {\n                    th.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\n                    nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\n                }\n                else {\n                    nextSort = asSorting[0];\n                }\n\n                label = sTitle + ( nextSort === \"asc\" ?\n                            oAria.sSortAscending :\n                            oAria.sSortDescending\n                    );\n            }\n            else {\n                label = sTitle;\n            }\n\n            th.setAttribute('aria-label', label);\n        }\n    }\n\n\n    /**\n     * Function to run on user sort request\n     *  @param {object} settings dataTables settings object\n     *  @param {node} attachTo node to attach the handler to\n     *  @param {int} colIdx column sorting index\n     *  @param {boolean} [append=false] Append the requested sort to the existing\n     *    sort if true (i.e. multi-column sort)\n     *  @param {function} [callback] callback function\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortListener ( settings, colIdx, append, callback )\n    {\n        var col = settings.aoColumns[ colIdx ];\n        var sorting = settings.aaSorting;\n        var asSorting = col.asSorting;\n        var nextSortIdx;\n        var next = function ( a, overflow ) {\n            var idx = a._idx;\n            if ( idx === undefined ) {\n                idx = $.inArray( a[1], asSorting );\n            }\n\n            return idx+1 < asSorting.length ?\n            idx+1 :\n                overflow ?\n                    null :\n                    0;\n        };\n\n        // Convert to 2D array if needed\n        if ( typeof sorting[0] === 'number' ) {\n            sorting = settings.aaSorting = [ sorting ];\n        }\n\n        // If appending the sort then we are multi-column sorting\n        if ( append && settings.oFeatures.bSortMulti ) {\n            // Are we already doing some kind of sort on this column?\n            var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\n\n            if ( sortIdx !== -1 ) {\n                // Yes, modify the sort\n                nextSortIdx = next( sorting[sortIdx], true );\n\n                if ( nextSortIdx === null && sorting.length === 1 ) {\n                    nextSortIdx = 0; // can't remove sorting completely\n                }\n\n                if ( nextSortIdx === null ) {\n                    sorting.splice( sortIdx, 1 );\n                }\n                else {\n                    sorting[sortIdx][1] = asSorting[ nextSortIdx ];\n                    sorting[sortIdx]._idx = nextSortIdx;\n                }\n            }\n            else {\n                // No sort on this column yet\n                sorting.push( [ colIdx, asSorting[0], 0 ] );\n                sorting[sorting.length-1]._idx = 0;\n            }\n        }\n        else if ( sorting.length && sorting[0][0] == colIdx ) {\n            // Single column - already sorting on this column, modify the sort\n            nextSortIdx = next( sorting[0] );\n\n            sorting.length = 1;\n            sorting[0][1] = asSorting[ nextSortIdx ];\n            sorting[0]._idx = nextSortIdx;\n        }\n        else {\n            // Single column - sort only on this column\n            sorting.length = 0;\n            sorting.push( [ colIdx, asSorting[0] ] );\n            sorting[0]._idx = 0;\n        }\n\n        // Run the sort by calling a full redraw\n        _fnReDraw( settings );\n\n        // callback used for async user interaction\n        if ( typeof callback == 'function' ) {\n            callback( settings );\n        }\n    }\n\n\n    /**\n     * Attach a sort handler (click) to a node\n     *  @param {object} settings dataTables settings object\n     *  @param {node} attachTo node to attach the handler to\n     *  @param {int} colIdx column sorting index\n     *  @param {function} [callback] callback function\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortAttachListener ( settings, attachTo, colIdx, callback )\n    {\n        var col = settings.aoColumns[ colIdx ];\n\n        _fnBindAction( attachTo, {}, function (e) {\n            /* If the column is not sortable - don't to anything */\n            if ( col.bSortable === false ) {\n                return;\n            }\n\n            // If processing is enabled use a timeout to allow the processing\n            // display to be shown - otherwise to it synchronously\n            if ( settings.oFeatures.bProcessing ) {\n                _fnProcessingDisplay( settings, true );\n\n                setTimeout( function() {\n                    _fnSortListener( settings, colIdx, e.shiftKey, callback );\n\n                    // In server-side processing, the draw callback will remove the\n                    // processing display\n                    if ( _fnDataSource( settings ) !== 'ssp' ) {\n                        _fnProcessingDisplay( settings, false );\n                    }\n                }, 0 );\n            }\n            else {\n                _fnSortListener( settings, colIdx, e.shiftKey, callback );\n            }\n        } );\n    }\n\n\n    /**\n     * Set the sorting classes on table's body, Note: it is safe to call this function\n     * when bSort and bSortClasses are false\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortingClasses( settings )\n    {\n        var oldSort = settings.aLastSort;\n        var sortClass = settings.oClasses.sSortColumn;\n        var sort = _fnSortFlatten( settings );\n        var features = settings.oFeatures;\n        var i, ien, colIdx;\n\n        if ( features.bSort && features.bSortClasses ) {\n            // Remove old sorting classes\n            for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\n                colIdx = oldSort[i].src;\n\n                // Remove column sorting\n                $( _pluck( settings.aoData, 'anCells', colIdx ) )\n                    .removeClass( sortClass + (i<2 ? i+1 : 3) );\n            }\n\n            // Add new column sorting\n            for ( i=0, ien=sort.length ; i<ien ; i++ ) {\n                colIdx = sort[i].src;\n\n                $( _pluck( settings.aoData, 'anCells', colIdx ) )\n                    .addClass( sortClass + (i<2 ? i+1 : 3) );\n            }\n        }\n\n        settings.aLastSort = sort;\n    }\n\n\n    // Get the data to sort a column, be it from cache, fresh (populating the\n    // cache), or from a sort formatter\n    function _fnSortData( settings, idx )\n    {\n        // Custom sorting function - provided by the sort data type\n        var column = settings.aoColumns[ idx ];\n        var customSort = DataTable.ext.order[ column.sSortDataType ];\n        var customData;\n\n        if ( customSort ) {\n            customData = customSort.call( settings.oInstance, settings, idx,\n                _fnColumnIndexToVisible( settings, idx )\n            );\n        }\n\n        // Use / populate cache\n        var row, cellData;\n        var formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\n\n        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n            row = settings.aoData[i];\n\n            if ( ! row._aSortData ) {\n                row._aSortData = [];\n            }\n\n            if ( ! row._aSortData[idx] || customSort ) {\n                cellData = customSort ?\n                    customData[i] : // If there was a custom sort function, use data from there\n                    _fnGetCellData( settings, i, idx, 'sort' );\n\n                row._aSortData[ idx ] = formatter ?\n                    formatter( cellData ) :\n                    cellData;\n            }\n        }\n    }\n\n\n\n    /**\n     * Save the state of a table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSaveState ( settings )\n    {\n        if ( !settings.oFeatures.bStateSave || settings.bDestroying )\n        {\n            return;\n        }\n\n        /* Store the interesting variables */\n        var state = {\n            time:    +new Date(),\n            start:   settings._iDisplayStart,\n            length:  settings._iDisplayLength,\n            order:   $.extend( true, [], settings.aaSorting ),\n            search:  _fnSearchToCamel( settings.oPreviousSearch ),\n            columns: $.map( settings.aoColumns, function ( col, i ) {\n                return {\n                    visible: col.bVisible,\n                    search: _fnSearchToCamel( settings.aoPreSearchCols[i] )\n                };\n            } )\n        };\n\n        _fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\n\n        settings.oSavedState = state;\n        settings.fnStateSaveCallback.call( settings.oInstance, settings, state );\n    }\n\n\n    /**\n     * Attempt to load a saved table state\n     *  @param {object} oSettings dataTables settings object\n     *  @param {object} oInit DataTables init object so we can override settings\n     *  @memberof DataTable#oApi\n     */\n    function _fnLoadState ( settings, oInit )\n    {\n        var i, ien;\n        var columns = settings.aoColumns;\n\n        if ( ! settings.oFeatures.bStateSave ) {\n            return;\n        }\n\n        var state = settings.fnStateLoadCallback.call( settings.oInstance, settings );\n        if ( ! state || ! state.time ) {\n            return;\n        }\n\n        /* Allow custom and plug-in manipulation functions to alter the saved data set and\n         * cancelling of loading by returning false\n         */\n        var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );\n        if ( $.inArray( false, abStateLoad ) !== -1 ) {\n            return;\n        }\n\n        /* Reject old data */\n        var duration = settings.iStateDuration;\n        if ( duration > 0 && state.time < +new Date() - (duration*1000) ) {\n            return;\n        }\n\n        // Number of columns have changed - all bets are off, no restore of settings\n        if ( columns.length !== state.columns.length ) {\n            return;\n        }\n\n        // Store the saved state so it might be accessed at any time\n        settings.oLoadedState = $.extend( true, {}, state );\n\n        // Restore key features - todo - for 1.11 this needs to be done by\n        // subscribed events\n        if ( state.start !== undefined ) {\n            settings._iDisplayStart    = state.start;\n            settings.iInitDisplayStart = state.start;\n        }\n        if ( state.length !== undefined ) {\n            settings._iDisplayLength   = state.length;\n        }\n\n        // Order\n        if ( state.order !== undefined ) {\n            settings.aaSorting = [];\n            $.each( state.order, function ( i, col ) {\n                settings.aaSorting.push( col[0] >= columns.length ?\n                    [ 0, col[1] ] :\n                    col\n                );\n            } );\n        }\n\n        // Search\n        if ( state.search !== undefined ) {\n            $.extend( settings.oPreviousSearch, _fnSearchToHung( state.search ) );\n        }\n\n        // Columns\n        for ( i=0, ien=state.columns.length ; i<ien ; i++ ) {\n            var col = state.columns[i];\n\n            // Visibility\n            if ( col.visible !== undefined ) {\n                columns[i].bVisible = col.visible;\n            }\n\n            // Search\n            if ( col.search !== undefined ) {\n                $.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\n            }\n        }\n\n        _fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );\n    }\n\n\n    /**\n     * Return the settings object for a particular table\n     *  @param {node} table table we are using as a dataTable\n     *  @returns {object} Settings object - or null if not found\n     *  @memberof DataTable#oApi\n     */\n    function _fnSettingsFromNode ( table )\n    {\n        var settings = DataTable.settings;\n        var idx = $.inArray( table, _pluck( settings, 'nTable' ) );\n\n        return idx !== -1 ?\n            settings[ idx ] :\n            null;\n    }\n\n\n    /**\n     * Log an error message\n     *  @param {object} settings dataTables settings object\n     *  @param {int} level log error messages, or display them to the user\n     *  @param {string} msg error message\n     *  @param {int} tn Technical note id to get more information about the error.\n     *  @memberof DataTable#oApi\n     */\n    function _fnLog( settings, level, msg, tn )\n    {\n        msg = 'DataTables warning: '+\n            (settings ? 'table id='+settings.sTableId+' - ' : '')+msg;\n\n        if ( tn ) {\n            msg += '. For more information about this error, please see '+\n                'http://datatables.net/tn/'+tn;\n        }\n\n        if ( ! level  ) {\n            // Backwards compatibility pre 1.10\n            var ext = DataTable.ext;\n            var type = ext.sErrMode || ext.errMode;\n\n            if ( settings ) {\n                _fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\n            }\n\n            if ( type == 'alert' ) {\n                alert( msg );\n            }\n            else if ( type == 'throw' ) {\n                throw new Error(msg);\n            }\n            else if ( typeof type == 'function' ) {\n                type( settings, tn, msg );\n            }\n        }\n        else if ( window.console && console.log ) {\n            console.log( msg );\n        }\n    }\n\n\n    /**\n     * See if a property is defined on one object, if so assign it to the other object\n     *  @param {object} ret target object\n     *  @param {object} src source object\n     *  @param {string} name property\n     *  @param {string} [mappedName] name to map too - optional, name used if not given\n     *  @memberof DataTable#oApi\n     */\n    function _fnMap( ret, src, name, mappedName )\n    {\n        if ( $.isArray( name ) ) {\n            $.each( name, function (i, val) {\n                if ( $.isArray( val ) ) {\n                    _fnMap( ret, src, val[0], val[1] );\n                }\n                else {\n                    _fnMap( ret, src, val );\n                }\n            } );\n\n            return;\n        }\n\n        if ( mappedName === undefined ) {\n            mappedName = name;\n        }\n\n        if ( src[name] !== undefined ) {\n            ret[mappedName] = src[name];\n        }\n    }\n\n\n    /**\n     * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n     * shallow copy arrays. The reason we need to do this, is that we don't want to\n     * deep copy array init values (such as aaSorting) since the dev wouldn't be\n     * able to override them, but we do want to deep copy arrays.\n     *  @param {object} out Object to extend\n     *  @param {object} extender Object from which the properties will be applied to\n     *      out\n     *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n     *      independent copy with the exception of the `data` or `aaData` parameters\n     *      if they are present. This is so you can pass in a collection to\n     *      DataTables and have that used as your data source without breaking the\n     *      references\n     *  @returns {object} out Reference, just for convenience - out === the return.\n     *  @memberof DataTable#oApi\n     *  @todo This doesn't take account of arrays inside the deep copied objects.\n     */\n    function _fnExtend( out, extender, breakRefs )\n    {\n        var val;\n\n        for ( var prop in extender ) {\n            if ( extender.hasOwnProperty(prop) ) {\n                val = extender[prop];\n\n                if ( $.isPlainObject( val ) ) {\n                    if ( ! $.isPlainObject( out[prop] ) ) {\n                        out[prop] = {};\n                    }\n                    $.extend( true, out[prop], val );\n                }\n                else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\n                    out[prop] = val.slice();\n                }\n                else {\n                    out[prop] = val;\n                }\n            }\n        }\n\n        return out;\n    }\n\n\n    /**\n     * Bind an event handers to allow a click or return key to activate the callback.\n     * This is good for accessibility since a return on the keyboard will have the\n     * same effect as a click, if the element has focus.\n     *  @param {element} n Element to bind the action to\n     *  @param {object} oData Data object to pass to the triggered function\n     *  @param {function} fn Callback function for when the event is triggered\n     *  @memberof DataTable#oApi\n     */\n    function _fnBindAction( n, oData, fn )\n    {\n        $(n)\n            .bind( 'click.DT', oData, function (e) {\n                n.blur(); // Remove focus outline for mouse users\n                fn(e);\n            } )\n            .bind( 'keypress.DT', oData, function (e){\n                if ( e.which === 13 ) {\n                    e.preventDefault();\n                    fn(e);\n                }\n            } )\n            .bind( 'selectstart.DT', function () {\n                /* Take the brutal approach to cancelling text selection */\n                return false;\n            } );\n    }\n\n\n    /**\n     * Register a callback function. Easily allows a callback function to be added to\n     * an array store of callback functions that can then all be called together.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n     *  @param {function} fn Function to be called back\n     *  @param {string} sName Identifying name for the callback (i.e. a label)\n     *  @memberof DataTable#oApi\n     */\n    function _fnCallbackReg( oSettings, sStore, fn, sName )\n    {\n        if ( fn )\n        {\n            oSettings[sStore].push( {\n                \"fn\": fn,\n                \"sName\": sName\n            } );\n        }\n    }\n\n\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {object} settings dataTables settings object\n     *  @param {string} callbackArr Name of the array storage for the callbacks in\n     *      oSettings\n     *  @param {string} eventName Name of the jQuery custom event to trigger. If\n     *      null no trigger is fired\n     *  @param {array} args Array of arguments to pass to the callback function /\n     *      trigger\n     *  @memberof DataTable#oApi\n     */\n    function _fnCallbackFire( settings, callbackArr, eventName, args )\n    {\n        var ret = [];\n\n        if ( callbackArr ) {\n            ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\n                return val.fn.apply( settings.oInstance, args );\n            } );\n        }\n\n        if ( eventName !== null ) {\n            var e = $.Event( eventName+'.dt' );\n\n            $(settings.nTable).trigger( e, args );\n\n            ret.push( e.result );\n        }\n\n        return ret;\n    }\n\n\n    function _fnLengthOverflow ( settings )\n    {\n        var\n            start = settings._iDisplayStart,\n            end = settings.fnDisplayEnd(),\n            len = settings._iDisplayLength;\n\n        /* If we have space to show extra rows (backing up from the end point - then do so */\n        if ( start >= end )\n        {\n            start = end - len;\n        }\n\n        // Keep the start record on the current page\n        start -= (start % len);\n\n        if ( len === -1 || start < 0 )\n        {\n            start = 0;\n        }\n\n        settings._iDisplayStart = start;\n    }\n\n\n    function _fnRenderer( settings, type )\n    {\n        var renderer = settings.renderer;\n        var host = DataTable.ext.renderer[type];\n\n        if ( $.isPlainObject( renderer ) && renderer[type] ) {\n            // Specific renderer for this type. If available use it, otherwise use\n            // the default.\n            return host[renderer[type]] || host._;\n        }\n        else if ( typeof renderer === 'string' ) {\n            // Common renderer - if there is one available for this type use it,\n            // otherwise use the default\n            return host[renderer] || host._;\n        }\n\n        // Use the default\n        return host._;\n    }\n\n\n    /**\n     * Detect the data source being used for the table. Used to simplify the code\n     * a little (ajax) and to make it compress a little smaller.\n     *\n     *  @param {object} settings dataTables settings object\n     *  @returns {string} Data source\n     *  @memberof DataTable#oApi\n     */\n    function _fnDataSource ( settings )\n    {\n        if ( settings.oFeatures.bServerSide ) {\n            return 'ssp';\n        }\n        else if ( settings.ajax || settings.sAjaxSource ) {\n            return 'ajax';\n        }\n        return 'dom';\n    }\n\n\n\n\n    /**\n     * Computed structure of the DataTables API, defined by the options passed to\n     * `DataTable.Api.register()` when building the API.\n     *\n     * The structure is built in order to speed creation and extension of the Api\n     * objects since the extensions are effectively pre-parsed.\n     *\n     * The array is an array of objects with the following structure, where this\n     * base array represents the Api prototype base:\n     *\n     *     [\n     *       {\n\t *         name:      'data'                -- string   - Property name\n\t *         val:       function () {},       -- function - Api method (or undefined if just an object\n\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n\t *       },\n     *       {\n\t *         name:     'row'\n\t *         val:       {},\n\t *         methodExt: [ ... ],\n\t *         propExt:   [\n\t *           {\n\t *             name:      'data'\n\t *             val:       function () {},\n\t *             methodExt: [ ... ],\n\t *             propExt:   [ ... ]\n\t *           },\n\t *           ...\n\t *         ]\n\t *       }\n     *     ]\n     *\n     * @type {Array}\n     * @ignore\n     */\n    var __apiStruct = [];\n\n\n    /**\n     * `Array.prototype` reference.\n     *\n     * @type object\n     * @ignore\n     */\n    var __arrayProto = Array.prototype;\n\n\n    /**\n     * Abstraction for `context` parameter of the `Api` constructor to allow it to\n     * take several different forms for ease of use.\n     *\n     * Each of the input parameter types will be converted to a DataTables settings\n     * object where possible.\n     *\n     * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n     *   of:\n     *\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\n     *     with be found and used.\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\n     *   * `object` - DataTables settings object\n     *   * `DataTables.Api` - API instance\n     * @return {array|null} Matching DataTables settings objects. `null` or\n     *   `undefined` is returned if no matching DataTable is found.\n     * @ignore\n     */\n    var _toSettings = function ( mixed )\n    {\n        var idx, jq;\n        var settings = DataTable.settings;\n        var tables = $.map( settings, function (el, i) {\n            return el.nTable;\n        } );\n\n        if ( ! mixed ) {\n            return [];\n        }\n        else if ( mixed.nTable && mixed.oApi ) {\n            // DataTables settings object\n            return [ mixed ];\n        }\n        else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\n            // Table node\n            idx = $.inArray( mixed, tables );\n            return idx !== -1 ? [ settings[idx] ] : null;\n        }\n        else if ( mixed && typeof mixed.settings === 'function' ) {\n            return mixed.settings().toArray();\n        }\n        else if ( typeof mixed === 'string' ) {\n            // jQuery selector\n            jq = $(mixed);\n        }\n        else if ( mixed instanceof $ ) {\n            // jQuery object (also DataTables instance)\n            jq = mixed;\n        }\n\n        if ( jq ) {\n            return jq.map( function(i) {\n                idx = $.inArray( this, tables );\n                return idx !== -1 ? settings[idx] : null;\n            } ).toArray();\n        }\n    };\n\n\n    /**\n     * DataTables API class - used to control and interface with  one or more\n     * DataTables enhanced tables.\n     *\n     * The API class is heavily based on jQuery, presenting a chainable interface\n     * that you can use to interact with tables. Each instance of the API class has\n     * a \"context\" - i.e. the tables that it will operate on. This could be a single\n     * table, all tables on a page or a sub-set thereof.\n     *\n     * Additionally the API is designed to allow you to easily work with the data in\n     * the tables, retrieving and manipulating it as required. This is done by\n     * presenting the API class as an array like interface. The contents of the\n     * array depend upon the actions requested by each method (for example\n     * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n     * return an array of objects or arrays depending upon your table's\n     * configuration). The API object has a number of array like methods (`push`,\n     * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n     * `unique` etc) to assist your working with the data held in a table.\n     *\n     * Most methods (those which return an Api instance) are chainable, which means\n     * the return from a method call also has all of the methods available that the\n     * top level object had. For example, these two calls are equivalent:\n     *\n     *     // Not chained\n     *     api.row.add( {...} );\n     *     api.draw();\n     *\n     *     // Chained\n     *     api.row.add( {...} ).draw();\n     *\n     * @class DataTable.Api\n     * @param {array|object|string|jQuery} context DataTable identifier. This is\n     *   used to define which DataTables enhanced tables this API will operate on.\n     *   Can be one of:\n     *\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\n     *     with be found and used.\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\n     *   * `object` - DataTables settings object\n     * @param {array} [data] Data to initialise the Api instance with.\n     *\n     * @example\n     *   // Direct initialisation during DataTables construction\n     *   var api = $('#example').DataTable();\n     *\n     * @example\n     *   // Initialisation using a DataTables jQuery object\n     *   var api = $('#example').dataTable().api();\n     *\n     * @example\n     *   // Initialisation as a constructor\n     *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n     */\n    _Api = function ( context, data )\n    {\n        if ( ! (this instanceof _Api) ) {\n            return new _Api( context, data );\n        }\n\n        var settings = [];\n        var ctxSettings = function ( o ) {\n            var a = _toSettings( o );\n            if ( a ) {\n                settings = settings.concat( a );\n            }\n        };\n\n        if ( $.isArray( context ) ) {\n            for ( var i=0, ien=context.length ; i<ien ; i++ ) {\n                ctxSettings( context[i] );\n            }\n        }\n        else {\n            ctxSettings( context );\n        }\n\n        // Remove duplicates\n        this.context = _unique( settings );\n\n        // Initial data\n        if ( data ) {\n            $.merge( this, data );\n        }\n\n        // selector\n        this.selector = {\n            rows: null,\n            cols: null,\n            opts: null\n        };\n\n        _Api.extend( this, this, __apiStruct );\n    };\n\n    DataTable.Api = _Api;\n\n    // Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n    // isPlainObject.\n    $.extend( _Api.prototype, {\n        any: function ()\n        {\n            return this.count() !== 0;\n        },\n\n\n        concat:  __arrayProto.concat,\n\n\n        context: [], // array of table settings objects\n\n\n        count: function ()\n        {\n            return this.flatten().length;\n        },\n\n\n        each: function ( fn )\n        {\n            for ( var i=0, ien=this.length ; i<ien; i++ ) {\n                fn.call( this, this[i], i, this );\n            }\n\n            return this;\n        },\n\n\n        eq: function ( idx )\n        {\n            var ctx = this.context;\n\n            return ctx.length > idx ?\n                new _Api( ctx[idx], this[idx] ) :\n                null;\n        },\n\n\n        filter: function ( fn )\n        {\n            var a = [];\n\n            if ( __arrayProto.filter ) {\n                a = __arrayProto.filter.call( this, fn, this );\n            }\n            else {\n                // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n                for ( var i=0, ien=this.length ; i<ien ; i++ ) {\n                    if ( fn.call( this, this[i], i, this ) ) {\n                        a.push( this[i] );\n                    }\n                }\n            }\n\n            return new _Api( this.context, a );\n        },\n\n\n        flatten: function ()\n        {\n            var a = [];\n            return new _Api( this.context, a.concat.apply( a, this.toArray() ) );\n        },\n\n\n        join:    __arrayProto.join,\n\n\n        indexOf: __arrayProto.indexOf || function (obj, start)\n        {\n            for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\n                if ( this[i] === obj ) {\n                    return i;\n                }\n            }\n            return -1;\n        },\n\n        iterator: function ( flatten, type, fn, alwaysNew ) {\n            var\n                a = [], ret,\n                i, ien, j, jen,\n                context = this.context,\n                rows, items, item,\n                selector = this.selector;\n\n            // Argument shifting\n            if ( typeof flatten === 'string' ) {\n                alwaysNew = fn;\n                fn = type;\n                type = flatten;\n                flatten = false;\n            }\n\n            for ( i=0, ien=context.length ; i<ien ; i++ ) {\n                var apiInst = new _Api( context[i] );\n\n                if ( type === 'table' ) {\n                    ret = fn.call( apiInst, context[i], i );\n\n                    if ( ret !== undefined ) {\n                        a.push( ret );\n                    }\n                }\n                else if ( type === 'columns' || type === 'rows' ) {\n                    // this has same length as context - one entry for each table\n                    ret = fn.call( apiInst, context[i], this[i], i );\n\n                    if ( ret !== undefined ) {\n                        a.push( ret );\n                    }\n                }\n                else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\n                    // columns and rows share the same structure.\n                    // 'this' is an array of column indexes for each context\n                    items = this[i];\n\n                    if ( type === 'column-rows' ) {\n                        rows = _selector_row_indexes( context[i], selector.opts );\n                    }\n\n                    for ( j=0, jen=items.length ; j<jen ; j++ ) {\n                        item = items[j];\n\n                        if ( type === 'cell' ) {\n                            ret = fn.call( apiInst, context[i], item.row, item.column, i, j );\n                        }\n                        else {\n                            ret = fn.call( apiInst, context[i], item, i, j, rows );\n                        }\n\n                        if ( ret !== undefined ) {\n                            a.push( ret );\n                        }\n                    }\n                }\n            }\n\n            if ( a.length || alwaysNew ) {\n                var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\n                var apiSelector = api.selector;\n                apiSelector.rows = selector.rows;\n                apiSelector.cols = selector.cols;\n                apiSelector.opts = selector.opts;\n                return api;\n            }\n            return this;\n        },\n\n\n        lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\n        {\n            // Bit cheeky...\n            return this.indexOf.apply( this.toArray.reverse(), arguments );\n        },\n\n\n        length:  0,\n\n\n        map: function ( fn )\n        {\n            var a = [];\n\n            if ( __arrayProto.map ) {\n                a = __arrayProto.map.call( this, fn, this );\n            }\n            else {\n                // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n                for ( var i=0, ien=this.length ; i<ien ; i++ ) {\n                    a.push( fn.call( this, this[i], i ) );\n                }\n            }\n\n            return new _Api( this.context, a );\n        },\n\n\n        pluck: function ( prop )\n        {\n            return this.map( function ( el ) {\n                return el[ prop ];\n            } );\n        },\n\n        pop:     __arrayProto.pop,\n\n\n        push:    __arrayProto.push,\n\n\n        // Does not return an API instance\n        reduce: __arrayProto.reduce || function ( fn, init )\n        {\n            return _fnReduce( this, fn, init, 0, this.length, 1 );\n        },\n\n\n        reduceRight: __arrayProto.reduceRight || function ( fn, init )\n        {\n            return _fnReduce( this, fn, init, this.length-1, -1, -1 );\n        },\n\n\n        reverse: __arrayProto.reverse,\n\n\n        // Object with rows, columns and opts\n        selector: null,\n\n\n        shift:   __arrayProto.shift,\n\n\n        sort:    __arrayProto.sort, // ? name - order?\n\n\n        splice:  __arrayProto.splice,\n\n\n        toArray: function ()\n        {\n            return __arrayProto.slice.call( this );\n        },\n\n\n        to$: function ()\n        {\n            return $( this );\n        },\n\n\n        toJQuery: function ()\n        {\n            return $( this );\n        },\n\n\n        unique: function ()\n        {\n            return new _Api( this.context, _unique(this) );\n        },\n\n\n        unshift: __arrayProto.unshift\n    } );\n\n\n    _Api.extend = function ( scope, obj, ext )\n    {\n        // Only extend API instances and static properties of the API\n        if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\n            return;\n        }\n\n        var\n            i, ien,\n            j, jen,\n            struct, inner,\n            methodScoping = function ( scope, fn, struc ) {\n                return function () {\n                    var ret = fn.apply( scope, arguments );\n\n                    // Method extension\n                    _Api.extend( ret, ret, struc.methodExt );\n                    return ret;\n                };\n            };\n\n        for ( i=0, ien=ext.length ; i<ien ; i++ ) {\n            struct = ext[i];\n\n            // Value\n            obj[ struct.name ] = typeof struct.val === 'function' ?\n                methodScoping( scope, struct.val, struct ) :\n                $.isPlainObject( struct.val ) ?\n                {} :\n                    struct.val;\n\n            obj[ struct.name ].__dt_wrapper = true;\n\n            // Property extension\n            _Api.extend( scope, obj[ struct.name ], struct.propExt );\n        }\n    };\n\n\n    // @todo - Is there need for an augment function?\n    // _Api.augment = function ( inst, name )\n    // {\n    // \t// Find src object in the structure from the name\n    // \tvar parts = name.split('.');\n\n    // \t_Api.extend( inst, obj );\n    // };\n\n\n    //     [\n    //       {\n    //         name:      'data'                -- string   - Property name\n    //         val:       function () {},       -- function - Api method (or undefined if just an object\n    //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n    //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n    //       },\n    //       {\n    //         name:     'row'\n    //         val:       {},\n    //         methodExt: [ ... ],\n    //         propExt:   [\n    //           {\n    //             name:      'data'\n    //             val:       function () {},\n    //             methodExt: [ ... ],\n    //             propExt:   [ ... ]\n    //           },\n    //           ...\n    //         ]\n    //       }\n    //     ]\n\n    _Api.register = _api_register = function ( name, val )\n    {\n        if ( $.isArray( name ) ) {\n            for ( var j=0, jen=name.length ; j<jen ; j++ ) {\n                _Api.register( name[j], val );\n            }\n            return;\n        }\n\n        var\n            i, ien,\n            heir = name.split('.'),\n            struct = __apiStruct,\n            key, method;\n\n        var find = function ( src, name ) {\n            for ( var i=0, ien=src.length ; i<ien ; i++ ) {\n                if ( src[i].name === name ) {\n                    return src[i];\n                }\n            }\n            return null;\n        };\n\n        for ( i=0, ien=heir.length ; i<ien ; i++ ) {\n            method = heir[i].indexOf('()') !== -1;\n            key = method ?\n                heir[i].replace('()', '') :\n                heir[i];\n\n            var src = find( struct, key );\n            if ( ! src ) {\n                src = {\n                    name:      key,\n                    val:       {},\n                    methodExt: [],\n                    propExt:   []\n                };\n                struct.push( src );\n            }\n\n            if ( i === ien-1 ) {\n                src.val = val;\n            }\n            else {\n                struct = method ?\n                    src.methodExt :\n                    src.propExt;\n            }\n        }\n    };\n\n\n    _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\n        _Api.register( pluralName, val );\n\n        _Api.register( singularName, function () {\n            var ret = val.apply( this, arguments );\n\n            if ( ret === this ) {\n                // Returned item is the API instance that was passed in, return it\n                return this;\n            }\n            else if ( ret instanceof _Api ) {\n                // New API instance returned, want the value from the first item\n                // in the returned array for the singular result.\n                return ret.length ?\n                    $.isArray( ret[0] ) ?\n                        new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\n                        ret[0] :\n                    undefined;\n            }\n\n            // Non-API return - just fire it back\n            return ret;\n        } );\n    };\n\n\n    /**\n     * Selector for HTML tables. Apply the given selector to the give array of\n     * DataTables settings objects.\n     *\n     * @param {string|integer} [selector] jQuery selector string or integer\n     * @param  {array} Array of DataTables settings objects to be filtered\n     * @return {array}\n     * @ignore\n     */\n    var __table_selector = function ( selector, a )\n    {\n        // Integer is used to pick out a table by index\n        if ( typeof selector === 'number' ) {\n            return [ a[ selector ] ];\n        }\n\n        // Perform a jQuery selector on the table nodes\n        var nodes = $.map( a, function (el, i) {\n            return el.nTable;\n        } );\n\n        return $(nodes)\n            .filter( selector )\n            .map( function (i) {\n                // Need to translate back from the table node to the settings\n                var idx = $.inArray( this, nodes );\n                return a[ idx ];\n            } )\n            .toArray();\n    };\n\n\n\n    /**\n     * Context selector for the API's context (i.e. the tables the API instance\n     * refers to.\n     *\n     * @name    DataTable.Api#tables\n     * @param {string|integer} [selector] Selector to pick which tables the iterator\n     *   should operate on. If not given, all tables in the current context are\n     *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n     *   select multiple tables or as an integer to select a single table.\n     * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n     */\n    _api_register( 'tables()', function ( selector ) {\n        // A new instance is created if there was a selector specified\n        return selector ?\n            new _Api( __table_selector( selector, this.context ) ) :\n            this;\n    } );\n\n\n    _api_register( 'table()', function ( selector ) {\n        var tables = this.tables( selector );\n        var ctx = tables.context;\n\n        // Truncate to the first matched table\n        return ctx.length ?\n            new _Api( ctx[0] ) :\n            tables;\n    } );\n\n\n    _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTable;\n        }, 1 );\n    } );\n\n\n    _api_registerPlural( 'tables().body()', 'table().body()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTBody;\n        }, 1 );\n    } );\n\n\n    _api_registerPlural( 'tables().header()', 'table().header()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTHead;\n        }, 1 );\n    } );\n\n\n    _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTFoot;\n        }, 1 );\n    } );\n\n\n    _api_registerPlural( 'tables().containers()', 'table().container()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTableWrapper;\n        }, 1 );\n    } );\n\n\n\n    /**\n     * Redraw the tables in the current context.\n     */\n    _api_register( 'draw()', function ( paging ) {\n        return this.iterator( 'table', function ( settings ) {\n            if ( paging === 'page' ) {\n                _fnDraw( settings );\n            }\n            else {\n                if ( typeof paging === 'string' ) {\n                    paging = paging === 'full-hold' ?\n                        false :\n                        true;\n                }\n\n                _fnReDraw( settings, paging===false );\n            }\n        } );\n    } );\n\n\n\n    /**\n     * Get the current page index.\n     *\n     * @return {integer} Current page index (zero based)\n     *//**\n     * Set the current page.\n     *\n     * Note that if you attempt to show a page which does not exist, DataTables will\n     * not throw an error, but rather reset the paging.\n     *\n     * @param {integer|string} action The paging action to take. This can be one of:\n     *  * `integer` - The page index to jump to\n     *  * `string` - An action to take:\n     *    * `first` - Jump to first page.\n     *    * `next` - Jump to the next page\n     *    * `previous` - Jump to previous page\n     *    * `last` - Jump to the last page.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'page()', function ( action ) {\n        if ( action === undefined ) {\n            return this.page.info().page; // not an expensive call\n        }\n\n        // else, have an action to take on all tables\n        return this.iterator( 'table', function ( settings ) {\n            _fnPageChange( settings, action );\n        } );\n    } );\n\n\n    /**\n     * Paging information for the first table in the current context.\n     *\n     * If you require paging information for another table, use the `table()` method\n     * with a suitable selector.\n     *\n     * @return {object} Object with the following properties set:\n     *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n     *  * `pages` - Total number of pages\n     *  * `start` - Display index for the first record shown on the current page\n     *  * `end` - Display index for the last record shown on the current page\n     *  * `length` - Display length (number of records). Note that generally `start\n     *    + length = end`, but this is not always true, for example if there are\n     *    only 2 records to show on the final page, with a length of 10.\n     *  * `recordsTotal` - Full data set length\n     *  * `recordsDisplay` - Data set length once the current filtering criterion\n     *    are applied.\n     */\n    _api_register( 'page.info()', function ( action ) {\n        if ( this.context.length === 0 ) {\n            return undefined;\n        }\n\n        var\n            settings   = this.context[0],\n            start      = settings._iDisplayStart,\n            len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n            visRecords = settings.fnRecordsDisplay(),\n            all        = len === -1;\n\n        return {\n            \"page\":           all ? 0 : Math.floor( start / len ),\n            \"pages\":          all ? 1 : Math.ceil( visRecords / len ),\n            \"start\":          start,\n            \"end\":            settings.fnDisplayEnd(),\n            \"length\":         len,\n            \"recordsTotal\":   settings.fnRecordsTotal(),\n            \"recordsDisplay\": visRecords,\n            \"serverSide\":     _fnDataSource( settings ) === 'ssp'\n        };\n    } );\n\n\n    /**\n     * Get the current page length.\n     *\n     * @return {integer} Current page length. Note `-1` indicates that all records\n     *   are to be shown.\n     *//**\n     * Set the current page length.\n     *\n     * @param {integer} Page length to set. Use `-1` to show all records.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'page.len()', function ( len ) {\n        // Note that we can't call this function 'length()' because `length`\n        // is a Javascript property of functions which defines how many arguments\n        // the function expects.\n        if ( len === undefined ) {\n            return this.context.length !== 0 ?\n                this.context[0]._iDisplayLength :\n                undefined;\n        }\n\n        // else, set the page length\n        return this.iterator( 'table', function ( settings ) {\n            _fnLengthChange( settings, len );\n        } );\n    } );\n\n\n\n    var __reload = function ( settings, holdPosition, callback ) {\n        // Use the draw event to trigger a callback\n        if ( callback ) {\n            var api = new _Api( settings );\n\n            api.one( 'draw', function () {\n                callback( api.ajax.json() );\n            } );\n        }\n\n        if ( _fnDataSource( settings ) == 'ssp' ) {\n            _fnReDraw( settings, holdPosition );\n        }\n        else {\n            _fnProcessingDisplay( settings, true );\n\n            // Cancel an existing request\n            var xhr = settings.jqXHR;\n            if ( xhr && xhr.readyState !== 4 ) {\n                xhr.abort();\n            }\n\n            // Trigger xhr\n            _fnBuildAjax( settings, [], function( json ) {\n                _fnClearTable( settings );\n\n                var data = _fnAjaxDataSrc( settings, json );\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n                    _fnAddData( settings, data[i] );\n                }\n\n                _fnReDraw( settings, holdPosition );\n                _fnProcessingDisplay( settings, false );\n            } );\n        }\n    };\n\n\n    /**\n     * Get the JSON response from the last Ajax request that DataTables made to the\n     * server. Note that this returns the JSON from the first table in the current\n     * context.\n     *\n     * @return {object} JSON received from the server.\n     */\n    _api_register( 'ajax.json()', function () {\n        var ctx = this.context;\n\n        if ( ctx.length > 0 ) {\n            return ctx[0].json;\n        }\n\n        // else return undefined;\n    } );\n\n\n    /**\n     * Get the data submitted in the last Ajax request\n     */\n    _api_register( 'ajax.params()', function () {\n        var ctx = this.context;\n\n        if ( ctx.length > 0 ) {\n            return ctx[0].oAjaxData;\n        }\n\n        // else return undefined;\n    } );\n\n\n    /**\n     * Reload tables from the Ajax data source. Note that this function will\n     * automatically re-draw the table when the remote data has been loaded.\n     *\n     * @param {boolean} [reset=true] Reset (default) or hold the current paging\n     *   position. A full re-sort and re-filter is performed when this method is\n     *   called, which is why the pagination reset is the default action.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'ajax.reload()', function ( callback, resetPaging ) {\n        return this.iterator( 'table', function (settings) {\n            __reload( settings, resetPaging===false, callback );\n        } );\n    } );\n\n\n    /**\n     * Get the current Ajax URL. Note that this returns the URL from the first\n     * table in the current context.\n     *\n     * @return {string} Current Ajax source URL\n     *//**\n     * Set the Ajax URL. Note that this will set the URL for all tables in the\n     * current context.\n     *\n     * @param {string} url URL to set.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'ajax.url()', function ( url ) {\n        var ctx = this.context;\n\n        if ( url === undefined ) {\n            // get\n            if ( ctx.length === 0 ) {\n                return undefined;\n            }\n            ctx = ctx[0];\n\n            return ctx.ajax ?\n                $.isPlainObject( ctx.ajax ) ?\n                    ctx.ajax.url :\n                    ctx.ajax :\n                ctx.sAjaxSource;\n        }\n\n        // set\n        return this.iterator( 'table', function ( settings ) {\n            if ( $.isPlainObject( settings.ajax ) ) {\n                settings.ajax.url = url;\n            }\n            else {\n                settings.ajax = url;\n            }\n            // No need to consider sAjaxSource here since DataTables gives priority\n            // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n            // value of `sAjaxSource` redundant.\n        } );\n    } );\n\n\n    /**\n     * Load data from the newly set Ajax URL. Note that this method is only\n     * available when `ajax.url()` is used to set a URL. Additionally, this method\n     * has the same effect as calling `ajax.reload()` but is provided for\n     * convenience when setting a new URL. Like `ajax.reload()` it will\n     * automatically redraw the table once the remote data has been loaded.\n     *\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\n        // Same as a reload, but makes sense to present it for easy access after a\n        // url change\n        return this.iterator( 'table', function ( ctx ) {\n            __reload( ctx, resetPaging===false, callback );\n        } );\n    } );\n\n\n\n\n    var _selector_run = function ( type, selector, selectFn, settings, opts )\n    {\n        var\n            out = [], res,\n            a, i, ien, j, jen,\n            selectorType = typeof selector;\n\n        // Can't just check for isArray here, as an API or jQuery instance might be\n        // given with their array like look\n        if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\n            selector = [ selector ];\n        }\n\n        for ( i=0, ien=selector.length ; i<ien ; i++ ) {\n            a = selector[i] && selector[i].split ?\n                selector[i].split(',') :\n                [ selector[i] ];\n\n            for ( j=0, jen=a.length ; j<jen ; j++ ) {\n                res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\n\n                if ( res && res.length ) {\n                    out = out.concat( res );\n                }\n            }\n        }\n\n        // selector extensions\n        var ext = _ext.selector[ type ];\n        if ( ext.length ) {\n            for ( i=0, ien=ext.length ; i<ien ; i++ ) {\n                out = ext[i]( settings, opts, out );\n            }\n        }\n\n        return _unique( out );\n    };\n\n\n    var _selector_opts = function ( opts )\n    {\n        if ( ! opts ) {\n            opts = {};\n        }\n\n        // Backwards compatibility for 1.9- which used the terminology filter rather\n        // than search\n        if ( opts.filter && opts.search === undefined ) {\n            opts.search = opts.filter;\n        }\n\n        return $.extend( {\n            search: 'none',\n            order: 'current',\n            page: 'all'\n        }, opts );\n    };\n\n\n    var _selector_first = function ( inst )\n    {\n        // Reduce the API instance to the first item found\n        for ( var i=0, ien=inst.length ; i<ien ; i++ ) {\n            if ( inst[i].length > 0 ) {\n                // Assign the first element to the first item in the instance\n                // and truncate the instance and context\n                inst[0] = inst[i];\n                inst[0].length = 1;\n                inst.length = 1;\n                inst.context = [ inst.context[i] ];\n\n                return inst;\n            }\n        }\n\n        // Not found - return an empty instance\n        inst.length = 0;\n        return inst;\n    };\n\n\n    var _selector_row_indexes = function ( settings, opts )\n    {\n        var\n            i, ien, tmp, a=[],\n            displayFiltered = settings.aiDisplay,\n            displayMaster = settings.aiDisplayMaster;\n\n        var\n            search = opts.search,  // none, applied, removed\n            order  = opts.order,   // applied, current, index (original - compatibility with 1.9)\n            page   = opts.page;    // all, current\n\n        if ( _fnDataSource( settings ) == 'ssp' ) {\n            // In server-side processing mode, most options are irrelevant since\n            // rows not shown don't exist and the index order is the applied order\n            // Removed is a special case - for consistency just return an empty\n            // array\n            return search === 'removed' ?\n                [] :\n                _range( 0, displayMaster.length );\n        }\n        else if ( page == 'current' ) {\n            // Current page implies that order=current and fitler=applied, since it is\n            // fairly senseless otherwise, regardless of what order and search actually\n            // are\n            for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\n                a.push( displayFiltered[i] );\n            }\n        }\n        else if ( order == 'current' || order == 'applied' ) {\n            a = search == 'none' ?\n                displayMaster.slice() :                      // no search\n                search == 'applied' ?\n                    displayFiltered.slice() :                // applied search\n                    $.map( displayMaster, function (el, i) { // removed search\n                        return $.inArray( el, displayFiltered ) === -1 ? el : null;\n                    } );\n        }\n        else if ( order == 'index' || order == 'original' ) {\n            for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n                if ( search == 'none' ) {\n                    a.push( i );\n                }\n                else { // applied | removed\n                    tmp = $.inArray( i, displayFiltered );\n\n                    if ((tmp === -1 && search == 'removed') ||\n                        (tmp >= 0   && search == 'applied') )\n                    {\n                        a.push( i );\n                    }\n                }\n            }\n        }\n\n        return a;\n    };\n\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Rows\n     *\n     * {}          - no selector - use all available rows\n     * {integer}   - row aoData index\n     * {node}      - TR node\n     * {string}    - jQuery selector to apply to the TR elements\n     * {array}     - jQuery array of nodes, or simply an array of TR nodes\n     *\n     */\n\n\n    var __row_selector = function ( settings, selector, opts )\n    {\n        var run = function ( sel ) {\n            var selInt = _intVal( sel );\n            var i, ien;\n\n            // Short cut - selector is a number and no options provided (default is\n            // all records, so no need to check if the index is in there, since it\n            // must be - dev error if the index doesn't exist).\n            if ( selInt !== null && ! opts ) {\n                return [ selInt ];\n            }\n\n            var rows = _selector_row_indexes( settings, opts );\n\n            if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\n                // Selector - integer\n                return [ selInt ];\n            }\n            else if ( ! sel ) {\n                // Selector - none\n                return rows;\n            }\n\n            // Selector - function\n            if ( typeof sel === 'function' ) {\n                return $.map( rows, function (idx) {\n                    var row = settings.aoData[ idx ];\n                    return sel( idx, row._aData, row.nTr ) ? idx : null;\n                } );\n            }\n\n            // Get nodes in the order from the `rows` array with null values removed\n            var nodes = _removeEmpty(\n                _pluck_order( settings.aoData, rows, 'nTr' )\n            );\n\n            // Selector - node\n            if ( sel.nodeName ) {\n                if ( sel._DT_RowIndex !== undefined ) {\n                    return [ sel._DT_RowIndex ]; // Property added by DT for fast lookup\n                }\n                else if ( sel._DT_CellIndex ) {\n                    return [ sel._DT_CellIndex.row ];\n                }\n                else {\n                    var host = $(sel).closest('*[data-dt-row]');\n                    return host.length ?\n                        [ host.data('dt-row') ] :\n                        [];\n                }\n            }\n\n            // ID selector. Want to always be able to select rows by id, regardless\n            // of if the tr element has been created or not, so can't rely upon\n            // jQuery here - hence a custom implementation. This does not match\n            // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n            // but to select it using a CSS selector engine (like Sizzle or\n            // querySelect) it would need to need to be escaped for some characters.\n            // DataTables simplifies this for row selectors since you can select\n            // only a row. A # indicates an id any anything that follows is the id -\n            // unescaped.\n            if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {\n                // get row index from id\n                var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];\n                if ( rowObj !== undefined ) {\n                    return [ rowObj.idx ];\n                }\n\n                // need to fall through to jQuery in case there is DOM id that\n                // matches\n            }\n\n            // Selector - jQuery selector string, array of nodes or jQuery object/\n            // As jQuery's .filter() allows jQuery objects to be passed in filter,\n            // it also allows arrays, so this will cope with all three options\n            return $(nodes)\n                .filter( sel )\n                .map( function () {\n                    return this._DT_RowIndex;\n                } )\n                .toArray();\n        };\n\n        return _selector_run( 'row', selector, run, settings, opts );\n    };\n\n\n    _api_register( 'rows()', function ( selector, opts ) {\n        // argument shifting\n        if ( selector === undefined ) {\n            selector = '';\n        }\n        else if ( $.isPlainObject( selector ) ) {\n            opts = selector;\n            selector = '';\n        }\n\n        opts = _selector_opts( opts );\n\n        var inst = this.iterator( 'table', function ( settings ) {\n            return __row_selector( settings, selector, opts );\n        }, 1 );\n\n        // Want argument shifting here and in __row_selector?\n        inst.selector.rows = selector;\n        inst.selector.opts = opts;\n\n        return inst;\n    } );\n\n    _api_register( 'rows().nodes()', function () {\n        return this.iterator( 'row', function ( settings, row ) {\n            return settings.aoData[ row ].nTr || undefined;\n        }, 1 );\n    } );\n\n    _api_register( 'rows().data()', function () {\n        return this.iterator( true, 'rows', function ( settings, rows ) {\n            return _pluck_order( settings.aoData, rows, '_aData' );\n        }, 1 );\n    } );\n\n    _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\n        return this.iterator( 'row', function ( settings, row ) {\n            var r = settings.aoData[ row ];\n            return type === 'search' ? r._aFilterData : r._aSortData;\n        }, 1 );\n    } );\n\n    _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\n        return this.iterator( 'row', function ( settings, row ) {\n            _fnInvalidate( settings, row, src );\n        } );\n    } );\n\n    _api_registerPlural( 'rows().indexes()', 'row().index()', function () {\n        return this.iterator( 'row', function ( settings, row ) {\n            return row;\n        }, 1 );\n    } );\n\n    _api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {\n        var a = [];\n        var context = this.context;\n\n        // `iterator` will drop undefined values, but in this case we want them\n        for ( var i=0, ien=context.length ; i<ien ; i++ ) {\n            for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {\n                var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );\n                a.push( (hash === true ? '#' : '' )+ id );\n            }\n        }\n\n        return new _Api( context, a );\n    } );\n\n    _api_registerPlural( 'rows().remove()', 'row().remove()', function () {\n        var that = this;\n\n        this.iterator( 'row', function ( settings, row, thatIdx ) {\n            var data = settings.aoData;\n            var rowData = data[ row ];\n            var i, ien, j, jen;\n            var loopRow, loopCells;\n\n            data.splice( row, 1 );\n\n            // Update the cached indexes\n            for ( i=0, ien=data.length ; i<ien ; i++ ) {\n                loopRow = data[i];\n                loopCells = loopRow.anCells;\n\n                // Rows\n                if ( loopRow.nTr !== null ) {\n                    loopRow.nTr._DT_RowIndex = i;\n                }\n\n                // Cells\n                if ( loopCells !== null ) {\n                    for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {\n                        loopCells[j]._DT_CellIndex.row = i;\n                    }\n                }\n            }\n\n            // Delete from the display arrays\n            _fnDeleteIndex( settings.aiDisplayMaster, row );\n            _fnDeleteIndex( settings.aiDisplay, row );\n            _fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\n\n            // Check for an 'overflow' they case for displaying the table\n            _fnLengthOverflow( settings );\n\n            // Remove the row's ID reference if there is one\n            var id = settings.rowIdFn( rowData._aData );\n            if ( id !== undefined ) {\n                delete settings.aIds[ id ];\n            }\n        } );\n\n        this.iterator( 'table', function ( settings ) {\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n                settings.aoData[i].idx = i;\n            }\n        } );\n\n        return this;\n    } );\n\n\n    _api_register( 'rows.add()', function ( rows ) {\n        var newRows = this.iterator( 'table', function ( settings ) {\n            var row, i, ien;\n            var out = [];\n\n            for ( i=0, ien=rows.length ; i<ien ; i++ ) {\n                row = rows[i];\n\n                if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n                    out.push( _fnAddTr( settings, row )[0] );\n                }\n                else {\n                    out.push( _fnAddData( settings, row ) );\n                }\n            }\n\n            return out;\n        }, 1 );\n\n        // Return an Api.rows() extended instance, so rows().nodes() etc can be used\n        var modRows = this.rows( -1 );\n        modRows.pop();\n        $.merge( modRows, newRows );\n\n        return modRows;\n    } );\n\n\n\n\n\n    /**\n     *\n     */\n    _api_register( 'row()', function ( selector, opts ) {\n        return _selector_first( this.rows( selector, opts ) );\n    } );\n\n\n    _api_register( 'row().data()', function ( data ) {\n        var ctx = this.context;\n\n        if ( data === undefined ) {\n            // Get\n            return ctx.length && this.length ?\n                ctx[0].aoData[ this[0] ]._aData :\n                undefined;\n        }\n\n        // Set\n        ctx[0].aoData[ this[0] ]._aData = data;\n\n        // Automatically invalidate\n        _fnInvalidate( ctx[0], this[0], 'data' );\n\n        return this;\n    } );\n\n\n    _api_register( 'row().node()', function () {\n        var ctx = this.context;\n\n        return ctx.length && this.length ?\n        ctx[0].aoData[ this[0] ].nTr || null :\n            null;\n    } );\n\n\n    _api_register( 'row.add()', function ( row ) {\n        // Allow a jQuery object to be passed in - only a single row is added from\n        // it though - the first element in the set\n        if ( row instanceof $ && row.length ) {\n            row = row[0];\n        }\n\n        var rows = this.iterator( 'table', function ( settings ) {\n            if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n                return _fnAddTr( settings, row )[0];\n            }\n            return _fnAddData( settings, row );\n        } );\n\n        // Return an Api.rows() extended instance, with the newly added row selected\n        return this.row( rows[0] );\n    } );\n\n\n\n    var __details_add = function ( ctx, row, data, klass )\n    {\n        // Convert to array of TR elements\n        var rows = [];\n        var addRow = function ( r, k ) {\n            // Recursion to allow for arrays of jQuery objects\n            if ( $.isArray( r ) || r instanceof $ ) {\n                for ( var i=0, ien=r.length ; i<ien ; i++ ) {\n                    addRow( r[i], k );\n                }\n                return;\n            }\n\n            // If we get a TR element, then just add it directly - up to the dev\n            // to add the correct number of columns etc\n            if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\n                rows.push( r );\n            }\n            else {\n                // Otherwise create a row with a wrapper\n                var created = $('<tr><td/></tr>').addClass( k );\n                $('td', created)\n                    .addClass( k )\n                    .html( r )\n                    [0].colSpan = _fnVisbleColumns( ctx );\n\n                rows.push( created[0] );\n            }\n        };\n\n        addRow( data, klass );\n\n        if ( row._details ) {\n            row._details.remove();\n        }\n\n        row._details = $(rows);\n\n        // If the children were already shown, that state should be retained\n        if ( row._detailsShow ) {\n            row._details.insertAfter( row.nTr );\n        }\n    };\n\n\n    var __details_remove = function ( api, idx )\n    {\n        var ctx = api.context;\n\n        if ( ctx.length ) {\n            var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];\n\n            if ( row && row._details ) {\n                row._details.remove();\n\n                row._detailsShow = undefined;\n                row._details = undefined;\n            }\n        }\n    };\n\n\n    var __details_display = function ( api, show ) {\n        var ctx = api.context;\n\n        if ( ctx.length && api.length ) {\n            var row = ctx[0].aoData[ api[0] ];\n\n            if ( row._details ) {\n                row._detailsShow = show;\n\n                if ( show ) {\n                    row._details.insertAfter( row.nTr );\n                }\n                else {\n                    row._details.detach();\n                }\n\n                __details_events( ctx[0] );\n            }\n        }\n    };\n\n\n    var __details_events = function ( settings )\n    {\n        var api = new _Api( settings );\n        var namespace = '.dt.DT_details';\n        var drawEvent = 'draw'+namespace;\n        var colvisEvent = 'column-visibility'+namespace;\n        var destroyEvent = 'destroy'+namespace;\n        var data = settings.aoData;\n\n        api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\n\n        if ( _pluck( data, '_details' ).length > 0 ) {\n            // On each draw, insert the required elements into the document\n            api.on( drawEvent, function ( e, ctx ) {\n                if ( settings !== ctx ) {\n                    return;\n                }\n\n                api.rows( {page:'current'} ).eq(0).each( function (idx) {\n                    // Internal data grab\n                    var row = data[ idx ];\n\n                    if ( row._detailsShow ) {\n                        row._details.insertAfter( row.nTr );\n                    }\n                } );\n            } );\n\n            // Column visibility change - update the colspan\n            api.on( colvisEvent, function ( e, ctx, idx, vis ) {\n                if ( settings !== ctx ) {\n                    return;\n                }\n\n                // Update the colspan for the details rows (note, only if it already has\n                // a colspan)\n                var row, visible = _fnVisbleColumns( ctx );\n\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n                    row = data[i];\n\n                    if ( row._details ) {\n                        row._details.children('td[colspan]').attr('colspan', visible );\n                    }\n                }\n            } );\n\n            // Table destroyed - nuke any child rows\n            api.on( destroyEvent, function ( e, ctx ) {\n                if ( settings !== ctx ) {\n                    return;\n                }\n\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n                    if ( data[i]._details ) {\n                        __details_remove( api, i );\n                    }\n                }\n            } );\n        }\n    };\n\n    // Strings for the method names to help minification\n    var _emp = '';\n    var _child_obj = _emp+'row().child';\n    var _child_mth = _child_obj+'()';\n\n    // data can be:\n    //  tr\n    //  string\n    //  jQuery or array of any of the above\n    _api_register( _child_mth, function ( data, klass ) {\n        var ctx = this.context;\n\n        if ( data === undefined ) {\n            // get\n            return ctx.length && this.length ?\n                ctx[0].aoData[ this[0] ]._details :\n                undefined;\n        }\n        else if ( data === true ) {\n            // show\n            this.child.show();\n        }\n        else if ( data === false ) {\n            // remove\n            __details_remove( this );\n        }\n        else if ( ctx.length && this.length ) {\n            // set\n            __details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\n        }\n\n        return this;\n    } );\n\n\n    _api_register( [\n        _child_obj+'.show()',\n        _child_mth+'.show()' // only when `child()` was called with parameters (without\n    ], function ( show ) {   // it returns an object and this method is not executed)\n        __details_display( this, true );\n        return this;\n    } );\n\n\n    _api_register( [\n        _child_obj+'.hide()',\n        _child_mth+'.hide()' // only when `child()` was called with parameters (without\n    ], function () {         // it returns an object and this method is not executed)\n        __details_display( this, false );\n        return this;\n    } );\n\n\n    _api_register( [\n        _child_obj+'.remove()',\n        _child_mth+'.remove()' // only when `child()` was called with parameters (without\n    ], function () {           // it returns an object and this method is not executed)\n        __details_remove( this );\n        return this;\n    } );\n\n\n    _api_register( _child_obj+'.isShown()', function () {\n        var ctx = this.context;\n\n        if ( ctx.length && this.length ) {\n            // _detailsShown as false or undefined will fall through to return false\n            return ctx[0].aoData[ this[0] ]._detailsShow || false;\n        }\n        return false;\n    } );\n\n\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Columns\n     *\n     * {integer}           - column index (>=0 count from left, <0 count from right)\n     * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n     * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n     * \"{string}:name\"     - column name\n     * \"{string}\"          - jQuery selector on column header nodes\n     *\n     */\n\n    // can be an array of these items, comma separated list, or an array of comma\n    // separated lists\n\n    var __re_column_selector = /^(.+):(name|visIdx|visible)$/;\n\n\n    // r1 and r2 are redundant - but it means that the parameters match for the\n    // iterator callback in columns().data()\n    var __columnData = function ( settings, column, r1, r2, rows ) {\n        var a = [];\n        for ( var row=0, ien=rows.length ; row<ien ; row++ ) {\n            a.push( _fnGetCellData( settings, rows[row], column ) );\n        }\n        return a;\n    };\n\n\n    var __column_selector = function ( settings, selector, opts )\n    {\n        var\n            columns = settings.aoColumns,\n            names = _pluck( columns, 'sName' ),\n            nodes = _pluck( columns, 'nTh' );\n\n        var run = function ( s ) {\n            var selInt = _intVal( s );\n\n            // Selector - all\n            if ( s === '' ) {\n                return _range( columns.length );\n            }\n\n            // Selector - index\n            if ( selInt !== null ) {\n                return [ selInt >= 0 ?\n                    selInt : // Count from left\n                columns.length + selInt // Count from right (+ because its a negative value)\n                ];\n            }\n\n            // Selector = function\n            if ( typeof s === 'function' ) {\n                var rows = _selector_row_indexes( settings, opts );\n\n                return $.map( columns, function (col, idx) {\n                    return s(\n                        idx,\n                        __columnData( settings, idx, 0, 0, rows ),\n                        nodes[ idx ]\n                    ) ? idx : null;\n                } );\n            }\n\n            // jQuery or string selector\n            var match = typeof s === 'string' ?\n                s.match( __re_column_selector ) :\n                '';\n\n            if ( match ) {\n                switch( match[2] ) {\n                    case 'visIdx':\n                    case 'visible':\n                        var idx = parseInt( match[1], 10 );\n                        // Visible index given, convert to column index\n                        if ( idx < 0 ) {\n                            // Counting from the right\n                            var visColumns = $.map( columns, function (col,i) {\n                                return col.bVisible ? i : null;\n                            } );\n                            return [ visColumns[ visColumns.length + idx ] ];\n                        }\n                        // Counting from the left\n                        return [ _fnVisibleToColumnIndex( settings, idx ) ];\n\n                    case 'name':\n                        // match by name. `names` is column index complete and in order\n                        return $.map( names, function (name, i) {\n                            return name === match[1] ? i : null;\n                        } );\n\n                    default:\n                        return [];\n                }\n            }\n\n            // Cell in the table body\n            if ( s.nodeName && s._DT_CellIndex ) {\n                return [ s._DT_CellIndex.column ];\n            }\n\n            // jQuery selector on the TH elements for the columns\n            var jqResult = $( nodes )\n                .filter( s )\n                .map( function () {\n                    return $.inArray( this, nodes ); // `nodes` is column index complete and in order\n                } )\n                .toArray();\n\n            if ( jqResult.length || ! s.nodeName ) {\n                return jqResult;\n            }\n\n            // Otherwise a node which might have a `dt-column` data attribute, or be\n            // a child or such an element\n            var host = $(s).closest('*[data-dt-column]');\n            return host.length ?\n                [ host.data('dt-column') ] :\n                [];\n        };\n\n        return _selector_run( 'column', selector, run, settings, opts );\n    };\n\n\n    var __setColumnVis = function ( settings, column, vis ) {\n        var\n            cols = settings.aoColumns,\n            col  = cols[ column ],\n            data = settings.aoData,\n            row, cells, i, ien, tr;\n\n        // Get\n        if ( vis === undefined ) {\n            return col.bVisible;\n        }\n\n        // Set\n        // No change\n        if ( col.bVisible === vis ) {\n            return;\n        }\n\n        if ( vis ) {\n            // Insert column\n            // Need to decide if we should use appendChild or insertBefore\n            var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\n\n            for ( i=0, ien=data.length ; i<ien ; i++ ) {\n                tr = data[i].nTr;\n                cells = data[i].anCells;\n\n                if ( tr ) {\n                    // insertBefore can act like appendChild if 2nd arg is null\n                    tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\n                }\n            }\n        }\n        else {\n            // Remove column\n            $( _pluck( settings.aoData, 'anCells', column ) ).detach();\n        }\n\n        // Common actions\n        col.bVisible = vis;\n        _fnDrawHead( settings, settings.aoHeader );\n        _fnDrawHead( settings, settings.aoFooter );\n\n        _fnSaveState( settings );\n    };\n\n\n    _api_register( 'columns()', function ( selector, opts ) {\n        // argument shifting\n        if ( selector === undefined ) {\n            selector = '';\n        }\n        else if ( $.isPlainObject( selector ) ) {\n            opts = selector;\n            selector = '';\n        }\n\n        opts = _selector_opts( opts );\n\n        var inst = this.iterator( 'table', function ( settings ) {\n            return __column_selector( settings, selector, opts );\n        }, 1 );\n\n        // Want argument shifting here and in _row_selector?\n        inst.selector.cols = selector;\n        inst.selector.opts = opts;\n\n        return inst;\n    } );\n\n    _api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\n        return this.iterator( 'column', function ( settings, column ) {\n            return settings.aoColumns[column].nTh;\n        }, 1 );\n    } );\n\n    _api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\n        return this.iterator( 'column', function ( settings, column ) {\n            return settings.aoColumns[column].nTf;\n        }, 1 );\n    } );\n\n    _api_registerPlural( 'columns().data()', 'column().data()', function () {\n        return this.iterator( 'column-rows', __columnData, 1 );\n    } );\n\n    _api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\n        return this.iterator( 'column', function ( settings, column ) {\n            return settings.aoColumns[column].mData;\n        }, 1 );\n    } );\n\n    _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\n        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n            return _pluck_order( settings.aoData, rows,\n                type === 'search' ? '_aFilterData' : '_aSortData', column\n            );\n        }, 1 );\n    } );\n\n    _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\n        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n            return _pluck_order( settings.aoData, rows, 'anCells', column ) ;\n        }, 1 );\n    } );\n\n    _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\n        var ret = this.iterator( 'column', function ( settings, column ) {\n            if ( vis === undefined ) {\n                return settings.aoColumns[ column ].bVisible;\n            } // else\n            __setColumnVis( settings, column, vis );\n        } );\n\n        // Group the column visibility changes\n        if ( vis !== undefined ) {\n            // Second loop once the first is done for events\n            this.iterator( 'column', function ( settings, column ) {\n                _fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );\n            } );\n\n            if ( calc === undefined || calc ) {\n                this.columns.adjust();\n            }\n        }\n\n        return ret;\n    } );\n\n    _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\n        return this.iterator( 'column', function ( settings, column ) {\n            return type === 'visible' ?\n                _fnColumnIndexToVisible( settings, column ) :\n                column;\n        }, 1 );\n    } );\n\n    _api_register( 'columns.adjust()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            _fnAdjustColumnSizing( settings );\n        }, 1 );\n    } );\n\n    _api_register( 'column.index()', function ( type, idx ) {\n        if ( this.context.length !== 0 ) {\n            var ctx = this.context[0];\n\n            if ( type === 'fromVisible' || type === 'toData' ) {\n                return _fnVisibleToColumnIndex( ctx, idx );\n            }\n            else if ( type === 'fromData' || type === 'toVisible' ) {\n                return _fnColumnIndexToVisible( ctx, idx );\n            }\n        }\n    } );\n\n    _api_register( 'column()', function ( selector, opts ) {\n        return _selector_first( this.columns( selector, opts ) );\n    } );\n\n\n\n    var __cell_selector = function ( settings, selector, opts )\n    {\n        var data = settings.aoData;\n        var rows = _selector_row_indexes( settings, opts );\n        var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\n        var allCells = $( [].concat.apply([], cells) );\n        var row;\n        var columns = settings.aoColumns.length;\n        var a, i, ien, j, o, host;\n\n        var run = function ( s ) {\n            var fnSelector = typeof s === 'function';\n\n            if ( s === null || s === undefined || fnSelector ) {\n                // All cells and function selectors\n                a = [];\n\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\n                    row = rows[i];\n\n                    for ( j=0 ; j<columns ; j++ ) {\n                        o = {\n                            row: row,\n                            column: j\n                        };\n\n                        if ( fnSelector ) {\n                            // Selector - function\n                            host = data[ row ];\n\n                            if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\n                                a.push( o );\n                            }\n                        }\n                        else {\n                            // Selector - all\n                            a.push( o );\n                        }\n                    }\n                }\n\n                return a;\n            }\n\n            // Selector - index\n            if ( $.isPlainObject( s ) ) {\n                return [s];\n            }\n\n            // Selector - jQuery filtered cells\n            var jqResult = allCells\n                .filter( s )\n                .map( function (i, el) {\n                    return { // use a new object, in case someone changes the values\n                        row:    el._DT_CellIndex.row,\n                        column: el._DT_CellIndex.column\n                    };\n                } )\n                .toArray();\n\n            if ( jqResult.length || ! s.nodeName ) {\n                return jqResult;\n            }\n\n            // Otherwise the selector is a node, and there is one last option - the\n            // element might be a child of an element which has dt-row and dt-column\n            // data attributes\n            host = $(s).closest('*[data-dt-row]');\n            return host.length ?\n                [ {\n                    row: host.data('dt-row'),\n                    column: host.data('dt-column')\n                } ] :\n                [];\n        };\n\n        return _selector_run( 'cell', selector, run, settings, opts );\n    };\n\n\n\n\n    _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\n        // Argument shifting\n        if ( $.isPlainObject( rowSelector ) ) {\n            // Indexes\n            if ( rowSelector.row === undefined ) {\n                // Selector options in first parameter\n                opts = rowSelector;\n                rowSelector = null;\n            }\n            else {\n                // Cell index objects in first parameter\n                opts = columnSelector;\n                columnSelector = null;\n            }\n        }\n        if ( $.isPlainObject( columnSelector ) ) {\n            opts = columnSelector;\n            columnSelector = null;\n        }\n\n        // Cell selector\n        if ( columnSelector === null || columnSelector === undefined ) {\n            return this.iterator( 'table', function ( settings ) {\n                return __cell_selector( settings, rowSelector, _selector_opts( opts ) );\n            } );\n        }\n\n        // Row + column selector\n        var columns = this.columns( columnSelector, opts );\n        var rows = this.rows( rowSelector, opts );\n        var a, i, ien, j, jen;\n\n        var cells = this.iterator( 'table', function ( settings, idx ) {\n            a = [];\n\n            for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\n                for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\n                    a.push( {\n                        row:    rows[idx][i],\n                        column: columns[idx][j]\n                    } );\n                }\n            }\n\n            return a;\n        }, 1 );\n\n        $.extend( cells.selector, {\n            cols: columnSelector,\n            rows: rowSelector,\n            opts: opts\n        } );\n\n        return cells;\n    } );\n\n\n    _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            var data = settings.aoData[ row ];\n\n            return data && data.anCells ?\n                data.anCells[ column ] :\n                undefined;\n        }, 1 );\n    } );\n\n\n    _api_register( 'cells().data()', function () {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return _fnGetCellData( settings, row, column );\n        }, 1 );\n    } );\n\n\n    _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\n        type = type === 'search' ? '_aFilterData' : '_aSortData';\n\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return settings.aoData[ row ][ type ][ column ];\n        }, 1 );\n    } );\n\n\n    _api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return _fnGetCellData( settings, row, column, type );\n        }, 1 );\n    } );\n\n\n    _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return {\n                row: row,\n                column: column,\n                columnVisible: _fnColumnIndexToVisible( settings, column )\n            };\n        }, 1 );\n    } );\n\n\n    _api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            _fnInvalidate( settings, row, src, column );\n        } );\n    } );\n\n\n\n    _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\n        return _selector_first( this.cells( rowSelector, columnSelector, opts ) );\n    } );\n\n\n    _api_register( 'cell().data()', function ( data ) {\n        var ctx = this.context;\n        var cell = this[0];\n\n        if ( data === undefined ) {\n            // Get\n            return ctx.length && cell.length ?\n                _fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\n                undefined;\n        }\n\n        // Set\n        _fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\n        _fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\n\n        return this;\n    } );\n\n\n\n    /**\n     * Get current ordering (sorting) that has been applied to the table.\n     *\n     * @returns {array} 2D array containing the sorting information for the first\n     *   table in the current context. Each element in the parent array represents\n     *   a column being sorted upon (i.e. multi-sorting with two columns would have\n     *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n     *   the column index that the sorting condition applies to, the second is the\n     *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n     *   index of the sorting order from the `column.sorting` initialisation array.\n     *//**\n     * Set the ordering for the table.\n     *\n     * @param {integer} order Column index to sort upon.\n     * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n     * @returns {DataTables.Api} this\n     *//**\n     * Set the ordering for the table.\n     *\n     * @param {array} order 1D array of sorting information to be applied.\n     * @param {array} [...] Optional additional sorting conditions\n     * @returns {DataTables.Api} this\n     *//**\n     * Set the ordering for the table.\n     *\n     * @param {array} order 2D array of sorting information to be applied.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'order()', function ( order, dir ) {\n        var ctx = this.context;\n\n        if ( order === undefined ) {\n            // get\n            return ctx.length !== 0 ?\n                ctx[0].aaSorting :\n                undefined;\n        }\n\n        // set\n        if ( typeof order === 'number' ) {\n            // Simple column / direction passed in\n            order = [ [ order, dir ] ];\n        }\n        else if ( order.length && ! $.isArray( order[0] ) ) {\n            // Arguments passed in (list of 1D arrays)\n            order = Array.prototype.slice.call( arguments );\n        }\n        // otherwise a 2D array was passed in\n\n        return this.iterator( 'table', function ( settings ) {\n            settings.aaSorting = order.slice();\n        } );\n    } );\n\n\n    /**\n     * Attach a sort listener to an element for a given column\n     *\n     * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n     *   listener to. This can take the form of a single DOM node, a jQuery\n     *   collection of nodes or a jQuery selector which will identify the node(s).\n     * @param {integer} column the column that a click on this node will sort on\n     * @param {function} [callback] callback function when sort is run\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'order.listener()', function ( node, column, callback ) {\n        return this.iterator( 'table', function ( settings ) {\n            _fnSortAttachListener( settings, node, column, callback );\n        } );\n    } );\n\n\n    _api_register( 'order.fixed()', function ( set ) {\n        if ( ! set ) {\n            var ctx = this.context;\n            var fixed = ctx.length ?\n                ctx[0].aaSortingFixed :\n                undefined;\n\n            return $.isArray( fixed ) ?\n            { pre: fixed } :\n                fixed;\n        }\n\n        return this.iterator( 'table', function ( settings ) {\n            settings.aaSortingFixed = $.extend( true, {}, set );\n        } );\n    } );\n\n\n    // Order by the selected column(s)\n    _api_register( [\n        'columns().order()',\n        'column().order()'\n    ], function ( dir ) {\n        var that = this;\n\n        return this.iterator( 'table', function ( settings, i ) {\n            var sort = [];\n\n            $.each( that[i], function (j, col) {\n                sort.push( [ col, dir ] );\n            } );\n\n            settings.aaSorting = sort;\n        } );\n    } );\n\n\n\n    _api_register( 'search()', function ( input, regex, smart, caseInsen ) {\n        var ctx = this.context;\n\n        if ( input === undefined ) {\n            // get\n            return ctx.length !== 0 ?\n                ctx[0].oPreviousSearch.sSearch :\n                undefined;\n        }\n\n        // set\n        return this.iterator( 'table', function ( settings ) {\n            if ( ! settings.oFeatures.bFilter ) {\n                return;\n            }\n\n            _fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\n                \"sSearch\": input+\"\",\n                \"bRegex\":  regex === null ? false : regex,\n                \"bSmart\":  smart === null ? true  : smart,\n                \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n            } ), 1 );\n        } );\n    } );\n\n\n    _api_registerPlural(\n        'columns().search()',\n        'column().search()',\n        function ( input, regex, smart, caseInsen ) {\n            return this.iterator( 'column', function ( settings, column ) {\n                var preSearch = settings.aoPreSearchCols;\n\n                if ( input === undefined ) {\n                    // get\n                    return preSearch[ column ].sSearch;\n                }\n\n                // set\n                if ( ! settings.oFeatures.bFilter ) {\n                    return;\n                }\n\n                $.extend( preSearch[ column ], {\n                    \"sSearch\": input+\"\",\n                    \"bRegex\":  regex === null ? false : regex,\n                    \"bSmart\":  smart === null ? true  : smart,\n                    \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n                } );\n\n                _fnFilterComplete( settings, settings.oPreviousSearch, 1 );\n            } );\n        }\n    );\n\n    /*\n     * State API methods\n     */\n\n    _api_register( 'state()', function () {\n        return this.context.length ?\n            this.context[0].oSavedState :\n            null;\n    } );\n\n\n    _api_register( 'state.clear()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            // Save an empty object\n            settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\n        } );\n    } );\n\n\n    _api_register( 'state.loaded()', function () {\n        return this.context.length ?\n            this.context[0].oLoadedState :\n            null;\n    } );\n\n\n    _api_register( 'state.save()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            _fnSaveState( settings );\n        } );\n    } );\n\n\n\n    /**\n     * Provide a common method for plug-ins to check the version of DataTables being\n     * used, in order to ensure compatibility.\n     *\n     *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n     *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n     *  @returns {boolean} true if this version of DataTables is greater or equal to\n     *    the required version, or false if this version of DataTales is not\n     *    suitable\n     *  @static\n     *  @dtopt API-Static\n     *\n     *  @example\n     *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n     */\n    DataTable.versionCheck = DataTable.fnVersionCheck = function( version )\n    {\n        var aThis = DataTable.version.split('.');\n        var aThat = version.split('.');\n        var iThis, iThat;\n\n        for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\n            iThis = parseInt( aThis[i], 10 ) || 0;\n            iThat = parseInt( aThat[i], 10 ) || 0;\n\n            // Parts are the same, keep comparing\n            if (iThis === iThat) {\n                continue;\n            }\n\n            // Parts are different, return immediately\n            return iThis > iThat;\n        }\n\n        return true;\n    };\n\n\n    /**\n     * Check if a `<table>` node is a DataTable table already or not.\n     *\n     *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n     *      selector for the table to test. Note that if more than more than one\n     *      table is passed on, only the first will be checked\n     *  @returns {boolean} true the table given is a DataTable, or false otherwise\n     *  @static\n     *  @dtopt API-Static\n     *\n     *  @example\n     *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n\t *      $('#example').dataTable();\n\t *    }\n     */\n    DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\n    {\n        var t = $(table).get(0);\n        var is = false;\n\n        $.each( DataTable.settings, function (i, o) {\n            var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n            var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\n            if ( o.nTable === t || head === t || foot === t ) {\n                is = true;\n            }\n        } );\n\n        return is;\n    };\n\n\n    /**\n     * Get all DataTable tables that have been initialised - optionally you can\n     * select to get only currently visible tables.\n     *\n     *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n     *    or visible tables only.\n     *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n     *    DataTables\n     *  @static\n     *  @dtopt API-Static\n     *\n     *  @example\n     *    $.each( $.fn.dataTable.tables(true), function () {\n\t *      $(table).DataTable().columns.adjust();\n\t *    } );\n     */\n    DataTable.tables = DataTable.fnTables = function ( visible )\n    {\n        var api = false;\n\n        if ( $.isPlainObject( visible ) ) {\n            api = visible.api;\n            visible = visible.visible;\n        }\n\n        var a = $.map( DataTable.settings, function (o) {\n            if ( !visible || (visible && $(o.nTable).is(':visible')) ) {\n                return o.nTable;\n            }\n        } );\n\n        return api ?\n            new _Api( a ) :\n            a;\n    };\n\n\n    /**\n     * Convert from camel case parameters to Hungarian notation. This is made public\n     * for the extensions to provide the same ability as DataTables core to accept\n     * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n     * parameters.\n     *\n     *  @param {object} src The model object which holds all parameters that can be\n     *    mapped.\n     *  @param {object} user The object to convert from camel case to Hungarian.\n     *  @param {boolean} force When set to `true`, properties which already have a\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\n     *    won't be.\n     */\n    DataTable.camelToHungarian = _fnCamelToHungarian;\n\n\n\n    /**\n     *\n     */\n    _api_register( '$()', function ( selector, opts ) {\n        var\n            rows   = this.rows( opts ).nodes(), // Get all rows\n            jqRows = $(rows);\n\n        return $( [].concat(\n            jqRows.filter( selector ).toArray(),\n            jqRows.find( selector ).toArray()\n        ) );\n    } );\n\n\n    // jQuery functions to operate on the tables\n    $.each( [ 'on', 'one', 'off' ], function (i, key) {\n        _api_register( key+'()', function ( /* event, handler */ ) {\n            var args = Array.prototype.slice.call(arguments);\n\n            // Add the `dt` namespace automatically if it isn't already present\n            if ( ! args[0].match(/\\.dt\\b/) ) {\n                args[0] += '.dt';\n            }\n\n            var inst = $( this.tables().nodes() );\n            inst[key].apply( inst, args );\n            return this;\n        } );\n    } );\n\n\n    _api_register( 'clear()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            _fnClearTable( settings );\n        } );\n    } );\n\n\n    _api_register( 'settings()', function () {\n        return new _Api( this.context, this.context );\n    } );\n\n\n    _api_register( 'init()', function () {\n        var ctx = this.context;\n        return ctx.length ? ctx[0].oInit : null;\n    } );\n\n\n    _api_register( 'data()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            return _pluck( settings.aoData, '_aData' );\n        } ).flatten();\n    } );\n\n\n    _api_register( 'destroy()', function ( remove ) {\n        remove = remove || false;\n\n        return this.iterator( 'table', function ( settings ) {\n            var orig      = settings.nTableWrapper.parentNode;\n            var classes   = settings.oClasses;\n            var table     = settings.nTable;\n            var tbody     = settings.nTBody;\n            var thead     = settings.nTHead;\n            var tfoot     = settings.nTFoot;\n            var jqTable   = $(table);\n            var jqTbody   = $(tbody);\n            var jqWrapper = $(settings.nTableWrapper);\n            var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\n            var i, ien;\n\n            // Flag to note that the table is currently being destroyed - no action\n            // should be taken\n            settings.bDestroying = true;\n\n            // Fire off the destroy callbacks for plug-ins etc\n            _fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\n\n            // If not being removed from the document, make all columns visible\n            if ( ! remove ) {\n                new _Api( settings ).columns().visible( true );\n            }\n\n            // Blitz all `DT` namespaced events (these are internal events, the\n            // lowercase, `dt` events are user subscribed and they are responsible\n            // for removing them\n            jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');\n            $(window).unbind('.DT-'+settings.sInstance);\n\n            // When scrolling we had to break the table up - restore it\n            if ( table != thead.parentNode ) {\n                jqTable.children('thead').detach();\n                jqTable.append( thead );\n            }\n\n            if ( tfoot && table != tfoot.parentNode ) {\n                jqTable.children('tfoot').detach();\n                jqTable.append( tfoot );\n            }\n\n            settings.aaSorting = [];\n            settings.aaSortingFixed = [];\n            _fnSortingClasses( settings );\n\n            $( rows ).removeClass( settings.asStripeClasses.join(' ') );\n\n            $('th, td', thead).removeClass( classes.sSortable+' '+\n                classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\n            );\n\n            if ( settings.bJUI ) {\n                $('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();\n                $('th, td', thead).each( function () {\n                    var wrapper = $('div.'+classes.sSortJUIWrapper, this);\n                    $(this).append( wrapper.contents() );\n                    wrapper.detach();\n                } );\n            }\n\n            // Add the TR elements back into the table in their original order\n            jqTbody.children().detach();\n            jqTbody.append( rows );\n\n            // Remove the DataTables generated nodes, events and classes\n            var removedMethod = remove ? 'remove' : 'detach';\n            jqTable[ removedMethod ]();\n            jqWrapper[ removedMethod ]();\n\n            // If we need to reattach the table to the document\n            if ( ! remove && orig ) {\n                // insertBefore acts like appendChild if !arg[1]\n                orig.insertBefore( table, settings.nTableReinsertBefore );\n\n                // Restore the width of the original table - was read from the style property,\n                // so we can restore directly to that\n                jqTable\n                    .css( 'width', settings.sDestroyWidth )\n                    .removeClass( classes.sTable );\n\n                // If the were originally stripe classes - then we add them back here.\n                // Note this is not fool proof (for example if not all rows had stripe\n                // classes - but it's a good effort without getting carried away\n                ien = settings.asDestroyStripes.length;\n\n                if ( ien ) {\n                    jqTbody.children().each( function (i) {\n                        $(this).addClass( settings.asDestroyStripes[i % ien] );\n                    } );\n                }\n            }\n\n            /* Remove the settings object from the settings array */\n            var idx = $.inArray( settings, DataTable.settings );\n            if ( idx !== -1 ) {\n                DataTable.settings.splice( idx, 1 );\n            }\n        } );\n    } );\n\n\n    // Add the `every()` method for rows, columns and cells in a compact form\n    $.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\n        _api_register( type+'s().every()', function ( fn ) {\n            var opts = this.selector.opts;\n            var api = this;\n\n            return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {\n                // Rows and columns:\n                //  arg1 - index\n                //  arg2 - table counter\n                //  arg3 - loop counter\n                //  arg4 - undefined\n                // Cells:\n                //  arg1 - row index\n                //  arg2 - column index\n                //  arg3 - table counter\n                //  arg4 - loop counter\n                fn.call(\n                    api[ type ](\n                        arg1,\n                        type==='cell' ? arg2 : opts,\n                        type==='cell' ? opts : undefined\n                    ),\n                    arg1, arg2, arg3, arg4\n                );\n            } );\n        } );\n    } );\n\n\n    // i18n method for extensions to be able to use the language object from the\n    // DataTable\n    _api_register( 'i18n()', function ( token, def, plural ) {\n        var ctx = this.context[0];\n        var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\n\n        if ( resolved === undefined ) {\n            resolved = def;\n        }\n\n        if ( plural !== undefined && $.isPlainObject( resolved ) ) {\n            resolved = resolved[ plural ] !== undefined ?\n                resolved[ plural ] :\n                resolved._;\n        }\n\n        return resolved.replace( '%d', plural ); // nb: plural might be undefined,\n    } );\n\n    /**\n     * Version string for plug-ins to check compatibility. Allowed format is\n     * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n     * only for non-release builds. See http://semver.org/ for more information.\n     *  @member\n     *  @type string\n     *  @default Version number\n     */\n    DataTable.version = \"1.10.12\";\n\n    /**\n     * Private data store, containing all of the settings objects that are\n     * created for the tables on a given page.\n     *\n     * Note that the `DataTable.settings` object is aliased to\n     * `jQuery.fn.dataTableExt` through which it may be accessed and\n     * manipulated, or `jQuery.fn.dataTable.settings`.\n     *  @member\n     *  @type array\n     *  @default []\n     *  @private\n     */\n    DataTable.settings = [];\n\n    /**\n     * Object models container, for the various models that DataTables has\n     * available to it. These models define the objects that are used to hold\n     * the active state and configuration of the table.\n     *  @namespace\n     */\n    DataTable.models = {};\n\n\n\n    /**\n     * Template object for the way in which DataTables holds information about\n     * search information for the global filter and individual column filters.\n     *  @namespace\n     */\n    DataTable.models.oSearch = {\n        /**\n         * Flag to indicate if the filtering should be case insensitive or not\n         *  @type boolean\n         *  @default true\n         */\n        \"bCaseInsensitive\": true,\n\n        /**\n         * Applied search term\n         *  @type string\n         *  @default <i>Empty string</i>\n         */\n        \"sSearch\": \"\",\n\n        /**\n         * Flag to indicate if the search term should be interpreted as a\n         * regular expression (true) or not (false) and therefore and special\n         * regex characters escaped.\n         *  @type boolean\n         *  @default false\n         */\n        \"bRegex\": false,\n\n        /**\n         * Flag to indicate if DataTables is to use its smart filtering or not.\n         *  @type boolean\n         *  @default true\n         */\n        \"bSmart\": true\n    };\n\n\n\n\n    /**\n     * Template object for the way in which DataTables holds information about\n     * each individual row. This is the object format used for the settings\n     * aoData array.\n     *  @namespace\n     */\n    DataTable.models.oRow = {\n        /**\n         * TR element for the row\n         *  @type node\n         *  @default null\n         */\n        \"nTr\": null,\n\n        /**\n         * Array of TD elements for each row. This is null until the row has been\n         * created.\n         *  @type array nodes\n         *  @default []\n         */\n        \"anCells\": null,\n\n        /**\n         * Data object from the original data source for the row. This is either\n         * an array if using the traditional form of DataTables, or an object if\n         * using mData options. The exact type will depend on the passed in\n         * data from the data source, or will be an array if using DOM a data\n         * source.\n         *  @type array|object\n         *  @default []\n         */\n        \"_aData\": [],\n\n        /**\n         * Sorting data cache - this array is ostensibly the same length as the\n         * number of columns (although each index is generated only as it is\n         * needed), and holds the data that is used for sorting each column in the\n         * row. We do this cache generation at the start of the sort in order that\n         * the formatting of the sort data need be done only once for each cell\n         * per sort. This array should not be read from or written to by anything\n         * other than the master sorting methods.\n         *  @type array\n         *  @default null\n         *  @private\n         */\n        \"_aSortData\": null,\n\n        /**\n         * Per cell filtering data cache. As per the sort data cache, used to\n         * increase the performance of the filtering in DataTables\n         *  @type array\n         *  @default null\n         *  @private\n         */\n        \"_aFilterData\": null,\n\n        /**\n         * Filtering data cache. This is the same as the cell filtering cache, but\n         * in this case a string rather than an array. This is easily computed with\n         * a join on `_aFilterData`, but is provided as a cache so the join isn't\n         * needed on every search (memory traded for performance)\n         *  @type array\n         *  @default null\n         *  @private\n         */\n        \"_sFilterRow\": null,\n\n        /**\n         * Cache of the class name that DataTables has applied to the row, so we\n         * can quickly look at this variable rather than needing to do a DOM check\n         * on className for the nTr property.\n         *  @type string\n         *  @default <i>Empty string</i>\n         *  @private\n         */\n        \"_sRowStripe\": \"\",\n\n        /**\n         * Denote if the original data source was from the DOM, or the data source\n         * object. This is used for invalidating data, so DataTables can\n         * automatically read data from the original source, unless uninstructed\n         * otherwise.\n         *  @type string\n         *  @default null\n         *  @private\n         */\n        \"src\": null,\n\n        /**\n         * Index in the aoData array. This saves an indexOf lookup when we have the\n         * object, but want to know the index\n         *  @type integer\n         *  @default -1\n         *  @private\n         */\n        \"idx\": -1\n    };\n\n\n    /**\n     * Template object for the column information object in DataTables. This object\n     * is held in the settings aoColumns array and contains all the information that\n     * DataTables needs about each individual column.\n     *\n     * Note that this object is related to {@link DataTable.defaults.column}\n     * but this one is the internal data store for DataTables's cache of columns.\n     * It should NOT be manipulated outside of DataTables. Any configuration should\n     * be done through the initialisation options.\n     *  @namespace\n     */\n    DataTable.models.oColumn = {\n        /**\n         * Column index. This could be worked out on-the-fly with $.inArray, but it\n         * is faster to just hold it as a variable\n         *  @type integer\n         *  @default null\n         */\n        \"idx\": null,\n\n        /**\n         * A list of the columns that sorting should occur on when this column\n         * is sorted. That this property is an array allows multi-column sorting\n         * to be defined for a column (for example first name / last name columns\n         * would benefit from this). The values are integers pointing to the\n         * columns to be sorted on (typically it will be a single integer pointing\n         * at itself, but that doesn't need to be the case).\n         *  @type array\n         */\n        \"aDataSort\": null,\n\n        /**\n         * Define the sorting directions that are applied to the column, in sequence\n         * as the column is repeatedly sorted upon - i.e. the first value is used\n         * as the sorting direction when the column if first sorted (clicked on).\n         * Sort it again (click again) and it will move on to the next index.\n         * Repeat until loop.\n         *  @type array\n         */\n        \"asSorting\": null,\n\n        /**\n         * Flag to indicate if the column is searchable, and thus should be included\n         * in the filtering or not.\n         *  @type boolean\n         */\n        \"bSearchable\": null,\n\n        /**\n         * Flag to indicate if the column is sortable or not.\n         *  @type boolean\n         */\n        \"bSortable\": null,\n\n        /**\n         * Flag to indicate if the column is currently visible in the table or not\n         *  @type boolean\n         */\n        \"bVisible\": null,\n\n        /**\n         * Store for manual type assignment using the `column.type` option. This\n         * is held in store so we can manipulate the column's `sType` property.\n         *  @type string\n         *  @default null\n         *  @private\n         */\n        \"_sManualType\": null,\n\n        /**\n         * Flag to indicate if HTML5 data attributes should be used as the data\n         * source for filtering or sorting. True is either are.\n         *  @type boolean\n         *  @default false\n         *  @private\n         */\n        \"_bAttrSrc\": false,\n\n        /**\n         * Developer definable function that is called whenever a cell is created (Ajax source,\n         * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n         * allowing you to modify the DOM element (add background colour for example) when the\n         * element is available.\n         *  @type function\n         *  @param {element} nTd The TD node that has been created\n         *  @param {*} sData The Data for the cell\n         *  @param {array|object} oData The data for the whole row\n         *  @param {int} iRow The row index for the aoData data store\n         *  @default null\n         */\n        \"fnCreatedCell\": null,\n\n        /**\n         * Function to get data from a cell in a column. You should <b>never</b>\n         * access data directly through _aData internally in DataTables - always use\n         * the method attached to this property. It allows mData to function as\n         * required. This function is automatically assigned by the column\n         * initialisation method\n         *  @type function\n         *  @param {array|object} oData The data array/object for the array\n         *    (i.e. aoData[]._aData)\n         *  @param {string} sSpecific The specific data type you want to get -\n         *    'display', 'type' 'filter' 'sort'\n         *  @returns {*} The data for the cell from the given row's data\n         *  @default null\n         */\n        \"fnGetData\": null,\n\n        /**\n         * Function to set data for a cell in the column. You should <b>never</b>\n         * set the data directly to _aData internally in DataTables - always use\n         * this method. It allows mData to function as required. This function\n         * is automatically assigned by the column initialisation method\n         *  @type function\n         *  @param {array|object} oData The data array/object for the array\n         *    (i.e. aoData[]._aData)\n         *  @param {*} sValue Value to set\n         *  @default null\n         */\n        \"fnSetData\": null,\n\n        /**\n         * Property to read the value for the cells in the column from the data\n         * source array / object. If null, then the default content is used, if a\n         * function is given then the return from the function is used.\n         *  @type function|int|string|null\n         *  @default null\n         */\n        \"mData\": null,\n\n        /**\n         * Partner property to mData which is used (only when defined) to get\n         * the data - i.e. it is basically the same as mData, but without the\n         * 'set' option, and also the data fed to it is the result from mData.\n         * This is the rendering method to match the data method of mData.\n         *  @type function|int|string|null\n         *  @default null\n         */\n        \"mRender\": null,\n\n        /**\n         * Unique header TH/TD element for this column - this is what the sorting\n         * listener is attached to (if sorting is enabled.)\n         *  @type node\n         *  @default null\n         */\n        \"nTh\": null,\n\n        /**\n         * Unique footer TH/TD element for this column (if there is one). Not used\n         * in DataTables as such, but can be used for plug-ins to reference the\n         * footer for each column.\n         *  @type node\n         *  @default null\n         */\n        \"nTf\": null,\n\n        /**\n         * The class to apply to all TD elements in the table's TBODY for the column\n         *  @type string\n         *  @default null\n         */\n        \"sClass\": null,\n\n        /**\n         * When DataTables calculates the column widths to assign to each column,\n         * it finds the longest string in each column and then constructs a\n         * temporary table and reads the widths from that. The problem with this\n         * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n         * string - thus the calculation can go wrong (doing it properly and putting\n         * it into an DOM object and measuring that is horribly(!) slow). Thus as\n         * a \"work around\" we provide this option. It will append its value to the\n         * text that is found to be the longest string for the column - i.e. padding.\n         *  @type string\n         */\n        \"sContentPadding\": null,\n\n        /**\n         * Allows a default value to be given for a column's data, and will be used\n         * whenever a null data source is encountered (this can be because mData\n         * is set to null, or because the data source itself is null).\n         *  @type string\n         *  @default null\n         */\n        \"sDefaultContent\": null,\n\n        /**\n         * Name for the column, allowing reference to the column by name as well as\n         * by index (needs a lookup to work by name).\n         *  @type string\n         */\n        \"sName\": null,\n\n        /**\n         * Custom sorting data type - defines which of the available plug-ins in\n         * afnSortData the custom sorting will use - if any is defined.\n         *  @type string\n         *  @default std\n         */\n        \"sSortDataType\": 'std',\n\n        /**\n         * Class to be applied to the header element when sorting on this column\n         *  @type string\n         *  @default null\n         */\n        \"sSortingClass\": null,\n\n        /**\n         * Class to be applied to the header element when sorting on this column -\n         * when jQuery UI theming is used.\n         *  @type string\n         *  @default null\n         */\n        \"sSortingClassJUI\": null,\n\n        /**\n         * Title of the column - what is seen in the TH element (nTh).\n         *  @type string\n         */\n        \"sTitle\": null,\n\n        /**\n         * Column sorting and filtering type\n         *  @type string\n         *  @default null\n         */\n        \"sType\": null,\n\n        /**\n         * Width of the column\n         *  @type string\n         *  @default null\n         */\n        \"sWidth\": null,\n\n        /**\n         * Width of the column when it was first \"encountered\"\n         *  @type string\n         *  @default null\n         */\n        \"sWidthOrig\": null\n    };\n\n\n    /*\n     * Developer note: The properties of the object below are given in Hungarian\n     * notation, that was used as the interface for DataTables prior to v1.10, however\n     * from v1.10 onwards the primary interface is camel case. In order to avoid\n     * breaking backwards compatibility utterly with this change, the Hungarian\n     * version is still, internally the primary interface, but is is not documented\n     * - hence the @name tags in each doc comment. This allows a Javascript function\n     * to create a map from Hungarian notation to camel case (going the other direction\n     * would require each property to be listed, which would at around 3K to the size\n     * of DataTables, while this method is about a 0.5K hit.\n     *\n     * Ultimately this does pave the way for Hungarian notation to be dropped\n     * completely, but that is a massive amount of work and will break current\n     * installs (therefore is on-hold until v2).\n     */\n\n    /**\n     * Initialisation options that can be given to DataTables at initialisation\n     * time.\n     *  @namespace\n     */\n    DataTable.defaults = {\n        /**\n         * An array of data to use for the table, passed in at initialisation which\n         * will be used in preference to any data which is already in the DOM. This is\n         * particularly useful for constructing tables purely in Javascript, for\n         * example with a custom Ajax call.\n         *  @type array\n         *  @default null\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.data\n         *\n         *  @example\n         *    // Using a 2D array data source\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"data\": [\n\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n\t\t *        ],\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"Engine\" },\n\t\t *          { \"title\": \"Browser\" },\n\t\t *          { \"title\": \"Platform\" },\n\t\t *          { \"title\": \"Version\" },\n\t\t *          { \"title\": \"Grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using an array of objects as a data source (`data`)\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"data\": [\n\t\t *          {\n\t\t *            \"engine\":   \"Trident\",\n\t\t *            \"browser\":  \"Internet Explorer 4.0\",\n\t\t *            \"platform\": \"Win 95+\",\n\t\t *            \"version\":  4,\n\t\t *            \"grade\":    \"X\"\n\t\t *          },\n\t\t *          {\n\t\t *            \"engine\":   \"Trident\",\n\t\t *            \"browser\":  \"Internet Explorer 5.0\",\n\t\t *            \"platform\": \"Win 95+\",\n\t\t *            \"version\":  5,\n\t\t *            \"grade\":    \"C\"\n\t\t *          }\n\t\t *        ],\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },\n\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },\n\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"aaData\": null,\n\n\n        /**\n         * If ordering is enabled, then DataTables will perform a first pass sort on\n         * initialisation. You can define which column(s) the sort is performed\n         * upon, and the sorting direction, with this variable. The `sorting` array\n         * should contain an array for each column to be sorted initially containing\n         * the column's index and a direction string ('asc' or 'desc').\n         *  @type array\n         *  @default [[0,'asc']]\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.order\n         *\n         *  @example\n         *    // Sort by 3rd column first, and then 4th column\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"order\": [[2,'asc'], [3,'desc']]\n\t\t *      } );\n\t\t *    } );\n         *\n         *    // No initial sorting\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"order\": []\n\t\t *      } );\n\t\t *    } );\n         */\n        \"aaSorting\": [[0,'asc']],\n\n\n        /**\n         * This parameter is basically identical to the `sorting` parameter, but\n         * cannot be overridden by user interaction with the table. What this means\n         * is that you could have a column (visible or hidden) which the sorting\n         * will always be forced on first - any sorting after that (from the user)\n         * will then be performed as required. This can be useful for grouping rows\n         * together.\n         *  @type array\n         *  @default null\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.orderFixed\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderFixed\": [[0,'asc']]\n\t\t *      } );\n\t\t *    } )\n         */\n        \"aaSortingFixed\": [],\n\n\n        /**\n         * DataTables can be instructed to load data to display in the table from a\n         * Ajax source. This option defines how that Ajax call is made and where to.\n         *\n         * The `ajax` property has three different modes of operation, depending on\n         * how it is defined. These are:\n         *\n         * * `string` - Set the URL from where the data should be loaded from.\n         * * `object` - Define properties for `jQuery.ajax`.\n         * * `function` - Custom data get function\n         *\n         * `string`\n         * --------\n         *\n         * As a string, the `ajax` property simply defines the URL from which\n         * DataTables will load data.\n         *\n         * `object`\n         * --------\n         *\n         * As an object, the parameters in the object are passed to\n         * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\n         * of the Ajax request. DataTables has a number of default parameters which\n         * you can override using this option. Please refer to the jQuery\n         * documentation for a full description of the options available, although\n         * the following parameters provide additional options in DataTables or\n         * require special consideration:\n         *\n         * * `data` - As with jQuery, `data` can be provided as an object, but it\n         *   can also be used as a function to manipulate the data DataTables sends\n         *   to the server. The function takes a single parameter, an object of\n         *   parameters with the values that DataTables has readied for sending. An\n         *   object may be returned which will be merged into the DataTables\n         *   defaults, or you can add the items to the object that was passed in and\n         *   not return anything from the function. This supersedes `fnServerParams`\n         *   from DataTables 1.9-.\n         *\n         * * `dataSrc` - By default DataTables will look for the property `data` (or\n         *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n         *   from an Ajax source or for server-side processing - this parameter\n         *   allows that property to be changed. You can use Javascript dotted\n         *   object notation to get a data source for multiple levels of nesting, or\n         *   it my be used as a function. As a function it takes a single parameter,\n         *   the JSON returned from the server, which can be manipulated as\n         *   required, with the returned value being that used by DataTables as the\n         *   data source for the table. This supersedes `sAjaxDataProp` from\n         *   DataTables 1.9-.\n         *\n         * * `success` - Should not be overridden it is used internally in\n         *   DataTables. To manipulate / transform the data returned by the server\n         *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n         *\n         * `function`\n         * ----------\n         *\n         * As a function, making the Ajax call is left up to yourself allowing\n         * complete control of the Ajax request. Indeed, if desired, a method other\n         * than Ajax could be used to obtain the required data, such as Web storage\n         * or an AIR database.\n         *\n         * The function is given four parameters and no return is required. The\n         * parameters are:\n         *\n         * 1. _object_ - Data to send to the server\n         * 2. _function_ - Callback function that must be executed when the required\n         *    data has been obtained. That data should be passed into the callback\n         *    as the only parameter\n         * 3. _object_ - DataTables settings object for the table\n         *\n         * Note that this supersedes `fnServerData` from DataTables 1.9-.\n         *\n         *  @type string|object|function\n         *  @default null\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.ajax\n         *  @since 1.10.0\n         *\n         * @example\n         *   // Get JSON data from a file via Ajax.\n         *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n         *   $('#example').dataTable( {\n\t\t *     \"ajax\": \"data.json\"\n\t\t *   } );\n         *\n         * @example\n         *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n         *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n         *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": \"tableData\"\n\t\t *     }\n\t\t *   } );\n         *\n         * @example\n         *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n         *   // from a plain array rather than an array in an object\n         *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": \"\"\n\t\t *     }\n\t\t *   } );\n         *\n         * @example\n         *   // Manipulate the data returned from the server - add a link to data\n         *   // (note this can, should, be done using `render` for the column - this\n         *   // is just a simple example of how the data can be manipulated).\n         *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": function ( json ) {\n\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n\t\t *         }\n\t\t *         return json;\n\t\t *       }\n\t\t *     }\n\t\t *   } );\n         *\n         * @example\n         *   // Add data to the request\n         *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"data\": function ( d ) {\n\t\t *         return {\n\t\t *           \"extra_search\": $('#extra').val()\n\t\t *         };\n\t\t *       }\n\t\t *     }\n\t\t *   } );\n         *\n         * @example\n         *   // Send request as POST\n         *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"type\": \"POST\"\n\t\t *     }\n\t\t *   } );\n         *\n         * @example\n         *   // Get the data from localStorage (could interface with a form for\n         *   // adding, editing and removing rows).\n         *   $('#example').dataTable( {\n\t\t *     \"ajax\": function (data, callback, settings) {\n\t\t *       callback(\n\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )\n\t\t *       );\n\t\t *     }\n\t\t *   } );\n         */\n        \"ajax\": null,\n\n\n        /**\n         * This parameter allows you to readily specify the entries in the length drop\n         * down menu that DataTables shows when pagination is enabled. It can be\n         * either a 1D array of options which will be used for both the displayed\n         * option and the value, or a 2D array which will use the array in the first\n         * position as the value, and the array in the second position as the\n         * displayed options (useful for language strings such as 'All').\n         *\n         * Note that the `pageLength` property will be automatically set to the\n         * first value given in this array, unless `pageLength` is also provided.\n         *  @type array\n         *  @default [ 10, 25, 50, 100 ]\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.lengthMenu\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"aLengthMenu\": [ 10, 25, 50, 100 ],\n\n\n        /**\n         * The `columns` option in the initialisation parameter allows you to define\n         * details about the way individual columns behave. For a full list of\n         * column options that can be set, please see\n         * {@link DataTable.defaults.column}. Note that if you use `columns` to\n         * define your columns, you must have an entry in the array for every single\n         * column that you have in your table (these can be null if you don't which\n         * to specify any options).\n         *  @member\n         *\n         *  @name DataTable.defaults.column\n         */\n        \"aoColumns\": null,\n\n        /**\n         * Very similar to `columns`, `columnDefs` allows you to target a specific\n         * column, multiple columns, or all columns, using the `targets` property of\n         * each object in the array. This allows great flexibility when creating\n         * tables, as the `columnDefs` arrays can be of any length, targeting the\n         * columns you specifically want. `columnDefs` may use any of the column\n         * options available: {@link DataTable.defaults.column}, but it _must_\n         * have `targets` defined in each object in the array. Values in the `targets`\n         * array may be:\n         *   <ul>\n         *     <li>a string - class name will be matched on the TH for the column</li>\n         *     <li>0 or a positive integer - column index counting from the left</li>\n         *     <li>a negative integer - column index counting from the right</li>\n         *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n         *   </ul>\n         *  @member\n         *\n         *  @name DataTable.defaults.columnDefs\n         */\n        \"aoColumnDefs\": null,\n\n\n        /**\n         * Basically the same as `search`, this parameter defines the individual column\n         * filtering state at initialisation time. The array must be of the same size\n         * as the number of columns, and each element be an object with the parameters\n         * `search` and `escapeRegex` (the latter is optional). 'null' is also\n         * accepted and the default will be used.\n         *  @type array\n         *  @default []\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.searchCols\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searchCols\": [\n\t\t *          null,\n\t\t *          { \"search\": \"My filter\" },\n\t\t *          null,\n\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } )\n         */\n        \"aoSearchCols\": [],\n\n\n        /**\n         * An array of CSS classes that should be applied to displayed rows. This\n         * array may be of any length, and DataTables will apply each class\n         * sequentially, looping when required.\n         *  @type array\n         *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n         *    options</i>\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.stripeClasses\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n\t\t *      } );\n\t\t *    } )\n         */\n        \"asStripeClasses\": null,\n\n\n        /**\n         * Enable or disable automatic column width calculation. This can be disabled\n         * as an optimisation (it takes some time to calculate the widths) if the\n         * tables widths are passed in using `columns`.\n         *  @type boolean\n         *  @default true\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.autoWidth\n         *\n         *  @example\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"autoWidth\": false\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bAutoWidth\": true,\n\n\n        /**\n         * Deferred rendering can provide DataTables with a huge speed boost when you\n         * are using an Ajax or JS data source for the table. This option, when set to\n         * true, will cause DataTables to defer the creation of the table elements for\n         * each row until they are needed for a draw - saving a significant amount of\n         * time.\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.deferRender\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajax\": \"sources/arrays.txt\",\n\t\t *        \"deferRender\": true\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bDeferRender\": false,\n\n\n        /**\n         * Replace a DataTable which matches the given selector and replace it with\n         * one which has the properties of the new initialisation object passed. If no\n         * table matches the selector, then the new DataTable will be constructed as\n         * per normal.\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.destroy\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"srollY\": \"200px\",\n\t\t *        \"paginate\": false\n\t\t *      } );\n\t\t *\n\t\t *      // Some time later....\n\t\t *      $('#example').dataTable( {\n\t\t *        \"filter\": false,\n\t\t *        \"destroy\": true\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bDestroy\": false,\n\n\n        /**\n         * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n         * that it allows the end user to input multiple words (space separated) and\n         * will match a row containing those words, even if not in the order that was\n         * specified (this allow matching across multiple columns). Note that if you\n         * wish to use filtering in DataTables this must remain 'true' - to remove the\n         * default filtering input box and retain filtering abilities, please use\n         * {@link DataTable.defaults.dom}.\n         *  @type boolean\n         *  @default true\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.searching\n         *\n         *  @example\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searching\": false\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bFilter\": true,\n\n\n        /**\n         * Enable or disable the table information display. This shows information\n         * about the data that is currently visible on the page, including information\n         * about filtered data if that action is being performed.\n         *  @type boolean\n         *  @default true\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.info\n         *\n         *  @example\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"info\": false\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bInfo\": true,\n\n\n        /**\n         * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some\n         * slightly different and additional mark-up from what DataTables has\n         * traditionally used).\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.jQueryUI\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"jQueryUI\": true\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bJQueryUI\": false,\n\n\n        /**\n         * Allows the end user to select the size of a formatted page from a select\n         * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n         *  @type boolean\n         *  @default true\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.lengthChange\n         *\n         *  @example\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"lengthChange\": false\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bLengthChange\": true,\n\n\n        /**\n         * Enable or disable pagination.\n         *  @type boolean\n         *  @default true\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.paging\n         *\n         *  @example\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"paging\": false\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bPaginate\": true,\n\n\n        /**\n         * Enable or disable the display of a 'processing' indicator when the table is\n         * being processed (e.g. a sort). This is particularly useful for tables with\n         * large amounts of data where it can take a noticeable amount of time to sort\n         * the entries.\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.processing\n         *\n         *  @example\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"processing\": true\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bProcessing\": false,\n\n\n        /**\n         * Retrieve the DataTables object for the given selector. Note that if the\n         * table has already been initialised, this parameter will cause DataTables\n         * to simply return the object that has already been set up - it will not take\n         * account of any changes you might have made to the initialisation object\n         * passed to DataTables (setting this parameter to true is an acknowledgement\n         * that you understand this). `destroy` can be used to reinitialise a table if\n         * you need.\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.retrieve\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      initTable();\n\t\t *      tableActions();\n\t\t *    } );\n         *\n         *    function initTable ()\n         *    {\n\t\t *      return $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200px\",\n\t\t *        \"paginate\": false,\n\t\t *        \"retrieve\": true\n\t\t *      } );\n\t\t *    }\n         *\n         *    function tableActions ()\n         *    {\n\t\t *      var table = initTable();\n\t\t *      // perform API operations with oTable\n\t\t *    }\n         */\n        \"bRetrieve\": false,\n\n\n        /**\n         * When vertical (y) scrolling is enabled, DataTables will force the height of\n         * the table's viewport to the given height at all times (useful for layout).\n         * However, this can look odd when filtering data down to a small data set,\n         * and the footer is left \"floating\" further down. This parameter (when\n         * enabled) will cause DataTables to collapse the table's viewport down when\n         * the result set will fit within the given Y height.\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.scrollCollapse\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200\",\n\t\t *        \"scrollCollapse\": true\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bScrollCollapse\": false,\n\n\n        /**\n         * Configure DataTables to use server-side processing. Note that the\n         * `ajax` parameter must also be given in order to give DataTables a\n         * source to obtain the required data for each draw.\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Features\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverSide\n         *\n         *  @example\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"xhr.php\"\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bServerSide\": false,\n\n\n        /**\n         * Enable or disable sorting of columns. Sorting of individual columns can be\n         * disabled by the `sortable` option for each column.\n         *  @type boolean\n         *  @default true\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.ordering\n         *\n         *  @example\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ordering\": false\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bSort\": true,\n\n\n        /**\n         * Enable or display DataTables' ability to sort multiple columns at the\n         * same time (activated by shift-click by the user).\n         *  @type boolean\n         *  @default true\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.orderMulti\n         *\n         *  @example\n         *    // Disable multiple column sorting ability\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderMulti\": false\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bSortMulti\": true,\n\n\n        /**\n         * Allows control over whether DataTables should use the top (true) unique\n         * cell that is found for a single column, or the bottom (false - default).\n         * This is useful when using complex headers.\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.orderCellsTop\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderCellsTop\": true\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bSortCellsTop\": false,\n\n\n        /**\n         * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n         * `sorting\\_3` to the columns which are currently being sorted on. This is\n         * presented as a feature switch as it can increase processing time (while\n         * classes are removed and added) so for large data sets you might want to\n         * turn this off.\n         *  @type boolean\n         *  @default true\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.orderClasses\n         *\n         *  @example\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderClasses\": false\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bSortClasses\": true,\n\n\n        /**\n         * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n         * used to save table display information such as pagination information,\n         * display length, filtering and sorting. As such when the end user reloads\n         * the page the display display will match what thy had previously set up.\n         *\n         * Due to the use of `localStorage` the default state saving is not supported\n         * in IE6 or 7. If state saving is required in those browsers, use\n         * `stateSaveCallback` to provide a storage solution such as cookies.\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.stateSave\n         *\n         *  @example\n         *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true\n\t\t *      } );\n\t\t *    } );\n         */\n        \"bStateSave\": false,\n\n\n        /**\n         * This function is called when a TR element is created (and all TD child\n         * elements have been inserted), or registered if using a DOM source, allowing\n         * manipulation of the TR element (adding classes etc).\n         *  @type function\n         *  @param {node} row \"TR\" element for the current row\n         *  @param {array} data Raw data array for this row\n         *  @param {int} dataIndex The index of this row in the internal aoData array\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.createdRow\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"createdRow\": function( row, data, dataIndex ) {\n\t\t *          // Bold the grade for all 'A' grade browsers\n\t\t *          if ( data[4] == \"A\" )\n\t\t *          {\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         */\n        \"fnCreatedRow\": null,\n\n\n        /**\n         * This function is called on every 'draw' event, and allows you to\n         * dynamically modify any aspect you want about the created DOM.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.drawCallback\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"drawCallback\": function( settings ) {\n\t\t *          alert( 'DataTables has redrawn the table' );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         */\n        \"fnDrawCallback\": null,\n\n\n        /**\n         * Identical to fnHeaderCallback() but for the table footer this function\n         * allows you to modify the table footer on every 'draw' event.\n         *  @type function\n         *  @param {node} foot \"TR\" element for the footer\n         *  @param {array} data Full table data (as derived from the original HTML)\n         *  @param {int} start Index for the current display starting point in the\n         *    display array\n         *  @param {int} end Index for the current display ending point in the\n         *    display array\n         *  @param {array int} display Index array to translate the visual position\n         *    to the full data array\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.footerCallback\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n         */\n        \"fnFooterCallback\": null,\n\n\n        /**\n         * When rendering large numbers in the information element for the table\n         * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n         * to have a comma separator for the 'thousands' units (e.g. 1 million is\n         * rendered as \"1,000,000\") to help readability for the end user. This\n         * function will override the default method DataTables uses.\n         *  @type function\n         *  @member\n         *  @param {int} toFormat number to be formatted\n         *  @returns {string} formatted string for DataTables to show the number\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.formatNumber\n         *\n         *  @example\n         *    // Format a number using a single quote for the separator (note that\n         *    // this can also be done with the language.thousands option)\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"formatNumber\": function ( toFormat ) {\n\t\t *          return toFormat.toString().replace(\n\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n\t\t *          );\n\t\t *        };\n\t\t *      } );\n\t\t *    } );\n         */\n        \"fnFormatNumber\": function ( toFormat ) {\n            return toFormat.toString().replace(\n                /\\B(?=(\\d{3})+(?!\\d))/g,\n                this.oLanguage.sThousands\n            );\n        },\n\n\n        /**\n         * This function is called on every 'draw' event, and allows you to\n         * dynamically modify the header row. This can be used to calculate and\n         * display useful information about the table.\n         *  @type function\n         *  @param {node} head \"TR\" element for the header\n         *  @param {array} data Full table data (as derived from the original HTML)\n         *  @param {int} start Index for the current display starting point in the\n         *    display array\n         *  @param {int} end Index for the current display ending point in the\n         *    display array\n         *  @param {array int} display Index array to translate the visual position\n         *    to the full data array\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.headerCallback\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {\n\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n         */\n        \"fnHeaderCallback\": null,\n\n\n        /**\n         * The information element can be used to convey information about the current\n         * state of the table. Although the internationalisation options presented by\n         * DataTables are quite capable of dealing with most customisations, there may\n         * be times where you wish to customise the string further. This callback\n         * allows you to do exactly that.\n         *  @type function\n         *  @param {object} oSettings DataTables settings object\n         *  @param {int} start Starting position in data for the draw\n         *  @param {int} end End position in data for the draw\n         *  @param {int} max Total number of rows in the table (regardless of\n         *    filtering)\n         *  @param {int} total Total number of rows in the data set, after filtering\n         *  @param {string} pre The string that DataTables has formatted using it's\n         *    own rules\n         *  @returns {string} The string to be displayed in the information element.\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.infoCallback\n         *\n         *  @example\n         *    $('#example').dataTable( {\n\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n\t\t *        return start +\" to \"+ end;\n\t\t *      }\n\t\t *    } );\n         */\n        \"fnInfoCallback\": null,\n\n\n        /**\n         * Called when the table has been initialised. Normally DataTables will\n         * initialise sequentially and there will be no need for this function,\n         * however, this does not hold true when using external language information\n         * since that is obtained using an async XHR call.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} json The JSON object request from the server - only\n         *    present if client-side Ajax sourced data is used\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.initComplete\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"initComplete\": function(settings, json) {\n\t\t *          alert( 'DataTables has finished its initialisation.' );\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n         */\n        \"fnInitComplete\": null,\n\n\n        /**\n         * Called at the very start of each table draw and can be used to cancel the\n         * draw by returning false, any other return (including undefined) results in\n         * the full draw occurring).\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @returns {boolean} False will cancel the draw, anything else (including no\n         *    return) will allow it to complete.\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.preDrawCallback\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"preDrawCallback\": function( settings ) {\n\t\t *          if ( $('#test').val() == 1 ) {\n\t\t *            return false;\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         */\n        \"fnPreDrawCallback\": null,\n\n\n        /**\n         * This function allows you to 'post process' each row after it have been\n         * generated for each table draw, but before it is rendered on screen. This\n         * function might be used for setting the row class name etc.\n         *  @type function\n         *  @param {node} row \"TR\" element for the current row\n         *  @param {array} data Raw data array for this row\n         *  @param {int} displayIndex The display index for the current table draw\n         *  @param {int} displayIndexFull The index of the data in the full list of\n         *    rows (after filtering)\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.rowCallback\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n\t\t *          // Bold the grade for all 'A' grade browsers\n\t\t *          if ( data[4] == \"A\" ) {\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         */\n        \"fnRowCallback\": null,\n\n\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         *\n         * This parameter allows you to override the default function which obtains\n         * the data from the server so something more suitable for your application.\n         * For example you could use POST data, or pull information from a Gears or\n         * AIR database.\n         *  @type function\n         *  @member\n         *  @param {string} source HTTP source to obtain the data from (`ajax`)\n         *  @param {array} data A key/value pair object containing the data to send\n         *    to the server\n         *  @param {function} callback to be called on completion of the data get\n         *    process that will draw the data on the page.\n         *  @param {object} settings DataTables settings object\n         *\n         *  @dtopt Callbacks\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverData\n         *\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"fnServerData\": null,\n\n\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         *\n         *  It is often useful to send extra data to the server when making an Ajax\n         * request - for example custom filtering information, and this callback\n         * function makes it trivial to send extra information to the server. The\n         * passed in parameter is the data set that has been constructed by\n         * DataTables, and you can add to this or modify it as you require.\n         *  @type function\n         *  @param {array} data Data array (array of objects which are name/value\n         *    pairs) that has been constructed by DataTables and will be sent to the\n         *    server. In the case of Ajax sourced data with server-side processing\n         *    this will be an empty array, for server-side processing there will be a\n         *    significant number of parameters!\n         *  @returns {undefined} Ensure that you modify the data array passed in,\n         *    as this is passed by reference.\n         *\n         *  @dtopt Callbacks\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverParams\n         *\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"fnServerParams\": null,\n\n\n        /**\n         * Load the table state. With this function you can define from where, and how, the\n         * state of a table is loaded. By default DataTables will load from `localStorage`\n         * but you might wish to use a server-side database or cookies.\n         *  @type function\n         *  @member\n         *  @param {object} settings DataTables settings object\n         *  @return {object} The DataTables state object to be loaded\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateLoadCallback\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadCallback\": function (settings) {\n\t\t *          var o;\n\t\t *\n\t\t *          // Send an Ajax request to the server to get the data. Note that\n\t\t *          // this is a synchronous request.\n\t\t *          $.ajax( {\n\t\t *            \"url\": \"/state_load\",\n\t\t *            \"async\": false,\n\t\t *            \"dataType\": \"json\",\n\t\t *            \"success\": function (json) {\n\t\t *              o = json;\n\t\t *            }\n\t\t *          } );\n\t\t *\n\t\t *          return o;\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         */\n        \"fnStateLoadCallback\": function ( settings ) {\n            try {\n                return JSON.parse(\n                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\n                        'DataTables_'+settings.sInstance+'_'+location.pathname\n                    )\n                );\n            } catch (e) {}\n        },\n\n\n        /**\n         * Callback which allows modification of the saved state prior to loading that state.\n         * This callback is called when the table is loading state from the stored data, but\n         * prior to the settings object being modified by the saved state. Note that for\n         * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n         * a plug-in.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object that is to be loaded\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateLoadParams\n         *\n         *  @example\n         *    // Remove a saved filter, so filtering is never loaded\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadParams\": function (settings, data) {\n\t\t *          data.oSearch.sSearch = \"\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Disallow state loading by returning false\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadParams\": function (settings, data) {\n\t\t *          return false;\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         */\n        \"fnStateLoadParams\": null,\n\n\n        /**\n         * Callback that is called when the state has been loaded from the state saving method\n         * and the DataTables settings object has been modified as a result of the loaded state.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object that was loaded\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateLoaded\n         *\n         *  @example\n         *    // Show an alert with the filtering value that was saved\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoaded\": function (settings, data) {\n\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         */\n        \"fnStateLoaded\": null,\n\n\n        /**\n         * Save the table state. This function allows you to define where and how the state\n         * information for the table is stored By default DataTables will use `localStorage`\n         * but you might wish to use a server-side database or cookies.\n         *  @type function\n         *  @member\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object to be saved\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateSaveCallback\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateSaveCallback\": function (settings, data) {\n\t\t *          // Send an Ajax request to the server with the state object\n\t\t *          $.ajax( {\n\t\t *            \"url\": \"/state_save\",\n\t\t *            \"data\": data,\n\t\t *            \"dataType\": \"json\",\n\t\t *            \"method\": \"POST\"\n\t\t *            \"success\": function () {}\n\t\t *          } );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         */\n        \"fnStateSaveCallback\": function ( settings, data ) {\n            try {\n                (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\n                    'DataTables_'+settings.sInstance+'_'+location.pathname,\n                    JSON.stringify( data )\n                );\n            } catch (e) {}\n        },\n\n\n        /**\n         * Callback which allows modification of the state to be saved. Called when the table\n         * has changed state a new state save is required. This method allows modification of\n         * the state saving object prior to actually doing the save, including addition or\n         * other state properties or modification. Note that for plug-in authors, you should\n         * use the `stateSaveParams` event to save parameters for a plug-in.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object to be saved\n         *\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateSaveParams\n         *\n         *  @example\n         *    // Remove a saved filter, so filtering is never saved\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateSaveParams\": function (settings, data) {\n\t\t *          data.oSearch.sSearch = \"\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         */\n        \"fnStateSaveParams\": null,\n\n\n        /**\n         * Duration for which the saved state information is considered valid. After this period\n         * has elapsed the state will be returned to the default.\n         * Value is given in seconds.\n         *  @type int\n         *  @default 7200 <i>(2 hours)</i>\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.stateDuration\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateDuration\": 60*60*24; // 1 day\n\t\t *      } );\n\t\t *    } )\n         */\n        \"iStateDuration\": 7200,\n\n\n        /**\n         * When enabled DataTables will not make a request to the server for the first\n         * page draw - rather it will use the data already on the page (no sorting etc\n         * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n         * is used to indicate that deferred loading is required, but it is also used\n         * to tell DataTables how many records there are in the full table (allowing\n         * the information element and pagination to be displayed correctly). In the case\n         * where a filtering is applied to the table on initial load, this can be\n         * indicated by giving the parameter as an array, where the first element is\n         * the number of records available after filtering and the second element is the\n         * number of records without filtering (allowing the table information element\n         * to be shown correctly).\n         *  @type int | array\n         *  @default null\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.deferLoading\n         *\n         *  @example\n         *    // 57 records available in the table, no filtering applied\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\n\t\t *        \"deferLoading\": 57\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\n\t\t *        \"deferLoading\": [ 57, 100 ],\n\t\t *        \"search\": {\n\t\t *          \"search\": \"my_filter\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n         */\n        \"iDeferLoading\": null,\n\n\n        /**\n         * Number of rows to display on a single page when using pagination. If\n         * feature enabled (`lengthChange`) then the end user will be able to override\n         * this to a custom setting using a pop-up menu.\n         *  @type int\n         *  @default 10\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.pageLength\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"pageLength\": 50\n\t\t *      } );\n\t\t *    } )\n         */\n        \"iDisplayLength\": 10,\n\n\n        /**\n         * Define the starting point for data display when using DataTables with\n         * pagination. Note that this parameter is the number of records, rather than\n         * the page number, so if you have 10 records per page and want to start on\n         * the third page, it should be \"20\".\n         *  @type int\n         *  @default 0\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.displayStart\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"displayStart\": 20\n\t\t *      } );\n\t\t *    } )\n         */\n        \"iDisplayStart\": 0,\n\n\n        /**\n         * By default DataTables allows keyboard navigation of the table (sorting, paging,\n         * and filtering) by adding a `tabindex` attribute to the required elements. This\n         * allows you to tab through the controls and press the enter key to activate them.\n         * The tabindex is default 0, meaning that the tab follows the flow of the document.\n         * You can overrule this using this parameter if you wish. Use a value of -1 to\n         * disable built-in keyboard navigation.\n         *  @type int\n         *  @default 0\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.tabIndex\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"tabIndex\": 1\n\t\t *      } );\n\t\t *    } );\n         */\n        \"iTabIndex\": 0,\n\n\n        /**\n         * Classes that DataTables assigns to the various components and features\n         * that it adds to the HTML table. This allows classes to be configured\n         * during initialisation in addition to through the static\n         * {@link DataTable.ext.oStdClasses} object).\n         *  @namespace\n         *  @name DataTable.defaults.classes\n         */\n        \"oClasses\": {},\n\n\n        /**\n         * All strings that DataTables uses in the user interface that it creates\n         * are defined in this object, allowing you to modified them individually or\n         * completely replace them all as required.\n         *  @namespace\n         *  @name DataTable.defaults.language\n         */\n        \"oLanguage\": {\n            /**\n             * Strings that are used for WAI-ARIA labels and controls only (these are not\n             * actually visible on the page, but will be read by screenreaders, and thus\n             * must be internationalised as well).\n             *  @namespace\n             *  @name DataTable.defaults.language.aria\n             */\n            \"oAria\": {\n                /**\n                 * ARIA label that is added to the table headers when the column may be\n                 * sorted ascending by activing the column (click or return when focused).\n                 * Note that the column header is prefixed to this string.\n                 *  @type string\n                 *  @default : activate to sort column ascending\n                 *\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.aria.sortAscending\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"aria\": {\n\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n                 */\n                \"sSortAscending\": \": activate to sort column ascending\",\n\n                /**\n                 * ARIA label that is added to the table headers when the column may be\n                 * sorted descending by activing the column (click or return when focused).\n                 * Note that the column header is prefixed to this string.\n                 *  @type string\n                 *  @default : activate to sort column ascending\n                 *\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.aria.sortDescending\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"aria\": {\n\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n                 */\n                \"sSortDescending\": \": activate to sort column descending\"\n            },\n\n            /**\n             * Pagination string used by DataTables for the built-in pagination\n             * control types.\n             *  @namespace\n             *  @name DataTable.defaults.language.paginate\n             */\n            \"oPaginate\": {\n                /**\n                 * Text to use when using the 'full_numbers' type of pagination for the\n                 * button to take the user to the first page.\n                 *  @type string\n                 *  @default First\n                 *\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.first\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"first\": \"First page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n                 */\n                \"sFirst\": \"First\",\n\n\n                /**\n                 * Text to use when using the 'full_numbers' type of pagination for the\n                 * button to take the user to the last page.\n                 *  @type string\n                 *  @default Last\n                 *\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.last\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"last\": \"Last page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n                 */\n                \"sLast\": \"Last\",\n\n\n                /**\n                 * Text to use for the 'next' pagination button (to take the user to the\n                 * next page).\n                 *  @type string\n                 *  @default Next\n                 *\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.next\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"next\": \"Next page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n                 */\n                \"sNext\": \"Next\",\n\n\n                /**\n                 * Text to use for the 'previous' pagination button (to take the user to\n                 * the previous page).\n                 *  @type string\n                 *  @default Previous\n                 *\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.previous\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"previous\": \"Previous page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n                 */\n                \"sPrevious\": \"Previous\"\n            },\n\n            /**\n             * This string is shown in preference to `zeroRecords` when the table is\n             * empty of data (regardless of filtering). Note that this is an optional\n             * parameter - if it is not given, the value of `zeroRecords` will be used\n             * instead (either the default or given value).\n             *  @type string\n             *  @default No data available in table\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.emptyTable\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"emptyTable\": \"No data available in table\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sEmptyTable\": \"No data available in table\",\n\n\n            /**\n             * This string gives information to the end user about the information\n             * that is current on display on the page. The following tokens can be\n             * used in the string and will be dynamically replaced as the table\n             * display updates. This tokens can be placed anywhere in the string, or\n             * removed as needed by the language requires:\n             *\n             * * `\\_START\\_` - Display index of the first record on the current page\n             * * `\\_END\\_` - Display index of the last record on the current page\n             * * `\\_TOTAL\\_` - Number of records in the table after filtering\n             * * `\\_MAX\\_` - Number of records in the table without filtering\n             * * `\\_PAGE\\_` - Current page number\n             * * `\\_PAGES\\_` - Total number of pages of data in the table\n             *\n             *  @type string\n             *  @default Showing _START_ to _END_ of _TOTAL_ entries\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.info\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\n\n            /**\n             * Display information string for when the table is empty. Typically the\n             * format of this string should match `info`.\n             *  @type string\n             *  @default Showing 0 to 0 of 0 entries\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.infoEmpty\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoEmpty\": \"No entries to show\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\n\n            /**\n             * When a user filters the information in a table, this string is appended\n             * to the information (`info`) to give an idea of how strong the filtering\n             * is. The variable _MAX_ is dynamically updated.\n             *  @type string\n             *  @default (filtered from _MAX_ total entries)\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.infoFiltered\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\n\n            /**\n             * If can be useful to append extra information to the info string at times,\n             * and this variable does exactly that. This information will be appended to\n             * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n             * being used) at all times.\n             *  @type string\n             *  @default <i>Empty string</i>\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.infoPostFix\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sInfoPostFix\": \"\",\n\n\n            /**\n             * This decimal place operator is a little different from the other\n             * language options since DataTables doesn't output floating point\n             * numbers, so it won't ever use this for display of a number. Rather,\n             * what this parameter does is modify the sort methods of the table so\n             * that numbers which are in a format which has a character other than\n             * a period (`.`) as a decimal place will be sorted numerically.\n             *\n             * Note that numbers with different decimal places cannot be shown in\n             * the same table and still be sortable, the table must be consistent.\n             * However, multiple different tables on the page can use different\n             * decimal place characters.\n             *  @type string\n             *  @default\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.decimal\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"decimal\": \",\"\n\t\t\t *          \"thousands\": \".\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sDecimal\": \"\",\n\n\n            /**\n             * DataTables has a build in number formatter (`formatNumber`) which is\n             * used to format large numbers that are used in the table information.\n             * By default a comma is used, but this can be trivially changed to any\n             * character you wish with this parameter.\n             *  @type string\n             *  @default ,\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.thousands\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"thousands\": \"'\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sThousands\": \",\",\n\n\n            /**\n             * Detail the action that will be taken when the drop down menu for the\n             * pagination length option is changed. The '_MENU_' variable is replaced\n             * with a default select list of 10, 25, 50 and 100, and can be replaced\n             * with a custom select box if required.\n             *  @type string\n             *  @default Show _MENU_ entries\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.lengthMenu\n             *\n             *  @example\n             *    // Language change only\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             *\n             *  @example\n             *    // Language and options change\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"lengthMenu\": 'Display <select>'+\n\t\t\t *            '<option value=\"10\">10</option>'+\n\t\t\t *            '<option value=\"20\">20</option>'+\n\t\t\t *            '<option value=\"30\">30</option>'+\n\t\t\t *            '<option value=\"40\">40</option>'+\n\t\t\t *            '<option value=\"50\">50</option>'+\n\t\t\t *            '<option value=\"-1\">All</option>'+\n\t\t\t *            '</select> records'\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sLengthMenu\": \"Show _MENU_ entries\",\n\n\n            /**\n             * When using Ajax sourced data and during the first draw when DataTables is\n             * gathering the data, this message is shown in an empty row in the table to\n             * indicate to the end user the the data is being loaded. Note that this\n             * parameter is not used when loading data by server-side processing, just\n             * Ajax sourced data with client-side processing.\n             *  @type string\n             *  @default Loading...\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.loadingRecords\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sLoadingRecords\": \"Loading...\",\n\n\n            /**\n             * Text which is displayed when the table is processing a user action\n             * (usually a sort command or similar).\n             *  @type string\n             *  @default Processing...\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.processing\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"processing\": \"DataTables is currently busy\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sProcessing\": \"Processing...\",\n\n\n            /**\n             * Details the actions that will be taken when the user types into the\n             * filtering input text box. The variable \"_INPUT_\", if used in the string,\n             * is replaced with the HTML text box for the filtering input allowing\n             * control over where it appears in the string. If \"_INPUT_\" is not given\n             * then the input box is appended to the string automatically.\n             *  @type string\n             *  @default Search:\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.search\n             *\n             *  @example\n             *    // Input text box will be appended at the end automatically\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"search\": \"Filter records:\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             *\n             *  @example\n             *    // Specify where the filter should appear\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sSearch\": \"Search:\",\n\n\n            /**\n             * Assign a `placeholder` attribute to the search `input` element\n             *  @type string\n             *  @default\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.searchPlaceholder\n             */\n            \"sSearchPlaceholder\": \"\",\n\n\n            /**\n             * All of the language information can be stored in a file on the\n             * server-side, which DataTables will look up if this parameter is passed.\n             * It must store the URL of the language file, which is in a JSON format,\n             * and the object has the same properties as the oLanguage object in the\n             * initialiser object (i.e. the above parameters). Please refer to one of\n             * the example language files to see how this works in action.\n             *  @type string\n             *  @default <i>Empty string - i.e. disabled</i>\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.url\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sUrl\": \"\",\n\n\n            /**\n             * Text shown inside the table records when the is no information to be\n             * displayed after filtering. `emptyTable` is shown when there is simply no\n             * information in the table at all (regardless of filtering).\n             *  @type string\n             *  @default No matching records found\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.zeroRecords\n             *\n             *  @example\n             *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"zeroRecords\": \"No records to display\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n             */\n            \"sZeroRecords\": \"No matching records found\"\n        },\n\n\n        /**\n         * This parameter allows you to have define the global filtering state at\n         * initialisation time. As an object the `search` parameter must be\n         * defined, but all other parameters are optional. When `regex` is true,\n         * the search string will be treated as a regular expression, when false\n         * (default) it will be treated as a straight string. When `smart`\n         * DataTables will use it's smart filtering methods (to word match at\n         * any point in the data), when false this will not be done.\n         *  @namespace\n         *  @extends DataTable.models.oSearch\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.search\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"search\": {\"search\": \"Initial search\"}\n\t\t *      } );\n\t\t *    } )\n         */\n        \"oSearch\": $.extend( {}, DataTable.models.oSearch ),\n\n\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         *\n         * By default DataTables will look for the property `data` (or `aaData` for\n         * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n         * source or for server-side processing - this parameter allows that\n         * property to be changed. You can use Javascript dotted object notation to\n         * get a data source for multiple levels of nesting.\n         *  @type string\n         *  @default data\n         *\n         *  @dtopt Options\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.ajaxDataProp\n         *\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"sAjaxDataProp\": \"data\",\n\n\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         *\n         * You can instruct DataTables to load data from an external\n         * source using this parameter (use aData if you want to pass data in you\n         * already have). Simply provide a url a JSON object can be obtained from.\n         *  @type string\n         *  @default null\n         *\n         *  @dtopt Options\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.ajaxSource\n         *\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"sAjaxSource\": null,\n\n\n        /**\n         * This initialisation variable allows you to specify exactly where in the\n         * DOM you want DataTables to inject the various controls it adds to the page\n         * (for example you might want the pagination controls at the top of the\n         * table). DIV elements (with or without a custom class) can also be added to\n         * aid styling. The follow syntax is used:\n         *   <ul>\n         *     <li>The following options are allowed:\n         *       <ul>\n         *         <li>'l' - Length changing</li>\n         *         <li>'f' - Filtering input</li>\n         *         <li>'t' - The table!</li>\n         *         <li>'i' - Information</li>\n         *         <li>'p' - Pagination</li>\n         *         <li>'r' - pRocessing</li>\n         *       </ul>\n         *     </li>\n         *     <li>The following constants are allowed:\n         *       <ul>\n         *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n         *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n         *       </ul>\n         *     </li>\n         *     <li>The following syntax is expected:\n         *       <ul>\n         *         <li>'&lt;' and '&gt;' - div elements</li>\n         *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n         *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n         *       </ul>\n         *     </li>\n         *     <li>Examples:\n         *       <ul>\n         *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n         *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n         *       </ul>\n         *     </li>\n         *   </ul>\n         *  @type string\n         *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n         *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.dom\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sDom\": \"lfrtip\",\n\n\n        /**\n         * Search delay option. This will throttle full table searches that use the\n         * DataTables provided search input element (it does not effect calls to\n         * `dt-api search()`, providing a delay before the search is made.\n         *  @type integer\n         *  @default 0\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.searchDelay\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searchDelay\": 200\n\t\t *      } );\n\t\t *    } )\n         */\n        \"searchDelay\": null,\n\n\n        /**\n         * DataTables features four different built-in options for the buttons to\n         * display for pagination control:\n         *\n         * * `simple` - 'Previous' and 'Next' buttons only\n         * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n         * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n         * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus\n         *   page numbers\n         *\n         * Further methods can be added using {@link DataTable.ext.oPagination}.\n         *  @type string\n         *  @default simple_numbers\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.pagingType\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"pagingType\": \"full_numbers\"\n\t\t *      } );\n\t\t *    } )\n         */\n        \"sPaginationType\": \"simple_numbers\",\n\n\n        /**\n         * Enable horizontal scrolling. When a table is too wide to fit into a\n         * certain layout, or you have a large number of columns in the table, you\n         * can enable x-scrolling to show the table in a viewport, which can be\n         * scrolled. This property can be `true` which will allow the table to\n         * scroll horizontally when needed, or any CSS unit, or a number (in which\n         * case it will be treated as a pixel measurement). Setting as simply `true`\n         * is recommended.\n         *  @type boolean|string\n         *  @default <i>blank string - i.e. disabled</i>\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.scrollX\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollX\": true,\n\t\t *        \"scrollCollapse\": true\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sScrollX\": \"\",\n\n\n        /**\n         * This property can be used to force a DataTable to use more width than it\n         * might otherwise do when x-scrolling is enabled. For example if you have a\n         * table which requires to be well spaced, this parameter is useful for\n         * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n         * any CSS unit, or a number (in which case it will be treated as a pixel\n         * measurement).\n         *  @type string\n         *  @default <i>blank string - i.e. disabled</i>\n         *\n         *  @dtopt Options\n         *  @name DataTable.defaults.scrollXInner\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollX\": \"100%\",\n\t\t *        \"scrollXInner\": \"110%\"\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sScrollXInner\": \"\",\n\n\n        /**\n         * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n         * to the given height, and enable scrolling for any data which overflows the\n         * current viewport. This can be used as an alternative to paging to display\n         * a lot of data in a small area (although paging and scrolling can both be\n         * enabled at the same time). This property can be any CSS unit, or a number\n         * (in which case it will be treated as a pixel measurement).\n         *  @type string\n         *  @default <i>blank string - i.e. disabled</i>\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.scrollY\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200px\",\n\t\t *        \"paginate\": false\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sScrollY\": \"\",\n\n\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         *\n         * Set the HTTP method that is used to make the Ajax call for server-side\n         * processing or Ajax sourced data.\n         *  @type string\n         *  @default GET\n         *\n         *  @dtopt Options\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverMethod\n         *\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"sServerMethod\": \"GET\",\n\n\n        /**\n         * DataTables makes use of renderers when displaying HTML elements for\n         * a table. These renderers can be added or modified by plug-ins to\n         * generate suitable mark-up for a site. For example the Bootstrap\n         * integration plug-in for DataTables uses a paging button renderer to\n         * display pagination buttons in the mark-up required by Bootstrap.\n         *\n         * For further information about the renderers available see\n         * DataTable.ext.renderer\n         *  @type string|object\n         *  @default null\n         *\n         *  @name DataTable.defaults.renderer\n         *\n         */\n        \"renderer\": null,\n\n\n        /**\n         * Set the data property name that DataTables should use to get a row's id\n         * to set as the `id` property in the node.\n         *  @type string\n         *  @default DT_RowId\n         *\n         *  @name DataTable.defaults.rowId\n         */\n        \"rowId\": \"DT_RowId\"\n    };\n\n    _fnHungarianMap( DataTable.defaults );\n\n\n\n    /*\n     * Developer note - See note in model.defaults.js about the use of Hungarian\n     * notation and camel case.\n     */\n\n    /**\n     * Column options that can be given to DataTables at initialisation time.\n     *  @namespace\n     */\n    DataTable.defaults.column = {\n        /**\n         * Define which column(s) an order will occur on for this column. This\n         * allows a column's ordering to take multiple columns into account when\n         * doing a sort or use the data from a different column. For example first\n         * name / last name columns make sense to do a multi-column sort over the\n         * two columns.\n         *  @type array|int\n         *  @default null <i>Takes the value of the column index automatically</i>\n         *\n         *  @name DataTable.defaults.column.orderData\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"orderData\": [ 0, 1 ] },\n\t\t *          { \"orderData\": [ 1, 0 ] },\n\t\t *          { \"orderData\": 2 },\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"aDataSort\": null,\n        \"iDataSort\": -1,\n\n\n        /**\n         * You can control the default ordering direction, and even alter the\n         * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n         * using this parameter.\n         *  @type array\n         *  @default [ 'asc', 'desc' ]\n         *\n         *  @name DataTable.defaults.column.orderSequence\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          { \"orderSequence\": [ \"asc\" ] },\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n\t\t *          { \"orderSequence\": [ \"desc\" ] },\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"asSorting\": [ 'asc', 'desc' ],\n\n\n        /**\n         * Enable or disable filtering on the data in this column.\n         *  @type boolean\n         *  @default true\n         *\n         *  @name DataTable.defaults.column.searchable\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"searchable\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n         */\n        \"bSearchable\": true,\n\n\n        /**\n         * Enable or disable ordering on this column.\n         *  @type boolean\n         *  @default true\n         *\n         *  @name DataTable.defaults.column.orderable\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"orderable\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n         */\n        \"bSortable\": true,\n\n\n        /**\n         * Enable or disable the display of this column.\n         *  @type boolean\n         *  @default true\n         *\n         *  @name DataTable.defaults.column.visible\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"visible\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"visible\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n         */\n        \"bVisible\": true,\n\n\n        /**\n         * Developer definable function that is called whenever a cell is created (Ajax source,\n         * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n         * allowing you to modify the DOM element (add background colour for example) when the\n         * element is available.\n         *  @type function\n         *  @param {element} td The TD node that has been created\n         *  @param {*} cellData The Data for the cell\n         *  @param {array|object} rowData The data for the whole row\n         *  @param {int} row The row index for the aoData data store\n         *  @param {int} col The column index for aoColumns\n         *\n         *  @name DataTable.defaults.column.createdCell\n         *  @dtopt Columns\n         *\n         *  @example\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [3],\n\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {\n\t\t *            if ( cellData == \"1.7\" ) {\n\t\t *              $(td).css('color', 'blue')\n\t\t *            }\n\t\t *          }\n\t\t *        } ]\n\t\t *      });\n\t\t *    } );\n         */\n        \"fnCreatedCell\": null,\n\n\n        /**\n         * This parameter has been replaced by `data` in DataTables to ensure naming\n         * consistency. `dataProp` can still be used, as there is backwards\n         * compatibility in DataTables for this option, but it is strongly\n         * recommended that you use `data` in preference to `dataProp`.\n         *  @name DataTable.defaults.column.dataProp\n         */\n\n\n        /**\n         * This property can be used to read data from any data source property,\n         * including deeply nested objects / properties. `data` can be given in a\n         * number of different ways which effect its behaviour:\n         *\n         * * `integer` - treated as an array index for the data source. This is the\n         *   default that DataTables uses (incrementally increased for each column).\n         * * `string` - read an object property from the data source. There are\n         *   three 'special' options that can be used in the string to alter how\n         *   DataTables reads the data from the source object:\n         *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n         *      Javascript to read from nested objects, so to can the options\n         *      specified in `data`. For example: `browser.version` or\n         *      `browser.name`. If your object parameter name contains a period, use\n         *      `\\\\` to escape it - i.e. `first\\\\.name`.\n         *    * `[]` - Array notation. DataTables can automatically combine data\n         *      from and array source, joining the data with the characters provided\n         *      between the two brackets. For example: `name[, ]` would provide a\n         *      comma-space separated list from the source array. If no characters\n         *      are provided between the brackets, the original array source is\n         *      returned.\n         *    * `()` - Function notation. Adding `()` to the end of a parameter will\n         *      execute a function of the name given. For example: `browser()` for a\n         *      simple function on the data source, `browser.version()` for a\n         *      function in a nested property or even `browser().version` to get an\n         *      object property if the function called returns an object. Note that\n         *      function notation is recommended for use in `render` rather than\n         *      `data` as it is much simpler to use as a renderer.\n         * * `null` - use the original data source for the row rather than plucking\n         *   data directly from it. This action has effects on two other\n         *   initialisation options:\n         *    * `defaultContent` - When null is given as the `data` option and\n         *      `defaultContent` is specified for the column, the value defined by\n         *      `defaultContent` will be used for the cell.\n         *    * `render` - When null is used for the `data` option and the `render`\n         *      option is specified for the column, the whole data source for the\n         *      row is used for the renderer.\n         * * `function` - the function given will be executed whenever DataTables\n         *   needs to set or get the data for a cell in the column. The function\n         *   takes three parameters:\n         *    * Parameters:\n         *      * `{array|object}` The data source for the row\n         *      * `{string}` The type call data requested - this will be 'set' when\n         *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n         *        when gathering data. Note that when `undefined` is given for the\n         *        type DataTables expects to get the raw data for the object back<\n         *      * `{*}` Data to set when the second parameter is 'set'.\n         *    * Return:\n         *      * The return value from the function is not required when 'set' is\n         *        the type of call, but otherwise the return is what will be used\n         *        for the data requested.\n         *\n         * Note that `data` is a getter and setter option. If you just require\n         * formatting of data for output, you will likely want to use `render` which\n         * is simply a getter and thus simpler to use.\n         *\n         * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n         * name change reflects the flexibility of this property and is consistent\n         * with the naming of mRender. If 'mDataProp' is given, then it will still\n         * be used by DataTables, as it automatically maps the old name to the new\n         * if required.\n         *\n         *  @type string|int|function|null\n         *  @default null <i>Use automatically calculated column index</i>\n         *\n         *  @name DataTable.defaults.column.data\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Read table data from objects\n         *    // JSON structure for each row:\n         *    //   {\n\t\t *    //      \"engine\": {value},\n\t\t *    //      \"browser\": {value},\n\t\t *    //      \"platform\": {value},\n\t\t *    //      \"version\": {value},\n\t\t *    //      \"grade\": {value}\n\t\t *    //   }\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/objects.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          { \"data\": \"platform\" },\n\t\t *          { \"data\": \"version\" },\n\t\t *          { \"data\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Read information from deeply nested objects\n         *    // JSON structure for each row:\n         *    //   {\n\t\t *    //      \"engine\": {value},\n\t\t *    //      \"browser\": {value},\n\t\t *    //      \"platform\": {\n\t\t *    //         \"inner\": {value}\n\t\t *    //      },\n\t\t *    //      \"details\": [\n\t\t *    //         {value}, {value}\n\t\t *    //      ]\n\t\t *    //   }\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          { \"data\": \"platform.inner\" },\n\t\t *          { \"data\": \"platform.details.0\" },\n\t\t *          { \"data\": \"platform.details.1\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `data` as a function to provide different information for\n         *    // sorting, filtering and display. In this case, currency (price)\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": function ( source, type, val ) {\n\t\t *            if (type === 'set') {\n\t\t *              source.price = val;\n\t\t *              // Store the computed dislay and filter values for efficiency\n\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n\t\t *              return;\n\t\t *            }\n\t\t *            else if (type === 'display') {\n\t\t *              return source.price_display;\n\t\t *            }\n\t\t *            else if (type === 'filter') {\n\t\t *              return source.price_filter;\n\t\t *            }\n\t\t *            // 'sort', 'type' and undefined all just use the integer\n\t\t *            return source.price;\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using default content\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null,\n\t\t *          \"defaultContent\": \"Click to edit\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using array notation - outputting a list from an array\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": \"name[, ]\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n         *\n         */\n        \"mData\": null,\n\n\n        /**\n         * This property is the rendering partner to `data` and it is suggested that\n         * when you want to manipulate data for display (including filtering,\n         * sorting etc) without altering the underlying data for the table, use this\n         * property. `render` can be considered to be the the read only companion to\n         * `data` which is read / write (then as such more complex). Like `data`\n         * this option can be given in a number of different ways to effect its\n         * behaviour:\n         *\n         * * `integer` - treated as an array index for the data source. This is the\n         *   default that DataTables uses (incrementally increased for each column).\n         * * `string` - read an object property from the data source. There are\n         *   three 'special' options that can be used in the string to alter how\n         *   DataTables reads the data from the source object:\n         *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n         *      Javascript to read from nested objects, so to can the options\n         *      specified in `data`. For example: `browser.version` or\n         *      `browser.name`. If your object parameter name contains a period, use\n         *      `\\\\` to escape it - i.e. `first\\\\.name`.\n         *    * `[]` - Array notation. DataTables can automatically combine data\n         *      from and array source, joining the data with the characters provided\n         *      between the two brackets. For example: `name[, ]` would provide a\n         *      comma-space separated list from the source array. If no characters\n         *      are provided between the brackets, the original array source is\n         *      returned.\n         *    * `()` - Function notation. Adding `()` to the end of a parameter will\n         *      execute a function of the name given. For example: `browser()` for a\n         *      simple function on the data source, `browser.version()` for a\n         *      function in a nested property or even `browser().version` to get an\n         *      object property if the function called returns an object.\n         * * `object` - use different data for the different data types requested by\n         *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n         *   of the object is the data type the property refers to and the value can\n         *   defined using an integer, string or function using the same rules as\n         *   `render` normally does. Note that an `_` option _must_ be specified.\n         *   This is the default value to use if you haven't specified a value for\n         *   the data type requested by DataTables.\n         * * `function` - the function given will be executed whenever DataTables\n         *   needs to set or get the data for a cell in the column. The function\n         *   takes three parameters:\n         *    * Parameters:\n         *      * {array|object} The data source for the row (based on `data`)\n         *      * {string} The type call data requested - this will be 'filter',\n         *        'display', 'type' or 'sort'.\n         *      * {array|object} The full data source for the row (not based on\n         *        `data`)\n         *    * Return:\n         *      * The return value from the function is what will be used for the\n         *        data requested.\n         *\n         *  @type string|int|function|object|null\n         *  @default null Use the data source value.\n         *\n         *  @name DataTable.defaults.column.render\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Create a comma separated list from an array of objects\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          {\n\t\t *            \"data\": \"platform\",\n\t\t *            \"render\": \"[, ].name\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Execute a function to obtain data\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t\t *          \"render\": \"browserName()\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // As an object, extracting different data for the different types\n         *    // This would be used with a data source such as:\n         *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n         *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n         *    // (which has both forms) is used for filtering for if a user inputs either format, while\n         *    // the formatted phone number is the one that is shown in the table.\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t\t *          \"render\": {\n\t\t *            \"_\": \"phone\",\n\t\t *            \"filter\": \"phone_filter\",\n\t\t *            \"display\": \"phone_display\"\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Use as a function to create a link from the data source\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": \"download_link\",\n\t\t *          \"render\": function ( data, type, full ) {\n\t\t *            return '<a href=\"'+data+'\">Download</a>';\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"mRender\": null,\n\n\n        /**\n         * Change the cell type created for the column - either TD cells or TH cells. This\n         * can be useful as TH cells have semantic meaning in the table body, allowing them\n         * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n         *  @type string\n         *  @default td\n         *\n         *  @name DataTable.defaults.column.cellType\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Make the first column use TH cells\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"cellType\": \"th\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sCellType\": \"td\",\n\n\n        /**\n         * Class to give to each cell in this column.\n         *  @type string\n         *  @default <i>Empty string</i>\n         *\n         *  @name DataTable.defaults.column.class\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"class\": \"my_class\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sClass\": \"\",\n\n        /**\n         * When DataTables calculates the column widths to assign to each column,\n         * it finds the longest string in each column and then constructs a\n         * temporary table and reads the widths from that. The problem with this\n         * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n         * string - thus the calculation can go wrong (doing it properly and putting\n         * it into an DOM object and measuring that is horribly(!) slow). Thus as\n         * a \"work around\" we provide this option. It will append its value to the\n         * text that is found to be the longest string for the column - i.e. padding.\n         * Generally you shouldn't need this!\n         *  @type string\n         *  @default <i>Empty string<i>\n         *\n         *  @name DataTable.defaults.column.contentPadding\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          {\n\t\t *            \"contentPadding\": \"mmm\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sContentPadding\": \"\",\n\n\n        /**\n         * Allows a default value to be given for a column's data, and will be used\n         * whenever a null data source is encountered (this can be because `data`\n         * is set to null, or because the data source itself is null).\n         *  @type string\n         *  @default null\n         *\n         *  @name DataTable.defaults.column.defaultContent\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          {\n\t\t *            \"data\": null,\n\t\t *            \"defaultContent\": \"Edit\",\n\t\t *            \"targets\": [ -1 ]\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          {\n\t\t *            \"data\": null,\n\t\t *            \"defaultContent\": \"Edit\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sDefaultContent\": null,\n\n\n        /**\n         * This parameter is only used in DataTables' server-side processing. It can\n         * be exceptionally useful to know what columns are being displayed on the\n         * client side, and to map these to database fields. When defined, the names\n         * also allow DataTables to reorder information from the server if it comes\n         * back in an unexpected order (i.e. if you switch your columns around on the\n         * client-side, your server-side code does not also need updating).\n         *  @type string\n         *  @default <i>Empty string</i>\n         *\n         *  @name DataTable.defaults.column.name\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },\n\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"name\": \"engine\" },\n\t\t *          { \"name\": \"browser\" },\n\t\t *          { \"name\": \"platform\" },\n\t\t *          { \"name\": \"version\" },\n\t\t *          { \"name\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sName\": \"\",\n\n\n        /**\n         * Defines a data source type for the ordering which can be used to read\n         * real-time information from the table (updating the internally cached\n         * version) prior to ordering. This allows ordering to occur on user\n         * editable elements such as form inputs.\n         *  @type string\n         *  @default std\n         *\n         *  @name DataTable.defaults.column.orderDataType\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          { \"orderDataType\": \"dom-text\" },\n\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n\t\t *          { \"orderDataType\": \"dom-select\" },\n\t\t *          { \"orderDataType\": \"dom-checkbox\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sSortDataType\": \"std\",\n\n\n        /**\n         * The title of this column.\n         *  @type string\n         *  @default null <i>Derived from the 'TH' value for this column in the\n         *    original HTML table.</i>\n         *\n         *  @name DataTable.defaults.column.title\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"My column title\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sTitle\": null,\n\n\n        /**\n         * The type allows you to specify how the data for this column will be\n         * ordered. Four types (string, numeric, date and html (which will strip\n         * HTML tags before ordering)) are currently available. Note that only date\n         * formats understood by Javascript's Date() object will be accepted as type\n         * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n         * 'numeric', 'date' or 'html' (by default). Further types can be adding\n         * through plug-ins.\n         *  @type string\n         *  @default null <i>Auto-detected from raw data</i>\n         *\n         *  @name DataTable.defaults.column.type\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"type\": \"html\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sType\": null,\n\n\n        /**\n         * Defining the width of the column, this parameter may take any CSS value\n         * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n         * been given a specific width through this interface ensuring that the table\n         * remains readable.\n         *  @type string\n         *  @default null <i>Automatic</i>\n         *\n         *  @name DataTable.defaults.column.width\n         *  @dtopt Columns\n         *\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         *\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"width\": \"20%\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n         */\n        \"sWidth\": null\n    };\n\n    _fnHungarianMap( DataTable.defaults.column );\n\n\n\n    /**\n     * DataTables settings object - this holds all the information needed for a\n     * given table, including configuration, data and current application of the\n     * table options. DataTables does not have a single instance for each DataTable\n     * with the settings attached to that instance, but rather instances of the\n     * DataTable \"class\" are created on-the-fly as needed (typically by a\n     * $().dataTable() call) and the settings object is then applied to that\n     * instance.\n     *\n     * Note that this object is related to {@link DataTable.defaults} but this\n     * one is the internal data store for DataTables's cache of columns. It should\n     * NOT be manipulated outside of DataTables. Any configuration should be done\n     * through the initialisation options.\n     *  @namespace\n     *  @todo Really should attach the settings object to individual instances so we\n     *    don't need to create new instances on each $().dataTable() call (if the\n     *    table already exists). It would also save passing oSettings around and\n     *    into every single function. However, this is a very significant\n     *    architecture change for DataTables and will almost certainly break\n     *    backwards compatibility with older installations. This is something that\n     *    will be done in 2.0.\n     */\n    DataTable.models.oSettings = {\n        /**\n         * Primary features of DataTables and their enablement state.\n         *  @namespace\n         */\n        \"oFeatures\": {\n\n            /**\n             * Flag to say if DataTables should automatically try to calculate the\n             * optimum table and columns widths (true) or not (false).\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bAutoWidth\": null,\n\n            /**\n             * Delay the creation of TR and TD elements until they are actually\n             * needed by a driven page draw. This can give a significant speed\n             * increase for Ajax source and Javascript source data, but makes no\n             * difference at all fro DOM and server-side processing tables.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bDeferRender\": null,\n\n            /**\n             * Enable filtering on the table or not. Note that if this is disabled\n             * then there is no filtering at all on the table, including fnFilter.\n             * To just remove the filtering input use sDom and remove the 'f' option.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bFilter\": null,\n\n            /**\n             * Table information element (the 'Showing x of y records' div) enable\n             * flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bInfo\": null,\n\n            /**\n             * Present a user control allowing the end user to change the page size\n             * when pagination is enabled.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bLengthChange\": null,\n\n            /**\n             * Pagination enabled or not. Note that if this is disabled then length\n             * changing must also be disabled.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bPaginate\": null,\n\n            /**\n             * Processing indicator enable flag whenever DataTables is enacting a\n             * user request - typically an Ajax request for server-side processing.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bProcessing\": null,\n\n            /**\n             * Server-side processing enabled flag - when enabled DataTables will\n             * get all data from the server for every draw - there is no filtering,\n             * sorting or paging done on the client-side.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bServerSide\": null,\n\n            /**\n             * Sorting enablement flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bSort\": null,\n\n            /**\n             * Multi-column sorting\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bSortMulti\": null,\n\n            /**\n             * Apply a class to the columns which are being sorted to provide a\n             * visual highlight or not. This can slow things down when enabled since\n             * there is a lot of DOM interaction.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bSortClasses\": null,\n\n            /**\n             * State saving enablement flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bStateSave\": null\n        },\n\n\n        /**\n         * Scrolling settings for a table.\n         *  @namespace\n         */\n        \"oScroll\": {\n            /**\n             * When the table is shorter in height than sScrollY, collapse the\n             * table container down to the height of the table (when true).\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bCollapse\": null,\n\n            /**\n             * Width of the scrollbar for the web-browser's platform. Calculated\n             * during table initialisation.\n             *  @type int\n             *  @default 0\n             */\n            \"iBarWidth\": 0,\n\n            /**\n             * Viewport width for horizontal scrolling. Horizontal scrolling is\n             * disabled if an empty string.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             */\n            \"sX\": null,\n\n            /**\n             * Width to expand the table to when using x-scrolling. Typically you\n             * should not need to use this.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             *  @deprecated\n             */\n            \"sXInner\": null,\n\n            /**\n             * Viewport height for vertical scrolling. Vertical scrolling is disabled\n             * if an empty string.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             */\n            \"sY\": null\n        },\n\n        /**\n         * Language information for the table.\n         *  @namespace\n         *  @extends DataTable.defaults.oLanguage\n         */\n        \"oLanguage\": {\n            /**\n             * Information callback function. See\n             * {@link DataTable.defaults.fnInfoCallback}\n             *  @type function\n             *  @default null\n             */\n            \"fnInfoCallback\": null\n        },\n\n        /**\n         * Browser support parameters\n         *  @namespace\n         */\n        \"oBrowser\": {\n            /**\n             * Indicate if the browser incorrectly calculates width:100% inside a\n             * scrolling element (IE6/7)\n             *  @type boolean\n             *  @default false\n             */\n            \"bScrollOversize\": false,\n\n            /**\n             * Determine if the vertical scrollbar is on the right or left of the\n             * scrolling container - needed for rtl language layout, although not\n             * all browsers move the scrollbar (Safari).\n             *  @type boolean\n             *  @default false\n             */\n            \"bScrollbarLeft\": false,\n\n            /**\n             * Flag for if `getBoundingClientRect` is fully supported or not\n             *  @type boolean\n             *  @default false\n             */\n            \"bBounding\": false,\n\n            /**\n             * Browser scrollbar width\n             *  @type integer\n             *  @default 0\n             */\n            \"barWidth\": 0\n        },\n\n\n        \"ajax\": null,\n\n\n        /**\n         * Array referencing the nodes which are used for the features. The\n         * parameters of this object match what is allowed by sDom - i.e.\n         *   <ul>\n         *     <li>'l' - Length changing</li>\n         *     <li>'f' - Filtering input</li>\n         *     <li>'t' - The table!</li>\n         *     <li>'i' - Information</li>\n         *     <li>'p' - Pagination</li>\n         *     <li>'r' - pRocessing</li>\n         *   </ul>\n         *  @type array\n         *  @default []\n         */\n        \"aanFeatures\": [],\n\n        /**\n         * Store data information - see {@link DataTable.models.oRow} for detailed\n         * information.\n         *  @type array\n         *  @default []\n         */\n        \"aoData\": [],\n\n        /**\n         * Array of indexes which are in the current display (after filtering etc)\n         *  @type array\n         *  @default []\n         */\n        \"aiDisplay\": [],\n\n        /**\n         * Array of indexes for display - no filtering\n         *  @type array\n         *  @default []\n         */\n        \"aiDisplayMaster\": [],\n\n        /**\n         * Map of row ids to data indexes\n         *  @type object\n         *  @default {}\n         */\n        \"aIds\": {},\n\n        /**\n         * Store information about each column that is in use\n         *  @type array\n         *  @default []\n         */\n        \"aoColumns\": [],\n\n        /**\n         * Store information about the table's header\n         *  @type array\n         *  @default []\n         */\n        \"aoHeader\": [],\n\n        /**\n         * Store information about the table's footer\n         *  @type array\n         *  @default []\n         */\n        \"aoFooter\": [],\n\n        /**\n         * Store the applied global search information in case we want to force a\n         * research or compare the old search to a new one.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @namespace\n         *  @extends DataTable.models.oSearch\n         */\n        \"oPreviousSearch\": {},\n\n        /**\n         * Store the applied search for each column - see\n         * {@link DataTable.models.oSearch} for the format that is used for the\n         * filtering information for each column.\n         *  @type array\n         *  @default []\n         */\n        \"aoPreSearchCols\": [],\n\n        /**\n         * Sorting that is applied to the table. Note that the inner arrays are\n         * used in the following manner:\n         * <ul>\n         *   <li>Index 0 - column number</li>\n         *   <li>Index 1 - current sorting direction</li>\n         * </ul>\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @todo These inner arrays should really be objects\n         */\n        \"aaSorting\": null,\n\n        /**\n         * Sorting that is always applied to the table (i.e. prefixed in front of\n         * aaSorting).\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @default []\n         */\n        \"aaSortingFixed\": [],\n\n        /**\n         * Classes to use for the striping of a table.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @default []\n         */\n        \"asStripeClasses\": null,\n\n        /**\n         * If restoring a table - we should restore its striping classes as well\n         *  @type array\n         *  @default []\n         */\n        \"asDestroyStripes\": [],\n\n        /**\n         * If restoring a table - we should restore its width\n         *  @type int\n         *  @default 0\n         */\n        \"sDestroyWidth\": 0,\n\n        /**\n         * Callback functions array for every time a row is inserted (i.e. on a draw).\n         *  @type array\n         *  @default []\n         */\n        \"aoRowCallback\": [],\n\n        /**\n         * Callback functions for the header on each draw.\n         *  @type array\n         *  @default []\n         */\n        \"aoHeaderCallback\": [],\n\n        /**\n         * Callback function for the footer on each draw.\n         *  @type array\n         *  @default []\n         */\n        \"aoFooterCallback\": [],\n\n        /**\n         * Array of callback functions for draw callback functions\n         *  @type array\n         *  @default []\n         */\n        \"aoDrawCallback\": [],\n\n        /**\n         * Array of callback functions for row created function\n         *  @type array\n         *  @default []\n         */\n        \"aoRowCreatedCallback\": [],\n\n        /**\n         * Callback functions for just before the table is redrawn. A return of\n         * false will be used to cancel the draw.\n         *  @type array\n         *  @default []\n         */\n        \"aoPreDrawCallback\": [],\n\n        /**\n         * Callback functions for when the table has been initialised.\n         *  @type array\n         *  @default []\n         */\n        \"aoInitComplete\": [],\n\n\n        /**\n         * Callbacks for modifying the settings to be stored for state saving, prior to\n         * saving state.\n         *  @type array\n         *  @default []\n         */\n        \"aoStateSaveParams\": [],\n\n        /**\n         * Callbacks for modifying the settings that have been stored for state saving\n         * prior to using the stored values to restore the state.\n         *  @type array\n         *  @default []\n         */\n        \"aoStateLoadParams\": [],\n\n        /**\n         * Callbacks for operating on the settings object once the saved state has been\n         * loaded\n         *  @type array\n         *  @default []\n         */\n        \"aoStateLoaded\": [],\n\n        /**\n         * Cache the table ID for quick access\n         *  @type string\n         *  @default <i>Empty string</i>\n         */\n        \"sTableId\": \"\",\n\n        /**\n         * The TABLE node for the main table\n         *  @type node\n         *  @default null\n         */\n        \"nTable\": null,\n\n        /**\n         * Permanent ref to the thead element\n         *  @type node\n         *  @default null\n         */\n        \"nTHead\": null,\n\n        /**\n         * Permanent ref to the tfoot element - if it exists\n         *  @type node\n         *  @default null\n         */\n        \"nTFoot\": null,\n\n        /**\n         * Permanent ref to the tbody element\n         *  @type node\n         *  @default null\n         */\n        \"nTBody\": null,\n\n        /**\n         * Cache the wrapper node (contains all DataTables controlled elements)\n         *  @type node\n         *  @default null\n         */\n        \"nTableWrapper\": null,\n\n        /**\n         * Indicate if when using server-side processing the loading of data\n         * should be deferred until the second draw.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type boolean\n         *  @default false\n         */\n        \"bDeferLoading\": false,\n\n        /**\n         * Indicate if all required information has been read in\n         *  @type boolean\n         *  @default false\n         */\n        \"bInitialised\": false,\n\n        /**\n         * Information about open rows. Each object in the array has the parameters\n         * 'nTr' and 'nParent'\n         *  @type array\n         *  @default []\n         */\n        \"aoOpenRows\": [],\n\n        /**\n         * Dictate the positioning of DataTables' control elements - see\n         * {@link DataTable.model.oInit.sDom}.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         *  @default null\n         */\n        \"sDom\": null,\n\n        /**\n         * Search delay (in mS)\n         *  @type integer\n         *  @default null\n         */\n        \"searchDelay\": null,\n\n        /**\n         * Which type of pagination should be used.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         *  @default two_button\n         */\n        \"sPaginationType\": \"two_button\",\n\n        /**\n         * The state duration (for `stateSave`) in seconds.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type int\n         *  @default 0\n         */\n        \"iStateDuration\": 0,\n\n        /**\n         * Array of callback functions for state saving. Each array element is an\n         * object with the following parameters:\n         *   <ul>\n         *     <li>function:fn - function to call. Takes two parameters, oSettings\n         *       and the JSON string to save that has been thus far created. Returns\n         *       a JSON string to be inserted into a json object\n         *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n         *     <li>string:sName - name of callback</li>\n         *   </ul>\n         *  @type array\n         *  @default []\n         */\n        \"aoStateSave\": [],\n\n        /**\n         * Array of callback functions for state loading. Each array element is an\n         * object with the following parameters:\n         *   <ul>\n         *     <li>function:fn - function to call. Takes two parameters, oSettings\n         *       and the object stored. May return false to cancel state loading</li>\n         *     <li>string:sName - name of callback</li>\n         *   </ul>\n         *  @type array\n         *  @default []\n         */\n        \"aoStateLoad\": [],\n\n        /**\n         * State that was saved. Useful for back reference\n         *  @type object\n         *  @default null\n         */\n        \"oSavedState\": null,\n\n        /**\n         * State that was loaded. Useful for back reference\n         *  @type object\n         *  @default null\n         */\n        \"oLoadedState\": null,\n\n        /**\n         * Source url for AJAX data for the table.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         *  @default null\n         */\n        \"sAjaxSource\": null,\n\n        /**\n         * Property from a given object from which to read the table data from. This\n         * can be an empty string (when not server-side processing), in which case\n         * it is  assumed an an array is given directly.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         */\n        \"sAjaxDataProp\": null,\n\n        /**\n         * Note if draw should be blocked while getting data\n         *  @type boolean\n         *  @default true\n         */\n        \"bAjaxDataGet\": true,\n\n        /**\n         * The last jQuery XHR object that was used for server-side data gathering.\n         * This can be used for working with the XHR information in one of the\n         * callbacks\n         *  @type object\n         *  @default null\n         */\n        \"jqXHR\": null,\n\n        /**\n         * JSON returned from the server in the last Ajax request\n         *  @type object\n         *  @default undefined\n         */\n        \"json\": undefined,\n\n        /**\n         * Data submitted as part of the last Ajax request\n         *  @type object\n         *  @default undefined\n         */\n        \"oAjaxData\": undefined,\n\n        /**\n         * Function to get the server-side data.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type function\n         */\n        \"fnServerData\": null,\n\n        /**\n         * Functions which are called prior to sending an Ajax request so extra\n         * parameters can easily be sent to the server\n         *  @type array\n         *  @default []\n         */\n        \"aoServerParams\": [],\n\n        /**\n         * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n         * required).\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         */\n        \"sServerMethod\": null,\n\n        /**\n         * Format numbers for display.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type function\n         */\n        \"fnFormatNumber\": null,\n\n        /**\n         * List of options that can be used for the user selectable length menu.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @default []\n         */\n        \"aLengthMenu\": null,\n\n        /**\n         * Counter for the draws that the table does. Also used as a tracker for\n         * server-side processing\n         *  @type int\n         *  @default 0\n         */\n        \"iDraw\": 0,\n\n        /**\n         * Indicate if a redraw is being done - useful for Ajax\n         *  @type boolean\n         *  @default false\n         */\n        \"bDrawing\": false,\n\n        /**\n         * Draw index (iDraw) of the last error when parsing the returned data\n         *  @type int\n         *  @default -1\n         */\n        \"iDrawError\": -1,\n\n        /**\n         * Paging display length\n         *  @type int\n         *  @default 10\n         */\n        \"_iDisplayLength\": 10,\n\n        /**\n         * Paging start point - aiDisplay index\n         *  @type int\n         *  @default 0\n         */\n        \"_iDisplayStart\": 0,\n\n        /**\n         * Server-side processing - number of records in the result set\n         * (i.e. before filtering), Use fnRecordsTotal rather than\n         * this property to get the value of the number of records, regardless of\n         * the server-side processing setting.\n         *  @type int\n         *  @default 0\n         *  @private\n         */\n        \"_iRecordsTotal\": 0,\n\n        /**\n         * Server-side processing - number of records in the current display set\n         * (i.e. after filtering). Use fnRecordsDisplay rather than\n         * this property to get the value of the number of records, regardless of\n         * the server-side processing setting.\n         *  @type boolean\n         *  @default 0\n         *  @private\n         */\n        \"_iRecordsDisplay\": 0,\n\n        /**\n         * Flag to indicate if jQuery UI marking and classes should be used.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type boolean\n         */\n        \"bJUI\": null,\n\n        /**\n         * The classes to use for the table\n         *  @type object\n         *  @default {}\n         */\n        \"oClasses\": {},\n\n        /**\n         * Flag attached to the settings object so you can check in the draw\n         * callback if filtering has been done in the draw. Deprecated in favour of\n         * events.\n         *  @type boolean\n         *  @default false\n         *  @deprecated\n         */\n        \"bFiltered\": false,\n\n        /**\n         * Flag attached to the settings object so you can check in the draw\n         * callback if sorting has been done in the draw. Deprecated in favour of\n         * events.\n         *  @type boolean\n         *  @default false\n         *  @deprecated\n         */\n        \"bSorted\": false,\n\n        /**\n         * Indicate that if multiple rows are in the header and there is more than\n         * one unique cell per column, if the top one (true) or bottom one (false)\n         * should be used for sorting / title by DataTables.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type boolean\n         */\n        \"bSortCellsTop\": null,\n\n        /**\n         * Initialisation object that is used for the table\n         *  @type object\n         *  @default null\n         */\n        \"oInit\": null,\n\n        /**\n         * Destroy callback functions - for plug-ins to attach themselves to the\n         * destroy so they can clean up markup and events.\n         *  @type array\n         *  @default []\n         */\n        \"aoDestroyCallback\": [],\n\n\n        /**\n         * Get the number of records in the current record set, before filtering\n         *  @type function\n         */\n        \"fnRecordsTotal\": function ()\n        {\n            return _fnDataSource( this ) == 'ssp' ?\n            this._iRecordsTotal * 1 :\n                this.aiDisplayMaster.length;\n        },\n\n        /**\n         * Get the number of records in the current record set, after filtering\n         *  @type function\n         */\n        \"fnRecordsDisplay\": function ()\n        {\n            return _fnDataSource( this ) == 'ssp' ?\n            this._iRecordsDisplay * 1 :\n                this.aiDisplay.length;\n        },\n\n        /**\n         * Get the display end point - aiDisplay index\n         *  @type function\n         */\n        \"fnDisplayEnd\": function ()\n        {\n            var\n                len      = this._iDisplayLength,\n                start    = this._iDisplayStart,\n                calc     = start + len,\n                records  = this.aiDisplay.length,\n                features = this.oFeatures,\n                paginate = features.bPaginate;\n\n            if ( features.bServerSide ) {\n                return paginate === false || len === -1 ?\n                start + records :\n                    Math.min( start+len, this._iRecordsDisplay );\n            }\n            else {\n                return ! paginate || calc>records || len===-1 ?\n                    records :\n                    calc;\n            }\n        },\n\n        /**\n         * The DataTables object for this table\n         *  @type object\n         *  @default null\n         */\n        \"oInstance\": null,\n\n        /**\n         * Unique identifier for each instance of the DataTables object. If there\n         * is an ID on the table node, then it takes that value, otherwise an\n         * incrementing internal counter is used.\n         *  @type string\n         *  @default null\n         */\n        \"sInstance\": null,\n\n        /**\n         * tabindex attribute value that is added to DataTables control elements, allowing\n         * keyboard navigation of the table and its controls.\n         */\n        \"iTabIndex\": 0,\n\n        /**\n         * DIV container for the footer scrolling table if scrolling\n         */\n        \"nScrollHead\": null,\n\n        /**\n         * DIV container for the footer scrolling table if scrolling\n         */\n        \"nScrollFoot\": null,\n\n        /**\n         * Last applied sort\n         *  @type array\n         *  @default []\n         */\n        \"aLastSort\": [],\n\n        /**\n         * Stored plug-in instances\n         *  @type object\n         *  @default {}\n         */\n        \"oPlugins\": {},\n\n        /**\n         * Function used to get a row's id from the row's data\n         *  @type function\n         *  @default null\n         */\n        \"rowIdFn\": null,\n\n        /**\n         * Data location where to store a row's id\n         *  @type string\n         *  @default null\n         */\n        \"rowId\": null\n    };\n\n    /**\n     * Extension object for DataTables that is used to provide all extension\n     * options.\n     *\n     * Note that the `DataTable.ext` object is available through\n     * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n     * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n     *  @namespace\n     *  @extends DataTable.models.ext\n     */\n\n\n    /**\n     * DataTables extensions\n     *\n     * This namespace acts as a collection area for plug-ins that can be used to\n     * extend DataTables capabilities. Indeed many of the build in methods\n     * use this method to provide their own capabilities (sorting methods for\n     * example).\n     *\n     * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n     * reasons\n     *\n     *  @namespace\n     */\n    DataTable.ext = _ext = {\n        /**\n         * Buttons. For use with the Buttons extension for DataTables. This is\n         * defined here so other extensions can define buttons regardless of load\n         * order. It is _not_ used by DataTables core.\n         *\n         *  @type object\n         *  @default {}\n         */\n        buttons: {},\n\n\n        /**\n         * Element class names\n         *\n         *  @type object\n         *  @default {}\n         */\n        classes: {},\n\n\n        /**\n         * DataTables build type (expanded by the download builder)\n         *\n         *  @type string\n         */\n        builder: \"-source-\",\n\n\n        /**\n         * Error reporting.\n         *\n         * How should DataTables report an error. Can take the value 'alert',\n         * 'throw', 'none' or a function.\n         *\n         *  @type string|function\n         *  @default alert\n         */\n        errMode: \"alert\",\n\n\n        /**\n         * Feature plug-ins.\n         *\n         * This is an array of objects which describe the feature plug-ins that are\n         * available to DataTables. These feature plug-ins are then available for\n         * use through the `dom` initialisation option.\n         *\n         * Each feature plug-in is described by an object which must have the\n         * following properties:\n         *\n         * * `fnInit` - function that is used to initialise the plug-in,\n         * * `cFeature` - a character so the feature can be enabled by the `dom`\n         *   instillation option. This is case sensitive.\n         *\n         * The `fnInit` function has the following input parameters:\n         *\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         *\n         * And the following return is expected:\n         *\n         * * {node|null} The element which contains your feature. Note that the\n         *   return may also be void if your plug-in does not require to inject any\n         *   DOM elements into DataTables control (`dom`) - for example this might\n         *   be useful when developing a plug-in which allows table control via\n         *   keyboard entry\n         *\n         *  @type array\n         *\n         *  @example\n         *    $.fn.dataTable.ext.features.push( {\n\t\t *      \"fnInit\": function( oSettings ) {\n\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );\n\t\t *      },\n\t\t *      \"cFeature\": \"T\"\n\t\t *    } );\n         */\n        feature: [],\n\n\n        /**\n         * Row searching.\n         *\n         * This method of searching is complimentary to the default type based\n         * searching, and a lot more comprehensive as it allows you complete control\n         * over the searching logic. Each element in this array is a function\n         * (parameters described below) that is called for every row in the table,\n         * and your logic decides if it should be included in the searching data set\n         * or not.\n         *\n         * Searching functions have the following input parameters:\n         *\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * 2. `{array|object}` Data for the row to be processed (same as the\n         *    original format that was passed in as the data source, or an array\n         *    from a DOM data source\n         * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n         *    can be useful to retrieve the `TR` element if you need DOM interaction.\n         *\n         * And the following return is expected:\n         *\n         * * {boolean} Include the row in the searched result set (true) or not\n         *   (false)\n         *\n         * Note that as with the main search ability in DataTables, technically this\n         * is \"filtering\", since it is subtractive. However, for consistency in\n         * naming we call it searching here.\n         *\n         *  @type array\n         *  @default []\n         *\n         *  @example\n         *    // The following example shows custom search being applied to the\n         *    // fourth column (i.e. the data[3] index) based on two input values\n         *    // from the end-user, matching the data in a certain range.\n         *    $.fn.dataTable.ext.search.push(\n         *      function( settings, data, dataIndex ) {\n\t\t *        var min = document.getElementById('min').value * 1;\n\t\t *        var max = document.getElementById('max').value * 1;\n\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n\t\t *\n\t\t *        if ( min == \"\" && max == \"\" ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min == \"\" && version < max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min < version && \"\" == max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min < version && version < max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        return false;\n\t\t *      }\n         *    );\n         */\n        search: [],\n\n\n        /**\n         * Selector extensions\n         *\n         * The `selector` option can be used to extend the options available for the\n         * selector modifier options (`selector-modifier` object data type) that\n         * each of the three built in selector types offer (row, column and cell +\n         * their plural counterparts). For example the Select extension uses this\n         * mechanism to provide an option to select only rows, columns and cells\n         * that have been marked as selected by the end user (`{selected: true}`),\n         * which can be used in conjunction with the existing built in selector\n         * options.\n         *\n         * Each property is an array to which functions can be pushed. The functions\n         * take three attributes:\n         *\n         * * Settings object for the host table\n         * * Options object (`selector-modifier` object type)\n         * * Array of selected item indexes\n         *\n         * The return is an array of the resulting item indexes after the custom\n         * selector has been applied.\n         *\n         *  @type object\n         */\n        selector: {\n            cell: [],\n            column: [],\n            row: []\n        },\n\n\n        /**\n         * Internal functions, exposed for used in plug-ins.\n         *\n         * Please note that you should not need to use the internal methods for\n         * anything other than a plug-in (and even then, try to avoid if possible).\n         * The internal function may change between releases.\n         *\n         *  @type object\n         *  @default {}\n         */\n        internal: {},\n\n\n        /**\n         * Legacy configuration options. Enable and disable legacy options that\n         * are available in DataTables.\n         *\n         *  @type object\n         */\n        legacy: {\n            /**\n             * Enable / disable DataTables 1.9 compatible server-side processing\n             * requests\n             *\n             *  @type boolean\n             *  @default null\n             */\n            ajax: null\n        },\n\n\n        /**\n         * Pagination plug-in methods.\n         *\n         * Each entry in this object is a function and defines which buttons should\n         * be shown by the pagination rendering method that is used for the table:\n         * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n         * buttons are displayed in the document, while the functions here tell it\n         * what buttons to display. This is done by returning an array of button\n         * descriptions (what each button will do).\n         *\n         * Pagination types (the four built in options and any additional plug-in\n         * options defined here) can be used through the `paginationType`\n         * initialisation parameter.\n         *\n         * The functions defined take two parameters:\n         *\n         * 1. `{int} page` The current page index\n         * 2. `{int} pages` The number of pages in the table\n         *\n         * Each function is expected to return an array where each element of the\n         * array can be one of:\n         *\n         * * `first` - Jump to first page when activated\n         * * `last` - Jump to last page when activated\n         * * `previous` - Show previous page when activated\n         * * `next` - Show next page when activated\n         * * `{int}` - Show page of the index given\n         * * `{array}` - A nested array containing the above elements to add a\n         *   containing 'DIV' element (might be useful for styling).\n         *\n         * Note that DataTables v1.9- used this object slightly differently whereby\n         * an object with two functions would be defined for each plug-in. That\n         * ability is still supported by DataTables 1.10+ to provide backwards\n         * compatibility, but this option of use is now decremented and no longer\n         * documented in DataTables 1.10+.\n         *\n         *  @type object\n         *  @default {}\n         *\n         *  @example\n         *    // Show previous, next and current page buttons only\n         *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n\t\t *      return [ 'previous', page, 'next' ];\n\t\t *    };\n         */\n        pager: {},\n\n\n        renderer: {\n            pageButton: {},\n            header: {}\n        },\n\n\n        /**\n         * Ordering plug-ins - custom data source\n         *\n         * The extension options for ordering of data available here is complimentary\n         * to the default type based ordering that DataTables typically uses. It\n         * allows much greater control over the the data that is being used to\n         * order a column, but is necessarily therefore more complex.\n         *\n         * This type of ordering is useful if you want to do ordering based on data\n         * live from the DOM (for example the contents of an 'input' element) rather\n         * than just the static string that DataTables knows of.\n         *\n         * The way these plug-ins work is that you create an array of the values you\n         * wish to be ordering for the column in question and then return that\n         * array. The data in the array much be in the index order of the rows in\n         * the table (not the currently ordering order!). Which order data gathering\n         * function is run here depends on the `dt-init columns.orderDataType`\n         * parameter that is used for the column (if any).\n         *\n         * The functions defined take two parameters:\n         *\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * 2. `{int}` Target column index\n         *\n         * Each function is expected to return an array:\n         *\n         * * `{array}` Data for the column to be ordering upon\n         *\n         *  @type array\n         *\n         *  @example\n         *    // Ordering using `input` node values\n         *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n         *    {\n\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n\t\t *        return $('input', td).val();\n\t\t *      } );\n\t\t *    }\n         */\n        order: {},\n\n\n        /**\n         * Type based plug-ins.\n         *\n         * Each column in DataTables has a type assigned to it, either by automatic\n         * detection or by direct assignment using the `type` option for the column.\n         * The type of a column will effect how it is ordering and search (plug-ins\n         * can also make use of the column type if required).\n         *\n         * @namespace\n         */\n        type: {\n            /**\n             * Type detection functions.\n             *\n             * The functions defined in this object are used to automatically detect\n             * a column's type, making initialisation of DataTables super easy, even\n             * when complex data is in the table.\n             *\n             * The functions defined take two parameters:\n             *\n             *  1. `{*}` Data from the column cell to be analysed\n             *  2. `{settings}` DataTables settings object. This can be used to\n             *     perform context specific type detection - for example detection\n             *     based on language settings such as using a comma for a decimal\n             *     place. Generally speaking the options from the settings will not\n             *     be required\n             *\n             * Each function is expected to return:\n             *\n             * * `{string|null}` Data type detected, or null if unknown (and thus\n             *   pass it on to the other type detection functions.\n             *\n             *  @type array\n             *\n             *  @example\n             *    // Currency type detection plug-in:\n             *    $.fn.dataTable.ext.type.detect.push(\n             *      function ( data, settings ) {\n\t\t\t *        // Check the numeric part\n\t\t\t *        if ( ! $.isNumeric( data.substring(1) ) ) {\n\t\t\t *          return null;\n\t\t\t *        }\n\t\t\t *\n\t\t\t *        // Check prefixed by currency\n\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n\t\t\t *          return 'currency';\n\t\t\t *        }\n\t\t\t *        return null;\n\t\t\t *      }\n             *    );\n             */\n            detect: [],\n\n\n            /**\n             * Type based search formatting.\n             *\n             * The type based searching functions can be used to pre-format the\n             * data to be search on. For example, it can be used to strip HTML\n             * tags or to de-format telephone numbers for numeric only searching.\n             *\n             * Note that is a search is not defined for a column of a given type,\n             * no search formatting will be performed.\n             *\n             * Pre-processing of searching data plug-ins - When you assign the sType\n             * for a column (or have it automatically detected for you by DataTables\n             * or a type detection plug-in), you will typically be using this for\n             * custom sorting, but it can also be used to provide custom searching\n             * by allowing you to pre-processing the data and returning the data in\n             * the format that should be searched upon. This is done by adding\n             * functions this object with a parameter name which matches the sType\n             * for that target column. This is the corollary of <i>afnSortData</i>\n             * for searching data.\n             *\n             * The functions defined take a single parameter:\n             *\n             *  1. `{*}` Data from the column cell to be prepared for searching\n             *\n             * Each function is expected to return:\n             *\n             * * `{string|null}` Formatted string that will be used for the searching.\n             *\n             *  @type object\n             *  @default {}\n             *\n             *  @example\n             *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n\t\t\t *    }\n             */\n            search: {},\n\n\n            /**\n             * Type based ordering.\n             *\n             * The column type tells DataTables what ordering to apply to the table\n             * when a column is sorted upon. The order for each type that is defined,\n             * is defined by the functions available in this object.\n             *\n             * Each ordering option can be described by three properties added to\n             * this object:\n             *\n             * * `{type}-pre` - Pre-formatting function\n             * * `{type}-asc` - Ascending order function\n             * * `{type}-desc` - Descending order function\n             *\n             * All three can be used together, only `{type}-pre` or only\n             * `{type}-asc` and `{type}-desc` together. It is generally recommended\n             * that only `{type}-pre` is used, as this provides the optimal\n             * implementation in terms of speed, although the others are provided\n             * for compatibility with existing Javascript sort functions.\n             *\n             * `{type}-pre`: Functions defined take a single parameter:\n             *\n             *  1. `{*}` Data from the column cell to be prepared for ordering\n             *\n             * And return:\n             *\n             * * `{*}` Data to be sorted upon\n             *\n             * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n             * functions, taking two parameters:\n             *\n             *  1. `{*}` Data to compare to the second parameter\n             *  2. `{*}` Data to compare to the first parameter\n             *\n             * And returning:\n             *\n             * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n             *   than the second parameter, ===0 if the two parameters are equal and\n             *   >0 if the first parameter should be sorted height than the second\n             *   parameter.\n             *\n             *  @type object\n             *  @default {}\n             *\n             *  @example\n             *    // Numeric ordering of formatted numbers with a pre-formatter\n             *    $.extend( $.fn.dataTable.ext.type.order, {\n\t\t\t *      \"string-pre\": function(x) {\n\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n\t\t\t *        return parseFloat( a );\n\t\t\t *      }\n\t\t\t *    } );\n             *\n             *  @example\n             *    // Case-sensitive string ordering, with no pre-formatting method\n             *    $.extend( $.fn.dataTable.ext.order, {\n\t\t\t *      \"string-case-asc\": function(x,y) {\n\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t\t *      },\n\t\t\t *      \"string-case-desc\": function(x,y) {\n\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t\t *      }\n\t\t\t *    } );\n             */\n            order: {}\n        },\n\n        /**\n         * Unique DataTables instance counter\n         *\n         * @type int\n         * @private\n         */\n        _unique: 0,\n\n\n        //\n        // Depreciated\n        // The following properties are retained for backwards compatiblity only.\n        // The should not be used in new projects and will be removed in a future\n        // version\n        //\n\n        /**\n         * Version check function.\n         *  @type function\n         *  @depreciated Since 1.10\n         */\n        fnVersionCheck: DataTable.fnVersionCheck,\n\n\n        /**\n         * Index for what 'this' index API functions should use\n         *  @type int\n         *  @deprecated Since v1.10\n         */\n        iApiIndex: 0,\n\n\n        /**\n         * jQuery UI class container\n         *  @type object\n         *  @deprecated Since v1.10\n         */\n        oJUIClasses: {},\n\n\n        /**\n         * Software version\n         *  @type string\n         *  @deprecated Since v1.10\n         */\n        sVersion: DataTable.version\n    };\n\n\n    //\n    // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n    //\n    $.extend( _ext, {\n        afnFiltering: _ext.search,\n        aTypes:       _ext.type.detect,\n        ofnSearch:    _ext.type.search,\n        oSort:        _ext.type.order,\n        afnSortData:  _ext.order,\n        aoFeatures:   _ext.feature,\n        oApi:         _ext.internal,\n        oStdClasses:  _ext.classes,\n        oPagination:  _ext.pager\n    } );\n\n\n    $.extend( DataTable.ext.classes, {\n        \"sTable\": \"dataTable\",\n        \"sNoFooter\": \"no-footer\",\n\n        /* Paging buttons */\n        \"sPageButton\": \"paginate_button\",\n        \"sPageButtonActive\": \"current\",\n        \"sPageButtonDisabled\": \"disabled\",\n\n        /* Striping classes */\n        \"sStripeOdd\": \"odd\",\n        \"sStripeEven\": \"even\",\n\n        /* Empty row */\n        \"sRowEmpty\": \"dataTables_empty\",\n\n        /* Features */\n        \"sWrapper\": \"dataTables_wrapper\",\n        \"sFilter\": \"dataTables_filter\",\n        \"sInfo\": \"dataTables_info\",\n        \"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\n        \"sLength\": \"dataTables_length\",\n        \"sProcessing\": \"dataTables_processing\",\n\n        /* Sorting */\n        \"sSortAsc\": \"sorting_asc\",\n        \"sSortDesc\": \"sorting_desc\",\n        \"sSortable\": \"sorting\", /* Sortable in both directions */\n        \"sSortableAsc\": \"sorting_asc_disabled\",\n        \"sSortableDesc\": \"sorting_desc_disabled\",\n        \"sSortableNone\": \"sorting_disabled\",\n        \"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\n\n        /* Filtering */\n        \"sFilterInput\": \"\",\n\n        /* Page length */\n        \"sLengthSelect\": \"\",\n\n        /* Scrolling */\n        \"sScrollWrapper\": \"dataTables_scroll\",\n        \"sScrollHead\": \"dataTables_scrollHead\",\n        \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n        \"sScrollBody\": \"dataTables_scrollBody\",\n        \"sScrollFoot\": \"dataTables_scrollFoot\",\n        \"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\n        /* Misc */\n        \"sHeaderTH\": \"\",\n        \"sFooterTH\": \"\",\n\n        // Deprecated\n        \"sSortJUIAsc\": \"\",\n        \"sSortJUIDesc\": \"\",\n        \"sSortJUI\": \"\",\n        \"sSortJUIAscAllowed\": \"\",\n        \"sSortJUIDescAllowed\": \"\",\n        \"sSortJUIWrapper\": \"\",\n        \"sSortIcon\": \"\",\n        \"sJUIHeader\": \"\",\n        \"sJUIFooter\": \"\"\n    } );\n\n\n    (function() {\n\n        // Reused strings for better compression. Closure compiler appears to have a\n        // weird edge case where it is trying to expand strings rather than use the\n        // variable version. This results in about 200 bytes being added, for very\n        // little preference benefit since it this run on script load only.\n        var _empty = '';\n        _empty = '';\n\n        var _stateDefault = _empty + 'ui-state-default';\n        var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';\n        var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';\n\n        $.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {\n            /* Full numbers paging buttons */\n            \"sPageButton\":         \"fg-button ui-button \"+_stateDefault,\n            \"sPageButtonActive\":   \"ui-state-disabled\",\n            \"sPageButtonDisabled\": \"ui-state-disabled\",\n\n            /* Features */\n            \"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+\n            \"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\n\n            /* Sorting */\n            \"sSortAsc\":            _stateDefault+\" sorting_asc\",\n            \"sSortDesc\":           _stateDefault+\" sorting_desc\",\n            \"sSortable\":           _stateDefault+\" sorting\",\n            \"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",\n            \"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",\n            \"sSortableNone\":       _stateDefault+\" sorting_disabled\",\n            \"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",\n            \"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",\n            \"sSortJUI\":            _sortIcon+\"carat-2-n-s\",\n            \"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",\n            \"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",\n            \"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",\n            \"sSortIcon\":           \"DataTables_sort_icon\",\n\n            /* Scrolling */\n            \"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,\n            \"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,\n\n            /* Misc */\n            \"sHeaderTH\":  _stateDefault,\n            \"sFooterTH\":  _stateDefault,\n            \"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",\n            \"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"\n        } );\n\n    }());\n\n\n\n    var extPagination = DataTable.ext.pager;\n\n    function _numbers ( page, pages ) {\n        var\n            numbers = [],\n            buttons = extPagination.numbers_length,\n            half = Math.floor( buttons / 2 ),\n            i = 1;\n\n        if ( pages <= buttons ) {\n            numbers = _range( 0, pages );\n        }\n        else if ( page <= half ) {\n            numbers = _range( 0, buttons-2 );\n            numbers.push( 'ellipsis' );\n            numbers.push( pages-1 );\n        }\n        else if ( page >= pages - 1 - half ) {\n            numbers = _range( pages-(buttons-2), pages );\n            numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\n            numbers.splice( 0, 0, 0 );\n        }\n        else {\n            numbers = _range( page-half+2, page+half-1 );\n            numbers.push( 'ellipsis' );\n            numbers.push( pages-1 );\n            numbers.splice( 0, 0, 'ellipsis' );\n            numbers.splice( 0, 0, 0 );\n        }\n\n        numbers.DT_el = 'span';\n        return numbers;\n    }\n\n\n    $.extend( extPagination, {\n        simple: function ( page, pages ) {\n            return [ 'previous', 'next' ];\n        },\n\n        full: function ( page, pages ) {\n            return [  'first', 'previous', 'next', 'last' ];\n        },\n\n        numbers: function ( page, pages ) {\n            return [ _numbers(page, pages) ];\n        },\n\n        simple_numbers: function ( page, pages ) {\n            return [ 'previous', _numbers(page, pages), 'next' ];\n        },\n\n        full_numbers: function ( page, pages ) {\n            return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\n        },\n\n        // For testing and plug-ins to use\n        _numbers: _numbers,\n\n        // Number of number buttons (including ellipsis) to show. _Must be odd!_\n        numbers_length: 7\n    } );\n\n\n    $.extend( true, DataTable.ext.renderer, {\n        pageButton: {\n            _: function ( settings, host, idx, buttons, page, pages ) {\n                var classes = settings.oClasses;\n                var lang = settings.oLanguage.oPaginate;\n                var aria = settings.oLanguage.oAria.paginate || {};\n                var btnDisplay, btnClass, counter=0;\n\n                var attach = function( container, buttons ) {\n                    var i, ien, node, button;\n                    var clickHandler = function ( e ) {\n                        _fnPageChange( settings, e.data.action, true );\n                    };\n\n                    for ( i=0, ien=buttons.length ; i<ien ; i++ ) {\n                        button = buttons[i];\n\n                        if ( $.isArray( button ) ) {\n                            var inner = $( '<'+(button.DT_el || 'div')+'/>' )\n                                .appendTo( container );\n                            attach( inner, button );\n                        }\n                        else {\n                            btnDisplay = null;\n                            btnClass = '';\n\n                            switch ( button ) {\n                                case 'ellipsis':\n                                    container.append('<span class=\"ellipsis\">&#x2026;</span>');\n                                    break;\n\n                                case 'first':\n                                    btnDisplay = lang.sFirst;\n                                    btnClass = button + (page > 0 ?\n                                            '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n\n                                case 'previous':\n                                    btnDisplay = lang.sPrevious;\n                                    btnClass = button + (page > 0 ?\n                                            '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n\n                                case 'next':\n                                    btnDisplay = lang.sNext;\n                                    btnClass = button + (page < pages-1 ?\n                                            '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n\n                                case 'last':\n                                    btnDisplay = lang.sLast;\n                                    btnClass = button + (page < pages-1 ?\n                                            '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n\n                                default:\n                                    btnDisplay = button + 1;\n                                    btnClass = page === button ?\n                                        classes.sPageButtonActive : '';\n                                    break;\n                            }\n\n                            if ( btnDisplay !== null ) {\n                                node = $('<a>', {\n                                    'class': classes.sPageButton+' '+btnClass,\n                                    'aria-controls': settings.sTableId,\n                                    'aria-label': aria[ button ],\n                                    'data-dt-idx': counter,\n                                    'tabindex': settings.iTabIndex,\n                                    'id': idx === 0 && typeof button === 'string' ?\n                                    settings.sTableId +'_'+ button :\n                                        null\n                                } )\n                                    .html( btnDisplay )\n                                    .appendTo( container );\n\n                                _fnBindAction(\n                                    node, {action: button}, clickHandler\n                                );\n\n                                counter++;\n                            }\n                        }\n                    }\n                };\n\n                // IE9 throws an 'unknown error' if document.activeElement is used\n                // inside an iframe or frame. Try / catch the error. Not good for\n                // accessibility, but neither are frames.\n                var activeEl;\n\n                try {\n                    // Because this approach is destroying and recreating the paging\n                    // elements, focus is lost on the select button which is bad for\n                    // accessibility. So we want to restore focus once the draw has\n                    // completed\n                    activeEl = $(host).find(document.activeElement).data('dt-idx');\n                }\n                catch (e) {}\n\n                attach( $(host).empty(), buttons );\n\n                if ( activeEl ) {\n                    $(host).find( '[data-dt-idx='+activeEl+']' ).focus();\n                }\n            }\n        }\n    } );\n\n\n\n    // Built in type detection. See model.ext.aTypes for information about\n    // what is required from this methods.\n    $.extend( DataTable.ext.type.detect, [\n        // Plain numbers - first since V8 detects some plain numbers as dates\n        // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber( d, decimal ) ? 'num'+decimal : null;\n        },\n\n        // Dates (only those recognised by the browser's Date.parse)\n        function ( d, settings )\n        {\n            // V8 will remove any unknown characters at the start and end of the\n            // expression, leading to false matches such as `$245.12` or `10%` being\n            // a valid date. See forum thread 18941 for detail.\n            if ( d && !(d instanceof Date) && ( ! _re_date_start.test(d) || ! _re_date_end.test(d) ) ) {\n                return null;\n            }\n            var parsed = Date.parse(d);\n            return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\n        },\n\n        // Formatted numbers\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\n        },\n\n        // HTML numeric\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\n        },\n\n        // HTML numeric, formatted\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\n        },\n\n        // HTML (this is strict checking - there must be html)\n        function ( d, settings )\n        {\n            return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\n                'html' : null;\n        }\n    ] );\n\n\n\n    // Filter formatting functions. See model.ext.ofnSearch for information about\n    // what is required from these methods.\n    //\n    // Note that additional search methods are added for the html numbers and\n    // html formatted numbers by `_addNumericSort()` when we know what the decimal\n    // place is\n\n\n    $.extend( DataTable.ext.type.search, {\n        html: function ( data ) {\n            return _empty(data) ?\n                data :\n                typeof data === 'string' ?\n                    data\n                        .replace( _re_new_lines, \" \" )\n                        .replace( _re_html, \"\" ) :\n                    '';\n        },\n\n        string: function ( data ) {\n            return _empty(data) ?\n                data :\n                typeof data === 'string' ?\n                    data.replace( _re_new_lines, \" \" ) :\n                    data;\n        }\n    } );\n\n\n\n    var __numericReplace = function ( d, decimalPlace, re1, re2 ) {\n        if ( d !== 0 && (!d || d === '-') ) {\n            return -Infinity;\n        }\n\n        // If a decimal place other than `.` is used, it needs to be given to the\n        // function so we can detect it and replace with a `.` which is the only\n        // decimal place Javascript recognises - it is not locale aware.\n        if ( decimalPlace ) {\n            d = _numToDecimal( d, decimalPlace );\n        }\n\n        if ( d.replace ) {\n            if ( re1 ) {\n                d = d.replace( re1, '' );\n            }\n\n            if ( re2 ) {\n                d = d.replace( re2, '' );\n            }\n        }\n\n        return d * 1;\n    };\n\n\n    // Add the numeric 'deformatting' functions for sorting and search. This is done\n    // in a function to provide an easy ability for the language options to add\n    // additional methods if a non-period decimal place is used.\n    function _addNumericSort ( decimalPlace ) {\n        $.each(\n            {\n                // Plain numbers\n                \"num\": function ( d ) {\n                    return __numericReplace( d, decimalPlace );\n                },\n\n                // Formatted numbers\n                \"num-fmt\": function ( d ) {\n                    return __numericReplace( d, decimalPlace, _re_formatted_numeric );\n                },\n\n                // HTML numeric\n                \"html-num\": function ( d ) {\n                    return __numericReplace( d, decimalPlace, _re_html );\n                },\n\n                // HTML numeric, formatted\n                \"html-num-fmt\": function ( d ) {\n                    return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\n                }\n            },\n            function ( key, fn ) {\n                // Add the ordering method\n                _ext.type.order[ key+decimalPlace+'-pre' ] = fn;\n\n                // For HTML types add a search formatter that will strip the HTML\n                if ( key.match(/^html\\-/) ) {\n                    _ext.type.search[ key+decimalPlace ] = _ext.type.search.html;\n                }\n            }\n        );\n    }\n\n\n    // Default sort methods\n    $.extend( _ext.type.order, {\n        // Dates\n        \"date-pre\": function ( d ) {\n            return Date.parse( d ) || 0;\n        },\n\n        // html\n        \"html-pre\": function ( a ) {\n            return _empty(a) ?\n                '' :\n                a.replace ?\n                    a.replace( /<.*?>/g, \"\" ).toLowerCase() :\n                a+'';\n        },\n\n        // string\n        \"string-pre\": function ( a ) {\n            // This is a little complex, but faster than always calling toString,\n            // http://jsperf.com/tostring-v-check\n            return _empty(a) ?\n                '' :\n                typeof a === 'string' ?\n                    a.toLowerCase() :\n                    ! a.toString ?\n                        '' :\n                        a.toString();\n        },\n\n        // string-asc and -desc are retained only for compatibility with the old\n        // sort methods\n        \"string-asc\": function ( x, y ) {\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n        },\n\n        \"string-desc\": function ( x, y ) {\n            return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n        }\n    } );\n\n\n    // Numeric sorting types - order doesn't matter here\n    _addNumericSort( '' );\n\n\n    $.extend( true, DataTable.ext.renderer, {\n        header: {\n            _: function ( settings, cell, column, classes ) {\n                // No additional mark-up required\n                // Attach a sort listener to update on sort - note that using the\n                // `DT` namespace will allow the event to be removed automatically\n                // on destroy, while the `dt` namespaced event is the one we are\n                // listening for\n                $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n                    if ( settings !== ctx ) { // need to check this this is the host\n                        return;               // table, not a nested one\n                    }\n\n                    var colIdx = column.idx;\n\n                    cell\n                        .removeClass(\n                            column.sSortingClass +' '+\n                            classes.sSortAsc +' '+\n                            classes.sSortDesc\n                        )\n                        .addClass( columns[ colIdx ] == 'asc' ?\n                            classes.sSortAsc : columns[ colIdx ] == 'desc' ?\n                            classes.sSortDesc :\n                            column.sSortingClass\n                        );\n                } );\n            },\n\n            jqueryui: function ( settings, cell, column, classes ) {\n                $('<div/>')\n                    .addClass( classes.sSortJUIWrapper )\n                    .append( cell.contents() )\n                    .append( $('<span/>')\n                        .addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\n                    )\n                    .appendTo( cell );\n\n                // Attach a sort listener to update on sort\n                $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n                    if ( settings !== ctx ) {\n                        return;\n                    }\n\n                    var colIdx = column.idx;\n\n                    cell\n                        .removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\n                        .addClass( columns[ colIdx ] == 'asc' ?\n                            classes.sSortAsc : columns[ colIdx ] == 'desc' ?\n                            classes.sSortDesc :\n                            column.sSortingClass\n                        );\n\n                    cell\n                        .find( 'span.'+classes.sSortIcon )\n                        .removeClass(\n                            classes.sSortJUIAsc +\" \"+\n                            classes.sSortJUIDesc +\" \"+\n                            classes.sSortJUI +\" \"+\n                            classes.sSortJUIAscAllowed +\" \"+\n                            classes.sSortJUIDescAllowed\n                        )\n                        .addClass( columns[ colIdx ] == 'asc' ?\n                            classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\n                            classes.sSortJUIDesc :\n                            column.sSortingClassJUI\n                        );\n                } );\n            }\n        }\n    } );\n\n    /*\n     * Public helper functions. These aren't used internally by DataTables, or\n     * called by any of the options passed into DataTables, but they can be used\n     * externally by developers working with DataTables. They are helper functions\n     * to make working with DataTables a little bit easier.\n     */\n\n    var __htmlEscapeEntities = function ( d ) {\n        return typeof d === 'string' ?\n            d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;') :\n            d;\n    };\n\n    /**\n     * Helpers for `columns.render`.\n     *\n     * The options defined here can be used with the `columns.render` initialisation\n     * option to provide a display renderer. The following functions are defined:\n     *\n     * * `number` - Will format numeric data (defined by `columns.data`) for\n     *   display, retaining the original unformatted data for sorting and filtering.\n     *   It takes 5 parameters:\n     *   * `string` - Thousands grouping separator\n     *   * `string` - Decimal point indicator\n     *   * `integer` - Number of decimal points to show\n     *   * `string` (optional) - Prefix.\n     *   * `string` (optional) - Postfix (/suffix).\n     * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n     *   parameters.\n     *\n     * @example\n     *   // Column definition using the number renderer\n     *   {\n\t *     data: \"salary\",\n\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n\t *   }\n     *\n     * @namespace\n     */\n    DataTable.render = {\n        number: function ( thousands, decimal, precision, prefix, postfix ) {\n            return {\n                display: function ( d ) {\n                    if ( typeof d !== 'number' && typeof d !== 'string' ) {\n                        return d;\n                    }\n\n                    var negative = d < 0 ? '-' : '';\n                    var flo = parseFloat( d );\n\n                    // If NaN then there isn't much formatting that we can do - just\n                    // return immediately, escaping any HTML (this was supposed to\n                    // be a number after all)\n                    if ( isNaN( flo ) ) {\n                        return __htmlEscapeEntities( d );\n                    }\n\n                    d = Math.abs( flo );\n\n                    var intPart = parseInt( d, 10 );\n                    var floatPart = precision ?\n                    decimal+(d - intPart).toFixed( precision ).substring( 2 ):\n                        '';\n\n                    return negative + (prefix||'') +\n                        intPart.toString().replace(\n                            /\\B(?=(\\d{3})+(?!\\d))/g, thousands\n                        ) +\n                        floatPart +\n                        (postfix||'');\n                }\n            };\n        },\n\n        text: function () {\n            return {\n                display: __htmlEscapeEntities\n            };\n        }\n    };\n\n\n    /*\n     * This is really a good bit rubbish this method of exposing the internal methods\n     * publicly... - To be fixed in 2.0 using methods on the prototype\n     */\n\n\n    /**\n     * Create a wrapper function for exporting an internal functions to an external API.\n     *  @param {string} fn API function name\n     *  @returns {function} wrapped function\n     *  @memberof DataTable#internal\n     */\n    function _fnExternApiFunc (fn)\n    {\n        return function() {\n            var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\n                Array.prototype.slice.call(arguments)\n            );\n            return DataTable.ext.internal[fn].apply( this, args );\n        };\n    }\n\n\n    /**\n     * Reference to internal functions for use by plug-in developers. Note that\n     * these methods are references to internal functions and are considered to be\n     * private. If you use these methods, be aware that they are liable to change\n     * between versions.\n     *  @namespace\n     */\n    $.extend( DataTable.ext.internal, {\n        _fnExternApiFunc: _fnExternApiFunc,\n        _fnBuildAjax: _fnBuildAjax,\n        _fnAjaxUpdate: _fnAjaxUpdate,\n        _fnAjaxParameters: _fnAjaxParameters,\n        _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n        _fnAjaxDataSrc: _fnAjaxDataSrc,\n        _fnAddColumn: _fnAddColumn,\n        _fnColumnOptions: _fnColumnOptions,\n        _fnAdjustColumnSizing: _fnAdjustColumnSizing,\n        _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n        _fnColumnIndexToVisible: _fnColumnIndexToVisible,\n        _fnVisbleColumns: _fnVisbleColumns,\n        _fnGetColumns: _fnGetColumns,\n        _fnColumnTypes: _fnColumnTypes,\n        _fnApplyColumnDefs: _fnApplyColumnDefs,\n        _fnHungarianMap: _fnHungarianMap,\n        _fnCamelToHungarian: _fnCamelToHungarian,\n        _fnLanguageCompat: _fnLanguageCompat,\n        _fnBrowserDetect: _fnBrowserDetect,\n        _fnAddData: _fnAddData,\n        _fnAddTr: _fnAddTr,\n        _fnNodeToDataIndex: _fnNodeToDataIndex,\n        _fnNodeToColumnIndex: _fnNodeToColumnIndex,\n        _fnGetCellData: _fnGetCellData,\n        _fnSetCellData: _fnSetCellData,\n        _fnSplitObjNotation: _fnSplitObjNotation,\n        _fnGetObjectDataFn: _fnGetObjectDataFn,\n        _fnSetObjectDataFn: _fnSetObjectDataFn,\n        _fnGetDataMaster: _fnGetDataMaster,\n        _fnClearTable: _fnClearTable,\n        _fnDeleteIndex: _fnDeleteIndex,\n        _fnInvalidate: _fnInvalidate,\n        _fnGetRowElements: _fnGetRowElements,\n        _fnCreateTr: _fnCreateTr,\n        _fnBuildHead: _fnBuildHead,\n        _fnDrawHead: _fnDrawHead,\n        _fnDraw: _fnDraw,\n        _fnReDraw: _fnReDraw,\n        _fnAddOptionsHtml: _fnAddOptionsHtml,\n        _fnDetectHeader: _fnDetectHeader,\n        _fnGetUniqueThs: _fnGetUniqueThs,\n        _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n        _fnFilterComplete: _fnFilterComplete,\n        _fnFilterCustom: _fnFilterCustom,\n        _fnFilterColumn: _fnFilterColumn,\n        _fnFilter: _fnFilter,\n        _fnFilterCreateSearch: _fnFilterCreateSearch,\n        _fnEscapeRegex: _fnEscapeRegex,\n        _fnFilterData: _fnFilterData,\n        _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n        _fnUpdateInfo: _fnUpdateInfo,\n        _fnInfoMacros: _fnInfoMacros,\n        _fnInitialise: _fnInitialise,\n        _fnInitComplete: _fnInitComplete,\n        _fnLengthChange: _fnLengthChange,\n        _fnFeatureHtmlLength: _fnFeatureHtmlLength,\n        _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n        _fnPageChange: _fnPageChange,\n        _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n        _fnProcessingDisplay: _fnProcessingDisplay,\n        _fnFeatureHtmlTable: _fnFeatureHtmlTable,\n        _fnScrollDraw: _fnScrollDraw,\n        _fnApplyToChildren: _fnApplyToChildren,\n        _fnCalculateColumnWidths: _fnCalculateColumnWidths,\n        _fnThrottle: _fnThrottle,\n        _fnConvertToWidth: _fnConvertToWidth,\n        _fnGetWidestNode: _fnGetWidestNode,\n        _fnGetMaxLenString: _fnGetMaxLenString,\n        _fnStringToCss: _fnStringToCss,\n        _fnSortFlatten: _fnSortFlatten,\n        _fnSort: _fnSort,\n        _fnSortAria: _fnSortAria,\n        _fnSortListener: _fnSortListener,\n        _fnSortAttachListener: _fnSortAttachListener,\n        _fnSortingClasses: _fnSortingClasses,\n        _fnSortData: _fnSortData,\n        _fnSaveState: _fnSaveState,\n        _fnLoadState: _fnLoadState,\n        _fnSettingsFromNode: _fnSettingsFromNode,\n        _fnLog: _fnLog,\n        _fnMap: _fnMap,\n        _fnBindAction: _fnBindAction,\n        _fnCallbackReg: _fnCallbackReg,\n        _fnCallbackFire: _fnCallbackFire,\n        _fnLengthOverflow: _fnLengthOverflow,\n        _fnRenderer: _fnRenderer,\n        _fnDataSource: _fnDataSource,\n        _fnRowAttributes: _fnRowAttributes,\n        _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\n                                        // in 1.10, so this dead-end function is\n                                        // added to prevent errors\n    } );\n\n\n    // jQuery access\n    $.fn.dataTable = DataTable;\n\n    // Provide access to the host jQuery object (circular reference)\n    DataTable.$ = $;\n\n    // Legacy aliases\n    $.fn.dataTableSettings = DataTable.settings;\n    $.fn.dataTableExt = DataTable.ext;\n\n    // With a capital `D` we return a DataTables API instance rather than a\n    // jQuery object\n    $.fn.DataTable = function ( opts ) {\n        return $(this).dataTable( opts ).api();\n    };\n\n    // All properties that are available to $.fn.dataTable should also be\n    // available on $.fn.DataTable\n    $.each( DataTable, function ( prop, val ) {\n        $.fn.DataTable[ prop ] = val;\n    } );\n\n\n    // Information about events fired by DataTables - for documentation.\n    /**\n     * Draw event, fired whenever the table is redrawn on the page, at the same\n     * point as fnDrawCallback. This may be useful for binding events or\n     * performing calculations when the table is altered at all.\n     *  @name DataTable#draw.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n\n    /**\n     * Search event, fired when the searching applied to the table (using the\n     * built-in global search, or column filters) is altered.\n     *  @name DataTable#search.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n\n    /**\n     * Page change event, fired when the paging of the table is altered.\n     *  @name DataTable#page.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n\n    /**\n     * Order event, fired when the ordering applied to the table is altered.\n     *  @name DataTable#order.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n\n    /**\n     * DataTables initialisation complete event, fired when the table is fully\n     * drawn, including Ajax data loaded, if Ajax data is required.\n     *  @name DataTable#init.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The JSON object request from the server - only\n     *    present if client-side Ajax sourced data is used</li></ol>\n     */\n\n    /**\n     * State save event, fired when the table has changed state a new state save\n     * is required. This event allows modification of the state saving object\n     * prior to actually doing the save, including addition or other state\n     * properties (for plug-ins) or modification of a DataTables core property.\n     *  @name DataTable#stateSaveParams.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The state information to be saved\n     */\n\n    /**\n     * State load event, fired when the table is loading state from the stored\n     * data, but prior to the settings object being modified by the saved state\n     * - allowing modification of the saved state is required or loading of\n     * state for a plug-in.\n     *  @name DataTable#stateLoadParams.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The saved state information\n     */\n\n    /**\n     * State loaded event, fired when state has been loaded from stored data and\n     * the settings object has been modified by the loaded data.\n     *  @name DataTable#stateLoaded.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The saved state information\n     */\n\n    /**\n     * Processing event, fired when DataTables is doing some kind of processing\n     * (be it, order, searcg or anything else). It can be used to indicate to\n     * the end user that there is something happening, or that something has\n     * finished.\n     *  @name DataTable#processing.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n     */\n\n    /**\n     * Ajax (XHR) event, fired whenever an Ajax request is completed from a\n     * request to made to the server for new data. This event is called before\n     * DataTables processed the returned data, so it can also be used to pre-\n     * process the data returned from the server, if needed.\n     *\n     * Note that this trigger is called in `fnServerData`, if you override\n     * `fnServerData` and which to use this event, you need to trigger it in you\n     * success function.\n     *  @name DataTable#xhr.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     *  @param {object} json JSON returned from the server\n     *\n     *  @example\n     *     // Use a custom property returned from the server in another DOM element\n     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n\t *       $('#status').html( json.status );\n\t *     } );\n     *\n     *  @example\n     *     // Pre-process the data returned from the server\n     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n\t *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n\t *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n\t *       }\n\t *       // Note no return - manipulate the data directly in the JSON object.\n\t *     } );\n     */\n\n    /**\n     * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\n     * or passing the bDestroy:true parameter in the initialisation object. This\n     * can be used to remove bound events, added DOM nodes, etc.\n     *  @name DataTable#destroy.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n\n    /**\n     * Page length change event, fired when number of records to show on each\n     * page (the length) is changed.\n     *  @name DataTable#length.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     *  @param {integer} len New length\n     */\n\n    /**\n     * Column sizing has changed.\n     *  @name DataTable#column-sizing.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n\n    /**\n     * Column visibility has changed.\n     *  @name DataTable#column-visibility.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     *  @param {int} column Column index\n     *  @param {bool} vis `false` if column now hidden, or `true` if visible\n     */\n\n    return $.fn.dataTable;\n}));","UOL_PagSeguro/js/public.js":"/**\n *\n * Modals\n *\n */\nvar Modal = {\n    'Load' : function(title, content){\n        require([\n            'Magento_Ui/js/modal/alert'\n        ], function(alert) {\n            alert({\n                title: title,\n                content: content,\n                clickableOverlay: true,\n\n            });\n        });\n    }\n}\n\n/**\n *\n * Ajax call's\n *\n */\nvar WS = {\n\n    'Ajax' : {\n\n        'Conciliation' : {\n\n            'Search' : function(url)\n            {\n                jQuery.ajax( {\n                    url: url + '/pagseguro/conciliation/request',\n                    data: {form_key: window.FORM_KEY, days: jQuery('#conciliation-days').val()},\n                    type: 'POST',\n                    showLoader: true,\n                }).success(function(response) {\n\n                    if (response.success) {\n\n                        var t = jQuery('#pagseguro-datatable').DataTable();\n\n                        //Cleans up the table\n                        t.clear().draw();\n\n                        //Check the array for data, if not empty insert data else clear the table.\n                        if (response.payload.data.length > 0) {\n                            // Create a new table row for all array positions\n                            response.payload.data.forEach(function(item){\n                                t.row.add( [\n                                    \"<input type='checkbox' data-target='conciliation' data-block='\"+item.details+\"'/>\",\n                                    item.date,\n                                    item.magento_id,\n                                    item.pagseguro_id,\n                                    item.magento_status,\n                                    item.pagseguro_status,\n                                    '<a href=\"'+url+'/sales/order/view/order_id/'+item.order_id+'/key/'+window.FORM_KEY+'\" target=\"_blank\">Ver detalhes</a>'\n                                ] );\n                                //Adjust column width\n                                t.columns.adjust().draw(false);\n                            });\n                        } else {\n                            //Alert\n                            Modal.Load('Concilia\u00e7\u00e3o', 'Sem resultados para o per\u00edodo solicitado.');\n                        }\n                    } else {\n                        //Alert\n                        Modal.Load('Concilia\u00e7\u00e3o', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Tente novamente mais tarde.');\n                    }\n                });\n\n            },\n            'Conciliate' : function(url)\n            {\n                var t    = jQuery('#pagseguro-datatable').DataTable();\n                var rows = jQuery('#pagseguro-datatable').find('[data-target=conciliation]:checked');\n\n                // Get all serialized data from rows\n                var data = [];\n                jQuery.each(rows, function(index, value) {\n                    // Find row index\n                    var tr = jQuery(value).parent().parent();\n                    // push row data to an array of rows\n                    data[index] = jQuery(value).attr('data-block');\n                    // remove this row\n                    t.row( tr ).remove().draw();\n                });\n\n                jQuery.ajax( {\n                    url: url + '/pagseguro/conciliation/conciliate',\n                    data: {form_key: window.FORM_KEY, data: data},\n                    type: 'POST',\n                    showLoader: true,\n                }).success(function(response) {\n\n                    if (response.success) {\n\n                        if (response.success == true) {\n                            //Alert\n                            Modal.Load('Concilia\u00e7\u00e3o', 'Transa\u00e7\u00f5es conciliadas com sucesso!');\n                        }\n\n                        if (response.success == false) {\n                            //Alert\n                            Modal.Load('Concilia\u00e7\u00e3o', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Utilize a concilia\u00e7\u00e3o de transa\u00e7\u00f5es primeiro ou tente novamente mais tarde.');\n                        }\n                    } else {\n                        //Alert\n                        Modal.Load('Concilia\u00e7\u00e3o', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Tente novamente mais tarde.');\n                    }\n                });\n            }\n        },\n\n        /**\n         * Abandoned method's\n         */\n        'Abandoned' : {\n\n            'Search': function (url) {\n\n                jQuery.ajax({\n                    url: url + '/pagseguro/abandoned/request',\n                    data: {form_key: window.FORM_KEY, days: jQuery('#abandoned-days').val()},\n                    type: 'POST',\n                    showLoader: true,\n                }).success(function (response) {\n\n                    if (response.success) {\n\n                        var t = jQuery('#pagseguro-datatable').DataTable();\n\n                        //Cleans up the table\n                        t.clear().draw();\n\n                        //Check the array for data, if not empty insert data else clear the table.\n                        if (response.payload.data.length > 0) {\n                            // Create a new table row for all array positions\n                            response.payload.data.forEach(function (item) {\n                                t.row.add([\n                                    \"<input type='checkbox' data-target='abandoned' data-block='\" + item.details + \"'/>\",\n                                    item.date,\n                                    item.magento_id,\n                                    item.validate,\n                                    item.sent,\n                                    '<a href=\"' + url + '/sales/order/view/order_id/' + item.order_id + '/key/' + window.FORM_KEY + '\" target=\"_blank\">Ver detalhes</a>'\n                                ]);\n                                //Adjust column width\n                                t.columns.adjust().draw(false);\n                            });\n                        } else {\n                            //Alert\n                            Modal.Load('Abandonadas', 'Sem resultados para o per\u00edodo solicitado.');\n                        }\n                    } else {\n                        //Alert\n                        Modal.Load('Abandonadas', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Tente novamente mais tarde.');\n                    }\n\n                });\n            },\n            'Transport' : function(url)\n            {\n                var t    = jQuery('#pagseguro-datatable').DataTable();\n                var rows = jQuery('#pagseguro-datatable').find('[data-target=abandoned]:checked');\n\n                // Get all serialized data from rows\n                var data = [];\n                jQuery.each(rows, function(index, value) {\n                    // Find row index\n                    var tr = jQuery(value).parent().parent();\n                    // push row data to an array of rows\n                    data[index] = jQuery(value).attr('data-block');\n                });\n\n                jQuery.ajax( {\n                    url: url + '/pagseguro/abandoned/transport',\n                    data: {form_key: window.FORM_KEY, data: data},\n                    type: 'POST',\n                    showLoader: true,\n                }).success(function(response) {\n\n                    if (response.success) {\n\n                        if (response.success == true) {\n\n                            //Cleans up the table\n                            t.clear().draw();\n\n                            WS.Ajax.Abandoned.Search(url);\n\n                            Modal.Load('Abandonadas', 'C\u00f3digo de recupera\u00e7\u00e3o enviado com sucesso!');\n\n                        }\n                        if (response.success == false) {\n                            //Alert\n                            Modal.Load('Abandonadas', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Utilize a recupera\u00e7\u00e3o de transa\u00e7\u00f5es primeiro ou tente novamente mais tarde.');\n                        }\n                    } else {\n                        //Alert\n                        Modal.Load('Abandonadas', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Tente novamente mais tarde.');\n                    }\n                });\n            }\n        },\n\n        /**\n         * Cancellation method's\n         */\n        'Cancellation' : {\n            'Search' : function(url)\n            {\n                jQuery.ajax( {\n                    url: url + '/pagseguro/cancellation/request',\n                    data: {form_key: window.FORM_KEY, days: jQuery('#cancellation-days').val()},\n                    type: 'POST',\n                    showLoader: true,\n                }).success(function(response) {\n\n                    if (response.success) {\n\n                        var t = jQuery('#pagseguro-datatable').DataTable();\n\n                        //Cleans up the table\n                        t.clear().draw();\n\n                        //Check the array for data, if not empty insert data else clear the table.\n                        if (response.payload.data.length > 0) {\n                            var i = 0;\n                            // Create a new table row for all array positions\n                            response.payload.data.forEach(function(item){\n                                t.row.add( [\n                                    item.date,\n                                    item.magento_id,\n                                    item.pagseguro_id,\n                                    item.magento_status,\n                                    '<a class=\"cancellation-cancel\" data-target=\"cancellation_'+ i +'\" data-block=\"'+item.details+'\">Cancelar</a>'\n                                ] );\n                                //Adjust column width\n                                t.columns.adjust().draw(false);\n                                i++;\n                            });\n                        } else {\n                            //Alert\n                            Modal.Load('Cancelamento', 'Sem resultados para o per\u00edodo solicitado.');\n                        }\n                    } else {\n                        //Alert\n                        Modal.Load('Cancelamento', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Tente novamente mais tarde.');\n                    }\n                });\n\n            },\n            'Cancel' : function(url, data, row)\n            {\n                var t = jQuery('#pagseguro-datatable').DataTable();\n\n                jQuery.ajax( {\n                    url: url + '/pagseguro/cancellation/cancel',\n                    data: {form_key: window.FORM_KEY, data: data},\n                    type: 'POST',\n                    showLoader: true,\n                }).success(function(response) {\n\n                    if (response.success) {\n\n                        t.row( row ).remove().draw();\n\n                        Modal.Load('Cancelamento', 'Transa\u00e7\u00f5es cancelada com sucesso!');\n\n                    } else {\n                        if (response.payload.error == 'Need to conciliate') {\n                            //Alert\n                            Modal.Load('Cancelamento', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Utilize a concilia\u00e7\u00e3o de transa\u00e7\u00f5es primeiro ou tente novamente mais tarde.');\n                        } else {\n                            //Alert\n                            Modal.Load('Cancelamento', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Tente novamente mais tarde.');\n                        }\n                    }\n                });\n            }\n        },\n\n        /**\n         * Refund method's\n         */\n        'Refund' : {\n            'Search' : function(url)\n            {\n                jQuery.ajax( {\n                    url: url + '/pagseguro/refund/request',\n                    data: {form_key: window.FORM_KEY, days: jQuery('#refund-days').val()},\n                    type: 'POST',\n                    showLoader: true,\n                }).success(function(response) {\n\n                    if (response.success) {\n\n                        var t = jQuery('#pagseguro-datatable').DataTable();\n\n                        //Cleans up the table\n                        t.clear().draw();\n\n                        //Check the array for data, if not empty insert data else clear the table.\n                        if (response.payload.data.length > 0) {\n                            var i = 0;\n                            // Create a new table row for all array positions\n                            response.payload.data.forEach(function(item){\n                                t.row.add( [\n                                    item.date,\n                                    item.magento_id,\n                                    item.pagseguro_id,\n                                    item.magento_status,\n                                    '<a class=\"refund\" data-target=\"refund_'+ i +'\" data-block=\"'+item.details+'\" data-id=\"'+item.magento_id+'\" style=\"cursor:pointer;\">Estorno total</a><br/>'+\n                                    '<a class=\"partial-refund\" data-target=\"refund_'+ i +'\" data-block=\"'+item.details+'\" data-value=\"'+item.value+'\" data-id=\"'+item.magento_id+'\" style=\"cursor:pointer;\">Estorno parcial</a>', \n                                ] );\n                                //Adjust column width\n                                t.columns.adjust().draw(false);\n                                i++;\n                            });\n                        } else {\n                            //Alert\n                            Modal.Load('Estorno', 'Sem resultados para o per\u00edodo solicitado.');\n                        }\n                    } else {\n                        //Alert\n                        Modal.Load('Estorno', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Tente novamente mais tarde.');\n                    }\n                });\n\n            },\n            'Refund' : function(url, data, row, value = null)\n            {\n                var t = jQuery('#pagseguro-datatable').DataTable();\n                jQuery.ajax( {\n                    url: url + '/pagseguro/refund/refund',\n                    data: {form_key: window.FORM_KEY, data: data, value: value},\n                    type: 'POST',\n                    showLoader: true,\n                }).success(function(response) {\n                    if (response.success) {\n                        t.row( row ).remove().draw();\n                        Modal.Load('Estorno', 'Transa\u00e7\u00f5es estornada com sucesso!');\n                    } else {\n                        if (response.payload.error == 'Need to conciliate') {\n                            Modal.Load('Estorno', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Utilize a concilia\u00e7\u00e3o de transa\u00e7\u00f5es primeiro ou tente novamente mais tarde.');\n                        } else if(response.payload.error == '14002' || response.payload.error == '14013') {\n                            Modal.Load('Estorno', 'Valor do estorno est\u00e1 em um formato inv\u00e1lido!');\n                        } else if (response.payload.error == '14003') {\n                            Modal.Load('Estorno', 'Valor do estorno inv\u00e1lido! O valor n\u00e3o pode ser negativo.');\n                        } else if (response.payload.error == '14004') {\n                            Modal.Load('Estorno', 'Valor do estorno \u00e9 menor do que o permitido.');\n                        } else if (response.payload.error == '14005') {\n                            Modal.Load('Estorno', 'Valor do estorno \u00e9 maior do que o permitido.');\n                        } else if (response.payload.error == '14006') {\n                            Modal.Load('Estorno', 'Saldo insuficiente para estornar a transa\u00e7\u00e3o.');\n                        } else if (response.payload.error == '14007') {\n                            Modal.Load('Estorno', 'Status da transa\u00e7\u00e3o \u00e9 inv\u00e1lido para ser estornada.');\n                        } else if (response.payload.error == '14008') {\n                            Modal.Load('Estorno', 'Transa\u00e7\u00e3o n\u00e3o encontrada.');\n                        } else if (response.payload.error == '14009') {\n                            Modal.Load('Estorno', \"Sua conta PagSeguro n\u00e3o tem permiss\u00e3o para realizar esta a\u00e7\u00e3o. Em caso de d\u00favidas acesse <a href='http://forum.pagseguro.uol.com.br' target='_blank'>http://forum.pagseguro.uol.com.br</a>\");\n                        }else {\n                            Modal.Load('Estorno', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Tente novamente mais tarde.');\n                        }\n                    }\n                });\n            }\n        },\n\n        /**\n         * Transactions method's\n         */\n        'Transactions' : {\n            'Search' : function(url)\n            {\n                jQuery.ajax( {\n                    url: url + '/pagseguro/transactions/request',\n                    data: {\n                        form_key: window.FORM_KEY,\n                        date_begin: jQuery('#date_begin').val(),\n                        date_end: jQuery('#date_end').val(),\n                        id_magento: jQuery('#id_magento').val(),\n                        id_pagseguro: jQuery('#id_pagseguro').val(),\n                        status: jQuery('#status').val()\n                    },\n                    type: 'POST',\n                    showLoader: true,\n                }).success(function(response) {\n                    if (response.success) {\n                        var t = jQuery('#pagseguro-datatable').DataTable();\n\n                        //Cleans up the table\n                        t.clear().draw();\n                        //Check the array for data, if not empty insert data else clear the table.\n                        if (response.payload.data.length > 0) {\n                            var i = 0;\n                            // Create a new table row for all array positions\n                            response.payload.data.forEach(function(item){\n                                t.row.add( [\n                                    item.date,\n                                    '<a href=\"' + url + '/sales/order/view/order_id/' + item.order_id + '/key/' + window.FORM_KEY + '\" target=\"_blank\">' + item.magento_id + '</a>',\n                                    item.pagseguro_id,\n                                    item.environment,\n                                    item.magento_status,\n                                    '<a class=\"link\" data-transaction=\"'+ item.pagseguro_id +'\" data-order=\"'+ item.order_id +'\">Ver detalhes do pagamento</a>'\n                                ] );\n\n                                //Adjust column width\n                                t.columns.adjust().draw(false);\n                                i++;\n                            });\n                            jQuery('.loading-mask').css('display', 'none');\n                        } else {\n                            //Alert\n                            Modal.Load('Listar transa\u00e7\u00f5es', 'Nenhum resultado para o filtro informado!.');\n                        }\n                    } else {\n                        //Alert\n                        Modal.Load('Listar transa\u00e7\u00f5es', 'N\u00e3o foi poss\u00edvel executar esta a\u00e7\u00e3o. Tente novamente mais tarde.');\n                    }\n                });\n\n            },\n\n            'Details' : function (url, transaction_code, order) {\n                jQuery.ajax({\n                    url: url + '/pagseguro/transactions/transaction',\n                    type: \"POST\",\n                    data: {\n                        form_key: window.FORM_KEY,\n                        transaction: transaction_code\n                    },\n                    showLoader: true\n                }).success(function(result) {\n                    if (result.success) {\n                        result = result.payload.data;\n\n                            jQuery('#transaction-group').append('<div></div>');\n                            jQuery('#transaction-group').append('<div></div>');\n                            jQuery('#payment-group').append('<div></div>');\n                            jQuery('#payment-group').append('<div></div>');\n                            var listTransactionLine1 = jQuery('#transaction-group div:eq(0)');\n                            var listTransactionLine2 = jQuery('#transaction-group div:eq(1)');\n                            var listPaymentLine1 = jQuery('#payment-group div:eq(0)');\n                            var listPaymentLine2 = jQuery('#payment-group div:eq(1)');\n\n                            if(result.date != undefined && result.date != false){\n                                listTransactionLine1.append('<dl class=\"\"><dt>Data e hora: </dt><dd>' + result.date + '</dd></dl>');\n                            }\n\n                            if(result.type != undefined && result.type != false){\n                                listTransactionLine1.append('<dl class=\"\"><dt>Tipo: </dt><dd>' + result.type + '</dd></dl>');\n                            }\n\n                            if(result.status != undefined && result.status != false){\n                                listTransactionLine1.append('<dl><dt>Status: </dt><dd>' + result.status + '</dd></dl>');\n                            }\n\n                            if(result.code != undefined && result.code != false){\n                                listTransactionLine1.append('<dl><dt>C\u00f3digo da transa\u00e7\u00e3o: </dt><dd>' + result.code + '</dd></dl>');\n                            }\n\n                            if(result.reference != undefined && result.reference != false){\n                                listTransactionLine1.append('<dl><dt>C\u00f3digo de refer\u00eancia: </dt><dd>' + result.reference + '</dd></dl>');\n                            }\n\n                            if(result.lastEventDate != undefined && result.lastEventDate != false){\n                                listTransactionLine2.append('<dl><dt>\u00daltimo evento: </dt><dd>' + result.lastEventDate + '</dd></dl>');\n                            }\n\n                            if(result.cancelationSource != undefined && result.cancelationSource != false){\n                                listTransactionLine2.append('<dl><dt>Origem do cancelamento: </dt><dd>' + result.cancelationSource + '</dd></dl>');\n                            }\n\n                            if(result.itemCount != undefined && result.itemCount != false){\n                                listTransactionLine2.append('<dl><dt>Total de itens: </dt><dd>' + result.itemCount + '</dd></dl>');\n                            }\n\n                            jQuery('#transaction-group').append('<span id=\"btn-hidden-itens\" class=\"link \">Exibir todos os itens &#9660</span>');\n\n                            jQuery('#transaction-group').append('<div id=\"itens\" class=\"hidden-groups table\"></div>');\n\n                            if(result.paymentMethod.titleType != undefined && result.paymentMethod.titleType != false){\n                                listPaymentLine1.append('<dl><dt>Tipo de pagamento: </dt><dd>' + result.paymentMethod.titleType + '</dd></dl>');\n                            }\n\n                            if(result.paymentMethod.titleCode != undefined && result.paymentMethod.titleCode != false){\n                                listPaymentLine1.append('<dl><dt>Meio de pagamento: </dt><dd>' + result.paymentMethod.titleCode +'</dd></dl>');\n                            }\n\n                            if(result.paymentLink != false){\n                                listPaymentLine1.append('<dl><dt>Link para pagamento: </dt><dd>' + '<a href=' + result.paymentLink + '>' + 'Clique aqui para acessar' +'</a>' + '</dd></dl>');\n                            }\n\n                            if(result.installmentCount != undefined && result.installmentCount != false){\n                                listPaymentLine1.append('<dl><dt>N\u00ba de parcelas: </dt><dd>' + result.installmentCount + '</dd></dl>');\n                            }\n\n                            if(result.extraAmount != undefined && result.extraAmount != false){\n                                listPaymentLine2.append('<dl class=\"\"><dt>Valor extra: </dt><dd>R$ ' + formatReal(result.extraAmount) + '</dd></dl>');\n                            }\n\n                            if(result.discountAmount != undefined && result.discountAmount != false){\n                                listPaymentLine2.append('<dl class=\"\"><dt>Desconto: </dt><dd> R$' + formatReal(result.discountAmount) + '</dd></dl>');\n                            }\n\n                            if(result.grossAmount != undefined && result.grossAmount != false){\n                                listPaymentLine2.append('<dl class=\"\"><dt>Valor bruto: </dt><dd>R$ ' + formatReal(result.grossAmount) +'</dd></dl>');\n                            }\n\n                            if(result.netAmount != undefined && result.netAmount != false){\n                                listPaymentLine2.append('<dl class=\"\"><dt>Valor l\u00edquido: </dt><dd>R$ ' + formatReal(result.netAmount) + '</dd></dl>');\n                            }\n\n                            if(result.promoCode != undefined && result.promoCode != false){\n                                listPaymentLine2.append('<dl><dt>C\u00f3digo de promo\u00e7\u00e3o: </dt><dd>' + result.promoCode + '</dd></dl>');\n                            }\n\n                            if(result.escrowEndDate != undefined && result.escrowEndDate != false){\n                                listPaymentLine1.append('<dl><dt>Data de cr\u00e9dito: </dt><dd>' + result.escrowEndDate +'</dd></dl>');\n                            }\n\n                            jQuery('#payment-group').append('<span id=\"btn-hidden-data\" class=\"link\">Exibir todos os dados de custos cobrados &#9660</span>');\n\n                            jQuery('#payment-group').append('<div id=\"cost-data\" class=\"hidden-groups table\"></div>');\n\n                            var listItens = jQuery('#itens');\n                            listItens.append('<h4>Itens do carrinho</h4>');\n                            listItens.append('<div class=\"group-title\"></div>');\n                            listItens.append('<div class=\"group-table-itens\"></div>');\n                            var listItensTitle = jQuery('.group-title');\n\n                            if(result.itemCount > 0){\n                                listItensTitle.append('<div class=\"itens-cell\">ID</div>');\n                                listItensTitle.append('<div class=\"description-cell\">Produto</div>');\n                                listItensTitle.append('<div class=\"itens-cell\">Quantidade</div>');\n                                listItensTitle.append('<div class=\"itens-cell\">Valor</div>');\n                                listItensTitle.append('<div class=\"itens-cell\">Total</div>');\n                                for(var i = 0; i< result.itemCount; i++){\n                                    var total = (result.items[i].quantity * result.items[i].amount).toFixed(2);\n                                    listItensBody = jQuery('.group-table-itens');\n                                    listItensBody.append('<div id=\"item' + i + '\" class=\"itens-line\"></div>');\n                                    listItensBody = jQuery('#item' + i);\n                                    listItensBody.append('<div class=\"itens-cell\">' + result.items[i].id +'</div>');\n                                    listItensBody.append('<div class=\"description-cell\">' + result.items[i].description +'</div>');\n                                    listItensBody.append('<div class=\"itens-cell\">' + result.items[i].quantity + '</div>');\n                                    listItensBody.append('<div class=\"itens-cell\">R$ ' + formatReal(result.items[i].amount) + '</div>');\n                                    listItensBody.append('<div class=\"itens-cell\"> R$ ' + formatReal(total) +'</div>');\n                                }\n                            }\n\n                            jQuery('#cost-data').append('<h4>Dados dos custos cobrados</h4>');\n\n                            jQuery('#cost-data').append('<div class=\"rate\"></div>');\n\n                            var listData = jQuery('#cost-data div');\n\n                            if(result.creditorFees.installmentFeeAmount != undefined && result.creditorFees.installmentFeeAmount != false){\n                                listData.append('<dl><dt>Taxa de parcelamento: </dt><dd> R$' + formatReal(result.creditorFees.installmentFeeAmount) + '</dd></dl>');\n                            }\n\n                            if(result.creditorFees.operationalFeeAmount != undefined && result.creditorFees.operationalFeeAmount != false){\n                                listData.append('<dl><dt>Taxa de opera\u00e7\u00e3o: </dt><dd> R$'+ formatReal(result.creditorFees.operationalFeeAmount) +'</dd></dl>');\n                            }\n\n                            if(result.creditorFees.intermediationRateAmount != undefined && result.creditorFees.intermediationRateAmount != false){\n                                listData.append('<dl><dt>Tarifa de intermedia\u00e7\u00e3o: </dt><dd>R$ ' + formatReal(result.creditorFees.intermediationRateAmount) + '</dd></dl>');\n                            }\n\n                            if(result.creditorFees.intermediationFeeAmount != undefined && result.creditorFees.intermediationFeeAmount != false){\n                                listData.append('<dl><dt>Taxa de intermedia\u00e7\u00e3o: </dt><dd>R$ ' + formatReal(result.creditorFees.intermediationFeeAmount) + '</dd></dl>');\n                            }\n\n                            if(result.creditorFees.comissionFeeAmount != undefined && result.creditorFees.comissionFeeAmount != false){\n                                listData.append('<dl><dt>Taxa de comiss\u00e3o: </dt><dd>R$ ' + formatReal(result.creditorFees.comissionFeeAmount) + '</dd></dl>');\n                            }\n\n                            jQuery('.modals-overlay').css('display', 'block');\n                            jQuery('#modal-details').addClass('_show');\n                        \n                    }else{\n                        if(result.payload.error == \"need to conciliate\"){\n                            Modal.Load('Aten\u00e7\u00e3o', '\u00c9 necess\u00e1rio utilizar a concilia\u00e7\u00e3o de transa\u00e7\u00f5es primeiro.');\n                        }\n                    }\n                });\n            }\n        }\n    }\n}\n\n/**\n *\n * Date\n *\n */\n\nfunction dateMask (date, fieldName) {\n    var mydate = '';\n    var field = document.getElementById(fieldName);\n    mydate = mydate + date;\n    if (mydate.length == 2 && event.keyCode != 8){\n        mydate = mydate + '/';\n        field.value = mydate;\n    } \n    if (mydate.length == 5 && event.keyCode != 8){\n        mydate = mydate + '/';\n        field.value = mydate;\n    } \n    if (mydate.length == 10){\n        dateVerify(field); \n    }\n    \n    if (field.value == \"\") {\n        field.classList.remove('field-error');\n    }\n} \n        \nfunction dateVerify (fieldName) { \n\n    day = (fieldName.value.substring(0,2)); \n    month = (fieldName.value.substring(3,5)); \n    year = (fieldName.value.substring(6,10)); \n\n    situacao = \"\";\n\n    if ( isNaN(day) || ((day < 01)||(day < 01 || day > 30) && (  month == 04 || month == 06 || month == 09 || month == 11 ) || day > 31)) {\n        situacao = \"false\";\n    }\n\n    if ( isNaN(month) || month < 01 || month > 12 ) {\n        situacao = \"false\";\n    }\n\n    if ( isNaN(year) || month == 2 && ( day < 01 || day > 29 || ( day > 28 && (parseInt(year / 4) != year / 4)))) {\n        situacao = \"false\";\n    }\n\n    if (situacao == \"false\") {\n       fieldName.classList.add('field-error');\n    }else{\n       fieldName.classList.remove('field-error');\n    }\n    return;\n}\n\nfunction dateVerifyOnLosesFocus(fieldName){\n    var mydate = '';\n    mydate = mydate + fieldName.value;\n\n    if(mydate.length > 0 && mydate.length < 10){\n        fieldName.classList.add('field-error');\n    }else if(mydate.length == 0) {\n        fieldName.classList.remove('field-error');\n    } else {\n        dateVerify(fieldName);\n    }\n}\n\nfunction validateSearchByDate() {\n    var fieldDateFromValue = document.getElementById('date_begin').value;\n    var fieldDateToValue = document.getElementById('date_end').value;\n\n    if ((fieldDateFromValue.length > 0 && fieldDateToValue.length == 0) || (fieldDateFromValue.length == 0 && fieldDateToValue.length > 0)) {\n        Modal.Load('Erro ao filtrar!', 'Data de in\u00edcio e fim devem ser informadas!');\n        return false;\n    }\n\n    dayFrom = (fieldDateFromValue.substring(0,2));\n    monthFrom = (fieldDateFromValue.substring(3,5));\n    yearFrom = (fieldDateFromValue.substring(6,10));\n\n    dayTo = (fieldDateToValue.substring(0,2));\n    monthTo = (fieldDateToValue.substring(3,5));\n    yearTo = (fieldDateToValue.substring(6,10));\n\n    var dateFrom = new Date(yearFrom, monthFrom, dayFrom);\n    var dateTo = new Date(yearTo, monthTo, dayTo);\n\n    if (dateFrom > dateTo) {\n        Modal.Load('Erro ao filtrar', 'Data de in\u00edcio maior que a data de fim!');\n        return false;\n    }\n\n    return true;\n}\n\n/**\n *\n * Money\n *\n */\nfunction formatReal( int )\n{\n    var tmp = int+'';\n    tmp = tmp.replace(\".\", \"\");\n    tmp = tmp.replace(/([0-9]{2})$/g, \",$1\");\n    if( tmp.length > 6 )\n        tmp = tmp.replace(/([0-9]{3}),([0-9]{2}$)/g, \".$1,$2\");\n    return tmp;\n}\n\nfunction formatRealInput( field )\n{\n    var tmp = field.value;\n    tmp = tmp.replace(\",\", \"\");\n    tmp = tmp.replace(\".\", \"\");\n\n    valueIsNumber(tmp);\n\n    tmp = tmp.replace(/([0-9]{2})$/g, \",$1\");\n\n    if ( tmp.length > 6 ) {\n        tmp = tmp.replace(/([0-9]{3}),([0-9]{2}$)/g, \".$1,$2\");\n    }\n    field.value = tmp;\n}\n\nfunction valueHasThreeDigits( field ){\n    var tmp = field.value;\n    if(tmp.length == 1){\n        field.value = tmp + \"00\";\n    }\n    formatRealInput( field )\n}\n\nfunction valueIsNumber(tmp){\n\n    if(tmp.indexOf(\",\") == 0){\n        jQuery('#refund-value').addClass('field-error');\n        jQuery('.error').text('Valor inv\u00e1lido.');\n        return false;\n    }\n\n    tmp = tmp.replace(\",\", \"\");\n    tmp = tmp.replace(\".\", \"\");\n\n    if(isNaN(tmp)) {\n        jQuery('#refund-value').addClass('field-error');\n        jQuery('.error').text('Valor inv\u00e1lido.');\n        return false;\n    } else if(tmp.indexOf('-') != -1) {\n        jQuery('#refund-value').addClass('field-error');\n        jQuery('.error').text('Valor n\u00e3o pode ser negativo.');\n        return false;\n    } else {\n        jQuery('.error').text('');\n        jQuery('#refund-value').removeClass('field-error');\n        return true;\n    }\n}\n\nfunction getMoney( strMoney )\n{\n    strMoney = strMoney.replace(\".\", \"\");\n    strMoney = strMoney.replace(\",\", \".\");\n    return parseFloat(strMoney);\n}","Vertex_AddressValidation/js/lib/jquery.serialize-object.js":"/**\n * jQuery serializeObject\n * @copyright 2014, macek <paulmacek@gmail.com>\n * @link https://github.com/macek/jquery-serialize-object\n * @license BSD\n * @version 2.5.0\n */\n(function(root, factory) {\n\n  // AMD\n  if (typeof define === \"function\" && define.amd) {\n    define([\"exports\", \"jquery\"], function(exports, $) {\n      return factory(exports, $);\n    });\n  }\n\n  // CommonJS\n  else if (typeof exports !== \"undefined\") {\n    var $ = require(\"jquery\");\n    factory(exports, $);\n  }\n\n  // Browser\n  else {\n    factory(root, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n}(this, function(exports, $) {\n\n  var patterns = {\n    validate: /^[a-z_][a-z0-9_]*(?:\\[(?:\\d*|[a-z0-9_]+)\\])*$/i,\n    key:      /[a-z0-9_]+|(?=\\[\\])/gi,\n    push:     /^$/,\n    fixed:    /^\\d+$/,\n    named:    /^[a-z0-9_]+$/i\n  };\n\n  function FormSerializer(helper, $form) {\n\n    // private variables\n    var data     = {},\n        pushes   = {};\n\n    // private API\n    function build(base, key, value) {\n      base[key] = value;\n      return base;\n    }\n\n    function makeObject(root, value) {\n\n      var keys = root.match(patterns.key), k;\n\n      // nest, nest, ..., nest\n      while ((k = keys.pop()) !== undefined) {\n        // foo[]\n        if (patterns.push.test(k)) {\n          var idx = incrementPush(root.replace(/\\[\\]$/, ''));\n          value = build([], idx, value);\n        }\n\n        // foo[n]\n        else if (patterns.fixed.test(k)) {\n          value = build([], k, value);\n        }\n\n        // foo; foo[bar]\n        else if (patterns.named.test(k)) {\n          value = build({}, k, value);\n        }\n      }\n\n      return value;\n    }\n\n    function incrementPush(key) {\n      if (pushes[key] === undefined) {\n        pushes[key] = 0;\n      }\n      return pushes[key]++;\n    }\n\n    function encode(pair) {\n      switch ($('[name=\"' + pair.name + '\"]', $form).attr(\"type\")) {\n        case \"checkbox\":\n          return pair.value === \"on\" ? true : pair.value;\n        default:\n          return pair.value;\n      }\n    }\n\n    function addPair(pair) {\n      if (!patterns.validate.test(pair.name)) return this;\n      var obj = makeObject(pair.name, encode(pair));\n      data = helper.extend(true, data, obj);\n      return this;\n    }\n\n    function addPairs(pairs) {\n      if (!helper.isArray(pairs)) {\n        throw new Error(\"formSerializer.addPairs expects an Array\");\n      }\n      for (var i=0, len=pairs.length; i<len; i++) {\n        this.addPair(pairs[i]);\n      }\n      return this;\n    }\n\n    function serialize() {\n      return data;\n    }\n\n    function serializeJSON() {\n      return JSON.stringify(serialize());\n    }\n\n    // public API\n    this.addPair = addPair;\n    this.addPairs = addPairs;\n    this.serialize = serialize;\n    this.serializeJSON = serializeJSON;\n  }\n\n  FormSerializer.patterns = patterns;\n\n  FormSerializer.serializeObject = function serializeObject() {\n    return new FormSerializer($, this).\n      addPairs(this.serializeArray()).\n      serialize();\n  };\n\n  FormSerializer.serializeJSON = function serializeJSON() {\n    return new FormSerializer($, this).\n      addPairs(this.serializeArray()).\n      serializeJSON();\n  };\n\n  if (typeof $.fn !== \"undefined\") {\n    $.fn.serializeObject = FormSerializer.serializeObject;\n    $.fn.serializeJSON   = FormSerializer.serializeJSON;\n  }\n\n  exports.FormSerializer = FormSerializer;\n\n  return FormSerializer;\n}));\n","Vertex_Tax/js/allowed-countries.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['jquery', 'jquery/ui'], function ($) {\n    'use strict';\n\n    $.widget('vertex.allowedCountries', {\n        /**\n         * Bind all optgroups under the attached element to mass-select/mass-deselect their children on click\n         *\n         * @private\n         */\n        _create: function () {\n            $(this.element).on('click', 'optgroup', this.filterClick.bind(this));\n        },\n\n        /**\n         * Filter out any clicks where the target was not explicitly the optgroup\n         *\n         * @param {Event} event\n         * @return void\n         */\n        filterClick: function (event) {\n            if (!$(event.target).is('optgroup')) {\n                return;\n            }\n\n            this._processClick(event);\n        },\n\n        /**\n         * Decide to select or unselect all child elements and execute the chosen task\n         *\n         * @private\n         * @param {Event} event\n         * @return void\n         */\n        _processClick: function (event) {\n            var optgroup = $(event.target),\n                select = optgroup.closest('select'),\n                scrollTop = select.scrollTop();\n\n            if (optgroup.children('option:not(:selected)').length === 0) {\n                optgroup.children('option').prop('selected', false);\n            } else {\n                optgroup.children('option').prop('selected', true);\n            }\n\n            //  Maintain current scroll position\n            // Default behavior, in chrome at least, is to jump to some other selected option\n            setTimeout(function () {\n                select.scrollTop(scrollTop);\n            }, 0);\n        }\n    });\n\n    return $.vertex.allowedCountries;\n});\n","Vertex_Tax/js/form/caption-formatter.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(function () {\n    'use strict';\n\n    return {\n        /**\n         * Return formatted selected option value\n         * @param {Object} selected\n         * @returns {String}\n         */\n        getFormattedValue: function (selected) {\n            var label = '';\n\n            if (selected.parent) {\n                label = selected.parent + ' - ';\n            }\n            label += selected.label;\n            return label;\n        }\n    };\n});\n","Vertex_Tax/js/form/flex-field-select.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'underscore',\n    'Magento_Ui/js/form/element/ui-select',\n    'Vertex_Tax/js/form/caption-formatter'\n], function (_, Component, captionFormatter) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            presets: {\n                optgroup: {\n                    openLevelsAction: true,\n                    showOpenLevelsActionIcon: true\n                }\n            }\n        },\n\n        /**\n         * Set Caption\n         */\n        setCaption: function () {\n            var length, label;\n\n            if (!_.isArray(this.value()) && this.value()) {\n                length = 1;\n            } else if (this.value()) {\n                length = this.value().length;\n            } else {\n                this.value([]);\n                length = 0;\n            }\n\n            if (length && this.getSelected().length) {\n                label = captionFormatter.getFormattedValue(this.getSelected()[0]);\n                this.placeholder(label);\n            } else {\n                this.placeholder(this.selectedPlaceholders.defaultPlaceholder);\n            }\n\n            return this.placeholder();\n        }\n    });\n});\n","Vertex_Tax/js/form/element/custom-option-flex-field-select.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['underscore', 'Magento_Ui/js/form/element/select'], function (_, Select) {\n    'use strict';\n\n    return Select.extend({\n        /**\n         * Overwrites the parent's filter to allow for checking if a value is\n         * in an array and for allowing the value of \"unmapped\" through all\n         * filters\n         *\n         * @param {String} value\n         * @param {String} field\n         */\n        filter: function (value, field) {\n            var source = this.initialOptions,\n                result;\n\n            field = field || this.filterBy.field;\n\n            result = _.filter(source, function (item) {\n                return Array.isArray(item[field]) && item[field].includes(value) ||\n                    item[field] === value ||\n                    item.value === '' ||\n                    item.value === 'unmapped';\n            });\n\n            this.setOptions(result);\n        }\n    });\n});\n","Vertex_Tax/js/model/flex-field-table.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'uiComponent',\n    'ko',\n    'uiLayout',\n    'Vertex_Tax/js/form/caption-formatter'\n], function (Component, ko, layout, captionFormatter) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            elementName: '', // Prefix to use for input elements\n            fieldType: '', // One of code, numeric, or date\n            tableId: '',\n            template: 'Vertex_Tax/flex-field-table',\n            defaultPlaceholder: 'No Data',\n            selectOptions: [\n                {\n                    label: 'No Data',\n                    value: 'none'\n                }\n            ]\n        },\n        retrieveFields: [],\n\n        /**\n         * Initializes the table\n         * @returns {FlexFieldTable} Chainable.\n         */\n        initialize: function () {\n            this._super();\n\n            this.retrieveFields = ko.observableArray();\n            this.initializeFields();\n\n            return this;\n        },\n\n        /**\n         * Initialize the select components and link them to the form values\n         */\n        initializeFields: function () {\n            var i, name, fieldId, fieldSource, toLayOut = [];\n\n            for (i in this.values) {\n                if (this.values.hasOwnProperty(i)) {\n                    fieldSource = this.values[i]['field_source'];\n                    fieldId = this.values[i]['field_id'];\n                    name = this.fieldType + 'FlexField' + fieldId;\n\n                    this.retrieveFields.push({\n                        fieldId: fieldId,\n                        fieldSource: fieldSource,\n                        fieldLabel: this.getFieldLabelFromSource(fieldSource),\n                        editMode: ko.observable(false),\n                        childName: name\n                    });\n                }\n            }\n\n            layout(toLayOut);\n        },\n\n        /**\n         * Replace the label value with a dropdown\n         * @param {Object} child\n         */\n        enableEditMode: function (child) {\n            child.editMode(true);\n\n            layout([{\n                component: 'Vertex_Tax/js/form/flex-field-select',\n                template: 'ui/grid/filters/elements/ui-select',\n                parent: this.name,\n                name: child.childName,\n                dataScope: '',\n                multiple: false,\n                selectType: 'optgroup',\n                selectedPlaceholders: {\n                    defaultPlaceholder: this.defaultPlaceholder\n                },\n                showOpenLevelsActionIcon: true,\n                presets: {\n                    optgroup: {\n                        showOpenLevelsActionIcon: true\n                    }\n                },\n                filterOptions: true,\n                isDisplayMissingValuePlaceholder: true,\n                options: this.selectOptions,\n                value: child.fieldSource\n            }]);\n        },\n\n        /**\n         * Retrieve the name for a Field ID input\n         *\n         * @param {String} fieldId\n         * @returns {String}\n         */\n        getFieldIdInputName: function (fieldId) {\n            return this.elementName + '[' + fieldId + '][field_id]';\n        },\n\n        /**\n         * Retrieve the label for the selected source\n         * @param {String} source\n         * @returns {String}\n         */\n        getFieldLabelFromSource: function (source) {\n            var i, j, selected;\n\n            for (i in this.selectOptions) {\n                if (this.selectOptions[i].optgroup === undefined) {\n                    continue;\n                }\n                for (j in this.selectOptions[i].optgroup) {\n                    selected = this.selectOptions[i].optgroup[j];\n\n                    if (selected.value === source) {\n                        return captionFormatter.getFormattedValue(selected);\n                    }\n                }\n            }\n            return this.defaultPlaceholder;\n        },\n\n        /**\n         * Retrieve the name for a Field Value input\n         * @param {String} fieldId\n         * @returns {String}\n         */\n        getFieldValueInputName: function (fieldId) {\n            return this.elementName + '[' + fieldId + '][field_source]';\n        },\n\n        /**\n         * Retrieve the name for the empty input\n         * @returns {String}\n         */\n        getEmptyName: function () {\n            return this.elementName + '[__empty]';\n        }\n    });\n});\n","WeltPixel_Backend/jscolor/jscolor.js":"/**\n * jscolor, JavaScript Color Picker\n *\n * @version 1.4.3\n * @license GNU Lesser General Public License, http://www.gnu.org/copyleft/lesser.html\n * @author  Jan Odvarko, http://odvarko.cz\n * @created 2008-06-15\n * @updated 2014-07-16\n * @link    http://jscolor.com\n */\n\n\nvar jscolor = {\n\n\n\tdir : '', // location of jscolor directory (leave empty to autodetect)\n\tbindClass : 'color', // class name\n\tbinding : true, // automatic binding via <input class=\"...\">\n\tpreloading : true, // use image preloading?\n\n\n\tinstall : function() {\n\t\tjscolor.addEvent(window, 'load', jscolor.init);\n\t},\n\n\n\tinit : function() {\n\t\tif(jscolor.binding) {\n\t\t\tjscolor.bind();\n\t\t}\n\t\tif(jscolor.preloading) {\n\t\t\tjscolor.preload();\n\t\t}\n\t},\n\n\n\tgetDir : function() {\n\t\tif(!jscolor.dir) {\n\t\t\tvar detected = jscolor.detectDir();\n\t\t\tjscolor.dir = detected!==false ? detected : 'jscolor/';\n\t\t}\n\t\treturn jscolor.dir;\n\t},\n\n\n\tdetectDir : function() {\n\n\t\treturn document.getElementById('wp_base_url_jscolor').value + '/';\n\n\t\tvar base = location.href;\n\n\t\tvar e = document.getElementsByTagName('base');\n\t\tfor(var i=0; i<e.length; i+=1) {\n\t\t\tif(e[i].href) { base = e[i].href; }\n\t\t}\n\n\t\tvar e = document.getElementsByTagName('script');\n\t\tfor(var i=0; i<e.length; i+=1) {\n\t\t\tif(e[i].src && /(^|\\/)jscolor\\.js([?#].*)?$/i.test(e[i].src)) {\n\t\t\t\tvar src = new jscolor.URI(e[i].src);\n\t\t\t\tvar srcAbs = src.toAbsolute(base);\n\t\t\t\tsrcAbs.path = srcAbs.path.replace(/[^\\/]+$/, ''); // remove filename\n\t\t\t\tsrcAbs.query = null;\n\t\t\t\tsrcAbs.fragment = null;\n\t\t\t\treturn srcAbs.toString();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\n\tbind : function() {\n\t\tvar matchClass = new RegExp('(^|\\\\s)('+jscolor.bindClass+')(\\\\s*(\\\\{[^}]*\\\\})|\\\\s|$)', 'i');\n\t\tvar e = document.getElementsByTagName('input');\n\t\tfor(var i=0; i<e.length; i+=1) {\n\t\t\tvar m;\n\t\t\tif(!e[i].color && e[i].className && (m = e[i].className.match(matchClass))) {\n\t\t\t\tvar prop = {};\n\t\t\t\tif(m[4]) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tprop = (new Function ('return (' + m[4] + ')'))();\n\t\t\t\t\t} catch(eInvalidProp) {}\n\t\t\t\t}\n\t\t\t\te[i].color = new jscolor.color(e[i], prop);\n\t\t\t}\n\t\t}\n\t},\n\n\n\tpreload : function() {\n\t\tfor(var fn in jscolor.imgRequire) {\n\t\t\tif(jscolor.imgRequire.hasOwnProperty(fn)) {\n\t\t\t\tjscolor.loadImage(fn);\n\t\t\t}\n\t\t}\n\t},\n\n\n\timages : {\n\t\tpad : [ 181, 101 ],\n\t\tsld : [ 16, 101 ],\n\t\tcross : [ 15, 15 ],\n\t\tarrow : [ 7, 11 ]\n\t},\n\n\n\timgRequire : {},\n\timgLoaded : {},\n\n\n\trequireImage : function(filename) {\n\t\tjscolor.imgRequire[filename] = true;\n\t},\n\n\n\tloadImage : function(filename) {\n\t\tif(!jscolor.imgLoaded[filename]) {\n\t\t\tjscolor.imgLoaded[filename] = new Image();\n\t\t\tjscolor.imgLoaded[filename].src = jscolor.getDir()+filename;\n\t\t}\n\t},\n\n\n\tfetchElement : function(mixed) {\n\t\treturn typeof mixed === 'string' ? document.getElementById(mixed) : mixed;\n\t},\n\n\n\taddEvent : function(el, evnt, func) {\n\t\tif(el.addEventListener) {\n\t\t\tel.addEventListener(evnt, func, false);\n\t\t} else if(el.attachEvent) {\n\t\t\tel.attachEvent('on'+evnt, func);\n\t\t}\n\t},\n\n\n\tfireEvent : function(el, evnt) {\n\t\tif(!el) {\n\t\t\treturn;\n\t\t}\n\t\tif(document.createEvent) {\n\t\t\tvar ev = document.createEvent('HTMLEvents');\n\t\t\tev.initEvent(evnt, true, true);\n\t\t\tel.dispatchEvent(ev);\n\t\t} else if(document.createEventObject) {\n\t\t\tvar ev = document.createEventObject();\n\t\t\tel.fireEvent('on'+evnt, ev);\n\t\t} else if(el['on'+evnt]) { // alternatively use the traditional event model (IE5)\n\t\t\tel['on'+evnt]();\n\t\t}\n\t},\n\n\n\tgetElementPos : function(e) {\n\t\tvar e1=e, e2=e;\n\t\tvar x=0, y=0;\n\t\tif(e1.offsetParent) {\n\t\t\tdo {\n\t\t\t\tx += e1.offsetLeft;\n\t\t\t\ty += e1.offsetTop;\n\t\t\t} while(e1 = e1.offsetParent);\n\t\t}\n\t\twhile((e2 = e2.parentNode) && e2.nodeName.toUpperCase() !== 'BODY') {\n\t\t\tx -= e2.scrollLeft;\n\t\t\ty -= e2.scrollTop;\n\t\t}\n\t\treturn [x, y];\n\t},\n\n\n\tgetElementSize : function(e) {\n\t\treturn [e.offsetWidth, e.offsetHeight];\n\t},\n\n\n\tgetRelMousePos : function(e) {\n\t\tvar x = 0, y = 0;\n\t\tif (!e) { e = window.event; }\n\t\tif (typeof e.offsetX === 'number') {\n\t\t\tx = e.offsetX;\n\t\t\ty = e.offsetY;\n\t\t} else if (typeof e.layerX === 'number') {\n\t\t\tx = e.layerX;\n\t\t\ty = e.layerY;\n\t\t}\n\t\treturn { x: x, y: y };\n\t},\n\n\n\tgetViewPos : function() {\n\t\tif(typeof window.pageYOffset === 'number') {\n\t\t\treturn [window.pageXOffset, window.pageYOffset];\n\t\t} else if(document.body && (document.body.scrollLeft || document.body.scrollTop)) {\n\t\t\treturn [document.body.scrollLeft, document.body.scrollTop];\n\t\t} else if(document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {\n\t\t\treturn [document.documentElement.scrollLeft, document.documentElement.scrollTop];\n\t\t} else {\n\t\t\treturn [0, 0];\n\t\t}\n\t},\n\n\n\tgetViewSize : function() {\n\t\tif(typeof window.innerWidth === 'number') {\n\t\t\treturn [window.innerWidth, window.innerHeight];\n\t\t} else if(document.body && (document.body.clientWidth || document.body.clientHeight)) {\n\t\t\treturn [document.body.clientWidth, document.body.clientHeight];\n\t\t} else if(document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {\n\t\t\treturn [document.documentElement.clientWidth, document.documentElement.clientHeight];\n\t\t} else {\n\t\t\treturn [0, 0];\n\t\t}\n\t},\n\n\n\tURI : function(uri) { // See RFC3986\n\n\t\tthis.scheme = null;\n\t\tthis.authority = null;\n\t\tthis.path = '';\n\t\tthis.query = null;\n\t\tthis.fragment = null;\n\n\t\tthis.parse = function(uri) {\n\t\t\tvar m = uri.match(/^(([A-Za-z][0-9A-Za-z+.-]*)(:))?((\\/\\/)([^\\/?#]*))?([^?#]*)((\\?)([^#]*))?((#)(.*))?/);\n\t\t\tthis.scheme = m[3] ? m[2] : null;\n\t\t\tthis.authority = m[5] ? m[6] : null;\n\t\t\tthis.path = m[7];\n\t\t\tthis.query = m[9] ? m[10] : null;\n\t\t\tthis.fragment = m[12] ? m[13] : null;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.toString = function() {\n\t\t\tvar result = '';\n\t\t\tif(this.scheme !== null) { result = result + this.scheme + ':'; }\n\t\t\tif(this.authority !== null) { result = result + '//' + this.authority; }\n\t\t\tif(this.path !== null) { result = result + this.path; }\n\t\t\tif(this.query !== null) { result = result + '?' + this.query; }\n\t\t\tif(this.fragment !== null) { result = result + '#' + this.fragment; }\n\t\t\treturn result;\n\t\t};\n\n\t\tthis.toAbsolute = function(base) {\n\t\t\tvar base = new jscolor.URI(base);\n\t\t\tvar r = this;\n\t\t\tvar t = new jscolor.URI;\n\n\t\t\tif(base.scheme === null) { return false; }\n\n\t\t\tif(r.scheme !== null && r.scheme.toLowerCase() === base.scheme.toLowerCase()) {\n\t\t\t\tr.scheme = null;\n\t\t\t}\n\n\t\t\tif(r.scheme !== null) {\n\t\t\t\tt.scheme = r.scheme;\n\t\t\t\tt.authority = r.authority;\n\t\t\t\tt.path = removeDotSegments(r.path);\n\t\t\t\tt.query = r.query;\n\t\t\t} else {\n\t\t\t\tif(r.authority !== null) {\n\t\t\t\t\tt.authority = r.authority;\n\t\t\t\t\tt.path = removeDotSegments(r.path);\n\t\t\t\t\tt.query = r.query;\n\t\t\t\t} else {\n\t\t\t\t\tif(r.path === '') {\n\t\t\t\t\t\tt.path = base.path;\n\t\t\t\t\t\tif(r.query !== null) {\n\t\t\t\t\t\t\tt.query = r.query;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tt.query = base.query;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(r.path.substr(0,1) === '/') {\n\t\t\t\t\t\t\tt.path = removeDotSegments(r.path);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif(base.authority !== null && base.path === '') {\n\t\t\t\t\t\t\t\tt.path = '/'+r.path;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tt.path = base.path.replace(/[^\\/]+$/,'')+r.path;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tt.path = removeDotSegments(t.path);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tt.query = r.query;\n\t\t\t\t\t}\n\t\t\t\t\tt.authority = base.authority;\n\t\t\t\t}\n\t\t\t\tt.scheme = base.scheme;\n\t\t\t}\n\t\t\tt.fragment = r.fragment;\n\n\t\t\treturn t;\n\t\t};\n\n\t\tfunction removeDotSegments(path) {\n\t\t\tvar out = '';\n\t\t\twhile(path) {\n\t\t\t\tif(path.substr(0,3)==='../' || path.substr(0,2)==='./') {\n\t\t\t\t\tpath = path.replace(/^\\.+/,'').substr(1);\n\t\t\t\t} else if(path.substr(0,3)==='/./' || path==='/.') {\n\t\t\t\t\tpath = '/'+path.substr(3);\n\t\t\t\t} else if(path.substr(0,4)==='/../' || path==='/..') {\n\t\t\t\t\tpath = '/'+path.substr(4);\n\t\t\t\t\tout = out.replace(/\\/?[^\\/]*$/, '');\n\t\t\t\t} else if(path==='.' || path==='..') {\n\t\t\t\t\tpath = '';\n\t\t\t\t} else {\n\t\t\t\t\tvar rm = path.match(/^\\/?[^\\/]*/)[0];\n\t\t\t\t\tpath = path.substr(rm.length);\n\t\t\t\t\tout = out + rm;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\tif(uri) {\n\t\t\tthis.parse(uri);\n\t\t}\n\n\t},\n\n\n\t//\n\t// Usage example:\n\t// var myColor = new jscolor.color(myInputElement)\n\t//\n\n\tcolor : function(target, prop) {\n\n\n\t\tthis.required = true; // refuse empty values?\n\t\tthis.adjust = true; // adjust value to uniform notation?\n\t\tthis.hash = false; // prefix color with # symbol?\n\t\tthis.caps = true; // uppercase?\n\t\tthis.slider = true; // show the value/saturation slider?\n\t\tthis.valueElement = target; // value holder\n\t\tthis.styleElement = target; // where to reflect current color\n\t\tthis.onImmediateChange = null; // onchange callback (can be either string or function)\n\t\tthis.hsv = [0, 0, 1]; // read-only  0-6, 0-1, 0-1\n\t\tthis.rgb = [1, 1, 1]; // read-only  0-1, 0-1, 0-1\n\t\tthis.minH = 0; // read-only  0-6\n\t\tthis.maxH = 6; // read-only  0-6\n\t\tthis.minS = 0; // read-only  0-1\n\t\tthis.maxS = 1; // read-only  0-1\n\t\tthis.minV = 0; // read-only  0-1\n\t\tthis.maxV = 1; // read-only  0-1\n\n\t\tthis.pickerOnfocus = true; // display picker on focus?\n\t\tthis.pickerMode = 'HSV'; // HSV | HVS\n\t\tthis.pickerPosition = 'bottom'; // left | right | top | bottom\n\t\tthis.pickerSmartPosition = true; // automatically adjust picker position when necessary\n\t\tthis.pickerButtonHeight = 20; // px\n\t\tthis.pickerClosable = false;\n\t\tthis.pickerCloseText = 'Close';\n\t\tthis.pickerButtonColor = 'ButtonText'; // px\n\t\tthis.pickerFace = 10; // px\n\t\tthis.pickerFaceColor = 'ThreeDFace'; // CSS color\n\t\tthis.pickerBorder = 1; // px\n\t\tthis.pickerBorderColor = 'ThreeDHighlight ThreeDShadow ThreeDShadow ThreeDHighlight'; // CSS color\n\t\tthis.pickerInset = 1; // px\n\t\tthis.pickerInsetColor = 'ThreeDShadow ThreeDHighlight ThreeDHighlight ThreeDShadow'; // CSS color\n\t\tthis.pickerZIndex = 10000;\n\n\n\t\tfor(var p in prop) {\n\t\t\tif(prop.hasOwnProperty(p)) {\n\t\t\t\tthis[p] = prop[p];\n\t\t\t}\n\t\t}\n\n\n\t\tthis.hidePicker = function() {\n\t\t\tif(isPickerOwner()) {\n\t\t\t\tremovePicker();\n\t\t\t}\n\t\t};\n\n\n\t\tthis.showPicker = function() {\n\t\t\tif(!isPickerOwner()) {\n\t\t\t\tvar tp = jscolor.getElementPos(target); // target pos\n\t\t\t\tvar ts = jscolor.getElementSize(target); // target size\n\t\t\t\tvar vp = jscolor.getViewPos(); // view pos\n\t\t\t\tvar vs = jscolor.getViewSize(); // view size\n\t\t\t\tvar ps = getPickerDims(this); // picker size\n\t\t\t\tvar a, b, c;\n\t\t\t\tswitch(this.pickerPosition.toLowerCase()) {\n\t\t\t\t\tcase 'left': a=1; b=0; c=-1; break;\n\t\t\t\t\tcase 'right':a=1; b=0; c=1; break;\n\t\t\t\t\tcase 'top':  a=0; b=1; c=-1; break;\n\t\t\t\t\tdefault:     a=0; b=1; c=1; break;\n\t\t\t\t}\n\t\t\t\tvar l = (ts[b]+ps[b])/2;\n\n\t\t\t\t// picker pos\n\t\t\t\tif (!this.pickerSmartPosition) {\n\t\t\t\t\tvar pp = [\n\t\t\t\t\t\ttp[a],\n\t\t\t\t\t\ttp[b]+ts[b]-l+l*c\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\tvar pp = [\n\t\t\t\t\t\t-vp[a]+tp[a]+ps[a] > vs[a] ?\n\t\t\t\t\t\t\t(-vp[a]+tp[a]+ts[a]/2 > vs[a]/2 && tp[a]+ts[a]-ps[a] >= 0 ? tp[a]+ts[a]-ps[a] : tp[a]) :\n\t\t\t\t\t\t\ttp[a],\n\t\t\t\t\t\t-vp[b]+tp[b]+ts[b]+ps[b]-l+l*c > vs[b] ?\n\t\t\t\t\t\t\t(-vp[b]+tp[b]+ts[b]/2 > vs[b]/2 && tp[b]+ts[b]-l-l*c >= 0 ? tp[b]+ts[b]-l-l*c : tp[b]+ts[b]-l+l*c) :\n\t\t\t\t\t\t\t(tp[b]+ts[b]-l+l*c >= 0 ? tp[b]+ts[b]-l+l*c : tp[b]+ts[b]-l-l*c)\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\tdrawPicker(pp[a], pp[b]);\n\t\t\t}\n\t\t};\n\n\n\t\tthis.importColor = function() {\n\t\t\tif(!valueElement) {\n\t\t\t\tthis.exportColor();\n\t\t\t} else {\n\t\t\t\tif(!this.adjust) {\n\t\t\t\t\tif(!this.fromString(valueElement.value, leaveValue)) {\n\t\t\t\t\t\tstyleElement.style.backgroundImage = styleElement.jscStyle.backgroundImage;\n\t\t\t\t\t\tstyleElement.style.backgroundColor = styleElement.jscStyle.backgroundColor;\n\t\t\t\t\t\tstyleElement.style.color = styleElement.jscStyle.color;\n\t\t\t\t\t\tthis.exportColor(leaveValue | leaveStyle);\n\t\t\t\t\t}\n\t\t\t\t} else if(!this.required && /^\\s*$/.test(valueElement.value)) {\n\t\t\t\t\tvalueElement.value = '';\n\t\t\t\t\tstyleElement.style.backgroundImage = styleElement.jscStyle.backgroundImage;\n\t\t\t\t\tstyleElement.style.backgroundColor = styleElement.jscStyle.backgroundColor;\n\t\t\t\t\tstyleElement.style.color = styleElement.jscStyle.color;\n\t\t\t\t\tthis.exportColor(leaveValue | leaveStyle);\n\n\t\t\t\t} else if(this.fromString(valueElement.value)) {\n\t\t\t\t\t// OK\n\t\t\t\t} else {\n\t\t\t\t\tthis.exportColor();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n\t\tthis.exportColor = function(flags) {\n\t\t\tif(!(flags & leaveValue) && valueElement) {\n\t\t\t\tvar value = this.toString();\n\t\t\t\tif(this.caps) { value = value.toUpperCase(); }\n\t\t\t\tif(this.hash) { value = '#'+value; }\n\t\t\t\tvalueElement.value = value;\n\t\t\t}\n\t\t\tif(!(flags & leaveStyle) && styleElement) {\n\t\t\t\tstyleElement.style.backgroundImage = \"none\";\n\t\t\t\tstyleElement.style.backgroundColor =\n\t\t\t\t\t'#'+this.toString();\n\t\t\t\tstyleElement.style.color =\n\t\t\t\t\t0.213 * this.rgb[0] +\n\t\t\t\t\t0.715 * this.rgb[1] +\n\t\t\t\t\t0.072 * this.rgb[2]\n\t\t\t\t\t< 0.5 ? '#FFF' : '#000';\n\t\t\t}\n\t\t\tif(!(flags & leavePad) && isPickerOwner()) {\n\t\t\t\tredrawPad();\n\t\t\t}\n\t\t\tif(!(flags & leaveSld) && isPickerOwner()) {\n\t\t\t\tredrawSld();\n\t\t\t}\n\t\t};\n\n\n\t\tthis.fromHSV = function(h, s, v, flags) { // null = don't change\n\t\t\tif(h !== null) { h = Math.max(0.0, this.minH, Math.min(6.0, this.maxH, h)); }\n\t\t\tif(s !== null) { s = Math.max(0.0, this.minS, Math.min(1.0, this.maxS, s)); }\n\t\t\tif(v !== null) { v = Math.max(0.0, this.minV, Math.min(1.0, this.maxV, v)); }\n\n\t\t\tthis.rgb = HSV_RGB(\n\t\t\t\th===null ? this.hsv[0] : (this.hsv[0]=h),\n\t\t\t\ts===null ? this.hsv[1] : (this.hsv[1]=s),\n\t\t\t\tv===null ? this.hsv[2] : (this.hsv[2]=v)\n\t\t\t);\n\n\t\t\tthis.exportColor(flags);\n\t\t};\n\n\n\t\tthis.fromRGB = function(r, g, b, flags) { // null = don't change\n\t\t\tif(r !== null) { r = Math.max(0.0, Math.min(1.0, r)); }\n\t\t\tif(g !== null) { g = Math.max(0.0, Math.min(1.0, g)); }\n\t\t\tif(b !== null) { b = Math.max(0.0, Math.min(1.0, b)); }\n\n\t\t\tvar hsv = RGB_HSV(\n\t\t\t\tr===null ? this.rgb[0] : r,\n\t\t\t\tg===null ? this.rgb[1] : g,\n\t\t\t\tb===null ? this.rgb[2] : b\n\t\t\t);\n\t\t\tif(hsv[0] !== null) {\n\t\t\t\tthis.hsv[0] = Math.max(0.0, this.minH, Math.min(6.0, this.maxH, hsv[0]));\n\t\t\t}\n\t\t\tif(hsv[2] !== 0) {\n\t\t\t\tthis.hsv[1] = hsv[1]===null ? null : Math.max(0.0, this.minS, Math.min(1.0, this.maxS, hsv[1]));\n\t\t\t}\n\t\t\tthis.hsv[2] = hsv[2]===null ? null : Math.max(0.0, this.minV, Math.min(1.0, this.maxV, hsv[2]));\n\n\t\t\t// update RGB according to final HSV, as some values might be trimmed\n\t\t\tvar rgb = HSV_RGB(this.hsv[0], this.hsv[1], this.hsv[2]);\n\t\t\tthis.rgb[0] = rgb[0];\n\t\t\tthis.rgb[1] = rgb[1];\n\t\t\tthis.rgb[2] = rgb[2];\n\n\t\t\tthis.exportColor(flags);\n\t\t};\n\n\n\t\tthis.fromString = function(hex, flags) {\n\t\t\tvar m = hex.match(/^\\W*([0-9A-F]{3}([0-9A-F]{3})?)\\W*$/i);\n\t\t\tif(!m) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tif(m[1].length === 6) { // 6-char notation\n\t\t\t\t\tthis.fromRGB(\n\t\t\t\t\t\tparseInt(m[1].substr(0,2),16) / 255,\n\t\t\t\t\t\tparseInt(m[1].substr(2,2),16) / 255,\n\t\t\t\t\t\tparseInt(m[1].substr(4,2),16) / 255,\n\t\t\t\t\t\tflags\n\t\t\t\t\t);\n\t\t\t\t} else { // 3-char notation\n\t\t\t\t\tthis.fromRGB(\n\t\t\t\t\t\tparseInt(m[1].charAt(0)+m[1].charAt(0),16) / 255,\n\t\t\t\t\t\tparseInt(m[1].charAt(1)+m[1].charAt(1),16) / 255,\n\t\t\t\t\t\tparseInt(m[1].charAt(2)+m[1].charAt(2),16) / 255,\n\t\t\t\t\t\tflags\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\n\t\tthis.toString = function() {\n\t\t\treturn (\n\t\t\t\t(0x100 | Math.round(255*this.rgb[0])).toString(16).substr(1) +\n\t\t\t\t(0x100 | Math.round(255*this.rgb[1])).toString(16).substr(1) +\n\t\t\t\t(0x100 | Math.round(255*this.rgb[2])).toString(16).substr(1)\n\t\t\t);\n\t\t};\n\n\n\t\tfunction RGB_HSV(r, g, b) {\n\t\t\tvar n = Math.min(Math.min(r,g),b);\n\t\t\tvar v = Math.max(Math.max(r,g),b);\n\t\t\tvar m = v - n;\n\t\t\tif(m === 0) { return [ null, 0, v ]; }\n\t\t\tvar h = r===n ? 3+(b-g)/m : (g===n ? 5+(r-b)/m : 1+(g-r)/m);\n\t\t\treturn [ h===6?0:h, m/v, v ];\n\t\t}\n\n\n\t\tfunction HSV_RGB(h, s, v) {\n\t\t\tif(h === null) { return [ v, v, v ]; }\n\t\t\tvar i = Math.floor(h);\n\t\t\tvar f = i%2 ? h-i : 1-(h-i);\n\t\t\tvar m = v * (1 - s);\n\t\t\tvar n = v * (1 - s*f);\n\t\t\tswitch(i) {\n\t\t\t\tcase 6:\n\t\t\t\tcase 0: return [v,n,m];\n\t\t\t\tcase 1: return [n,v,m];\n\t\t\t\tcase 2: return [m,v,n];\n\t\t\t\tcase 3: return [m,n,v];\n\t\t\t\tcase 4: return [n,m,v];\n\t\t\t\tcase 5: return [v,m,n];\n\t\t\t}\n\t\t}\n\n\n\t\tfunction removePicker() {\n\t\t\tdelete jscolor.picker.owner;\n\t\t\tdocument.getElementsByTagName('body')[0].removeChild(jscolor.picker.boxB);\n\t\t}\n\n\n\t\tfunction drawPicker(x, y) {\n\t\t\tif(!jscolor.picker) {\n\t\t\t\tjscolor.picker = {\n\t\t\t\t\tbox : document.createElement('div'),\n\t\t\t\t\tboxB : document.createElement('div'),\n\t\t\t\t\tpad : document.createElement('div'),\n\t\t\t\t\tpadB : document.createElement('div'),\n\t\t\t\t\tpadM : document.createElement('div'),\n\t\t\t\t\tsld : document.createElement('div'),\n\t\t\t\t\tsldB : document.createElement('div'),\n\t\t\t\t\tsldM : document.createElement('div'),\n\t\t\t\t\tbtn : document.createElement('div'),\n\t\t\t\t\tbtnS : document.createElement('span'),\n\t\t\t\t\tbtnT : document.createTextNode(THIS.pickerCloseText)\n\t\t\t\t};\n\t\t\t\tfor(var i=0,segSize=4; i<jscolor.images.sld[1]; i+=segSize) {\n\t\t\t\t\tvar seg = document.createElement('div');\n\t\t\t\t\tseg.style.height = segSize+'px';\n\t\t\t\t\tseg.style.fontSize = '1px';\n\t\t\t\t\tseg.style.lineHeight = '0';\n\t\t\t\t\tjscolor.picker.sld.appendChild(seg);\n\t\t\t\t}\n\t\t\t\tjscolor.picker.sldB.appendChild(jscolor.picker.sld);\n\t\t\t\tjscolor.picker.box.appendChild(jscolor.picker.sldB);\n\t\t\t\tjscolor.picker.box.appendChild(jscolor.picker.sldM);\n\t\t\t\tjscolor.picker.padB.appendChild(jscolor.picker.pad);\n\t\t\t\tjscolor.picker.box.appendChild(jscolor.picker.padB);\n\t\t\t\tjscolor.picker.box.appendChild(jscolor.picker.padM);\n\t\t\t\tjscolor.picker.btnS.appendChild(jscolor.picker.btnT);\n\t\t\t\tjscolor.picker.btn.appendChild(jscolor.picker.btnS);\n\t\t\t\tjscolor.picker.box.appendChild(jscolor.picker.btn);\n\t\t\t\tjscolor.picker.boxB.appendChild(jscolor.picker.box);\n\t\t\t}\n\n\t\t\tvar p = jscolor.picker;\n\n\t\t\t// controls interaction\n\t\t\tp.box.onmouseup =\n\t\t\tp.box.onmouseout = function() { target.focus(); };\n\t\t\tp.box.onmousedown = function() { abortBlur=true; };\n\t\t\tp.box.onmousemove = function(e) {\n\t\t\t\tif (holdPad || holdSld) {\n\t\t\t\t\tholdPad && setPad(e);\n\t\t\t\t\tholdSld && setSld(e);\n\t\t\t\t\tif (document.selection) {\n\t\t\t\t\t\tdocument.selection.empty();\n\t\t\t\t\t} else if (window.getSelection) {\n\t\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t\t}\n\t\t\t\t\tdispatchImmediateChange();\n\t\t\t\t}\n\t\t\t};\n\t\t\tif('ontouchstart' in window) { // if touch device\n\t\t\t\tvar handle_touchmove = function(e) {\n\t\t\t\t\tvar event={\n\t\t\t\t\t\t'offsetX': e.touches[0].pageX-touchOffset.X,\n\t\t\t\t\t\t'offsetY': e.touches[0].pageY-touchOffset.Y\n\t\t\t\t\t};\n\t\t\t\t\tif (holdPad || holdSld) {\n\t\t\t\t\t\tholdPad && setPad(event);\n\t\t\t\t\t\tholdSld && setSld(event);\n\t\t\t\t\t\tdispatchImmediateChange();\n\t\t\t\t\t}\n\t\t\t\t\te.stopPropagation(); // prevent move \"view\" on broswer\n\t\t\t\t\te.preventDefault(); // prevent Default - Android Fix (else android generated only 1-2 touchmove events)\n\t\t\t\t};\n\t\t\t\tp.box.removeEventListener('touchmove', handle_touchmove, false)\n\t\t\t\tp.box.addEventListener('touchmove', handle_touchmove, false)\n\t\t\t}\n\t\t\tp.padM.onmouseup =\n\t\t\tp.padM.onmouseout = function() { if(holdPad) { holdPad=false; jscolor.fireEvent(valueElement,'change'); } };\n\t\t\tp.padM.onmousedown = function(e) {\n\t\t\t\t// if the slider is at the bottom, move it up\n\t\t\t\tswitch(modeID) {\n\t\t\t\t\tcase 0: if (THIS.hsv[2] === 0) { THIS.fromHSV(null, null, 1.0); }; break;\n\t\t\t\t\tcase 1: if (THIS.hsv[1] === 0) { THIS.fromHSV(null, 1.0, null); }; break;\n\t\t\t\t}\n\t\t\t\tholdSld=false;\n\t\t\t\tholdPad=true;\n\t\t\t\tsetPad(e);\n\t\t\t\tdispatchImmediateChange();\n\t\t\t};\n\t\t\tif('ontouchstart' in window) {\n\t\t\t\tp.padM.addEventListener('touchstart', function(e) {\n\t\t\t\t\ttouchOffset={\n\t\t\t\t\t\t'X': e.target.offsetParent.offsetLeft,\n\t\t\t\t\t\t'Y': e.target.offsetParent.offsetTop\n\t\t\t\t\t};\n\t\t\t\t\tthis.onmousedown({\n\t\t\t\t\t\t'offsetX':e.touches[0].pageX-touchOffset.X,\n\t\t\t\t\t\t'offsetY':e.touches[0].pageY-touchOffset.Y\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\tp.sldM.onmouseup =\n\t\t\tp.sldM.onmouseout = function() { if(holdSld) { holdSld=false; jscolor.fireEvent(valueElement,'change'); } };\n\t\t\tp.sldM.onmousedown = function(e) {\n\t\t\t\tholdPad=false;\n\t\t\t\tholdSld=true;\n\t\t\t\tsetSld(e);\n\t\t\t\tdispatchImmediateChange();\n\t\t\t};\n\t\t\tif('ontouchstart' in window) {\n\t\t\t\tp.sldM.addEventListener('touchstart', function(e) {\n\t\t\t\t\ttouchOffset={\n\t\t\t\t\t\t'X': e.target.offsetParent.offsetLeft,\n\t\t\t\t\t\t'Y': e.target.offsetParent.offsetTop\n\t\t\t\t\t};\n\t\t\t\t\tthis.onmousedown({\n\t\t\t\t\t\t'offsetX':e.touches[0].pageX-touchOffset.X,\n\t\t\t\t\t\t'offsetY':e.touches[0].pageY-touchOffset.Y\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// picker\n\t\t\tvar dims = getPickerDims(THIS);\n\t\t\tp.box.style.width = dims[0] + 'px';\n\t\t\tp.box.style.height = dims[1] + 'px';\n\n\t\t\t// picker border\n\t\t\tp.boxB.style.position = 'absolute';\n\t\t\tp.boxB.style.clear = 'both';\n\t\t\tp.boxB.style.left = x+'px';\n\t\t\tp.boxB.style.top = y+'px';\n\t\t\tp.boxB.style.zIndex = THIS.pickerZIndex;\n\t\t\tp.boxB.style.border = THIS.pickerBorder+'px solid';\n\t\t\tp.boxB.style.borderColor = THIS.pickerBorderColor;\n\t\t\tp.boxB.style.background = THIS.pickerFaceColor;\n\n\t\t\t// pad image\n\t\t\tp.pad.style.width = jscolor.images.pad[0]+'px';\n\t\t\tp.pad.style.height = jscolor.images.pad[1]+'px';\n\n\t\t\t// pad border\n\t\t\tp.padB.style.position = 'absolute';\n\t\t\tp.padB.style.left = THIS.pickerFace+'px';\n\t\t\tp.padB.style.top = THIS.pickerFace+'px';\n\t\t\tp.padB.style.border = THIS.pickerInset+'px solid';\n\t\t\tp.padB.style.borderColor = THIS.pickerInsetColor;\n\n\t\t\t// pad mouse area\n\t\t\tp.padM.style.position = 'absolute';\n\t\t\tp.padM.style.left = '0';\n\t\t\tp.padM.style.top = '0';\n\t\t\tp.padM.style.width = THIS.pickerFace + 2*THIS.pickerInset + jscolor.images.pad[0] + jscolor.images.arrow[0] + 'px';\n\t\t\tp.padM.style.height = p.box.style.height;\n\t\t\tp.padM.style.cursor = 'crosshair';\n\n\t\t\t// slider image\n\t\t\tp.sld.style.overflow = 'hidden';\n\t\t\tp.sld.style.width = jscolor.images.sld[0]+'px';\n\t\t\tp.sld.style.height = jscolor.images.sld[1]+'px';\n\n\t\t\t// slider border\n\t\t\tp.sldB.style.display = THIS.slider ? 'block' : 'none';\n\t\t\tp.sldB.style.position = 'absolute';\n\t\t\tp.sldB.style.right = THIS.pickerFace+'px';\n\t\t\tp.sldB.style.top = THIS.pickerFace+'px';\n\t\t\tp.sldB.style.border = THIS.pickerInset+'px solid';\n\t\t\tp.sldB.style.borderColor = THIS.pickerInsetColor;\n\n\t\t\t// slider mouse area\n\t\t\tp.sldM.style.display = THIS.slider ? 'block' : 'none';\n\t\t\tp.sldM.style.position = 'absolute';\n\t\t\tp.sldM.style.right = '0';\n\t\t\tp.sldM.style.top = '0';\n\t\t\tp.sldM.style.width = jscolor.images.sld[0] + jscolor.images.arrow[0] + THIS.pickerFace + 2*THIS.pickerInset + 'px';\n\t\t\tp.sldM.style.height = p.box.style.height;\n\t\t\ttry {\n\t\t\t\tp.sldM.style.cursor = 'pointer';\n\t\t\t} catch(eOldIE) {\n\t\t\t\tp.sldM.style.cursor = 'hand';\n\t\t\t}\n\n\t\t\t// \"close\" button\n\t\t\tfunction setBtnBorder() {\n\t\t\t\tvar insetColors = THIS.pickerInsetColor.split(/\\s+/);\n\t\t\t\tvar pickerOutsetColor = insetColors.length < 2 ? insetColors[0] : insetColors[1] + ' ' + insetColors[0] + ' ' + insetColors[0] + ' ' + insetColors[1];\n\t\t\t\tp.btn.style.borderColor = pickerOutsetColor;\n\t\t\t}\n\t\t\tp.btn.style.display = THIS.pickerClosable ? 'block' : 'none';\n\t\t\tp.btn.style.position = 'absolute';\n\t\t\tp.btn.style.left = THIS.pickerFace + 'px';\n\t\t\tp.btn.style.bottom = THIS.pickerFace + 'px';\n\t\t\tp.btn.style.padding = '0 15px';\n\t\t\tp.btn.style.height = '18px';\n\t\t\tp.btn.style.border = THIS.pickerInset + 'px solid';\n\t\t\tsetBtnBorder();\n\t\t\tp.btn.style.color = THIS.pickerButtonColor;\n\t\t\tp.btn.style.font = '12px sans-serif';\n\t\t\tp.btn.style.textAlign = 'center';\n\t\t\ttry {\n\t\t\t\tp.btn.style.cursor = 'pointer';\n\t\t\t} catch(eOldIE) {\n\t\t\t\tp.btn.style.cursor = 'hand';\n\t\t\t}\n\t\t\tp.btn.onmousedown = function () {\n\t\t\t\tTHIS.hidePicker();\n\t\t\t};\n\t\t\tp.btnS.style.lineHeight = p.btn.style.height;\n\n\t\t\t// load images in optimal order\n\t\t\tswitch(modeID) {\n\t\t\t\tcase 0: var padImg = 'hs.png'; break;\n\t\t\t\tcase 1: var padImg = 'hv.png'; break;\n\t\t\t}\n\t\t\tp.padM.style.backgroundImage = \"url('\"+jscolor.getDir()+\"cross.gif')\";\n\t\t\tp.padM.style.backgroundRepeat = \"no-repeat\";\n\t\t\tp.sldM.style.backgroundImage = \"url('\"+jscolor.getDir()+\"arrow.gif')\";\n\t\t\tp.sldM.style.backgroundRepeat = \"no-repeat\";\n\t\t\tp.pad.style.backgroundImage = \"url('\"+jscolor.getDir()+padImg+\"')\";\n\t\t\tp.pad.style.backgroundRepeat = \"no-repeat\";\n\t\t\tp.pad.style.backgroundPosition = \"0 0\";\n\n\t\t\t// place pointers\n\t\t\tredrawPad();\n\t\t\tredrawSld();\n\n\t\t\tjscolor.picker.owner = THIS;\n\t\t\tdocument.getElementsByTagName('body')[0].appendChild(p.boxB);\n\t\t}\n\n\n\t\tfunction getPickerDims(o) {\n\t\t\tvar dims = [\n\t\t\t\t2*o.pickerInset + 2*o.pickerFace + jscolor.images.pad[0] +\n\t\t\t\t\t(o.slider ? 2*o.pickerInset + 2*jscolor.images.arrow[0] + jscolor.images.sld[0] : 0),\n\t\t\t\to.pickerClosable ?\n\t\t\t\t\t4*o.pickerInset + 3*o.pickerFace + jscolor.images.pad[1] + o.pickerButtonHeight :\n\t\t\t\t\t2*o.pickerInset + 2*o.pickerFace + jscolor.images.pad[1]\n\t\t\t];\n\t\t\treturn dims;\n\t\t}\n\n\n\t\tfunction redrawPad() {\n\t\t\t// redraw the pad pointer\n\t\t\tswitch(modeID) {\n\t\t\t\tcase 0: var yComponent = 1; break;\n\t\t\t\tcase 1: var yComponent = 2; break;\n\t\t\t}\n\t\t\tvar x = Math.round((THIS.hsv[0]/6) * (jscolor.images.pad[0]-1));\n\t\t\tvar y = Math.round((1-THIS.hsv[yComponent]) * (jscolor.images.pad[1]-1));\n\t\t\tjscolor.picker.padM.style.backgroundPosition =\n\t\t\t\t(THIS.pickerFace+THIS.pickerInset+x - Math.floor(jscolor.images.cross[0]/2)) + 'px ' +\n\t\t\t\t(THIS.pickerFace+THIS.pickerInset+y - Math.floor(jscolor.images.cross[1]/2)) + 'px';\n\n\t\t\t// redraw the slider image\n\t\t\tvar seg = jscolor.picker.sld.childNodes;\n\n\t\t\tswitch(modeID) {\n\t\t\t\tcase 0:\n\t\t\t\t\tvar rgb = HSV_RGB(THIS.hsv[0], THIS.hsv[1], 1);\n\t\t\t\t\tfor(var i=0; i<seg.length; i+=1) {\n\t\t\t\t\t\tseg[i].style.backgroundColor = 'rgb('+\n\t\t\t\t\t\t\t(rgb[0]*(1-i/seg.length)*100)+'%,'+\n\t\t\t\t\t\t\t(rgb[1]*(1-i/seg.length)*100)+'%,'+\n\t\t\t\t\t\t\t(rgb[2]*(1-i/seg.length)*100)+'%)';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tvar rgb, s, c = [ THIS.hsv[2], 0, 0 ];\n\t\t\t\t\tvar i = Math.floor(THIS.hsv[0]);\n\t\t\t\t\tvar f = i%2 ? THIS.hsv[0]-i : 1-(THIS.hsv[0]-i);\n\t\t\t\t\tswitch(i) {\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\tcase 0: rgb=[0,1,2]; break;\n\t\t\t\t\t\tcase 1: rgb=[1,0,2]; break;\n\t\t\t\t\t\tcase 2: rgb=[2,0,1]; break;\n\t\t\t\t\t\tcase 3: rgb=[2,1,0]; break;\n\t\t\t\t\t\tcase 4: rgb=[1,2,0]; break;\n\t\t\t\t\t\tcase 5: rgb=[0,2,1]; break;\n\t\t\t\t\t}\n\t\t\t\t\tfor(var i=0; i<seg.length; i+=1) {\n\t\t\t\t\t\ts = 1 - 1/(seg.length-1)*i;\n\t\t\t\t\t\tc[1] = c[0] * (1 - s*f);\n\t\t\t\t\t\tc[2] = c[0] * (1 - s);\n\t\t\t\t\t\tseg[i].style.backgroundColor = 'rgb('+\n\t\t\t\t\t\t\t(c[rgb[0]]*100)+'%,'+\n\t\t\t\t\t\t\t(c[rgb[1]]*100)+'%,'+\n\t\t\t\t\t\t\t(c[rgb[2]]*100)+'%)';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\n\t\tfunction redrawSld() {\n\t\t\t// redraw the slider pointer\n\t\t\tswitch(modeID) {\n\t\t\t\tcase 0: var yComponent = 2; break;\n\t\t\t\tcase 1: var yComponent = 1; break;\n\t\t\t}\n\t\t\tvar y = Math.round((1-THIS.hsv[yComponent]) * (jscolor.images.sld[1]-1));\n\t\t\tjscolor.picker.sldM.style.backgroundPosition =\n\t\t\t\t'0 ' + (THIS.pickerFace+THIS.pickerInset+y - Math.floor(jscolor.images.arrow[1]/2)) + 'px';\n\t\t}\n\n\n\t\tfunction isPickerOwner() {\n\t\t\treturn jscolor.picker && jscolor.picker.owner === THIS;\n\t\t}\n\n\n\t\tfunction blurTarget() {\n\t\t\tif(valueElement === target) {\n\t\t\t\tTHIS.importColor();\n\t\t\t}\n\t\t\tif(THIS.pickerOnfocus) {\n\t\t\t\tTHIS.hidePicker();\n\t\t\t}\n\t\t}\n\n\n\t\tfunction blurValue() {\n\t\t\tif(valueElement !== target) {\n\t\t\t\tTHIS.importColor();\n\t\t\t}\n\t\t}\n\n\n\t\tfunction setPad(e) {\n\t\t\tvar mpos = jscolor.getRelMousePos(e);\n\t\t\tvar x = mpos.x - THIS.pickerFace - THIS.pickerInset;\n\t\t\tvar y = mpos.y - THIS.pickerFace - THIS.pickerInset;\n\t\t\tswitch(modeID) {\n\t\t\t\tcase 0: THIS.fromHSV(x*(6/(jscolor.images.pad[0]-1)), 1 - y/(jscolor.images.pad[1]-1), null, leaveSld); break;\n\t\t\t\tcase 1: THIS.fromHSV(x*(6/(jscolor.images.pad[0]-1)), null, 1 - y/(jscolor.images.pad[1]-1), leaveSld); break;\n\t\t\t}\n\t\t}\n\n\n\t\tfunction setSld(e) {\n\t\t\tvar mpos = jscolor.getRelMousePos(e);\n\t\t\tvar y = mpos.y - THIS.pickerFace - THIS.pickerInset;\n\t\t\tswitch(modeID) {\n\t\t\t\tcase 0: THIS.fromHSV(null, null, 1 - y/(jscolor.images.sld[1]-1), leavePad); break;\n\t\t\t\tcase 1: THIS.fromHSV(null, 1 - y/(jscolor.images.sld[1]-1), null, leavePad); break;\n\t\t\t}\n\t\t}\n\n\n\t\tfunction dispatchImmediateChange() {\n\t\t\tif (THIS.onImmediateChange) {\n\t\t\t\tvar callback;\n\t\t\t\tif (typeof THIS.onImmediateChange === 'string') {\n\t\t\t\t\tcallback = new Function (THIS.onImmediateChange);\n\t\t\t\t} else {\n\t\t\t\t\tcallback = THIS.onImmediateChange;\n\t\t\t\t}\n\t\t\t\tcallback.call(THIS);\n\t\t\t}\n\t\t}\n\n\n\t\tvar THIS = this;\n\t\tvar modeID = this.pickerMode.toLowerCase()==='hvs' ? 1 : 0;\n\t\tvar abortBlur = false;\n\t\tvar\n\t\t\tvalueElement = jscolor.fetchElement(this.valueElement),\n\t\t\tstyleElement = jscolor.fetchElement(this.styleElement);\n\t\tvar\n\t\t\tholdPad = false,\n\t\t\tholdSld = false,\n\t\t\ttouchOffset = {};\n\t\tvar\n\t\t\tleaveValue = 1<<0,\n\t\t\tleaveStyle = 1<<1,\n\t\t\tleavePad = 1<<2,\n\t\t\tleaveSld = 1<<3;\n\n\t\t// target\n\t\tjscolor.addEvent(target, 'focus', function() {\n\t\t\tif(THIS.pickerOnfocus) { THIS.showPicker(); }\n\t\t});\n\t\tjscolor.addEvent(target, 'blur', function() {\n\t\t\tif(!abortBlur) {\n\t\t\t\twindow.setTimeout(function(){ abortBlur || blurTarget(); abortBlur=false; }, 0);\n\t\t\t} else {\n\t\t\t\tabortBlur = false;\n\t\t\t}\n\t\t});\n\n\t\t// valueElement\n\t\tif(valueElement) {\n\t\t\tvar updateField = function() {\n\t\t\t\tTHIS.fromString(valueElement.value, leaveValue);\n\t\t\t\tdispatchImmediateChange();\n\t\t\t};\n\t\t\tjscolor.addEvent(valueElement, 'keyup', updateField);\n\t\t\tjscolor.addEvent(valueElement, 'input', updateField);\n\t\t\tjscolor.addEvent(valueElement, 'blur', blurValue);\n\t\t\tvalueElement.setAttribute('autocomplete', 'off');\n\t\t}\n\n\t\t// styleElement\n\t\tif(styleElement) {\n\t\t\tstyleElement.jscStyle = {\n\t\t\t\tbackgroundImage : styleElement.style.backgroundImage,\n\t\t\t\tbackgroundColor : styleElement.style.backgroundColor,\n\t\t\t\tcolor : styleElement.style.color\n\t\t\t};\n\t\t}\n\n\t\t// require images\n\t\tswitch(modeID) {\n\t\t\tcase 0: jscolor.requireImage('hs.png'); break;\n\t\t\tcase 1: jscolor.requireImage('hv.png'); break;\n\t\t}\n\t\tjscolor.requireImage('cross.gif');\n\t\tjscolor.requireImage('arrow.gif');\n\n\t\tthis.importColor();\n\t}\n\n};\n\n\njscolor.install();\n"}
}});
