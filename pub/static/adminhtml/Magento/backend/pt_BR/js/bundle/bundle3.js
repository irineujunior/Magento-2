require.config({"config": {
        "jsbuild":{"knockoutjs/knockout.js":"/*!\r\n * Knockout JavaScript library v3.4.2\r\n * (c) The Knockout.js team - http://knockoutjs.com/\r\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n */\r\n\r\n(function(){\r\nvar DEBUG=true;\r\n(function(undefined){\r\n    // (0, eval)('this') is a robust way of getting a reference to the global object\r\n    // For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\r\n    var window = this || (0, eval)('this'),\r\n        document = window['document'],\r\n        navigator = window['navigator'],\r\n        jQueryInstance = window[\"jQuery\"],\r\n        JSON = window[\"JSON\"];\r\n(function(factory) {\r\n    // Support three module loading scenarios\r\n    if (typeof define === 'function' && define['amd']) {\r\n        // [1] AMD anonymous module\r\n        define(['exports', 'require'], factory);\r\n    } else if (typeof exports === 'object' && typeof module === 'object') {\r\n        // [2] CommonJS/Node.js\r\n        factory(module['exports'] || exports);  // module.exports is for Node.js\r\n    } else {\r\n        // [3] No module loader (plain <script> tag) - put directly in global namespace\r\n        factory(window['ko'] = {});\r\n    }\r\n}(function(koExports, amdRequire){\r\n// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).\r\n// In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.\r\nvar ko = typeof koExports !== 'undefined' ? koExports : {};\r\n// Google Closure Compiler helpers (used only to make the minified file smaller)\r\nko.exportSymbol = function(koPath, object) {\r\n    var tokens = koPath.split(\".\");\r\n\r\n    // In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)\r\n    // At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)\r\n    var target = ko;\r\n\r\n    for (var i = 0; i < tokens.length - 1; i++)\r\n        target = target[tokens[i]];\r\n    target[tokens[tokens.length - 1]] = object;\r\n};\r\nko.exportProperty = function(owner, publicName, object) {\r\n    owner[publicName] = object;\r\n};\r\nko.version = \"3.4.2\";\r\n\r\nko.exportSymbol('version', ko.version);\r\n// For any options that may affect various areas of Knockout and aren't directly associated with data binding.\r\nko.options = {\r\n    'deferUpdates': false,\r\n    'useOnlyNativeEvents': false\r\n};\r\n\r\n//ko.exportSymbol('options', ko.options);   // 'options' isn't minified\r\nko.utils = (function () {\r\n    function objectForEach(obj, action) {\r\n        for (var prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                action(prop, obj[prop]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function extend(target, source) {\r\n        if (source) {\r\n            for(var prop in source) {\r\n                if(source.hasOwnProperty(prop)) {\r\n                    target[prop] = source[prop];\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function setPrototypeOf(obj, proto) {\r\n        obj.__proto__ = proto;\r\n        return obj;\r\n    }\r\n\r\n    var canSetPrototype = ({ __proto__: [] } instanceof Array);\r\n    var canUseSymbols = !DEBUG && typeof Symbol === 'function';\r\n\r\n    // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)\r\n    var knownEvents = {}, knownEventTypesByEventName = {};\r\n    var keyEventTypeName = (navigator && /Firefox\\/2/i.test(navigator.userAgent)) ? 'KeyboardEvent' : 'UIEvents';\r\n    knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];\r\n    knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\r\n    objectForEach(knownEvents, function(eventType, knownEventsForType) {\r\n        if (knownEventsForType.length) {\r\n            for (var i = 0, j = knownEventsForType.length; i < j; i++)\r\n                knownEventTypesByEventName[knownEventsForType[i]] = eventType;\r\n        }\r\n    });\r\n    var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406\r\n\r\n    // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)\r\n    // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.\r\n    // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.\r\n    // If there is a future need to detect specific versions of IE10+, we will amend this.\r\n    var ieVersion = document && (function() {\r\n        var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');\r\n\r\n        // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\r\n        while (\r\n            div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',\r\n            iElems[0]\r\n        ) {}\r\n        return version > 4 ? version : undefined;\r\n    }());\r\n    var isIe6 = ieVersion === 6,\r\n        isIe7 = ieVersion === 7;\r\n\r\n    function isClickOnCheckableElement(element, eventType) {\r\n        if ((ko.utils.tagNameLower(element) !== \"input\") || !element.type) return false;\r\n        if (eventType.toLowerCase() != \"click\") return false;\r\n        var inputType = element.type;\r\n        return (inputType == \"checkbox\") || (inputType == \"radio\");\r\n    }\r\n\r\n    // For details on the pattern for changing node classes\r\n    // see: https://github.com/knockout/knockout/issues/1597\r\n    var cssClassNameRegex = /\\S+/g;\r\n\r\n    function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {\r\n        var addOrRemoveFn;\r\n        if (classNames) {\r\n            if (typeof node.classList === 'object') {\r\n                addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];\r\n                ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n                    addOrRemoveFn.call(node.classList, className);\r\n                });\r\n            } else if (typeof node.className['baseVal'] === 'string') {\r\n                // SVG tag .classNames is an SVGAnimatedString instance\r\n                toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);\r\n            } else {\r\n                // node.className ought to be a string.\r\n                toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {\r\n        // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.\r\n        var currentClassNames = obj[prop].match(cssClassNameRegex) || [];\r\n        ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n            ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);\r\n        });\r\n        obj[prop] = currentClassNames.join(\" \");\r\n    }\r\n\r\n    return {\r\n        fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],\r\n\r\n        arrayForEach: function (array, action) {\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                action(array[i], i);\r\n        },\r\n\r\n        arrayIndexOf: function (array, item) {\r\n            if (typeof Array.prototype.indexOf == \"function\")\r\n                return Array.prototype.indexOf.call(array, item);\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (array[i] === item)\r\n                    return i;\r\n            return -1;\r\n        },\r\n\r\n        arrayFirst: function (array, predicate, predicateOwner) {\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (predicate.call(predicateOwner, array[i], i))\r\n                    return array[i];\r\n            return null;\r\n        },\r\n\r\n        arrayRemoveItem: function (array, itemToRemove) {\r\n            var index = ko.utils.arrayIndexOf(array, itemToRemove);\r\n            if (index > 0) {\r\n                array.splice(index, 1);\r\n            }\r\n            else if (index === 0) {\r\n                array.shift();\r\n            }\r\n        },\r\n\r\n        arrayGetDistinctValues: function (array) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++) {\r\n                if (ko.utils.arrayIndexOf(result, array[i]) < 0)\r\n                    result.push(array[i]);\r\n            }\r\n            return result;\r\n        },\r\n\r\n        arrayMap: function (array, mapping) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                result.push(mapping(array[i], i));\r\n            return result;\r\n        },\r\n\r\n        arrayFilter: function (array, predicate) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (predicate(array[i], i))\r\n                    result.push(array[i]);\r\n            return result;\r\n        },\r\n\r\n        arrayPushAll: function (array, valuesToPush) {\r\n            if (valuesToPush instanceof Array)\r\n                array.push.apply(array, valuesToPush);\r\n            else\r\n                for (var i = 0, j = valuesToPush.length; i < j; i++)\r\n                    array.push(valuesToPush[i]);\r\n            return array;\r\n        },\r\n\r\n        addOrRemoveItem: function(array, value, included) {\r\n            var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);\r\n            if (existingEntryIndex < 0) {\r\n                if (included)\r\n                    array.push(value);\r\n            } else {\r\n                if (!included)\r\n                    array.splice(existingEntryIndex, 1);\r\n            }\r\n        },\r\n\r\n        canSetPrototype: canSetPrototype,\r\n\r\n        extend: extend,\r\n\r\n        setPrototypeOf: setPrototypeOf,\r\n\r\n        setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,\r\n\r\n        objectForEach: objectForEach,\r\n\r\n        objectMap: function(source, mapping) {\r\n            if (!source)\r\n                return source;\r\n            var target = {};\r\n            for (var prop in source) {\r\n                if (source.hasOwnProperty(prop)) {\r\n                    target[prop] = mapping(source[prop], prop, source);\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n\r\n        emptyDomNode: function (domNode) {\r\n            while (domNode.firstChild) {\r\n                ko.removeNode(domNode.firstChild);\r\n            }\r\n        },\r\n\r\n        moveCleanedNodesToContainerElement: function(nodes) {\r\n            // Ensure it's a real array, as we're about to reparent the nodes and\r\n            // we don't want the underlying collection to change while we're doing that.\r\n            var nodesArray = ko.utils.makeArray(nodes);\r\n            var templateDocument = (nodesArray[0] && nodesArray[0].ownerDocument) || document;\r\n\r\n            var container = templateDocument.createElement('div');\r\n            for (var i = 0, j = nodesArray.length; i < j; i++) {\r\n                container.appendChild(ko.cleanNode(nodesArray[i]));\r\n            }\r\n            return container;\r\n        },\r\n\r\n        cloneNodes: function (nodesArray, shouldCleanNodes) {\r\n            for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {\r\n                var clonedNode = nodesArray[i].cloneNode(true);\r\n                newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);\r\n            }\r\n            return newNodesArray;\r\n        },\r\n\r\n        setDomNodeChildren: function (domNode, childNodes) {\r\n            ko.utils.emptyDomNode(domNode);\r\n            if (childNodes) {\r\n                for (var i = 0, j = childNodes.length; i < j; i++)\r\n                    domNode.appendChild(childNodes[i]);\r\n            }\r\n        },\r\n\r\n        replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {\r\n            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;\r\n            if (nodesToReplaceArray.length > 0) {\r\n                var insertionPoint = nodesToReplaceArray[0];\r\n                var parent = insertionPoint.parentNode;\r\n                for (var i = 0, j = newNodesArray.length; i < j; i++)\r\n                    parent.insertBefore(newNodesArray[i], insertionPoint);\r\n                for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {\r\n                    ko.removeNode(nodesToReplaceArray[i]);\r\n                }\r\n            }\r\n        },\r\n\r\n        fixUpContinuousNodeArray: function(continuousNodeArray, parentNode) {\r\n            // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile\r\n            // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that\r\n            // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been\r\n            // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.\r\n            // So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.\r\n            //\r\n            // Rules:\r\n            //   [A] Any leading nodes that have been removed should be ignored\r\n            //       These most likely correspond to memoization nodes that were already removed during binding\r\n            //       See https://github.com/knockout/knockout/pull/440\r\n            //   [B] Any trailing nodes that have been remove should be ignored\r\n            //       This prevents the code here from adding unrelated nodes to the array while processing rule [C]\r\n            //       See https://github.com/knockout/knockout/pull/1903\r\n            //   [C] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,\r\n            //       and include any nodes that have been inserted among the previous collection\r\n\r\n            if (continuousNodeArray.length) {\r\n                // The parent node can be a virtual element; so get the real parent node\r\n                parentNode = (parentNode.nodeType === 8 && parentNode.parentNode) || parentNode;\r\n\r\n                // Rule [A]\r\n                while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode)\r\n                    continuousNodeArray.splice(0, 1);\r\n\r\n                // Rule [B]\r\n                while (continuousNodeArray.length > 1 && continuousNodeArray[continuousNodeArray.length - 1].parentNode !== parentNode)\r\n                    continuousNodeArray.length--;\r\n\r\n                // Rule [C]\r\n                if (continuousNodeArray.length > 1) {\r\n                    var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];\r\n                    // Replace with the actual new continuous node set\r\n                    continuousNodeArray.length = 0;\r\n                    while (current !== last) {\r\n                        continuousNodeArray.push(current);\r\n                        current = current.nextSibling;\r\n                    }\r\n                    continuousNodeArray.push(last);\r\n                }\r\n            }\r\n            return continuousNodeArray;\r\n        },\r\n\r\n        setOptionNodeSelectionState: function (optionNode, isSelected) {\r\n            // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\r\n            if (ieVersion < 7)\r\n                optionNode.setAttribute(\"selected\", isSelected);\r\n            else\r\n                optionNode.selected = isSelected;\r\n        },\r\n\r\n        stringTrim: function (string) {\r\n            return string === null || string === undefined ? '' :\r\n                string.trim ?\r\n                    string.trim() :\r\n                    string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\r\n        },\r\n\r\n        stringStartsWith: function (string, startsWith) {\r\n            string = string || \"\";\r\n            if (startsWith.length > string.length)\r\n                return false;\r\n            return string.substring(0, startsWith.length) === startsWith;\r\n        },\r\n\r\n        domNodeIsContainedBy: function (node, containedByNode) {\r\n            if (node === containedByNode)\r\n                return true;\r\n            if (node.nodeType === 11)\r\n                return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8\r\n            if (containedByNode.contains)\r\n                return containedByNode.contains(node.nodeType === 3 ? node.parentNode : node);\r\n            if (containedByNode.compareDocumentPosition)\r\n                return (containedByNode.compareDocumentPosition(node) & 16) == 16;\r\n            while (node && node != containedByNode) {\r\n                node = node.parentNode;\r\n            }\r\n            return !!node;\r\n        },\r\n\r\n        domNodeIsAttachedToDocument: function (node) {\r\n            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);\r\n        },\r\n\r\n        anyDomNodeIsAttachedToDocument: function(nodes) {\r\n            return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);\r\n        },\r\n\r\n        tagNameLower: function(element) {\r\n            // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.\r\n            // Possible future optimization: If we know it's an element from an XHTML document (not HTML),\r\n            // we don't need to do the .toLowerCase() as it will always be lower case anyway.\r\n            return element && element.tagName && element.tagName.toLowerCase();\r\n        },\r\n\r\n        catchFunctionErrors: function (delegate) {\r\n            return ko['onError'] ? function () {\r\n                try {\r\n                    return delegate.apply(this, arguments);\r\n                } catch (e) {\r\n                    ko['onError'] && ko['onError'](e);\r\n                    throw e;\r\n                }\r\n            } : delegate;\r\n        },\r\n\r\n        setTimeout: function (handler, timeout) {\r\n            return setTimeout(ko.utils.catchFunctionErrors(handler), timeout);\r\n        },\r\n\r\n        deferError: function (error) {\r\n            setTimeout(function () {\r\n                ko['onError'] && ko['onError'](error);\r\n                throw error;\r\n            }, 0);\r\n        },\r\n\r\n        registerEventHandler: function (element, eventType, handler) {\r\n            var wrappedHandler = ko.utils.catchFunctionErrors(handler);\r\n\r\n            var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];\r\n            if (!ko.options['useOnlyNativeEvents'] && !mustUseAttachEvent && jQueryInstance) {\r\n                jQueryInstance(element)['bind'](eventType, wrappedHandler);\r\n            } else if (!mustUseAttachEvent && typeof element.addEventListener == \"function\")\r\n                element.addEventListener(eventType, wrappedHandler, false);\r\n            else if (typeof element.attachEvent != \"undefined\") {\r\n                var attachEventHandler = function (event) { wrappedHandler.call(element, event); },\r\n                    attachEventName = \"on\" + eventType;\r\n                element.attachEvent(attachEventName, attachEventHandler);\r\n\r\n                // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)\r\n                // so to avoid leaks, we have to remove them manually. See bug #856\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                    element.detachEvent(attachEventName, attachEventHandler);\r\n                });\r\n            } else\r\n                throw new Error(\"Browser doesn't support addEventListener or attachEvent\");\r\n        },\r\n\r\n        triggerEvent: function (element, eventType) {\r\n            if (!(element && element.nodeType))\r\n                throw new Error(\"element must be a DOM node when calling triggerEvent\");\r\n\r\n            // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the\r\n            // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)\r\n            // IE doesn't change the checked state when you trigger the click event using \"fireEvent\".\r\n            // In both cases, we'll use the click method instead.\r\n            var useClickWorkaround = isClickOnCheckableElement(element, eventType);\r\n\r\n            if (!ko.options['useOnlyNativeEvents'] && jQueryInstance && !useClickWorkaround) {\r\n                jQueryInstance(element)['trigger'](eventType);\r\n            } else if (typeof document.createEvent == \"function\") {\r\n                if (typeof element.dispatchEvent == \"function\") {\r\n                    var eventCategory = knownEventTypesByEventName[eventType] || \"HTMLEvents\";\r\n                    var event = document.createEvent(eventCategory);\r\n                    event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\r\n                    element.dispatchEvent(event);\r\n                }\r\n                else\r\n                    throw new Error(\"The supplied element doesn't support dispatchEvent\");\r\n            } else if (useClickWorkaround && element.click) {\r\n                element.click();\r\n            } else if (typeof element.fireEvent != \"undefined\") {\r\n                element.fireEvent(\"on\" + eventType);\r\n            } else {\r\n                throw new Error(\"Browser doesn't support triggering events\");\r\n            }\r\n        },\r\n\r\n        unwrapObservable: function (value) {\r\n            return ko.isObservable(value) ? value() : value;\r\n        },\r\n\r\n        peekObservable: function (value) {\r\n            return ko.isObservable(value) ? value.peek() : value;\r\n        },\r\n\r\n        toggleDomNodeCssClass: toggleDomNodeCssClass,\r\n\r\n        setTextContent: function(element, textContent) {\r\n            var value = ko.utils.unwrapObservable(textContent);\r\n            if ((value === null) || (value === undefined))\r\n                value = \"\";\r\n\r\n            // We need there to be exactly one child: a text node.\r\n            // If there are no children, more than one, or if it's not a text node,\r\n            // we'll clear everything and create a single text node.\r\n            var innerTextNode = ko.virtualElements.firstChild(element);\r\n            if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {\r\n                ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);\r\n            } else {\r\n                innerTextNode.data = value;\r\n            }\r\n\r\n            ko.utils.forceRefresh(element);\r\n        },\r\n\r\n        setElementName: function(element, name) {\r\n            element.name = name;\r\n        },\r\n\r\n        forceRefresh: function(node) {\r\n            // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209\r\n            if (ieVersion >= 9) {\r\n                // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container\r\n                var elem = node.nodeType == 1 ? node : node.parentNode;\r\n                if (elem.style)\r\n                    elem.style.zoom = elem.style.zoom;\r\n            }\r\n        },\r\n\r\n        ensureSelectElementIsRenderedCorrectly: function(selectElement) {\r\n            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\r\n            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\r\n            // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)\r\n            if (ieVersion) {\r\n                var originalWidth = selectElement.style.width;\r\n                selectElement.style.width = 0;\r\n                selectElement.style.width = originalWidth;\r\n            }\r\n        },\r\n\r\n        range: function (min, max) {\r\n            min = ko.utils.unwrapObservable(min);\r\n            max = ko.utils.unwrapObservable(max);\r\n            var result = [];\r\n            for (var i = min; i <= max; i++)\r\n                result.push(i);\r\n            return result;\r\n        },\r\n\r\n        makeArray: function(arrayLikeObject) {\r\n            var result = [];\r\n            for (var i = 0, j = arrayLikeObject.length; i < j; i++) {\r\n                result.push(arrayLikeObject[i]);\r\n            };\r\n            return result;\r\n        },\r\n\r\n        createSymbolOrString: function(identifier) {\r\n            return canUseSymbols ? Symbol(identifier) : identifier;\r\n        },\r\n\r\n        isIe6 : isIe6,\r\n        isIe7 : isIe7,\r\n        ieVersion : ieVersion,\r\n\r\n        getFormFields: function(form, fieldName) {\r\n            var fields = ko.utils.makeArray(form.getElementsByTagName(\"input\")).concat(ko.utils.makeArray(form.getElementsByTagName(\"textarea\")));\r\n            var isMatchingField = (typeof fieldName == 'string')\r\n                ? function(field) { return field.name === fieldName }\r\n                : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate\r\n            var matches = [];\r\n            for (var i = fields.length - 1; i >= 0; i--) {\r\n                if (isMatchingField(fields[i]))\r\n                    matches.push(fields[i]);\r\n            };\r\n            return matches;\r\n        },\r\n\r\n        parseJson: function (jsonString) {\r\n            if (typeof jsonString == \"string\") {\r\n                jsonString = ko.utils.stringTrim(jsonString);\r\n                if (jsonString) {\r\n                    if (JSON && JSON.parse) // Use native parsing where available\r\n                        return JSON.parse(jsonString);\r\n                    return (new Function(\"return \" + jsonString))(); // Fallback on less safe parsing for older browsers\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        stringifyJson: function (data, replacer, space) {   // replacer and space are optional\r\n            if (!JSON || !JSON.stringify)\r\n                throw new Error(\"Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\");\r\n            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);\r\n        },\r\n\r\n        postJson: function (urlOrForm, data, options) {\r\n            options = options || {};\r\n            var params = options['params'] || {};\r\n            var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;\r\n            var url = urlOrForm;\r\n\r\n            // If we were given a form, use its 'action' URL and pick out any requested field values\r\n            if((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === \"form\")) {\r\n                var originalForm = urlOrForm;\r\n                url = originalForm.action;\r\n                for (var i = includeFields.length - 1; i >= 0; i--) {\r\n                    var fields = ko.utils.getFormFields(originalForm, includeFields[i]);\r\n                    for (var j = fields.length - 1; j >= 0; j--)\r\n                        params[fields[j].name] = fields[j].value;\r\n                }\r\n            }\r\n\r\n            data = ko.utils.unwrapObservable(data);\r\n            var form = document.createElement(\"form\");\r\n            form.style.display = \"none\";\r\n            form.action = url;\r\n            form.method = \"post\";\r\n            for (var key in data) {\r\n                // Since 'data' this is a model object, we include all properties including those inherited from its prototype\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = key;\r\n                input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));\r\n                form.appendChild(input);\r\n            }\r\n            objectForEach(params, function(key, value) {\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = key;\r\n                input.value = value;\r\n                form.appendChild(input);\r\n            });\r\n            document.body.appendChild(form);\r\n            options['submitter'] ? options['submitter'](form) : form.submit();\r\n            setTimeout(function () { form.parentNode.removeChild(form); }, 0);\r\n        }\r\n    }\r\n}());\r\n\r\nko.exportSymbol('utils', ko.utils);\r\nko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);\r\nko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);\r\nko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);\r\nko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);\r\nko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);\r\nko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);\r\nko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);\r\nko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);\r\nko.exportSymbol('utils.extend', ko.utils.extend);\r\nko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);\r\nko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);\r\nko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);\r\nko.exportSymbol('utils.postJson', ko.utils.postJson);\r\nko.exportSymbol('utils.parseJson', ko.utils.parseJson);\r\nko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);\r\nko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);\r\nko.exportSymbol('utils.range', ko.utils.range);\r\nko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);\r\nko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);\r\nko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);\r\nko.exportSymbol('utils.objectForEach', ko.utils.objectForEach);\r\nko.exportSymbol('utils.addOrRemoveItem', ko.utils.addOrRemoveItem);\r\nko.exportSymbol('utils.setTextContent', ko.utils.setTextContent);\r\nko.exportSymbol('unwrap', ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly\r\n\r\nif (!Function.prototype['bind']) {\r\n    // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)\r\n    // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js\r\n    Function.prototype['bind'] = function (object) {\r\n        var originalFunction = this;\r\n        if (arguments.length === 1) {\r\n            return function () {\r\n                return originalFunction.apply(object, arguments);\r\n            };\r\n        } else {\r\n            var partialArgs = Array.prototype.slice.call(arguments, 1);\r\n            return function () {\r\n                var args = partialArgs.slice(0);\r\n                args.push.apply(args, arguments);\r\n                return originalFunction.apply(object, args);\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nko.utils.domData = new (function () {\r\n    var uniqueId = 0;\r\n    var dataStoreKeyExpandoPropertyName = \"__ko__\" + (new Date).getTime();\r\n    var dataStore = {};\r\n\r\n    function getAll(node, createIfNotFound) {\r\n        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n        var hasExistingDataStore = dataStoreKey && (dataStoreKey !== \"null\") && dataStore[dataStoreKey];\r\n        if (!hasExistingDataStore) {\r\n            if (!createIfNotFound)\r\n                return undefined;\r\n            dataStoreKey = node[dataStoreKeyExpandoPropertyName] = \"ko\" + uniqueId++;\r\n            dataStore[dataStoreKey] = {};\r\n        }\r\n        return dataStore[dataStoreKey];\r\n    }\r\n\r\n    return {\r\n        get: function (node, key) {\r\n            var allDataForNode = getAll(node, false);\r\n            return allDataForNode === undefined ? undefined : allDataForNode[key];\r\n        },\r\n        set: function (node, key, value) {\r\n            if (value === undefined) {\r\n                // Make sure we don't actually create a new domData key if we are actually deleting a value\r\n                if (getAll(node, false) === undefined)\r\n                    return;\r\n            }\r\n            var allDataForNode = getAll(node, true);\r\n            allDataForNode[key] = value;\r\n        },\r\n        clear: function (node) {\r\n            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n            if (dataStoreKey) {\r\n                delete dataStore[dataStoreKey];\r\n                node[dataStoreKeyExpandoPropertyName] = null;\r\n                return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\r\n            }\r\n            return false;\r\n        },\r\n\r\n        nextKey: function () {\r\n            return (uniqueId++) + dataStoreKeyExpandoPropertyName;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('utils.domData', ko.utils.domData);\r\nko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully\r\n\r\nko.utils.domNodeDisposal = new (function () {\r\n    var domDataKey = ko.utils.domData.nextKey();\r\n    var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document\r\n    var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document\r\n\r\n    function getDisposeCallbacksCollection(node, createIfNotFound) {\r\n        var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);\r\n        if ((allDisposeCallbacks === undefined) && createIfNotFound) {\r\n            allDisposeCallbacks = [];\r\n            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);\r\n        }\r\n        return allDisposeCallbacks;\r\n    }\r\n    function destroyCallbacksCollection(node) {\r\n        ko.utils.domData.set(node, domDataKey, undefined);\r\n    }\r\n\r\n    function cleanSingleNode(node) {\r\n        // Run all the dispose callbacks\r\n        var callbacks = getDisposeCallbacksCollection(node, false);\r\n        if (callbacks) {\r\n            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)\r\n            for (var i = 0; i < callbacks.length; i++)\r\n                callbacks[i](node);\r\n        }\r\n\r\n        // Erase the DOM data\r\n        ko.utils.domData.clear(node);\r\n\r\n        // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)\r\n        ko.utils.domNodeDisposal[\"cleanExternalData\"](node);\r\n\r\n        // Clear any immediate-child comment nodes, as these wouldn't have been found by\r\n        // node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren't elements)\r\n        if (cleanableNodeTypesWithDescendants[node.nodeType])\r\n            cleanImmediateCommentTypeChildren(node);\r\n    }\r\n\r\n    function cleanImmediateCommentTypeChildren(nodeWithChildren) {\r\n        var child, nextChild = nodeWithChildren.firstChild;\r\n        while (child = nextChild) {\r\n            nextChild = child.nextSibling;\r\n            if (child.nodeType === 8)\r\n                cleanSingleNode(child);\r\n        }\r\n    }\r\n\r\n    return {\r\n        addDisposeCallback : function(node, callback) {\r\n            if (typeof callback != \"function\")\r\n                throw new Error(\"Callback must be a function\");\r\n            getDisposeCallbacksCollection(node, true).push(callback);\r\n        },\r\n\r\n        removeDisposeCallback : function(node, callback) {\r\n            var callbacksCollection = getDisposeCallbacksCollection(node, false);\r\n            if (callbacksCollection) {\r\n                ko.utils.arrayRemoveItem(callbacksCollection, callback);\r\n                if (callbacksCollection.length == 0)\r\n                    destroyCallbacksCollection(node);\r\n            }\r\n        },\r\n\r\n        cleanNode : function(node) {\r\n            // First clean this node, where applicable\r\n            if (cleanableNodeTypes[node.nodeType]) {\r\n                cleanSingleNode(node);\r\n\r\n                // ... then its descendants, where applicable\r\n                if (cleanableNodeTypesWithDescendants[node.nodeType]) {\r\n                    // Clone the descendants list in case it changes during iteration\r\n                    var descendants = [];\r\n                    ko.utils.arrayPushAll(descendants, node.getElementsByTagName(\"*\"));\r\n                    for (var i = 0, j = descendants.length; i < j; i++)\r\n                        cleanSingleNode(descendants[i]);\r\n                }\r\n            }\r\n            return node;\r\n        },\r\n\r\n        removeNode : function(node) {\r\n            ko.cleanNode(node);\r\n            if (node.parentNode)\r\n                node.parentNode.removeChild(node);\r\n        },\r\n\r\n        \"cleanExternalData\" : function (node) {\r\n            // Special support for jQuery here because it's so commonly used.\r\n            // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData\r\n            // so notify it to tear down any resources associated with the node & descendants here.\r\n            if (jQueryInstance && (typeof jQueryInstance['cleanData'] == \"function\"))\r\n                jQueryInstance['cleanData']([node]);\r\n        }\r\n    };\r\n})();\r\nko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience\r\nko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience\r\nko.exportSymbol('cleanNode', ko.cleanNode);\r\nko.exportSymbol('removeNode', ko.removeNode);\r\nko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);\r\nko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);\r\nko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);\r\n(function () {\r\n    var none = [0, \"\", \"\"],\r\n        table = [1, \"<table>\", \"</table>\"],\r\n        tbody = [2, \"<table><tbody>\", \"</tbody></table>\"],\r\n        tr = [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\r\n        select = [1, \"<select multiple='multiple'>\", \"</select>\"],\r\n        lookup = {\r\n            'thead': table,\r\n            'tbody': table,\r\n            'tfoot': table,\r\n            'tr': tbody,\r\n            'td': tr,\r\n            'th': tr,\r\n            'option': select,\r\n            'optgroup': select\r\n        },\r\n\r\n        // This is needed for old IE if you're *not* using either jQuery or innerShiv. Doesn't affect other cases.\r\n        mayRequireCreateElementHack = ko.utils.ieVersion <= 8;\r\n\r\n    function getWrap(tags) {\r\n        var m = tags.match(/^<([a-z]+)[ >]/);\r\n        return (m && lookup[m[1]]) || none;\r\n    }\r\n\r\n    function simpleHtmlParse(html, documentContext) {\r\n        documentContext || (documentContext = document);\r\n        var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;\r\n\r\n        // Based on jQuery's \"clean\" function, but only accounting for table-related elements.\r\n        // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's \"clean\" function directly\r\n\r\n        // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of\r\n        // a descendant node. For example: \"<div><!-- mycomment -->abc</div>\" will get parsed as \"<div>abc</div>\"\r\n        // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node\r\n        // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.\r\n\r\n        // Trim whitespace, otherwise indexOf won't work as expected\r\n        var tags = ko.utils.stringTrim(html).toLowerCase(), div = documentContext.createElement(\"div\"),\r\n            wrap = getWrap(tags),\r\n            depth = wrap[0];\r\n\r\n        // Go to html and back, then peel off extra wrappers\r\n        // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.\r\n        var markup = \"ignored<div>\" + wrap[1] + html + wrap[2] + \"</div>\";\r\n        if (typeof windowContext['innerShiv'] == \"function\") {\r\n            // Note that innerShiv is deprecated in favour of html5shiv. We should consider adding\r\n            // support for html5shiv (except if no explicit support is needed, e.g., if html5shiv\r\n            // somehow shims the native APIs so it just works anyway)\r\n            div.appendChild(windowContext['innerShiv'](markup));\r\n        } else {\r\n            if (mayRequireCreateElementHack) {\r\n                // The document.createElement('my-element') trick to enable custom elements in IE6-8\r\n                // only works if we assign innerHTML on an element associated with that document.\r\n                documentContext.appendChild(div);\r\n            }\r\n\r\n            div.innerHTML = markup;\r\n\r\n            if (mayRequireCreateElementHack) {\r\n                div.parentNode.removeChild(div);\r\n            }\r\n        }\r\n\r\n        // Move to the right depth\r\n        while (depth--)\r\n            div = div.lastChild;\r\n\r\n        return ko.utils.makeArray(div.lastChild.childNodes);\r\n    }\r\n\r\n    function jQueryHtmlParse(html, documentContext) {\r\n        // jQuery's \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.\r\n        if (jQueryInstance['parseHTML']) {\r\n            return jQueryInstance['parseHTML'](html, documentContext) || []; // Ensure we always return an array and never null\r\n        } else {\r\n            // For jQuery < 1.8.0, we fall back on the undocumented internal \"clean\" function.\r\n            var elems = jQueryInstance['clean']([html], documentContext);\r\n\r\n            // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.\r\n            // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.\r\n            // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.\r\n            if (elems && elems[0]) {\r\n                // Find the top-most parent element that's a direct child of a document fragment\r\n                var elem = elems[0];\r\n                while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)\r\n                    elem = elem.parentNode;\r\n                // ... then detach it\r\n                if (elem.parentNode)\r\n                    elem.parentNode.removeChild(elem);\r\n            }\r\n\r\n            return elems;\r\n        }\r\n    }\r\n\r\n    ko.utils.parseHtmlFragment = function(html, documentContext) {\r\n        return jQueryInstance ?\r\n            jQueryHtmlParse(html, documentContext) :   // As below, benefit from jQuery's optimisations where possible\r\n            simpleHtmlParse(html, documentContext);  // ... otherwise, this simple logic will do in most common cases.\r\n    };\r\n\r\n    ko.utils.setHtml = function(node, html) {\r\n        ko.utils.emptyDomNode(node);\r\n\r\n        // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it\r\n        html = ko.utils.unwrapObservable(html);\r\n\r\n        if ((html !== null) && (html !== undefined)) {\r\n            if (typeof html != 'string')\r\n                html = html.toString();\r\n\r\n            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,\r\n            // for example <tr> elements which are not normally allowed to exist on their own.\r\n            // If you've referenced jQuery we'll use that rather than duplicating its code.\r\n            if (jQueryInstance) {\r\n                jQueryInstance(node)['html'](html);\r\n            } else {\r\n                // ... otherwise, use KO's own parsing logic.\r\n                var parsedNodes = ko.utils.parseHtmlFragment(html, node.ownerDocument);\r\n                for (var i = 0; i < parsedNodes.length; i++)\r\n                    node.appendChild(parsedNodes[i]);\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);\r\nko.exportSymbol('utils.setHtml', ko.utils.setHtml);\r\n\r\nko.memoization = (function () {\r\n    var memos = {};\r\n\r\n    function randomMax8HexChars() {\r\n        return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);\r\n    }\r\n    function generateRandomId() {\r\n        return randomMax8HexChars() + randomMax8HexChars();\r\n    }\r\n    function findMemoNodes(rootNode, appendToArray) {\r\n        if (!rootNode)\r\n            return;\r\n        if (rootNode.nodeType == 8) {\r\n            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);\r\n            if (memoId != null)\r\n                appendToArray.push({ domNode: rootNode, memoId: memoId });\r\n        } else if (rootNode.nodeType == 1) {\r\n            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)\r\n                findMemoNodes(childNodes[i], appendToArray);\r\n        }\r\n    }\r\n\r\n    return {\r\n        memoize: function (callback) {\r\n            if (typeof callback != \"function\")\r\n                throw new Error(\"You can only pass a function to ko.memoization.memoize()\");\r\n            var memoId = generateRandomId();\r\n            memos[memoId] = callback;\r\n            return \"<!--[ko_memo:\" + memoId + \"]-->\";\r\n        },\r\n\r\n        unmemoize: function (memoId, callbackParams) {\r\n            var callback = memos[memoId];\r\n            if (callback === undefined)\r\n                throw new Error(\"Couldn't find any memo with ID \" + memoId + \". Perhaps it's already been unmemoized.\");\r\n            try {\r\n                callback.apply(null, callbackParams || []);\r\n                return true;\r\n            }\r\n            finally { delete memos[memoId]; }\r\n        },\r\n\r\n        unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {\r\n            var memos = [];\r\n            findMemoNodes(domNode, memos);\r\n            for (var i = 0, j = memos.length; i < j; i++) {\r\n                var node = memos[i].domNode;\r\n                var combinedParams = [node];\r\n                if (extraCallbackParamsArray)\r\n                    ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);\r\n                ko.memoization.unmemoize(memos[i].memoId, combinedParams);\r\n                node.nodeValue = \"\"; // Neuter this node so we don't try to unmemoize it again\r\n                if (node.parentNode)\r\n                    node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)\r\n            }\r\n        },\r\n\r\n        parseMemoText: function (memoText) {\r\n            var match = memoText.match(/^\\[ko_memo\\:(.*?)\\]$/);\r\n            return match ? match[1] : null;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('memoization', ko.memoization);\r\nko.exportSymbol('memoization.memoize', ko.memoization.memoize);\r\nko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);\r\nko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);\r\nko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);\r\nko.tasks = (function () {\r\n    var scheduler,\r\n        taskQueue = [],\r\n        taskQueueLength = 0,\r\n        nextHandle = 1,\r\n        nextIndexToProcess = 0;\r\n\r\n    if (window['MutationObserver']) {\r\n        // Chrome 27+, Firefox 14+, IE 11+, Opera 15+, Safari 6.1+\r\n        // From https://github.com/petkaantonov/bluebird * Copyright (c) 2014 Petka Antonov * License: MIT\r\n        scheduler = (function (callback) {\r\n            var div = document.createElement(\"div\");\r\n            new MutationObserver(callback).observe(div, {attributes: true});\r\n            return function () { div.classList.toggle(\"foo\"); };\r\n        })(scheduledProcess);\r\n    } else if (document && \"onreadystatechange\" in document.createElement(\"script\")) {\r\n        // IE 6-10\r\n        // From https://github.com/YuzuJS/setImmediate * Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola * License: MIT\r\n        scheduler = function (callback) {\r\n            var script = document.createElement(\"script\");\r\n            script.onreadystatechange = function () {\r\n                script.onreadystatechange = null;\r\n                document.documentElement.removeChild(script);\r\n                script = null;\r\n                callback();\r\n            };\r\n            document.documentElement.appendChild(script);\r\n        };\r\n    } else {\r\n        scheduler = function (callback) {\r\n            setTimeout(callback, 0);\r\n        };\r\n    }\r\n\r\n    function processTasks() {\r\n        if (taskQueueLength) {\r\n            // Each mark represents the end of a logical group of tasks and the number of these groups is\r\n            // limited to prevent unchecked recursion.\r\n            var mark = taskQueueLength, countMarks = 0;\r\n\r\n            // nextIndexToProcess keeps track of where we are in the queue; processTasks can be called recursively without issue\r\n            for (var task; nextIndexToProcess < taskQueueLength; ) {\r\n                if (task = taskQueue[nextIndexToProcess++]) {\r\n                    if (nextIndexToProcess > mark) {\r\n                        if (++countMarks >= 5000) {\r\n                            nextIndexToProcess = taskQueueLength;   // skip all tasks remaining in the queue since any of them could be causing the recursion\r\n                            ko.utils.deferError(Error(\"'Too much recursion' after processing \" + countMarks + \" task groups.\"));\r\n                            break;\r\n                        }\r\n                        mark = taskQueueLength;\r\n                    }\r\n                    try {\r\n                        task();\r\n                    } catch (ex) {\r\n                        ko.utils.deferError(ex);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function scheduledProcess() {\r\n        processTasks();\r\n\r\n        // Reset the queue\r\n        nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\r\n    }\r\n\r\n    function scheduleTaskProcessing() {\r\n        ko.tasks['scheduler'](scheduledProcess);\r\n    }\r\n\r\n    var tasks = {\r\n        'scheduler': scheduler,     // Allow overriding the scheduler\r\n\r\n        schedule: function (func) {\r\n            if (!taskQueueLength) {\r\n                scheduleTaskProcessing();\r\n            }\r\n\r\n            taskQueue[taskQueueLength++] = func;\r\n            return nextHandle++;\r\n        },\r\n\r\n        cancel: function (handle) {\r\n            var index = handle - (nextHandle - taskQueueLength);\r\n            if (index >= nextIndexToProcess && index < taskQueueLength) {\r\n                taskQueue[index] = null;\r\n            }\r\n        },\r\n\r\n        // For testing only: reset the queue and return the previous queue length\r\n        'resetForTesting': function () {\r\n            var length = taskQueueLength - nextIndexToProcess;\r\n            nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\r\n            return length;\r\n        },\r\n\r\n        runEarly: processTasks\r\n    };\r\n\r\n    return tasks;\r\n})();\r\n\r\nko.exportSymbol('tasks', ko.tasks);\r\nko.exportSymbol('tasks.schedule', ko.tasks.schedule);\r\n//ko.exportSymbol('tasks.cancel', ko.tasks.cancel);  \"cancel\" isn't minified\r\nko.exportSymbol('tasks.runEarly', ko.tasks.runEarly);\r\nko.extenders = {\r\n    'throttle': function(target, timeout) {\r\n        // Throttling means two things:\r\n\r\n        // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies\r\n        //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate\r\n        target['throttleEvaluation'] = timeout;\r\n\r\n        // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*\r\n        //     so the target cannot change value synchronously or faster than a certain rate\r\n        var writeTimeoutInstance = null;\r\n        return ko.dependentObservable({\r\n            'read': target,\r\n            'write': function(value) {\r\n                clearTimeout(writeTimeoutInstance);\r\n                writeTimeoutInstance = ko.utils.setTimeout(function() {\r\n                    target(value);\r\n                }, timeout);\r\n            }\r\n        });\r\n    },\r\n\r\n    'rateLimit': function(target, options) {\r\n        var timeout, method, limitFunction;\r\n\r\n        if (typeof options == 'number') {\r\n            timeout = options;\r\n        } else {\r\n            timeout = options['timeout'];\r\n            method = options['method'];\r\n        }\r\n\r\n        // rateLimit supersedes deferred updates\r\n        target._deferUpdates = false;\r\n\r\n        limitFunction = method == 'notifyWhenChangesStop' ?  debounce : throttle;\r\n        target.limit(function(callback) {\r\n            return limitFunction(callback, timeout);\r\n        });\r\n    },\r\n\r\n    'deferred': function(target, options) {\r\n        if (options !== true) {\r\n            throw new Error('The \\'deferred\\' extender only accepts the value \\'true\\', because it is not supported to turn deferral off once enabled.')\r\n        }\r\n\r\n        if (!target._deferUpdates) {\r\n            target._deferUpdates = true;\r\n            target.limit(function (callback) {\r\n                var handle,\r\n                    ignoreUpdates = false;\r\n                return function () {\r\n                    if (!ignoreUpdates) {\r\n                        ko.tasks.cancel(handle);\r\n                        handle = ko.tasks.schedule(callback);\r\n\r\n                        try {\r\n                            ignoreUpdates = true;\r\n                            target['notifySubscribers'](undefined, 'dirty');\r\n                        } finally {\r\n                            ignoreUpdates = false;\r\n                        }\r\n                    }\r\n                };\r\n            });\r\n        }\r\n    },\r\n\r\n    'notify': function(target, notifyWhen) {\r\n        target[\"equalityComparer\"] = notifyWhen == \"always\" ?\r\n            null :  // null equalityComparer means to always notify\r\n            valuesArePrimitiveAndEqual;\r\n    }\r\n};\r\n\r\nvar primitiveTypes = { 'undefined':1, 'boolean':1, 'number':1, 'string':1 };\r\nfunction valuesArePrimitiveAndEqual(a, b) {\r\n    var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);\r\n    return oldValueIsPrimitive ? (a === b) : false;\r\n}\r\n\r\nfunction throttle(callback, timeout) {\r\n    var timeoutInstance;\r\n    return function () {\r\n        if (!timeoutInstance) {\r\n            timeoutInstance = ko.utils.setTimeout(function () {\r\n                timeoutInstance = undefined;\r\n                callback();\r\n            }, timeout);\r\n        }\r\n    };\r\n}\r\n\r\nfunction debounce(callback, timeout) {\r\n    var timeoutInstance;\r\n    return function () {\r\n        clearTimeout(timeoutInstance);\r\n        timeoutInstance = ko.utils.setTimeout(callback, timeout);\r\n    };\r\n}\r\n\r\nfunction applyExtenders(requestedExtenders) {\r\n    var target = this;\r\n    if (requestedExtenders) {\r\n        ko.utils.objectForEach(requestedExtenders, function(key, value) {\r\n            var extenderHandler = ko.extenders[key];\r\n            if (typeof extenderHandler == 'function') {\r\n                target = extenderHandler(target, value) || target;\r\n            }\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\nko.exportSymbol('extenders', ko.extenders);\r\n\r\nko.subscription = function (target, callback, disposeCallback) {\r\n    this._target = target;\r\n    this.callback = callback;\r\n    this.disposeCallback = disposeCallback;\r\n    this.isDisposed = false;\r\n    ko.exportProperty(this, 'dispose', this.dispose);\r\n};\r\nko.subscription.prototype.dispose = function () {\r\n    this.isDisposed = true;\r\n    this.disposeCallback();\r\n};\r\n\r\nko.subscribable = function () {\r\n    ko.utils.setPrototypeOfOrExtend(this, ko_subscribable_fn);\r\n    ko_subscribable_fn.init(this);\r\n}\r\n\r\nvar defaultEvent = \"change\";\r\n\r\n// Moved out of \"limit\" to avoid the extra closure\r\nfunction limitNotifySubscribers(value, event) {\r\n    if (!event || event === defaultEvent) {\r\n        this._limitChange(value);\r\n    } else if (event === 'beforeChange') {\r\n        this._limitBeforeChange(value);\r\n    } else {\r\n        this._origNotifySubscribers(value, event);\r\n    }\r\n}\r\n\r\nvar ko_subscribable_fn = {\r\n    init: function(instance) {\r\n        instance._subscriptions = { \"change\": [] };\r\n        instance._versionNumber = 1;\r\n    },\r\n\r\n    subscribe: function (callback, callbackTarget, event) {\r\n        var self = this;\r\n\r\n        event = event || defaultEvent;\r\n        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;\r\n\r\n        var subscription = new ko.subscription(self, boundCallback, function () {\r\n            ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);\r\n            if (self.afterSubscriptionRemove)\r\n                self.afterSubscriptionRemove(event);\r\n        });\r\n\r\n        if (self.beforeSubscriptionAdd)\r\n            self.beforeSubscriptionAdd(event);\r\n\r\n        if (!self._subscriptions[event])\r\n            self._subscriptions[event] = [];\r\n        self._subscriptions[event].push(subscription);\r\n\r\n        return subscription;\r\n    },\r\n\r\n    \"notifySubscribers\": function (valueToNotify, event) {\r\n        event = event || defaultEvent;\r\n        if (event === defaultEvent) {\r\n            this.updateVersion();\r\n        }\r\n        if (this.hasSubscriptionsForEvent(event)) {\r\n            var subs = event === defaultEvent && this._changeSubscriptions || this._subscriptions[event].slice(0);\r\n            try {\r\n                ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)\r\n                for (var i = 0, subscription; subscription = subs[i]; ++i) {\r\n                    // In case a subscription was disposed during the arrayForEach cycle, check\r\n                    // for isDisposed on each subscription before invoking its callback\r\n                    if (!subscription.isDisposed)\r\n                        subscription.callback(valueToNotify);\r\n                }\r\n            } finally {\r\n                ko.dependencyDetection.end(); // End suppressing dependency detection\r\n            }\r\n        }\r\n    },\r\n\r\n    getVersion: function () {\r\n        return this._versionNumber;\r\n    },\r\n\r\n    hasChanged: function (versionToCheck) {\r\n        return this.getVersion() !== versionToCheck;\r\n    },\r\n\r\n    updateVersion: function () {\r\n        ++this._versionNumber;\r\n    },\r\n\r\n    limit: function(limitFunction) {\r\n        var self = this, selfIsObservable = ko.isObservable(self),\r\n            ignoreBeforeChange, notifyNextChange, previousValue, pendingValue, beforeChange = 'beforeChange';\r\n\r\n        if (!self._origNotifySubscribers) {\r\n            self._origNotifySubscribers = self[\"notifySubscribers\"];\r\n            self[\"notifySubscribers\"] = limitNotifySubscribers;\r\n        }\r\n\r\n        var finish = limitFunction(function() {\r\n            self._notificationIsPending = false;\r\n\r\n            // If an observable provided a reference to itself, access it to get the latest value.\r\n            // This allows computed observables to delay calculating their value until needed.\r\n            if (selfIsObservable && pendingValue === self) {\r\n                pendingValue = self._evalIfChanged ? self._evalIfChanged() : self();\r\n            }\r\n            var shouldNotify = notifyNextChange || self.isDifferent(previousValue, pendingValue);\r\n\r\n            notifyNextChange = ignoreBeforeChange = false;\r\n\r\n            if (shouldNotify) {\r\n                self._origNotifySubscribers(previousValue = pendingValue);\r\n            }\r\n        });\r\n\r\n        self._limitChange = function(value) {\r\n            self._changeSubscriptions = self._subscriptions[defaultEvent].slice(0);\r\n            self._notificationIsPending = ignoreBeforeChange = true;\r\n            pendingValue = value;\r\n            finish();\r\n        };\r\n        self._limitBeforeChange = function(value) {\r\n            if (!ignoreBeforeChange) {\r\n                previousValue = value;\r\n                self._origNotifySubscribers(value, beforeChange);\r\n            }\r\n        };\r\n        self._notifyNextChangeIfValueIsDifferent = function() {\r\n            if (self.isDifferent(previousValue, self.peek(true /*evaluate*/))) {\r\n                notifyNextChange = true;\r\n            }\r\n        };\r\n    },\r\n\r\n    hasSubscriptionsForEvent: function(event) {\r\n        return this._subscriptions[event] && this._subscriptions[event].length;\r\n    },\r\n\r\n    getSubscriptionsCount: function (event) {\r\n        if (event) {\r\n            return this._subscriptions[event] && this._subscriptions[event].length || 0;\r\n        } else {\r\n            var total = 0;\r\n            ko.utils.objectForEach(this._subscriptions, function(eventName, subscriptions) {\r\n                if (eventName !== 'dirty')\r\n                    total += subscriptions.length;\r\n            });\r\n            return total;\r\n        }\r\n    },\r\n\r\n    isDifferent: function(oldValue, newValue) {\r\n        return !this['equalityComparer'] || !this['equalityComparer'](oldValue, newValue);\r\n    },\r\n\r\n    extend: applyExtenders\r\n};\r\n\r\nko.exportProperty(ko_subscribable_fn, 'subscribe', ko_subscribable_fn.subscribe);\r\nko.exportProperty(ko_subscribable_fn, 'extend', ko_subscribable_fn.extend);\r\nko.exportProperty(ko_subscribable_fn, 'getSubscriptionsCount', ko_subscribable_fn.getSubscriptionsCount);\r\n\r\n// For browsers that support proto assignment, we overwrite the prototype of each\r\n// observable instance. Since observables are functions, we need Function.prototype\r\n// to still be in the prototype chain.\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);\r\n}\r\n\r\nko.subscribable['fn'] = ko_subscribable_fn;\r\n\r\n\r\nko.isSubscribable = function (instance) {\r\n    return instance != null && typeof instance.subscribe == \"function\" && typeof instance[\"notifySubscribers\"] == \"function\";\r\n};\r\n\r\nko.exportSymbol('subscribable', ko.subscribable);\r\nko.exportSymbol('isSubscribable', ko.isSubscribable);\r\n\r\nko.computedContext = ko.dependencyDetection = (function () {\r\n    var outerFrames = [],\r\n        currentFrame,\r\n        lastId = 0;\r\n\r\n    // Return a unique ID that can be assigned to an observable for dependency tracking.\r\n    // Theoretically, you could eventually overflow the number storage size, resulting\r\n    // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\r\n    // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\r\n    // take over 285 years to reach that number.\r\n    // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\r\n    function getId() {\r\n        return ++lastId;\r\n    }\r\n\r\n    function begin(options) {\r\n        outerFrames.push(currentFrame);\r\n        currentFrame = options;\r\n    }\r\n\r\n    function end() {\r\n        currentFrame = outerFrames.pop();\r\n    }\r\n\r\n    return {\r\n        begin: begin,\r\n\r\n        end: end,\r\n\r\n        registerDependency: function (subscribable) {\r\n            if (currentFrame) {\r\n                if (!ko.isSubscribable(subscribable))\r\n                    throw new Error(\"Only subscribable things can act as dependencies\");\r\n                currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = getId()));\r\n            }\r\n        },\r\n\r\n        ignore: function (callback, callbackTarget, callbackArgs) {\r\n            try {\r\n                begin();\r\n                return callback.apply(callbackTarget, callbackArgs || []);\r\n            } finally {\r\n                end();\r\n            }\r\n        },\r\n\r\n        getDependenciesCount: function () {\r\n            if (currentFrame)\r\n                return currentFrame.computed.getDependenciesCount();\r\n        },\r\n\r\n        isInitial: function() {\r\n            if (currentFrame)\r\n                return currentFrame.isInitial;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('computedContext', ko.computedContext);\r\nko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);\r\nko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);\r\n\r\nko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);\r\nvar observableLatestValue = ko.utils.createSymbolOrString('_latestValue');\r\n\r\nko.observable = function (initialValue) {\r\n    function observable() {\r\n        if (arguments.length > 0) {\r\n            // Write\r\n\r\n            // Ignore writes if the value hasn't changed\r\n            if (observable.isDifferent(observable[observableLatestValue], arguments[0])) {\r\n                observable.valueWillMutate();\r\n                observable[observableLatestValue] = arguments[0];\r\n                observable.valueHasMutated();\r\n            }\r\n            return this; // Permits chained assignments\r\n        }\r\n        else {\r\n            // Read\r\n            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation\r\n            return observable[observableLatestValue];\r\n        }\r\n    }\r\n\r\n    observable[observableLatestValue] = initialValue;\r\n\r\n    // Inherit from 'subscribable'\r\n    if (!ko.utils.canSetPrototype) {\r\n        // 'subscribable' won't be on the prototype chain unless we put it there directly\r\n        ko.utils.extend(observable, ko.subscribable['fn']);\r\n    }\r\n    ko.subscribable['fn'].init(observable);\r\n\r\n    // Inherit from 'observable'\r\n    ko.utils.setPrototypeOfOrExtend(observable, observableFn);\r\n\r\n    if (ko.options['deferUpdates']) {\r\n        ko.extenders['deferred'](observable, true);\r\n    }\r\n\r\n    return observable;\r\n}\r\n\r\n// Define prototype for observables\r\nvar observableFn = {\r\n    'equalityComparer': valuesArePrimitiveAndEqual,\r\n    peek: function() { return this[observableLatestValue]; },\r\n    valueHasMutated: function () { this['notifySubscribers'](this[observableLatestValue]); },\r\n    valueWillMutate: function () { this['notifySubscribers'](this[observableLatestValue], 'beforeChange'); }\r\n};\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.observable constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(observableFn, ko.subscribable['fn']);\r\n}\r\n\r\nvar protoProperty = ko.observable.protoProperty = '__ko_proto__';\r\nobservableFn[protoProperty] = ko.observable;\r\n\r\nko.hasPrototype = function(instance, prototype) {\r\n    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;\r\n    if (instance[protoProperty] === prototype) return true;\r\n    return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain\r\n};\r\n\r\nko.isObservable = function (instance) {\r\n    return ko.hasPrototype(instance, ko.observable);\r\n}\r\nko.isWriteableObservable = function (instance) {\r\n    // Observable\r\n    if ((typeof instance == 'function') && instance[protoProperty] === ko.observable)\r\n        return true;\r\n    // Writeable dependent observable\r\n    if ((typeof instance == 'function') && (instance[protoProperty] === ko.dependentObservable) && (instance.hasWriteFunction))\r\n        return true;\r\n    // Anything else\r\n    return false;\r\n}\r\n\r\nko.exportSymbol('observable', ko.observable);\r\nko.exportSymbol('isObservable', ko.isObservable);\r\nko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);\r\nko.exportSymbol('isWritableObservable', ko.isWriteableObservable);\r\nko.exportSymbol('observable.fn', observableFn);\r\nko.exportProperty(observableFn, 'peek', observableFn.peek);\r\nko.exportProperty(observableFn, 'valueHasMutated', observableFn.valueHasMutated);\r\nko.exportProperty(observableFn, 'valueWillMutate', observableFn.valueWillMutate);\r\nko.observableArray = function (initialValues) {\r\n    initialValues = initialValues || [];\r\n\r\n    if (typeof initialValues != 'object' || !('length' in initialValues))\r\n        throw new Error(\"The argument passed when initializing an observable array must be an array, or null, or undefined.\");\r\n\r\n    var result = ko.observable(initialValues);\r\n    ko.utils.setPrototypeOfOrExtend(result, ko.observableArray['fn']);\r\n    return result.extend({'trackArrayChanges':true});\r\n};\r\n\r\nko.observableArray['fn'] = {\r\n    'remove': function (valueOrPredicate) {\r\n        var underlyingArray = this.peek();\r\n        var removedValues = [];\r\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n        for (var i = 0; i < underlyingArray.length; i++) {\r\n            var value = underlyingArray[i];\r\n            if (predicate(value)) {\r\n                if (removedValues.length === 0) {\r\n                    this.valueWillMutate();\r\n                }\r\n                removedValues.push(value);\r\n                underlyingArray.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        if (removedValues.length) {\r\n            this.valueHasMutated();\r\n        }\r\n        return removedValues;\r\n    },\r\n\r\n    'removeAll': function (arrayOfValues) {\r\n        // If you passed zero args, we remove everything\r\n        if (arrayOfValues === undefined) {\r\n            var underlyingArray = this.peek();\r\n            var allValues = underlyingArray.slice(0);\r\n            this.valueWillMutate();\r\n            underlyingArray.splice(0, underlyingArray.length);\r\n            this.valueHasMutated();\r\n            return allValues;\r\n        }\r\n        // If you passed an arg, we interpret it as an array of entries to remove\r\n        if (!arrayOfValues)\r\n            return [];\r\n        return this['remove'](function (value) {\r\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n        });\r\n    },\r\n\r\n    'destroy': function (valueOrPredicate) {\r\n        var underlyingArray = this.peek();\r\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n        this.valueWillMutate();\r\n        for (var i = underlyingArray.length - 1; i >= 0; i--) {\r\n            var value = underlyingArray[i];\r\n            if (predicate(value))\r\n                underlyingArray[i][\"_destroy\"] = true;\r\n        }\r\n        this.valueHasMutated();\r\n    },\r\n\r\n    'destroyAll': function (arrayOfValues) {\r\n        // If you passed zero args, we destroy everything\r\n        if (arrayOfValues === undefined)\r\n            return this['destroy'](function() { return true });\r\n\r\n        // If you passed an arg, we interpret it as an array of entries to destroy\r\n        if (!arrayOfValues)\r\n            return [];\r\n        return this['destroy'](function (value) {\r\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n        });\r\n    },\r\n\r\n    'indexOf': function (item) {\r\n        var underlyingArray = this();\r\n        return ko.utils.arrayIndexOf(underlyingArray, item);\r\n    },\r\n\r\n    'replace': function(oldItem, newItem) {\r\n        var index = this['indexOf'](oldItem);\r\n        if (index >= 0) {\r\n            this.valueWillMutate();\r\n            this.peek()[index] = newItem;\r\n            this.valueHasMutated();\r\n        }\r\n    }\r\n};\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.observableArray constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.observableArray['fn'], ko.observable['fn']);\r\n}\r\n\r\n// Populate ko.observableArray.fn with read/write functions from native arrays\r\n// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array\r\n// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale\r\nko.utils.arrayForEach([\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (methodName) {\r\n    ko.observableArray['fn'][methodName] = function () {\r\n        // Use \"peek\" to avoid creating a subscription in any computed that we're executing in the context of\r\n        // (for consistency with mutating regular observables)\r\n        var underlyingArray = this.peek();\r\n        this.valueWillMutate();\r\n        this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);\r\n        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);\r\n        this.valueHasMutated();\r\n        // The native sort and reverse methods return a reference to the array, but it makes more sense to return the observable array instead.\r\n        return methodCallResult === underlyingArray ? this : methodCallResult;\r\n    };\r\n});\r\n\r\n// Populate ko.observableArray.fn with read-only functions from native arrays\r\nko.utils.arrayForEach([\"slice\"], function (methodName) {\r\n    ko.observableArray['fn'][methodName] = function () {\r\n        var underlyingArray = this();\r\n        return underlyingArray[methodName].apply(underlyingArray, arguments);\r\n    };\r\n});\r\n\r\nko.exportSymbol('observableArray', ko.observableArray);\r\nvar arrayChangeEventName = 'arrayChange';\r\nko.extenders['trackArrayChanges'] = function(target, options) {\r\n    // Use the provided options--each call to trackArrayChanges overwrites the previously set options\r\n    target.compareArrayOptions = {};\r\n    if (options && typeof options == \"object\") {\r\n        ko.utils.extend(target.compareArrayOptions, options);\r\n    }\r\n    target.compareArrayOptions['sparse'] = true;\r\n\r\n    // Only modify the target observable once\r\n    if (target.cacheDiffForKnownOperation) {\r\n        return;\r\n    }\r\n    var trackingChanges = false,\r\n        cachedDiff = null,\r\n        arrayChangeSubscription,\r\n        pendingNotifications = 0,\r\n        underlyingNotifySubscribersFunction,\r\n        underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,\r\n        underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;\r\n\r\n    // Watch \"subscribe\" calls, and for array change events, ensure change tracking is enabled\r\n    target.beforeSubscriptionAdd = function (event) {\r\n        if (underlyingBeforeSubscriptionAddFunction)\r\n            underlyingBeforeSubscriptionAddFunction.call(target, event);\r\n        if (event === arrayChangeEventName) {\r\n            trackChanges();\r\n        }\r\n    };\r\n    // Watch \"dispose\" calls, and for array change events, ensure change tracking is disabled when all are disposed\r\n    target.afterSubscriptionRemove = function (event) {\r\n        if (underlyingAfterSubscriptionRemoveFunction)\r\n            underlyingAfterSubscriptionRemoveFunction.call(target, event);\r\n        if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n            if (underlyingNotifySubscribersFunction) {\r\n                target['notifySubscribers'] = underlyingNotifySubscribersFunction;\r\n                underlyingNotifySubscribersFunction = undefined;\r\n            }\r\n            arrayChangeSubscription.dispose();\r\n            trackingChanges = false;\r\n        }\r\n    };\r\n\r\n    function trackChanges() {\r\n        // Calling 'trackChanges' multiple times is the same as calling it once\r\n        if (trackingChanges) {\r\n            return;\r\n        }\r\n\r\n        trackingChanges = true;\r\n\r\n        // Intercept \"notifySubscribers\" to track how many times it was called.\r\n        underlyingNotifySubscribersFunction = target['notifySubscribers'];\r\n        target['notifySubscribers'] = function(valueToNotify, event) {\r\n            if (!event || event === defaultEvent) {\r\n                ++pendingNotifications;\r\n            }\r\n            return underlyingNotifySubscribersFunction.apply(this, arguments);\r\n        };\r\n\r\n        // Each time the array changes value, capture a clone so that on the next\r\n        // change it's possible to produce a diff\r\n        var previousContents = [].concat(target.peek() || []);\r\n        cachedDiff = null;\r\n        arrayChangeSubscription = target.subscribe(function(currentContents) {\r\n            // Make a copy of the current contents and ensure it's an array\r\n            currentContents = [].concat(currentContents || []);\r\n\r\n            // Compute the diff and issue notifications, but only if someone is listening\r\n            if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n                var changes = getChanges(previousContents, currentContents);\r\n            }\r\n\r\n            // Eliminate references to the old, removed items, so they can be GCed\r\n            previousContents = currentContents;\r\n            cachedDiff = null;\r\n            pendingNotifications = 0;\r\n\r\n            if (changes && changes.length) {\r\n                target['notifySubscribers'](changes, arrayChangeEventName);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getChanges(previousContents, currentContents) {\r\n        // We try to re-use cached diffs.\r\n        // The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates\r\n        // plugin, which without this check would not be compatible with arrayChange notifications. Normally,\r\n        // notifications are issued immediately so we wouldn't be queueing up more than one.\r\n        if (!cachedDiff || pendingNotifications > 1) {\r\n            cachedDiff = ko.utils.compareArrays(previousContents, currentContents, target.compareArrayOptions);\r\n        }\r\n\r\n        return cachedDiff;\r\n    }\r\n\r\n    target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {\r\n        // Only run if we're currently tracking changes for this observable array\r\n        // and there aren't any pending deferred notifications.\r\n        if (!trackingChanges || pendingNotifications) {\r\n            return;\r\n        }\r\n        var diff = [],\r\n            arrayLength = rawArray.length,\r\n            argsLength = args.length,\r\n            offset = 0;\r\n\r\n        function pushDiff(status, value, index) {\r\n            return diff[diff.length] = { 'status': status, 'value': value, 'index': index };\r\n        }\r\n        switch (operationName) {\r\n            case 'push':\r\n                offset = arrayLength;\r\n            case 'unshift':\r\n                for (var index = 0; index < argsLength; index++) {\r\n                    pushDiff('added', args[index], offset + index);\r\n                }\r\n                break;\r\n\r\n            case 'pop':\r\n                offset = arrayLength - 1;\r\n            case 'shift':\r\n                if (arrayLength) {\r\n                    pushDiff('deleted', rawArray[offset], offset);\r\n                }\r\n                break;\r\n\r\n            case 'splice':\r\n                // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].\r\n                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n                var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),\r\n                    endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),\r\n                    endAddIndex = startIndex + argsLength - 2,\r\n                    endIndex = Math.max(endDeleteIndex, endAddIndex),\r\n                    additions = [], deletions = [];\r\n                for (var index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {\r\n                    if (index < endDeleteIndex)\r\n                        deletions.push(pushDiff('deleted', rawArray[index], index));\r\n                    if (index < endAddIndex)\r\n                        additions.push(pushDiff('added', args[argsIndex], index));\r\n                }\r\n                ko.utils.findMovesInArrayComparison(deletions, additions);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n        cachedDiff = diff;\r\n    };\r\n};\r\nvar computedState = ko.utils.createSymbolOrString('_state');\r\n\r\nko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {\r\n    if (typeof evaluatorFunctionOrOptions === \"object\") {\r\n        // Single-parameter syntax - everything is on this \"options\" param\r\n        options = evaluatorFunctionOrOptions;\r\n    } else {\r\n        // Multi-parameter syntax - construct the options according to the params passed\r\n        options = options || {};\r\n        if (evaluatorFunctionOrOptions) {\r\n            options[\"read\"] = evaluatorFunctionOrOptions;\r\n        }\r\n    }\r\n    if (typeof options[\"read\"] != \"function\")\r\n        throw Error(\"Pass a function that returns the value of the ko.computed\");\r\n\r\n    var writeFunction = options[\"write\"];\r\n    var state = {\r\n        latestValue: undefined,\r\n        isStale: true,\r\n        isDirty: true,\r\n        isBeingEvaluated: false,\r\n        suppressDisposalUntilDisposeWhenReturnsFalse: false,\r\n        isDisposed: false,\r\n        pure: false,\r\n        isSleeping: false,\r\n        readFunction: options[\"read\"],\r\n        evaluatorFunctionTarget: evaluatorFunctionTarget || options[\"owner\"],\r\n        disposeWhenNodeIsRemoved: options[\"disposeWhenNodeIsRemoved\"] || options.disposeWhenNodeIsRemoved || null,\r\n        disposeWhen: options[\"disposeWhen\"] || options.disposeWhen,\r\n        domNodeDisposalCallback: null,\r\n        dependencyTracking: {},\r\n        dependenciesCount: 0,\r\n        evaluationTimeoutInstance: null\r\n    };\r\n\r\n    function computedObservable() {\r\n        if (arguments.length > 0) {\r\n            if (typeof writeFunction === \"function\") {\r\n                // Writing a value\r\n                writeFunction.apply(state.evaluatorFunctionTarget, arguments);\r\n            } else {\r\n                throw new Error(\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\");\r\n            }\r\n            return this; // Permits chained assignments\r\n        } else {\r\n            // Reading the value\r\n            ko.dependencyDetection.registerDependency(computedObservable);\r\n            if (state.isDirty || (state.isSleeping && computedObservable.haveDependenciesChanged())) {\r\n                computedObservable.evaluateImmediate();\r\n            }\r\n            return state.latestValue;\r\n        }\r\n    }\r\n\r\n    computedObservable[computedState] = state;\r\n    computedObservable.hasWriteFunction = typeof writeFunction === \"function\";\r\n\r\n    // Inherit from 'subscribable'\r\n    if (!ko.utils.canSetPrototype) {\r\n        // 'subscribable' won't be on the prototype chain unless we put it there directly\r\n        ko.utils.extend(computedObservable, ko.subscribable['fn']);\r\n    }\r\n    ko.subscribable['fn'].init(computedObservable);\r\n\r\n    // Inherit from 'computed'\r\n    ko.utils.setPrototypeOfOrExtend(computedObservable, computedFn);\r\n\r\n    if (options['pure']) {\r\n        state.pure = true;\r\n        state.isSleeping = true;     // Starts off sleeping; will awake on the first subscription\r\n        ko.utils.extend(computedObservable, pureComputedOverrides);\r\n    } else if (options['deferEvaluation']) {\r\n        ko.utils.extend(computedObservable, deferEvaluationOverrides);\r\n    }\r\n\r\n    if (ko.options['deferUpdates']) {\r\n        ko.extenders['deferred'](computedObservable, true);\r\n    }\r\n\r\n    if (DEBUG) {\r\n        // #1731 - Aid debugging by exposing the computed's options\r\n        computedObservable[\"_options\"] = options;\r\n    }\r\n\r\n    if (state.disposeWhenNodeIsRemoved) {\r\n        // Since this computed is associated with a DOM node, and we don't want to dispose the computed\r\n        // until the DOM node is *removed* from the document (as opposed to never having been in the document),\r\n        // we'll prevent disposal until \"disposeWhen\" first returns false.\r\n        state.suppressDisposalUntilDisposeWhenReturnsFalse = true;\r\n\r\n        // disposeWhenNodeIsRemoved: true can be used to opt into the \"only dispose after first false result\"\r\n        // behaviour even if there's no specific node to watch. In that case, clear the option so we don't try\r\n        // to watch for a non-node's disposal. This technique is intended for KO's internal use only and shouldn't\r\n        // be documented or used by application code, as it's likely to change in a future version of KO.\r\n        if (!state.disposeWhenNodeIsRemoved.nodeType) {\r\n            state.disposeWhenNodeIsRemoved = null;\r\n        }\r\n    }\r\n\r\n    // Evaluate, unless sleeping or deferEvaluation is true\r\n    if (!state.isSleeping && !options['deferEvaluation']) {\r\n        computedObservable.evaluateImmediate();\r\n    }\r\n\r\n    // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is\r\n    // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).\r\n    if (state.disposeWhenNodeIsRemoved && computedObservable.isActive()) {\r\n        ko.utils.domNodeDisposal.addDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback = function () {\r\n            computedObservable.dispose();\r\n        });\r\n    }\r\n\r\n    return computedObservable;\r\n};\r\n\r\n// Utility function that disposes a given dependencyTracking entry\r\nfunction computedDisposeDependencyCallback(id, entryToDispose) {\r\n    if (entryToDispose !== null && entryToDispose.dispose) {\r\n        entryToDispose.dispose();\r\n    }\r\n}\r\n\r\n// This function gets called each time a dependency is detected while evaluating a computed.\r\n// It's factored out as a shared function to avoid creating unnecessary function instances during evaluation.\r\nfunction computedBeginDependencyDetectionCallback(subscribable, id) {\r\n    var computedObservable = this.computedObservable,\r\n        state = computedObservable[computedState];\r\n    if (!state.isDisposed) {\r\n        if (this.disposalCount && this.disposalCandidates[id]) {\r\n            // Don't want to dispose this subscription, as it's still being used\r\n            computedObservable.addDependencyTracking(id, subscribable, this.disposalCandidates[id]);\r\n            this.disposalCandidates[id] = null; // No need to actually delete the property - disposalCandidates is a transient object anyway\r\n            --this.disposalCount;\r\n        } else if (!state.dependencyTracking[id]) {\r\n            // Brand new subscription - add it\r\n            computedObservable.addDependencyTracking(id, subscribable, state.isSleeping ? { _target: subscribable } : computedObservable.subscribeToDependency(subscribable));\r\n        }\r\n        // If the observable we've accessed has a pending notification, ensure we get notified of the actual final value (bypass equality checks)\r\n        if (subscribable._notificationIsPending) {\r\n            subscribable._notifyNextChangeIfValueIsDifferent();\r\n        }\r\n    }\r\n}\r\n\r\nvar computedFn = {\r\n    \"equalityComparer\": valuesArePrimitiveAndEqual,\r\n    getDependenciesCount: function () {\r\n        return this[computedState].dependenciesCount;\r\n    },\r\n    addDependencyTracking: function (id, target, trackingObj) {\r\n        if (this[computedState].pure && target === this) {\r\n            throw Error(\"A 'pure' computed must not be called recursively\");\r\n        }\r\n\r\n        this[computedState].dependencyTracking[id] = trackingObj;\r\n        trackingObj._order = this[computedState].dependenciesCount++;\r\n        trackingObj._version = target.getVersion();\r\n    },\r\n    haveDependenciesChanged: function () {\r\n        var id, dependency, dependencyTracking = this[computedState].dependencyTracking;\r\n        for (id in dependencyTracking) {\r\n            if (dependencyTracking.hasOwnProperty(id)) {\r\n                dependency = dependencyTracking[id];\r\n                if ((this._evalDelayed && dependency._target._notificationIsPending) || dependency._target.hasChanged(dependency._version)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    markDirty: function () {\r\n        // Process \"dirty\" events if we can handle delayed notifications\r\n        if (this._evalDelayed && !this[computedState].isBeingEvaluated) {\r\n            this._evalDelayed(false /*isChange*/);\r\n        }\r\n    },\r\n    isActive: function () {\r\n        var state = this[computedState];\r\n        return state.isDirty || state.dependenciesCount > 0;\r\n    },\r\n    respondToChange: function () {\r\n        // Ignore \"change\" events if we've already scheduled a delayed notification\r\n        if (!this._notificationIsPending) {\r\n            this.evaluatePossiblyAsync();\r\n        } else if (this[computedState].isDirty) {\r\n            this[computedState].isStale = true;\r\n        }\r\n    },\r\n    subscribeToDependency: function (target) {\r\n        if (target._deferUpdates && !this[computedState].disposeWhenNodeIsRemoved) {\r\n            var dirtySub = target.subscribe(this.markDirty, this, 'dirty'),\r\n                changeSub = target.subscribe(this.respondToChange, this);\r\n            return {\r\n                _target: target,\r\n                dispose: function () {\r\n                    dirtySub.dispose();\r\n                    changeSub.dispose();\r\n                }\r\n            };\r\n        } else {\r\n            return target.subscribe(this.evaluatePossiblyAsync, this);\r\n        }\r\n    },\r\n    evaluatePossiblyAsync: function () {\r\n        var computedObservable = this,\r\n            throttleEvaluationTimeout = computedObservable['throttleEvaluation'];\r\n        if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {\r\n            clearTimeout(this[computedState].evaluationTimeoutInstance);\r\n            this[computedState].evaluationTimeoutInstance = ko.utils.setTimeout(function () {\r\n                computedObservable.evaluateImmediate(true /*notifyChange*/);\r\n            }, throttleEvaluationTimeout);\r\n        } else if (computedObservable._evalDelayed) {\r\n            computedObservable._evalDelayed(true /*isChange*/);\r\n        } else {\r\n            computedObservable.evaluateImmediate(true /*notifyChange*/);\r\n        }\r\n    },\r\n    evaluateImmediate: function (notifyChange) {\r\n        var computedObservable = this,\r\n            state = computedObservable[computedState],\r\n            disposeWhen = state.disposeWhen,\r\n            changed = false;\r\n\r\n        if (state.isBeingEvaluated) {\r\n            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.\r\n            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost\r\n            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing\r\n            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387\r\n            return;\r\n        }\r\n\r\n        // Do not evaluate (and possibly capture new dependencies) if disposed\r\n        if (state.isDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (state.disposeWhenNodeIsRemoved && !ko.utils.domNodeIsAttachedToDocument(state.disposeWhenNodeIsRemoved) || disposeWhen && disposeWhen()) {\r\n            // See comment above about suppressDisposalUntilDisposeWhenReturnsFalse\r\n            if (!state.suppressDisposalUntilDisposeWhenReturnsFalse) {\r\n                computedObservable.dispose();\r\n                return;\r\n            }\r\n        } else {\r\n            // It just did return false, so we can stop suppressing now\r\n            state.suppressDisposalUntilDisposeWhenReturnsFalse = false;\r\n        }\r\n\r\n        state.isBeingEvaluated = true;\r\n        try {\r\n            changed = this.evaluateImmediate_CallReadWithDependencyDetection(notifyChange);\r\n        } finally {\r\n            state.isBeingEvaluated = false;\r\n        }\r\n\r\n        if (!state.dependenciesCount) {\r\n            computedObservable.dispose();\r\n        }\r\n\r\n        return changed;\r\n    },\r\n    evaluateImmediate_CallReadWithDependencyDetection: function (notifyChange) {\r\n        // This function is really just part of the evaluateImmediate logic. You would never call it from anywhere else.\r\n        // Factoring it out into a separate function means it can be independent of the try/catch block in evaluateImmediate,\r\n        // which contributes to saving about 40% off the CPU overhead of computed evaluation (on V8 at least).\r\n\r\n        var computedObservable = this,\r\n            state = computedObservable[computedState],\r\n            changed = false;\r\n\r\n        // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).\r\n        // Then, during evaluation, we cross off any that are in fact still being used.\r\n        var isInitial = state.pure ? undefined : !state.dependenciesCount,   // If we're evaluating when there are no previous dependencies, it must be the first time\r\n            dependencyDetectionContext = {\r\n                computedObservable: computedObservable,\r\n                disposalCandidates: state.dependencyTracking,\r\n                disposalCount: state.dependenciesCount\r\n            };\r\n\r\n        ko.dependencyDetection.begin({\r\n            callbackTarget: dependencyDetectionContext,\r\n            callback: computedBeginDependencyDetectionCallback,\r\n            computed: computedObservable,\r\n            isInitial: isInitial\r\n        });\r\n\r\n        state.dependencyTracking = {};\r\n        state.dependenciesCount = 0;\r\n\r\n        var newValue = this.evaluateImmediate_CallReadThenEndDependencyDetection(state, dependencyDetectionContext);\r\n\r\n        if (computedObservable.isDifferent(state.latestValue, newValue)) {\r\n            if (!state.isSleeping) {\r\n                computedObservable[\"notifySubscribers\"](state.latestValue, \"beforeChange\");\r\n            }\r\n\r\n            state.latestValue = newValue;\r\n            if (DEBUG) computedObservable._latestValue = newValue;\r\n\r\n            if (state.isSleeping) {\r\n                computedObservable.updateVersion();\r\n            } else if (notifyChange) {\r\n                computedObservable[\"notifySubscribers\"](state.latestValue);\r\n            }\r\n\r\n            changed = true;\r\n        }\r\n\r\n        if (isInitial) {\r\n            computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\r\n        }\r\n\r\n        return changed;\r\n    },\r\n    evaluateImmediate_CallReadThenEndDependencyDetection: function (state, dependencyDetectionContext) {\r\n        // This function is really part of the evaluateImmediate_CallReadWithDependencyDetection logic.\r\n        // You'd never call it from anywhere else. Factoring it out means that evaluateImmediate_CallReadWithDependencyDetection\r\n        // can be independent of try/finally blocks, which contributes to saving about 40% off the CPU\r\n        // overhead of computed evaluation (on V8 at least).\r\n\r\n        try {\r\n            var readFunction = state.readFunction;\r\n            return state.evaluatorFunctionTarget ? readFunction.call(state.evaluatorFunctionTarget) : readFunction();\r\n        } finally {\r\n            ko.dependencyDetection.end();\r\n\r\n            // For each subscription no longer being used, remove it from the active subscriptions list and dispose it\r\n            if (dependencyDetectionContext.disposalCount && !state.isSleeping) {\r\n                ko.utils.objectForEach(dependencyDetectionContext.disposalCandidates, computedDisposeDependencyCallback);\r\n            }\r\n\r\n            state.isStale = state.isDirty = false;\r\n        }\r\n    },\r\n    peek: function (evaluate) {\r\n        // By default, peek won't re-evaluate, except while the computed is sleeping or to get the initial value when \"deferEvaluation\" is set.\r\n        // Pass in true to evaluate if needed.\r\n        var state = this[computedState];\r\n        if ((state.isDirty && (evaluate || !state.dependenciesCount)) || (state.isSleeping && this.haveDependenciesChanged())) {\r\n            this.evaluateImmediate();\r\n        }\r\n        return state.latestValue;\r\n    },\r\n    limit: function (limitFunction) {\r\n        // Override the limit function with one that delays evaluation as well\r\n        ko.subscribable['fn'].limit.call(this, limitFunction);\r\n        this._evalIfChanged = function () {\r\n            if (this[computedState].isStale) {\r\n                this.evaluateImmediate();\r\n            } else {\r\n                this[computedState].isDirty = false;\r\n            }\r\n            return this[computedState].latestValue;\r\n        };\r\n        this._evalDelayed = function (isChange) {\r\n            this._limitBeforeChange(this[computedState].latestValue);\r\n\r\n            // Mark as dirty\r\n            this[computedState].isDirty = true;\r\n            if (isChange) {\r\n                this[computedState].isStale = true;\r\n            }\r\n\r\n            // Pass the observable to the \"limit\" code, which will evaluate it when\r\n            // it's time to do the notification.\r\n            this._limitChange(this);\r\n        };\r\n    },\r\n    dispose: function () {\r\n        var state = this[computedState];\r\n        if (!state.isSleeping && state.dependencyTracking) {\r\n            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                if (dependency.dispose)\r\n                    dependency.dispose();\r\n            });\r\n        }\r\n        if (state.disposeWhenNodeIsRemoved && state.domNodeDisposalCallback) {\r\n            ko.utils.domNodeDisposal.removeDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback);\r\n        }\r\n        state.dependencyTracking = null;\r\n        state.dependenciesCount = 0;\r\n        state.isDisposed = true;\r\n        state.isStale = false;\r\n        state.isDirty = false;\r\n        state.isSleeping = false;\r\n        state.disposeWhenNodeIsRemoved = null;\r\n    }\r\n};\r\n\r\nvar pureComputedOverrides = {\r\n    beforeSubscriptionAdd: function (event) {\r\n        // If asleep, wake up the computed by subscribing to any dependencies.\r\n        var computedObservable = this,\r\n            state = computedObservable[computedState];\r\n        if (!state.isDisposed && state.isSleeping && event == 'change') {\r\n            state.isSleeping = false;\r\n            if (state.isStale || computedObservable.haveDependenciesChanged()) {\r\n                state.dependencyTracking = null;\r\n                state.dependenciesCount = 0;\r\n                if (computedObservable.evaluateImmediate()) {\r\n                    computedObservable.updateVersion();\r\n                }\r\n            } else {\r\n                // First put the dependencies in order\r\n                var dependeciesOrder = [];\r\n                ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                    dependeciesOrder[dependency._order] = id;\r\n                });\r\n                // Next, subscribe to each one\r\n                ko.utils.arrayForEach(dependeciesOrder, function (id, order) {\r\n                    var dependency = state.dependencyTracking[id],\r\n                        subscription = computedObservable.subscribeToDependency(dependency._target);\r\n                    subscription._order = order;\r\n                    subscription._version = dependency._version;\r\n                    state.dependencyTracking[id] = subscription;\r\n                });\r\n            }\r\n            if (!state.isDisposed) {     // test since evaluating could trigger disposal\r\n                computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\r\n            }\r\n        }\r\n    },\r\n    afterSubscriptionRemove: function (event) {\r\n        var state = this[computedState];\r\n        if (!state.isDisposed && event == 'change' && !this.hasSubscriptionsForEvent('change')) {\r\n            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                if (dependency.dispose) {\r\n                    state.dependencyTracking[id] = {\r\n                        _target: dependency._target,\r\n                        _order: dependency._order,\r\n                        _version: dependency._version\r\n                    };\r\n                    dependency.dispose();\r\n                }\r\n            });\r\n            state.isSleeping = true;\r\n            this[\"notifySubscribers\"](undefined, \"asleep\");\r\n        }\r\n    },\r\n    getVersion: function () {\r\n        // Because a pure computed is not automatically updated while it is sleeping, we can't\r\n        // simply return the version number. Instead, we check if any of the dependencies have\r\n        // changed and conditionally re-evaluate the computed observable.\r\n        var state = this[computedState];\r\n        if (state.isSleeping && (state.isStale || this.haveDependenciesChanged())) {\r\n            this.evaluateImmediate();\r\n        }\r\n        return ko.subscribable['fn'].getVersion.call(this);\r\n    }\r\n};\r\n\r\nvar deferEvaluationOverrides = {\r\n    beforeSubscriptionAdd: function (event) {\r\n        // This will force a computed with deferEvaluation to evaluate when the first subscription is registered.\r\n        if (event == 'change' || event == 'beforeChange') {\r\n            this.peek();\r\n        }\r\n    }\r\n};\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.computed constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(computedFn, ko.subscribable['fn']);\r\n}\r\n\r\n// Set the proto chain values for ko.hasPrototype\r\nvar protoProp = ko.observable.protoProperty; // == \"__ko_proto__\"\r\nko.computed[protoProp] = ko.observable;\r\ncomputedFn[protoProp] = ko.computed;\r\n\r\nko.isComputed = function (instance) {\r\n    return ko.hasPrototype(instance, ko.computed);\r\n};\r\n\r\nko.isPureComputed = function (instance) {\r\n    return ko.hasPrototype(instance, ko.computed)\r\n        && instance[computedState] && instance[computedState].pure;\r\n};\r\n\r\nko.exportSymbol('computed', ko.computed);\r\nko.exportSymbol('dependentObservable', ko.computed);    // export ko.dependentObservable for backwards compatibility (1.x)\r\nko.exportSymbol('isComputed', ko.isComputed);\r\nko.exportSymbol('isPureComputed', ko.isPureComputed);\r\nko.exportSymbol('computed.fn', computedFn);\r\nko.exportProperty(computedFn, 'peek', computedFn.peek);\r\nko.exportProperty(computedFn, 'dispose', computedFn.dispose);\r\nko.exportProperty(computedFn, 'isActive', computedFn.isActive);\r\nko.exportProperty(computedFn, 'getDependenciesCount', computedFn.getDependenciesCount);\r\n\r\nko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {\r\n    if (typeof evaluatorFunctionOrOptions === 'function') {\r\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {'pure':true});\r\n    } else {\r\n        evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object\r\n        evaluatorFunctionOrOptions['pure'] = true;\r\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);\r\n    }\r\n}\r\nko.exportSymbol('pureComputed', ko.pureComputed);\r\n\r\n(function() {\r\n    var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)\r\n\r\n    ko.toJS = function(rootObject) {\r\n        if (arguments.length == 0)\r\n            throw new Error(\"When calling ko.toJS, pass the object you want to convert.\");\r\n\r\n        // We just unwrap everything at every level in the object graph\r\n        return mapJsObjectGraph(rootObject, function(valueToMap) {\r\n            // Loop because an observable's value might in turn be another observable wrapper\r\n            for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)\r\n                valueToMap = valueToMap();\r\n            return valueToMap;\r\n        });\r\n    };\r\n\r\n    ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional\r\n        var plainJavaScriptObject = ko.toJS(rootObject);\r\n        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);\r\n    };\r\n\r\n    function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {\r\n        visitedObjects = visitedObjects || new objectLookup();\r\n\r\n        rootObject = mapInputCallback(rootObject);\r\n        var canHaveProperties = (typeof rootObject == \"object\") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof RegExp)) && (!(rootObject instanceof Date)) && (!(rootObject instanceof String)) && (!(rootObject instanceof Number)) && (!(rootObject instanceof Boolean));\r\n        if (!canHaveProperties)\r\n            return rootObject;\r\n\r\n        var outputProperties = rootObject instanceof Array ? [] : {};\r\n        visitedObjects.save(rootObject, outputProperties);\r\n\r\n        visitPropertiesOrArrayEntries(rootObject, function(indexer) {\r\n            var propertyValue = mapInputCallback(rootObject[indexer]);\r\n\r\n            switch (typeof propertyValue) {\r\n                case \"boolean\":\r\n                case \"number\":\r\n                case \"string\":\r\n                case \"function\":\r\n                    outputProperties[indexer] = propertyValue;\r\n                    break;\r\n                case \"object\":\r\n                case \"undefined\":\r\n                    var previouslyMappedValue = visitedObjects.get(propertyValue);\r\n                    outputProperties[indexer] = (previouslyMappedValue !== undefined)\r\n                        ? previouslyMappedValue\r\n                        : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return outputProperties;\r\n    }\r\n\r\n    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\r\n        if (rootObject instanceof Array) {\r\n            for (var i = 0; i < rootObject.length; i++)\r\n                visitorCallback(i);\r\n\r\n            // For arrays, also respect toJSON property for custom mappings (fixes #278)\r\n            if (typeof rootObject['toJSON'] == 'function')\r\n                visitorCallback('toJSON');\r\n        } else {\r\n            for (var propertyName in rootObject) {\r\n                visitorCallback(propertyName);\r\n            }\r\n        }\r\n    };\r\n\r\n    function objectLookup() {\r\n        this.keys = [];\r\n        this.values = [];\r\n    };\r\n\r\n    objectLookup.prototype = {\r\n        constructor: objectLookup,\r\n        save: function(key, value) {\r\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n            if (existingIndex >= 0)\r\n                this.values[existingIndex] = value;\r\n            else {\r\n                this.keys.push(key);\r\n                this.values.push(value);\r\n            }\r\n        },\r\n        get: function(key) {\r\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n            return (existingIndex >= 0) ? this.values[existingIndex] : undefined;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('toJS', ko.toJS);\r\nko.exportSymbol('toJSON', ko.toJSON);\r\n(function () {\r\n    var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';\r\n\r\n    // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values\r\n    // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values\r\n    // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.\r\n    ko.selectExtensions = {\r\n        readValue : function(element) {\r\n            switch (ko.utils.tagNameLower(element)) {\r\n                case 'option':\r\n                    if (element[hasDomDataExpandoProperty] === true)\r\n                        return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);\r\n                    return ko.utils.ieVersion <= 7\r\n                        ? (element.getAttributeNode('value') && element.getAttributeNode('value').specified ? element.value : element.text)\r\n                        : element.value;\r\n                case 'select':\r\n                    return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;\r\n                default:\r\n                    return element.value;\r\n            }\r\n        },\r\n\r\n        writeValue: function(element, value, allowUnset) {\r\n            switch (ko.utils.tagNameLower(element)) {\r\n                case 'option':\r\n                    switch(typeof value) {\r\n                        case \"string\":\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);\r\n                            if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node\r\n                                delete element[hasDomDataExpandoProperty];\r\n                            }\r\n                            element.value = value;\r\n                            break;\r\n                        default:\r\n                            // Store arbitrary object using DomData\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);\r\n                            element[hasDomDataExpandoProperty] = true;\r\n\r\n                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.\r\n                            element.value = typeof value === \"number\" ? value : \"\";\r\n                            break;\r\n                    }\r\n                    break;\r\n                case 'select':\r\n                    if (value === \"\" || value === null)       // A blank string or null value will select the caption\r\n                        value = undefined;\r\n                    var selection = -1;\r\n                    for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {\r\n                        optionValue = ko.selectExtensions.readValue(element.options[i]);\r\n                        // Include special check to handle selecting a caption with a blank string value\r\n                        if (optionValue == value || (optionValue == \"\" && value === undefined)) {\r\n                            selection = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (allowUnset || selection >= 0 || (value === undefined && element.size > 1)) {\r\n                        element.selectedIndex = selection;\r\n                    }\r\n                    break;\r\n                default:\r\n                    if ((value === null) || (value === undefined))\r\n                        value = \"\";\r\n                    element.value = value;\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('selectExtensions', ko.selectExtensions);\r\nko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);\r\nko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);\r\nko.expressionRewriting = (function () {\r\n    var javaScriptReservedWords = [\"true\", \"false\", \"null\", \"undefined\"];\r\n\r\n    // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor\r\n    // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).\r\n    // This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).\r\n    var javaScriptAssignmentTarget = /^(?:[$_a-z][$\\w]*|(.+)(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i;\r\n\r\n    function getWriteableValue(expression) {\r\n        if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) >= 0)\r\n            return false;\r\n        var match = expression.match(javaScriptAssignmentTarget);\r\n        return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;\r\n    }\r\n\r\n    // The following regular expressions will be used to split an object-literal string into tokens\r\n\r\n        // These two match strings, either with double quotes or single quotes\r\n    var stringDouble = '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"',\r\n        stringSingle = \"'(?:[^'\\\\\\\\]|\\\\\\\\.)*'\",\r\n        // Matches a regular expression (text enclosed by slashes), but will also match sets of divisions\r\n        // as a regular expression (this is handled by the parsing loop below).\r\n        stringRegexp = '/(?:[^/\\\\\\\\]|\\\\\\\\.)*/\\w*',\r\n        // These characters have special meaning to the parser and must not appear in the middle of a\r\n        // token, except as part of a string.\r\n        specials = ',\"\\'{}()/:[\\\\]',\r\n        // Match text (at least two characters) that does not contain any of the above special characters,\r\n        // although some of the special characters are allowed to start it (all but the colon and comma).\r\n        // The text can contain spaces, but leading or trailing spaces are skipped.\r\n        everyThingElse = '[^\\\\s:,/][^' + specials + ']*[^\\\\s' + specials + ']',\r\n        // Match any non-space character not matched already. This will match colons and commas, since they're\r\n        // not matched by \"everyThingElse\", but will also match any other single character that wasn't already\r\n        // matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).\r\n        oneNotSpace = '[^\\\\s]',\r\n\r\n        // Create the actual regular expression by or-ing the above strings. The order is important.\r\n        bindingToken = RegExp(stringDouble + '|' + stringSingle + '|' + stringRegexp + '|' + everyThingElse + '|' + oneNotSpace, 'g'),\r\n\r\n        // Match end of previous token to determine whether a slash is a division or regex.\r\n        divisionLookBehind = /[\\])\"'A-Za-z0-9_$]+$/,\r\n        keywordRegexLookBehind = {'in':1,'return':1,'typeof':1};\r\n\r\n    function parseObjectLiteral(objectLiteralString) {\r\n        // Trim leading and trailing spaces from the string\r\n        var str = ko.utils.stringTrim(objectLiteralString);\r\n\r\n        // Trim braces '{' surrounding the whole object literal\r\n        if (str.charCodeAt(0) === 123) str = str.slice(1, -1);\r\n\r\n        // Split into tokens\r\n        var result = [], toks = str.match(bindingToken), key, values = [], depth = 0;\r\n\r\n        if (toks) {\r\n            // Append a comma so that we don't need a separate code block to deal with the last item\r\n            toks.push(',');\r\n\r\n            for (var i = 0, tok; tok = toks[i]; ++i) {\r\n                var c = tok.charCodeAt(0);\r\n                // A comma signals the end of a key/value pair if depth is zero\r\n                if (c === 44) { // \",\"\r\n                    if (depth <= 0) {\r\n                        result.push((key && values.length) ? {key: key, value: values.join('')} : {'unknown': key || values.join('')});\r\n                        key = depth = 0;\r\n                        values = [];\r\n                        continue;\r\n                    }\r\n                // Simply skip the colon that separates the name and value\r\n                } else if (c === 58) { // \":\"\r\n                    if (!depth && !key && values.length === 1) {\r\n                        key = values.pop();\r\n                        continue;\r\n                    }\r\n                // A set of slashes is initially matched as a regular expression, but could be division\r\n                } else if (c === 47 && i && tok.length > 1) {  // \"/\"\r\n                    // Look at the end of the previous token to determine if the slash is actually division\r\n                    var match = toks[i-1].match(divisionLookBehind);\r\n                    if (match && !keywordRegexLookBehind[match[0]]) {\r\n                        // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)\r\n                        str = str.substr(str.indexOf(tok) + 1);\r\n                        toks = str.match(bindingToken);\r\n                        toks.push(',');\r\n                        i = -1;\r\n                        // Continue with just the slash\r\n                        tok = '/';\r\n                    }\r\n                // Increment depth for parentheses, braces, and brackets so that interior commas are ignored\r\n                } else if (c === 40 || c === 123 || c === 91) { // '(', '{', '['\r\n                    ++depth;\r\n                } else if (c === 41 || c === 125 || c === 93) { // ')', '}', ']'\r\n                    --depth;\r\n                // The key will be the first token; if it's a string, trim the quotes\r\n                } else if (!key && !values.length && (c === 34 || c === 39)) { // '\"', \"'\"\r\n                    tok = tok.slice(1, -1);\r\n                }\r\n                values.push(tok);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.\r\n    var twoWayBindings = {};\r\n\r\n    function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {\r\n        bindingOptions = bindingOptions || {};\r\n\r\n        function processKeyValue(key, val) {\r\n            var writableVal;\r\n            function callPreprocessHook(obj) {\r\n                return (obj && obj['preprocess']) ? (val = obj['preprocess'](val, key, processKeyValue)) : true;\r\n            }\r\n            if (!bindingParams) {\r\n                if (!callPreprocessHook(ko['getBindingHandler'](key)))\r\n                    return;\r\n\r\n                if (twoWayBindings[key] && (writableVal = getWriteableValue(val))) {\r\n                    // For two-way bindings, provide a write method in case the value\r\n                    // isn't a writable observable.\r\n                    propertyAccessorResultStrings.push(\"'\" + key + \"':function(_z){\" + writableVal + \"=_z}\");\r\n                }\r\n            }\r\n            // Values are wrapped in a function so that each value can be accessed independently\r\n            if (makeValueAccessors) {\r\n                val = 'function(){return ' + val + ' }';\r\n            }\r\n            resultStrings.push(\"'\" + key + \"':\" + val);\r\n        }\r\n\r\n        var resultStrings = [],\r\n            propertyAccessorResultStrings = [],\r\n            makeValueAccessors = bindingOptions['valueAccessors'],\r\n            bindingParams = bindingOptions['bindingParams'],\r\n            keyValueArray = typeof bindingsStringOrKeyValueArray === \"string\" ?\r\n                parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;\r\n\r\n        ko.utils.arrayForEach(keyValueArray, function(keyValue) {\r\n            processKeyValue(keyValue.key || keyValue['unknown'], keyValue.value);\r\n        });\r\n\r\n        if (propertyAccessorResultStrings.length)\r\n            processKeyValue('_ko_property_writers', \"{\" + propertyAccessorResultStrings.join(\",\") + \" }\");\r\n\r\n        return resultStrings.join(\",\");\r\n    }\r\n\r\n    return {\r\n        bindingRewriteValidators: [],\r\n\r\n        twoWayBindings: twoWayBindings,\r\n\r\n        parseObjectLiteral: parseObjectLiteral,\r\n\r\n        preProcessBindings: preProcessBindings,\r\n\r\n        keyValueArrayContainsKey: function(keyValueArray, key) {\r\n            for (var i = 0; i < keyValueArray.length; i++)\r\n                if (keyValueArray[i]['key'] == key)\r\n                    return true;\r\n            return false;\r\n        },\r\n\r\n        // Internal, private KO utility for updating model properties from within bindings\r\n        // property:            If the property being updated is (or might be) an observable, pass it here\r\n        //                      If it turns out to be a writable observable, it will be written to directly\r\n        // allBindings:         An object with a get method to retrieve bindings in the current execution context.\r\n        //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable\r\n        // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'\r\n        // value:               The value to be written\r\n        // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if\r\n        //                      it is !== existing value on that writable observable\r\n        writeValueToProperty: function(property, allBindings, key, value, checkIfDifferent) {\r\n            if (!property || !ko.isObservable(property)) {\r\n                var propWriters = allBindings.get('_ko_property_writers');\r\n                if (propWriters && propWriters[key])\r\n                    propWriters[key](value);\r\n            } else if (ko.isWriteableObservable(property) && (!checkIfDifferent || property.peek() !== value)) {\r\n                property(value);\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('expressionRewriting', ko.expressionRewriting);\r\nko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);\r\nko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);\r\nko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);\r\n\r\n// Making bindings explicitly declare themselves as \"two way\" isn't ideal in the long term (it would be better if\r\n// all bindings could use an official 'property writer' API without needing to declare that they might). However,\r\n// since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable\r\n// as an internal implementation detail in the short term.\r\n// For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an\r\n// undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official\r\n// public API, and we reserve the right to remove it at any time if we create a real public property writers API.\r\nko.exportSymbol('expressionRewriting._twoWayBindings', ko.expressionRewriting.twoWayBindings);\r\n\r\n// For backward compatibility, define the following aliases. (Previously, these function names were misleading because\r\n// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)\r\nko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);\r\nko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);\r\n(function() {\r\n    // \"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes\r\n    // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).\r\n    // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state\r\n    // of that virtual hierarchy\r\n    //\r\n    // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)\r\n    // without having to scatter special cases all over the binding and templating code.\r\n\r\n    // IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)\r\n    // but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don't have that property.\r\n    // So, use node.text where available, and node.nodeValue elsewhere\r\n    var commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\r\n\r\n    var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\r\n    var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\\s*\\/ko\\s*-->$/ : /^\\s*\\/ko\\s*$/;\r\n    var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };\r\n\r\n    function isStartComment(node) {\r\n        return (node.nodeType == 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n    }\r\n\r\n    function isEndComment(node) {\r\n        return (node.nodeType == 8) && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n    }\r\n\r\n    function getVirtualChildren(startComment, allowUnbalanced) {\r\n        var currentNode = startComment;\r\n        var depth = 1;\r\n        var children = [];\r\n        while (currentNode = currentNode.nextSibling) {\r\n            if (isEndComment(currentNode)) {\r\n                depth--;\r\n                if (depth === 0)\r\n                    return children;\r\n            }\r\n\r\n            children.push(currentNode);\r\n\r\n            if (isStartComment(currentNode))\r\n                depth++;\r\n        }\r\n        if (!allowUnbalanced)\r\n            throw new Error(\"Cannot find closing comment tag to match: \" + startComment.nodeValue);\r\n        return null;\r\n    }\r\n\r\n    function getMatchingEndComment(startComment, allowUnbalanced) {\r\n        var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);\r\n        if (allVirtualChildren) {\r\n            if (allVirtualChildren.length > 0)\r\n                return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;\r\n            return startComment.nextSibling;\r\n        } else\r\n            return null; // Must have no matching end comment, and allowUnbalanced is true\r\n    }\r\n\r\n    function getUnbalancedChildTags(node) {\r\n        // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>\r\n        //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->\r\n        var childNode = node.firstChild, captureRemaining = null;\r\n        if (childNode) {\r\n            do {\r\n                if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes\r\n                    captureRemaining.push(childNode);\r\n                else if (isStartComment(childNode)) {\r\n                    var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);\r\n                    if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set\r\n                        childNode = matchingEndComment;\r\n                    else\r\n                        captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point\r\n                } else if (isEndComment(childNode)) {\r\n                    captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing\r\n                }\r\n            } while (childNode = childNode.nextSibling);\r\n        }\r\n        return captureRemaining;\r\n    }\r\n\r\n    ko.virtualElements = {\r\n        allowedBindings: {},\r\n\r\n        childNodes: function(node) {\r\n            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;\r\n        },\r\n\r\n        emptyNode: function(node) {\r\n            if (!isStartComment(node))\r\n                ko.utils.emptyDomNode(node);\r\n            else {\r\n                var virtualChildren = ko.virtualElements.childNodes(node);\r\n                for (var i = 0, j = virtualChildren.length; i < j; i++)\r\n                    ko.removeNode(virtualChildren[i]);\r\n            }\r\n        },\r\n\r\n        setDomNodeChildren: function(node, childNodes) {\r\n            if (!isStartComment(node))\r\n                ko.utils.setDomNodeChildren(node, childNodes);\r\n            else {\r\n                ko.virtualElements.emptyNode(node);\r\n                var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children\r\n                for (var i = 0, j = childNodes.length; i < j; i++)\r\n                    endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);\r\n            }\r\n        },\r\n\r\n        prepend: function(containerNode, nodeToPrepend) {\r\n            if (!isStartComment(containerNode)) {\r\n                if (containerNode.firstChild)\r\n                    containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);\r\n                else\r\n                    containerNode.appendChild(nodeToPrepend);\r\n            } else {\r\n                // Start comments must always have a parent and at least one following sibling (the end comment)\r\n                containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);\r\n            }\r\n        },\r\n\r\n        insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {\r\n            if (!insertAfterNode) {\r\n                ko.virtualElements.prepend(containerNode, nodeToInsert);\r\n            } else if (!isStartComment(containerNode)) {\r\n                // Insert after insertion point\r\n                if (insertAfterNode.nextSibling)\r\n                    containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n                else\r\n                    containerNode.appendChild(nodeToInsert);\r\n            } else {\r\n                // Children of start comments must always have a parent and at least one following sibling (the end comment)\r\n                containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n            }\r\n        },\r\n\r\n        firstChild: function(node) {\r\n            if (!isStartComment(node))\r\n                return node.firstChild;\r\n            if (!node.nextSibling || isEndComment(node.nextSibling))\r\n                return null;\r\n            return node.nextSibling;\r\n        },\r\n\r\n        nextSibling: function(node) {\r\n            if (isStartComment(node))\r\n                node = getMatchingEndComment(node);\r\n            if (node.nextSibling && isEndComment(node.nextSibling))\r\n                return null;\r\n            return node.nextSibling;\r\n        },\r\n\r\n        hasBindingValue: isStartComment,\r\n\r\n        virtualNodeBindingValue: function(node) {\r\n            var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);\r\n            return regexMatch ? regexMatch[1] : null;\r\n        },\r\n\r\n        normaliseVirtualElementDomStructure: function(elementVerified) {\r\n            // Workaround for https://github.com/SteveSanderson/knockout/issues/155\r\n            // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes\r\n            // that are direct descendants of <ul> into the preceding <li>)\r\n            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])\r\n                return;\r\n\r\n            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags\r\n            // must be intended to appear *after* that child, so move them there.\r\n            var childNode = elementVerified.firstChild;\r\n            if (childNode) {\r\n                do {\r\n                    if (childNode.nodeType === 1) {\r\n                        var unbalancedTags = getUnbalancedChildTags(childNode);\r\n                        if (unbalancedTags) {\r\n                            // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child\r\n                            var nodeToInsertBefore = childNode.nextSibling;\r\n                            for (var i = 0; i < unbalancedTags.length; i++) {\r\n                                if (nodeToInsertBefore)\r\n                                    elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);\r\n                                else\r\n                                    elementVerified.appendChild(unbalancedTags[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                } while (childNode = childNode.nextSibling);\r\n            }\r\n        }\r\n    };\r\n})();\r\nko.exportSymbol('virtualElements', ko.virtualElements);\r\nko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);\r\nko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);\r\n//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified\r\nko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);\r\n//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified\r\nko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);\r\nko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);\r\n(function() {\r\n    var defaultBindingAttributeName = \"data-bind\";\r\n\r\n    ko.bindingProvider = function() {\r\n        this.bindingCache = {};\r\n    };\r\n\r\n    ko.utils.extend(ko.bindingProvider.prototype, {\r\n        'nodeHasBindings': function(node) {\r\n            switch (node.nodeType) {\r\n                case 1: // Element\r\n                    return node.getAttribute(defaultBindingAttributeName) != null\r\n                        || ko.components['getComponentNameForNode'](node);\r\n                case 8: // Comment node\r\n                    return ko.virtualElements.hasBindingValue(node);\r\n                default: return false;\r\n            }\r\n        },\r\n\r\n        'getBindings': function(node, bindingContext) {\r\n            var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;\r\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ false);\r\n        },\r\n\r\n        'getBindingAccessors': function(node, bindingContext) {\r\n            var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node, { 'valueAccessors': true }) : null;\r\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ true);\r\n        },\r\n\r\n        // The following function is only used internally by this default provider.\r\n        // It's not part of the interface definition for a general binding provider.\r\n        'getBindingsString': function(node, bindingContext) {\r\n            switch (node.nodeType) {\r\n                case 1: return node.getAttribute(defaultBindingAttributeName);   // Element\r\n                case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node\r\n                default: return null;\r\n            }\r\n        },\r\n\r\n        // The following function is only used internally by this default provider.\r\n        // It's not part of the interface definition for a general binding provider.\r\n        'parseBindingsString': function(bindingsString, bindingContext, node, options) {\r\n            try {\r\n                var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);\r\n                return bindingFunction(bindingContext, node);\r\n            } catch (ex) {\r\n                ex.message = \"Unable to parse bindings.\\nBindings value: \" + bindingsString + \"\\nMessage: \" + ex.message;\r\n                throw ex;\r\n            }\r\n        }\r\n    });\r\n\r\n    ko.bindingProvider['instance'] = new ko.bindingProvider();\r\n\r\n    function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {\r\n        var cacheKey = bindingsString + (options && options['valueAccessors'] || '');\r\n        return cache[cacheKey]\r\n            || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));\r\n    }\r\n\r\n    function createBindingsStringEvaluator(bindingsString, options) {\r\n        // Build the source for a function that evaluates \"expression\"\r\n        // For each scope variable, add an extra level of \"with\" nesting\r\n        // Example result: with(sc1) { with(sc0) { return (expression) } }\r\n        var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),\r\n            functionBody = \"with($context){with($data||{}){return{\" + rewrittenBindings + \"}}}\";\r\n        return new Function(\"$context\", \"$element\", functionBody);\r\n    }\r\n})();\r\n\r\nko.exportSymbol('bindingProvider', ko.bindingProvider);\r\n(function () {\r\n    ko.bindingHandlers = {};\r\n\r\n    // The following element types will not be recursed into during binding.\r\n    var bindingDoesNotRecurseIntoElementTypes = {\r\n        // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,\r\n        // because it's unexpected and a potential XSS issue.\r\n        // Also bindings should not operate on <template> elements since this breaks in Internet Explorer\r\n        // and because such elements' contents are always intended to be bound in a different context\r\n        // from where they appear in the document.\r\n        'script': true,\r\n        'textarea': true,\r\n        'template': true\r\n    };\r\n\r\n    // Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers\r\n    ko['getBindingHandler'] = function(bindingKey) {\r\n        return ko.bindingHandlers[bindingKey];\r\n    };\r\n\r\n    // The ko.bindingContext constructor is only called directly to create the root context. For child\r\n    // contexts, use bindingContext.createChildContext or bindingContext.extend.\r\n    ko.bindingContext = function(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback, options) {\r\n\r\n        // The binding context object includes static properties for the current, parent, and root view models.\r\n        // If a view model is actually stored in an observable, the corresponding binding context object, and\r\n        // any child contexts, must be updated when the view model is changed.\r\n        function updateContext() {\r\n            // Most of the time, the context will directly get a view model object, but if a function is given,\r\n            // we call the function to retrieve the view model. If the function accesses any observables or returns\r\n            // an observable, the dependency is tracked, and those observables can later cause the binding\r\n            // context to be updated.\r\n            var dataItemOrObservable = isFunc ? dataItemOrAccessor() : dataItemOrAccessor,\r\n                dataItem = ko.utils.unwrapObservable(dataItemOrObservable);\r\n\r\n            if (parentContext) {\r\n                // When a \"parent\" context is given, register a dependency on the parent context. Thus whenever the\r\n                // parent context is updated, this context will also be updated.\r\n                if (parentContext._subscribable)\r\n                    parentContext._subscribable();\r\n\r\n                // Copy $root and any custom properties from the parent context\r\n                ko.utils.extend(self, parentContext);\r\n\r\n                // Because the above copy overwrites our own properties, we need to reset them.\r\n                self._subscribable = subscribable;\r\n            } else {\r\n                self['$parents'] = [];\r\n                self['$root'] = dataItem;\r\n\r\n                // Export 'ko' in the binding context so it will be available in bindings and templates\r\n                // even if 'ko' isn't exported as a global, such as when using an AMD loader.\r\n                // See https://github.com/SteveSanderson/knockout/issues/490\r\n                self['ko'] = ko;\r\n            }\r\n            self['$rawData'] = dataItemOrObservable;\r\n            self['$data'] = dataItem;\r\n            if (dataItemAlias)\r\n                self[dataItemAlias] = dataItem;\r\n\r\n            // The extendCallback function is provided when creating a child context or extending a context.\r\n            // It handles the specific actions needed to finish setting up the binding context. Actions in this\r\n            // function could also add dependencies to this binding context.\r\n            if (extendCallback)\r\n                extendCallback(self, parentContext, dataItem);\r\n\r\n            return self['$data'];\r\n        }\r\n        function disposeWhen() {\r\n            return nodes && !ko.utils.anyDomNodeIsAttachedToDocument(nodes);\r\n        }\r\n\r\n        var self = this,\r\n            isFunc = typeof(dataItemOrAccessor) == \"function\" && !ko.isObservable(dataItemOrAccessor),\r\n            nodes,\r\n            subscribable;\r\n\r\n        if (options && options['exportDependencies']) {\r\n            // The \"exportDependencies\" option means that the calling code will track any dependencies and re-create\r\n            // the binding context when they change.\r\n            updateContext();\r\n        } else {\r\n            subscribable = ko.dependentObservable(updateContext, null, { disposeWhen: disposeWhen, disposeWhenNodeIsRemoved: true });\r\n\r\n            // At this point, the binding context has been initialized, and the \"subscribable\" computed observable is\r\n            // subscribed to any observables that were accessed in the process. If there is nothing to track, the\r\n            // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in\r\n            // the context object.\r\n            if (subscribable.isActive()) {\r\n                self._subscribable = subscribable;\r\n\r\n                // Always notify because even if the model ($data) hasn't changed, other context properties might have changed\r\n                subscribable['equalityComparer'] = null;\r\n\r\n                // We need to be able to dispose of this computed observable when it's no longer needed. This would be\r\n                // easy if we had a single node to watch, but binding contexts can be used by many different nodes, and\r\n                // we cannot assume that those nodes have any relation to each other. So instead we track any node that\r\n                // the context is attached to, and dispose the computed when all of those nodes have been cleaned.\r\n\r\n                // Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates\r\n                nodes = [];\r\n                subscribable._addNode = function(node) {\r\n                    nodes.push(node);\r\n                    ko.utils.domNodeDisposal.addDisposeCallback(node, function(node) {\r\n                        ko.utils.arrayRemoveItem(nodes, node);\r\n                        if (!nodes.length) {\r\n                            subscribable.dispose();\r\n                            self._subscribable = subscribable = undefined;\r\n                        }\r\n                    });\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extend the binding context hierarchy with a new view model object. If the parent context is watching\r\n    // any observables, the new child context will automatically get a dependency on the parent context.\r\n    // But this does not mean that the $data value of the child context will also get updated. If the child\r\n    // view model also depends on the parent view model, you must provide a function that returns the correct\r\n    // view model on each update.\r\n    ko.bindingContext.prototype['createChildContext'] = function (dataItemOrAccessor, dataItemAlias, extendCallback, options) {\r\n        return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function(self, parentContext) {\r\n            // Extend the context hierarchy by setting the appropriate pointers\r\n            self['$parentContext'] = parentContext;\r\n            self['$parent'] = parentContext['$data'];\r\n            self['$parents'] = (parentContext['$parents'] || []).slice(0);\r\n            self['$parents'].unshift(self['$parent']);\r\n            if (extendCallback)\r\n                extendCallback(self);\r\n        }, options);\r\n    };\r\n\r\n    // Extend the binding context with new custom properties. This doesn't change the context hierarchy.\r\n    // Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set\r\n    // when an observable view model is updated.\r\n    ko.bindingContext.prototype['extend'] = function(properties) {\r\n        // If the parent context references an observable view model, \"_subscribable\" will always be the\r\n        // latest view model object. If not, \"_subscribable\" isn't set, and we can use the static \"$data\" value.\r\n        return new ko.bindingContext(this._subscribable || this['$data'], this, null, function(self, parentContext) {\r\n            // This \"child\" context doesn't directly track a parent observable view model,\r\n            // so we need to manually set the $rawData value to match the parent.\r\n            self['$rawData'] = parentContext['$rawData'];\r\n            ko.utils.extend(self, typeof(properties) == \"function\" ? properties() : properties);\r\n        });\r\n    };\r\n\r\n    ko.bindingContext.prototype.createStaticChildContext = function (dataItemOrAccessor, dataItemAlias) {\r\n        return this['createChildContext'](dataItemOrAccessor, dataItemAlias, null, { \"exportDependencies\": true });\r\n    };\r\n\r\n    // Returns the valueAccesor function for a binding value\r\n    function makeValueAccessor(value) {\r\n        return function() {\r\n            return value;\r\n        };\r\n    }\r\n\r\n    // Returns the value of a valueAccessor function\r\n    function evaluateValueAccessor(valueAccessor) {\r\n        return valueAccessor();\r\n    }\r\n\r\n    // Given a function that returns bindings, create and return a new object that contains\r\n    // binding value-accessors functions. Each accessor function calls the original function\r\n    // so that it always gets the latest value and all dependencies are captured. This is used\r\n    // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.\r\n    function makeAccessorsFromFunction(callback) {\r\n        return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function(value, key) {\r\n            return function() {\r\n                return callback()[key];\r\n            };\r\n        });\r\n    }\r\n\r\n    // Given a bindings function or object, create and return a new object that contains\r\n    // binding value-accessors functions. This is used by ko.applyBindingsToNode.\r\n    function makeBindingAccessors(bindings, context, node) {\r\n        if (typeof bindings === 'function') {\r\n            return makeAccessorsFromFunction(bindings.bind(null, context, node));\r\n        } else {\r\n            return ko.utils.objectMap(bindings, makeValueAccessor);\r\n        }\r\n    }\r\n\r\n    // This function is used if the binding provider doesn't include a getBindingAccessors function.\r\n    // It must be called with 'this' set to the provider instance.\r\n    function getBindingsAndMakeAccessors(node, context) {\r\n        return makeAccessorsFromFunction(this['getBindings'].bind(this, node, context));\r\n    }\r\n\r\n    function validateThatBindingIsAllowedForVirtualElements(bindingName) {\r\n        var validator = ko.virtualElements.allowedBindings[bindingName];\r\n        if (!validator)\r\n            throw new Error(\"The binding '\" + bindingName + \"' cannot be used with virtual elements\")\r\n    }\r\n\r\n    function applyBindingsToDescendantsInternal (bindingContext, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {\r\n        var currentChild,\r\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement),\r\n            provider = ko.bindingProvider['instance'],\r\n            preprocessNode = provider['preprocessNode'];\r\n\r\n        // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's\r\n        // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to\r\n        // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that\r\n        // trigger insertion of <template> contents at that point in the document.\r\n        if (preprocessNode) {\r\n            while (currentChild = nextInQueue) {\r\n                nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n                preprocessNode.call(provider, currentChild);\r\n            }\r\n            // Reset nextInQueue for the next loop\r\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\r\n        }\r\n\r\n        while (currentChild = nextInQueue) {\r\n            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position\r\n            nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n            applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild, bindingContextsMayDifferFromDomParentElement);\r\n        }\r\n    }\r\n\r\n    function applyBindingsToNodeAndDescendantsInternal (bindingContext, nodeVerified, bindingContextMayDifferFromDomParentElement) {\r\n        var shouldBindDescendants = true;\r\n\r\n        // Perf optimisation: Apply bindings only if...\r\n        // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)\r\n        //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those\r\n        // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)\r\n        var isElement = (nodeVerified.nodeType === 1);\r\n        if (isElement) // Workaround IE <= 8 HTML parsing weirdness\r\n            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);\r\n\r\n        var shouldApplyBindings = (isElement && bindingContextMayDifferFromDomParentElement)             // Case (1)\r\n                               || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);       // Case (2)\r\n        if (shouldApplyBindings)\r\n            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext, bindingContextMayDifferFromDomParentElement)['shouldBindDescendants'];\r\n\r\n        if (shouldBindDescendants && !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {\r\n            // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,\r\n            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,\r\n            //    hence bindingContextsMayDifferFromDomParentElement is false\r\n            //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may\r\n            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,\r\n            //    hence bindingContextsMayDifferFromDomParentElement is true\r\n            applyBindingsToDescendantsInternal(bindingContext, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);\r\n        }\r\n    }\r\n\r\n    var boundElementDomDataKey = ko.utils.domData.nextKey();\r\n\r\n\r\n    function topologicalSortBindings(bindings) {\r\n        // Depth-first sort\r\n        var result = [],                // The list of key/handler pairs that we will return\r\n            bindingsConsidered = {},    // A temporary record of which bindings are already in 'result'\r\n            cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it\r\n        ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {\r\n            if (!bindingsConsidered[bindingKey]) {\r\n                var binding = ko['getBindingHandler'](bindingKey);\r\n                if (binding) {\r\n                    // First add dependencies (if any) of the current binding\r\n                    if (binding['after']) {\r\n                        cyclicDependencyStack.push(bindingKey);\r\n                        ko.utils.arrayForEach(binding['after'], function(bindingDependencyKey) {\r\n                            if (bindings[bindingDependencyKey]) {\r\n                                if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {\r\n                                    throw Error(\"Cannot combine the following bindings, because they have a cyclic dependency: \" + cyclicDependencyStack.join(\", \"));\r\n                                } else {\r\n                                    pushBinding(bindingDependencyKey);\r\n                                }\r\n                            }\r\n                        });\r\n                        cyclicDependencyStack.length--;\r\n                    }\r\n                    // Next add the current binding\r\n                    result.push({ key: bindingKey, handler: binding });\r\n                }\r\n                bindingsConsidered[bindingKey] = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    function applyBindingsToNodeInternal(node, sourceBindings, bindingContext, bindingContextMayDifferFromDomParentElement) {\r\n        // Prevent multiple applyBindings calls for the same node, except when a binding value is specified\r\n        var alreadyBound = ko.utils.domData.get(node, boundElementDomDataKey);\r\n        if (!sourceBindings) {\r\n            if (alreadyBound) {\r\n                throw Error(\"You cannot apply bindings multiple times to the same element.\");\r\n            }\r\n            ko.utils.domData.set(node, boundElementDomDataKey, true);\r\n        }\r\n\r\n        // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because\r\n        // we can easily recover it just by scanning up the node's ancestors in the DOM\r\n        // (note: here, parent node means \"real DOM parent\" not \"virtual parent\", as there's no O(1) way to find the virtual parent)\r\n        if (!alreadyBound && bindingContextMayDifferFromDomParentElement)\r\n            ko.storedBindingContextForNode(node, bindingContext);\r\n\r\n        // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings\r\n        var bindings;\r\n        if (sourceBindings && typeof sourceBindings !== 'function') {\r\n            bindings = sourceBindings;\r\n        } else {\r\n            var provider = ko.bindingProvider['instance'],\r\n                getBindings = provider['getBindingAccessors'] || getBindingsAndMakeAccessors;\r\n\r\n            // Get the binding from the provider within a computed observable so that we can update the bindings whenever\r\n            // the binding context is updated or if the binding provider accesses observables.\r\n            var bindingsUpdater = ko.dependentObservable(\r\n                function() {\r\n                    bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);\r\n                    // Register a dependency on the binding context to support observable view models.\r\n                    if (bindings && bindingContext._subscribable)\r\n                        bindingContext._subscribable();\r\n                    return bindings;\r\n                },\r\n                null, { disposeWhenNodeIsRemoved: node }\r\n            );\r\n\r\n            if (!bindings || !bindingsUpdater.isActive())\r\n                bindingsUpdater = null;\r\n        }\r\n\r\n        var bindingHandlerThatControlsDescendantBindings;\r\n        if (bindings) {\r\n            // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding\r\n            // context update), just return the value accessor from the binding. Otherwise, return a function that always gets\r\n            // the latest binding value and registers a dependency on the binding updater.\r\n            var getValueAccessor = bindingsUpdater\r\n                ? function(bindingKey) {\r\n                    return function() {\r\n                        return evaluateValueAccessor(bindingsUpdater()[bindingKey]);\r\n                    };\r\n                } : function(bindingKey) {\r\n                    return bindings[bindingKey];\r\n                };\r\n\r\n            // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated\r\n            function allBindings() {\r\n                return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);\r\n            }\r\n            // The following is the 3.x allBindings API\r\n            allBindings['get'] = function(key) {\r\n                return bindings[key] && evaluateValueAccessor(getValueAccessor(key));\r\n            };\r\n            allBindings['has'] = function(key) {\r\n                return key in bindings;\r\n            };\r\n\r\n            // First put the bindings into the right order\r\n            var orderedBindings = topologicalSortBindings(bindings);\r\n\r\n            // Go through the sorted bindings, calling init and update for each\r\n            ko.utils.arrayForEach(orderedBindings, function(bindingKeyAndHandler) {\r\n                // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,\r\n                // so bindingKeyAndHandler.handler will always be nonnull.\r\n                var handlerInitFn = bindingKeyAndHandler.handler[\"init\"],\r\n                    handlerUpdateFn = bindingKeyAndHandler.handler[\"update\"],\r\n                    bindingKey = bindingKeyAndHandler.key;\r\n\r\n                if (node.nodeType === 8) {\r\n                    validateThatBindingIsAllowedForVirtualElements(bindingKey);\r\n                }\r\n\r\n                try {\r\n                    // Run init, ignoring any dependencies\r\n                    if (typeof handlerInitFn == \"function\") {\r\n                        ko.dependencyDetection.ignore(function() {\r\n                            var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\r\n\r\n                            // If this binding handler claims to control descendant bindings, make a note of this\r\n                            if (initResult && initResult['controlsDescendantBindings']) {\r\n                                if (bindingHandlerThatControlsDescendantBindings !== undefined)\r\n                                    throw new Error(\"Multiple bindings (\" + bindingHandlerThatControlsDescendantBindings + \" and \" + bindingKey + \") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\");\r\n                                bindingHandlerThatControlsDescendantBindings = bindingKey;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // Run update in its own computed wrapper\r\n                    if (typeof handlerUpdateFn == \"function\") {\r\n                        ko.dependentObservable(\r\n                            function() {\r\n                                handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\r\n                            },\r\n                            null,\r\n                            { disposeWhenNodeIsRemoved: node }\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    ex.message = \"Unable to process binding \\\"\" + bindingKey + \": \" + bindings[bindingKey] + \"\\\"\\nMessage: \" + ex.message;\r\n                    throw ex;\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            'shouldBindDescendants': bindingHandlerThatControlsDescendantBindings === undefined\r\n        };\r\n    };\r\n\r\n    var storedBindingContextDomDataKey = ko.utils.domData.nextKey();\r\n    ko.storedBindingContextForNode = function (node, bindingContext) {\r\n        if (arguments.length == 2) {\r\n            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);\r\n            if (bindingContext._subscribable)\r\n                bindingContext._subscribable._addNode(node);\r\n        } else {\r\n            return ko.utils.domData.get(node, storedBindingContextDomDataKey);\r\n        }\r\n    }\r\n\r\n    function getBindingContext(viewModelOrBindingContext) {\r\n        return viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)\r\n            ? viewModelOrBindingContext\r\n            : new ko.bindingContext(viewModelOrBindingContext);\r\n    }\r\n\r\n    ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n        if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness\r\n            ko.virtualElements.normaliseVirtualElementDomStructure(node);\r\n        return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext), true);\r\n    };\r\n\r\n    ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n        var context = getBindingContext(viewModelOrBindingContext);\r\n        return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);\r\n    };\r\n\r\n    ko.applyBindingsToDescendants = function(viewModelOrBindingContext, rootNode) {\r\n        if (rootNode.nodeType === 1 || rootNode.nodeType === 8)\r\n            applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\r\n    };\r\n\r\n    ko.applyBindings = function (viewModelOrBindingContext, rootNode) {\r\n        // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.\r\n        if (!jQueryInstance && window['jQuery']) {\r\n            jQueryInstance = window['jQuery'];\r\n        }\r\n\r\n        if (rootNode && (rootNode.nodeType !== 1) && (rootNode.nodeType !== 8))\r\n            throw new Error(\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\");\r\n        rootNode = rootNode || window.document.body; // Make \"rootNode\" parameter optional\r\n\r\n        applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\r\n    };\r\n\r\n    // Retrieving binding context from arbitrary nodes\r\n    ko.contextFor = function(node) {\r\n        // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)\r\n        switch (node.nodeType) {\r\n            case 1:\r\n            case 8:\r\n                var context = ko.storedBindingContextForNode(node);\r\n                if (context) return context;\r\n                if (node.parentNode) return ko.contextFor(node.parentNode);\r\n                break;\r\n        }\r\n        return undefined;\r\n    };\r\n    ko.dataFor = function(node) {\r\n        var context = ko.contextFor(node);\r\n        return context ? context['$data'] : undefined;\r\n    };\r\n\r\n    ko.exportSymbol('bindingHandlers', ko.bindingHandlers);\r\n    ko.exportSymbol('applyBindings', ko.applyBindings);\r\n    ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);\r\n    ko.exportSymbol('applyBindingAccessorsToNode', ko.applyBindingAccessorsToNode);\r\n    ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);\r\n    ko.exportSymbol('contextFor', ko.contextFor);\r\n    ko.exportSymbol('dataFor', ko.dataFor);\r\n})();\r\n(function(undefined) {\r\n    var loadingSubscribablesCache = {}, // Tracks component loads that are currently in flight\r\n        loadedDefinitionsCache = {};    // Tracks component loads that have already completed\r\n\r\n    ko.components = {\r\n        get: function(componentName, callback) {\r\n            var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);\r\n            if (cachedDefinition) {\r\n                // It's already loaded and cached. Reuse the same definition object.\r\n                // Note that for API consistency, even cache hits complete asynchronously by default.\r\n                // You can bypass this by putting synchronous:true on your component config.\r\n                if (cachedDefinition.isSynchronousComponent) {\r\n                    ko.dependencyDetection.ignore(function() { // See comment in loaderRegistryBehaviors.js for reasoning\r\n                        callback(cachedDefinition.definition);\r\n                    });\r\n                } else {\r\n                    ko.tasks.schedule(function() { callback(cachedDefinition.definition); });\r\n                }\r\n            } else {\r\n                // Join the loading process that is already underway, or start a new one.\r\n                loadComponentAndNotify(componentName, callback);\r\n            }\r\n        },\r\n\r\n        clearCachedDefinition: function(componentName) {\r\n            delete loadedDefinitionsCache[componentName];\r\n        },\r\n\r\n        _getFirstResultFromLoaders: getFirstResultFromLoaders\r\n    };\r\n\r\n    function getObjectOwnProperty(obj, propName) {\r\n        return obj.hasOwnProperty(propName) ? obj[propName] : undefined;\r\n    }\r\n\r\n    function loadComponentAndNotify(componentName, callback) {\r\n        var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),\r\n            completedAsync;\r\n        if (!subscribable) {\r\n            // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.\r\n            subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();\r\n            subscribable.subscribe(callback);\r\n\r\n            beginLoadingComponent(componentName, function(definition, config) {\r\n                var isSynchronousComponent = !!(config && config['synchronous']);\r\n                loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };\r\n                delete loadingSubscribablesCache[componentName];\r\n\r\n                // For API consistency, all loads complete asynchronously. However we want to avoid\r\n                // adding an extra task schedule if it's unnecessary (i.e., the completion is already\r\n                // async).\r\n                //\r\n                // You can bypass the 'always asynchronous' feature by putting the synchronous:true\r\n                // flag on your component configuration when you register it.\r\n                if (completedAsync || isSynchronousComponent) {\r\n                    // Note that notifySubscribers ignores any dependencies read within the callback.\r\n                    // See comment in loaderRegistryBehaviors.js for reasoning\r\n                    subscribable['notifySubscribers'](definition);\r\n                } else {\r\n                    ko.tasks.schedule(function() {\r\n                        subscribable['notifySubscribers'](definition);\r\n                    });\r\n                }\r\n            });\r\n            completedAsync = true;\r\n        } else {\r\n            subscribable.subscribe(callback);\r\n        }\r\n    }\r\n\r\n    function beginLoadingComponent(componentName, callback) {\r\n        getFirstResultFromLoaders('getConfig', [componentName], function(config) {\r\n            if (config) {\r\n                // We have a config, so now load its definition\r\n                getFirstResultFromLoaders('loadComponent', [componentName, config], function(definition) {\r\n                    callback(definition, config);\r\n                });\r\n            } else {\r\n                // The component has no config - it's unknown to all the loaders.\r\n                // Note that this is not an error (e.g., a module loading error) - that would abort the\r\n                // process and this callback would not run. For this callback to run, all loaders must\r\n                // have confirmed they don't know about this component.\r\n                callback(null, null);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {\r\n        // On the first call in the stack, start with the full set of loaders\r\n        if (!candidateLoaders) {\r\n            candidateLoaders = ko.components['loaders'].slice(0); // Use a copy, because we'll be mutating this array\r\n        }\r\n\r\n        // Try the next candidate\r\n        var currentCandidateLoader = candidateLoaders.shift();\r\n        if (currentCandidateLoader) {\r\n            var methodInstance = currentCandidateLoader[methodName];\r\n            if (methodInstance) {\r\n                var wasAborted = false,\r\n                    synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {\r\n                        if (wasAborted) {\r\n                            callback(null);\r\n                        } else if (result !== null) {\r\n                            // This candidate returned a value. Use it.\r\n                            callback(result);\r\n                        } else {\r\n                            // Try the next candidate\r\n                            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n                        }\r\n                    }));\r\n\r\n                // Currently, loaders may not return anything synchronously. This leaves open the possibility\r\n                // that we'll extend the API to support synchronous return values in the future. It won't be\r\n                // a breaking change, because currently no loader is allowed to return anything except undefined.\r\n                if (synchronousReturnValue !== undefined) {\r\n                    wasAborted = true;\r\n\r\n                    // Method to suppress exceptions will remain undocumented. This is only to keep\r\n                    // KO's specs running tidily, since we can observe the loading got aborted without\r\n                    // having exceptions cluttering up the console too.\r\n                    if (!currentCandidateLoader['suppressLoaderExceptions']) {\r\n                        throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');\r\n                    }\r\n                }\r\n            } else {\r\n                // This candidate doesn't have the relevant handler. Synchronously move on to the next one.\r\n                getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n            }\r\n        } else {\r\n            // No candidates returned a value\r\n            callback(null);\r\n        }\r\n    }\r\n\r\n    // Reference the loaders via string name so it's possible for developers\r\n    // to replace the whole array by assigning to ko.components.loaders\r\n    ko.components['loaders'] = [];\r\n\r\n    ko.exportSymbol('components', ko.components);\r\n    ko.exportSymbol('components.get', ko.components.get);\r\n    ko.exportSymbol('components.clearCachedDefinition', ko.components.clearCachedDefinition);\r\n})();\r\n(function(undefined) {\r\n\r\n    // The default loader is responsible for two things:\r\n    // 1. Maintaining the default in-memory registry of component configuration objects\r\n    //    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))\r\n    // 2. Answering requests for components by fetching configuration objects\r\n    //    from that default in-memory registry and resolving them into standard\r\n    //    component definition objects (of the form { createViewModel: ..., template: ... })\r\n    // Custom loaders may override either of these facilities, i.e.,\r\n    // 1. To supply configuration objects from some other source (e.g., conventions)\r\n    // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.\r\n\r\n    var defaultConfigRegistry = {};\r\n\r\n    ko.components.register = function(componentName, config) {\r\n        if (!config) {\r\n            throw new Error('Invalid configuration for ' + componentName);\r\n        }\r\n\r\n        if (ko.components.isRegistered(componentName)) {\r\n            throw new Error('Component ' + componentName + ' is already registered');\r\n        }\r\n\r\n        defaultConfigRegistry[componentName] = config;\r\n    };\r\n\r\n    ko.components.isRegistered = function(componentName) {\r\n        return defaultConfigRegistry.hasOwnProperty(componentName);\r\n    };\r\n\r\n    ko.components.unregister = function(componentName) {\r\n        delete defaultConfigRegistry[componentName];\r\n        ko.components.clearCachedDefinition(componentName);\r\n    };\r\n\r\n    ko.components.defaultLoader = {\r\n        'getConfig': function(componentName, callback) {\r\n            var result = defaultConfigRegistry.hasOwnProperty(componentName)\r\n                ? defaultConfigRegistry[componentName]\r\n                : null;\r\n            callback(result);\r\n        },\r\n\r\n        'loadComponent': function(componentName, config, callback) {\r\n            var errorCallback = makeErrorCallback(componentName);\r\n            possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {\r\n                resolveConfig(componentName, errorCallback, loadedConfig, callback);\r\n            });\r\n        },\r\n\r\n        'loadTemplate': function(componentName, templateConfig, callback) {\r\n            resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);\r\n        },\r\n\r\n        'loadViewModel': function(componentName, viewModelConfig, callback) {\r\n            resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);\r\n        }\r\n    };\r\n\r\n    var createViewModelKey = 'createViewModel';\r\n\r\n    // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it\r\n    // into the standard component definition format:\r\n    //    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.\r\n    // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed\r\n    // in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,\r\n    // so this is implemented manually below.\r\n    function resolveConfig(componentName, errorCallback, config, callback) {\r\n        var result = {},\r\n            makeCallBackWhenZero = 2,\r\n            tryIssueCallback = function() {\r\n                if (--makeCallBackWhenZero === 0) {\r\n                    callback(result);\r\n                }\r\n            },\r\n            templateConfig = config['template'],\r\n            viewModelConfig = config['viewModel'];\r\n\r\n        if (templateConfig) {\r\n            possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {\r\n                ko.components._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function(resolvedTemplate) {\r\n                    result['template'] = resolvedTemplate;\r\n                    tryIssueCallback();\r\n                });\r\n            });\r\n        } else {\r\n            tryIssueCallback();\r\n        }\r\n\r\n        if (viewModelConfig) {\r\n            possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {\r\n                ko.components._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function(resolvedViewModel) {\r\n                    result[createViewModelKey] = resolvedViewModel;\r\n                    tryIssueCallback();\r\n                });\r\n            });\r\n        } else {\r\n            tryIssueCallback();\r\n        }\r\n    }\r\n\r\n    function resolveTemplate(errorCallback, templateConfig, callback) {\r\n        if (typeof templateConfig === 'string') {\r\n            // Markup - parse it\r\n            callback(ko.utils.parseHtmlFragment(templateConfig));\r\n        } else if (templateConfig instanceof Array) {\r\n            // Assume already an array of DOM nodes - pass through unchanged\r\n            callback(templateConfig);\r\n        } else if (isDocumentFragment(templateConfig)) {\r\n            // Document fragment - use its child nodes\r\n            callback(ko.utils.makeArray(templateConfig.childNodes));\r\n        } else if (templateConfig['element']) {\r\n            var element = templateConfig['element'];\r\n            if (isDomElement(element)) {\r\n                // Element instance - copy its child nodes\r\n                callback(cloneNodesFromTemplateSourceElement(element));\r\n            } else if (typeof element === 'string') {\r\n                // Element ID - find it, then copy its child nodes\r\n                var elemInstance = document.getElementById(element);\r\n                if (elemInstance) {\r\n                    callback(cloneNodesFromTemplateSourceElement(elemInstance));\r\n                } else {\r\n                    errorCallback('Cannot find element with ID ' + element);\r\n                }\r\n            } else {\r\n                errorCallback('Unknown element type: ' + element);\r\n            }\r\n        } else {\r\n            errorCallback('Unknown template value: ' + templateConfig);\r\n        }\r\n    }\r\n\r\n    function resolveViewModel(errorCallback, viewModelConfig, callback) {\r\n        if (typeof viewModelConfig === 'function') {\r\n            // Constructor - convert to standard factory function format\r\n            // By design, this does *not* supply componentInfo to the constructor, as the intent is that\r\n            // componentInfo contains non-viewmodel data (e.g., the component's element) that should only\r\n            // be used in factory functions, not viewmodel constructors.\r\n            callback(function (params /*, componentInfo */) {\r\n                return new viewModelConfig(params);\r\n            });\r\n        } else if (typeof viewModelConfig[createViewModelKey] === 'function') {\r\n            // Already a factory function - use it as-is\r\n            callback(viewModelConfig[createViewModelKey]);\r\n        } else if ('instance' in viewModelConfig) {\r\n            // Fixed object instance - promote to createViewModel format for API consistency\r\n            var fixedInstance = viewModelConfig['instance'];\r\n            callback(function (params, componentInfo) {\r\n                return fixedInstance;\r\n            });\r\n        } else if ('viewModel' in viewModelConfig) {\r\n            // Resolved AMD module whose value is of the form { viewModel: ... }\r\n            resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);\r\n        } else {\r\n            errorCallback('Unknown viewModel value: ' + viewModelConfig);\r\n        }\r\n    }\r\n\r\n    function cloneNodesFromTemplateSourceElement(elemInstance) {\r\n        switch (ko.utils.tagNameLower(elemInstance)) {\r\n            case 'script':\r\n                return ko.utils.parseHtmlFragment(elemInstance.text);\r\n            case 'textarea':\r\n                return ko.utils.parseHtmlFragment(elemInstance.value);\r\n            case 'template':\r\n                // For browsers with proper <template> element support (i.e., where the .content property\r\n                // gives a document fragment), use that document fragment.\r\n                if (isDocumentFragment(elemInstance.content)) {\r\n                    return ko.utils.cloneNodes(elemInstance.content.childNodes);\r\n                }\r\n        }\r\n\r\n        // Regular elements such as <div>, and <template> elements on old browsers that don't really\r\n        // understand <template> and just treat it as a regular container\r\n        return ko.utils.cloneNodes(elemInstance.childNodes);\r\n    }\r\n\r\n    function isDomElement(obj) {\r\n        if (window['HTMLElement']) {\r\n            return obj instanceof HTMLElement;\r\n        } else {\r\n            return obj && obj.tagName && obj.nodeType === 1;\r\n        }\r\n    }\r\n\r\n    function isDocumentFragment(obj) {\r\n        if (window['DocumentFragment']) {\r\n            return obj instanceof DocumentFragment;\r\n        } else {\r\n            return obj && obj.nodeType === 11;\r\n        }\r\n    }\r\n\r\n    function possiblyGetConfigFromAmd(errorCallback, config, callback) {\r\n        if (typeof config['require'] === 'string') {\r\n            // The config is the value of an AMD module\r\n            if (amdRequire || window['require']) {\r\n                (amdRequire || window['require'])([config['require']], callback);\r\n            } else {\r\n                errorCallback('Uses require, but no AMD loader is present');\r\n            }\r\n        } else {\r\n            callback(config);\r\n        }\r\n    }\r\n\r\n    function makeErrorCallback(componentName) {\r\n        return function (message) {\r\n            throw new Error('Component \\'' + componentName + '\\': ' + message);\r\n        };\r\n    }\r\n\r\n    ko.exportSymbol('components.register', ko.components.register);\r\n    ko.exportSymbol('components.isRegistered', ko.components.isRegistered);\r\n    ko.exportSymbol('components.unregister', ko.components.unregister);\r\n\r\n    // Expose the default loader so that developers can directly ask it for configuration\r\n    // or to resolve configuration\r\n    ko.exportSymbol('components.defaultLoader', ko.components.defaultLoader);\r\n\r\n    // By default, the default loader is the only registered component loader\r\n    ko.components['loaders'].push(ko.components.defaultLoader);\r\n\r\n    // Privately expose the underlying config registry for use in old-IE shim\r\n    ko.components._allRegisteredComponents = defaultConfigRegistry;\r\n})();\r\n(function (undefined) {\r\n    // Overridable API for determining which component name applies to a given node. By overriding this,\r\n    // you can for example map specific tagNames to components that are not preregistered.\r\n    ko.components['getComponentNameForNode'] = function(node) {\r\n        var tagNameLower = ko.utils.tagNameLower(node);\r\n        if (ko.components.isRegistered(tagNameLower)) {\r\n            // Try to determine that this node can be considered a *custom* element; see https://github.com/knockout/knockout/issues/1603\r\n            if (tagNameLower.indexOf('-') != -1 || ('' + node) == \"[object HTMLUnknownElement]\" || (ko.utils.ieVersion <= 8 && node.tagName === tagNameLower)) {\r\n                return tagNameLower;\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.components.addBindingsForCustomElement = function(allBindings, node, bindingContext, valueAccessors) {\r\n        // Determine if it's really a custom element matching a component\r\n        if (node.nodeType === 1) {\r\n            var componentName = ko.components['getComponentNameForNode'](node);\r\n            if (componentName) {\r\n                // It does represent a component, so add a component binding for it\r\n                allBindings = allBindings || {};\r\n\r\n                if (allBindings['component']) {\r\n                    // Avoid silently overwriting some other 'component' binding that may already be on the element\r\n                    throw new Error('Cannot use the \"component\" binding on a custom element matching a component');\r\n                }\r\n\r\n                var componentBindingValue = { 'name': componentName, 'params': getComponentParamsFromCustomElement(node, bindingContext) };\r\n\r\n                allBindings['component'] = valueAccessors\r\n                    ? function() { return componentBindingValue; }\r\n                    : componentBindingValue;\r\n            }\r\n        }\r\n\r\n        return allBindings;\r\n    }\r\n\r\n    var nativeBindingProviderInstance = new ko.bindingProvider();\r\n\r\n    function getComponentParamsFromCustomElement(elem, bindingContext) {\r\n        var paramsAttribute = elem.getAttribute('params');\r\n\r\n        if (paramsAttribute) {\r\n            var params = nativeBindingProviderInstance['parseBindingsString'](paramsAttribute, bindingContext, elem, { 'valueAccessors': true, 'bindingParams': true }),\r\n                rawParamComputedValues = ko.utils.objectMap(params, function(paramValue, paramName) {\r\n                    return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });\r\n                }),\r\n                result = ko.utils.objectMap(rawParamComputedValues, function(paramValueComputed, paramName) {\r\n                    var paramValue = paramValueComputed.peek();\r\n                    // Does the evaluation of the parameter value unwrap any observables?\r\n                    if (!paramValueComputed.isActive()) {\r\n                        // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.\r\n                        // Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)\r\n                        return paramValue;\r\n                    } else {\r\n                        // Yes it does. Supply a computed property that unwraps both the outer (binding expression)\r\n                        // level of observability, and any inner (resulting model value) level of observability.\r\n                        // This means the component doesn't have to worry about multiple unwrapping. If the value is a\r\n                        // writable observable, the computed will also be writable and pass the value on to the observable.\r\n                        return ko.computed({\r\n                            'read': function() {\r\n                                return ko.utils.unwrapObservable(paramValueComputed());\r\n                            },\r\n                            'write': ko.isWriteableObservable(paramValue) && function(value) {\r\n                                paramValueComputed()(value);\r\n                            },\r\n                            disposeWhenNodeIsRemoved: elem\r\n                        });\r\n                    }\r\n                });\r\n\r\n            // Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'\r\n            // This is in case the developer wants to react to outer (binding) observability separately from inner\r\n            // (model value) observability, or in case the model value observable has subobservables.\r\n            if (!result.hasOwnProperty('$raw')) {\r\n                result['$raw'] = rawParamComputedValues;\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            // For consistency, absence of a \"params\" attribute is treated the same as the presence of\r\n            // any empty one. Otherwise component viewmodels need special code to check whether or not\r\n            // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.\r\n            return { '$raw': {} };\r\n        }\r\n    }\r\n\r\n    // --------------------------------------------------------------------------------\r\n    // Compatibility code for older (pre-HTML5) IE browsers\r\n\r\n    if (ko.utils.ieVersion < 9) {\r\n        // Whenever you preregister a component, enable it as a custom element in the current document\r\n        ko.components['register'] = (function(originalFunction) {\r\n            return function(componentName) {\r\n                document.createElement(componentName); // Allows IE<9 to parse markup containing the custom element\r\n                return originalFunction.apply(this, arguments);\r\n            }\r\n        })(ko.components['register']);\r\n\r\n        // Whenever you create a document fragment, enable all preregistered component names as custom elements\r\n        // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements\r\n        document.createDocumentFragment = (function(originalFunction) {\r\n            return function() {\r\n                var newDocFrag = originalFunction(),\r\n                    allComponents = ko.components._allRegisteredComponents;\r\n                for (var componentName in allComponents) {\r\n                    if (allComponents.hasOwnProperty(componentName)) {\r\n                        newDocFrag.createElement(componentName);\r\n                    }\r\n                }\r\n                return newDocFrag;\r\n            };\r\n        })(document.createDocumentFragment);\r\n    }\r\n})();(function(undefined) {\r\n\r\n    var componentLoadingOperationUniqueId = 0;\r\n\r\n    ko.bindingHandlers['component'] = {\r\n        'init': function(element, valueAccessor, ignored1, ignored2, bindingContext) {\r\n            var currentViewModel,\r\n                currentLoadingOperationId,\r\n                disposeAssociatedComponentViewModel = function () {\r\n                    var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];\r\n                    if (typeof currentViewModelDispose === 'function') {\r\n                        currentViewModelDispose.call(currentViewModel);\r\n                    }\r\n                    currentViewModel = null;\r\n                    // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion\r\n                    currentLoadingOperationId = null;\r\n                },\r\n                originalChildNodes = ko.utils.makeArray(ko.virtualElements.childNodes(element));\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);\r\n\r\n            ko.computed(function () {\r\n                var value = ko.utils.unwrapObservable(valueAccessor()),\r\n                    componentName, componentParams;\r\n\r\n                if (typeof value === 'string') {\r\n                    componentName = value;\r\n                } else {\r\n                    componentName = ko.utils.unwrapObservable(value['name']);\r\n                    componentParams = ko.utils.unwrapObservable(value['params']);\r\n                }\r\n\r\n                if (!componentName) {\r\n                    throw new Error('No component name specified');\r\n                }\r\n\r\n                var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;\r\n                ko.components.get(componentName, function(componentDefinition) {\r\n                    // If this is not the current load operation for this element, ignore it.\r\n                    if (currentLoadingOperationId !== loadingOperationId) {\r\n                        return;\r\n                    }\r\n\r\n                    // Clean up previous state\r\n                    disposeAssociatedComponentViewModel();\r\n\r\n                    // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.\r\n                    if (!componentDefinition) {\r\n                        throw new Error('Unknown component \\'' + componentName + '\\'');\r\n                    }\r\n                    cloneTemplateIntoElement(componentName, componentDefinition, element);\r\n                    var componentViewModel = createViewModel(componentDefinition, element, originalChildNodes, componentParams),\r\n                        childBindingContext = bindingContext['createChildContext'](componentViewModel, /* dataItemAlias */ undefined, function(ctx) {\r\n                            ctx['$component'] = componentViewModel;\r\n                            ctx['$componentTemplateNodes'] = originalChildNodes;\r\n                        });\r\n                    currentViewModel = componentViewModel;\r\n                    ko.applyBindingsToDescendants(childBindingContext, element);\r\n                });\r\n            }, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n            return { 'controlsDescendantBindings': true };\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings['component'] = true;\r\n\r\n    function cloneTemplateIntoElement(componentName, componentDefinition, element) {\r\n        var template = componentDefinition['template'];\r\n        if (!template) {\r\n            throw new Error('Component \\'' + componentName + '\\' has no template');\r\n        }\r\n\r\n        var clonedNodesArray = ko.utils.cloneNodes(template);\r\n        ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);\r\n    }\r\n\r\n    function createViewModel(componentDefinition, element, originalChildNodes, componentParams) {\r\n        var componentViewModelFactory = componentDefinition['createViewModel'];\r\n        return componentViewModelFactory\r\n            ? componentViewModelFactory.call(componentDefinition, componentParams, { 'element': element, 'templateNodes': originalChildNodes })\r\n            : componentParams; // Template-only component\r\n    }\r\n\r\n})();\r\nvar attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };\r\nko.bindingHandlers['attr'] = {\r\n    'update': function(element, valueAccessor, allBindings) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n        ko.utils.objectForEach(value, function(attrName, attrValue) {\r\n            attrValue = ko.utils.unwrapObservable(attrValue);\r\n\r\n            // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\r\n            // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\r\n            // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\r\n            var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);\r\n            if (toRemove)\r\n                element.removeAttribute(attrName);\r\n\r\n            // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the\r\n            // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\r\n            // but instead of figuring out the mode, we'll just set the attribute through the Javascript\r\n            // property for IE <= 8.\r\n            if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {\r\n                attrName = attrHtmlToJavascriptMap[attrName];\r\n                if (toRemove)\r\n                    element.removeAttribute(attrName);\r\n                else\r\n                    element[attrName] = attrValue;\r\n            } else if (!toRemove) {\r\n                element.setAttribute(attrName, attrValue.toString());\r\n            }\r\n\r\n            // Treat \"name\" specially - although you can think of it as an attribute, it also needs\r\n            // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\r\n            // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\r\n            // entirely, and there's no strong reason to allow for such casing in HTML.\r\n            if (attrName === \"name\") {\r\n                ko.utils.setElementName(element, toRemove ? \"\" : attrValue.toString());\r\n            }\r\n        });\r\n    }\r\n};\r\n(function() {\r\n\r\nko.bindingHandlers['checked'] = {\r\n    'after': ['value', 'attr'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        var checkedValue = ko.pureComputed(function() {\r\n            // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\r\n            if (allBindings['has']('checkedValue')) {\r\n                return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\r\n            } else if (allBindings['has']('value')) {\r\n                return ko.utils.unwrapObservable(allBindings.get('value'));\r\n            }\r\n\r\n            return element.value;\r\n        });\r\n\r\n        function updateModel() {\r\n            // This updates the model value from the view value.\r\n            // It runs in response to DOM events (click) and changes in checkedValue.\r\n            var isChecked = element.checked,\r\n                elemValue = useCheckedValue ? checkedValue() : isChecked;\r\n\r\n            // When we're first setting up this computed, don't change any model state.\r\n            if (ko.computedContext.isInitial()) {\r\n                return;\r\n            }\r\n\r\n            // We can ignore unchecked radio buttons, because some other radio\r\n            // button will be getting checked, and that one can take care of updating state.\r\n            if (isRadio && !isChecked) {\r\n                return;\r\n            }\r\n\r\n            var modelValue = ko.dependencyDetection.ignore(valueAccessor);\r\n            if (valueIsArray) {\r\n                var writableValue = rawValueIsNonArrayObservable ? modelValue.peek() : modelValue;\r\n                if (oldElemValue !== elemValue) {\r\n                    // When we're responding to the checkedValue changing, and the element is\r\n                    // currently checked, replace the old elem value with the new elem value\r\n                    // in the model array.\r\n                    if (isChecked) {\r\n                        ko.utils.addOrRemoveItem(writableValue, elemValue, true);\r\n                        ko.utils.addOrRemoveItem(writableValue, oldElemValue, false);\r\n                    }\r\n\r\n                    oldElemValue = elemValue;\r\n                } else {\r\n                    // When we're responding to the user having checked/unchecked a checkbox,\r\n                    // add/remove the element value to the model array.\r\n                    ko.utils.addOrRemoveItem(writableValue, elemValue, isChecked);\r\n                }\r\n                if (rawValueIsNonArrayObservable && ko.isWriteableObservable(modelValue)) {\r\n                    modelValue(writableValue);\r\n                }\r\n            } else {\r\n                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\r\n            }\r\n        };\r\n\r\n        function updateView() {\r\n            // This updates the view value from the model value.\r\n            // It runs in response to changes in the bound (checked) value.\r\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (valueIsArray) {\r\n                // When a checkbox is bound to an array, being checked represents its value being present in that array\r\n                element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\r\n            } else if (isCheckbox) {\r\n                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish\r\n                element.checked = modelValue;\r\n            } else {\r\n                // For radio buttons, being checked means that the radio button's value corresponds to the model value\r\n                element.checked = (checkedValue() === modelValue);\r\n            }\r\n        };\r\n\r\n        var isCheckbox = element.type == \"checkbox\",\r\n            isRadio = element.type == \"radio\";\r\n\r\n        // Only bind to check boxes and radio buttons\r\n        if (!isCheckbox && !isRadio) {\r\n            return;\r\n        }\r\n\r\n        var rawValue = valueAccessor(),\r\n            valueIsArray = isCheckbox && (ko.utils.unwrapObservable(rawValue) instanceof Array),\r\n            rawValueIsNonArrayObservable = !(valueIsArray && rawValue.push && rawValue.splice),\r\n            oldElemValue = valueIsArray ? checkedValue() : undefined,\r\n            useCheckedValue = isRadio || valueIsArray;\r\n\r\n        // IE 6 won't allow radio buttons to be selected unless they have a name\r\n        if (isRadio && !element.name)\r\n            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });\r\n\r\n        // Set up two computeds to update the binding:\r\n\r\n        // The first responds to changes in the checkedValue value and to element clicks\r\n        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\r\n        ko.utils.registerEventHandler(element, \"click\", updateModel);\r\n\r\n        // The second responds to changes in the model value (the one associated with the checked binding)\r\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n        rawValue = undefined;\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['checked'] = true;\r\n\r\nko.bindingHandlers['checkedValue'] = {\r\n    'update': function (element, valueAccessor) {\r\n        element.value = ko.utils.unwrapObservable(valueAccessor());\r\n    }\r\n};\r\n\r\n})();var classesWrittenByBindingKey = '__ko__cssValue';\r\nko.bindingHandlers['css'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (value !== null && typeof value == \"object\") {\r\n            ko.utils.objectForEach(value, function(className, shouldHaveClass) {\r\n                shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);\r\n                ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);\r\n            });\r\n        } else {\r\n            value = ko.utils.stringTrim(String(value || '')); // Make sure we don't try to store or set a non-string value\r\n            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);\r\n            element[classesWrittenByBindingKey] = value;\r\n            ko.utils.toggleDomNodeCssClass(element, value, true);\r\n        }\r\n    }\r\n};\r\nko.bindingHandlers['enable'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (value && element.disabled)\r\n            element.removeAttribute(\"disabled\");\r\n        else if ((!value) && (!element.disabled))\r\n            element.disabled = true;\r\n    }\r\n};\r\n\r\nko.bindingHandlers['disable'] = {\r\n    'update': function (element, valueAccessor) {\r\n        ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\r\n    }\r\n};\r\n// For certain common events (currently just 'click'), allow a simplified data-binding syntax\r\n// e.g. click:handler instead of the usual full-length event:{click:handler}\r\nfunction makeEventHandlerShortcut(eventName) {\r\n    ko.bindingHandlers[eventName] = {\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var newValueAccessor = function () {\r\n                var result = {};\r\n                result[eventName] = valueAccessor();\r\n                return result;\r\n            };\r\n            return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);\r\n        }\r\n    }\r\n}\r\n\r\nko.bindingHandlers['event'] = {\r\n    'init' : function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        var eventsToHandle = valueAccessor() || {};\r\n        ko.utils.objectForEach(eventsToHandle, function(eventName) {\r\n            if (typeof eventName == \"string\") {\r\n                ko.utils.registerEventHandler(element, eventName, function (event) {\r\n                    var handlerReturnValue;\r\n                    var handlerFunction = valueAccessor()[eventName];\r\n                    if (!handlerFunction)\r\n                        return;\r\n\r\n                    try {\r\n                        // Take all the event args, and prefix with the viewmodel\r\n                        var argsForHandler = ko.utils.makeArray(arguments);\r\n                        viewModel = bindingContext['$data'];\r\n                        argsForHandler.unshift(viewModel);\r\n                        handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);\r\n                    } finally {\r\n                        if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                            if (event.preventDefault)\r\n                                event.preventDefault();\r\n                            else\r\n                                event.returnValue = false;\r\n                        }\r\n                    }\r\n\r\n                    var bubble = allBindings.get(eventName + 'Bubble') !== false;\r\n                    if (!bubble) {\r\n                        event.cancelBubble = true;\r\n                        if (event.stopPropagation)\r\n                            event.stopPropagation();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n// \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\r\n// \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\r\nko.bindingHandlers['foreach'] = {\r\n    makeTemplateValueAccessor: function(valueAccessor) {\r\n        return function() {\r\n            var modelValue = valueAccessor(),\r\n                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here\r\n\r\n            // If unwrappedValue is the array, pass in the wrapped value on its own\r\n            // The value will be unwrapped and tracked within the template binding\r\n            // (See https://github.com/SteveSanderson/knockout/issues/523)\r\n            if ((!unwrappedValue) || typeof unwrappedValue.length == \"number\")\r\n                return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };\r\n\r\n            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\r\n            ko.utils.unwrapObservable(modelValue);\r\n            return {\r\n                'foreach': unwrappedValue['data'],\r\n                'as': unwrappedValue['as'],\r\n                'includeDestroyed': unwrappedValue['includeDestroyed'],\r\n                'afterAdd': unwrappedValue['afterAdd'],\r\n                'beforeRemove': unwrappedValue['beforeRemove'],\r\n                'afterRender': unwrappedValue['afterRender'],\r\n                'beforeMove': unwrappedValue['beforeMove'],\r\n                'afterMove': unwrappedValue['afterMove'],\r\n                'templateEngine': ko.nativeTemplateEngine.instance\r\n            };\r\n        };\r\n    },\r\n    'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));\r\n    },\r\n    'update': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\r\n    }\r\n};\r\nko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings\r\nko.virtualElements.allowedBindings['foreach'] = true;\r\nvar hasfocusUpdatingProperty = '__ko_hasfocusUpdating';\r\nvar hasfocusLastValue = '__ko_hasfocusLastValue';\r\nko.bindingHandlers['hasfocus'] = {\r\n    'init': function(element, valueAccessor, allBindings) {\r\n        var handleElementFocusChange = function(isFocused) {\r\n            // Where possible, ignore which event was raised and determine focus state using activeElement,\r\n            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.\r\n            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,\r\n            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus\r\n            // from calling 'blur()' on the element when it loses focus.\r\n            // Discussion at https://github.com/SteveSanderson/knockout/pull/352\r\n            element[hasfocusUpdatingProperty] = true;\r\n            var ownerDoc = element.ownerDocument;\r\n            if (\"activeElement\" in ownerDoc) {\r\n                var active;\r\n                try {\r\n                    active = ownerDoc.activeElement;\r\n                } catch(e) {\r\n                    // IE9 throws if you access activeElement during page load (see issue #703)\r\n                    active = ownerDoc.body;\r\n                }\r\n                isFocused = (active === element);\r\n            }\r\n            var modelValue = valueAccessor();\r\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'hasfocus', isFocused, true);\r\n\r\n            //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function\r\n            element[hasfocusLastValue] = isFocused;\r\n            element[hasfocusUpdatingProperty] = false;\r\n        };\r\n        var handleElementFocusIn = handleElementFocusChange.bind(null, true);\r\n        var handleElementFocusOut = handleElementFocusChange.bind(null, false);\r\n\r\n        ko.utils.registerEventHandler(element, \"focus\", handleElementFocusIn);\r\n        ko.utils.registerEventHandler(element, \"focusin\", handleElementFocusIn); // For IE\r\n        ko.utils.registerEventHandler(element, \"blur\",  handleElementFocusOut);\r\n        ko.utils.registerEventHandler(element, \"focusout\",  handleElementFocusOut); // For IE\r\n    },\r\n    'update': function(element, valueAccessor) {\r\n        var value = !!ko.utils.unwrapObservable(valueAccessor());\r\n\r\n        if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {\r\n            value ? element.focus() : element.blur();\r\n\r\n            // In IE, the blur method doesn't always cause the element to lose focus (for example, if the window is not in focus).\r\n            // Setting focus to the body element does seem to be reliable in IE, but should only be used if we know that the current\r\n            // element was focused already.\r\n            if (!value && element[hasfocusLastValue]) {\r\n                element.ownerDocument.body.focus();\r\n            }\r\n\r\n            // For IE, which doesn't reliably fire \"focus\" or \"blur\" events synchronously\r\n            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? \"focusin\" : \"focusout\"]);\r\n        }\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['hasfocus'] = true;\r\n\r\nko.bindingHandlers['hasFocus'] = ko.bindingHandlers['hasfocus']; // Make \"hasFocus\" an alias\r\nko.expressionRewriting.twoWayBindings['hasFocus'] = true;\r\nko.bindingHandlers['html'] = {\r\n    'init': function() {\r\n        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        // setHtml will unwrap the value if needed\r\n        ko.utils.setHtml(element, valueAccessor());\r\n    }\r\n};\r\n// Makes a binding like with or if\r\nfunction makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {\r\n    ko.bindingHandlers[bindingKey] = {\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var didDisplayOnLastUpdate,\r\n                savedNodes;\r\n            ko.computed(function() {\r\n                var rawValue = valueAccessor(),\r\n                    dataValue = ko.utils.unwrapObservable(rawValue),\r\n                    shouldDisplay = !isNot !== !dataValue, // equivalent to isNot ? !dataValue : !!dataValue\r\n                    isFirstRender = !savedNodes,\r\n                    needsRefresh = isFirstRender || isWith || (shouldDisplay !== didDisplayOnLastUpdate);\r\n\r\n                if (needsRefresh) {\r\n                    // Save a copy of the inner nodes on the initial update, but only if we have dependencies.\r\n                    if (isFirstRender && ko.computedContext.getDependenciesCount()) {\r\n                        savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);\r\n                    }\r\n\r\n                    if (shouldDisplay) {\r\n                        if (!isFirstRender) {\r\n                            ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));\r\n                        }\r\n                        ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, rawValue) : bindingContext, element);\r\n                    } else {\r\n                        ko.virtualElements.emptyNode(element);\r\n                    }\r\n\r\n                    didDisplayOnLastUpdate = shouldDisplay;\r\n                }\r\n            }, null, { disposeWhenNodeIsRemoved: element });\r\n            return { 'controlsDescendantBindings': true };\r\n        }\r\n    };\r\n    ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings\r\n    ko.virtualElements.allowedBindings[bindingKey] = true;\r\n}\r\n\r\n// Construct the actual binding handlers\r\nmakeWithIfBinding('if');\r\nmakeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);\r\nmakeWithIfBinding('with', true /* isWith */, false /* isNot */,\r\n    function(bindingContext, dataValue) {\r\n        return bindingContext.createStaticChildContext(dataValue);\r\n    }\r\n);\r\nvar captionPlaceholder = {};\r\nko.bindingHandlers['options'] = {\r\n    'init': function(element) {\r\n        if (ko.utils.tagNameLower(element) !== \"select\")\r\n            throw new Error(\"options binding applies only to SELECT elements\");\r\n\r\n        // Remove all existing <option>s.\r\n        while (element.length > 0) {\r\n            element.remove(0);\r\n        }\r\n\r\n        // Ensures that the binding processor doesn't try to bind the options\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor, allBindings) {\r\n        function selectedOptions() {\r\n            return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });\r\n        }\r\n\r\n        var selectWasPreviouslyEmpty = element.length == 0,\r\n            multiple = element.multiple,\r\n            previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,\r\n            unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\r\n            valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),\r\n            includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\r\n            arrayToDomNodeChildrenOptions = {},\r\n            captionValue,\r\n            filteredArray,\r\n            previousSelectedValues = [];\r\n\r\n        if (!valueAllowUnset) {\r\n            if (multiple) {\r\n                previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\r\n            } else if (element.selectedIndex >= 0) {\r\n                previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));\r\n            }\r\n        }\r\n\r\n        if (unwrappedArray) {\r\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                unwrappedArray = [unwrappedArray];\r\n\r\n            // Filter out any entries marked as destroyed\r\n            filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n            });\r\n\r\n            // If caption is included, add it to the array\r\n            if (allBindings['has']('optionsCaption')) {\r\n                captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\r\n                // If caption value is null or undefined, don't show a caption\r\n                if (captionValue !== null && captionValue !== undefined) {\r\n                    filteredArray.unshift(captionPlaceholder);\r\n                }\r\n            }\r\n        } else {\r\n            // If a falsy value is provided (e.g. null), we'll simply empty the select element\r\n        }\r\n\r\n        function applyToObject(object, predicate, defaultValue) {\r\n            var predicateType = typeof predicate;\r\n            if (predicateType == \"function\")    // Given a function; run it against the data value\r\n                return predicate(object);\r\n            else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\r\n                return object[predicate];\r\n            else                                // Given no optionsText arg; use the data value itself\r\n                return defaultValue;\r\n        }\r\n\r\n        // The following functions can run at two different times:\r\n        // The first is when the whole array is being updated directly from this binding handler.\r\n        // The second is when an observable value for a specific array entry is updated.\r\n        // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\r\n        var itemUpdate = false;\r\n        function optionForArrayItem(arrayEntry, index, oldOptions) {\r\n            if (oldOptions.length) {\r\n                previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];\r\n                itemUpdate = true;\r\n            }\r\n            var option = element.ownerDocument.createElement(\"option\");\r\n            if (arrayEntry === captionPlaceholder) {\r\n                ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\r\n                ko.selectExtensions.writeValue(option, undefined);\r\n            } else {\r\n                // Apply a value to the option element\r\n                var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);\r\n                ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\r\n\r\n                // Apply some text to the option element\r\n                var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);\r\n                ko.utils.setTextContent(option, optionText);\r\n            }\r\n            return [option];\r\n        }\r\n\r\n        // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\r\n        // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\r\n        arrayToDomNodeChildrenOptions['beforeRemove'] =\r\n            function (option) {\r\n                element.removeChild(option);\r\n            };\r\n\r\n        function setSelectionCallback(arrayEntry, newOptions) {\r\n            if (itemUpdate && valueAllowUnset) {\r\n                // The model value is authoritative, so make sure its value is the one selected\r\n                // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.\r\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n            } else if (previousSelectedValues.length) {\r\n                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\r\n                // That's why we first added them without selection. Now it's time to set the selection.\r\n                var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;\r\n                ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\r\n\r\n                // If this option was changed from being selected during a single-item update, notify the change\r\n                if (itemUpdate && !isSelected) {\r\n                    ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                }\r\n            }\r\n        }\r\n\r\n        var callback = setSelectionCallback;\r\n        if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == \"function\") {\r\n            callback = function(arrayEntry, newOptions) {\r\n                setSelectionCallback(arrayEntry, newOptions);\r\n                ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\r\n            }\r\n        }\r\n\r\n        ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\r\n\r\n        ko.dependencyDetection.ignore(function () {\r\n            if (valueAllowUnset) {\r\n                // The model value is authoritative, so make sure its value is the one selected\r\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n            } else {\r\n                // Determine if the selection has changed as a result of updating the options list\r\n                var selectionChanged;\r\n                if (multiple) {\r\n                    // For a multiple-select box, compare the new selection count to the previous one\r\n                    // But if nothing was selected before, the selection can't have changed\r\n                    selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\r\n                } else {\r\n                    // For a single-select box, compare the current value to the previous value\r\n                    // But if nothing was selected before or nothing is selected now, just look for a change in selection\r\n                    selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)\r\n                        ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\r\n                        : (previousSelectedValues.length || element.selectedIndex >= 0);\r\n                }\r\n\r\n                // Ensure consistency between model value and selected option.\r\n                // If the dropdown was changed so that selection is no longer the same,\r\n                // notify the value or selectedOptions binding.\r\n                if (selectionChanged) {\r\n                    ko.utils.triggerEvent(element, \"change\");\r\n                }\r\n            }\r\n        });\r\n\r\n        // Workaround for IE bug\r\n        ko.utils.ensureSelectElementIsRenderedCorrectly(element);\r\n\r\n        if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)\r\n            element.scrollTop = previousScrollTop;\r\n    }\r\n};\r\nko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();\r\nko.bindingHandlers['selectedOptions'] = {\r\n    'after': ['options', 'foreach'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        ko.utils.registerEventHandler(element, \"change\", function () {\r\n            var value = valueAccessor(), valueToWrite = [];\r\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                if (node.selected)\r\n                    valueToWrite.push(ko.selectExtensions.readValue(node));\r\n            });\r\n            ko.expressionRewriting.writeValueToProperty(value, allBindings, 'selectedOptions', valueToWrite);\r\n        });\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        if (ko.utils.tagNameLower(element) != \"select\")\r\n            throw new Error(\"values binding applies only to SELECT elements\");\r\n\r\n        var newValue = ko.utils.unwrapObservable(valueAccessor()),\r\n            previousScrollTop = element.scrollTop;\r\n\r\n        if (newValue && typeof newValue.length == \"number\") {\r\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;\r\n                if (node.selected != isSelected) {      // This check prevents flashing of the select element in IE\r\n                    ko.utils.setOptionNodeSelectionState(node, isSelected);\r\n                }\r\n            });\r\n        }\r\n\r\n        element.scrollTop = previousScrollTop;\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['selectedOptions'] = true;\r\nko.bindingHandlers['style'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor() || {});\r\n        ko.utils.objectForEach(value, function(styleName, styleValue) {\r\n            styleValue = ko.utils.unwrapObservable(styleValue);\r\n\r\n            if (styleValue === null || styleValue === undefined || styleValue === false) {\r\n                // Empty string removes the value, whereas null/undefined have no effect\r\n                styleValue = \"\";\r\n            }\r\n\r\n            element.style[styleName] = styleValue;\r\n        });\r\n    }\r\n};\r\nko.bindingHandlers['submit'] = {\r\n    'init': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        if (typeof valueAccessor() != \"function\")\r\n            throw new Error(\"The value for a submit binding must be a function\");\r\n        ko.utils.registerEventHandler(element, \"submit\", function (event) {\r\n            var handlerReturnValue;\r\n            var value = valueAccessor();\r\n            try { handlerReturnValue = value.call(bindingContext['$data'], element); }\r\n            finally {\r\n                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                    if (event.preventDefault)\r\n                        event.preventDefault();\r\n                    else\r\n                        event.returnValue = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\nko.bindingHandlers['text'] = {\r\n    'init': function() {\r\n        // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).\r\n        // It should also make things faster, as we no longer have to consider whether the text node might be bindable.\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        ko.utils.setTextContent(element, valueAccessor());\r\n    }\r\n};\r\nko.virtualElements.allowedBindings['text'] = true;\r\n(function () {\r\n\r\nif (window && window.navigator) {\r\n    var parseVersion = function (matches) {\r\n        if (matches) {\r\n            return parseFloat(matches[1]);\r\n        }\r\n    };\r\n\r\n    // Detect various browser versions because some old versions don't fully support the 'input' event\r\n    var operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()),\r\n        userAgent = window.navigator.userAgent,\r\n        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\\/([^ ]*) safari/i)),\r\n        firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]*)/));\r\n}\r\n\r\n// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\r\n// But it does fire the 'selectionchange' event on many of those, presumably because the\r\n// cursor is moving and that counts as the selection changing. The 'selectionchange' event is\r\n// fired at the document level only and doesn't directly indicate which element changed. We\r\n// set up just one event handler for the document and use 'activeElement' to determine which\r\n// element was changed.\r\nif (ko.utils.ieVersion < 10) {\r\n    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\r\n        selectionChangeHandlerName = ko.utils.domData.nextKey();\r\n    var selectionChangeHandler = function(event) {\r\n        var target = this.activeElement,\r\n            handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);\r\n        if (handler) {\r\n            handler(event);\r\n        }\r\n    };\r\n    var registerForSelectionChangeEvent = function (element, handler) {\r\n        var ownerDoc = element.ownerDocument;\r\n        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\r\n            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\r\n            ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);\r\n        }\r\n        ko.utils.domData.set(element, selectionChangeHandlerName, handler);\r\n    };\r\n}\r\n\r\nko.bindingHandlers['textInput'] = {\r\n    'init': function (element, valueAccessor, allBindings) {\r\n\r\n        var previousElementValue = element.value,\r\n            timeoutHandle,\r\n            elementValueBeforeEvent;\r\n\r\n        var updateModel = function (event) {\r\n            clearTimeout(timeoutHandle);\r\n            elementValueBeforeEvent = timeoutHandle = undefined;\r\n\r\n            var elementValue = element.value;\r\n            if (previousElementValue !== elementValue) {\r\n                // Provide a way for tests to know exactly which event was processed\r\n                if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;\r\n                previousElementValue = elementValue;\r\n                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);\r\n            }\r\n        };\r\n\r\n        var deferUpdateModel = function (event) {\r\n            if (!timeoutHandle) {\r\n                // The elementValueBeforeEvent variable is set *only* during the brief gap between an\r\n                // event firing and the updateModel function running. This allows us to ignore model\r\n                // updates that are from the previous state of the element, usually due to techniques\r\n                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\r\n                elementValueBeforeEvent = element.value;\r\n                var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;\r\n                timeoutHandle = ko.utils.setTimeout(handler, 4);\r\n            }\r\n        };\r\n\r\n        // IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);\r\n        // so we'll make sure all updates are asynchronous\r\n        var ieUpdateModel = ko.utils.ieVersion == 9 ? deferUpdateModel : updateModel;\r\n\r\n        var updateView = function () {\r\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (modelValue === null || modelValue === undefined) {\r\n                modelValue = '';\r\n            }\r\n\r\n            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {\r\n                ko.utils.setTimeout(updateView, 4);\r\n                return;\r\n            }\r\n\r\n            // Update the element only if the element and model are different. On some browsers, updating the value\r\n            // will move the cursor to the end of the input, which would be bad while the user is typing.\r\n            if (element.value !== modelValue) {\r\n                previousElementValue = modelValue;  // Make sure we ignore events (propertychange) that result from updating the value\r\n                element.value = modelValue;\r\n            }\r\n        };\r\n\r\n        var onEvent = function (event, handler) {\r\n            ko.utils.registerEventHandler(element, event, handler);\r\n        };\r\n\r\n        if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {\r\n            // Provide a way for tests to specify exactly which events are bound\r\n            ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function(eventName) {\r\n                if (eventName.slice(0,5) == 'after') {\r\n                    onEvent(eventName.slice(5), deferUpdateModel);\r\n                } else {\r\n                    onEvent(eventName, updateModel);\r\n                }\r\n            });\r\n        } else {\r\n            if (ko.utils.ieVersion < 10) {\r\n                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever\r\n                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,\r\n                // but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it\r\n                // when using autocomplete, we'll use 'propertychange' for it also.\r\n                onEvent('propertychange', function(event) {\r\n                    if (event.propertyName === 'value') {\r\n                        ieUpdateModel(event);\r\n                    }\r\n                });\r\n\r\n                if (ko.utils.ieVersion == 8) {\r\n                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from\r\n                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following\r\n                    // events too.\r\n                    onEvent('keyup', updateModel);      // A single keystoke\r\n                    onEvent('keydown', updateModel);    // The first character when a key is held down\r\n                }\r\n                if (ko.utils.ieVersion >= 8) {\r\n                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using\r\n                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text\r\n                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'\r\n                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.\r\n                    // These are also needed in IE8 because of the bug described above.\r\n                    registerForSelectionChangeEvent(element, ieUpdateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.\r\n                    onEvent('dragend', deferUpdateModel);\r\n                }\r\n            } else {\r\n                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed\r\n                // through the user interface.\r\n                onEvent('input', updateModel);\r\n\r\n                if (safariVersion < 5 && ko.utils.tagNameLower(element) === \"textarea\") {\r\n                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'\r\n                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.\r\n                    onEvent('keydown', deferUpdateModel);\r\n                    onEvent('paste', deferUpdateModel);\r\n                    onEvent('cut', deferUpdateModel);\r\n                } else if (operaVersion < 11) {\r\n                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.\r\n                    // We can try to catch some of those using 'keydown'.\r\n                    onEvent('keydown', deferUpdateModel);\r\n                } else if (firefoxVersion < 4.0) {\r\n                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete\r\n                    onEvent('DOMAutoComplete', updateModel);\r\n\r\n                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.\r\n                    onEvent('dragdrop', updateModel);       // <3.5\r\n                    onEvent('drop', updateModel);           // 3.5\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\r\n        onEvent('change', updateModel);\r\n\r\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['textInput'] = true;\r\n\r\n// textinput is an alias for textInput\r\nko.bindingHandlers['textinput'] = {\r\n    // preprocess is the only way to set up a full alias\r\n    'preprocess': function (value, name, addBinding) {\r\n        addBinding('textInput', value);\r\n    }\r\n};\r\n\r\n})();ko.bindingHandlers['uniqueName'] = {\r\n    'init': function (element, valueAccessor) {\r\n        if (valueAccessor()) {\r\n            var name = \"ko_unique_\" + (++ko.bindingHandlers['uniqueName'].currentIndex);\r\n            ko.utils.setElementName(element, name);\r\n        }\r\n    }\r\n};\r\nko.bindingHandlers['uniqueName'].currentIndex = 0;\r\nko.bindingHandlers['value'] = {\r\n    'after': ['options', 'foreach'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit\r\n        if (element.tagName.toLowerCase() == \"input\" && (element.type == \"checkbox\" || element.type == \"radio\")) {\r\n            ko.applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });\r\n            return;\r\n        }\r\n\r\n        // Always catch \"change\" event; possibly other events too if asked\r\n        var eventsToCatch = [\"change\"];\r\n        var requestedEventsToCatch = allBindings.get(\"valueUpdate\");\r\n        var propertyChangedFired = false;\r\n        var elementValueBeforeEvent = null;\r\n\r\n        if (requestedEventsToCatch) {\r\n            if (typeof requestedEventsToCatch == \"string\") // Allow both individual event names, and arrays of event names\r\n                requestedEventsToCatch = [requestedEventsToCatch];\r\n            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);\r\n            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);\r\n        }\r\n\r\n        var valueUpdateHandler = function() {\r\n            elementValueBeforeEvent = null;\r\n            propertyChangedFired = false;\r\n            var modelValue = valueAccessor();\r\n            var elementValue = ko.selectExtensions.readValue(element);\r\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'value', elementValue);\r\n        }\r\n\r\n        // Workaround for https://github.com/SteveSanderson/knockout/issues/122\r\n        // IE doesn't fire \"change\" events on textboxes if the user selects a value from its autocomplete list\r\n        var ieAutoCompleteHackNeeded = ko.utils.ieVersion && element.tagName.toLowerCase() == \"input\" && element.type == \"text\"\r\n                                       && element.autocomplete != \"off\" && (!element.form || element.form.autocomplete != \"off\");\r\n        if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, \"propertychange\") == -1) {\r\n            ko.utils.registerEventHandler(element, \"propertychange\", function () { propertyChangedFired = true });\r\n            ko.utils.registerEventHandler(element, \"focus\", function () { propertyChangedFired = false });\r\n            ko.utils.registerEventHandler(element, \"blur\", function() {\r\n                if (propertyChangedFired) {\r\n                    valueUpdateHandler();\r\n                }\r\n            });\r\n        }\r\n\r\n        ko.utils.arrayForEach(eventsToCatch, function(eventName) {\r\n            // The syntax \"after<eventname>\" means \"run the handler asynchronously after the event\"\r\n            // This is useful, for example, to catch \"keydown\" events after the browser has updated the control\r\n            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)\r\n            var handler = valueUpdateHandler;\r\n            if (ko.utils.stringStartsWith(eventName, \"after\")) {\r\n                handler = function() {\r\n                    // The elementValueBeforeEvent variable is non-null *only* during the brief gap between\r\n                    // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen\r\n                    // at the earliest asynchronous opportunity. We store this temporary information so that\r\n                    // if, between keyX and valueUpdateHandler, the underlying model value changes separately,\r\n                    // we can overwrite that model value change with the value the user just typed. Otherwise,\r\n                    // techniques like rateLimit can trigger model changes at critical moments that will\r\n                    // override the user's inputs, causing keystrokes to be lost.\r\n                    elementValueBeforeEvent = ko.selectExtensions.readValue(element);\r\n                    ko.utils.setTimeout(valueUpdateHandler, 0);\r\n                };\r\n                eventName = eventName.substring(\"after\".length);\r\n            }\r\n            ko.utils.registerEventHandler(element, eventName, handler);\r\n        });\r\n\r\n        var updateFromModel = function () {\r\n            var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n            var elementValue = ko.selectExtensions.readValue(element);\r\n\r\n            if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {\r\n                ko.utils.setTimeout(updateFromModel, 0);\r\n                return;\r\n            }\r\n\r\n            var valueHasChanged = (newValue !== elementValue);\r\n\r\n            if (valueHasChanged) {\r\n                if (ko.utils.tagNameLower(element) === \"select\") {\r\n                    var allowUnset = allBindings.get('valueAllowUnset');\r\n                    var applyValueAction = function () {\r\n                        ko.selectExtensions.writeValue(element, newValue, allowUnset);\r\n                    };\r\n                    applyValueAction();\r\n\r\n                    if (!allowUnset && newValue !== ko.selectExtensions.readValue(element)) {\r\n                        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,\r\n                        // because you're not allowed to have a model value that disagrees with a visible UI selection.\r\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                    } else {\r\n                        // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread\r\n                        // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread\r\n                        // to apply the value as well.\r\n                        ko.utils.setTimeout(applyValueAction, 0);\r\n                    }\r\n                } else {\r\n                    ko.selectExtensions.writeValue(element, newValue);\r\n                }\r\n            }\r\n        };\r\n\r\n        ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\r\n    },\r\n    'update': function() {} // Keep for backwards compatibility with code that may have wrapped value binding\r\n};\r\nko.expressionRewriting.twoWayBindings['value'] = true;\r\nko.bindingHandlers['visible'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        var isCurrentlyVisible = !(element.style.display == \"none\");\r\n        if (value && !isCurrentlyVisible)\r\n            element.style.display = \"\";\r\n        else if ((!value) && isCurrentlyVisible)\r\n            element.style.display = \"none\";\r\n    }\r\n};\r\n// 'click' is just a shorthand for the usual full-length event:{click:handler}\r\nmakeEventHandlerShortcut('click');\r\n// If you want to make a custom template engine,\r\n//\r\n// [1] Inherit from this class (like ko.nativeTemplateEngine does)\r\n// [2] Override 'renderTemplateSource', supplying a function with this signature:\r\n//\r\n//        function (templateSource, bindingContext, options) {\r\n//            // - templateSource.text() is the text of the template you should render\r\n//            // - bindingContext.$data is the data you should pass into the template\r\n//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,\r\n//            //     and bindingContext.$root available in the template too\r\n//            // - options gives you access to any other properties set on \"data-bind: { template: options }\"\r\n//            // - templateDocument is the document object of the template\r\n//            //\r\n//            // Return value: an array of DOM nodes\r\n//        }\r\n//\r\n// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:\r\n//\r\n//        function (script) {\r\n//            // Return value: Whatever syntax means \"Evaluate the JavaScript statement 'script' and output the result\"\r\n//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'\r\n//        }\r\n//\r\n//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.\r\n//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)\r\n//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.\r\n\r\nko.templateEngine = function () { };\r\n\r\nko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n    throw new Error(\"Override renderTemplateSource\");\r\n};\r\n\r\nko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {\r\n    throw new Error(\"Override createJavaScriptEvaluatorBlock\");\r\n};\r\n\r\nko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {\r\n    // Named template\r\n    if (typeof template == \"string\") {\r\n        templateDocument = templateDocument || document;\r\n        var elem = templateDocument.getElementById(template);\r\n        if (!elem)\r\n            throw new Error(\"Cannot find template with ID \" + template);\r\n        return new ko.templateSources.domElement(elem);\r\n    } else if ((template.nodeType == 1) || (template.nodeType == 8)) {\r\n        // Anonymous template\r\n        return new ko.templateSources.anonymousTemplate(template);\r\n    } else\r\n        throw new Error(\"Unknown template type: \" + template);\r\n};\r\n\r\nko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {\r\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n    return this['renderTemplateSource'](templateSource, bindingContext, options, templateDocument);\r\n};\r\n\r\nko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {\r\n    // Skip rewriting if requested\r\n    if (this['allowTemplateRewriting'] === false)\r\n        return true;\r\n    return this['makeTemplateSource'](template, templateDocument)['data'](\"isRewritten\");\r\n};\r\n\r\nko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {\r\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n    var rewritten = rewriterCallback(templateSource['text']());\r\n    templateSource['text'](rewritten);\r\n    templateSource['data'](\"isRewritten\", true);\r\n};\r\n\r\nko.exportSymbol('templateEngine', ko.templateEngine);\r\n\r\nko.templateRewriting = (function () {\r\n    var memoizeDataBindingAttributeSyntaxRegex = /(<([a-z]+\\d*)(?:\\s+(?!data-bind\\s*=\\s*)[a-z0-9\\-]+(?:=(?:\\\"[^\\\"]*\\\"|\\'[^\\']*\\'|[^>]*))?)*\\s+)data-bind\\s*=\\s*([\"'])([\\s\\S]*?)\\3/gi;\r\n    var memoizeVirtualContainerBindingSyntaxRegex = /<!--\\s*ko\\b\\s*([\\s\\S]*?)\\s*-->/g;\r\n\r\n    function validateDataBindValuesForRewriting(keyValueArray) {\r\n        var allValidators = ko.expressionRewriting.bindingRewriteValidators;\r\n        for (var i = 0; i < keyValueArray.length; i++) {\r\n            var key = keyValueArray[i]['key'];\r\n            if (allValidators.hasOwnProperty(key)) {\r\n                var validator = allValidators[key];\r\n\r\n                if (typeof validator === \"function\") {\r\n                    var possibleErrorMessage = validator(keyValueArray[i]['value']);\r\n                    if (possibleErrorMessage)\r\n                        throw new Error(possibleErrorMessage);\r\n                } else if (!validator) {\r\n                    throw new Error(\"This template engine does not support the '\" + key + \"' binding within its templates\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {\r\n        var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);\r\n        validateDataBindValuesForRewriting(dataBindKeyValueArray);\r\n        var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, {'valueAccessors':true});\r\n\r\n        // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional\r\n        // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this\r\n        // extra indirection.\r\n        var applyBindingsToNextSiblingScript =\r\n            \"ko.__tr_ambtns(function($context,$element){return(function(){return{ \" + rewrittenDataBindAttributeValue + \" } })()},'\" + nodeName.toLowerCase() + \"')\";\r\n        return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;\r\n    }\r\n\r\n    return {\r\n        ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {\r\n            if (!templateEngine['isTemplateRewritten'](template, templateDocument))\r\n                templateEngine['rewriteTemplate'](template, function (htmlString) {\r\n                    return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);\r\n                }, templateDocument);\r\n        },\r\n\r\n        memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {\r\n            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {\r\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[4], /* tagToRetain: */ arguments[1], /* nodeName: */ arguments[2], templateEngine);\r\n            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {\r\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ \"<!-- ko -->\", /* nodeName: */ \"#comment\", templateEngine);\r\n            });\r\n        },\r\n\r\n        applyMemoizedBindingsToNextSibling: function (bindings, nodeName) {\r\n            return ko.memoization.memoize(function (domNode, bindingContext) {\r\n                var nodeToBind = domNode.nextSibling;\r\n                if (nodeToBind && nodeToBind.nodeName.toLowerCase() === nodeName) {\r\n                    ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n\r\n\r\n// Exported only because it has to be referenced by string lookup from within rewritten template\r\nko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);\r\n(function() {\r\n    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\r\n    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\r\n    //\r\n    // Two are provided by default:\r\n    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\r\n    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\r\n    //                                           without reading/writing the actual element text content, since it will be overwritten\r\n    //                                           with the rendered template output.\r\n    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\r\n    // Template sources need to have the following functions:\r\n    //   text() \t\t\t- returns the template text from your storage location\r\n    //   text(value)\t\t- writes the supplied template text to your storage location\r\n    //   data(key)\t\t\t- reads values stored using data(key, value) - see below\r\n    //   data(key, value)\t- associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\r\n    //\r\n    // Optionally, template sources can also have the following functions:\r\n    //   nodes()            - returns a DOM element containing the nodes of this template, where available\r\n    //   nodes(value)       - writes the given DOM element to your storage location\r\n    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\r\n    // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().\r\n    //\r\n    // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\r\n    // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\r\n\r\n    ko.templateSources = {};\r\n\r\n    // ---- ko.templateSources.domElement -----\r\n\r\n    // template types\r\n    var templateScript = 1,\r\n        templateTextArea = 2,\r\n        templateTemplate = 3,\r\n        templateElement = 4;\r\n\r\n    ko.templateSources.domElement = function(element) {\r\n        this.domElement = element;\r\n\r\n        if (element) {\r\n            var tagNameLower = ko.utils.tagNameLower(element);\r\n            this.templateType =\r\n                tagNameLower === \"script\" ? templateScript :\r\n                tagNameLower === \"textarea\" ? templateTextArea :\r\n                    // For browsers with proper <template> element support, where the .content property gives a document fragment\r\n                tagNameLower == \"template\" && element.content && element.content.nodeType === 11 ? templateTemplate :\r\n                templateElement;\r\n        }\r\n    }\r\n\r\n    ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {\r\n        var elemContentsProperty = this.templateType === templateScript ? \"text\"\r\n                                 : this.templateType === templateTextArea ? \"value\"\r\n                                 : \"innerHTML\";\r\n\r\n        if (arguments.length == 0) {\r\n            return this.domElement[elemContentsProperty];\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            if (elemContentsProperty === \"innerHTML\")\r\n                ko.utils.setHtml(this.domElement, valueToWrite);\r\n            else\r\n                this.domElement[elemContentsProperty] = valueToWrite;\r\n        }\r\n    };\r\n\r\n    var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\r\n    ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {\r\n        if (arguments.length === 1) {\r\n            return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\r\n        } else {\r\n            ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\r\n        }\r\n    };\r\n\r\n    var templatesDomDataKey = ko.utils.domData.nextKey();\r\n    function getTemplateDomData(element) {\r\n        return ko.utils.domData.get(element, templatesDomDataKey) || {};\r\n    }\r\n    function setTemplateDomData(element, data) {\r\n        ko.utils.domData.set(element, templatesDomDataKey, data);\r\n    }\r\n\r\n    ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {\r\n        var element = this.domElement;\r\n        if (arguments.length == 0) {\r\n            var templateData = getTemplateDomData(element),\r\n                containerData = templateData.containerData;\r\n            return containerData || (\r\n                this.templateType === templateTemplate ? element.content :\r\n                this.templateType === templateElement ? element :\r\n                undefined);\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            setTemplateDomData(element, {containerData: valueToWrite});\r\n        }\r\n    };\r\n\r\n    // ---- ko.templateSources.anonymousTemplate -----\r\n    // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\r\n    // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\r\n    // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\r\n\r\n    ko.templateSources.anonymousTemplate = function(element) {\r\n        this.domElement = element;\r\n    }\r\n    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\r\n    ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\r\n    ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {\r\n        if (arguments.length == 0) {\r\n            var templateData = getTemplateDomData(this.domElement);\r\n            if (templateData.textData === undefined && templateData.containerData)\r\n                templateData.textData = templateData.containerData.innerHTML;\r\n            return templateData.textData;\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            setTemplateDomData(this.domElement, {textData: valueToWrite});\r\n        }\r\n    };\r\n\r\n    ko.exportSymbol('templateSources', ko.templateSources);\r\n    ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);\r\n    ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);\r\n})();\r\n(function () {\r\n    var _templateEngine;\r\n    ko.setTemplateEngine = function (templateEngine) {\r\n        if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))\r\n            throw new Error(\"templateEngine must inherit from ko.templateEngine\");\r\n        _templateEngine = templateEngine;\r\n    }\r\n\r\n    function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {\r\n        var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);\r\n        while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {\r\n            nextInQueue = ko.virtualElements.nextSibling(node);\r\n            action(node, nextInQueue);\r\n        }\r\n    }\r\n\r\n    function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {\r\n        // To be used on any nodes that have been rendered by a template and have been inserted into some parent element\r\n        // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because\r\n        // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,\r\n        // (1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings\r\n        // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)\r\n\r\n        if (continuousNodeArray.length) {\r\n            var firstNode = continuousNodeArray[0],\r\n                lastNode = continuousNodeArray[continuousNodeArray.length - 1],\r\n                parentNode = firstNode.parentNode,\r\n                provider = ko.bindingProvider['instance'],\r\n                preprocessNode = provider['preprocessNode'];\r\n\r\n            if (preprocessNode) {\r\n                invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {\r\n                    var nodePreviousSibling = node.previousSibling;\r\n                    var newNodes = preprocessNode.call(provider, node);\r\n                    if (newNodes) {\r\n                        if (node === firstNode)\r\n                            firstNode = newNodes[0] || nextNodeInRange;\r\n                        if (node === lastNode)\r\n                            lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;\r\n                    }\r\n                });\r\n\r\n                // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.\r\n                // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real\r\n                // first node needs to be in the array).\r\n                continuousNodeArray.length = 0;\r\n                if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there's nothing left to do\r\n                    return;\r\n                }\r\n                if (firstNode === lastNode) {\r\n                    continuousNodeArray.push(firstNode);\r\n                } else {\r\n                    continuousNodeArray.push(firstNode, lastNode);\r\n                    ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n                }\r\n            }\r\n\r\n            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)\r\n            // whereas a regular applyBindings won't introduce new memoized nodes\r\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                if (node.nodeType === 1 || node.nodeType === 8)\r\n                    ko.applyBindings(bindingContext, node);\r\n            });\r\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                if (node.nodeType === 1 || node.nodeType === 8)\r\n                    ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);\r\n            });\r\n\r\n            // Make sure any changes done by applyBindings or unmemoize are reflected in the array\r\n            ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n        }\r\n    }\r\n\r\n    function getFirstNodeFromPossibleArray(nodeOrNodeArray) {\r\n        return nodeOrNodeArray.nodeType ? nodeOrNodeArray\r\n                                        : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]\r\n                                        : null;\r\n    }\r\n\r\n    function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {\r\n        options = options || {};\r\n        var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n        var templateDocument = (firstTargetNode || template || {}).ownerDocument;\r\n        var templateEngineToUse = (options['templateEngine'] || _templateEngine);\r\n        ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);\r\n        var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);\r\n\r\n        // Loosely check result is an array of DOM nodes\r\n        if ((typeof renderedNodesArray.length != \"number\") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != \"number\"))\r\n            throw new Error(\"Template engine must return an array of DOM nodes\");\r\n\r\n        var haveAddedNodesToParent = false;\r\n        switch (renderMode) {\r\n            case \"replaceChildren\":\r\n                ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);\r\n                haveAddedNodesToParent = true;\r\n                break;\r\n            case \"replaceNode\":\r\n                ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);\r\n                haveAddedNodesToParent = true;\r\n                break;\r\n            case \"ignoreTargetNode\": break;\r\n            default:\r\n                throw new Error(\"Unknown renderMode: \" + renderMode);\r\n        }\r\n\r\n        if (haveAddedNodesToParent) {\r\n            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);\r\n            if (options['afterRender'])\r\n                ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext['$data']]);\r\n        }\r\n\r\n        return renderedNodesArray;\r\n    }\r\n\r\n    function resolveTemplateName(template, data, context) {\r\n        // The template can be specified as:\r\n        if (ko.isObservable(template)) {\r\n            // 1. An observable, with string value\r\n            return template();\r\n        } else if (typeof template === 'function') {\r\n            // 2. A function of (data, context) returning a string\r\n            return template(data, context);\r\n        } else {\r\n            // 3. A string\r\n            return template;\r\n        }\r\n    }\r\n\r\n    ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {\r\n        options = options || {};\r\n        if ((options['templateEngine'] || _templateEngine) == undefined)\r\n            throw new Error(\"Set a template engine before calling renderTemplate\");\r\n        renderMode = renderMode || \"replaceChildren\";\r\n\r\n        if (targetNodeOrNodeArray) {\r\n            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n\r\n            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)\r\n            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == \"replaceNode\") ? firstTargetNode.parentNode : firstTargetNode;\r\n\r\n            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes\r\n                function () {\r\n                    // Ensure we've got a proper binding context to work with\r\n                    var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))\r\n                        ? dataOrBindingContext\r\n                        : new ko.bindingContext(dataOrBindingContext, null, null, null, { \"exportDependencies\": true });\r\n\r\n                    var templateName = resolveTemplateName(template, bindingContext['$data'], bindingContext),\r\n                        renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);\r\n\r\n                    if (renderMode == \"replaceNode\") {\r\n                        targetNodeOrNodeArray = renderedNodesArray;\r\n                        firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n                    }\r\n                },\r\n                null,\r\n                { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }\r\n            );\r\n        } else {\r\n            // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node\r\n            return ko.memoization.memoize(function (domNode) {\r\n                ko.renderTemplate(template, dataOrBindingContext, options, domNode, \"replaceNode\");\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {\r\n        // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then\r\n        // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.\r\n        var arrayItemContext;\r\n\r\n        // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode\r\n        var executeTemplateForArrayItem = function (arrayValue, index) {\r\n            // Support selecting template as a function of the data being rendered\r\n            arrayItemContext = parentBindingContext['createChildContext'](arrayValue, options['as'], function(context) {\r\n                context['$index'] = index;\r\n            });\r\n\r\n            var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);\r\n            return executeTemplate(null, \"ignoreTargetNode\", templateName, arrayItemContext, options);\r\n        }\r\n\r\n        // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode\r\n        var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {\r\n            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);\r\n            if (options['afterRender'])\r\n                options['afterRender'](addedNodesArray, arrayValue);\r\n\r\n            // release the \"cache\" variable, so that it can be collected by\r\n            // the GC when its value isn't used from within the bindings anymore.\r\n            arrayItemContext = null;\r\n        };\r\n\r\n        return ko.dependentObservable(function () {\r\n            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];\r\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                unwrappedArray = [unwrappedArray];\r\n\r\n            // Filter out any entries marked as destroyed\r\n            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n            });\r\n\r\n            // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).\r\n            // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.\r\n            ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);\r\n\r\n        }, null, { disposeWhenNodeIsRemoved: targetNode });\r\n    };\r\n\r\n    var templateComputedDomDataKey = ko.utils.domData.nextKey();\r\n    function disposeOldComputedAndStoreNewOne(element, newComputed) {\r\n        var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);\r\n        if (oldComputed && (typeof(oldComputed.dispose) == 'function'))\r\n            oldComputed.dispose();\r\n        ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed && newComputed.isActive()) ? newComputed : undefined);\r\n    }\r\n\r\n    ko.bindingHandlers['template'] = {\r\n        'init': function(element, valueAccessor) {\r\n            // Support anonymous templates\r\n            var bindingValue = ko.utils.unwrapObservable(valueAccessor());\r\n            if (typeof bindingValue == \"string\" || bindingValue['name']) {\r\n                // It's a named template - clear the element\r\n                ko.virtualElements.emptyNode(element);\r\n            } else if ('nodes' in bindingValue) {\r\n                // We've been given an array of DOM nodes. Save them as the template source.\r\n                // There is no known use case for the node array being an observable array (if the output\r\n                // varies, put that behavior *into* your template - that's what templates are for), and\r\n                // the implementation would be a mess, so assert that it's not observable.\r\n                var nodes = bindingValue['nodes'] || [];\r\n                if (ko.isObservable(nodes)) {\r\n                    throw new Error('The \"nodes\" option must be a plain, non-observable array.');\r\n                }\r\n                var container = ko.utils.moveCleanedNodesToContainerElement(nodes); // This also removes the nodes from their current parent\r\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n            } else {\r\n                // It's an anonymous template - store the element contents, then clear the element\r\n                var templateNodes = ko.virtualElements.childNodes(element),\r\n                    container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent\r\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n            }\r\n            return { 'controlsDescendantBindings': true };\r\n        },\r\n        'update': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var value = valueAccessor(),\r\n                options = ko.utils.unwrapObservable(value),\r\n                shouldDisplay = true,\r\n                templateComputed = null,\r\n                templateName;\r\n\r\n            if (typeof options == \"string\") {\r\n                templateName = value;\r\n                options = {};\r\n            } else {\r\n                templateName = options['name'];\r\n\r\n                // Support \"if\"/\"ifnot\" conditions\r\n                if ('if' in options)\r\n                    shouldDisplay = ko.utils.unwrapObservable(options['if']);\r\n                if (shouldDisplay && 'ifnot' in options)\r\n                    shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);\r\n            }\r\n\r\n            if ('foreach' in options) {\r\n                // Render once for each data point (treating data set as empty if shouldDisplay==false)\r\n                var dataArray = (shouldDisplay && options['foreach']) || [];\r\n                templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);\r\n            } else if (!shouldDisplay) {\r\n                ko.virtualElements.emptyNode(element);\r\n            } else {\r\n                // Render once for this single data point (or use the viewModel if no data was provided)\r\n                var innerBindingContext = ('data' in options) ?\r\n                    bindingContext.createStaticChildContext(options['data'], options['as']) :  // Given an explitit 'data' value, we create a child binding context for it\r\n                    bindingContext;                                                        // Given no explicit 'data' value, we retain the same binding context\r\n                templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);\r\n            }\r\n\r\n            // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)\r\n            disposeOldComputedAndStoreNewOne(element, templateComputed);\r\n        }\r\n    };\r\n\r\n    // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.\r\n    ko.expressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {\r\n        var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);\r\n\r\n        if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])\r\n            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)\r\n\r\n        if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, \"name\"))\r\n            return null; // Named templates can be rewritten, so return \"no error\"\r\n        return \"This template engine does not support anonymous templates nested within its templates\";\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings['template'] = true;\r\n})();\r\n\r\nko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);\r\nko.exportSymbol('renderTemplate', ko.renderTemplate);\r\n// Go through the items that have been added and deleted and try to find matches between them.\r\nko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\r\n    if (left.length && right.length) {\r\n        var failedCompares, l, r, leftItem, rightItem;\r\n        for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {\r\n            for (r = 0; rightItem = right[r]; ++r) {\r\n                if (leftItem['value'] === rightItem['value']) {\r\n                    leftItem['moved'] = rightItem['index'];\r\n                    rightItem['moved'] = leftItem['index'];\r\n                    right.splice(r, 1);         // This item is marked as moved; so remove it from right list\r\n                    failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures\r\n                    break;\r\n                }\r\n            }\r\n            failedCompares += r;\r\n        }\r\n    }\r\n};\r\n\r\nko.utils.compareArrays = (function () {\r\n    var statusNotInOld = 'added', statusNotInNew = 'deleted';\r\n\r\n    // Simple calculation based on Levenshtein distance.\r\n    function compareArrays(oldArray, newArray, options) {\r\n        // For backward compatibility, if the third arg is actually a bool, interpret\r\n        // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.\r\n        options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});\r\n        oldArray = oldArray || [];\r\n        newArray = newArray || [];\r\n\r\n        if (oldArray.length < newArray.length)\r\n            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);\r\n        else\r\n            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\r\n    }\r\n\r\n    function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\r\n        var myMin = Math.min,\r\n            myMax = Math.max,\r\n            editDistanceMatrix = [],\r\n            smlIndex, smlIndexMax = smlArray.length,\r\n            bigIndex, bigIndexMax = bigArray.length,\r\n            compareRange = (bigIndexMax - smlIndexMax) || 1,\r\n            maxDistance = smlIndexMax + bigIndexMax + 1,\r\n            thisRow, lastRow,\r\n            bigIndexMaxForRow, bigIndexMinForRow;\r\n\r\n        for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {\r\n            lastRow = thisRow;\r\n            editDistanceMatrix.push(thisRow = []);\r\n            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\r\n            bigIndexMinForRow = myMax(0, smlIndex - 1);\r\n            for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {\r\n                if (!bigIndex)\r\n                    thisRow[bigIndex] = smlIndex + 1;\r\n                else if (!smlIndex)  // Top row - transform empty array into new array via additions\r\n                    thisRow[bigIndex] = bigIndex + 1;\r\n                else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])\r\n                    thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)\r\n                else {\r\n                    var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)\r\n                    var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)\r\n                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        var editScript = [], meMinusOne, notInSml = [], notInBig = [];\r\n        for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\r\n            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\r\n            if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {\r\n                notInSml.push(editScript[editScript.length] = {     // added\r\n                    'status': statusNotInSml,\r\n                    'value': bigArray[--bigIndex],\r\n                    'index': bigIndex });\r\n            } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\r\n                notInBig.push(editScript[editScript.length] = {     // deleted\r\n                    'status': statusNotInBig,\r\n                    'value': smlArray[--smlIndex],\r\n                    'index': smlIndex });\r\n            } else {\r\n                --bigIndex;\r\n                --smlIndex;\r\n                if (!options['sparse']) {\r\n                    editScript.push({\r\n                        'status': \"retained\",\r\n                        'value': bigArray[bigIndex] });\r\n                }\r\n            }\r\n        }\r\n\r\n        // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\r\n        // smlIndexMax keeps the time complexity of this algorithm linear.\r\n        ko.utils.findMovesInArrayComparison(notInBig, notInSml, !options['dontLimitMoves'] && smlIndexMax * 10);\r\n\r\n        return editScript.reverse();\r\n    }\r\n\r\n    return compareArrays;\r\n})();\r\n\r\nko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);\r\n(function () {\r\n    // Objective:\r\n    // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,\r\n    //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node\r\n    // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node\r\n    //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we\r\n    //   previously mapped - retain those nodes, and just insert/delete other ones\r\n\r\n    // \"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node\r\n    // You can use this, for example, to activate bindings on those nodes.\r\n\r\n    function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {\r\n        // Map this array value inside a dependentObservable so we re-map when any dependency changes\r\n        var mappedNodes = [];\r\n        var dependentObservable = ko.dependentObservable(function() {\r\n            var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];\r\n\r\n            // On subsequent evaluations, just replace the previously-inserted DOM nodes\r\n            if (mappedNodes.length > 0) {\r\n                ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);\r\n                if (callbackAfterAddingNodes)\r\n                    ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);\r\n            }\r\n\r\n            // Replace the contents of the mappedNodes array, thereby updating the record\r\n            // of which nodes would be deleted if valueToMap was itself later removed\r\n            mappedNodes.length = 0;\r\n            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);\r\n        }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes); } });\r\n        return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };\r\n    }\r\n\r\n    var lastMappingResultDomDataKey = ko.utils.domData.nextKey(),\r\n        deletedItemDummyValue = ko.utils.domData.nextKey();\r\n\r\n    ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {\r\n        // Compare the provided array against the previous one\r\n        array = array || [];\r\n        options = options || {};\r\n        var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;\r\n        var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];\r\n        var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });\r\n        var editScript = ko.utils.compareArrays(lastArray, array, options['dontLimitMoves']);\r\n\r\n        // Build the new mapping result\r\n        var newMappingResult = [];\r\n        var lastMappingResultIndex = 0;\r\n        var newMappingResultIndex = 0;\r\n\r\n        var nodesToDelete = [];\r\n        var itemsToProcess = [];\r\n        var itemsForBeforeRemoveCallbacks = [];\r\n        var itemsForMoveCallbacks = [];\r\n        var itemsForAfterAddCallbacks = [];\r\n        var mapData;\r\n\r\n        function itemMovedOrRetained(editScriptIndex, oldPosition) {\r\n            mapData = lastMappingResult[oldPosition];\r\n            if (newMappingResultIndex !== oldPosition)\r\n                itemsForMoveCallbacks[editScriptIndex] = mapData;\r\n            // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray\r\n            mapData.indexObservable(newMappingResultIndex++);\r\n            ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);\r\n            newMappingResult.push(mapData);\r\n            itemsToProcess.push(mapData);\r\n        }\r\n\r\n        function callCallback(callback, items) {\r\n            if (callback) {\r\n                for (var i = 0, n = items.length; i < n; i++) {\r\n                    if (items[i]) {\r\n                        ko.utils.arrayForEach(items[i].mappedNodes, function(node) {\r\n                            callback(node, i, items[i].arrayEntry);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {\r\n            movedIndex = editScriptItem['moved'];\r\n            switch (editScriptItem['status']) {\r\n                case \"deleted\":\r\n                    if (movedIndex === undefined) {\r\n                        mapData = lastMappingResult[lastMappingResultIndex];\r\n\r\n                        // Stop tracking changes to the mapping for these nodes\r\n                        if (mapData.dependentObservable) {\r\n                            mapData.dependentObservable.dispose();\r\n                            mapData.dependentObservable = undefined;\r\n                        }\r\n\r\n                        // Queue these nodes for later removal\r\n                        if (ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode).length) {\r\n                            if (options['beforeRemove']) {\r\n                                newMappingResult.push(mapData);\r\n                                itemsToProcess.push(mapData);\r\n                                if (mapData.arrayEntry === deletedItemDummyValue) {\r\n                                    mapData = null;\r\n                                } else {\r\n                                    itemsForBeforeRemoveCallbacks[i] = mapData;\r\n                                }\r\n                            }\r\n                            if (mapData) {\r\n                                nodesToDelete.push.apply(nodesToDelete, mapData.mappedNodes);\r\n                            }\r\n                        }\r\n                    }\r\n                    lastMappingResultIndex++;\r\n                    break;\r\n\r\n                case \"retained\":\r\n                    itemMovedOrRetained(i, lastMappingResultIndex++);\r\n                    break;\r\n\r\n                case \"added\":\r\n                    if (movedIndex !== undefined) {\r\n                        itemMovedOrRetained(i, movedIndex);\r\n                    } else {\r\n                        mapData = { arrayEntry: editScriptItem['value'], indexObservable: ko.observable(newMappingResultIndex++) };\r\n                        newMappingResult.push(mapData);\r\n                        itemsToProcess.push(mapData);\r\n                        if (!isFirstExecution)\r\n                            itemsForAfterAddCallbacks[i] = mapData;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Store a copy of the array items we just considered so we can difference it next time\r\n        ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);\r\n\r\n        // Call beforeMove first before any changes have been made to the DOM\r\n        callCallback(options['beforeMove'], itemsForMoveCallbacks);\r\n\r\n        // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)\r\n        ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);\r\n\r\n        // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)\r\n        for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {\r\n            // Get nodes for newly added items\r\n            if (!mapData.mappedNodes)\r\n                ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));\r\n\r\n            // Put nodes in the right place if they aren't there already\r\n            for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {\r\n                if (node !== nextNode)\r\n                    ko.virtualElements.insertAfter(domNode, node, lastNode);\r\n            }\r\n\r\n            // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)\r\n            if (!mapData.initialized && callbackAfterAddingNodes) {\r\n                callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);\r\n                mapData.initialized = true;\r\n            }\r\n        }\r\n\r\n        // If there's a beforeRemove callback, call it after reordering.\r\n        // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using\r\n        // some sort of animation, which is why we first reorder the nodes that will be removed. If the\r\n        // callback instead removes the nodes right away, it would be more efficient to skip reordering them.\r\n        // Perhaps we'll make that change in the future if this scenario becomes more common.\r\n        callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);\r\n\r\n        // Replace the stored values of deleted items with a dummy value. This provides two benefits: it marks this item\r\n        // as already \"removed\" so we won't call beforeRemove for it again, and it ensures that the item won't match up\r\n        // with an actual item in the array and appear as \"retained\" or \"moved\".\r\n        for (i = 0; i < itemsForBeforeRemoveCallbacks.length; ++i) {\r\n            if (itemsForBeforeRemoveCallbacks[i]) {\r\n                itemsForBeforeRemoveCallbacks[i].arrayEntry = deletedItemDummyValue;\r\n            }\r\n        }\r\n\r\n        // Finally call afterMove and afterAdd callbacks\r\n        callCallback(options['afterMove'], itemsForMoveCallbacks);\r\n        callCallback(options['afterAdd'], itemsForAfterAddCallbacks);\r\n    }\r\n})();\r\n\r\nko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);\r\nko.nativeTemplateEngine = function () {\r\n    this['allowTemplateRewriting'] = false;\r\n}\r\n\r\nko.nativeTemplateEngine.prototype = new ko.templateEngine();\r\nko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;\r\nko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n    var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly\r\n        templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,\r\n        templateNodes = templateNodesFunc ? templateSource['nodes']() : null;\r\n\r\n    if (templateNodes) {\r\n        return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);\r\n    } else {\r\n        var templateText = templateSource['text']();\r\n        return ko.utils.parseHtmlFragment(templateText, templateDocument);\r\n    }\r\n};\r\n\r\nko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();\r\nko.setTemplateEngine(ko.nativeTemplateEngine.instance);\r\n\r\nko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);\r\n(function() {\r\n    ko.jqueryTmplTemplateEngine = function () {\r\n        // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl\r\n        // doesn't expose a version number, so we have to infer it.\r\n        // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,\r\n        // which KO internally refers to as version \"2\", so older versions are no longer detected.\r\n        var jQueryTmplVersion = this.jQueryTmplVersion = (function() {\r\n            if (!jQueryInstance || !(jQueryInstance['tmpl']))\r\n                return 0;\r\n            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.\r\n            try {\r\n                if (jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {\r\n                    // Since 1.0.0pre, custom tags should append markup to an array called \"__\"\r\n                    return 2; // Final version of jquery.tmpl\r\n                }\r\n            } catch(ex) { /* Apparently not the version we were looking for */ }\r\n\r\n            return 1; // Any older version that we don't support\r\n        })();\r\n\r\n        function ensureHasReferencedJQueryTemplates() {\r\n            if (jQueryTmplVersion < 2)\r\n                throw new Error(\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\");\r\n        }\r\n\r\n        function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {\r\n            return jQueryInstance['tmpl'](compiledTemplate, data, jQueryTemplateOptions);\r\n        }\r\n\r\n        this['renderTemplateSource'] = function(templateSource, bindingContext, options, templateDocument) {\r\n            templateDocument = templateDocument || document;\r\n            options = options || {};\r\n            ensureHasReferencedJQueryTemplates();\r\n\r\n            // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)\r\n            var precompiled = templateSource['data']('precompiled');\r\n            if (!precompiled) {\r\n                var templateText = templateSource['text']() || \"\";\r\n                // Wrap in \"with($whatever.koBindingContext) { ... }\"\r\n                templateText = \"{{ko_with $item.koBindingContext}}\" + templateText + \"{{/ko_with}}\";\r\n\r\n                precompiled = jQueryInstance['template'](null, templateText);\r\n                templateSource['data']('precompiled', precompiled);\r\n            }\r\n\r\n            var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays\r\n            var jQueryTemplateOptions = jQueryInstance['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);\r\n\r\n            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);\r\n            resultNodes['appendTo'](templateDocument.createElement(\"div\")); // Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work\r\n\r\n            jQueryInstance['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders\r\n            return resultNodes;\r\n        };\r\n\r\n        this['createJavaScriptEvaluatorBlock'] = function(script) {\r\n            return \"{{ko_code ((function() { return \" + script + \" })()) }}\";\r\n        };\r\n\r\n        this['addTemplate'] = function(templateName, templateMarkup) {\r\n            document.write(\"<script type='text/html' id='\" + templateName + \"'>\" + templateMarkup + \"<\" + \"/script>\");\r\n        };\r\n\r\n        if (jQueryTmplVersion > 0) {\r\n            jQueryInstance['tmpl']['tag']['ko_code'] = {\r\n                open: \"__.push($1 || '');\"\r\n            };\r\n            jQueryInstance['tmpl']['tag']['ko_with'] = {\r\n                open: \"with($1) {\",\r\n                close: \"} \"\r\n            };\r\n        }\r\n    };\r\n\r\n    ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();\r\n    ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;\r\n\r\n    // Use this one by default *only if jquery.tmpl is referenced*\r\n    var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();\r\n    if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)\r\n        ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);\r\n\r\n    ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);\r\n})();\r\n}));\r\n}());\r\n})();\r\n","mage/accordion.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/tabs'\r\n], function ($, tabs) {\r\n    'use strict';\r\n\r\n    $.widget('mage.accordion', tabs, {\r\n        options: {\r\n            active: [0],\r\n            multipleCollapsible: false,\r\n            openOnFocus: false\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _callCollapsible: function () {\r\n            var self = this,\r\n                disabled = false,\r\n                active = false;\r\n\r\n            if (typeof this.options.active === 'string') {\r\n                this.options.active = this.options.active.split(' ').map(function (item) {\r\n                    return parseInt(item, 10);\r\n                });\r\n            }\r\n\r\n            $.each(this.collapsibles, function (i) {\r\n                disabled = active = false;\r\n\r\n                if ($.inArray(i, self.options.disabled) !== -1) {\r\n                    disabled = true;\r\n                }\r\n\r\n                if ($.inArray(i, self.options.active) !== -1) {\r\n                    active = true;\r\n                }\r\n                self._instantiateCollapsible(this, i, active, disabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Overwrites default functionality to provide the option to activate/deactivate multiple sections simultaneous\r\n         * @param {*} action\r\n         * @param {*} index\r\n         * @private\r\n         */\r\n        _toggleActivate: function (action, index) {\r\n            var self = this;\r\n\r\n            if ($.isArray(index && this.options.multipleCollapsible)) {\r\n                $.each(index, function () {\r\n                    self.collapsibles.eq(this).collapsible(action);\r\n                });\r\n            } else if (index === undefined && this.options.multipleCollapsible) {\r\n                this.collapsibles.collapsible(action);\r\n            } else {\r\n                this._super(action, index);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * If the Accordion allows multiple section to be active at the same time, if deep linking is used\r\n         * sections that don't contain the id from anchor shouldn't be closed, otherwise the accordion uses the\r\n         * tabs behavior\r\n         * @private\r\n         */\r\n        _handleDeepLinking: function () {\r\n            if (!this.options.multipleCollapsible) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prevent default behavior that closes the other sections when one gets activated if the Accordion allows\r\n         * multiple sections simultaneous\r\n         * @private\r\n         */\r\n        _closeOthers: function () {\r\n            var self = this;\r\n\r\n            if (!this.options.multipleCollapsible) {\r\n                $.each(this.collapsibles, function () {\r\n                    $(this).on('beforeOpen', function () {\r\n                        self.collapsibles.not(this).collapsible('deactivate');\r\n                    });\r\n                });\r\n            }\r\n            $.each(this.collapsibles, function () {\r\n                $(this).on('beforeOpen', function () {\r\n                    var section = $(this);\r\n\r\n                    section.addClass('allow').prevAll().addClass('allow');\r\n                    section.nextAll().removeClass('allow');\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.accordion;\r\n});\r\n","mage/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/apply/main',\r\n    'Magento_Ui/js/lib/knockout/bootstrap'\r\n], function ($, mage) {\r\n    'use strict';\r\n\r\n    $.ajaxSetup({\r\n        cache: false\r\n    });\r\n\r\n    /**\r\n     * Init all components defined via data-mage-init attribute.\r\n     */\r\n    $(mage.apply);\r\n});\r\n","mage/calendar.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*eslint max-depth: 0*/\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/datepicker',\r\n    'jquery-ui-modules/timepicker'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var calendarBasePrototype,\r\n        datepickerPrototype = $.datepicker.constructor.prototype;\r\n\r\n    $.datepicker.markerClassName = '_has-datepicker';\r\n\r\n    /**\r\n     * Extend JQuery date picker prototype with store local time methods\r\n     */\r\n    $.extend(datepickerPrototype, {\r\n        /**\r\n         * Get date/time according to store settings.\r\n         * We use serverTimezoneOffset (in seconds) instead of serverTimezoneSeconds\r\n         * in order to have ability to know actual store time even if page hadn't been reloaded\r\n         * @returns {Date}\r\n         */\r\n        _getTimezoneDate: function (options) {\r\n            // local time in ms\r\n            var ms = Date.now();\r\n\r\n            options = options || $.calendarConfig || {};\r\n\r\n            // Adjust milliseconds according to store timezone offset,\r\n            // mind the GMT zero offset\r\n            if (typeof options.serverTimezoneOffset !== 'undefined') {\r\n                // Make UTC time and add store timezone offset in seconds\r\n                ms += new Date().getTimezoneOffset() * 60 * 1000 + options.serverTimezoneOffset * 1000;\r\n            } else if (typeof options.serverTimezoneSeconds !== 'undefined') {\r\n                //Set milliseconds according to client local timezone offset\r\n                ms = (options.serverTimezoneSeconds + new Date().getTimezoneOffset() * 60) * 1000;\r\n            }\r\n\r\n            return new Date(ms);\r\n        },\r\n\r\n        /**\r\n         * Set date/time according to store settings.\r\n         * @param {String|Object} target - the target input field or division or span\r\n         */\r\n        _setTimezoneDateDatepicker: function (target) {\r\n            this._setDateDatepicker(target, this._getTimezoneDate());\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Widget calendar\r\n     */\r\n    $.widget('mage.calendar', {\r\n        options: {\r\n            autoComplete: true\r\n        },\r\n\r\n        /**\r\n         * Merge global options with options passed to widget invoke\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._enableAMPM();\r\n            this.options = $.extend(\r\n                {},\r\n                $.calendarConfig ? $.calendarConfig : {},\r\n                this.options.showsTime ? {\r\n                    showTime: true,\r\n                    showHour: true,\r\n                    showMinute: true\r\n                } : {},\r\n                this.options\r\n            );\r\n            this._initPicker(this.element);\r\n            this._overwriteGenerateHtml();\r\n        },\r\n\r\n        /**\r\n         * Get picker name\r\n         * @protected\r\n         */\r\n        _picker: function () {\r\n            return this.options.showsTime ? 'datetimepicker' : 'datepicker';\r\n        },\r\n\r\n        /**\r\n         * Fix for Timepicker - Set ampm option for Timepicker if timeformat contains string 'tt'\r\n         * @protected\r\n         */\r\n        _enableAMPM: function () {\r\n            if (this.options.timeFormat && this.options.timeFormat.indexOf('tt') >= 0) {\r\n                this.options.ampm = true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wrapper for overwrite jQuery UI datepicker function.\r\n         */\r\n        _overwriteGenerateHtml: function () {\r\n            /**\r\n             * Overwrite jQuery UI datepicker function.\r\n             * Reason: magento date could be set before calendar show\r\n             * but local date will be styled as current in original _generateHTML\r\n             *\r\n             * @param {Object} inst - instance datepicker.\r\n             * @return {String} html template\r\n             */\r\n            $.datepicker.constructor.prototype._generateHTML = function (inst) {\r\n                var today = this._getTimezoneDate(),\r\n                    isRTL = this._get(inst, 'isRTL'),\r\n                    showButtonPanel = this._get(inst, 'showButtonPanel'),\r\n                    hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext'),\r\n                    navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat'),\r\n                    numMonths = this._getNumberOfMonths(inst),\r\n                    showCurrentAtPos = this._get(inst, 'showCurrentAtPos'),\r\n                    stepMonths = this._get(inst, 'stepMonths'),\r\n                    isMultiMonth = parseInt(numMonths[0], 10) !== 1 || parseInt(numMonths[1], 10) !== 1,\r\n                    currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) :\r\n                        new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),\r\n                    minDate = this._getMinMaxDate(inst, 'min'),\r\n                    maxDate = this._getMinMaxDate(inst, 'max'),\r\n                    drawMonth = inst.drawMonth - showCurrentAtPos,\r\n                    drawYear = inst.drawYear,\r\n                    maxDraw,\r\n                    prevText = this._get(inst, 'prevText'),\r\n                    prev,\r\n                    nextText = this._get(inst, 'nextText'),\r\n                    next,\r\n                    currentText = this._get(inst, 'currentText'),\r\n                    gotoDate,\r\n                    controls,\r\n                    buttonPanel,\r\n                    firstDay,\r\n                    showWeek = this._get(inst, 'showWeek'),\r\n                    dayNames = this._get(inst, 'dayNames'),\r\n                    dayNamesMin = this._get(inst, 'dayNamesMin'),\r\n                    monthNames = this._get(inst, 'monthNames'),\r\n                    monthNamesShort =  this._get(inst, 'monthNamesShort'),\r\n                    beforeShowDay = this._get(inst, 'beforeShowDay'),\r\n                    showOtherMonths = this._get(inst, 'showOtherMonths'),\r\n                    selectOtherMonths = this._get(inst, 'selectOtherMonths'),\r\n                    defaultDate = this._getDefaultDate(inst),\r\n                    html = '',\r\n                    row = 0,\r\n                    col = 0,\r\n                    selectedDate,\r\n                    cornerClass = ' ui-corner-all',\r\n                    group = '',\r\n                    calender = '',\r\n                    dow = 0,\r\n                    thead,\r\n                    day,\r\n                    daysInMonth,\r\n                    leadDays,\r\n                    curRows,\r\n                    numRows,\r\n                    printDate,\r\n                    dRow = 0,\r\n                    tbody,\r\n                    daySettings,\r\n                    otherMonth,\r\n                    unselectable;\r\n\r\n                if (drawMonth < 0) {\r\n                    drawMonth += 12;\r\n                    drawYear--;\r\n                }\r\n\r\n                if (maxDate) {\r\n                    maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),\r\n                        maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));\r\n                    maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;\r\n\r\n                    while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {\r\n                        drawMonth--;\r\n\r\n                        if (drawMonth < 0) {\r\n                            drawMonth = 11;\r\n                            drawYear--;\r\n\r\n                        }\r\n                    }\r\n                }\r\n                inst.drawMonth = drawMonth;\r\n                inst.drawYear = drawYear;\r\n                prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText,\r\n                    this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),\r\n                    this._getFormatConfig(inst));\r\n                prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?\r\n                    '<a class=\"ui-datepicker-prev ui-corner-all\" data-handler=\"prev\" data-event=\"click\"' +\r\n                    ' title=\"' + prevText + '\">' +\r\n                    '<span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '\">' +\r\n                    '' + prevText + '</span></a>'\r\n                    : hideIfNoPrevNext ? ''\r\n                        :   '<a class=\"ui-datepicker-prev ui-corner-all ui-state-disabled\" title=\"' +\r\n                            '' + prevText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' +\r\n                            '' + (isRTL ? 'e' : 'w') + '\">' + prevText + '</span></a>';\r\n                nextText = !navigationAsDateFormat ?\r\n                    nextText\r\n                    :   this.formatDate(nextText,\r\n                        this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),\r\n                        this._getFormatConfig(inst));\r\n                next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?\r\n                    '<a class=\"ui-datepicker-next ui-corner-all\" data-handler=\"next\" data-event=\"click\"' +\r\n                    'title=\"' + nextText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' +\r\n                    '' + (isRTL ? 'w' : 'e') + '\">' + nextText + '</span></a>'\r\n                    : hideIfNoPrevNext ? ''\r\n                        :   '<a class=\"ui-datepicker-next ui-corner-all ui-state-disabled\" title=\"' + nextText + '\">' +\r\n                            '<span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '\">' + nextText +\r\n                            '</span></a>';\r\n                gotoDate = this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today;\r\n                currentText = !navigationAsDateFormat ? currentText :\r\n                    this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));\r\n                controls = !inst.inline ?\r\n                    '<button type=\"button\" class=\"ui-datepicker-close ui-state-default ui-priority-primary ' +\r\n                    'ui-corner-all\" data-handler=\"hide\" data-event=\"click\">' +\r\n                    this._get(inst, 'closeText') + '</button>'\r\n                    : '';\r\n                buttonPanel = showButtonPanel ?\r\n                    '<div class=\"ui-datepicker-buttonpane ui-widget-content\">' + (isRTL ? controls : '') +\r\n                    (this._isInRange(inst, gotoDate) ? '<button type=\"button\" class=\"ui-datepicker-current ' +\r\n                    'ui-state-default ui-priority-secondary ui-corner-all\" data-handler=\"today\" data-event=\"click\"' +\r\n                    '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';\r\n                firstDay = parseInt(this._get(inst, 'firstDay'), 10);\r\n                firstDay = isNaN(firstDay) ? 0 : firstDay;\r\n\r\n                for (row = 0; row < numMonths[0]; row++) {\r\n                    this.maxRows = 4;\r\n\r\n                    for (col = 0; col < numMonths[1]; col++) {\r\n                        selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));\r\n\r\n                        calender = '';\r\n\r\n                        if (isMultiMonth) {\r\n                            calender += '<div class=\"ui-datepicker-group';\r\n\r\n                            if (numMonths[1] > 1) {\r\n                                switch (col) {\r\n                                    case 0: calender += ' ui-datepicker-group-first';\r\n                                        cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left');\r\n                                        break;\r\n\r\n                                    case numMonths[1] - 1: calender += ' ui-datepicker-group-last';\r\n                                        cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right');\r\n                                        break;\r\n\r\n                                    default: calender += ' ui-datepicker-group-middle'; cornerClass = '';\r\n                                }\r\n                            }\r\n                            calender += '\">';\r\n                        }\r\n                        calender += '<div class=\"ui-datepicker-header ' +\r\n                            'ui-widget-header ui-helper-clearfix' + cornerClass + '\">' +\r\n                            (/all|left/.test(cornerClass) && parseInt(row, 10) === 0 ? isRTL ? next : prev : '') +\r\n                            (/all|right/.test(cornerClass) && parseInt(row, 10) === 0 ? isRTL ? prev : next : '') +\r\n                            this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,\r\n                            row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers\r\n                            '</div><table class=\"ui-datepicker-calendar\"><thead>' +\r\n                            '<tr>';\r\n                        thead = showWeek ?\r\n                            '<th class=\"ui-datepicker-week-col\">' + this._get(inst, 'weekHeader') + '</th>' : '';\r\n\r\n                        for (dow = 0; dow < 7; dow++) { // days of the week\r\n                            day = (dow + firstDay) % 7;\r\n                            thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ?\r\n                                ' class=\"ui-datepicker-week-end\"' : '') + '>' +\r\n                                '<span title=\"' + dayNames[day] + '\">' + dayNamesMin[day] + '</span></th>';\r\n                        }\r\n                        calender += thead + '</tr></thead><tbody>';\r\n                        daysInMonth = this._getDaysInMonth(drawYear, drawMonth);\r\n\r\n                        if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {\r\n                            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);\r\n                        }\r\n                        leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;\r\n                        curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate\r\n                        numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows;\r\n                        this.maxRows = numRows;\r\n                        printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));\r\n\r\n                        for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows\r\n                            calender += '<tr>';\r\n                            tbody = !showWeek ? '' : '<td class=\"ui-datepicker-week-col\">' +\r\n                            this._get(inst, 'calculateWeek')(printDate) + '</td>';\r\n\r\n                            for (dow = 0; dow < 7; dow++) { // create date picker days\r\n                                daySettings = beforeShowDay ?\r\n                                    beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, ''];\r\n                                otherMonth = printDate.getMonth() !== drawMonth;\r\n                                unselectable = otherMonth && !selectOtherMonths || !daySettings[0] ||\r\n                                minDate && printDate < minDate || maxDate && printDate > maxDate;\r\n                                tbody += '<td class=\"' +\r\n                                ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends\r\n                                (otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months\r\n                                (printDate.getTime() === selectedDate.getTime() &&\r\n                                drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key\r\n                                defaultDate.getTime() === printDate.getTime() &&\r\n                                defaultDate.getTime() === selectedDate.getTime() ?\r\n                                    // or defaultDate is current printedDate and defaultDate is selectedDate\r\n                                ' ' + this._dayOverClass : '') + // highlight selected day\r\n                                (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled' : '') +\r\n                                (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates\r\n                                (printDate.getTime() === currentDate.getTime() ? ' ' + this._currentClass : '') +\r\n                                (printDate.getDate() === today.getDate() && printDate.getMonth() === today.getMonth() &&\r\n                                printDate.getYear() === today.getYear() ? ' ui-datepicker-today' : '')) + '\"' +\r\n                                ((!otherMonth || showOtherMonths) && daySettings[2] ?\r\n                                ' title=\"' + daySettings[2] + '\"' : '') + // cell title\r\n                                (unselectable ? '' : ' data-handler=\"selectDay\" data-event=\"click\" data-month=\"' +\r\n                                '' + printDate.getMonth() + '\" data-year=\"' + printDate.getFullYear() + '\"') + '>' +\r\n                                (otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months\r\n                                    unselectable ? '<span class=\"ui-state-default\">' + printDate.getDate() + '</span>'\r\n                                        : '<a class=\"ui-state-default' +\r\n                                    (printDate.getTime() === today.getTime() ? ' ' : '') +\r\n                                    (printDate.getTime() === currentDate.getTime() ? ' ui-state-active' : '') +\r\n                                    (otherMonth ? ' ui-priority-secondary' : '') +\r\n                                    '\" href=\"#\">' + printDate.getDate() + '</a>') + '</td>';\r\n                                printDate.setDate(printDate.getDate() + 1);\r\n                                printDate = this._daylightSavingAdjust(printDate);\r\n                            }\r\n                            calender += tbody + '</tr>';\r\n                        }\r\n                        drawMonth++;\r\n\r\n                        if (drawMonth > 11) {\r\n                            drawMonth = 0;\r\n                            drawYear++;\r\n                        }\r\n                        calender += '</tbody></table>' + (isMultiMonth ? '</div>' +\r\n                        (numMonths[0] > 0 && col === numMonths[1] - 1 ? '<div class=\"ui-datepicker-row-break\"></div>'\r\n                            : '') : '');\r\n                        group += calender;\r\n                    }\r\n                    html += group;\r\n                }\r\n                html += buttonPanel + ($.ui.ie6 && !inst.inline ?\r\n                    '<iframe src=\"javascript:false;\" class=\"ui-datepicker-cover\" frameborder=\"0\"></iframe>' : '');\r\n                inst._keyEvent = false;\r\n\r\n                return html;\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Set current date if the date is not set\r\n         * @protected\r\n         * @param {Object} element\r\n         */\r\n        _setCurrentDate: function (element) {\r\n            if (!element.val()) {\r\n                element[this._picker()]('setTimezoneDate').val('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init Datetimepicker\r\n         * @protected\r\n         * @param {Object} element\r\n         */\r\n        _initPicker: function (element) {\r\n            var picker = element[this._picker()](this.options),\r\n                pickerButtonText = picker.next('.ui-datepicker-trigger')\r\n                    .find('img')\r\n                    .attr('title');\r\n\r\n            picker.next('.ui-datepicker-trigger')\r\n                .addClass('v-middle')\r\n                .text('') // Remove jQuery UI datepicker generated image\r\n                .append('<span>' + pickerButtonText + '</span>');\r\n\r\n            $(element).attr('autocomplete', this.options.autoComplete ? 'on' : 'off');\r\n\r\n            this._setCurrentDate(element);\r\n        },\r\n\r\n        /**\r\n         * destroy instance of datetimepicker\r\n         */\r\n        _destroy: function () {\r\n            this.element[this._picker()]('destroy');\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Method is kept for backward compatibility and unit-tests acceptance\r\n         * see \\mage\\calendar\\calendar-test.js\r\n         * @return {Object} date\r\n         */\r\n        getTimezoneDate: function () {\r\n            return datepickerPrototype._getTimezoneDate.call(this, this.options);\r\n        }\r\n    });\r\n\r\n    calendarBasePrototype = $.mage.calendar.prototype;\r\n\r\n    /**\r\n     * Extension for Calendar - date and time format convert functionality\r\n     * @var {Object}\r\n     */\r\n    $.widget('mage.calendar', $.extend({}, calendarBasePrototype,\r\n            /** @lends {$.mage.calendar.prototype} */ {\r\n                /**\r\n                 * key - backend format, value - jquery format\r\n                 * @type {Object}\r\n                 * @private\r\n                 */\r\n                dateTimeFormat: {\r\n                    date: {\r\n                        'EEEE': 'DD',\r\n                        'EEE': 'D',\r\n                        'EE': 'D',\r\n                        'E': 'D',\r\n                        'D': 'o',\r\n                        'MMMM': 'MM',\r\n                        'MMM': 'M',\r\n                        'MM': 'mm',\r\n                        'M': 'mm',\r\n                        'yyyy': 'yy',\r\n                        'y': 'yy',\r\n                        'Y': 'yy',\r\n                        'yy': 'yy' // Always long year format on frontend\r\n                    },\r\n                    time: {\r\n                        'a': 'TT'\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Add Date and Time converting to _create method\r\n                 * @protected\r\n                 */\r\n                _create: function () {\r\n                    if (this.options.dateFormat) {\r\n                        this.options.dateFormat = this._convertFormat(this.options.dateFormat, 'date');\r\n                    }\r\n\r\n                    if (this.options.timeFormat) {\r\n                        this.options.timeFormat = this._convertFormat(this.options.timeFormat, 'time');\r\n                    }\r\n                    calendarBasePrototype._create.apply(this, arguments);\r\n                },\r\n\r\n                /**\r\n                 * Converting date or time format\r\n                 * @protected\r\n                 * @param {String} format\r\n                 * @param {String} type\r\n                 * @return {String}\r\n                 */\r\n                _convertFormat: function (format, type) {\r\n                    var symbols = format.match(/([a-z]+)/ig),\r\n                        separators = format.match(/([^a-z]+)/ig),\r\n                        self = this,\r\n                        convertedFormat = '';\r\n\r\n                    if (symbols) {\r\n                        $.each(symbols, function (key, val) {\r\n                            convertedFormat +=\r\n                                (self.dateTimeFormat[type][val] || val) +\r\n                                (separators[key] || '');\r\n                        });\r\n                    }\r\n\r\n                    return convertedFormat;\r\n                }\r\n            })\r\n    );\r\n\r\n    /**\r\n     * Widget dateRange\r\n     * @extends $.mage.calendar\r\n     */\r\n    $.widget('mage.dateRange', $.mage.calendar, {\r\n\r\n        /**\r\n         * creates two instances of datetimepicker for date range selection\r\n         * @protected\r\n         */\r\n        _initPicker: function () {\r\n            var from,\r\n                to;\r\n\r\n            if (this.options.from && this.options.to) {\r\n                from = this.element.find('#' + this.options.from.id);\r\n                to = this.element.find('#' + this.options.to.id);\r\n                this.options.onSelect = $.proxy(function (selectedDate) {\r\n                    to[this._picker()]('option', 'minDate', selectedDate);\r\n                }, this);\r\n                $.mage.calendar.prototype._initPicker.call(this, from);\r\n                from.on('change', $.proxy(function () {\r\n                    to[this._picker()]('option', 'minDate', from[this._picker()]('getDate'));\r\n                }, this));\r\n                this.options.onSelect = $.proxy(function (selectedDate) {\r\n                    from[this._picker()]('option', 'maxDate', selectedDate);\r\n                }, this);\r\n                $.mage.calendar.prototype._initPicker.call(this, to);\r\n                to.on('change', $.proxy(function () {\r\n                    from[this._picker()]('option', 'maxDate', to[this._picker()]('getDate'));\r\n                }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * destroy two instances of datetimepicker\r\n         */\r\n        _destroy: function () {\r\n            if (this.options.from) {\r\n                this.element.find('#' + this.options.from.id)[this._picker()]('destroy');\r\n            }\r\n\r\n            if (this.options.to) {\r\n                this.element.find('#' + this.options.to.id)[this._picker()]('destroy');\r\n            }\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    // Overrides the \"today\" button functionality to select today's date when clicked.\r\n    $.datepicker._gotoTodayOriginal = $.datepicker._gotoToday;\r\n\r\n    /**\r\n     * overwrite jQuery UI _showDatepicker function for proper HTML generation conditions.\r\n     *\r\n     */\r\n    $.datepicker._showDatepickerOriginal = $.datepicker._showDatepicker;\r\n\r\n    /**\r\n     * Triggers original method showDataPicker for rendering calendar\r\n     * @param {HTMLObject} input\r\n     * @private\r\n     */\r\n    $.datepicker._showDatepicker = function (input) {\r\n        if (!input.disabled) {\r\n            $.datepicker._showDatepickerOriginal.call(this, input);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * _gotoToday\r\n     * @param {Object} el\r\n     */\r\n    $.datepicker._gotoToday = function (el) {\r\n        //Set date/time according to timezone offset\r\n        $(el).datepicker('setTimezoneDate')\r\n            // To ensure that user can re-select date field without clicking outside it first.\r\n            .blur().trigger('change');\r\n    };\r\n\r\n    return {\r\n        dateRange:  $.mage.dateRange,\r\n        calendar:   $.mage.calendar\r\n    };\r\n});\r\n","mage/collapsible.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/core',\r\n    'jquery/jquery-storageapi',\r\n    'mage/mage'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var hideProps = {},\r\n        showProps = {};\r\n\r\n    hideProps.height = 'hide';\r\n    showProps.height = 'show';\r\n\r\n    $.widget('mage.collapsible', {\r\n        options: {\r\n            active: false,\r\n            disabled: false,\r\n            collapsible: true,\r\n            header: '[data-role=title]',\r\n            content: '[data-role=content]',\r\n            trigger: '[data-role=trigger]',\r\n            closedState: null,\r\n            openedState: null,\r\n            disabledState: null,\r\n            ajaxUrlElement: '[data-ajax=true]',\r\n            ajaxContent: false,\r\n            loadingClass: null,\r\n            saveState: false,\r\n            animate: false,\r\n            icons: {\r\n                activeHeader: null,\r\n                header: null\r\n            },\r\n            collateral: {\r\n                element: null,\r\n                openedState: null\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.storage = $.localStorage;\r\n            this.icons = false;\r\n\r\n            if (typeof this.options.icons === 'string') {\r\n                this.options.icons = $.parseJSON(this.options.icons);\r\n            }\r\n\r\n            this._processPanels();\r\n            this._processState();\r\n            this._refresh();\r\n\r\n            if (this.options.icons.header && this.options.icons.activeHeader) {\r\n                this._createIcons();\r\n                this.icons = true;\r\n            }\r\n\r\n            this.element.on('dimensionsChanged', function (e) {\r\n                if (e.target && e.target.classList.contains('active')) {\r\n                    this._scrollToTopIfNotVisible();\r\n                }\r\n            }.bind(this));\r\n\r\n            this._bind('click');\r\n            this._trigger('created');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _refresh: function () {\r\n            this.trigger.attr('tabIndex', 0);\r\n\r\n            if (this.options.active && !this.options.disabled) {\r\n                if (this.options.openedState) {\r\n                    this.element.addClass(this.options.openedState);\r\n                }\r\n\r\n                if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                    $(this.options.collateral.element).addClass(this.options.collateral.openedState);\r\n                }\r\n\r\n                if (this.options.ajaxContent) {\r\n                    this._loadContent();\r\n                }\r\n                // ARIA (updates aria attributes)\r\n                this.header.attr({\r\n                    'aria-selected': false\r\n                });\r\n            } else if (this.options.disabled) {\r\n                this.disable();\r\n            } else {\r\n                this.content.hide();\r\n\r\n                if (this.options.closedState) {\r\n                    this.element.addClass(this.options.closedState);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Processing the state:\r\n         *     If deep linking is used and the anchor is the id of the content or the content contains this id,\r\n         *     and the collapsible element is a nested one having collapsible parents, in order to see the content,\r\n         *     all the parents must be expanded.\r\n         * @private\r\n         */\r\n        _processState: function () {\r\n            var anchor = window.location.hash,\r\n                isValid = $.mage.isValidSelector(anchor),\r\n                urlPath = window.location.pathname.replace(/\\./g, ''),\r\n                state;\r\n\r\n            this.stateKey = encodeURIComponent(urlPath + this.element.attr('id'));\r\n\r\n            if (isValid &&\r\n                ($(this.content.find(anchor)).length > 0 || this.content.attr('id') === anchor.replace('#', ''))\r\n            ) {\r\n                this.element.parents('[data-collapsible=true]').collapsible('forceActivate');\r\n\r\n                if (!this.options.disabled) {\r\n                    this.options.active = true;\r\n\r\n                    if (this.options.saveState) { //eslint-disable-line max-depth\r\n                        this.storage.set(this.stateKey, true);\r\n                    }\r\n                }\r\n            } else if (this.options.saveState && !this.options.disabled) {\r\n                state = this.storage.get(this.stateKey);\r\n\r\n                if (typeof state === 'undefined' || state === null) {\r\n                    this.storage.set(this.stateKey, this.options.active);\r\n                } else if (state === true) {\r\n                    this.options.active = true;\r\n                } else if (state === false) {\r\n                    this.options.active = false;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _createIcons: function () {\r\n            var icons = this.options.icons;\r\n\r\n            if (icons) {\r\n                $('<span>')\r\n                    .addClass(icons.header)\r\n                    .attr('data-role', 'icons')\r\n                    .prependTo(this.header);\r\n\r\n                if (this.options.active && !this.options.disabled) {\r\n                    this.header.children('[data-role=icons]')\r\n                        .removeClass(icons.header)\r\n                        .addClass(icons.activeHeader);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroyIcons: function () {\r\n            this.header\r\n                .children('[data-role=icons]')\r\n                .remove();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            var options = this.options;\r\n\r\n            this.element.removeAttr('data-collapsible');\r\n\r\n            this.trigger.removeAttr('tabIndex');\r\n\r\n            if (options.openedState) {\r\n                this.element.removeClass(options.openedState);\r\n            }\r\n\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).removeClass(this.options.collateral.openedState);\r\n            }\r\n\r\n            if (options.closedState) {\r\n                this.element.removeClass(options.closedState);\r\n            }\r\n\r\n            if (options.disabledState) {\r\n                this.element.removeClass(options.disabledState);\r\n            }\r\n\r\n            if (this.icons) {\r\n                this._destroyIcons();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _processPanels: function () {\r\n            var headers, triggers;\r\n\r\n            this.element.attr('data-collapsible', 'true');\r\n\r\n            if (typeof this.options.header === 'object') {\r\n                this.header = this.options.header;\r\n            } else {\r\n                headers = this.element.find(this.options.header);\r\n\r\n                if (headers.length > 0) {\r\n                    this.header = headers.eq(0);\r\n                } else {\r\n                    this.header = this.element;\r\n                }\r\n            }\r\n\r\n            if (typeof this.options.content === 'object') {\r\n                this.content = this.options.content;\r\n            } else {\r\n                this.content = this.header.next(this.options.content).eq(0);\r\n            }\r\n\r\n            // ARIA (init aria attributes)\r\n            if (this.header.attr('id')) {\r\n                this.content.attr('aria-labelledby', this.header.attr('id'));\r\n            }\r\n\r\n            if (this.content.attr('id')) {\r\n                this.header.attr('aria-controls', this.content.attr('id'));\r\n            }\r\n\r\n            this.header\r\n                .attr({\r\n                    'role': 'tab',\r\n                    'aria-selected': this.options.active,\r\n                    'aria-expanded': this.options.active\r\n                });\r\n\r\n            // For collapsible widget only (not tabs or accordion)\r\n            if (this.header.parent().attr('role') !== 'presentation') {\r\n                this.header\r\n                    .parent()\r\n                    .attr('role', 'tablist');\r\n            }\r\n\r\n            this.content.attr({\r\n                'role': 'tabpanel',\r\n                'aria-hidden': !this.options.active\r\n            });\r\n\r\n            if (typeof this.options.trigger === 'object') {\r\n                this.trigger = this.options.trigger;\r\n            } else {\r\n                triggers = this.header.find(this.options.trigger);\r\n\r\n                if (triggers.length > 0) {\r\n                    this.trigger = triggers.eq(0);\r\n                } else {\r\n                    this.trigger = this.header;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var keyCode;\r\n\r\n            if (event.altKey || event.ctrlKey) {\r\n                return;\r\n            }\r\n\r\n            keyCode = $.ui.keyCode;\r\n\r\n            switch (event.keyCode) {\r\n                case keyCode.SPACE:\r\n                case keyCode.ENTER:\r\n                    this._eventHandler(event);\r\n                    break;\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _bind: function (event) {\r\n            var self = this;\r\n\r\n            this.events = {\r\n                keydown: '_keydown'\r\n            };\r\n\r\n            if (event) {\r\n                $.each(event.split(' '), function (index, eventName) {\r\n                    self.events[eventName] = '_eventHandler';\r\n                });\r\n            }\r\n            this._off(this.trigger);\r\n\r\n            if (!this.options.disabled) {\r\n                this._on(this.trigger, this.events);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable.\r\n         */\r\n        disable: function () {\r\n            this.options.disabled = true;\r\n            this._off(this.trigger);\r\n            this.forceDeactivate();\r\n\r\n            if (this.options.disabledState) {\r\n                this.element.addClass(this.options.disabledState);\r\n            }\r\n            this.trigger.attr('tabIndex', -1);\r\n        },\r\n\r\n        /**\r\n         * Enable.\r\n         */\r\n        enable: function () {\r\n            this.options.disabled = false;\r\n            this._on(this.trigger, this.events);\r\n            this.forceActivate();\r\n\r\n            if (this.options.disabledState) {\r\n                this.element.removeClass(this.options.disabledState);\r\n            }\r\n            this.trigger.attr('tabIndex', 0);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _eventHandler: function (event) {\r\n\r\n            if (this.options.active && this.options.collapsible) {\r\n                this.deactivate();\r\n            } else {\r\n                this.activate();\r\n\r\n            }\r\n            event.preventDefault();\r\n\r\n        },\r\n\r\n        /**\r\n         * @param {*} prop\r\n         * @private\r\n         */\r\n        _animate: function (prop) {\r\n            var duration,\r\n                easing,\r\n                animate = this.options.animate;\r\n\r\n            if (typeof animate === 'number') {\r\n                duration = animate;\r\n            }\r\n\r\n            if (typeof animate === 'string') {\r\n                animate = $.parseJSON(animate);\r\n            }\r\n            duration = duration || animate.duration;\r\n            easing = animate.easing;\r\n            this.content.animate(prop, duration, easing);\r\n        },\r\n\r\n        /**\r\n         * Deactivate.\r\n         */\r\n        deactivate: function () {\r\n            if (this.options.animate) {\r\n                this._animate(hideProps);\r\n            } else {\r\n                this.content.hide();\r\n            }\r\n            this._close();\r\n        },\r\n\r\n        /**\r\n         * Force deactivate.\r\n         */\r\n        forceDeactivate: function () {\r\n            this.content.hide();\r\n            this._close();\r\n\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _close: function () {\r\n            this.options.active = false;\r\n\r\n            if (this.options.saveState) {\r\n                this.storage.set(this.stateKey, false);\r\n            }\r\n\r\n            if (this.options.openedState) {\r\n                this.element.removeClass(this.options.openedState);\r\n            }\r\n\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).removeClass(this.options.collateral.openedState);\r\n            }\r\n\r\n            if (this.options.closedState) {\r\n                this.element.addClass(this.options.closedState);\r\n            }\r\n\r\n            if (this.icons) {\r\n                this.header.children('[data-role=icons]')\r\n                    .removeClass(this.options.icons.activeHeader)\r\n                    .addClass(this.options.icons.header);\r\n            }\r\n\r\n            // ARIA (updates aria attributes)\r\n            this.header.attr({\r\n                'aria-selected': 'false',\r\n                'aria-expanded': 'false'\r\n            });\r\n            this.content.attr({\r\n                'aria-hidden': 'true'\r\n            });\r\n\r\n            this.element.trigger('dimensionsChanged', {\r\n                opened: false\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Activate.\r\n         *\r\n         * @return void;\r\n         */\r\n        activate: function () {\r\n            if (this.options.disabled) {\r\n                return;\r\n            }\r\n\r\n            if (this.options.animate) {\r\n                this._animate(showProps);\r\n            } else {\r\n                this.content.show();\r\n            }\r\n            this._open();\r\n        },\r\n\r\n        /**\r\n         * Force activate.\r\n         */\r\n        forceActivate: function () {\r\n            if (!this.options.disabled) {\r\n                this.content.show();\r\n                this._open();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _open: function () {\r\n            this.element.trigger('beforeOpen');\r\n            this.options.active = true;\r\n\r\n            if (this.options.ajaxContent) {\r\n                this._loadContent();\r\n            }\r\n\r\n            if (this.options.saveState) {\r\n                this.storage.set(this.stateKey, true);\r\n            }\r\n\r\n            if (this.options.openedState) {\r\n                this.element.addClass(this.options.openedState);\r\n            }\r\n\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).addClass(this.options.collateral.openedState);\r\n            }\r\n\r\n            if (this.options.closedState) {\r\n                this.element.removeClass(this.options.closedState);\r\n            }\r\n\r\n            if (this.icons) {\r\n                this.header.children('[data-role=icons]')\r\n                    .removeClass(this.options.icons.header)\r\n                    .addClass(this.options.icons.activeHeader);\r\n            }\r\n\r\n            // ARIA (updates aria attributes)\r\n            this.header.attr({\r\n                'aria-selected': 'true',\r\n                'aria-expanded': 'true'\r\n            });\r\n            this.content.attr({\r\n                'aria-hidden': 'false'\r\n            });\r\n\r\n            this.element.trigger('dimensionsChanged', {\r\n                opened: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _loadContent: function () {\r\n            var url = this.element.find(this.options.ajaxUrlElement).attr('href'),\r\n                that = this;\r\n\r\n            if (url) {\r\n                that.xhr = $.get({\r\n                    url: url,\r\n                    dataType: 'html'\r\n                }, function () {\r\n                });\r\n            }\r\n\r\n            if (that.xhr && that.xhr.statusText !== 'canceled') {\r\n                if (that.options.loadingClass) {\r\n                    that.element.addClass(that.options.loadingClass);\r\n                }\r\n                that.content.attr('aria-busy', 'true');\r\n                that.xhr.done(function (response) {\r\n                    setTimeout(function () {\r\n                        that.content.html(response);\r\n                    }, 1);\r\n                });\r\n                that.xhr.always(function (jqXHR, status) {\r\n                    setTimeout(function () {\r\n                        if (status === 'abort') {\r\n                            that.content.stop(false, true);\r\n                        }\r\n\r\n                        if (that.options.loadingClass) {\r\n                            that.element.removeClass(that.options.loadingClass);\r\n                        }\r\n                        that.content.removeAttr('aria-busy');\r\n\r\n                        if (jqXHR === that.xhr) {\r\n                            delete that.xhr;\r\n                        }\r\n                    }, 1);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _scrollToTopIfNotVisible: function () {\r\n            if (this._isElementOutOfViewport()) {\r\n                this.header[0].scrollIntoView();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         * @return {Boolean}\r\n         */\r\n        _isElementOutOfViewport: function () {\r\n            var headerRect = this.header[0].getBoundingClientRect(),\r\n                contentRect = this.content.get().length ? this.content[0].getBoundingClientRect() : false,\r\n                headerOut,\r\n                contentOut;\r\n\r\n            headerOut = headerRect.bottom - headerRect.height < 0 ||\r\n                headerRect.right - headerRect.width < 0 ||\r\n                headerRect.left + headerRect.width > window.innerWidth ||\r\n                headerRect.top + headerRect.height > window.innerHeight;\r\n\r\n            contentOut = contentRect ? contentRect.bottom - contentRect.height < 0 ||\r\n                contentRect.right - contentRect.width < 0 ||\r\n                contentRect.left + contentRect.width > window.innerWidth ||\r\n                contentRect.top + contentRect.height > window.innerHeight : false;\r\n\r\n            return headerOut ? headerOut : contentOut;\r\n        }\r\n    });\r\n\r\n    return $.mage.collapsible;\r\n});\r\n","mage/dropdown_old.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var ESC_KEY_CODE = '27';\r\n\r\n    $(document)\r\n        .on('click.dropdown', function (event) {\r\n            if (!$(event.target).is('[data-toggle=dropdown].active, ' +\r\n                '[data-toggle=dropdown].active *, ' +\r\n                '[data-toggle=dropdown].active + .dropdown-menu, ' +\r\n                '[data-toggle=dropdown].active + .dropdown-menu *,' +\r\n                '[data-toggle=dropdown].active + [data-target=\"dropdown\"],' +\r\n                '[data-toggle=dropdown].active + [data-target=\"dropdown\"] *')\r\n            ) {\r\n                $('[data-toggle=dropdown].active').trigger('close.dropdown');\r\n            }\r\n        })\r\n        .on('keyup.dropdown', function (event) {\r\n            if (event.keyCode == ESC_KEY_CODE) { //eslint-disable-line eqeqeq\r\n                $('[data-toggle=dropdown].active').trigger('close.dropdown');\r\n            }\r\n        });\r\n\r\n    /**\r\n     * @param {Object} options\r\n     */\r\n    $.fn.dropdown = function (options) {\r\n        options = $.extend({\r\n            parent: null,\r\n            btnArrow: '.arrow',\r\n            activeClass: 'active'\r\n        }, options);\r\n\r\n        return this.each(function () {\r\n            var elem = $(this);\r\n\r\n            elem.off('open.dropdown, close.dropdown, click.dropdown');\r\n            elem.on('open.dropdown', function () {\r\n                elem\r\n                    .addClass(options.activeClass)\r\n                    .parent()\r\n                    .addClass(options.activeClass);\r\n                elem.find(options.btnArrow).text('\\u25b2'); // arrow up\r\n            });\r\n\r\n            elem.on('close.dropdown', function () {\r\n                elem\r\n                    .removeClass(options.activeClass)\r\n                    .parent()\r\n                    .removeClass(options.activeClass);\r\n                elem.find(options.btnArrow).text('\\u25bc'); // arrow down\r\n            });\r\n\r\n            elem.on('click.dropdown', function () {\r\n                var isActive = elem.hasClass('active');\r\n\r\n                $('[data-toggle=dropdown].active').trigger('close.dropdown');\r\n                elem.trigger(isActive ? 'close.dropdown' : 'open.dropdown');\r\n\r\n                return false;\r\n            });\r\n        });\r\n    };\r\n\r\n    return function (data, el) {\r\n        $(el).dropdown(data);\r\n    };\r\n});\r\n","mage/edit-trigger.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    var editTriggerPrototype;\r\n\r\n    $.widget('mage.editTrigger', {\r\n        options: {\r\n            img: '',\r\n            alt: '[TR]',\r\n            template: '#translate-inline-icon',\r\n            zIndex: 2000,\r\n            editSelector: '[data-translate]',\r\n            delay: 2000,\r\n            offsetTop: -3,\r\n            singleElement: true\r\n        },\r\n\r\n        /**\r\n         * editTriger creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.tmpl = mageTemplate(this.options.template);\r\n            this._initTrigger();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _getCss: function () {\r\n            return {\r\n                position: 'absolute',\r\n                cursor: 'pointer',\r\n                display: 'none',\r\n                'z-index': this.options.zIndex\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {*} appendTo\r\n         * @return {*|jQuery}\r\n         * @private\r\n         */\r\n        _createTrigger: function (appendTo) {\r\n            var tmpl = this.tmpl({\r\n                data: this.options\r\n            });\r\n\r\n            return $(tmpl)\r\n                .css(this._getCss())\r\n                .data('role', 'edit-trigger-element')\r\n                .appendTo(appendTo);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initTrigger: function () {\r\n            this.trigger = this._createTrigger($('body'));\r\n        },\r\n\r\n        /**\r\n         * Bind on mousemove event\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this.trigger.on('click.' + this.widgetName, $.proxy(this._onClick, this));\r\n            this.element.on('mousemove.' + this.widgetName, $.proxy(this._onMouseMove, this));\r\n        },\r\n\r\n        /**\r\n         * Show editTriger\r\n         */\r\n        show: function () {\r\n            if (this.trigger.is(':hidden')) {\r\n                this.trigger.show();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Hide editTriger\r\n         */\r\n        hide: function () {\r\n            this.currentTarget = null;\r\n\r\n            if (this.trigger && this.trigger.is(':visible')) {\r\n                this.trigger.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set editTriger position\r\n         * @protected\r\n         */\r\n        _setPosition: function (el) {\r\n            var offset = el.offset();\r\n\r\n            this.trigger.css({\r\n                top: offset.top + el.outerHeight() + this.options.offsetTop,\r\n                left: offset.left\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Show/hide trigger on mouse move.\r\n         *\r\n         * @param {jQuery.Event} e\r\n         * @protected\r\n         */\r\n        _onMouseMove: function (e) {\r\n            var target = $(e.target),\r\n                inner = target.find(this.options.editSelector);\r\n\r\n            if ($(e.target).is('button') && inner.length) {\r\n                target = inner;\r\n            } else if (!target.is(this.trigger) && !target.is(this.options.editSelector)) {\r\n                target = target.parents(this.options.editSelector).first();\r\n            }\r\n\r\n            if (target.length) {\r\n                if (!target.is(this.trigger)) {\r\n                    this._setPosition(target);\r\n                    this.currentTarget = target;\r\n                }\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Trigger event \"edit\" on element for translate.\r\n         *\r\n         * @param {jQuery.Event} e\r\n         * @protected\r\n         */\r\n        _onClick: function (e) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            $(this.currentTarget).trigger('edit.' + this.widgetName);\r\n            this.hide(true);\r\n        },\r\n\r\n        /**\r\n         * Destroy editTriger\r\n         */\r\n        destroy: function () {\r\n            this.trigger.remove();\r\n            this.element.off('.' + this.widgetName);\r\n\r\n            return $.Widget.prototype.destroy.call(this);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Extention for widget editTrigger - hide trigger with delay\r\n     */\r\n    editTriggerPrototype = $.mage.editTrigger.prototype;\r\n\r\n    $.widget('mage.editTrigger', $.extend({}, editTriggerPrototype, {\r\n        /**\r\n         * Added clear timeout on trigger show\r\n         */\r\n        show: function () {\r\n            editTriggerPrototype.show.apply(this, arguments);\r\n\r\n            if (this.options.delay) {\r\n                this._clearTimer();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Added setTimeout on trigger hide\r\n         */\r\n        hide: function (immediate) {\r\n            if (!immediate && this.options.delay) {\r\n                if (!this.timer) {\r\n                    this.timer = setTimeout($.proxy(function () {\r\n                        editTriggerPrototype.hide.apply(this, arguments);\r\n                        this._clearTimer();\r\n                    }, this), this.options.delay);\r\n                }\r\n            } else {\r\n                editTriggerPrototype.hide.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Clear timer\r\n         * @protected\r\n         */\r\n        _clearTimer: function () {\r\n            if (this.timer) {\r\n                clearTimeout(this.timer);\r\n                this.timer = null;\r\n            }\r\n        }\r\n    }));\r\n\r\n    return $.mage.editTrigger;\r\n});\r\n","mage/ie-class-fixer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable strict */\r\n(function () {\r\n    var userAgent = navigator.userAgent, // user agent identifier\r\n        html = document.documentElement, // html tag\r\n        gap = ''; // gap between classes\r\n\r\n    if (html.className) { // check if neighbour class exist in html tag\r\n        gap = ' ';\r\n    } // end if\r\n\r\n    if (userAgent.match(/Trident.*rv[ :]*11\\./)) { // Special case for IE11\r\n        html.className += gap + 'ie11';\r\n    } // end if\r\n\r\n})();\r\n","mage/layout.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\n/* eslint-disable strict */\r\ndefine(['underscore'], function (_) {\r\n    return {\r\n        /**\r\n         * @param {Object} config\r\n         */\r\n        build: function (config) {\r\n            var types = _.map(_.flatten(config), function (item) {\r\n                return item.type;\r\n            });\r\n\r\n            require(types, function () {});\r\n        }\r\n    };\r\n});\r\n","mage/loader_old.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget',\r\n    'mage/translate'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.loader', {\r\n        loaderStarted: 0,\r\n        spinner: $(undefined),\r\n        options: {\r\n            icon: '',\r\n            texts: {\r\n                loaderText: $.mage.__('Please wait...'),\r\n                imgAlt: $.mage.__('Loading...')\r\n            },\r\n            template: '<div class=\"loading-mask\" data-role=\"loader\">' +\r\n                '<div class=\"popup popup-loading\">' +\r\n                '<div class=\"popup-inner\">' +\r\n                '<% if (data.icon) { %>' +\r\n                    '<img ' +\r\n                        '<% if (data.texts.imgAlt) { %>alt=\"<%- data.texts.imgAlt %>\"<% } %> ' +\r\n                        'src=\"<%- data.icon %>\"><% } %>' +\r\n                '<% if (data.texts.loaderText) { %><%- data.texts.loaderText %><% } %>' +\r\n                '</div>' +\r\n                '</div>' +\r\n                '</div>'\r\n        },\r\n\r\n        /**\r\n         * Loader creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Bind on ajax events\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                'processStop': 'hide',\r\n                'processStart': 'show',\r\n                'show.loader': 'show',\r\n                'hide.loader': 'hide',\r\n                'contentUpdated.loader': '_contentUpdated'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Verify loader present after content updated\r\n         *\r\n         * This will be cleaned up by the task MAGETWO-11070\r\n         *\r\n         * @param {jQuery.Event} e\r\n         * @private\r\n         */\r\n        _contentUpdated: function (e) {\r\n            this.show(e);\r\n        },\r\n\r\n        /**\r\n         * Show loader\r\n         */\r\n        show: function (e, ctx) {\r\n            this._render();\r\n            this.loaderStarted++;\r\n            this.spinner.show();\r\n\r\n            if (ctx) {\r\n                this.spinner\r\n                    .css({\r\n                        width: ctx.outerWidth(),\r\n                        height: ctx.outerHeight(),\r\n                        position: 'absolute'\r\n                    })\r\n                    .position({\r\n                        my: 'top left',\r\n                        at: 'top left',\r\n                        of: ctx\r\n                    });\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Hide loader\r\n         */\r\n        hide: function () {\r\n            if (this.loaderStarted > 0) {\r\n                this.loaderStarted--;\r\n\r\n                if (this.loaderStarted === 0) {\r\n                    this.spinner.hide();\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Render loader\r\n         * @protected\r\n         */\r\n        _render: function () {\r\n            var tmpl;\r\n\r\n            if (this.spinner.length === 0) {\r\n                tmpl = mageTemplate(this.options.template, {\r\n                    data: this.options\r\n                });\r\n\r\n                this.spinner = $(tmpl);\r\n            }\r\n\r\n            this.element.prepend(this.spinner);\r\n        },\r\n\r\n        /**\r\n         * Destroy loader\r\n         */\r\n        _destroy: function () {\r\n            this.spinner.remove();\r\n        }\r\n    });\r\n\r\n    /**\r\n     * This widget takes care of registering the needed loader listeners on the body\r\n     */\r\n    $.widget('mage.loaderAjax', {\r\n        options: {\r\n            defaultContainer: '[data-container=body]'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n            // There should only be one instance of this widget, and it should be attached\r\n            // to the body only. Having it on the page twice will trigger multiple processStarts.\r\n            if (window.console && !this.element.is(this.options.defaultContainer) && $.mage.isDevMode(undefined)) {\r\n                console.warn('This widget is intended to be attached to the body, not below.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            $(document).on({\r\n                'ajaxSend': this._onAjaxSend.bind(this),\r\n                'ajaxComplete': this._onAjaxComplete.bind(this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} loaderContext\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _getJqueryObj: function (loaderContext) {\r\n            var ctx;\r\n\r\n            // Check to see if context is jQuery object or not.\r\n            if (loaderContext) {\r\n                if (loaderContext.jquery) {\r\n                    ctx = loaderContext;\r\n                } else {\r\n                    ctx = $(loaderContext);\r\n                }\r\n            } else {\r\n                ctx = $('[data-container=\"body\"]');\r\n            }\r\n\r\n            return ctx;\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @param {Object} jqxhr\r\n         * @param {Object} settings\r\n         * @private\r\n         */\r\n        _onAjaxSend: function (e, jqxhr, settings) {\r\n            var ctx;\r\n\r\n            if (settings && settings.showLoader) {\r\n                ctx = this._getJqueryObj(settings.loaderContext);\r\n                ctx.trigger('processStart');\r\n\r\n                // Check to make sure the loader is there on the page if not report it on the console.\r\n                // NOTE that this check should be removed before going live. It is just an aid to help\r\n                // in finding the uses of the loader that maybe broken.\r\n                if (window.console && !ctx.parents('[data-role=\"loader\"]').length) {\r\n                    console.warn('Expected to start loader but did not find one in the dom');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @param {Object} jqxhr\r\n         * @param {Object} settings\r\n         * @private\r\n         */\r\n        _onAjaxComplete: function (e, jqxhr, settings) {\r\n            if (settings && settings.showLoader && !settings.dontHide) {\r\n                this._getJqueryObj(settings.loaderContext).trigger('processStop');\r\n            }\r\n        }\r\n    });\r\n\r\n    return {\r\n        loader: $.mage.loader,\r\n        loaderAjax: $.mage.loaderAjax\r\n    };\r\n});\r\n","mage/mage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/apply/main'\r\n], function ($, mage) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Main namespace for Magento extensions\r\n     * @type {Object}\r\n     */\r\n    $.mage = $.mage || {};\r\n\r\n    /**\r\n     * Plugin mage, initialize components on elements\r\n     * @param {String} name - Components' path.\r\n     * @param {Object} config - Components' config.\r\n     * @returns {JQuery} Chainable.\r\n     */\r\n    $.fn.mage = function (name, config) {\r\n        config = config || {};\r\n\r\n        this.each(function (index, el) {\r\n            mage.applyFor(el, config, name);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    $.extend($.mage, {\r\n        /**\r\n         * Handle all components declared via data attribute\r\n         * @return {Object} $.mage\r\n         */\r\n        init: function () {\r\n            mage.apply();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Method handling redirects and page refresh\r\n         * @param {String} url - redirect URL\r\n         * @param {(undefined|String)} type - 'assign', 'reload', 'replace'\r\n         * @param {(undefined|Number)} timeout - timeout in milliseconds before processing the redirect or reload\r\n         * @param {(undefined|Boolean)} forced - true|false used for 'reload' only\r\n         */\r\n        redirect: function (url, type, timeout, forced) {\r\n            var _redirect;\r\n\r\n            forced  = !!forced;\r\n            timeout = timeout || 0;\r\n            type    = type || 'assign';\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _redirect = function () {\r\n                window.location[type](type === 'reload' ? forced : url);\r\n            };\r\n\r\n            timeout ? setTimeout(_redirect, timeout) : _redirect();\r\n        },\r\n\r\n        /**\r\n         * Checks if provided string is a valid selector.\r\n         * @param {String} selector - Selector to check.\r\n         * @returns {Boolean}\r\n         */\r\n        isValidSelector: function (selector) {\r\n            try {\r\n                document.querySelector(selector);\r\n\r\n                return true;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Init components inside of dynamically updated elements\r\n     */\r\n    $('body').on('contentUpdated', function () {\r\n        if (mage) {\r\n            mage.apply();\r\n        }\r\n    });\r\n\r\n    return $.mage;\r\n});\r\n","mage/multiselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'text!mage/multiselect.html',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery-ui-modules/widget',\r\n    'jquery/editableMultiselect/js/jquery.multiselect'\r\n], function (_, $, searchTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.multiselect2', {\r\n        options: {\r\n            mselectContainer: 'section.mselect-list',\r\n            mselectItemsWrapperClass: 'mselect-items-wrapper',\r\n            mselectCheckedClass: 'mselect-checked',\r\n            containerClass: 'paginated',\r\n            searchInputClass: 'admin__action-multiselect-search',\r\n            selectedItemsCountClass: 'admin__action-multiselect-items-selected',\r\n            currentPage: 1,\r\n            lastAppendValue: 0,\r\n            updateDelay: 1000,\r\n            optionsLoaded: false\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            $.fn.multiselect.call(this.element, this.options);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _init: function () {\r\n            this.domElement = this.element.get(0);\r\n\r\n            this.$container = $(this.options.mselectContainer);\r\n            this.$wrapper = this.$container.find('.' + this.options.mselectItemsWrapperClass);\r\n            this.$item = this.$wrapper.find('div').first();\r\n            this.selectedValues = [];\r\n            this.values = {};\r\n\r\n            this.$container.addClass(this.options.containerClass).prepend(searchTemplate);\r\n            this.$input = this.$container.find('.' + this.options.searchInputClass);\r\n            this.$selectedCounter = this.$container.find('.' + this.options.selectedItemsCountClass);\r\n            this.filter = '';\r\n\r\n            if (this.domElement.options.length) {\r\n                this._setLastAppendOption(this.domElement.options[this.domElement.options.length - 1].value);\r\n            }\r\n\r\n            this._initElement();\r\n            this._events();\r\n        },\r\n\r\n        /**\r\n         * Leave only saved/selected options in select element.\r\n         *\r\n         * @private\r\n         */\r\n        _initElement: function () {\r\n            this.element.empty();\r\n            _.each(this.options.selectedValues, function (value) {\r\n                this._createSelectedOption({\r\n                    value: value,\r\n                    label: value\r\n                });\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Attach required events.\r\n         *\r\n         * @private\r\n         */\r\n        _events: function () {\r\n            var onKeyUp = _.debounce(this.onKeyUp, this.options.updateDelay);\r\n\r\n            _.bindAll(this, 'onScroll', 'onCheck', 'onOptionsChange');\r\n\r\n            this.$wrapper.on('scroll', this.onScroll);\r\n            this.$wrapper.on('change.mselectCheck', '[type=checkbox]', this.onCheck);\r\n            this.$input.on('keyup', _.bind(onKeyUp, this));\r\n            this.element.on('change.hiddenSelect', this.onOptionsChange);\r\n        },\r\n\r\n        /**\r\n         * Behaves multiselect scroll.\r\n         */\r\n        onScroll: function () {\r\n            var height = this.$wrapper.height(),\r\n                scrollHeight = this.$wrapper.prop('scrollHeight'),\r\n                scrollTop = Math.ceil(this.$wrapper.prop('scrollTop'));\r\n\r\n            if (!this.options.optionsLoaded && scrollHeight - height <= scrollTop) {\r\n                this.loadOptions();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Behaves keyup event on input search\r\n         */\r\n        onKeyUp: function () {\r\n            if (this.getSearchCriteria() === this.filter) {\r\n                return false;\r\n            }\r\n\r\n            this.setFilter();\r\n            this.clearMultiselectOptions();\r\n            this.setCurrentPage(0);\r\n            this.loadOptions();\r\n        },\r\n\r\n        /**\r\n         * Callback for select change event\r\n         */\r\n        onOptionsChange: function () {\r\n            this.selectedValues = _.map(this.domElement.options, function (option) {\r\n                this.values[option.value] = true;\r\n\r\n                return option.value;\r\n            }, this);\r\n\r\n            this._updateSelectedCounter();\r\n        },\r\n\r\n        /**\r\n         * Overrides native check behaviour.\r\n         *\r\n         * @param {Event} event\r\n         */\r\n        onCheck: function (event) {\r\n            var checkbox = event.target,\r\n                option = {\r\n                    value: checkbox.value,\r\n                    label: $(checkbox).parent('label').text()\r\n                };\r\n\r\n            checkbox.checked ? this._createSelectedOption(option) : this._removeSelectedOption(option);\r\n            event.stopPropagation();\r\n        },\r\n\r\n        /**\r\n         * Show error message.\r\n         *\r\n         * @param {String} message\r\n         */\r\n        onError: function (message) {\r\n            alert({\r\n                content: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates current filter state.\r\n         */\r\n        setFilter: function () {\r\n            this.filter = this.getSearchCriteria() || '';\r\n        },\r\n\r\n        /**\r\n         * Reads search input value.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getSearchCriteria: function () {\r\n            return $.trim(this.$input.val());\r\n        },\r\n\r\n        /**\r\n         * Load options data.\r\n         */\r\n        loadOptions: function () {\r\n            var nextPage = this.getCurrentPage() + 1;\r\n\r\n            this.$wrapper.trigger('processStart');\r\n            this.$input.prop('disabled', true);\r\n\r\n            $.get(this.options.nextPageUrl, {\r\n                p: nextPage,\r\n                s: this.filter\r\n            })\r\n            .done(function (response) {\r\n                if (response.success) {\r\n                    this.appendOptions(response.result);\r\n                    this.setCurrentPage(nextPage);\r\n                } else {\r\n                    this.onError(response.errorMessage);\r\n                }\r\n            }.bind(this))\r\n            .always(function () {\r\n                this.$wrapper.trigger('processStop');\r\n                this.$input.prop('disabled', false);\r\n\r\n                if (this.filter) {\r\n                    this.$input.focus();\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Append loaded options\r\n         *\r\n         * @param {Array} options\r\n         */\r\n        appendOptions: function (options) {\r\n            var divOptions = [];\r\n\r\n            if (!options.length) {\r\n                return false;\r\n            }\r\n\r\n            if (this.isOptionsLoaded(options)) {\r\n                return;\r\n            }\r\n\r\n            options.forEach(function (option) {\r\n                if (!this.values[option.value]) {\r\n                    this.values[option.value] = true;\r\n                    option.selected = this._isOptionSelected(option);\r\n                    divOptions.push(this._createMultiSelectOption(option));\r\n                    this._setLastAppendOption(option.value);\r\n                }\r\n            }, this);\r\n\r\n            this.$wrapper.append(divOptions);\r\n        },\r\n\r\n        /**\r\n         * Clear multiselect options\r\n         */\r\n        clearMultiselectOptions: function () {\r\n            this._setLastAppendOption(0);\r\n            this.values = {};\r\n            this.$wrapper.empty();\r\n        },\r\n\r\n        /**\r\n         * Checks if all options are already loaded\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        isOptionsLoaded: function (options) {\r\n            this.options.optionsLoaded = this.options.lastAppendValue === options[options.length - 1].value;\r\n\r\n            return this.options.optionsLoaded;\r\n        },\r\n\r\n        /**\r\n         * Setter for current page.\r\n         *\r\n         * @param {Number} page\r\n         */\r\n        setCurrentPage: function (page) {\r\n            this.options.currentPage = page;\r\n        },\r\n\r\n        /**\r\n         * Getter for current page.\r\n         *\r\n         * @return {Number}\r\n         */\r\n        getCurrentPage: function () {\r\n            return this.options.currentPage;\r\n        },\r\n\r\n        /**\r\n         * Creates new selected option for select element\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @private\r\n         */\r\n        _createSelectedOption: function (option) {\r\n            var selectOption = new Option(option.label, option.value, false, true);\r\n\r\n            this.element.append(selectOption);\r\n            this.selectedValues.push(option.value);\r\n            this._updateSelectedCounter();\r\n\r\n            return selectOption;\r\n        },\r\n\r\n        /**\r\n         * Remove passed option from select element\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @return {Object} option\r\n         * @private\r\n         */\r\n        _removeSelectedOption: function (option) {\r\n            var unselectedOption = _.findWhere(this.domElement.options, {\r\n                value: option.value\r\n            });\r\n\r\n            if (!_.isUndefined(unselectedOption)) {\r\n                this.domElement.remove(unselectedOption.index);\r\n                this.selectedValues.splice(_.indexOf(this.selectedValues, option.value), 1);\r\n                this._updateSelectedCounter();\r\n            }\r\n\r\n            return unselectedOption;\r\n        },\r\n\r\n        /**\r\n         * Creates new DIV option for multiselect widget\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @param {Boolean} option.selected - is option selected\r\n         * @private\r\n         */\r\n        _createMultiSelectOption: function (option) {\r\n            var item = this.$item.clone(),\r\n                checkbox = item.find('input'),\r\n                isSelected = !!option.selected;\r\n\r\n            checkbox.val(option.value)\r\n                .prop('checked', isSelected)\r\n                .toggleClass(this.options.mselectCheckedClass, isSelected);\r\n\r\n            item.find('label > span').text(option.label);\r\n\r\n            return item;\r\n        },\r\n\r\n        /**\r\n         * Checks if passed option should be selected\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @param {Boolean} option.selected - is option selected\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _isOptionSelected: function (option) {\r\n            return !!~this.selectedValues.indexOf(option.value);\r\n        },\r\n\r\n        /**\r\n         * Saves last added option value.\r\n         *\r\n         * @param {Number} value\r\n         * @private\r\n         */\r\n        _setLastAppendOption: function (value) {\r\n            this.options.lastAppendValue = value;\r\n        },\r\n\r\n        /**\r\n         * Updates counter of selected items.\r\n         *\r\n         * @private\r\n         */\r\n        _updateSelectedCounter: function () {\r\n            this.$selectedCounter.text(this.selectedValues.length);\r\n        }\r\n    });\r\n\r\n    return $.mage.multiselect2;\r\n});\r\n","mage/polyfill.js":"try {\r\n    if (!window.localStorage || !window.sessionStorage) {\r\n        throw new Error();\r\n    }\r\n\r\n    localStorage.setItem('storage_test', 1);\r\n    localStorage.removeItem('storage_test');\r\n} catch (e) {\r\n    (function () {\r\n        'use strict';\r\n\r\n        /**\r\n         * Returns a storage object to shim local or sessionStorage\r\n         * @param {String} type - either 'local' or 'session'\r\n         */\r\n        var Storage = function (type) {\r\n            var data;\r\n\r\n            /**\r\n             * Creates a cookie\r\n             * @param {String} name\r\n             * @param {String} value\r\n             * @param {Integer} days\r\n             */\r\n            function createCookie(name, value, days) {\r\n                var date, expires;\r\n\r\n                if (days) {\r\n                    date = new Date();\r\n                    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\r\n                    expires = '; expires=' + date.toGMTString();\r\n                } else {\r\n                    expires = '';\r\n                }\r\n                document.cookie = name + '=' + value + expires + '; path=/';\r\n            }\r\n\r\n            /**\r\n             * Reads value of a cookie\r\n             * @param {String} name\r\n             */\r\n            function readCookie(name) {\r\n                var nameEQ = name + '=',\r\n                    ca = document.cookie.split(';'),\r\n                    i = 0,\r\n                    c;\r\n\r\n                for (i = 0; i < ca.length; i++) {\r\n                    c = ca[i];\r\n\r\n                    while (c.charAt(0) === ' ') {\r\n                        c = c.substring(1, c.length);\r\n                    }\r\n\r\n                    if (c.indexOf(nameEQ) === 0) {\r\n                        return c.substring(nameEQ.length, c.length);\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            /**\r\n             * Returns cookie name based upon the storage type.\r\n             * If this is session storage, the function returns a unique cookie per tab\r\n             */\r\n            function getCookieName() {\r\n\r\n                if (type !== 'session') {\r\n                    return 'localstorage';\r\n                }\r\n\r\n                if (!window.name) {\r\n                    window.name = new Date().getTime();\r\n                }\r\n\r\n                return 'sessionStorage' + window.name;\r\n            }\r\n\r\n            /**\r\n             * Sets storage cookie to a data object\r\n             * @param {Object} dataObject\r\n             */\r\n            function setData(dataObject) {\r\n                data = encodeURIComponent(JSON.stringify(dataObject));\r\n                createCookie(getCookieName(), data, 365);\r\n            }\r\n\r\n            /**\r\n             * Clears value of cookie data\r\n             */\r\n            function clearData() {\r\n                createCookie(getCookieName(), '', 365);\r\n            }\r\n\r\n            /**\r\n             * @returns value of cookie data\r\n             */\r\n            function getData() {\r\n                var dataResponse = readCookie(getCookieName());\r\n\r\n                return dataResponse ? JSON.parse(decodeURIComponent(dataResponse)) : {};\r\n            }\r\n\r\n            data = getData();\r\n\r\n            return {\r\n                length: 0,\r\n\r\n                /**\r\n                 * Clears data from storage\r\n                 */\r\n                clear: function () {\r\n                    data = {};\r\n                    this.length = 0;\r\n                    clearData();\r\n                },\r\n\r\n                /**\r\n                 * Gets an item from storage\r\n                 * @param {String} key\r\n                 */\r\n                getItem: function (key) {\r\n                    return data[key] === undefined ? null : data[key];\r\n                },\r\n\r\n                /**\r\n                 * Gets an item by index from storage\r\n                 * @param {Integer} i\r\n                 */\r\n                key: function (i) {\r\n                    var ctr = 0,\r\n                        k;\r\n\r\n                    for (k in data) {\r\n\r\n                        if (data.hasOwnProperty(k)) {\r\n\r\n                            // eslint-disable-next-line max-depth\r\n                            if (ctr.toString() === i.toString()) {\r\n                                return k;\r\n                            }\r\n                            ctr++;\r\n                        }\r\n                    }\r\n\r\n                    return null;\r\n                },\r\n\r\n                /**\r\n                 * Removes an item from storage\r\n                 * @param {String} key\r\n                 */\r\n                removeItem: function (key) {\r\n                    delete data[key];\r\n                    this.length--;\r\n                    setData(data);\r\n                },\r\n\r\n                /**\r\n                 * Sets an item from storage\r\n                 * @param {String} key\r\n                 * @param {String} value\r\n                 */\r\n                setItem: function (key, value) {\r\n                    data[key] = value.toString();\r\n                    this.length++;\r\n                    setData(data);\r\n                }\r\n            };\r\n        };\r\n\r\n        window.localStorage.prototype = window.localStorage = new Storage('local');\r\n        window.sessionStorage.prototype = window.sessionStorage = new Storage('session');\r\n    })();\r\n}\r\n","mage/popup-window.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.popupWindow', {\r\n        options: {\r\n            centerBrowser: 0, // center window over browser window? {1 (YES) or 0 (NO)}. overrides top and left\r\n            centerScreen: 0, // center window over entire screen? {1 (YES) or 0 (NO)}. overrides top and left\r\n            height: 500, // sets the height in pixels of the window.\r\n            left: 0, // left position when the window appears.\r\n            location: 0, // determines whether the address bar is displayed {1 (YES) or 0 (NO)}.\r\n            menubar: 0, // determines whether the menu bar is displayed {1 (YES) or 0 (NO)}.\r\n            resizable: 0, // whether the window can be resized {1 (YES) or 0 (NO)}.\r\n            scrollbars: 0, // determines whether scrollbars appear on the window {1 (YES) or 0 (NO)}.\r\n            status: 0, // whether a status line appears at the bottom of the window {1 (YES) or 0 (NO)}.\r\n            width: 500, // sets the width in pixels of the window.\r\n            windowName: null, // name of window set from the name attribute of the element that invokes the click\r\n            windowURL: null, // url used for the popup\r\n            top: 0, // top position when the window appears.\r\n            toolbar: 0 // determines whether a toolbar is displayed {1 (YES) or 0 (NO)}.\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.element.on('click', $.proxy(this._openPopupWindow, this));\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _openPopupWindow: function (event) {\r\n            var element = $(event.target),\r\n                settings = this.options,\r\n                windowFeatures =\r\n                    'height=' + settings.height +\r\n                        ',width=' + settings.width +\r\n                        ',toolbar=' + settings.toolbar +\r\n                        ',scrollbars=' + settings.scrollbars +\r\n                        ',status=' + settings.status +\r\n                        ',resizable=' + settings.resizable +\r\n                        ',location=' + settings.location +\r\n                        ',menuBar=' + settings.menubar,\r\n                centeredX,\r\n                centeredY;\r\n\r\n            settings.windowName = settings.windowName || element.attr('name');\r\n            settings.windowURL = settings.windowURL || element.attr('href');\r\n\r\n            if (settings.centerBrowser) {\r\n                centeredY = window.screenY + (window.outerHeight / 2 - settings.height / 2);\r\n                centeredX = window.screenX + (window.outerWidth / 2 - settings.width / 2);\r\n                windowFeatures += ',left=' + centeredX + ',top=' + centeredY;\r\n            } else if (settings.centerScreen) {\r\n                centeredY = (screen.height - settings.height) / 2;\r\n                centeredX = (screen.width - settings.width) / 2;\r\n                windowFeatures += ',left=' + centeredX + ',top=' + centeredY;\r\n            } else {\r\n                windowFeatures += ',left=' + settings.left + ',top=' + settings.top;\r\n            }\r\n\r\n            window.open(settings.windowURL, settings.windowName, windowFeatures).focus();\r\n            event.preventDefault();\r\n        }\r\n    });\r\n\r\n    return $.mage.popupWindow;\r\n});\r\n","mage/smart-keyboard-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @return {Object}\r\n     * @constructor\r\n     */\r\n    function KeyboardHandler() {\r\n        var body = $('body'),\r\n            focusState = false,\r\n            tabFocusClass = '_keyfocus',\r\n            productsGrid = '[data-container=\"product-grid\"]',\r\n            catalogProductsGrid = $(productsGrid),\r\n            CODE_TAB = 9;\r\n\r\n        /**\r\n         * Handle logic, when onTabKeyPress fired at first.\r\n         * Then it changes state.\r\n         */\r\n        function onFocusInHandler() {\r\n            focusState = true;\r\n            body.addClass(tabFocusClass)\r\n                .off('focusin.keyboardHandler', onFocusInHandler);\r\n        }\r\n\r\n        /**\r\n         * Handle logic to remove state after onTabKeyPress to normal.\r\n         */\r\n        function onClickHandler() {\r\n            focusState = false;\r\n            body.removeClass(tabFocusClass)\r\n                .off('click', onClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Tab key onKeypress handler. Apply main logic:\r\n         *  - call differ actions onTabKeyPress and onClick\r\n         */\r\n        function smartKeyboardFocus() {\r\n            $(document).on('keydown keypress', function (event) {\r\n                if (event.which === CODE_TAB && !focusState) {\r\n                    body\r\n                        .on('focusin.keyboardHandler', onFocusInHandler)\r\n                        .on('click', onClickHandler);\r\n                }\r\n            });\r\n\r\n            // ARIA support for catalog grid products\r\n            if (catalogProductsGrid.length) {\r\n                body.on('focusin.gridProducts', productsGrid, function () {\r\n                    if (body.hasClass(tabFocusClass)) {\r\n                        $(this).addClass('active');\r\n                    }\r\n                });\r\n                body.on('focusout.gridProducts', productsGrid, function () {\r\n                    $(this).removeClass('active');\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Attach smart focus on specific element.\r\n         * @param {jQuery} element\r\n         */\r\n        function handleFocus(element) {\r\n            element.on('focusin.emulateTabFocus', function () {\r\n                focusState = true;\r\n                body.addClass(tabFocusClass);\r\n                element.off();\r\n            });\r\n\r\n            element.on('focusout.emulateTabFocus', function () {\r\n                focusState = false;\r\n                body.removeClass(tabFocusClass);\r\n                element.off();\r\n            });\r\n        }\r\n\r\n        return {\r\n            apply: smartKeyboardFocus,\r\n            focus: handleFocus\r\n        };\r\n    }\r\n\r\n    return new KeyboardHandler;\r\n});\r\n","mage/storage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['jquery', 'mage/url'], function ($, urlBuilder) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Perform asynchronous GET request to server.\r\n         * @param {String} url\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        get: function (url, global, contentType) {\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'GET',\r\n                global: global,\r\n                contentType: contentType\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous POST request to server.\r\n         * @param {String} url\r\n         * @param {String} data\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        post: function (url, data, global, contentType) {\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'POST',\r\n                data: data,\r\n                global: global,\r\n                contentType: contentType\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous PUT request to server.\r\n         * @param {String} url\r\n         * @param {String} data\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        put: function (url, data, global, contentType, headers) {\r\n            var ajaxSettings = {};\r\n\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n            ajaxSettings.url = urlBuilder.build(url);\r\n            ajaxSettings.type = 'PUT';\r\n            ajaxSettings.data = data;\r\n            ajaxSettings.global = global;\r\n            ajaxSettings.contentType = contentType;\r\n\r\n            if (headers) {\r\n                ajaxSettings.headers = headers;\r\n            }\r\n\r\n            return $.ajax(ajaxSettings);\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous DELETE request to server.\r\n         * @param {String} url\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        delete: function (url, global, contentType) {\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'DELETE',\r\n                global: global,\r\n                contentType: contentType\r\n            });\r\n        }\r\n    };\r\n});\r\n","mage/tabs.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/core',\r\n    'mage/mage',\r\n    'mage/collapsible'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.tabs', {\r\n        options: {\r\n            active: 0,\r\n            disabled: [],\r\n            openOnFocus: true,\r\n            collapsible: false,\r\n            collapsibleElement: '[data-role=collapsible]',\r\n            header: '[data-role=title]',\r\n            content: '[data-role=content]',\r\n            trigger: '[data-role=trigger]',\r\n            closedState: null,\r\n            openedState: null,\r\n            disabledState: null,\r\n            ajaxUrlElement: '[data-ajax=true]',\r\n            ajaxContent: false,\r\n            loadingClass: null,\r\n            saveState: false,\r\n            animate: false,\r\n            icons: {\r\n                activeHeader: null,\r\n                header: null\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            if (typeof this.options.disabled === 'string') {\r\n                this.options.disabled = this.options.disabled.split(' ').map(function (item) {\r\n                    return parseInt(item, 10);\r\n                });\r\n            }\r\n            this._processPanels();\r\n            this._handleDeepLinking();\r\n            this._processTabIndex();\r\n            this._closeOthers();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            $.each(this.collapsibles, function () {\r\n                $(this).collapsible('destroy');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * If deep linking is used, all sections must be closed but the one that contains the anchor.\r\n         * @private\r\n         */\r\n        _handleDeepLinking: function () {\r\n            var self = this,\r\n                anchor = window.location.hash,\r\n                isValid = $.mage.isValidSelector(anchor),\r\n                anchorId = anchor.replace('#', '');\r\n\r\n            if (anchor && isValid) {\r\n                $.each(self.contents, function (i) {\r\n                    if ($(this).attr('id') === anchorId || $(this).find('#' + anchorId).length) {\r\n                        self.collapsibles.not(self.collapsibles.eq(i)).collapsible('forceDeactivate');\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * When the widget gets instantiated, the first tab that is not disabled receive focusable property\r\n         * All tabs receive tabIndex 0\r\n         * @private\r\n         */\r\n        _processTabIndex: function () {\r\n            var self = this;\r\n\r\n            self.triggers.attr('tabIndex', 0);\r\n            $.each(this.collapsibles, function (i) {\r\n                self.triggers.attr('tabIndex', 0);\r\n                self.triggers.eq(i).attr('tabIndex', 0);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Prepare the elements for instantiating the collapsible widget\r\n         * @private\r\n         */\r\n        _processPanels: function () {\r\n            this.contents = this.element.find(this.options.content);\r\n\r\n            this.collapsibles = this.element.find(this.options.collapsibleElement);\r\n\r\n            this.collapsibles\r\n                .attr('role', 'presentation')\r\n                .parent()\r\n                .attr('role', 'tablist');\r\n\r\n            this.headers = this.element.find(this.options.header);\r\n\r\n            if (this.headers.length === 0) {\r\n                this.headers = this.collapsibles;\r\n            }\r\n            this.triggers = this.element.find(this.options.trigger);\r\n\r\n            if (this.triggers.length === 0) {\r\n                this.triggers = this.headers;\r\n            }\r\n            this._callCollapsible();\r\n        },\r\n\r\n        /**\r\n         * Setting the disabled and active tabs and calling instantiation of collapsible\r\n         * @private\r\n         */\r\n        _callCollapsible: function () {\r\n            var self = this,\r\n                disabled = false,\r\n                active = false;\r\n\r\n            $.each(this.collapsibles, function (i) {\r\n                disabled = active = false;\r\n\r\n                if ($.inArray(i, self.options.disabled) !== -1) {\r\n                    disabled = true;\r\n                }\r\n\r\n                if (i === self.options.active) {\r\n                    active = true;\r\n                }\r\n                self._instantiateCollapsible(this, i, active, disabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Instantiate collapsible.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Number} index\r\n         * @param {*} active\r\n         * @param {*} disabled\r\n         * @private\r\n         */\r\n        _instantiateCollapsible: function (element, index, active, disabled) {\r\n            $(element).collapsible(\r\n                $.extend({}, this.options, {\r\n                    active: active,\r\n                    disabled: disabled,\r\n                    header: this.headers.eq(index),\r\n                    content: this.contents.eq(index),\r\n                    trigger: this.triggers.eq(index)\r\n                })\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Adding callback to close others tabs when one gets opened\r\n         * @private\r\n         */\r\n        _closeOthers: function () {\r\n            var self = this;\r\n\r\n            $.each(this.collapsibles, function () {\r\n                $(this).on('beforeOpen', function () {\r\n                    self.collapsibles.not(this).collapsible('forceDeactivate');\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        activate: function (index) {\r\n            this._toggleActivate('activate', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        deactivate: function (index) {\r\n            this._toggleActivate('deactivate', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} action\r\n         * @param {*} index\r\n         * @private\r\n         */\r\n        _toggleActivate: function (action, index) {\r\n            this.collapsibles.eq(index).collapsible(action);\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        disable: function (index) {\r\n            this._toggleEnable('disable', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        enable: function (index) {\r\n            this._toggleEnable('enable', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} action\r\n         * @param {*} index\r\n         * @private\r\n         */\r\n        _toggleEnable: function (action, index) {\r\n            var self = this;\r\n\r\n            if ($.isArray(index)) {\r\n                $.each(index, function () {\r\n                    self.collapsibles.eq(this).collapsible(action);\r\n                });\r\n            } else if (index === undefined) {\r\n                this.collapsibles.collapsible(action);\r\n            } else {\r\n                this.collapsibles.eq(index).collapsible(action);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var self = this,\r\n                keyCode, toFocus, toFocusIndex, enabledTriggers, length, currentIndex, nextToFocus;\r\n\r\n            if (event.altKey || event.ctrlKey) {\r\n                return;\r\n            }\r\n            keyCode = $.ui.keyCode;\r\n            toFocus = false;\r\n            enabledTriggers = [];\r\n\r\n            $.each(this.triggers, function () {\r\n                if (!self.collapsibles.eq(self.triggers.index($(this))).collapsible('option', 'disabled')) {\r\n                    enabledTriggers.push(this);\r\n                }\r\n            });\r\n            length = $(enabledTriggers).length;\r\n            currentIndex = $(enabledTriggers).index(event.target);\r\n\r\n            /**\r\n             * @param {String} direction\r\n             * @return {*}\r\n             */\r\n            nextToFocus = function (direction) {\r\n                if (length > 0) {\r\n                    if (direction === 'right') {\r\n                        toFocusIndex = (currentIndex + 1) % length;\r\n                    } else {\r\n                        toFocusIndex = (currentIndex + length - 1) % length;\r\n                    }\r\n\r\n                    return enabledTriggers[toFocusIndex];\r\n                }\r\n\r\n                return event.target;\r\n            };\r\n\r\n            switch (event.keyCode) {\r\n                case keyCode.RIGHT:\r\n                case keyCode.DOWN:\r\n                    toFocus = nextToFocus('right');\r\n                    break;\r\n\r\n                case keyCode.LEFT:\r\n                case keyCode.UP:\r\n                    toFocus = nextToFocus('left');\r\n                    break;\r\n\r\n                case keyCode.HOME:\r\n                    toFocus = enabledTriggers[0];\r\n                    break;\r\n\r\n                case keyCode.END:\r\n                    toFocus = enabledTriggers[length - 1];\r\n                    break;\r\n            }\r\n\r\n            if (toFocus) {\r\n                toFocusIndex = this.triggers.index(toFocus);\r\n                $(event.target).attr('tabIndex', -1);\r\n                $(toFocus).attr('tabIndex', 0);\r\n                toFocus.focus();\r\n\r\n                if (this.options.openOnFocus) {\r\n                    this.activate(toFocusIndex);\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var events = {\r\n                keydown: '_keydown'\r\n            };\r\n\r\n            this._off(this.triggers);\r\n            this._on(this.triggers, events);\r\n        }\r\n    });\r\n\r\n    return $.mage.tabs;\r\n});\r\n","mage/template.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if provided string is a valid DOM selector.\r\n     *\r\n     * @param {String} selector - Selector to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isSelector(selector) {\r\n        try {\r\n            document.querySelector(selector);\r\n\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unescapes characters used in underscore templates.\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {String}\r\n     */\r\n    function unescape(str) {\r\n        return str.replace(/&lt;%|%3C%/g, '<%').replace(/%&gt;|%%3E/g, '%>');\r\n    }\r\n\r\n    /**\r\n     * If 'tmpl' is a valid selector, returns target node's innerHTML if found.\r\n     * Else, returns empty string and emits console warning.\r\n     * If 'tmpl' is not a selector, returns 'tmpl' as is.\r\n     *\r\n     * @param {String} tmpl\r\n     * @returns {String}\r\n     */\r\n    function getTmplString(tmpl) {\r\n        if (isSelector(tmpl)) {\r\n            tmpl = document.querySelector(tmpl);\r\n\r\n            if (tmpl) {\r\n                tmpl = tmpl.innerHTML.trim();\r\n            } else {\r\n                console.warn('No template was found by selector: ' + tmpl);\r\n\r\n                tmpl = '';\r\n            }\r\n        }\r\n\r\n        return unescape(tmpl);\r\n    }\r\n\r\n    /**\r\n     * Compiles or renders template provided either\r\n     * by selector or by the template string.\r\n     *\r\n     * @param {String} tmpl - Template string or selector.\r\n     * @param {(Object|Array|Function)} [data] - Data object with which to render template.\r\n     * @returns {String|Function}\r\n     */\r\n    return function (tmpl, data) {\r\n        var render;\r\n\r\n        tmpl   = getTmplString(tmpl);\r\n        render = _.template(tmpl);\r\n\r\n        return !_.isUndefined(data) ?\r\n            render(data) :\r\n            render;\r\n    };\r\n});\r\n","mage/translate-inline.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/dialog',\r\n    'mage/translate'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.translateInline', $.ui.dialog, {\r\n        options: {\r\n            translateForm: {\r\n                template: '#translate-form-template',\r\n                data: {\r\n                    id: 'translate-inline-form',\r\n                    message: 'Please refresh the page to see your changes after submitting this form.'\r\n                }\r\n            },\r\n            autoOpen: false,\r\n            translateArea: null,\r\n            modal: true,\r\n            dialogClass: 'popup-window',\r\n            width: '75%',\r\n            title: $.mage.__('Translate'),\r\n            height: 470,\r\n            position: {\r\n                my: 'left top',\r\n                at: 'center top',\r\n                of: 'body'\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('Submit'),\r\n                'class': 'action-primary',\r\n\r\n                /**\r\n                 * Click\r\n                 */\r\n                click: function () {\r\n                    $(this).translateInline('submit');\r\n                }\r\n            },\r\n            {\r\n                text: $.mage.__('Close'),\r\n                'class': 'action-close',\r\n\r\n                /**\r\n                 * Click.\r\n                 */\r\n                click: function () {\r\n                    $(this).translateInline('close');\r\n                }\r\n            }],\r\n\r\n            /**\r\n             * Open.\r\n             */\r\n            open: function () {\r\n                var topMargin;\r\n\r\n                $(this).closest('.ui-dialog').addClass('ui-dialog-active');\r\n                topMargin = jQuery(this).closest('.ui-dialog').children('.ui-dialog-titlebar').outerHeight() + 45;\r\n                jQuery(this).closest('.ui-dialog').css('margin-top', topMargin);\r\n            },\r\n\r\n            /**\r\n             * Close.\r\n             */\r\n            close: function () {\r\n                $(this).closest('.ui-dialog').removeClass('ui-dialog-active');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Translate Inline creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.tmpl = mageTemplate(this.options.translateForm.template);\r\n            (this.options.translateArea && $(this.options.translateArea).length ?\r\n                $(this.options.translateArea) :\r\n                this.element.closest('body'))\r\n                    .on('edit.editTrigger', $.proxy(this._onEdit, this));\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @param {*} templateData\r\n         * @return {*|jQuery|HTMLElement}\r\n         * @private\r\n         */\r\n        _prepareContent: function (templateData) {\r\n            var data = $.extend({\r\n                items: templateData,\r\n                escape: $.mage.escapeHTML\r\n            }, this.options.translateForm.data);\r\n\r\n            this.data = data;\r\n\r\n            return $(this.tmpl({\r\n                data: data\r\n            }));\r\n        },\r\n\r\n        /**\r\n         * Render translation form and open dialog\r\n         * @param {Object} e - object\r\n         * @protected\r\n         */\r\n        _onEdit: function (e) {\r\n            this.target = e.target;\r\n            this.element.html(this._prepareContent($(e.target).data('translate')));\r\n            this.open(e);\r\n        },\r\n\r\n        /**\r\n         * Submit.\r\n         */\r\n        submit: function () {\r\n            if (this.formIsSubmitted) {\r\n                return;\r\n            }\r\n            this._formSubmit();\r\n        },\r\n\r\n        /**\r\n         * Send ajax request on form submit\r\n         * @protected\r\n         */\r\n        _formSubmit: function () {\r\n            var parameters;\r\n\r\n            this.formIsSubmitted = true;\r\n            parameters = $.param({\r\n                area: this.options.area\r\n            }) + '&' + $('#' + this.options.translateForm.data.id).serialize();\r\n\r\n            $.ajax({\r\n                url: this.options.ajaxUrl,\r\n                type: 'POST',\r\n                data: parameters,\r\n                loaderContext: this.element,\r\n                showLoader: true\r\n            }).complete($.proxy(this._formSubmitComplete, this));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} response\r\n         * @private\r\n         */\r\n        _formSubmitComplete: function (response) {\r\n            this.close();\r\n            this.formIsSubmitted = false;\r\n            this._updatePlaceholder(response.responseJSON[this.data.items[0].original]);\r\n        },\r\n\r\n        /**\r\n         * @param {*} newValue\r\n         * @private\r\n         */\r\n        _updatePlaceholder: function (newValue) {\r\n            var target = jQuery(this.target);\r\n\r\n            target.data('translate')[0].shown = newValue;\r\n            target.data('translate')[0].translated = newValue;\r\n            target.html(newValue);\r\n        },\r\n\r\n        /**\r\n         * Destroy translateInline\r\n         */\r\n        destroy: function () {\r\n            this.element.off('.editTrigger');\r\n            this._super();\r\n        }\r\n    });\r\n    // @TODO move the \"escapeHTML\" method into the file with global utility functions\r\n    $.extend(true, $, {\r\n        mage: {\r\n            /**\r\n             * @param {String} str\r\n             * @return {Boolean}\r\n             */\r\n            escapeHTML: function (str) {\r\n                return str ?\r\n                    jQuery('<div/>').text(str).html().replace(/\"/g, '&quot;') :\r\n                    false;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.translateInline;\r\n});\r\n","mage/translate.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/mage',\r\n    'mageTranslationDictionary'\r\n], function ($, mage, dictionary) {\r\n    'use strict';\r\n\r\n    $.extend(true, $, {\r\n        mage: {\r\n            translate: (function () {\r\n                /**\r\n                 * Key-value translations storage\r\n                 * @type {Object}\r\n                 * @private\r\n                 */\r\n                var _data = dictionary;\r\n\r\n                return {\r\n                    /**\r\n                     * Add new translation (two string parameters) or several translations (object)\r\n                     */\r\n                    add: function () {\r\n                        if (arguments.length > 1) {\r\n                            _data[arguments[0]] = arguments[1];\r\n                        } else if (typeof arguments[0] === 'object') {\r\n                            $.extend(_data, arguments[0]);\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Make a translation with parsing (to handle case when _data represents tuple)\r\n                     * @param {String} text\r\n                     * @return {String}\r\n                     */\r\n                    translate: function (text) {\r\n                        return _data[text] ? _data[text] : text;\r\n                    }\r\n                };\r\n            }())\r\n        }\r\n    });\r\n    $.mage.__ = $.proxy($.mage.translate.translate, $.mage.translate);\r\n\r\n    return $.mage.__;\r\n});\r\n","mage/trim-input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.trimInput', {\r\n        options: {\r\n            cache: {}\r\n        },\r\n\r\n        /**\r\n         * Widget initialization\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.options.cache.input = $(this.element);\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Event binding, will monitor change, keyup and paste events.\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            if (this.options.cache.input.length) {\r\n                this._on(this.options.cache.input, {\r\n                    'change': this._trimInput,\r\n                    'keyup': this._trimInput,\r\n                    'paste': this._trimInput\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Trim value\r\n         * @private\r\n         */\r\n        _trimInput: function () {\r\n            // Safari caret position workaround: storing carter position\r\n            var caretStart, caretEnd, input;\r\n\r\n            caretStart = this.options.cache.input.get(0).selectionStart;\r\n            caretEnd = this.options.cache.input.get(0).selectionEnd;\r\n\r\n            input = this._getInputValue().trim();\r\n\r\n            this.options.cache.input.val(input);\r\n\r\n            // Safari caret position workaround: setting caret position to previously stored values\r\n            if (caretStart !== null && caretEnd !== null) {\r\n                this.options.cache.input.get(0).setSelectionRange(caretStart, caretEnd);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get input value\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getInputValue: function () {\r\n            return this.options.cache.input.val();\r\n        }\r\n    });\r\n\r\n    return $.mage.trimInput;\r\n});\r\n","mage/url.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable strict */\r\ndefine([], function () {\r\n    var baseUrl = '';\r\n\r\n    return {\r\n        /**\r\n         * @param {String} url\r\n         */\r\n        setBaseUrl: function (url) {\r\n            baseUrl = url;\r\n        },\r\n\r\n        /**\r\n         * @param {String} path\r\n         * @return {*}\r\n         */\r\n        build: function (path) {\r\n            if (path.indexOf(baseUrl) !== -1) {\r\n                return path;\r\n            }\r\n\r\n            return baseUrl + path;\r\n        }\r\n    };\r\n});\r\n","mage/validation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'moment',\r\n    'jquery-ui-modules/widget',\r\n    'jquery/validate',\r\n    'mage/translate'\r\n], function ($, moment) {\r\n    'use strict';\r\n\r\n    var creditCartTypes, rules, showLabel, originValidateDelegate;\r\n\r\n    $.extend(true, $, {\r\n        // @TODO: Move methods 'isEmpty', 'isEmptyNoTrim', 'parseNumber', 'stripHtml' in file with utility functions\r\n        mage: {\r\n            /**\r\n             * Check if string is empty with trim\r\n             * @param {String} value\r\n             */\r\n            isEmpty: function (value) {\r\n                return value === '' || value === undefined ||\r\n                    value == null || value.length === 0 || /^\\s+$/.test(value);\r\n            },\r\n\r\n            /**\r\n             * Check if string is empty no trim\r\n             * @param {String} value\r\n             */\r\n            isEmptyNoTrim: function (value) {\r\n                return value === '' || value == null || value.length === 0;\r\n            },\r\n\r\n            /**\r\n             * Checks if {value} is between numbers {from} and {to}\r\n             * @param {String} value\r\n             * @param {String} from\r\n             * @param {String} to\r\n             * @returns {Boolean}\r\n             */\r\n            isBetween: function (value, from, to) {\r\n                return ($.mage.isEmpty(from) || value >= $.mage.parseNumber(from)) &&\r\n                    ($.mage.isEmpty(to) || value <= $.mage.parseNumber(to));\r\n            },\r\n\r\n            /**\r\n             * Parse price string\r\n             * @param {String} value\r\n             */\r\n            parseNumber: function (value) {\r\n                var isDot, isComa;\r\n\r\n                if (typeof value !== 'string') {\r\n                    return parseFloat(value);\r\n                }\r\n                isDot = value.indexOf('.');\r\n                isComa = value.indexOf(',');\r\n\r\n                if (isDot !== -1 && isComa !== -1) {\r\n                    if (isComa > isDot) {\r\n                        value = value.replace('.', '').replace(',', '.');\r\n                    } else {\r\n                        value = value.replace(',', '');\r\n                    }\r\n                } else if (isComa !== -1) {\r\n                    value = value.replace(',', '.');\r\n                }\r\n\r\n                return parseFloat(value);\r\n            },\r\n\r\n            /**\r\n             * Removes HTML tags and space characters, numbers and punctuation.\r\n             *\r\n             * @param {String} value - Value being stripped.\r\n             * @return {String}\r\n             */\r\n            stripHtml: function (value) {\r\n                return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ')\r\n                    .replace(/[0-9.(),;:!?%#$'\"_+=\\/-]*/g, '');\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @param {String} name\r\n     * @param {*} method\r\n     * @param {*} message\r\n     * @param {*} dontSkip\r\n     */\r\n    $.validator.addMethod = function (name, method, message, dontSkip) {\r\n        $.validator.methods[name] = method;\r\n        $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];\r\n\r\n        if (method.length < 3 || dontSkip) {\r\n            $.validator.addClassRules(name, $.validator.normalizeRule(name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Javascript object with credit card types\r\n     * 0 - regexp for card number\r\n     * 1 - regexp for cvn\r\n     * 2 - check or not credit card number trough Luhn algorithm by\r\n     */\r\n    creditCartTypes = {\r\n        'SO': [\r\n            new RegExp('^(6334[5-9]([0-9]{11}|[0-9]{13,14}))|(6767([0-9]{12}|[0-9]{14,15}))$'),\r\n            new RegExp('^([0-9]{3}|[0-9]{4})?$'),\r\n            true\r\n        ],\r\n        'SM': [\r\n            new RegExp('(^(5[0678])[0-9]{11,18}$)|(^(6[^05])[0-9]{11,18}$)|' +\r\n                '(^(601)[^1][0-9]{9,16}$)|(^(6011)[0-9]{9,11}$)|(^(6011)[0-9]{13,16}$)|' +\r\n                '(^(65)[0-9]{11,13}$)|(^(65)[0-9]{15,18}$)|(^(49030)[2-9]([0-9]{10}$|[0-9]{12,13}$))|' +\r\n                '(^(49033)[5-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49110)[1-2]([0-9]{10}$|[0-9]{12,13}$))|' +\r\n                '(^(49117)[4-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49118)[0-2]([0-9]{10}$|[0-9]{12,13}$))|' +\r\n                '(^(4936)([0-9]{12}$|[0-9]{14,15}$))'), new RegExp('^([0-9]{3}|[0-9]{4})?$'),\r\n            true\r\n        ],\r\n        'VI': [new RegExp('^4[0-9]{12}([0-9]{3})?$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MC': [\r\n            new RegExp('^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$'),\r\n            new RegExp('^[0-9]{3}$'),\r\n            true\r\n        ],\r\n        'AE': [new RegExp('^3[47][0-9]{13}$'), new RegExp('^[0-9]{4}$'), true],\r\n        'DI': [new RegExp('^(6011(0|[2-4]|74|7[7-9]|8[6-9]|9)|6(4[4-9]|5))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'JCB': [new RegExp('^35(2[8-9]|[3-8])\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'DN': [new RegExp('^(3(0[0-5]|095|6|[8-9]))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'UN': [\r\n            new RegExp('^(622(1(2[6-9]|[3-9])|[3-8]|9([[0-1]|2[0-5]))|62[4-6]|628([2-8]))\\\\d*?$'),\r\n            new RegExp('^[0-9]{3}$'),\r\n            true\r\n        ],\r\n        'MI': [new RegExp('^(5(0|[6-9])|63|67(?!59|6770|6774))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MD': [new RegExp('^6759(?!24|38|40|6[3-9]|70|76)|676770|676774\\\\d*$'), new RegExp('^[0-9]{3}$'), true]\r\n    };\r\n\r\n    /**\r\n     * validate credit card number using mod10\r\n     * @param {String} s\r\n     * @return {Boolean}\r\n     */\r\n    function validateCreditCard(s) {\r\n        // remove non-numerics\r\n        var v = '0123456789',\r\n            w = '',\r\n            i, j, k, m, c, a, x;\r\n\r\n        for (i = 0; i < s.length; i++) {\r\n            x = s.charAt(i);\r\n\r\n            if (v.indexOf(x, 0) !== -1) {\r\n                w += x;\r\n            }\r\n        }\r\n        // validate number\r\n        j = w.length / 2;\r\n        k = Math.floor(j);\r\n        m = Math.ceil(j) - k;\r\n        c = 0;\r\n\r\n        for (i = 0; i < k; i++) {\r\n            a = w.charAt(i * 2 + m) * 2;\r\n            c += a > 9 ? Math.floor(a / 10 + a % 10) : a;\r\n        }\r\n\r\n        for (i = 0; i < k + m; i++) {\r\n            c += w.charAt(i * 2 + 1 - m) * 1;\r\n        }\r\n\r\n        return c % 10 === 0;\r\n    }\r\n\r\n    /**\r\n     * validate all table required inputs at once, using single hidden input\r\n     * @param {String} value\r\n     * @param {HTMLElement} element\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    function tableSingleValidation(value, element) {\r\n        var empty = $(element).closest('table')\r\n            .find('input.required-option:visible')\r\n            .filter(function (i, el) {\r\n                if ($(el).is('disabled')) {\r\n                    return $.mage.isEmpty(el.value);\r\n                }\r\n            })\r\n            .length;\r\n\r\n        return empty === 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {float} qty\r\n     * @param {float} qtyIncrements\r\n     * @returns {float}\r\n     */\r\n    function resolveModulo(qty, qtyIncrements) {\r\n        while (qtyIncrements < 1) {\r\n            qty *= 10;\r\n            qtyIncrements *= 10;\r\n        }\r\n\r\n        return qty % qtyIncrements;\r\n    }\r\n\r\n    /**\r\n     * Collection of validation rules including rules from additional-methods.js\r\n     * @type {Object}\r\n     */\r\n    rules = {\r\n        'max-words': [\r\n            function (value, element, params) {\r\n                return this.optional(element) || $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length <= params;\r\n            },\r\n            $.mage.__('Please enter {0} words or less.')\r\n        ],\r\n        'min-words': [\r\n            function (value, element, params) {\r\n                return this.optional(element) || $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length >= params;\r\n            },\r\n            $.mage.__('Please enter at least {0} words.')\r\n        ],\r\n        'range-words': [\r\n            function (value, element, params) {\r\n                return this.optional(element) ||\r\n                    $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length >= params[0] &&\r\n                    value.match(/bw+b/g).length < params[1];\r\n            },\r\n            $.mage.__('Please enter between {0} and {1} words.')\r\n        ],\r\n        'letters-with-basic-punc': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^[a-z\\-.,()'\\\"\\s]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters or punctuation only please')\r\n        ],\r\n        'alphanumeric': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\w+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters, numbers, spaces or underscores only please')\r\n        ],\r\n        'letters-only': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^[a-z]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters only please')\r\n        ],\r\n        'no-whitespace': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\S+$/i.test(value);\r\n            },\r\n            $.mage.__('No white space please')\r\n        ],\r\n        'no-marginal-whitespace': [\r\n            function (value, element) {\r\n                return this.optional(element) || !/^\\s+|\\s+$/i.test(value);\r\n            },\r\n            $.mage.__('No marginal white space please')\r\n        ],\r\n        'zip-range': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^90[2-5]-\\d{2}-\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx')\r\n        ],\r\n        'integer': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^-?\\d+$/.test(value);\r\n            },\r\n            $.mage.__('A positive or negative non-decimal number please')\r\n        ],\r\n        'vinUS': [\r\n            function (v) {\r\n                var i, n, d, f, cd, cdv, LL, VL, FL, rs;\r\n\r\n                /* eslint-disable max-depth */\r\n                if (v.length !== 17) {\r\n                    return false;\r\n                }\r\n\r\n                LL = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L',\r\n                    'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n                VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9];\r\n                FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];\r\n                rs = 0;\r\n\r\n                for (i = 0; i < 17; i++) {\r\n                    f = FL[i];\r\n                    d = v.slice(i, i + 1);\r\n\r\n                    if (i === 8) {\r\n                        cdv = d;\r\n                    }\r\n\r\n                    if (!isNaN(d)) {\r\n                        d *= f;\r\n                    } else {\r\n                        for (n = 0; n < LL.length; n++) {\r\n                            if (d.toUpperCase() === LL[n]) {\r\n                                d = VL[n];\r\n                                d *= f;\r\n\r\n                                if (isNaN(cdv) && n === 8) {\r\n                                    cdv = LL[n];\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    rs += d;\r\n                }\r\n\r\n                /* eslint-enable max-depth */\r\n                cd = rs % 11;\r\n\r\n                if (cd === 10) {\r\n                    cd = 'X';\r\n                }\r\n\r\n                if (cd === cdv) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('The specified vehicle identification number (VIN) is invalid.')\r\n        ],\r\n        'dateITA': [\r\n            function (value, element) {\r\n                var check = false,\r\n                    re = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/,\r\n                    adata, gg, mm, aaaa, xdata;\r\n\r\n                if (re.test(value)) {\r\n                    adata = value.split('/');\r\n                    gg = parseInt(adata[0], 10);\r\n                    mm = parseInt(adata[1], 10);\r\n                    aaaa = parseInt(adata[2], 10);\r\n                    xdata = new Date(aaaa, mm - 1, gg);\r\n\r\n                    if (xdata.getFullYear() === aaaa &&\r\n                        xdata.getMonth() === mm - 1 &&\r\n                        xdata.getDate() === gg\r\n                    ) {\r\n                        check = true;\r\n                    } else {\r\n                        check = false;\r\n                    }\r\n                } else {\r\n                    check = false;\r\n                }\r\n\r\n                return this.optional(element) || check;\r\n            },\r\n            $.mage.__('Please enter a correct date')\r\n        ],\r\n        'dateNL': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\d\\d?[\\.\\/-]\\d\\d?[\\.\\/-]\\d\\d\\d?\\d?$/.test(value);\r\n            },\r\n            'Vul hier een geldige datum in.'\r\n        ],\r\n        'time': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^([01]\\d|2[0-3])(:[0-5]\\d){0,2}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 and 23:59')\r\n        ],\r\n        'time12h': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\s[AP]M))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 am and 12:00 pm')\r\n        ],\r\n        'phoneUS': [\r\n            function (phoneNumber, element) {\r\n                phoneNumber = phoneNumber.replace(/\\s+/g, '');\r\n\r\n                return this.optional(element) || phoneNumber.length > 9 &&\r\n                    phoneNumber.match(/^(1-?)?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})-?[2-9]\\d{2}-?\\d{4}$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        'phoneUK': [\r\n            function (phoneNumber, element) {\r\n                return this.optional(element) || phoneNumber.length > 9 &&\r\n                    phoneNumber.match(/^(\\(?(0|\\+44)[1-9]{1}\\d{1,4}?\\)?\\s?\\d{3,4}\\s?\\d{3,4})$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        'mobileUK': [\r\n            function (phoneNumber, element) {\r\n                return this.optional(element) || phoneNumber.length > 9 &&\r\n                    phoneNumber.match(/^((0|\\+44)7\\d{3}\\s?\\d{6})$/);\r\n            },\r\n            $.mage.__('Please specify a valid mobile number')\r\n        ],\r\n        'stripped-min-length': [\r\n            function (value, element, param) {\r\n                return value.length >= param;\r\n            },\r\n            $.mage.__('Please enter at least {0} characters')\r\n        ],\r\n\r\n        /* detect chars that would require more than 3 bytes */\r\n        'validate-no-utf8mb4-characters': [\r\n            function (value) {\r\n                var validator = this,\r\n                    message = $.mage.__('Please remove invalid characters: {0}.'),\r\n                    matches = value.match(/(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g),\r\n                    result = matches === null;\r\n\r\n                if (!result) {\r\n                    validator.charErrorMessage = message.replace('{0}', matches.join());\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.charErrorMessage;\r\n            }\r\n        ],\r\n\r\n        /* eslint-disable max-len */\r\n        'email2': [\r\n            function (value, element) {\r\n                return this.optional(element) ||\r\n                    /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i.test(value);\r\n            },\r\n            $.validator.messages.email\r\n        ],\r\n        'url2': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\r\n            },\r\n            $.validator.messages.url\r\n        ],\r\n\r\n        /* eslint-enable max-len */\r\n        'credit-card-types': [\r\n            function (value, element, param) {\r\n                var validTypes;\r\n\r\n                if (/[^0-9-]+/.test(value)) {\r\n                    return false;\r\n                }\r\n                value = value.replace(/\\D/g, '');\r\n\r\n                validTypes = 0x0000;\r\n\r\n                if (param.mastercard) {\r\n                    validTypes |= 0x0001;\r\n                }\r\n\r\n                if (param.visa) {\r\n                    validTypes |= 0x0002;\r\n                }\r\n\r\n                if (param.amex) {\r\n                    validTypes |= 0x0004;\r\n                }\r\n\r\n                if (param.dinersclub) {\r\n                    validTypes |= 0x0008;\r\n                }\r\n\r\n                if (param.enroute) {\r\n                    validTypes |= 0x0010;\r\n                }\r\n\r\n                if (param.discover) {\r\n                    validTypes |= 0x0020;\r\n                }\r\n\r\n                if (param.jcb) {\r\n                    validTypes |= 0x0040;\r\n                }\r\n\r\n                if (param.unknown) {\r\n                    validTypes |= 0x0080;\r\n                }\r\n\r\n                if (param.all) {\r\n                    validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\r\n                }\r\n\r\n                if (validTypes & 0x0001 && /^(51|52|53|54|55)/.test(value)) { //mastercard\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0002 && /^(4)/.test(value)) { //visa\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0004 && /^(34|37)/.test(value)) { //amex\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0008 && /^(300|301|302|303|304|305|36|38)/.test(value)) { //dinersclub\r\n                    return value.length === 14;\r\n                }\r\n\r\n                if (validTypes & 0x0010 && /^(2014|2149)/.test(value)) { //enroute\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0080) { //unknown\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n\r\n        /* eslint-disable max-len */\r\n        'ipv4': [\r\n            function (value, element) {\r\n                return this.optional(element) ||\r\n                    /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v4 address.')\r\n        ],\r\n        'ipv6': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v6 address.')\r\n        ],\r\n\r\n        /* eslint-enable max-len */\r\n        'pattern': [\r\n            function (value, element, param) {\r\n                return this.optional(element) || new RegExp(param).test(value);\r\n            },\r\n            $.mage.__('Invalid format.')\r\n        ],\r\n        'allow-container-className': [\r\n            function (element) {\r\n                if (element.type === 'radio' || element.type === 'checkbox') {\r\n                    return $(element).hasClass('change-container-classname');\r\n                }\r\n            },\r\n            ''\r\n        ],\r\n        'validate-no-html-tags': [\r\n            function (value) {\r\n                return !/<(\\/)?\\w+/.test(value);\r\n            },\r\n            $.mage.__('HTML tags are not allowed.')\r\n        ],\r\n        'validate-select': [\r\n            function (value) {\r\n                return value !== 'none' && value != null && value.length !== 0;\r\n            },\r\n            $.mage.__('Please select an option.')\r\n        ],\r\n        'validate-no-empty': [\r\n            function (value) {\r\n                return !$.mage.isEmpty(value);\r\n            },\r\n            $.mage.__('Empty Value.')\r\n        ],\r\n        'validate-alphanum-with-spaces': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z0-9 ]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or spaces only in this field.')\r\n        ],\r\n        'validate-data': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[A-Za-z]+[A-Za-z0-9_]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.') //eslint-disable-line max-len\r\n        ],\r\n        'validate-street': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[ \\w]{3,}([A-Za-z]\\.)?([ \\w]*\\#\\d+)?(\\r\\n| )[ \\w]{3,}/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), spaces and \"#\" in this field.')\r\n        ],\r\n        'validate-phoneStrict': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        'validate-phoneLax': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) ||\r\n                    /^((\\d[\\-. ]?)?((\\(\\d{3}\\))|\\d{3}))?[\\-. ]?\\d{3}[\\-. ]?\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        'validate-fax': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid fax number (Ex: 123-456-7890).')\r\n        ],\r\n        'validate-email': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i.test(v); //eslint-disable-line max-len\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        'validate-emailSender': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[\\S ]+$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        'validate-password': [\r\n            function (v) {\r\n                var pass;\r\n\r\n                if (v == null) {\r\n                    return false;\r\n                }\r\n                //strip leading and trailing spaces\r\n                pass = $.trim(v);\r\n\r\n                if (!pass.length) {\r\n                    return true;\r\n                }\r\n\r\n                return !(pass.length > 0 && pass.length < 6);\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'validate-admin-password': [\r\n            function (v) {\r\n                var pass;\r\n\r\n                if (v == null) {\r\n                    return false;\r\n                }\r\n                pass = $.trim(v);\r\n                // strip leading and trailing spaces\r\n                if (pass.length === 0) {\r\n                    return true;\r\n                }\r\n\r\n                if (!/[a-z]/i.test(v) || !/[0-9]/.test(v)) {\r\n                    return false;\r\n                }\r\n\r\n                if (pass.length < 7) {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 7 or more characters, using both numeric and alphabetic.')\r\n        ],\r\n        'validate-customer-password': [\r\n            function (v, elm) {\r\n                var validator = this,\r\n                    counter = 0,\r\n                    passwordMinLength = $(elm).data('password-min-length'),\r\n                    passwordMinCharacterSets = $(elm).data('password-min-character-sets'),\r\n                    pass = $.trim(v),\r\n                    result = pass.length >= passwordMinLength;\r\n\r\n                if (result === false) {\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum length of this field must be equal or greater than %1 symbols. Leading and trailing spaces will be ignored.').replace('%1', passwordMinLength); //eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                if (pass.match(/\\d+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[a-z]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[A-Z]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[^a-zA-Z0-9]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (counter < passwordMinCharacterSets) {\r\n                    result = false;\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum of different classes of characters in password is %1. Classes of characters: Lower Case, Upper Case, Digits, Special Characters.').replace('%1', passwordMinCharacterSets); //eslint-disable-line max-len\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.passwordErrorMessage;\r\n            }\r\n        ],\r\n        'validate-url': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = (v || '').replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n\r\n                return (/^(http|https|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i).test(v); //eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. Protocol is required (http://, https:// or ftp://).')\r\n        ],\r\n        'validate-clean-url': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(http|https|ftp):\\/\\/(([A-Z0-9][A-Z0-9_-]*)(\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v) || /^(www)((\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v); //eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. For example http://www.example.com or www.example.com.')\r\n        ],\r\n        'validate-xml-identifier': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[A-Z][A-Z0-9_\\/-]*$/i.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid XML-identifier (Ex: something_1, block5, id-4).')\r\n        ],\r\n        'validate-ssn': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^\\d{3}-?\\d{2}-?\\d{4}$/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid social security number (Ex: 123-45-6789).')\r\n        ],\r\n        'validate-zip-us': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid zip code (Ex: 90602 or 90602-1234).')\r\n        ],\r\n        'validate-date-au': [\r\n            function (v) {\r\n                var regex, d;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                regex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/;\r\n\r\n                if ($.mage.isEmpty(v) || !regex.test(v)) {\r\n                    return false;\r\n                }\r\n                d = new Date(v.replace(regex, '$2/$1/$3'));\r\n\r\n                return parseInt(RegExp.$2, 10) === 1 + d.getMonth() &&\r\n                    parseInt(RegExp.$1, 10) === d.getDate() &&\r\n                    parseInt(RegExp.$3, 10) === d.getFullYear();\r\n\r\n            },\r\n            $.mage.__('Please use this date format: dd/mm/yyyy. For example 17/03/2006 for the 17th of March, 2006.')\r\n        ],\r\n        'validate-currency-dollar': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^\\$?\\-?([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}\\d*(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$/.test(v); //eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid $ amount. For example $100.00.')\r\n        ],\r\n        'validate-not-negative-number': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n\r\n                return !isNaN(v) && v >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        // validate-not-negative-number should be replaced in all places with this one and then removed\r\n        'validate-zero-or-greater': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n\r\n                return !isNaN(v) && v >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        'validate-greater-than-zero': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n\r\n                return !isNaN(v) && v > 0;\r\n            },\r\n            $.mage.__('Please enter a number greater than 0 in this field.')\r\n        ],\r\n        'validate-css-length': [\r\n            function (v) {\r\n                if (v !== '') {\r\n                    return (/^[0-9]*\\.*[0-9]+(px|pc|pt|ex|em|mm|cm|in|%)?$/).test(v);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please input a valid CSS-length (Ex: 100px, 77pt, 20em, .5ex or 50%).')\r\n        ],\r\n        // Additional methods\r\n        'validate-number': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || !isNaN($.mage.parseNumber(v)) && /^\\s*-?\\d*(\\.\\d*)?\\s*$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'required-number': [\r\n            function (v) {\r\n                return !!v.length;\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'validate-number-range': [\r\n            function (v, elm, param) {\r\n                var numValue, dataAttrRange, classNameRange, result, range, m, classes, ii;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                numValue = $.mage.parseNumber(v);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                dataAttrRange = /^(-?[\\d.,]+)?-(-?[\\d.,]+)?$/;\r\n                classNameRange = /^number-range-(-?[\\d.,]+)?-(-?[\\d.,]+)?$/;\r\n                result = true;\r\n                range = param;\r\n\r\n                if (typeof range === 'string') {\r\n                    m = dataAttrRange.exec(range);\r\n\r\n                    if (m) {\r\n                        result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                    } else {\r\n                        result = false;\r\n                    }\r\n                } else if (elm && elm.className) {\r\n                    classes = elm.className.split(' ');\r\n                    ii = classes.length;\r\n\r\n                    while (ii--) {\r\n                        range = classes[ii];\r\n                        m = classNameRange.exec(range);\r\n\r\n                        if (m) { //eslint-disable-line max-depth\r\n                            result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.'),\r\n            true\r\n        ],\r\n        'validate-digits': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || !/[^\\d]/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'validate-forbidden-extensions': [\r\n            function (v, elem) {\r\n                var forbiddenExtensions = $(elem).attr('data-validation-params'),\r\n                    forbiddenExtensionsArray = forbiddenExtensions.split(','),\r\n                    extensionsArray = v.split(','),\r\n                    result = true;\r\n\r\n                this.validateExtensionsMessage = $.mage.__('Forbidden extensions has been used. Avoid usage of ') +\r\n                    forbiddenExtensions;\r\n\r\n                $.each(extensionsArray, function (key, extension) {\r\n                    if (forbiddenExtensionsArray.indexOf(extension) !== -1) {\r\n                        result = false;\r\n                    }\r\n                });\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.validateExtensionsMessage;\r\n            }\r\n        ],\r\n        'validate-digits-range': [\r\n            function (v, elm, param) {\r\n                var numValue, dataAttrRange, classNameRange, result, range, m, classes, ii;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                numValue = $.mage.parseNumber(v);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                dataAttrRange = /^(-?\\d+)?-(-?\\d+)?$/;\r\n                classNameRange = /^digits-range-(-?\\d+)?-(-?\\d+)?$/;\r\n                result = true;\r\n                range = param;\r\n\r\n                if (typeof range === 'string') {\r\n                    m = dataAttrRange.exec(range);\r\n\r\n                    if (m) {\r\n                        result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                    } else {\r\n                        result = false;\r\n                    }\r\n                } else if (elm && elm.className) {\r\n                    classes = elm.className.split(' ');\r\n                    ii = classes.length;\r\n\r\n                    while (ii--) {\r\n                        range = classes[ii];\r\n                        m = classNameRange.exec(range);\r\n\r\n                        if (m) { //eslint-disable-line max-depth\r\n                            result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.'),\r\n            true\r\n        ],\r\n        'validate-range': [\r\n            function (v, elm) {\r\n                var minValue, maxValue, ranges, reRange, result, values,\r\n                    i, name, validRange, minValidRange, maxValidRange;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                } else if ($.validator.methods['validate-digits'] && $.validator.methods['validate-digits'](v)) {\r\n                    minValue = maxValue = $.mage.parseNumber(v);\r\n                } else {\r\n                    ranges = /^(-?\\d+)?-(-?\\d+)?$/.exec(v);\r\n\r\n                    if (ranges) {\r\n                        minValue = $.mage.parseNumber(ranges[1]);\r\n                        maxValue = $.mage.parseNumber(ranges[2]);\r\n\r\n                        if (minValue > maxValue) { //eslint-disable-line max-depth\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n                reRange = /^range-(-?\\d+)?-(-?\\d+)?$/;\r\n                result = true;\r\n                values = $(elm).prop('class').split(' ');\r\n\r\n                for (i = values.length - 1; i >= 0; i--) {\r\n                    name = values[i];\r\n                    validRange = reRange.exec(name);\r\n\r\n                    if (validRange) {\r\n                        minValidRange = $.mage.parseNumber(validRange[1]);\r\n                        maxValidRange = $.mage.parseNumber(validRange[2]);\r\n                        result = result &&\r\n                            (isNaN(minValidRange) || minValue >= minValidRange) &&\r\n                            (isNaN(maxValidRange) || maxValue <= maxValidRange);\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        'validate-alpha': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use letters only (a-z or A-Z) in this field.')\r\n        ],\r\n        'validate-code': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z]+[a-zA-Z0-9_]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.') //eslint-disable-line max-len\r\n        ],\r\n        'validate-alphanum': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z0-9]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z) or numbers (0-9) in this field. No spaces or other characters are allowed.') //eslint-disable-line max-len\r\n        ],\r\n        'validate-not-number-first': [\r\n            function (value) {\r\n                return $.mage.isEmptyNoTrim(value) || /^[^0-9-\\.].*$/.test(value.trim());\r\n            },\r\n            $.mage.__('First character must be letter.')\r\n        ],\r\n        'validate-date': [\r\n            function (value, params, additionalParams) {\r\n                var test = moment(value, additionalParams.dateFormat);\r\n\r\n                return $.mage.isEmptyNoTrim(value) || test.isValid();\r\n            },\r\n            $.mage.__('Please enter a valid date.')\r\n\r\n        ],\r\n        'validate-date-range': [\r\n            function (v, elm) {\r\n                var m = /\\bdate-range-(\\w+)-(\\w+)\\b/.exec(elm.className),\r\n                    currentYear, normalizedTime, dependentElements;\r\n\r\n                if (!m || m[2] === 'to' || $.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                currentYear = new Date().getFullYear() + '';\r\n\r\n                /**\r\n                 * @param {String} vd\r\n                 * @return {Number}\r\n                 */\r\n                normalizedTime = function (vd) {\r\n                    vd = vd.split(/[.\\/]/);\r\n\r\n                    if (vd[2] && vd[2].length < 4) {\r\n                        vd[2] = currentYear.substr(0, vd[2].length) + vd[2];\r\n                    }\r\n\r\n                    return new Date(vd.join('/')).getTime();\r\n                };\r\n\r\n                dependentElements = $(elm.form).find('.validate-date-range.date-range-' + m[1] + '-to');\r\n\r\n                return !dependentElements.length || $.mage.isEmptyNoTrim(dependentElements[0].value) ||\r\n                    normalizedTime(v) <= normalizedTime(dependentElements[0].value);\r\n            },\r\n            $.mage.__('Make sure the To Date is later than or the same as the From Date.')\r\n        ],\r\n        'validate-cpassword': [\r\n            function () {\r\n                var conf = $('#confirmation').length > 0 ? $('#confirmation') : $($('.validate-cpassword')[0]),\r\n                    pass = false,\r\n                    passwordElements, i, passwordElement;\r\n\r\n                if ($('#password')) {\r\n                    pass = $('#password');\r\n                }\r\n                passwordElements = $('.validate-password');\r\n\r\n                for (i = 0; i < passwordElements.length; i++) {\r\n                    passwordElement = $(passwordElements[i]);\r\n\r\n                    if (passwordElement.closest('form').attr('id') === conf.closest('form').attr('id')) {\r\n                        pass = passwordElement;\r\n                    }\r\n                }\r\n\r\n                if ($('.validate-admin-password').length) {\r\n                    pass = $($('.validate-admin-password')[0]);\r\n                }\r\n\r\n                return pass.val() === conf.val();\r\n            },\r\n            $.mage.__('Please make sure your passwords match.')\r\n        ],\r\n        'validate-identifier': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-z0-9][a-z0-9_\\/-]+(\\.[a-z0-9_-]+)?$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid URL Key (Ex: \"example-page\", \"example-page.html\" or \"anotherlevel/example-page\").') //eslint-disable-line max-len\r\n        ],\r\n        'validate-zip-international': [\r\n\r\n            /*function(v) {\r\n             // @TODO: Cleanup\r\n             return Validation.get('IsEmpty').test(v) ||\r\n             /(^[A-z0-9]{2,10}([\\s]{0,1}|[\\-]{0,1})[A-z0-9]{2,10}$)/.test(v);\r\n             }*/\r\n            function () {\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a valid zip code.')\r\n        ],\r\n        'validate-one-required': [\r\n            function (v, elm) {\r\n                var p = $(elm).parent(),\r\n                    options = p.find('input');\r\n\r\n                return options.map(function (el) {\r\n                    return $(el).val();\r\n                }).length > 0;\r\n            },\r\n            $.mage.__('Please select one of the options above.')\r\n        ],\r\n        'validate-state': [\r\n            function (v) {\r\n                return v !== 0 || v === '';\r\n            },\r\n            $.mage.__('Please select State/Province.')\r\n        ],\r\n        'required-file': [\r\n            function (v, elm) {\r\n                var result = !$.mage.isEmptyNoTrim(v),\r\n                    ovId;\r\n\r\n                if (!result) {\r\n                    ovId = $('#' + $(elm).attr('id') + '_value');\r\n\r\n                    if (ovId.length > 0) {\r\n                        result = !$.mage.isEmptyNoTrim(ovId.val());\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('Please select a file.')\r\n        ],\r\n        'validate-ajax-error': [\r\n            function (v, element) {\r\n                element = $(element);\r\n                element.on('change.ajaxError', function () {\r\n                    element.removeClass('validate-ajax-error');\r\n                    element.off('change.ajaxError');\r\n                });\r\n\r\n                return !element.hasClass('validate-ajax-error');\r\n            },\r\n            ''\r\n        ],\r\n        'validate-optional-datetime': [\r\n            function (v, elm, param) {\r\n                var dateTimeParts = $('.datetime-picker[id^=\"options_' + param + '\"]'),\r\n                    hasWithValue = false,\r\n                    hasWithNoValue = false,\r\n                    pattern = /day_part$/i,\r\n                    i;\r\n\r\n                for (i = 0; i < dateTimeParts.length; i++) {\r\n                    if (!pattern.test($(dateTimeParts[i]).attr('id'))) {\r\n                        if ($(dateTimeParts[i]).val() === 's') { //eslint-disable-line max-depth\r\n                            hasWithValue = true;\r\n                        } else {\r\n                            hasWithNoValue = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return hasWithValue ^ hasWithNoValue;\r\n            },\r\n            $.mage.__('The field isn\\'t complete.')\r\n        ],\r\n        'validate-required-datetime': [\r\n            function (v, elm, param) {\r\n                var dateTimeParts = $('.datetime-picker[id^=\"options_' + param + '\"]'),\r\n                    i;\r\n\r\n                for (i = 0; i < dateTimeParts.length; i++) {\r\n                    if (dateTimeParts[i].value === '') {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'validate-one-required-by-name': [\r\n            function (v, elm, selector) {\r\n                var name = elm.name.replace(/([\\\\\"])/g, '\\\\$1'),\r\n                    container = this.currentForm;\r\n\r\n                selector = selector === true ? 'input[name=\"' + name + '\"]:checked' : selector;\r\n\r\n                return !!container.querySelectorAll(selector).length;\r\n            },\r\n            $.mage.__('Please select one of the options.')\r\n        ],\r\n        'less-than-equals-to': [\r\n            function (value, element, params) {\r\n                if ($.isNumeric($(params).val()) && $.isNumeric(value)) {\r\n                    this.lteToVal = $(params).val();\r\n\r\n                    return parseFloat(value) <= parseFloat($(params).val());\r\n                }\r\n\r\n                return true;\r\n            },\r\n            function () {\r\n                var message = $.mage.__('Please enter a value less than or equal to %s.');\r\n\r\n                return message.replace('%s', this.lteToVal);\r\n            }\r\n        ],\r\n        'greater-than-equals-to': [\r\n            function (value, element, params) {\r\n                if ($.isNumeric($(params).val()) && $.isNumeric(value)) {\r\n                    this.gteToVal = $(params).val();\r\n\r\n                    return parseFloat(value) >= parseFloat($(params).val());\r\n                }\r\n\r\n                return true;\r\n            },\r\n            function () {\r\n                var message = $.mage.__('Please enter a value greater than or equal to %s.');\r\n\r\n                return message.replace('%s', this.gteToVal);\r\n            }\r\n        ],\r\n        'validate-emails': [\r\n            function (value) {\r\n                var validRegexp, emails, i;\r\n\r\n                if ($.mage.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n                validRegexp = /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i; //eslint-disable-line max-len\r\n                emails = value.split(/[\\s\\n\\,]+/g);\r\n\r\n                for (i = 0; i < emails.length; i++) {\r\n                    if (!validRegexp.test(emails[i].trim())) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter valid email addresses, separated by commas. For example, johndoe@domain.com, johnsmith@domain.com.') //eslint-disable-line max-len\r\n        ],\r\n\r\n        'validate-cc-type-select': [\r\n\r\n            /**\r\n             * Validate credit card type matches credit card number\r\n             * @param {*} value - select credit card type\r\n             * @param {*} element - element contains the select box for credit card types\r\n             * @param {*} params - selector for credit card number\r\n             * @return {Boolean}\r\n             */\r\n            function (value, element, params) {\r\n                if (value && params && creditCartTypes[value]) {\r\n                    return creditCartTypes[value][0].test($(params).val().replace(/\\s+/g, ''));\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Card type does not match credit card number.')\r\n        ],\r\n        'validate-cc-number': [\r\n\r\n            /**\r\n             * Validate credit card number based on mod 10.\r\n             *\r\n             * @param {*} value - credit card number\r\n             * @return {Boolean}\r\n             */\r\n            function (value) {\r\n                if (value) {\r\n                    return validateCreditCard(value);\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        'validate-cc-type': [\r\n\r\n            /**\r\n             * Validate credit card number is for the correct credit card type.\r\n             *\r\n             * @param {String} value - credit card number\r\n             * @param {*} element - element contains credit card number\r\n             * @param {*} params - selector for credit card type\r\n             * @return {Boolean}\r\n             */\r\n            function (value, element, params) {\r\n                var ccType;\r\n\r\n                if (value && params) {\r\n                    ccType = $(params).val();\r\n                    value = value.replace(/\\s/g, '').replace(/\\-/g, '');\r\n\r\n                    if (creditCartTypes[ccType] && creditCartTypes[ccType][0]) {\r\n                        return creditCartTypes[ccType][0].test(value);\r\n                    } else if (creditCartTypes[ccType] && !creditCartTypes[ccType][0]) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Credit card number does not match credit card type.')\r\n        ],\r\n        'validate-cc-exp': [\r\n\r\n            /**\r\n             * Validate credit card expiration date, make sure it's within the year and not before current month.\r\n             *\r\n             * @param {*} value - month\r\n             * @param {*} element - element contains month\r\n             * @param {*} params - year selector\r\n             * @return {Boolean}\r\n             */\r\n            function (value, element, params) {\r\n                var isValid = false,\r\n                    month, year, currentTime, currentMonth, currentYear;\r\n\r\n                if (value && params) {\r\n                    month = value;\r\n                    year = $(params).val();\r\n                    currentTime = new Date();\r\n                    currentMonth = currentTime.getMonth() + 1;\r\n                    currentYear = currentTime.getFullYear();\r\n\r\n                    isValid = !year || year > currentYear || year == currentYear && month >= currentMonth; //eslint-disable-line\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('Incorrect credit card expiration date.')\r\n        ],\r\n        'validate-cc-cvn': [\r\n\r\n            /**\r\n             * Validate credit card cvn based on credit card type.\r\n             *\r\n             * @param {*} value - credit card cvn\r\n             * @param {*} element - element contains credit card cvn\r\n             * @param {*} params - credit card type selector\r\n             * @return {*}\r\n             */\r\n            function (value, element, params) {\r\n                var ccType;\r\n\r\n                if (value && params) {\r\n                    ccType = $(params).val();\r\n\r\n                    if (creditCartTypes[ccType] && creditCartTypes[ccType][0]) {\r\n                        return creditCartTypes[ccType][1].test(value);\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card verification number.')\r\n        ],\r\n        'validate-cc-ukss': [\r\n\r\n            /**\r\n             * Validate Switch/Solo/Maestro issue number and start date is filled.\r\n             *\r\n             * @param {*} value - input field value\r\n             * @return {*}\r\n             */\r\n            function (value) {\r\n                return value;\r\n            },\r\n            $.mage.__('Please enter issue number or start date for switch/solo card type.')\r\n        ],\r\n        'validate-length': [\r\n            function (v, elm) {\r\n                var reMax = new RegExp(/^maximum-length-[0-9]+$/),\r\n                    reMin = new RegExp(/^minimum-length-[0-9]+$/),\r\n                    validator = this,\r\n                    result = true,\r\n                    length = 0;\r\n\r\n                $.each(elm.className.split(' '), function (index, name) {\r\n                    if (name.match(reMax) && result) {\r\n                        length = name.split('-')[2];\r\n                        result = v.length <= length;\r\n                        validator.validateMessage =\r\n                            $.mage.__('Please enter less or equal than %1 symbols.').replace('%1', length);\r\n                    }\r\n\r\n                    if (name.match(reMin) && result && !$.mage.isEmpty(v)) {\r\n                        length = name.split('-')[2];\r\n                        result = v.length >= length;\r\n                        validator.validateMessage =\r\n                            $.mage.__('Please enter more or equal than %1 symbols.').replace('%1', length);\r\n                    }\r\n                });\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.validateMessage;\r\n            }\r\n        ],\r\n        'required-entry': [\r\n            function (value) {\r\n                return !$.mage.isEmpty(value);\r\n            }, $.mage.__('This is a required field.')\r\n        ],\r\n        'not-negative-amount': [\r\n            function (v) {\r\n                if (v.length) {\r\n                    return (/^\\s*\\d+([,.]\\d+)*\\s*%?\\s*$/).test(v);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter positive number in this field.')\r\n        ],\r\n        'validate-per-page-value-list': [\r\n            function (v) {\r\n                var isValid = true,\r\n                    values = v.split(','),\r\n                    i;\r\n\r\n                if ($.mage.isEmpty(v)) {\r\n                    return isValid;\r\n                }\r\n\r\n                for (i = 0; i < values.length; i++) {\r\n                    if (!/^[0-9]+$/.test(values[i])) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('Please enter a valid value, ex: 10,20,30')\r\n        ],\r\n        'validate-per-page-value': [\r\n            function (v, elm) {\r\n                var values;\r\n\r\n                if ($.mage.isEmpty(v)) {\r\n                    return false;\r\n                }\r\n                values = $('#' + elm.id + '_values').val().split(',');\r\n\r\n                return values.indexOf(v) !== -1;\r\n            },\r\n            $.mage.__('Please enter a valid value from list')\r\n        ],\r\n        'validate-new-password': [\r\n            function (v) {\r\n                if ($.validator.methods['validate-password'] && !$.validator.methods['validate-password'](v)) {\r\n                    return false;\r\n                }\r\n\r\n                if ($.mage.isEmpty(v) && v !== '') {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'required-if-not-specified': [\r\n            function (value, element, params) {\r\n                var valid = false,\r\n                    alternate = $(params),\r\n                    alternateValue;\r\n\r\n                if (alternate.length > 0) {\r\n                    valid = this.check(alternate);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        alternateValue = alternate.val();\r\n\r\n                        if (typeof alternateValue == 'undefined' || alternateValue.length === 0) { //eslint-disable-line\r\n                            valid = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!valid) {\r\n                    valid = !this.optional(element);\r\n                }\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'required-if-all-sku-empty-and-file-not-loaded': [\r\n            function (value, element, params) {\r\n                var valid = false,\r\n                    alternate = $(params.specifiedId),\r\n                    alternateValue;\r\n\r\n                if (alternate.length > 0) {\r\n                    valid = this.check(alternate);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        alternateValue = alternate.val();\r\n\r\n                        if (typeof alternateValue == 'undefined' || alternateValue.length === 0) { //eslint-disable-line\r\n                            valid = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!valid) {\r\n                    valid = !this.optional(element);\r\n                }\r\n\r\n                $('input[' + params.dataSku + '=true]').each(function () {\r\n                    if ($(this).val() !== '') {\r\n                        valid = true;\r\n                    }\r\n                });\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('Please enter valid SKU key.')\r\n        ],\r\n        'required-if-specified': [\r\n            function (value, element, params) {\r\n                var valid = true,\r\n                    dependent = $(params),\r\n                    dependentValue;\r\n\r\n                if (dependent.length > 0) {\r\n                    valid = this.check(dependent);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        dependentValue = dependent.val();\r\n                        valid = typeof dependentValue != 'undefined' && dependentValue.length > 0;\r\n                    }\r\n                }\r\n\r\n                if (valid) {\r\n                    valid = !this.optional(element);\r\n                } else {\r\n                    valid = true; // dependent was not valid, so don't even check\r\n                }\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'required-number-if-specified': [\r\n            function (value, element, params) {\r\n                var valid = true,\r\n                    dependent = $(params),\r\n                    depeValue;\r\n\r\n                if (dependent.length) {\r\n                    valid = this.check(dependent);\r\n\r\n                    if (valid) {\r\n                        depeValue = dependent[0].value;\r\n                        valid = !!(depeValue && depeValue.length);\r\n                    }\r\n                }\r\n\r\n                return valid ? !!value.length : true;\r\n            },\r\n            $.mage.__('Please enter a valid number.')\r\n        ],\r\n        'datetime-validation': [\r\n            function (value, element) {\r\n                var isValid = true;\r\n\r\n                if ($(element).val().length === 0) {\r\n                    isValid = false;\r\n                    $(element).addClass('mage-error');\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('This is required field')\r\n        ],\r\n        'required-text-swatch-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in each row.')\r\n        ],\r\n        'required-visual-swatch-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in each row.')\r\n        ],\r\n        'required-dropdown-attribute-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in each row.')\r\n        ],\r\n        'validate-item-quantity': [\r\n            function (value, element, params) {\r\n                var validator = this,\r\n                    result = false,\r\n                    // obtain values for validation\r\n                    qty = $.mage.parseNumber(value),\r\n                    isMinAllowedValid = typeof params.minAllowed === 'undefined' ||\r\n                        qty >= $.mage.parseNumber(params.minAllowed),\r\n                    isMaxAllowedValid = typeof params.maxAllowed === 'undefined' ||\r\n                        qty <= $.mage.parseNumber(params.maxAllowed),\r\n                    isQtyIncrementsValid = typeof params.qtyIncrements === 'undefined' ||\r\n                        resolveModulo(qty, $.mage.parseNumber(params.qtyIncrements)) === 0.0;\r\n\r\n                result = qty > 0;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('Please enter a quantity greater than 0.');//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isMinAllowedValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('The fewest you may purchase is %1.').replace('%1', params.minAllowed);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isMaxAllowedValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('The maximum you may purchase is %1.').replace('%1', params.maxAllowed);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isQtyIncrementsValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('You can buy this product only in quantities of %1 at a time.').replace('%1', params.qtyIncrements);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.itemQtyErrorMessage;\r\n            }\r\n        ],\r\n        'password-not-equal-to-user-name': [\r\n            function (value, element, params) {\r\n                if (typeof params === 'string') {\r\n                    return value.toLowerCase() !== params.toLowerCase();\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('The password can\\'t be the same as the email address. Create a new password and try again.')\r\n        ]\r\n    };\r\n\r\n    $.each(rules, function (i, rule) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n    $.validator.addClassRules({\r\n        'required-option': {\r\n            required: true\r\n        },\r\n        'required-options-count': {\r\n            required: true\r\n        },\r\n        'validate-both-passwords': {\r\n            'validate-cpassword': true\r\n        }\r\n    });\r\n    $.validator.messages = $.extend($.validator.messages, {\r\n        required: $.mage.__('This is a required field.'),\r\n        remote: $.mage.__('Please fix this field.'),\r\n        email: $.mage.__('Please enter a valid email address.'),\r\n        url: $.mage.__('Please enter a valid URL.'),\r\n        date: $.mage.__('Please enter a valid date.'),\r\n        dateISO: $.mage.__('Please enter a valid date (ISO).'),\r\n        number: $.mage.__('Please enter a valid number.'),\r\n        digits: $.mage.__('Please enter only digits.'),\r\n        creditcard: $.mage.__('Please enter a valid credit card number.'),\r\n        equalTo: $.mage.__('Please enter the same value again.'),\r\n        maxlength: $.validator.format($.mage.__('Please enter no more than {0} characters.')),\r\n        minlength: $.validator.format($.mage.__('Please enter at least {0} characters.')),\r\n        rangelength: $.validator.format($.mage.__('Please enter a value between {0} and {1} characters long.')),\r\n        range: $.validator.format($.mage.__('Please enter a value between {0} and {1}.')),\r\n        max: $.validator.format($.mage.__('Please enter a value less than or equal to {0}.')),\r\n        min: $.validator.format($.mage.__('Please enter a value greater than or equal to {0}.'))\r\n    });\r\n\r\n    if ($.metadata) {\r\n        // Setting the type as html5 to enable data-validate attribute\r\n        $.metadata.setType('html5');\r\n    }\r\n\r\n    showLabel = $.validator.prototype.showLabel;\r\n    $.extend(true, $.validator.prototype, {\r\n        /**\r\n         * @param {*} element\r\n         * @param {*} message\r\n         */\r\n        showLabel: function (element, message) {\r\n            var label, elem;\r\n\r\n            showLabel.call(this, element, message);\r\n\r\n            // ARIA (adding aria-invalid & aria-describedby)\r\n            label = this.errorsFor(element);\r\n            elem = $(element);\r\n\r\n            if (!label.attr('id')) {\r\n                label.attr('id', this.idOrName(element) + '-error');\r\n            }\r\n            elem.attr('aria-invalid', 'true')\r\n                .attr('aria-describedby', label.attr('id'));\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Validate form field without instantiating validate plug-in.\r\n     *\r\n     * @param {Element|String} element - DOM element or selector\r\n     * @return {Boolean} validation result\r\n     */\r\n    $.validator.validateElement = function (element) {\r\n        var form, validator, valid, classes;\r\n\r\n        element = $(element);\r\n        form = element.get(0).form;\r\n        validator = form ? $(form).data('validator') : null;\r\n\r\n        if (validator) {\r\n            return validator.element(element.get(0));\r\n        }\r\n        valid = true;\r\n        classes = element.prop('class').split(' ');\r\n        $.each(classes, $.proxy(function (i, className) {\r\n            if (this.methods[className] && !this.methods[className](element.val(), element.get(0))) {\r\n                valid = false;\r\n\r\n                return valid;\r\n            }\r\n        }, this));\r\n\r\n        return valid;\r\n    };\r\n\r\n    originValidateDelegate = $.fn.validateDelegate;\r\n\r\n    /**\r\n     * @return {*}\r\n     */\r\n    $.fn.validateDelegate = function () {\r\n        if (!this[0].form) {\r\n            return this;\r\n        }\r\n\r\n        return originValidateDelegate.apply(this, arguments);\r\n    };\r\n\r\n    /**\r\n     * Validate single element.\r\n     *\r\n     * @param {Element} element\r\n     * @param {Object} config\r\n     * @returns {*}\r\n     */\r\n    $.validator.validateSingleElement = function (element, config) {\r\n        var errors = {},\r\n            valid = true,\r\n            validateConfig = {\r\n                errorElement: 'label',\r\n                ignore: '.ignore-validate',\r\n                hideError: false\r\n            },\r\n            form, validator, classes, elementValue;\r\n\r\n        $.extend(validateConfig, config);\r\n        element = $(element).not(validateConfig.ignore);\r\n\r\n        if (!element.length) {\r\n            return true;\r\n        }\r\n\r\n        form = element.get(0).form;\r\n        validator = form ? $(form).data('validator') : null;\r\n\r\n        if (validator) {\r\n            return validator.element(element.get(0));\r\n        }\r\n\r\n        classes = element.prop('class').split(' ');\r\n        validator = element.parent().data('validator') ||\r\n            $.mage.validation(validateConfig, element.parent()).validate;\r\n\r\n        element.removeClass(validator.settings.errorClass);\r\n        validator.toHide = validator.toShow;\r\n        validator.hideErrors();\r\n        validator.toShow = validator.toHide = $([]);\r\n\r\n        $.each(classes, $.proxy(function (i, className) {\r\n            elementValue = element.val();\r\n\r\n            if (element.is(':checkbox') || element.is(':radio')) {\r\n                elementValue = element.is(':checked') || null;\r\n            }\r\n\r\n            if (this.methods[className] && !this.methods[className](elementValue, element.get(0))) {\r\n                valid = false;\r\n                errors[element.get(0).name] = this.messages[className];\r\n                validator.invalid[element.get(0).name] = true;\r\n\r\n                if (!validateConfig.hideError) {\r\n                    validator.showErrors(errors);\r\n                }\r\n\r\n                return valid;\r\n            }\r\n        }, this));\r\n\r\n        return valid;\r\n    };\r\n\r\n    $.widget('mage.validation', {\r\n        options: {\r\n            meta: 'validate',\r\n            onfocusout: false,\r\n            onkeyup: false,\r\n            onclick: false,\r\n            ignoreTitle: true,\r\n            errorClass: 'mage-error',\r\n            errorElement: 'div',\r\n\r\n            /**\r\n             * @param {*} error\r\n             * @param {*} element\r\n             */\r\n            errorPlacement: function (error, element) {\r\n                var errorPlacement = element,\r\n                    fieldWrapper;\r\n\r\n                // logic for date-picker error placement\r\n                if (element.hasClass('_has-datepicker')) {\r\n                    errorPlacement = element.siblings('button');\r\n                }\r\n                // logic for field wrapper\r\n                fieldWrapper = element.closest('.addon');\r\n\r\n                if (fieldWrapper.length) {\r\n                    errorPlacement = fieldWrapper.after(error);\r\n                }\r\n                //logic for checkboxes/radio\r\n                if (element.is(':checkbox') || element.is(':radio')) {\r\n                    errorPlacement = element.parents('.control').children().last();\r\n\r\n                    //fallback if group does not have .control parent\r\n                    if (!errorPlacement.length) {\r\n                        errorPlacement = element.siblings('label').last();\r\n                    }\r\n                }\r\n                //logic for control with tooltip\r\n                if (element.siblings('.tooltip').length) {\r\n                    errorPlacement = element.siblings('.tooltip');\r\n                }\r\n                //logic for select with tooltip in after element\r\n                if (element.next().find('.tooltip').length) {\r\n                    errorPlacement = element.next();\r\n                }\r\n                errorPlacement.after(error);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if form pass validation rules without submit.\r\n         *\r\n         * @return boolean\r\n         */\r\n        isValid: function () {\r\n            return this.element.valid();\r\n        },\r\n\r\n        /**\r\n         * Remove validation error messages\r\n         */\r\n        clearError: function () {\r\n            if (arguments.length) {\r\n                $.each(arguments, $.proxy(function (index, item) {\r\n                    this.validate.prepareElement(item);\r\n                    this.validate.hideErrors();\r\n                }, this));\r\n            } else {\r\n                this.validate.resetForm();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validation creation.\r\n         *\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.validate = this.element.validate(this.options);\r\n\r\n            // ARIA (adding aria-required attribute)\r\n            this.element\r\n                .find('.field.required')\r\n                .find('.control')\r\n                .find('input, select, textarea')\r\n                .attr('aria-required', 'true');\r\n\r\n            this._listenFormValidate();\r\n        },\r\n\r\n        /**\r\n         * Validation listening.\r\n         *\r\n         * @protected\r\n         */\r\n        _listenFormValidate: function () {\r\n            $('form').on('invalid-form.validate', this.listenFormValidateHandler);\r\n        },\r\n\r\n        /**\r\n         * Handle form validation. Focus on first invalid form field.\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} validation\r\n         */\r\n        listenFormValidateHandler: function (event, validation) {\r\n            var firstActive = $(validation.errorList[0].element || []),\r\n                lastActive = $(validation.findLastActive() ||\r\n                    validation.errorList.length && validation.errorList[0].element || []),\r\n                windowHeight = $(window).height(),\r\n                parent, successList;\r\n\r\n            if (lastActive.is(':hidden')) {\r\n                parent = lastActive.parent();\r\n                $('html, body').animate({\r\n                    scrollTop: parent.offset().top - windowHeight / 2\r\n                });\r\n            }\r\n\r\n            // ARIA (removing aria attributes if success)\r\n            successList = validation.successList;\r\n\r\n            if (successList.length) {\r\n                $.each(successList, function () {\r\n                    $(this)\r\n                        .removeAttr('aria-describedby')\r\n                        .removeAttr('aria-invalid');\r\n                });\r\n            }\r\n\r\n            if (firstActive.length) {\r\n                $('body').stop().animate({\r\n                    scrollTop: firstActive.offset().top - windowHeight / 2\r\n                });\r\n                firstActive.focus();\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.validation;\r\n});\r\n","mage/adminhtml/accordion.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global varienAccordion, varienLoader, Cookie */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'prototype'\r\n], function () {\r\n    window.varienAccordion = new Class.create(); //eslint-disable-line\r\n    varienAccordion.prototype = {\r\n        /**\r\n         * @param {*} containerId\r\n         * @param {*} activeOnlyOne\r\n         */\r\n        initialize: function (containerId, activeOnlyOne) {\r\n            var links, i;\r\n\r\n            this.containerId = containerId;\r\n            this.activeOnlyOne = activeOnlyOne || false;\r\n            this.container = $(this.containerId);\r\n            this.items = $$('#' + this.containerId + ' dt');\r\n            this.loader = new varienLoader(true); //jscs:ignore requireCapitalizedConstructors\r\n\r\n            links = $$('#' + this.containerId + ' dt a');\r\n\r\n            for (i in links) {\r\n                if (links[i].href) {\r\n                    Event.observe(links[i], 'click', this.clickItem.bind(this));\r\n                    this.items[i].dd = this.items[i].next('dd');\r\n                    this.items[i].link = links[i];\r\n                }\r\n            }\r\n\r\n            this.initFromCookie();\r\n        },\r\n\r\n        /**\r\n         * Init from cookie.\r\n         */\r\n        initFromCookie: function () {\r\n            var activeItemId, visibility;\r\n\r\n            if (this.activeOnlyOne &&\r\n                (activeItemId = Cookie.read(this.cookiePrefix() + 'active-item')) !== null) {\r\n                this.hideAllItems();\r\n                this.showItem(this.getItemById(activeItemId));\r\n            } else if (!this.activeOnlyOne) {\r\n                this.items.each(function (item) {\r\n                    if ((visibility = Cookie.read(this.cookiePrefix() + item.id)) !== null) {\r\n                        if (visibility == 0) { //eslint-disable-line eqeqeq\r\n                            this.hideItem(item);\r\n                        } else {\r\n                            this.showItem(item);\r\n                        }\r\n                    }\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {String}\r\n         */\r\n        cookiePrefix: function () {\r\n            return 'accordion-' + this.containerId + '-';\r\n        },\r\n\r\n        /**\r\n         * @param {*} itemId\r\n         * @return {*}\r\n         */\r\n        getItemById: function (itemId) {\r\n            var result = null;\r\n\r\n            this.items.each(function (item) {\r\n                if (item.id == itemId) { //eslint-disable-line\r\n                    result = item;\r\n                    throw $break;\r\n                }\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {*} event\r\n         */\r\n        clickItem: function (event) {\r\n            var item = Event.findElement(event, 'dt');\r\n\r\n            if (this.activeOnlyOne) {\r\n                this.hideAllItems();\r\n                this.showItem(item);\r\n                Cookie.write(this.cookiePrefix() + 'active-item', item.id, 30 * 24 * 60 * 60);\r\n            } else {\r\n                if (this.isItemVisible(item)) { //eslint-disable-line no-lonely-if\r\n                    this.hideItem(item);\r\n                    Cookie.write(this.cookiePrefix() + item.id, 0, 30 * 24 * 60 * 60);\r\n                } else {\r\n                    this.showItem(item);\r\n                    Cookie.write(this.cookiePrefix() + item.id, 1, 30 * 24 * 60 * 60);\r\n                }\r\n            }\r\n            Event.stop(event);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         */\r\n        showItem: function (item) {\r\n            if (item && item.link) {\r\n                if (item.link.href) {\r\n                    this.loadContent(item);\r\n                }\r\n\r\n                Element.addClassName(item, 'open');\r\n                Element.addClassName(item.dd, 'open');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         */\r\n        hideItem: function (item) {\r\n            Element.removeClassName(item, 'open');\r\n            Element.removeClassName(item.dd, 'open');\r\n        },\r\n\r\n        /**\r\n         * @param {*} item\r\n         * @return {*}\r\n         */\r\n        isItemVisible: function (item) {\r\n            return Element.hasClassName(item, 'open');\r\n        },\r\n\r\n        /**\r\n         * @param {*} item\r\n         */\r\n        loadContent: function (item) {\r\n            if (item.link.href.indexOf('#') == item.link.href.length - 1) { //eslint-disable-line eqeqeq\r\n                return;\r\n            }\r\n\r\n            if (Element.hasClassName(item.link, 'ajax')) {\r\n                this.loadingItem = item;\r\n                this.loader.load(item.link.href, {\r\n                    updaterId: this.loadingItem.dd.id\r\n                }, this.setItemContent.bind(this));\r\n\r\n                return;\r\n            }\r\n            location.href = item.link.href;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         */\r\n        setItemContent: function (content) {\r\n            if (content.isJSON) {\r\n                return;\r\n            }\r\n            this.loadingItem.dd.innerHTML = content;\r\n        },\r\n\r\n        /**\r\n         * Hide all items\r\n         */\r\n        hideAllItems: function () {\r\n            var i;\r\n\r\n            for (i in this.items) {\r\n                if (this.items[i].id) {\r\n                    Element.removeClassName(this.items[i], 'open');\r\n                    Element.removeClassName(this.items[i].dd, 'open');\r\n                }\r\n            }\r\n        }\r\n    };\r\n});\r\n","mage/adminhtml/backup.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\n/* global  AdminBackup, setLocation */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/mage',\r\n    'prototype'\r\n], function (jQuery) {\r\n    window.AdminBackup = new Class.create();\r\n\r\n    AdminBackup.prototype = {\r\n        /**\r\n         * Initialize.\r\n         */\r\n        initialize: function () {\r\n            this.reset();\r\n            this.rollbackUrl = this.backupUrl = '';\r\n        },\r\n\r\n        /**\r\n         * reset.\r\n         */\r\n        reset: function () {\r\n            this.time = 0;\r\n            this.type = '';\r\n        },\r\n\r\n        /**\r\n         * @param {*} type\r\n         * @return {Boolean}\r\n         */\r\n        backup: function (type) {\r\n            this.reset();\r\n            this.type = type;\r\n            this.requestBackupOptions();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @param {*} type\r\n         * @param {*} time\r\n         * @return {Boolean}\r\n         */\r\n        rollback: function (type, time) {\r\n            this.reset();\r\n            this.time = time;\r\n            this.type = type;\r\n            this.showRollbackWarning();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Show rollback warning.\r\n         */\r\n        showRollbackWarning: function () {\r\n            this.showPopup('rollback-warning');\r\n        },\r\n\r\n        /**\r\n         * request backup options.\r\n         */\r\n        requestBackupOptions: function () {\r\n            var action;\r\n\r\n            this.hidePopups();\r\n            action = this.type != 'snapshot' ? 'hide' : 'show'; //eslint-disable-line eqeqeq\r\n            this.showPopup('backup-options');\r\n\r\n            $$('#exclude-media-checkbox-container').invoke(action);\r\n        },\r\n\r\n        /**\r\n         * Request password.\r\n         */\r\n        requestPassword: function () {\r\n            this.hidePopups();\r\n\r\n            this.showPopup('rollback-request-password');\r\n\r\n            this.type != 'db' ? //eslint-disable-line eqeqeq\r\n                $('use-ftp-checkbox-row').show() :\r\n                $('use-ftp-checkbox-row').hide();\r\n        },\r\n\r\n        /**\r\n         * Toggle Ftp Credentials Form.\r\n         */\r\n        toggleFtpCredentialsForm: function () {\r\n            $('use_ftp').checked ? $('ftp-credentials-container').show()\r\n                : $('ftp-credentials-container').hide();\r\n\r\n            $$('#ftp-credentials-container input').each(function (item) {\r\n                if (item.name == 'ftp_path') { //eslint-disable-line eqeqeq\r\n                    return;\r\n                }\r\n                $('use_ftp').checked ? item.addClassName('required-entry') : item.removeClassName('required-entry');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Submit backup.\r\n         */\r\n        submitBackup: function () {\r\n            var data = {\r\n                'type': this.type,\r\n                'maintenance_mode': $('backup_maintenance_mode').checked ? 1 : 0,\r\n                'backup_name': $('backup_name').value,\r\n                'exclude_media': $('exclude_media').checked ? 1 : 0\r\n            };\r\n\r\n            new Ajax.Request(this.backupUrl, {\r\n                onSuccess: function (transport) {\r\n                    this.processResponse(transport, 'backup-options');\r\n                }.bind(this),\r\n                method: 'post',\r\n                parameters: data\r\n            });\r\n\r\n            this.modal.modal('closeModal');\r\n        },\r\n\r\n        /**\r\n         * Submit rollback.\r\n         */\r\n        submitRollback: function () {\r\n            var data = this.getPostData();\r\n\r\n            new Ajax.Request(this.rollbackUrl, {\r\n                onSuccess: function (transport) {\r\n                    this.processResponse(transport, 'rollback-request-password');\r\n                }.bind(this),\r\n                method: 'post',\r\n                parameters: data\r\n            });\r\n\r\n            this.modal.modal('closeModal');\r\n        },\r\n\r\n        /**\r\n         * @param {Object} transport\r\n         * @param {*} popupId\r\n         */\r\n        processResponse: function (transport, popupId) {\r\n            var json;\r\n\r\n            if (!transport.responseText.isJSON()) {\r\n                return;\r\n            }\r\n\r\n            json = transport.responseText.evalJSON();\r\n\r\n            if (json.error) {\r\n                this.showPopup(popupId);\r\n                this.displayError(popupId, json.error);\r\n\r\n                return;\r\n            }\r\n\r\n            if (json['redirect_url']) {\r\n                setLocation(json['redirect_url']);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} parentContainer\r\n         * @param {*} message\r\n         */\r\n        displayError: function (parentContainer, message) {\r\n            var messageHtml = this.getErrorMessageHtml(message);\r\n\r\n            $$('#' + parentContainer + ' .backup-messages .messages').invoke('update', messageHtml);\r\n            $$('#' + parentContainer + ' .backup-messages').invoke('show');\r\n        },\r\n\r\n        /**\r\n         * @param {*} message\r\n         * @return {String}\r\n         */\r\n        getErrorMessageHtml: function (message) {\r\n            return '<div class=\"message message-error error\"><div>' + message + '</div></div>';\r\n        },\r\n\r\n        /**\r\n         * @return {*|jQuery}\r\n         */\r\n        getPostData: function () {\r\n            var data = $('rollback-form').serialize(true);\r\n\r\n            data.time = this.time;\r\n            data.type = this.type;\r\n\r\n            return data;\r\n        },\r\n        backupConfig: {\r\n            'backup-options': {\r\n                title: jQuery.mage.__('Backup options'),\r\n\r\n                /**\r\n                 * @return {String}\r\n                 */\r\n                content: function () {\r\n                    return document.getElementById('backup-options-template').textContent;\r\n                },\r\n\r\n                /**\r\n                 * Action Ok.\r\n                 */\r\n                actionOk: function () {\r\n                    this.modal.find('#backup-form').validation({\r\n                        submitHandler: jQuery.proxy(this.submitBackup, this)\r\n                    });\r\n                    this.modal.find('#backup-form').submit();\r\n                }\r\n            },\r\n            'rollback-warning': {\r\n                title: jQuery.mage.__('Warning'),\r\n\r\n                /**\r\n                 * @return {String}\r\n                 */\r\n                content: function () {\r\n                    return document.getElementById('rollback-warning-template').textContent;\r\n                },\r\n\r\n                /**\r\n                 * Action Ok.\r\n                 */\r\n                actionOk: function () {\r\n                    this.modal.modal('closeModal');\r\n                    this.requestPassword();\r\n                }\r\n            },\r\n            'rollback-request-password': {\r\n                title: jQuery.mage.__('Backup options'),\r\n\r\n                /**\r\n                 * @return {String}\r\n                 */\r\n                content: function () {\r\n                    return document.getElementById('rollback-request-password-template').textContent;\r\n                },\r\n\r\n                /**\r\n                 * Action Ok.\r\n                 */\r\n                actionOk: function () {\r\n                    this.modal.find('#rollback-form').validation({\r\n                        submitHandler: jQuery.proxy(this.submitRollback, this)\r\n                    });\r\n                    this.modal.find('#rollback-form').submit();\r\n                },\r\n\r\n                /**\r\n                 * Opened.\r\n                 */\r\n                opened: function () {\r\n                    this.toggleFtpCredentialsForm();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} divId\r\n         */\r\n        showPopup: function (divId) {\r\n            var self = this;\r\n\r\n            this.modal = jQuery('<div/>').attr({\r\n                id: divId\r\n            }).html(this.backupConfig[divId].content()).modal({\r\n                modalClass: 'magento',\r\n                title: this.backupConfig[divId].title,\r\n                type: 'slide',\r\n\r\n                /**\r\n                 * @param {juery.Event} e\r\n                 * @param {Object} modal\r\n                 */\r\n                closed: function (e, modal) {\r\n                    modal.modal.remove();\r\n                },\r\n\r\n                /**\r\n                 * Opened.\r\n                 */\r\n                opened: function () {\r\n                    if (self.backupConfig[divId].opened) {\r\n                        self.backupConfig[divId].opened.call(self);\r\n                    }\r\n                },\r\n                buttons: [{\r\n                    text: jQuery.mage.__('Cancel'),\r\n                    'class': 'action cancel',\r\n\r\n                    /**\r\n                     * Click action.\r\n                     */\r\n                    click: function () {\r\n                        this.closeModal();\r\n                    }\r\n                }, {\r\n                    text: jQuery.mage.__('Ok'),\r\n                    'class': 'action primary',\r\n\r\n                    /**\r\n                     * Click action.\r\n                     */\r\n                    click: function () {\r\n                        self.backupConfig[divId].actionOk.call(self);\r\n                    }\r\n                }]\r\n            });\r\n            this.modal.modal('openModal');\r\n        },\r\n\r\n        /**\r\n         * Hide Popups.\r\n         */\r\n        hidePopups: function () {\r\n            var mask;\r\n\r\n            $$('.backup-dialog').each(Element.hide);\r\n            mask = $('popup-window-mask');\r\n\r\n            if (mask) {\r\n                mask.hide();\r\n            }\r\n        }\r\n    };\r\n});\r\n","mage/adminhtml/browser.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global MediabrowserUtility, FORM_KEY, tinyMceEditors */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'wysiwygAdapter',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/modal/alert',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/modal',\r\n    'jquery/ui',\r\n    'jquery/jstree/jquery.jstree',\r\n    'mage/mage'\r\n], function ($, wysiwyg, prompt, confirm, alert, _) {\r\n    window.MediabrowserUtility = {\r\n        windowId: 'modal_dialog_message',\r\n        modalLoaded: false,\r\n\r\n        /**\r\n         * @return {Number}\r\n         */\r\n        getMaxZIndex: function () {\r\n            var max = 0,\r\n                cn = document.body.childNodes,\r\n                i, el, zIndex;\r\n\r\n            for (i = 0; i < cn.length; i++) {\r\n                el = cn[i];\r\n                zIndex = el.nodeType == 1 ? parseInt(el.style.zIndex, 10) || 0 : 0; //eslint-disable-line eqeqeq\r\n\r\n                if (zIndex < 10000) {\r\n                    max = Math.max(max, zIndex);\r\n                }\r\n            }\r\n\r\n            return max + 10;\r\n        },\r\n\r\n        /**\r\n         * @param {*} url\r\n         * @param {*} width\r\n         * @param {*} height\r\n         * @param {*} title\r\n         * @param {Object} options\r\n         */\r\n        openDialog: function (url, width, height, title, options) {\r\n            var windowId = this.windowId,\r\n                content = '<div class=\"popup-window\" id=\"' + windowId + '\"></div>',\r\n                self = this;\r\n\r\n            if (options &&\r\n                self.targetElementId &&\r\n                self.targetElementId === options.targetElementId) {\r\n                if (typeof options.closed !== 'undefined') {\r\n                    this.modal.modal('option', 'closed', options.closed);\r\n                }\r\n                this.modal.modal('openModal');\r\n\r\n                return;\r\n            } else if (_.isUndefined(options) &&\r\n                    self.modalLoaded === true &&\r\n                    self.targetElementId === url\r\n            ) {\r\n                this.modal.modal('openModal');\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.modal) {\r\n                this.modal.html($(content).html());\r\n\r\n                if (options && typeof options.closed !== 'undefined') {\r\n                    this.modal.modal('option', 'closed', options.closed);\r\n                }\r\n            } else {\r\n                this.modal = $(content).modal($.extend({\r\n                    title:  title || 'Insert File...',\r\n                    modalClass: 'magento',\r\n                    type: 'slide',\r\n                    buttons: []\r\n                }, options));\r\n            }\r\n            this.modal.modal('openModal');\r\n            $.ajax({\r\n                url: url,\r\n                type: 'get',\r\n                context: $(this),\r\n                showLoader: true\r\n\r\n            }).done(function (data) {\r\n                self.modal.html(data).trigger('contentUpdated');\r\n                self.modalLoaded = true;\r\n                self.targetElementId = options ?\r\n                           options.targetElementId\r\n                           : url;\r\n            });\r\n\r\n        },\r\n\r\n        /**\r\n         * Close dialog.\r\n         */\r\n        closeDialog: function () {\r\n            this.modal.modal('closeModal');\r\n        }\r\n    };\r\n\r\n    $.widget('mage.mediabrowser', {\r\n        eventPrefix: 'mediabrowser',\r\n        options: {\r\n            targetElementId: null,\r\n            contentsUrl: null,\r\n            onInsertUrl: null,\r\n            newFolderUrl: null,\r\n            deleteFolderUrl: null,\r\n            deleteFilesUrl: null,\r\n            headerText: null,\r\n            tree: null,\r\n            currentNode: null,\r\n            storeId: null,\r\n            showBreadcrumbs: null,\r\n            hidden: 'no-display'\r\n        },\r\n\r\n        /**\r\n         * Proxy creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._on({\r\n                'click [data-row=file]': 'selectFile',\r\n                'dblclick [data-row=file]': 'insert',\r\n                'click #new_folder': 'newFolder',\r\n                'click #delete_folder': 'deleteFolder',\r\n                'click #delete_files': 'deleteFiles',\r\n                'click #insert_files': 'insertSelectedFiles',\r\n                'fileuploaddone': '_uploadDone',\r\n                'click [data-row=breadcrumb]': 'selectFolder'\r\n            });\r\n            this.activeNode = null;\r\n            //tree dont use event bubbling\r\n            this.tree = this.element.find('[data-role=tree]');\r\n            this.tree.on('select_node.jstree', $.proxy(this._selectNode, this));\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _selectNode: function (event, data) {\r\n            var node = data.rslt.obj.data('node');\r\n\r\n            this.activeNode = node;\r\n            this.element.find('#delete_files, #insert_files').toggleClass(this.options.hidden, true);\r\n            this.element.find('#contents').toggleClass(this.options.hidden, false);\r\n            this.element.find('#delete_folder')\r\n                .toggleClass(this.options.hidden, node.id == 'root'); //eslint-disable-line eqeqeq\r\n            this.element.find('#content_header_text')\r\n                .html(node.id == 'root' ? this.headerText : node.text); //eslint-disable-line eqeqeq\r\n\r\n            this.drawBreadcrumbs(data);\r\n            this.loadFileList(node);\r\n        },\r\n\r\n        /**\r\n         * @return {*}\r\n         */\r\n        reload: function (uploaded) {\r\n            return this.loadFileList(this.activeNode, uploaded);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         * @param {*} value\r\n         */\r\n        insertAtCursor: function (element, value) {\r\n            var sel, startPos, endPos, scrollTop;\r\n\r\n            if ('selection' in document) {\r\n                //For browsers like Internet Explorer\r\n                element.focus();\r\n                sel = document.selection.createRange();\r\n                sel.text = value;\r\n                element.focus();\r\n            } else if (element.selectionStart || element.selectionStart == '0') { //eslint-disable-line eqeqeq\r\n                //For browsers like Firefox and Webkit based\r\n                startPos = element.selectionStart;\r\n                endPos = element.selectionEnd;\r\n                scrollTop = element.scrollTop;\r\n                element.value = element.value.substring(0, startPos) + value +\r\n                    element.value.substring(startPos, endPos) + element.value.substring(endPos, element.value.length);\r\n                element.focus();\r\n                element.selectionStart = startPos + value.length;\r\n                element.selectionEnd = startPos + value.length + element.value.substring(startPos, endPos).length;\r\n                element.scrollTop = scrollTop;\r\n            } else {\r\n                element.value += value;\r\n                element.focus();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} node\r\n         */\r\n        loadFileList: function (node, uploaded) {\r\n            var contentBlock = this.element.find('#contents');\r\n\r\n            return $.ajax({\r\n                url: this.options.contentsUrl,\r\n                type: 'GET',\r\n                dataType: 'html',\r\n                data: {\r\n                    'form_key': FORM_KEY,\r\n                    node: node.id\r\n                },\r\n                context: contentBlock,\r\n                showLoader: true\r\n            }).done(function (data) {\r\n                contentBlock.html(data).trigger('contentUpdated');\r\n\r\n                if (uploaded) {\r\n                    contentBlock.find('.filecnt:last').click();\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        selectFolder: function (event) {\r\n            this.element.find('[data-id=\"' + $(event.currentTarget).data('node').id + '\"]>a').click();\r\n        },\r\n\r\n        /**\r\n         * Insert selected files.\r\n         */\r\n        insertSelectedFiles: function () {\r\n            this.element.find('[data-row=file].selected').trigger('dblclick');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        selectFile: function (event) {\r\n            var fileRow = $(event.currentTarget);\r\n\r\n            fileRow.toggleClass('selected');\r\n            this.element.find('[data-row=file]').not(fileRow).removeClass('selected');\r\n            this.element.find('#delete_files, #insert_files')\r\n                .toggleClass(this.options.hidden, !fileRow.is('.selected'));\r\n            fileRow.trigger('selectfile');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _uploadDone: function () {\r\n            this.element.find('.file-row').remove();\r\n            this.reload(true);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @return {Boolean}\r\n         */\r\n        insert: function (event) {\r\n            var fileRow = $(event.currentTarget),\r\n                targetEl;\r\n\r\n            if (!fileRow.prop('id')) {\r\n                return false;\r\n            }\r\n            targetEl = this.getTargetElement();\r\n\r\n            if (!targetEl.length) {\r\n                MediabrowserUtility.closeDialog();\r\n                throw 'Target element not found for content update';\r\n            }\r\n\r\n            return $.ajax({\r\n                url: this.options.onInsertUrl,\r\n                data: {\r\n                    filename: fileRow.attr('id'),\r\n                    node: this.activeNode.id,\r\n                    store: this.options.storeId,\r\n                    'as_is': targetEl.is('textarea') ? 1 : 0,\r\n                    'force_static_path': targetEl.data('force_static_path') ? 1 : 0,\r\n                    'form_key': FORM_KEY\r\n                },\r\n                context: this,\r\n                showLoader: true\r\n            }).done($.proxy(function (data) {\r\n                if (targetEl.is('textarea')) {\r\n                    this.insertAtCursor(targetEl.get(0), data);\r\n                } else {\r\n                    targetEl\r\n                        .val(data)\r\n                        .data('size', fileRow.data('size'))\r\n                        .data('mime-type', fileRow.data('mime-type'))\r\n                        .trigger('change');\r\n                }\r\n                MediabrowserUtility.closeDialog();\r\n                targetEl.focus();\r\n                jQuery(targetEl).change();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Find document target element in next order:\r\n         *  in acive file browser opener:\r\n         *  - input field with ID: \"src\" in opener window\r\n         *  - input field with ID: \"href\" in opener window\r\n         *  in document:\r\n         *  - element with target ID\r\n         *\r\n         * return {HTMLElement|null}\r\n         */\r\n        getTargetElement: function () {\r\n            var opener, targetElementId;\r\n\r\n            if (typeof wysiwyg != 'undefined' && wysiwyg.get(this.options.targetElementId)) {\r\n                opener = this.getMediaBrowserOpener() || window;\r\n                targetElementId = tinyMceEditors.get(this.options.targetElementId).getMediaBrowserTargetElementId();\r\n\r\n                return $(opener.document.getElementById(targetElementId));\r\n            }\r\n\r\n            return $('#' + this.options.targetElementId);\r\n        },\r\n\r\n        /**\r\n         * Return opener Window object if it exists, not closed and editor is active\r\n         *\r\n         * return {Object|null}\r\n         */\r\n        getMediaBrowserOpener: function () {\r\n            if (typeof wysiwyg != 'undefined' &&\r\n                wysiwyg.get(this.options.targetElementId) &&\r\n                typeof tinyMceEditors != 'undefined' &&\r\n                !tinyMceEditors.get(this.options.targetElementId).getMediaBrowserOpener().closed\r\n            ) {\r\n                return tinyMceEditors.get(this.options.targetElementId).getMediaBrowserOpener();\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * New folder.\r\n         */\r\n        newFolder: function () {\r\n            var self = this;\r\n\r\n            prompt({\r\n                title: this.options.newFolderPrompt,\r\n                actions: {\r\n                    /**\r\n                     * @param {*} folderName\r\n                     */\r\n                    confirm: function (folderName) {\r\n                        return $.ajax({\r\n                            url: self.options.newFolderUrl,\r\n                            dataType: 'json',\r\n                            data: {\r\n                                name: folderName,\r\n                                node: self.activeNode.id,\r\n                                store: self.options.storeId,\r\n                                'form_key': FORM_KEY\r\n                            },\r\n                            context: self.element,\r\n                            showLoader: true\r\n                        }).done($.proxy(function (data) {\r\n                            if (data.error) {\r\n                                alert({\r\n                                    content: data.message\r\n                                });\r\n                            } else {\r\n                                self.tree.jstree(\r\n                                    'refresh',\r\n                                    self.element.find('[data-id=\"' + self.activeNode.id + '\"]')\r\n                                );\r\n                            }\r\n                        }, this));\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Delete folder.\r\n         */\r\n        deleteFolder: function () {\r\n            var self = this;\r\n\r\n            confirm({\r\n                content: this.options.deleteFolderConfirmationMessage,\r\n                actions: {\r\n                    /**\r\n                     * Confirm.\r\n                     */\r\n                    confirm: function () {\r\n                        return $.ajax({\r\n                            url: self.options.deleteFolderUrl,\r\n                            dataType: 'json',\r\n                            data: {\r\n                                node: self.activeNode.id,\r\n                                store: self.options.storeId,\r\n                                'form_key': FORM_KEY\r\n                            },\r\n                            context: self.element,\r\n                            showLoader: true\r\n                        }).done($.proxy(function () {\r\n                            self.tree.jstree('refresh', self.activeNode.id);\r\n                        }, this));\r\n                    },\r\n\r\n                    /**\r\n                     * @return {Boolean}\r\n                     */\r\n                    cancel: function () {\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Delete files.\r\n         */\r\n        deleteFiles: function () {\r\n            var self = this;\r\n\r\n            confirm({\r\n                content: this.options.deleteFileConfirmationMessage,\r\n                actions: {\r\n                    /**\r\n                     * Confirm.\r\n                     */\r\n                    confirm: function () {\r\n                        var selectedFiles = self.element.find('[data-row=file].selected'),\r\n                            ids = selectedFiles.map(function () {\r\n                                return $(this).attr('id');\r\n                            }).toArray();\r\n\r\n                        return $.ajax({\r\n                            url: self.options.deleteFilesUrl,\r\n                            data: {\r\n                                files: ids,\r\n                                store: self.options.storeId,\r\n                                'form_key': FORM_KEY\r\n                            },\r\n                            context: self.element,\r\n                            showLoader: true\r\n                        }).done($.proxy(function () {\r\n                            self.reload();\r\n                            self.element.find('#delete_files, #insert_files').toggleClass(self.options.hidden, true);\r\n\r\n                            $(window).trigger('fileDeleted.mediabrowser', {\r\n                                ids: ids\r\n                            });\r\n                        }, this));\r\n                    },\r\n\r\n                    /**\r\n                     * @return {Boolean}\r\n                     */\r\n                    cancel: function () {\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} data\r\n         */\r\n        drawBreadcrumbs: function (data) {\r\n            var node, breadcrumbs;\r\n\r\n            if (this.element.find('#breadcrumbs').length) {\r\n                this.element.find('#breadcrumbs').remove();\r\n            }\r\n            node = data.rslt.obj.data('node');\r\n\r\n            if (node.id == 'root') { //eslint-disable-line eqeqeq\r\n                return;\r\n            }\r\n            breadcrumbs = $('<ul class=\"breadcrumbs\" id=\"breadcrumbs\" />');\r\n            $(data.rslt.obj.parents('[data-id]').get().reverse()).add(data.rslt.obj).each(function (index, element) {\r\n                var nodeData = $(element).data('node');\r\n\r\n                if (index > 0) {\r\n                    breadcrumbs.append($('<li>\\/</li>')); //eslint-disable-line\r\n                }\r\n                breadcrumbs.append($('<li />')\r\n                    .data('node', nodeData).attr('data-row', 'breadcrumb').text(nodeData.text));\r\n\r\n            });\r\n\r\n            breadcrumbs.insertAfter(this.element.find('#content_header'));\r\n        }\r\n    });\r\n\r\n    return window.MediabrowserUtility;\r\n});\r\n","mage/adminhtml/events.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global varienEvents */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'Magento_Ui/js/modal/alert',\r\n    'prototype'\r\n], function (alert) {\r\n    // from http://www.someelement.com/2007/03/eventpublisher-custom-events-la-pubsub.html\r\n    window.varienEvents = Class.create();\r\n\r\n    varienEvents.prototype = {\r\n        /**\r\n         * Initialize.\r\n         */\r\n        initialize: function () {\r\n            this.arrEvents = {};\r\n            this.eventPrefix = '';\r\n        },\r\n\r\n        /**\r\n        * Attaches a {handler} function to the publisher's {eventName} event for execution upon the event firing\r\n        * @param {String} eventName\r\n        * @param {Function} handler\r\n        * @param {Boolean} [asynchFlag] - Defaults to false if omitted.\r\n        * Indicates whether to execute {handler} asynchronously (true) or not (false).\r\n        */\r\n        attachEventHandler: function (eventName, handler) {\r\n            var asynchVar, handlerObj;\r\n\r\n            if (typeof handler == 'undefined' || handler == null) {\r\n                return;\r\n            }\r\n            eventName += this.eventPrefix;\r\n            // using an event cache array to track all handlers for proper cleanup\r\n            if (this.arrEvents[eventName] == null) {\r\n                this.arrEvents[eventName] = [];\r\n            }\r\n            //create a custom object containing the handler method and the asynch flag\r\n            asynchVar = arguments.length > 2 ? arguments[2] : false;\r\n            handlerObj = {\r\n                method: handler,\r\n                asynch: asynchVar\r\n            };\r\n            this.arrEvents[eventName].push(handlerObj);\r\n        },\r\n\r\n        /**\r\n        * Removes a single handler from a specific event\r\n        * @param {String} eventName - The event name to clear the handler from\r\n        * @param {Function} handler - A reference to the handler function to un-register from the event\r\n        */\r\n        removeEventHandler: function (eventName, handler) {\r\n            eventName += this.eventPrefix;\r\n\r\n            if (this.arrEvents[eventName] != null) {\r\n                this.arrEvents[eventName] = this.arrEvents[eventName].reject(function (obj) {\r\n                    return obj.method == handler; //eslint-disable-line eqeqeq\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n        * Removes all handlers from a single event\r\n        * @param {String} eventName - The event name to clear handlers from\r\n        */\r\n        clearEventHandlers: function (eventName) {\r\n            eventName += this.eventPrefix;\r\n            this.arrEvents[eventName] = null;\r\n        },\r\n\r\n        /**\r\n        * Removes all handlers from ALL events\r\n        */\r\n        clearAllEventHandlers: function () {\r\n            this.arrEvents = {};\r\n        },\r\n\r\n        /**\r\n         * Collect and modify value of arg synchronously in succession and return its new value.\r\n         * In order to use, call attachEventHandler and add function handlers with eventName.\r\n         * Then call fireEventReducer with eventName and any argument to have its value accumulatively modified.\r\n         * Event handlers will be applied to argument in order of first attached to last attached.\r\n         * @param {String} eventName\r\n         * @param {*} arg\r\n         */\r\n        fireEventReducer: function (eventName, arg) {\r\n            var evtName = eventName + this.eventPrefix,\r\n                result = arg,\r\n                len,\r\n                i;\r\n\r\n            if (!this.arrEvents[evtName]) {\r\n                return result;\r\n            }\r\n\r\n            len = this.arrEvents[evtName].length; //optimization\r\n\r\n            for (i = 0; i < len; i++) {\r\n                /* eslint-disable max-depth */\r\n                try {\r\n                    result = this.arrEvents[evtName][i].method(result);\r\n                } catch (e) {\r\n                    if (this.id) {\r\n                        alert({\r\n                            content: 'error: error in ' + this.id + '.fireEventReducer():\\n\\nevent name: ' +\r\n                            eventName + '\\n\\nerror message: ' + e.message\r\n                        });\r\n                    } else {\r\n                        alert({\r\n                            content: 'error: error in [unknown object].fireEventReducer():\\n\\nevent name: ' +\r\n                            eventName + '\\n\\nerror message: ' + e.message\r\n                        });\r\n                    }\r\n                }\r\n                /* eslint-disable max-depth */\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n        * Fires the event {eventName}, resulting in all registered handlers to be executed.\r\n        * It also collects and returns results of all non-asynchronous handlers\r\n        * @param {String} eventName - The name of the event to fire\r\n        * @param {Object} [args] - Any object, will be passed into the handler function as the only argument\r\n        * @return {Array}\r\n        */\r\n        fireEvent: function (eventName) {\r\n            var evtName = eventName + this.eventPrefix,\r\n                results = [],\r\n                result, len, i, eventArgs, method, eventHandler;\r\n\r\n            if (this.arrEvents[evtName] != null) {\r\n                len = this.arrEvents[evtName].length; //optimization\r\n\r\n                for (i = 0; i < len; i++) {\r\n                    /* eslint-disable max-depth */\r\n                    try {\r\n                        if (arguments.length > 1) {\r\n                            if (this.arrEvents[evtName][i].asynch) {\r\n                                eventArgs = arguments[1];\r\n                                method = this.arrEvents[evtName][i].method.bind(this);\r\n                                setTimeout(function () { //eslint-disable-line no-loop-func\r\n                                    method(eventArgs);\r\n                                }, 10);\r\n                            } else {\r\n                                result = this.arrEvents[evtName][i].method(arguments[1]);\r\n                            }\r\n                        } else {\r\n                            if (this.arrEvents[evtName][i].asynch) { //eslint-disable-line no-lonely-if\r\n                                eventHandler = this.arrEvents[evtName][i].method;\r\n                                setTimeout(eventHandler, 1);\r\n                            } else if (\r\n                                this.arrEvents &&\r\n                                this.arrEvents[evtName] &&\r\n                                this.arrEvents[evtName][i] &&\r\n                                this.arrEvents[evtName][i].method\r\n                            ) {\r\n                                result = this.arrEvents[evtName][i].method();\r\n                            }\r\n                        }\r\n                        results.push(result);\r\n                    }\r\n                    catch (e) {\r\n                        if (this.id) {\r\n                            alert({\r\n                                content: 'error: error in ' + this.id + '.fireEvent():\\n\\nevent name: ' +\r\n                                eventName + '\\n\\nerror message: ' + e.message\r\n                            });\r\n                        } else {\r\n                            alert({\r\n                                content: 'error: error in [unknown object].fireEvent():\\n\\nevent name: ' +\r\n                                eventName + '\\n\\nerror message: ' + e.message\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    /* eslint-enable max-depth */\r\n                }\r\n            }\r\n\r\n            return results;\r\n        }\r\n    };\r\n\r\n    window.varienGlobalEvents = new varienEvents(); //jscs:ignore requireCapitalizedConstructors\r\n\r\n    return window.varienGlobalEvents;\r\n});\r\n","mage/adminhtml/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global varienGlobalEvents, varienWindowOnloadCache, RegionUpdater, FormElementDependenceController */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'prototype',\r\n    'mage/adminhtml/events'\r\n], function (jQuery) {\r\n    var varienElementMethods;\r\n\r\n    /*\r\n     * @TODO Need to be removed after refactoring all dependent of the form the components\r\n     */\r\n    (function ($) {\r\n        $(document).ready(function () {\r\n            $(document).on('beforeSubmit', function (e) { //eslint-disable-line max-nested-callbacks\r\n                if (typeof varienGlobalEvents !== 'undefined') {\r\n                    varienGlobalEvents.fireEvent('formSubmit', $(e.target).attr('id'));\r\n                }\r\n            });\r\n        });\r\n    })(jQuery);\r\n\r\n    /**\r\n     *  Additional elements methods\r\n     */\r\n    varienElementMethods = {\r\n        /**\r\n         * @param {HTMLElement} element\r\n         */\r\n        setHasChanges: function (element) {\r\n            var elm;\r\n\r\n            if ($(element) && $(element).hasClassName('no-changes')) {\r\n                return;\r\n            }\r\n            elm = element;\r\n\r\n            while (elm && elm.tagName != 'BODY') { //eslint-disable-line eqeqeq\r\n                if (elm.statusBar) {\r\n                    Element.addClassName($(elm.statusBar), 'changed');\r\n                }\r\n                elm = elm.parentNode;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @param {*} flag\r\n         * @param {Object} form\r\n         */\r\n        setHasError: function (element, flag, form) {\r\n            var elm = element;\r\n\r\n            while (elm && elm.tagName != 'BODY') { //eslint-disable-line eqeqeq\r\n                if (elm.statusBar) {\r\n                    /* eslint-disable max-depth */\r\n                    if (form.errorSections.keys().indexOf(elm.statusBar.id) < 0) {\r\n                        form.errorSections.set(elm.statusBar.id, flag);\r\n                    }\r\n\r\n                    if (flag) {\r\n                        Element.addClassName($(elm.statusBar), 'error');\r\n\r\n                        if (form.canShowError && $(elm.statusBar).show) {\r\n                            form.canShowError = false;\r\n                            $(elm.statusBar).show();\r\n                        }\r\n                        form.errorSections.set(elm.statusBar.id, flag);\r\n                    } else if (!form.errorSections.get(elm.statusBar.id)) {\r\n                        Element.removeClassName($(elm.statusBar), 'error');\r\n                    }\r\n\r\n                    /* eslint-enable max-depth */\r\n                }\r\n                elm = elm.parentNode;\r\n            }\r\n            this.canShowElement = false;\r\n        }\r\n    };\r\n\r\n    Element.addMethods(varienElementMethods);\r\n\r\n    // Global bind changes\r\n    window.varienWindowOnloadCache = {};\r\n\r\n    /**\r\n     * @param {*} useCache\r\n     */\r\n    function varienWindowOnload(useCache) {\r\n        var dataElements = $$('input', 'select', 'textarea'),\r\n            i;\r\n\r\n        for (i = 0; i < dataElements.length; i++) {\r\n            if (dataElements[i] && dataElements[i].id) {\r\n\r\n                /* eslint-disable max-depth */\r\n                if (!useCache || !varienWindowOnloadCache[dataElements[i].id]) {\r\n                    Event.observe(dataElements[i], 'change', dataElements[i].setHasChanges.bind(dataElements[i]));\r\n\r\n                    if (useCache) {\r\n                        varienWindowOnloadCache[dataElements[i].id] = true;\r\n                    }\r\n                }\r\n\r\n                /* eslint-disable max-depth */\r\n            }\r\n        }\r\n    }\r\n    Event.observe(window, 'load', varienWindowOnload);\r\n\r\n    window.RegionUpdater = Class.create();\r\n    RegionUpdater.prototype = {\r\n        /**\r\n         * @param {HTMLElement} countryEl\r\n         * @param {HTMLElement} regionTextEl\r\n         * @param {HTMLElement}regionSelectEl\r\n         * @param {Object} regions\r\n         * @param {*} disableAction\r\n         * @param {*} clearRegionValueOnDisable\r\n         */\r\n        initialize: function (\r\n            countryEl, regionTextEl, regionSelectEl, regions, disableAction, clearRegionValueOnDisable\r\n        ) {\r\n            this.isRegionRequired = true;\r\n            this.countryEl = $(countryEl);\r\n            this.regionTextEl = $(regionTextEl);\r\n            this.regionSelectEl = $(regionSelectEl);\r\n            this.config = regions.config;\r\n            delete regions.config;\r\n            this.regions = regions;\r\n            this.disableAction = typeof disableAction === 'undefined' ? 'hide' : disableAction;\r\n            this.clearRegionValueOnDisable = typeof clearRegionValueOnDisable === 'undefined' ?\r\n                false : clearRegionValueOnDisable;\r\n\r\n            if (this.regionSelectEl.options.length <= 1) {\r\n                this.update();\r\n            } else {\r\n                this.lastCountryId = this.countryEl.value;\r\n            }\r\n\r\n            this.countryEl.changeUpdater = this.update.bind(this);\r\n\r\n            Event.observe(this.countryEl, 'change', this.update.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _checkRegionRequired: function () {\r\n            var label, wildCard, elements, that, regionRequired;\r\n\r\n            if (!this.isRegionRequired) {\r\n                return;\r\n            }\r\n\r\n            elements = [this.regionTextEl, this.regionSelectEl];\r\n            that = this;\r\n\r\n            if (typeof this.config == 'undefined') {\r\n                return;\r\n            }\r\n            regionRequired = this.config['regions_required'].indexOf(this.countryEl.value) >= 0;\r\n\r\n            elements.each(function (currentElement) {\r\n                var form, validationInstance, field, topElement;\r\n\r\n                if (!currentElement) {\r\n                    return;\r\n                }\r\n                form = currentElement.form;\r\n                validationInstance = form ? jQuery(form).data('validation') : null;\r\n                field = currentElement.up('.field') || new Element('div');\r\n\r\n                if (validationInstance) {\r\n                    validationInstance.clearError(currentElement);\r\n                }\r\n                label = $$('label[for=\"' + currentElement.id + '\"]')[0];\r\n\r\n                if (label) {\r\n                    wildCard = label.down('em') || label.down('span.required');\r\n                    topElement = label.up('tr') || label.up('li');\r\n\r\n                    if (!that.config['show_all_regions'] && topElement) {\r\n                        if (regionRequired) {\r\n                            topElement.show();\r\n                        } else {\r\n                            topElement.hide();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (label && wildCard) {\r\n                    if (!regionRequired) {\r\n                        wildCard.hide();\r\n                    } else {\r\n                        wildCard.show();\r\n                    }\r\n                }\r\n\r\n                //compute the need for the required fields\r\n                if (!regionRequired || !currentElement.visible()) {\r\n                    if (field.hasClassName('required')) {\r\n                        field.removeClassName('required');\r\n                    }\r\n\r\n                    if (currentElement.hasClassName('required-entry')) {\r\n                        currentElement.removeClassName('required-entry');\r\n                    }\r\n\r\n                    if (currentElement.tagName.toLowerCase() == 'select' && //eslint-disable-line eqeqeq\r\n                        currentElement.hasClassName('validate-select')\r\n                    ) {\r\n                        currentElement.removeClassName('validate-select');\r\n                    }\r\n                } else {\r\n                    if (!field.hasClassName('required')) {\r\n                        field.addClassName('required');\r\n                    }\r\n\r\n                    if (!currentElement.hasClassName('required-entry')) {\r\n                        currentElement.addClassName('required-entry');\r\n                    }\r\n\r\n                    if (currentElement.tagName.toLowerCase() == 'select' && //eslint-disable-line eqeqeq\r\n                        !currentElement.hasClassName('validate-select')\r\n                    ) {\r\n                        currentElement.addClassName('validate-select');\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Disable region validation.\r\n         */\r\n        disableRegionValidation: function () {\r\n            this.isRegionRequired = false;\r\n        },\r\n\r\n        /**\r\n         * Update.\r\n         */\r\n        update: function () {\r\n            var option, region, def, regionId;\r\n\r\n            if (this.regions[this.countryEl.value]) {\r\n                if (this.lastCountryId != this.countryEl.value) { //eslint-disable-line eqeqeq\r\n                    def = this.regionSelectEl.getAttribute('defaultValue');\r\n\r\n                    if (this.regionTextEl) {\r\n                        if (!def) {\r\n                            def = this.regionTextEl.value.toLowerCase();\r\n                        }\r\n                        this.regionTextEl.value = '';\r\n                    }\r\n\r\n                    this.regionSelectEl.options.length = 1;\r\n\r\n                    for (regionId in this.regions[this.countryEl.value]) { //eslint-disable-line guard-for-in\r\n                        region = this.regions[this.countryEl.value][regionId];\r\n\r\n                        option = document.createElement('OPTION');\r\n                        option.value = regionId;\r\n                        option.text = region.name.stripTags();\r\n                        option.title = region.name;\r\n\r\n                        if (this.regionSelectEl.options.add) {\r\n                            this.regionSelectEl.options.add(option);\r\n                        } else {\r\n                            this.regionSelectEl.appendChild(option);\r\n                        }\r\n\r\n                        if (regionId == def || region.name.toLowerCase() == def || region.code.toLowerCase() == def) { //eslint-disable-line\r\n                            this.regionSelectEl.value = regionId;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.disableAction == 'hide') { //eslint-disable-line eqeqeq\r\n                    if (this.regionTextEl) {\r\n                        this.regionTextEl.style.display = 'none';\r\n                        this.regionTextEl.style.disabled = true;\r\n                    }\r\n                    this.regionSelectEl.style.display = '';\r\n                    this.regionSelectEl.disabled = false;\r\n                } else if (this.disableAction == 'disable') { //eslint-disable-line eqeqeq\r\n                    if (this.regionTextEl) {\r\n                        this.regionTextEl.disabled = true;\r\n                    }\r\n                    this.regionSelectEl.disabled = false;\r\n                }\r\n                this.setMarkDisplay(this.regionSelectEl, true);\r\n\r\n                this.lastCountryId = this.countryEl.value;\r\n            } else {\r\n                if (this.disableAction == 'hide') { //eslint-disable-line eqeqeq\r\n                    if (this.regionTextEl) {\r\n                        this.regionTextEl.style.display = '';\r\n                        this.regionTextEl.style.disabled = false;\r\n                    }\r\n                    this.regionSelectEl.style.display = 'none';\r\n                    this.regionSelectEl.disabled = true;\r\n                } else if (this.disableAction == 'disable') { //eslint-disable-line eqeqeq\r\n                    if (this.regionTextEl) {\r\n                        this.regionTextEl.disabled = false;\r\n                    }\r\n                    this.regionSelectEl.disabled = true;\r\n\r\n                    if (this.clearRegionValueOnDisable) {\r\n                        this.regionSelectEl.value = '';\r\n                    }\r\n                } else if (this.disableAction == 'nullify') { //eslint-disable-line eqeqeq\r\n                    this.regionSelectEl.options.length = 1;\r\n                    this.regionSelectEl.value = '';\r\n                    this.regionSelectEl.selectedIndex = 0;\r\n                    this.lastCountryId = '';\r\n                }\r\n                this.setMarkDisplay(this.regionSelectEl, false);\r\n            }\r\n            varienGlobalEvents.fireEvent('address_country_changed', this.countryEl);\r\n            this._checkRegionRequired();\r\n        },\r\n\r\n        /**\r\n         * @param {HTMLElement} elem\r\n         * @param {*} display\r\n         */\r\n        setMarkDisplay: function (elem, display) {\r\n            var marks;\r\n\r\n            if (elem.parentNode.parentNode) {\r\n                marks = Element.select(elem.parentNode.parentNode, '.required');\r\n\r\n                if (marks[0]) {\r\n                    display ? marks[0].show() : marks[0].hide();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    window.regionUpdater = RegionUpdater;\r\n\r\n    /**\r\n     * Fix errorrs in IE\r\n     */\r\n    Event.pointerX = function (event) {\r\n        try {\r\n            return event.pageX || (event.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft)); //eslint-disable-line\r\n        }\r\n        catch (e) {}\r\n    };\r\n\r\n    /**\r\n     * @param {jQuery.Event} event\r\n     * @return {*}\r\n     */\r\n    Event.pointerY = function (event) {\r\n        try {\r\n            return event.pageY || (event.clientY + (document.documentElement.scrollTop || document.body.scrollTop)); //eslint-disable-line\r\n        }\r\n        catch (e) {}\r\n    };\r\n\r\n    /**\r\n     * Observer that watches for dependent form elements\r\n     * If an element depends on 1 or more of other elements,\r\n     * it should show up only when all of them gain specified values\r\n     */\r\n    window.FormElementDependenceController = Class.create();\r\n    FormElementDependenceController.prototype = {\r\n        /**\r\n         * Structure of elements: {\r\n         *     'id_of_dependent_element' : {\r\n         *         'id_of_master_element_1' : 'reference_value',\r\n         *         'id_of_master_element_2' : 'reference_value'\r\n         *         'id_of_master_element_3' : ['reference_value1', 'reference_value2']\r\n         *         ...\r\n         *     }\r\n         * }\r\n         * @param {Object} elementsMap\r\n         * @param {Object} config\r\n         */\r\n        initialize: function (elementsMap, config) {\r\n            var idTo, idFrom, values, fromId, radioFrom;\r\n\r\n            if (config) {\r\n                this._config = jQuery.extend(this._config, config);\r\n            }\r\n\r\n            for (idTo in elementsMap) { //eslint-disable-line guard-for-in\r\n                for (idFrom in elementsMap[idTo]) { //eslint-disable-line guard-for-in\r\n                    if ($(idFrom)) {\r\n                        Event.observe(\r\n                            $(idFrom),\r\n                            'change',\r\n                            this.trackChange.bindAsEventListener(this, idTo, elementsMap[idTo])\r\n                        );\r\n                    } else {\r\n                        // Check if radio button\r\n                        values = elementsMap[idTo][idFrom].values;\r\n                        fromId = $(idFrom + values[0]);\r\n                        radioFrom = fromId ? $$('[name=\"' + fromId.name + '\"]') : false;\r\n\r\n                        if (radioFrom) {\r\n                            radioFrom.invoke(\r\n                                'on',\r\n                                'change',\r\n                                this.trackChange.bindAsEventListener(this, idTo, elementsMap[idTo])\r\n                            );\r\n                        }\r\n                    }\r\n                    this.trackChange(null, idTo, elementsMap[idTo]);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Misc. config options\r\n         * Keys are underscored intentionally\r\n         */\r\n        _config: {\r\n            'levels_up': 1 // how many levels up to travel when toggling element\r\n        },\r\n\r\n        /**\r\n         * Define whether target element should be toggled and show/hide its row\r\n         *\r\n         * @param {Object} e - event\r\n         * @param {String} idTo - id of target element\r\n         * @param {Object} valuesFrom - ids of master elements and reference values\r\n         * @return\r\n         */\r\n        trackChange: function (e, idTo, valuesFrom) {\r\n            // define whether the target should show up\r\n            var shouldShowUp = true,\r\n                idFrom, from, values, isInArray, isNegative, headElement, isInheritCheckboxChecked, target, inputs,\r\n                isAnInputOrSelect, currentConfig, rowElement, fromId, radioFrom;\r\n\r\n            for (idFrom in valuesFrom) { //eslint-disable-line guard-for-in\r\n                from = $(idFrom);\r\n\r\n                if (from) {\r\n                    values = valuesFrom[idFrom].values;\r\n                    isInArray = values.indexOf(from.value) != -1; //eslint-disable-line\r\n                    isNegative = valuesFrom[idFrom].negative;\r\n\r\n                    if (!from || isInArray && isNegative || !isInArray && !isNegative) {\r\n                        shouldShowUp = false;\r\n                    }\r\n                // Check if radio button\r\n                } else {\r\n                    values = valuesFrom[idFrom].values;\r\n                    fromId = $(idFrom + values[0]);\r\n\r\n                    if (fromId) {\r\n                        radioFrom = $$('[name=\"' + fromId.name + '\"]:checked');\r\n                        isInArray = radioFrom.length > 0 && values.indexOf(radioFrom[0].value) !== -1;\r\n                        isNegative = valuesFrom[idFrom].negative;\r\n\r\n                        if (!radioFrom || isInArray && isNegative || !isInArray && !isNegative) {\r\n                            shouldShowUp = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // toggle target row\r\n            headElement = $(idTo + '-head');\r\n            isInheritCheckboxChecked = $(idTo + '_inherit') && $(idTo + '_inherit').checked;\r\n            target = $(idTo);\r\n\r\n            // Target won't always exist (for example, if field type is \"label\")\r\n            if (target) {\r\n                inputs = target.up(this._config['levels_up']).select('input', 'select', 'td');\r\n                isAnInputOrSelect = ['input', 'select'].indexOf(target.tagName.toLowerCase()) != -1; //eslint-disable-line\r\n\r\n                if (target.type === 'fieldset') {\r\n                    inputs = target.select('input', 'select', 'td');\r\n                }\r\n            } else {\r\n                inputs = false;\r\n                isAnInputOrSelect = false;\r\n            }\r\n\r\n            if (shouldShowUp) {\r\n                currentConfig = this._config;\r\n\r\n                if (inputs) {\r\n                    inputs.each(function (item) {\r\n                        // don't touch hidden inputs (and Use Default inputs too), bc they may have custom logic\r\n                        if ((!item.type || item.type != 'hidden') && !($(item.id + '_inherit') && $(item.id + '_inherit').checked) && //eslint-disable-line\r\n                            !(currentConfig['can_edit_price'] != undefined && !currentConfig['can_edit_price']) //eslint-disable-line\r\n                        ) {\r\n                            item.disabled = false;\r\n                            jQuery(item).removeClass('ignore-validate');\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (headElement) {\r\n                    headElement.show();\r\n\r\n                    if (headElement.hasClassName('open') && target) {\r\n                        target.show();\r\n                    } else if (target) {\r\n                        target.hide();\r\n                    }\r\n                } else {\r\n                    if (target) {\r\n                        target.show();\r\n                    }\r\n\r\n                    if (isAnInputOrSelect && !isInheritCheckboxChecked) {\r\n                        if (target) {\r\n                            if (target.getAttribute('readonly')) {\r\n                                target.disabled = true;\r\n                            } else {\r\n                                target.disabled = false;\r\n                            }\r\n                        }\r\n\r\n                        jQuery('#' + idTo).removeClass('ignore-validate');\r\n                    }\r\n                }\r\n            } else {\r\n                if (inputs) {\r\n                    inputs.each(function (item) {\r\n                        // don't touch hidden inputs (and Use Default inputs too), bc they may have custom logic\r\n                        if ((!item.type || item.type != 'hidden') && //eslint-disable-line eqeqeq\r\n                            !($(item.id + '_inherit') && $(item.id + '_inherit').checked)\r\n                        ) {\r\n                            item.disabled = true;\r\n                            jQuery(item).addClass('ignore-validate');\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (headElement) {\r\n                    headElement.hide();\r\n                }\r\n\r\n                if (target) {\r\n                    target.hide();\r\n                }\r\n\r\n                if (isAnInputOrSelect && !isInheritCheckboxChecked) {\r\n                    if (target) {\r\n                        target.disabled = true;\r\n                    }\r\n                    jQuery('#' + idTo).addClass('ignore-validate');\r\n                }\r\n\r\n            }\r\n            rowElement = $('row_' + idTo);\r\n\r\n            if (rowElement == undefined && target) { //eslint-disable-line eqeqeq\r\n                rowElement = target.up(this._config['levels_up']);\r\n\r\n                if (target.type === 'fieldset') {\r\n                    rowElement = target;\r\n                }\r\n            }\r\n\r\n            if (rowElement) {\r\n                if (shouldShowUp) {\r\n                    rowElement.show();\r\n                } else {\r\n                    rowElement.hide();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    window.varienWindowOnload = varienWindowOnload;\r\n    window.varienElementMethods = varienElementMethods;\r\n});\r\n","mage/adminhtml/globals.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global setLocation */\r\ndefine([\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/dataPost'\r\n], function (confirm, dataPost) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Set of a temporary methods used to provide\r\n     * backward compatibility with a legacy code.\r\n     */\r\n    window.setLocation = function (url) {\r\n        window.location.href = url;\r\n    };\r\n\r\n    /**\r\n     * Helper for onclick action.\r\n     * @param {String} message\r\n     * @param {String} url\r\n     * @param {Object} postData\r\n     * @returns {Boolean}\r\n     */\r\n    window.deleteConfirm = function (message, url, postData) {\r\n        confirm({\r\n            content: message,\r\n            actions: {\r\n                /**\r\n                 * Confirm action.\r\n                 */\r\n                confirm: function () {\r\n                    if (postData !== undefined) {\r\n                        postData.action = url;\r\n                        dataPost().postData(postData);\r\n                    } else {\r\n                        setLocation(url);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Helper for onclick action.\r\n     * @param {String} message\r\n     * @param {String} url\r\n     * @returns {Boolean}\r\n     */\r\n    window.confirmSetLocation = window.deleteConfirm;\r\n});\r\n","mage/adminhtml/grid.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n// also depends on a mage/adminhtml/tools.js for Base64 encoding\r\n/* global varienGrid, setLocation, varienGlobalEvents, FORM_KEY,\r\n    BASE_URL, Base64, varienGridMassaction, varienStringArray, serializerController\r\n*/\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/mage',\r\n    'prototype',\r\n    'mage/adminhtml/form',\r\n    'mage/adminhtml/events'\r\n], function (jQuery, mageTemplate, alert, confirm) {\r\n    /**\r\n     * @param {*} grid\r\n     * @param {*} event\r\n     */\r\n    function openGridRow(grid, event) {\r\n        var element = Event.findElement(event, 'tr');\r\n\r\n        if (['a', 'input', 'select', 'option'].indexOf(Event.element(event).tagName.toLowerCase()) !== -1) {\r\n            return;\r\n        }\r\n\r\n        if (element.title) {\r\n            setLocation(element.title);\r\n        }\r\n    }\r\n    window.openGridRow = openGridRow;\r\n\r\n    window.varienGrid = new Class.create();\r\n\r\n    varienGrid.prototype = {\r\n        /**\r\n         * @param {String} containerId\r\n         * @param {String} url\r\n         * @param {*} pageVar\r\n         * @param {*} sortVar\r\n         * @param {*} dirVar\r\n         * @param {*} filterVar\r\n         */\r\n        initialize: function (containerId, url, pageVar, sortVar, dirVar, filterVar) {\r\n            this.containerId = containerId;\r\n            jQuery('#' + containerId).data('gridObject', this);\r\n            this.url = url;\r\n            this.pageVar = pageVar || false;\r\n            this.sortVar = sortVar || false;\r\n            this.dirVar = dirVar || false;\r\n            this.filterVar = filterVar || false;\r\n            this.tableSufix = '_table';\r\n            this.useAjax = false;\r\n            this.rowClickCallback = false;\r\n            this.checkboxCheckCallback = false;\r\n            this.preInitCallback = false;\r\n            this.initCallback = false;\r\n            this.initRowCallback = false;\r\n            this.doFilterCallback = false;\r\n            this.sortableUpdateCallback = false;\r\n            this.filterKeyPressCallback = false;\r\n\r\n            this.reloadParams = false;\r\n\r\n            this.trOnMouseOver = this.rowMouseOver.bindAsEventListener(this);\r\n            this.trOnMouseOut = this.rowMouseOut.bindAsEventListener(this);\r\n            this.trOnClick = this.rowMouseClick.bindAsEventListener(this);\r\n            this.trOnDblClick = this.rowMouseDblClick.bindAsEventListener(this);\r\n            this.trOnKeyPress = this.keyPress.bindAsEventListener(this);\r\n\r\n            this.thLinkOnClick = this.doSort.bindAsEventListener(this);\r\n            this.initGrid();\r\n        },\r\n\r\n        /**\r\n         * Init grid.\r\n         */\r\n        initGrid: function () {\r\n            var row, columns, col;\r\n\r\n            if (this.preInitCallback) {\r\n                this.preInitCallback(this);\r\n            }\r\n\r\n            if ($(this.containerId + this.tableSufix)) {\r\n                this.rows = $$('#' + this.containerId + this.tableSufix + ' tbody tr');\r\n\r\n                for (row = 0; row < this.rows.length; row++) {\r\n                    if (row % 2 == 0) { //eslint-disable-line eqeqeq, max-depth\r\n                        Element.addClassName(this.rows[row], 'even');\r\n                    }\r\n\r\n                    Event.observe(this.rows[row], 'mouseover', this.trOnMouseOver);\r\n                    Event.observe(this.rows[row], 'mouseout', this.trOnMouseOut);\r\n                    Event.observe(this.rows[row], 'click', this.trOnClick);\r\n                    Event.observe(this.rows[row], 'dblclick', this.trOnDblClick);\r\n                }\r\n            }\r\n\r\n            if (this.sortVar && this.dirVar) {\r\n                columns = $$('#' + this.containerId + this.tableSufix + ' thead [data-sort]');\r\n\r\n                for (col = 0; col < columns.length; col++) {\r\n                    Event.observe(columns[col], 'click', this.thLinkOnClick);\r\n                }\r\n            }\r\n            this.bindFilterFields();\r\n            this.bindFieldsChange();\r\n\r\n            if (this.initCallback) {\r\n                try {\r\n                    this.initCallback(this);\r\n                }\r\n                catch (e) {\r\n                    if (window.console) { //eslint-disable-line max-depth\r\n                        console.log(e);\r\n                    }\r\n                }\r\n            }\r\n            jQuery('#' + this.containerId).trigger('gridinit', this);\r\n        },\r\n\r\n        /**\r\n         * Init grid ajax.\r\n         */\r\n        initGridAjax: function () {\r\n            this.initGrid();\r\n            this.initGridRows();\r\n        },\r\n\r\n        /**\r\n         * Init grid rows.\r\n         */\r\n        initGridRows: function () {\r\n            var row;\r\n\r\n            if (this.initRowCallback) {\r\n                for (row = 0; row < this.rows.length; row++) {\r\n                    try { //eslint-disable-line max-depth\r\n                        this.initRowCallback(this, this.rows[row]);\r\n                    } catch (e) {\r\n                        if (window.console) { //eslint-disable-line max-depth\r\n                            console.log(e);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} event\r\n         */\r\n        rowMouseOver: function (event) {\r\n            var element = Event.findElement(event, 'tr');\r\n\r\n            if (!element.title) {\r\n                return;\r\n            }\r\n\r\n            Element.addClassName(element, 'on-mouse');\r\n\r\n            if (!Element.hasClassName('_clickable') && (this.rowClickCallback !== openGridRow || element.title)) {\r\n                if (element.title) {\r\n                    Element.addClassName(element, '_clickable');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} event\r\n         */\r\n        rowMouseOut: function (event) {\r\n            var element = Event.findElement(event, 'tr');\r\n\r\n            Element.removeClassName(element, 'on-mouse');\r\n        },\r\n\r\n        /**\r\n         * @param {*} event\r\n         */\r\n        rowMouseClick: function (event) {\r\n            if (this.rowClickCallback) {\r\n                try {\r\n                    this.rowClickCallback(this, event);\r\n                }\r\n                catch (e) {\r\n                }\r\n            }\r\n            varienGlobalEvents.fireEvent('gridRowClick', event);\r\n        },\r\n\r\n        /**\r\n         * @param {*} event\r\n         */\r\n        rowMouseDblClick: function (event) {\r\n            varienGlobalEvents.fireEvent('gridRowDblClick', event);\r\n        },\r\n\r\n        /**\r\n         * Key press.\r\n         */\r\n        keyPress: function () {},\r\n\r\n        /**\r\n         * @param {*} event\r\n         * @return {Boolean}\r\n         */\r\n        doSort: function (event) {\r\n            var element = Event.findElement(event, 'th');\r\n\r\n            if (element.readAttribute('data-sort') && element.readAttribute('data-direction')) {\r\n                this.addVarToUrl(this.sortVar, element.readAttribute('data-sort'));\r\n                this.addVarToUrl(this.dirVar, element.readAttribute('data-direction'));\r\n                this.reload(this.url);\r\n            }\r\n            Event.stop(event);\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        loadByElement: function (element) {\r\n            if (element && element.name) {\r\n                this.reload(this.addVarToUrl(element.name, element.value));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} data\r\n         * @param {*} textStatus\r\n         * @param {*} transport\r\n         * @private\r\n         */\r\n        _onAjaxSeccess: function (data, textStatus, transport) {\r\n            var responseText, response, divId;\r\n\r\n            /* eslint-disable max-depth */\r\n            try {\r\n                responseText = transport.responseText;\r\n\r\n                if (transport.responseText.isJSON()) {\r\n                    response = transport.responseText.evalJSON();\r\n\r\n                    if (response.error) {\r\n                        alert({\r\n                            content: response.message\r\n                        });\r\n                    }\r\n\r\n                    if (response.ajaxExpired && response.ajaxRedirect) {\r\n                        setLocation(response.ajaxRedirect);\r\n                    }\r\n                } else {\r\n\r\n                    /*eslint-disable max-len*/\r\n                    /**\r\n                     * For IE <= 7.\r\n                     * If there are two elements, and first has name, that equals id of second.\r\n                     * In this case, IE will choose one that is above\r\n                     *\r\n                     * @see https://prototype.lighthouseapp.com/projects/8886/tickets/994-id-selector-finds-elements-by-name-attribute-in-ie7\r\n                     */\r\n\r\n                    /*eslint-enable max-len*/\r\n                    divId = $(this.containerId);\r\n\r\n                    if (divId.id == this.containerId) { //eslint-disable-line eqeqeq\r\n                        divId.update(responseText);\r\n                    } else {\r\n                        $$('div[id=\"' + this.containerId + '\"]')[0].update(responseText);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                divId = $(this.containerId);\r\n\r\n                if (divId.id == this.containerId) { //eslint-disable-line eqeqeq\r\n                    divId.update(responseText);\r\n                } else {\r\n                    $$('div[id=\"' + this.containerId + '\"]')[0].update(responseText);\r\n                }\r\n            }\r\n\r\n            /* eslint-enable max-depth */\r\n            jQuery('#' + this.containerId).trigger('contentUpdated');\r\n        },\r\n\r\n        /**\r\n         * @param {*} url\r\n         * @param {Function} onSuccessCallback\r\n         * @return {*}\r\n         */\r\n        reload: function (url, onSuccessCallback) {\r\n            var ajaxSettings, ajaxRequest;\r\n\r\n            this.reloadParams = this.reloadParams || {};\r\n            this.reloadParams['form_key'] = FORM_KEY;\r\n            url = url || this.url;\r\n\r\n            if (this.useAjax) {\r\n                ajaxSettings = {\r\n                    url: url + (url.match(new RegExp('\\\\?')) ? '&ajax=true' : '?ajax=true'),\r\n                    showLoader: true,\r\n                    method: 'post',\r\n                    context: jQuery('#' + this.containerId),\r\n                    data: this.reloadParams,\r\n                    error: this._processFailure.bind(this),\r\n                    complete: this.initGridAjax.bind(this),\r\n                    dataType: 'html',\r\n\r\n                    /**\r\n                     * Success callback.\r\n                     */\r\n                    success: function (data, textStatus, transport) {\r\n                        this._onAjaxSeccess(data, textStatus, transport);\r\n\r\n                        if (onSuccessCallback && typeof onSuccessCallback === 'function') {\r\n                            // execute the callback, passing parameters as necessary\r\n                            onSuccessCallback();\r\n                        }\r\n                    }.bind(this)\r\n                };\r\n                jQuery('#' + this.containerId).trigger('gridajaxsettings', ajaxSettings);\r\n                ajaxRequest = jQuery.ajax(ajaxSettings);\r\n                jQuery('#' + this.containerId).trigger('gridajax', ajaxRequest);\r\n\r\n                return ajaxRequest;\r\n            }\r\n\r\n            if (this.reloadParams) {\r\n                $H(this.reloadParams).each(function (pair) {\r\n                    url = this.addVarToUrl(pair.key, pair.value);\r\n                }.bind(this));\r\n            }\r\n            location.href = url;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _processFailure: function () {\r\n            location.href = BASE_URL;\r\n        },\r\n\r\n        /**\r\n         * @param {*} url\r\n         * @param {*} varName\r\n         * @param {*} varValue\r\n         * @return {String|*}\r\n         * @private\r\n         */\r\n        _addVarToUrl: function (url, varName, varValue) {\r\n            var re = new RegExp('\\/(' + varName + '\\/.*?\\/)'),\r\n                parts = url.split(new RegExp('\\\\?'));\r\n\r\n            url = parts[0].replace(re, '/');\r\n            url += varName + '/' + varValue + '/';\r\n\r\n            if (parts.size() > 1) {\r\n                url += '?' + parts[1];\r\n            }\r\n\r\n            return url;\r\n        },\r\n\r\n        /**\r\n         * Builds the form with fields containing the and submits\r\n         *\r\n         * @param {String} url\r\n         * @param {String} varName\r\n         * @param {String} varValue\r\n         * @private\r\n         */\r\n        _buildFormAndSubmit: function (url, varName, varValue) {\r\n            var re = new RegExp('\\/(' + varName + '\\/.*?\\/)'),\r\n                parts = url.split(new RegExp('\\\\?')),\r\n                form = jQuery('<form/>'),\r\n                inputProps = [\r\n                    {\r\n                        name: varName,\r\n                        value: varValue\r\n                    },\r\n                    {\r\n                        name: 'form_key',\r\n                        value: window.FORM_KEY\r\n                    }\r\n                ],\r\n                input;\r\n\r\n            url = parts[0].replace(re, '/');\r\n\r\n            if (parts.size() > 1) {\r\n                url += '?' + parts[1];\r\n            }\r\n\r\n            form.attr('action', url);\r\n            form.attr('method', 'POST');\r\n\r\n            inputProps.forEach(function (item) {\r\n                input = jQuery('<input/>');\r\n                input.attr('name', item.name);\r\n                input.attr('type', 'hidden');\r\n                input.val(item.value);\r\n                form.append(input);\r\n            });\r\n            jQuery('[data-container=\"body\"]').append(form);\r\n            form.submit();\r\n            form.remove();\r\n        },\r\n\r\n        /**\r\n         * @param {*} varName\r\n         * @param {*} varValue\r\n         * @return {*|String}\r\n         */\r\n        addVarToUrl: function (varName, varValue) {\r\n            this.url = this._addVarToUrl(this.url, varName, varValue);\r\n\r\n            return this.url;\r\n        },\r\n\r\n        /**\r\n         * Do export.\r\n         */\r\n        doExport: function () {\r\n            var exportUrl;\r\n\r\n            if ($(this.containerId + '_export')) {\r\n                exportUrl = $(this.containerId + '_export').value;\r\n\r\n                if (this.massaction && this.massaction.checkedString) {\r\n                    this._buildFormAndSubmit(\r\n                        exportUrl,\r\n                        this.massaction.formFieldNameInternal,\r\n                        this.massaction.checkedString\r\n                    );\r\n                } else {\r\n                    location.href = exportUrl;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind filter fields.\r\n         */\r\n        bindFilterFields: function () {\r\n            var filters = $$(\r\n                    '#' + this.containerId + ' [data-role=\"filter-form\"] input',\r\n                    '#' + this.containerId + ' [data-role=\"filter-form\"] select'\r\n                ),\r\n                i;\r\n\r\n            for (i = 0; i < filters.length; i++) {\r\n                Event.observe(filters[i], 'keypress', this.filterKeyPress.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind field change.\r\n         */\r\n        bindFieldsChange: function () {\r\n            var dataElements, i;\r\n\r\n            if (!$(this.containerId)) {\r\n                return;\r\n            }\r\n            //var dataElements = $(this.containerId+this.tableSufix).down('.data tbody').select('input', 'select');\r\n            dataElements = $(this.containerId + this.tableSufix).down('tbody').select('input', 'select');\r\n\r\n            for (i = 0; i < dataElements.length; i++) {\r\n                Event.observe(dataElements[i], 'change', dataElements[i].setHasChanges.bind(dataElements[i]));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind sortable.\r\n         */\r\n        bindSortable: function () {\r\n            if (jQuery('#' + this.containerId).find('.draggable-handle').length) {\r\n                jQuery('#' + this.containerId).find('tbody').sortable({\r\n                    axis: 'y',\r\n                    handle: '.draggable-handle',\r\n\r\n                    /**\r\n                     * @param {*} event\r\n                     * @param {*} ui\r\n                     * @return {*}\r\n                     */\r\n                    helper: function (event, ui) {\r\n                        ui.children().each(function () {\r\n                            jQuery(this).width(jQuery(this).width());\r\n                        });\r\n\r\n                        return ui;\r\n                    },\r\n                    update: this.sortableUpdateCallback ? this.sortableUpdateCallback : function () {},\r\n                    tolerance: 'pointer'\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} event\r\n         */\r\n        filterKeyPress: function (event) {\r\n            if (event.keyCode == Event.KEY_RETURN) { //eslint-disable-line eqeqeq\r\n                this.doFilter();\r\n            }\r\n\r\n            if (this.filterKeyPressCallback) {\r\n                this.filterKeyPressCallback(this, event);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Function} callback\r\n         */\r\n        doFilter: function (callback) {\r\n            var filters = $$(\r\n                    '#' + this.containerId + ' [data-role=\"filter-form\"] input',\r\n                    '#' + this.containerId + ' [data-role=\"filter-form\"] select'\r\n                ),\r\n                elements = [],\r\n                i;\r\n\r\n            for (i in filters) {\r\n                if (filters[i].value && filters[i].value.length) {\r\n                    elements.push(filters[i]);\r\n                }\r\n            }\r\n\r\n            if (!this.doFilterCallback || this.doFilterCallback && this.doFilterCallback()) {\r\n                this.reload(\r\n                    this.addVarToUrl(this.filterVar, Base64.encode(Form.serializeElements(elements))),\r\n                    callback\r\n                );\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Function} callback\r\n         */\r\n        resetFilter: function (callback) {\r\n            this.reload(this.addVarToUrl(this.filterVar, ''), callback);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        checkCheckboxes: function (element) {\r\n            var elements = Element.select($(this.containerId), 'input[name=\"' + element.name + '\"]'),\r\n                i;\r\n\r\n            for (i = 0; i < elements.length; i++) {\r\n                this.setCheckboxChecked(elements[i], element.checked);\r\n            }\r\n\r\n            /*eslint-enable no-undef*/\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {*} checked\r\n         */\r\n        setCheckboxChecked: function (element, checked) {\r\n            element.checked = checked;\r\n            jQuery(element).trigger('change');\r\n            element.setHasChanges({});\r\n\r\n            if (this.checkboxCheckCallback) {\r\n                this.checkboxCheckCallback(this, element, checked);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} event\r\n         * @param {*} lastId\r\n         */\r\n        inputPage: function (event, lastId) {\r\n            var element = Event.element(event),\r\n                keyCode = event.keyCode || event.which,\r\n                enteredValue = parseInt(element.value, 10),\r\n                pageId = parseInt(lastId, 10);\r\n\r\n            if (keyCode == Event.KEY_RETURN) { //eslint-disable-line eqeqeq\r\n                if (enteredValue > pageId) {\r\n                    this.setPage(pageId);\r\n                } else {\r\n                    this.setPage(enteredValue);\r\n                }\r\n            }\r\n\r\n            /*if(keyCode>47 && keyCode<58){\r\n\r\n             }\r\n             else{\r\n             Event.stop(event);\r\n             }*/\r\n        },\r\n\r\n        /**\r\n         * @param {*} pageNumber\r\n         */\r\n        setPage: function (pageNumber) {\r\n            this.reload(this.addVarToUrl(this.pageVar, pageNumber));\r\n        }\r\n    };\r\n\r\n    window.varienGridMassaction = Class.create();\r\n    varienGridMassaction.prototype = {\r\n        /* Predefined vars */\r\n        checkedValues: $H({}),\r\n        checkedString: '',\r\n        oldCallbacks: {},\r\n        errorText: '',\r\n        items: {},\r\n        gridIds: [],\r\n        useSelectAll: false,\r\n        currentItem: false,\r\n        lastChecked: {\r\n            left: false,\r\n            top: false,\r\n            checkbox: false\r\n        },\r\n        fieldTemplate: mageTemplate('<input type=\"hidden\" name=\"<%- name %>\" value=\"<%- value %>\" />'),\r\n\r\n        /**\r\n         * @param {*} containerId\r\n         * @param {*} grid\r\n         * @param {*} checkedValues\r\n         * @param {*} formFieldNameInternal\r\n         * @param {*} formFieldName\r\n         */\r\n        initialize: function (containerId, grid, checkedValues, formFieldNameInternal, formFieldName) {\r\n            this.setOldCallback('row_click', grid.rowClickCallback);\r\n            this.setOldCallback('init',      grid.initCallback);\r\n            this.setOldCallback('init_row',  grid.initRowCallback);\r\n            this.setOldCallback('pre_init',  grid.preInitCallback);\r\n\r\n            this.useAjax        = false;\r\n            this.grid           = grid;\r\n            this.grid.massaction = this;\r\n            this.containerId    = containerId;\r\n            this.initMassactionElements();\r\n\r\n            this.checkedString          = checkedValues;\r\n            this.formFieldName          = formFieldName;\r\n            this.formFieldNameInternal  = formFieldNameInternal;\r\n\r\n            this.grid.initCallback      = this.onGridInit.bind(this);\r\n            this.grid.preInitCallback   = this.onGridPreInit.bind(this);\r\n            this.grid.initRowCallback   = this.onGridRowInit.bind(this);\r\n            this.grid.rowClickCallback  = this.onGridRowClick.bind(this);\r\n            this.initCheckboxes();\r\n            this.checkCheckboxes();\r\n        },\r\n\r\n        /**\r\n         * @param {*} flag\r\n         */\r\n        setUseAjax: function (flag) {\r\n            this.useAjax = flag;\r\n        },\r\n\r\n        /**\r\n         * @param {*} flag\r\n         */\r\n        setUseSelectAll: function (flag) {\r\n            this.useSelectAll = flag;\r\n        },\r\n\r\n        /**\r\n         * Init massaction elements.\r\n         */\r\n        initMassactionElements: function () {\r\n            this.container      = $(this.containerId);\r\n            this.multiselect    = $(this.containerId + '-mass-select');\r\n            this.count          = $(this.containerId + '-count');\r\n            this.formHiddens    = $(this.containerId + '-form-hiddens');\r\n            this.formAdditional = $(this.containerId + '-form-additional');\r\n            this.select         = $(this.containerId + '-select');\r\n            this.form           = this.prepareForm();\r\n            jQuery(this.form).mage('validation');\r\n            this.select.observe('change', this.onSelectChange.bindAsEventListener(this));\r\n            this.lastChecked    = {\r\n                left: false,\r\n                top: false,\r\n                checkbox: false\r\n            };\r\n            this.select.addClassName(this.select.value ? '_selected' : '');\r\n            this.initMassSelect();\r\n        },\r\n\r\n        /**\r\n         * @return {jQuery|*|HTMLElement}\r\n         */\r\n        prepareForm: function () {\r\n            var form = $(this.containerId + '-form'),\r\n                formPlace = null,\r\n                formElement = this.formHiddens || this.formAdditional;\r\n\r\n            if (!formElement) {\r\n                formElement = this.container.getElementsByTagName('button')[0];\r\n                formElement && formElement.parentNode;\r\n            }\r\n\r\n            if (!form && formElement) {\r\n                /* fix problem with rendering form in FF through innerHTML property */\r\n                form = document.createElement('form');\r\n                form.setAttribute('method', 'post');\r\n                form.setAttribute('action', '');\r\n                form.id = this.containerId + '-form';\r\n                formPlace = formElement.parentNode;\r\n                formPlace.parentNode.appendChild(form);\r\n                form.appendChild(formPlace);\r\n            }\r\n\r\n            return form;\r\n        },\r\n\r\n        /**\r\n         * @param {Array} gridIds\r\n         */\r\n        setGridIds: function (gridIds) {\r\n            this.gridIds = gridIds;\r\n            this.updateCount();\r\n        },\r\n\r\n        /**\r\n         * @return {Array}\r\n         */\r\n        getGridIds: function () {\r\n            return this.gridIds;\r\n        },\r\n\r\n        /**\r\n         * @param {*} items\r\n         */\r\n        setItems: function (items) {\r\n            this.items = items;\r\n            this.updateCount();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        getItems: function () {\r\n            return this.items;\r\n        },\r\n\r\n        /**\r\n         * @param {*} itemId\r\n         * @return {*}\r\n         */\r\n        getItem: function (itemId) {\r\n            if (this.items[itemId]) {\r\n                return this.items[itemId];\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @param {String} callbackName\r\n         * @return {Function}\r\n         */\r\n        getOldCallback: function (callbackName) {\r\n            return this.oldCallbacks[callbackName] ? this.oldCallbacks[callbackName] : Prototype.emptyFunction;\r\n        },\r\n\r\n        /**\r\n         * @param {String} callbackName\r\n         * @param {Function} callback\r\n         */\r\n        setOldCallback: function (callbackName, callback) {\r\n            this.oldCallbacks[callbackName] = callback;\r\n        },\r\n\r\n        /**\r\n         * @param {*} grid\r\n         */\r\n        onGridPreInit: function (grid) {\r\n            this.initMassactionElements();\r\n            this.getOldCallback('pre_init')(grid);\r\n        },\r\n\r\n        /**\r\n         * @param {*} grid\r\n         */\r\n        onGridInit: function (grid) {\r\n            this.initCheckboxes();\r\n            this.checkCheckboxes();\r\n            this.updateCount();\r\n            this.getOldCallback('init')(grid);\r\n        },\r\n\r\n        /**\r\n         * @param {*} grid\r\n         * @param {*} row\r\n         */\r\n        onGridRowInit: function (grid, row) {\r\n            this.getOldCallback('init_row')(grid, row);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} evt\r\n         */\r\n        isDisabled: function (evt) {\r\n            var target = jQuery(evt.target),\r\n                tr,\r\n                checkbox;\r\n\r\n            tr = target.is('tr') ? target : target.closest('tr');\r\n            checkbox = tr.find('input[type=\"checkbox\"]');\r\n\r\n            return checkbox.is(':disabled');\r\n        },\r\n\r\n        /**\r\n         * @param {*} grid\r\n         * @param {*} evt\r\n         * @return {*}\r\n         */\r\n        onGridRowClick: function (grid, evt) {\r\n            var tdElement = Event.findElement(evt, 'td'),\r\n                trElement = Event.findElement(evt, 'tr'),\r\n                checkbox, isInput, checked;\r\n\r\n            if (this.isDisabled(evt)) {\r\n                return false;\r\n            }\r\n\r\n            if (!$(tdElement).down('input')) {\r\n                if ($(tdElement).down('a') || $(tdElement).down('select')) {\r\n                    return; //eslint-disable-line\r\n                }\r\n\r\n                if (trElement.title && trElement.title.strip() != '#') { //eslint-disable-line eqeqeq\r\n                    this.getOldCallback('row_click')(grid, evt);\r\n                } else {\r\n                    checkbox = Element.select(trElement, 'input');\r\n                    isInput  = Event.element(evt).tagName == 'input'; //eslint-disable-line eqeqeq\r\n                    checked = isInput ? checkbox[0].checked : !checkbox[0].checked;\r\n\r\n                    if (checked) { //eslint-disable-line max-depth\r\n                        this.checkedString = varienStringArray.add(checkbox[0].value, this.checkedString);\r\n                    } else {\r\n                        this.checkedString = varienStringArray.remove(checkbox[0].value, this.checkedString);\r\n                    }\r\n                    this.grid.setCheckboxChecked(checkbox[0], checked);\r\n                    this.updateCount();\r\n                }\r\n\r\n                return; //eslint-disable-line\r\n            }\r\n\r\n            if (Event.element(evt).isMassactionCheckbox) {\r\n                this.setCheckbox(Event.element(evt));\r\n            } else if (checkbox = this.findCheckbox(evt)) { //eslint-disable-line no-cond-assign\r\n                checkbox.checked = !checkbox.checked;\r\n                jQuery(checkbox).trigger('change');\r\n                this.setCheckbox(checkbox);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} evt\r\n         */\r\n        onSelectChange: function (evt) {\r\n            var item = this.getSelectedItem();\r\n\r\n            if (item) {\r\n                this.formAdditional.update($(this.containerId + '-item-' + item.id + '-block').innerHTML);\r\n                evt.target.addClassName('_selected');\r\n            } else {\r\n                this.formAdditional.update('');\r\n                evt.target.removeClassName('_selected');\r\n            }\r\n            jQuery(this.form).data('validator').resetForm();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} evt\r\n         * @return {*}\r\n         */\r\n        findCheckbox: function (evt) {\r\n            if (['a', 'input', 'select'].indexOf(Event.element(evt).tagName.toLowerCase()) !== -1) {\r\n                return false;\r\n            }\r\n            checkbox = false; //eslint-disable-line no-undef\r\n            Event.findElement(evt, 'tr').select('[data-role=\"select-row\"]').each(function (element) { //eslint-disable-line\r\n                if (element.isMassactionCheckbox) {\r\n                    checkbox = element; //eslint-disable-line no-undef\r\n                }\r\n            });\r\n\r\n            return checkbox; //eslint-disable-line no-undef\r\n        },\r\n\r\n        /**\r\n         * Init checkobox.\r\n         */\r\n        initCheckboxes: function () {\r\n            this.getCheckboxes().each(function (checkbox) { //eslint-disable-line no-extra-bind\r\n                checkbox.isMassactionCheckbox = true; //eslint-disable-line no-undef\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Check checkbox.\r\n         */\r\n        checkCheckboxes: function () {\r\n            this.getCheckboxes().each(function (checkbox) {\r\n                checkbox.checked = varienStringArray.has(checkbox.value, this.checkedString);\r\n                jQuery(checkbox).trigger('change');\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        selectAll: function () {\r\n            this.setCheckedValues(this.useSelectAll ? this.getGridIds() : this.getCheckboxesValuesAsString());\r\n            this.checkCheckboxes();\r\n            this.updateCount();\r\n            this.clearLastChecked();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        unselectAll: function () {\r\n            this.setCheckedValues('');\r\n            this.checkCheckboxes();\r\n            this.updateCount();\r\n            this.clearLastChecked();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        selectVisible: function () {\r\n            this.setCheckedValues(this.getCheckboxesValuesAsString());\r\n            this.checkCheckboxes();\r\n            this.updateCount();\r\n            this.clearLastChecked();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        unselectVisible: function () {\r\n            this.getCheckboxesValues().each(function (key) {\r\n                this.checkedString = varienStringArray.remove(key, this.checkedString);\r\n            }.bind(this));\r\n            this.checkCheckboxes();\r\n            this.updateCount();\r\n            this.clearLastChecked();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @param {*} values\r\n         */\r\n        setCheckedValues: function (values) {\r\n            this.checkedString = values;\r\n        },\r\n\r\n        /**\r\n         * @return {String}\r\n         */\r\n        getCheckedValues: function () {\r\n            return this.checkedString;\r\n        },\r\n\r\n        /**\r\n         * @return {Array}\r\n         */\r\n        getCheckboxes: function () {\r\n            var result = [];\r\n\r\n            this.grid.rows.each(function (row) {\r\n                var checkboxes = row.select('[data-role=\"select-row\"]');\r\n\r\n                checkboxes.each(function (checkbox) {\r\n                    result.push(checkbox);\r\n                });\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @return {Array}\r\n         */\r\n        getCheckboxesValues: function () {\r\n            var result = [];\r\n\r\n            this.getCheckboxes().each(function (checkbox) { //eslint-disable-line no-extra-bind\r\n                result.push(checkbox.value);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @return {String}\r\n         */\r\n        getCheckboxesValuesAsString: function () {\r\n            return this.getCheckboxesValues().join(',');\r\n        },\r\n\r\n        /**\r\n         * @param {Object} checkbox\r\n         */\r\n        setCheckbox: function (checkbox) {\r\n            if (checkbox.checked) {\r\n                this.checkedString = varienStringArray.add(checkbox.value, this.checkedString);\r\n            } else {\r\n                this.checkedString = varienStringArray.remove(checkbox.value, this.checkedString);\r\n            }\r\n            this.updateCount();\r\n        },\r\n\r\n        /**\r\n         * Update count.\r\n         */\r\n        updateCount: function () {\r\n            var checkboxesTotal = varienStringArray.count(\r\n                this.useSelectAll ? this.getGridIds() : this.getCheckboxesValuesAsString()\r\n                ),\r\n                checkboxesChecked = varienStringArray.count(this.checkedString);\r\n\r\n            jQuery('[data-role=\"counter\"]', this.count).html(checkboxesChecked);\r\n\r\n            if (!checkboxesTotal) {\r\n                this.multiselect.addClassName('_disabled');\r\n            } else {\r\n                this.multiselect.removeClassName('_disabled');\r\n            }\r\n\r\n            if (checkboxesChecked == checkboxesTotal && checkboxesTotal != 0) { //eslint-disable-line eqeqeq\r\n                this.count.removeClassName('_empty');\r\n                this.multiselect.addClassName('_checked').removeClassName('_indeterminate');\r\n            } else if (checkboxesChecked == 0) { //eslint-disable-line eqeqeq\r\n                this.count.addClassName('_empty');\r\n                this.multiselect.removeClassName('_checked').removeClassName('_indeterminate');\r\n            } else {\r\n                this.count.removeClassName('_empty');\r\n                this.multiselect.addClassName('_checked').addClassName('_indeterminate');\r\n            }\r\n\r\n            if (!this.grid.reloadParams) {\r\n                this.grid.reloadParams = {};\r\n            }\r\n            this.grid.reloadParams[this.formFieldNameInternal] = this.checkedString;\r\n        },\r\n\r\n        /**\r\n         * @return {*}\r\n         */\r\n        getSelectedItem: function () {\r\n            if (this.getItem(this.select.value)) {\r\n                return this.getItem(this.select.value);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Apply.\r\n         */\r\n        apply: function () {\r\n            var item, fieldName;\r\n\r\n            if (varienStringArray.count(this.checkedString) == 0) { //eslint-disable-line eqeqeq\r\n                alert({\r\n                    content: this.errorText\r\n                });\r\n\r\n                return;\r\n            }\r\n\r\n            item = this.getSelectedItem();\r\n\r\n            if (!item) {\r\n                jQuery(this.form).valid();\r\n\r\n                return;\r\n            }\r\n            this.currentItem = item;\r\n            fieldName = item.field ? item.field : this.formFieldName;\r\n\r\n            if (this.currentItem.confirm) {\r\n                confirm({\r\n                    content: this.currentItem.confirm,\r\n                    actions: {\r\n                        confirm: this.onConfirm.bind(this, fieldName, item)\r\n                    }\r\n                });\r\n            } else {\r\n                this.onConfirm(fieldName, item);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} fieldName\r\n         * @param {*} item\r\n         */\r\n        onConfirm: function (fieldName, item) {\r\n            this.formHiddens.update('');\r\n            new Insertion.Bottom(this.formHiddens, this.fieldTemplate({\r\n                name: fieldName,\r\n                value: this.checkedString\r\n            }));\r\n            new Insertion.Bottom(this.formHiddens, this.fieldTemplate({\r\n                name: 'massaction_prepare_key',\r\n                value: fieldName\r\n            }));\r\n\r\n            if (!jQuery(this.form).valid()) {\r\n                return;\r\n            }\r\n\r\n            if (this.useAjax && item.url) {\r\n                new Ajax.Request(item.url, {\r\n                    'method': 'post',\r\n                    'parameters': this.form.serialize(true),\r\n                    'onComplete': this.onMassactionComplete.bind(this)\r\n                });\r\n            } else if (item.url) {\r\n                this.form.action = item.url;\r\n                this.form.submit();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} transport\r\n         */\r\n        onMassactionComplete: function (transport) {\r\n            var listener;\r\n\r\n            if (this.currentItem.complete) {\r\n                try {\r\n                    listener = this.getListener(this.currentItem.complete) || Prototype.emptyFunction;\r\n                    listener(this.grid, this, transport);\r\n                } catch (e) {}\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} strValue\r\n         * @return {Object}\r\n         */\r\n        getListener: function (strValue) {\r\n            return eval(strValue); //eslint-disable-line no-eval\r\n        },\r\n\r\n        /**\r\n         * Init mass select.\r\n         */\r\n        initMassSelect: function () {\r\n            $$('input[data-role=\"select-row\"]').each(function (element) {\r\n                element.observe('click', this.massSelect.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Clear last checked.\r\n         */\r\n        clearLastChecked: function () {\r\n            this.lastChecked = {\r\n                left: false,\r\n                top: false,\r\n                checkbox: false\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {Object} evt\r\n         */\r\n        massSelect: function (evt) {\r\n            var currentCheckbox, lastCheckbox, start, finish;\r\n\r\n            if (this.lastChecked.left !== false &&\r\n                this.lastChecked.top !== false &&\r\n                evt.button === 0 &&\r\n                evt.shiftKey === true\r\n            ) {\r\n                currentCheckbox = Event.element(evt);\r\n                lastCheckbox = this.lastChecked.checkbox;\r\n\r\n                if (lastCheckbox != currentCheckbox) { //eslint-disable-line eqeqeq\r\n                    start = this.getCheckboxOrder(lastCheckbox);\r\n                    finish = this.getCheckboxOrder(currentCheckbox);\r\n\r\n                    if (start !== false && finish !== false) { //eslint-disable-line max-depth\r\n                        this.selectCheckboxRange(\r\n                            Math.min(start, finish),\r\n                            Math.max(start, finish),\r\n                            currentCheckbox.checked\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.lastChecked = {\r\n                left: Event.element(evt).viewportOffset().left,\r\n                top: Event.element(evt).viewportOffset().top,\r\n                checkbox: Event.element(evt) // \"boundary\" checkbox\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {*} curCheckbox\r\n         * @return {Boolean}\r\n         */\r\n        getCheckboxOrder: function (curCheckbox) {\r\n            var order = false;\r\n\r\n            this.getCheckboxes().each(function (checkbox, key) {\r\n                if (curCheckbox == checkbox) { //eslint-disable-line eqeqeq\r\n                    order = key;\r\n                }\r\n            });\r\n\r\n            return order;\r\n        },\r\n\r\n        /**\r\n         * @param {*} start\r\n         * @param {*} finish\r\n         * @param {*} isChecked\r\n         */\r\n        selectCheckboxRange: function (start, finish, isChecked) {\r\n            this.getCheckboxes().each(function (checkbox, key) {\r\n                if (key >= start && key <= finish) {\r\n                    checkbox.checked = isChecked;\r\n                    this.setCheckbox(checkbox);\r\n                }\r\n            }.bind(this));\r\n        }\r\n    };\r\n\r\n    window.varienGridAction = {\r\n        /**\r\n         * @param {Object} select\r\n         */\r\n        execute: function (select) {\r\n            var config, win;\r\n\r\n            if (!select.value || !select.value.isJSON()) {\r\n                return;\r\n            }\r\n\r\n            config = select.value.evalJSON();\r\n\r\n            if (config.confirm && !window.confirm(config.confirm)) { //eslint-disable-line no-alert\r\n                select.options[0].selected = true;\r\n\r\n                return;\r\n            }\r\n\r\n            if (config.popup) {\r\n                win = window.open(config.href, 'action_window', 'width=500,height=600,resizable=1,scrollbars=1');\r\n                win.focus();\r\n                select.options[0].selected = true;\r\n            } else {\r\n                setLocation(config.href);\r\n            }\r\n        }\r\n    };\r\n\r\n    window.varienStringArray = {\r\n        /**\r\n         * @param {*} str\r\n         * @param {*} haystack\r\n         * @return {*}\r\n         */\r\n        remove: function (str, haystack) {\r\n            haystack = ',' + haystack + ',';\r\n            haystack = haystack.replace(new RegExp(',' + str + ',', 'g'), ',');\r\n\r\n            return this.trimComma(haystack);\r\n        },\r\n\r\n        /**\r\n         * @param {*} str\r\n         * @param {*} haystack\r\n         * @return {*}\r\n         */\r\n        add: function (str, haystack) {\r\n            haystack = ',' + haystack + ',';\r\n\r\n            if (haystack.search(new RegExp(',' + str + ',', 'g'), haystack) === -1) {\r\n                haystack += str + ',';\r\n            }\r\n\r\n            return this.trimComma(haystack);\r\n        },\r\n\r\n        /**\r\n         * @param {*} str\r\n         * @param {*} haystack\r\n         * @return {Boolean}\r\n         */\r\n        has: function (str, haystack) {\r\n            haystack = ',' + haystack + ',';\r\n\r\n            if (haystack.search(new RegExp(',' + str + ',', 'g'), haystack) === -1) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * @param {*} haystack\r\n         * @return {*}\r\n         */\r\n        count: function (haystack) {\r\n            var match;\r\n\r\n            if (typeof haystack != 'string') {\r\n                return 0;\r\n            }\r\n\r\n            /* eslint-disable no-undef, no-cond-assign, eqeqeq */\r\n            if (match = haystack.match(new RegExp(',', 'g'))) {\r\n                return match.length + 1;\r\n            } else if (haystack.length != 0) {\r\n                return 1;\r\n            }\r\n\r\n            /* eslint-enable no-undef, no-cond-assign, eqeqeq */\r\n            return 0;\r\n        },\r\n\r\n        /**\r\n         * @param {*} haystack\r\n         * @param {*} fnc\r\n         */\r\n        each: function (haystack, fnc) {\r\n            var i;\r\n\r\n            haystack = haystack.split(',');\r\n\r\n            for (i = 0; i < haystack.length; i++) {\r\n                fnc(haystack[i]);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {String} string\r\n         * @return {String}\r\n         */\r\n        trimComma: function (string) {\r\n            string = string.replace(new RegExp('^(,+)','i'), '');\r\n            string = string.replace(new RegExp('(,+)$','i'), '');\r\n\r\n            return string;\r\n        }\r\n    };\r\n\r\n    window.serializerController = Class.create();\r\n    serializerController.prototype = {\r\n        oldCallbacks: {},\r\n\r\n        /**\r\n         * @param {*} hiddenDataHolder\r\n         * @param {*} predefinedData\r\n         * @param {*} inputsToManage\r\n         * @param {*} grid\r\n         * @param {*} reloadParamName\r\n         */\r\n        initialize: function (hiddenDataHolder, predefinedData, inputsToManage, grid, reloadParamName) {\r\n            //Grid inputs\r\n            this.tabIndex = 1000;\r\n            this.inputsToManage       = inputsToManage;\r\n            this.multidimensionalMode = inputsToManage.length > 0;\r\n\r\n            //Hash with grid data\r\n            this.gridData             = this.getGridDataHash(predefinedData);\r\n\r\n            //Hidden input data holder\r\n            this.hiddenDataHolder     = $(hiddenDataHolder);\r\n            this.hiddenDataHolder.value = this.serializeObject();\r\n\r\n            this.grid = grid;\r\n\r\n            // Set old callbacks\r\n            this.setOldCallback('row_click', this.grid.rowClickCallback);\r\n            this.setOldCallback('init_row', this.grid.initRowCallback);\r\n            this.setOldCallback('checkbox_check', this.grid.checkboxCheckCallback);\r\n\r\n            //Grid\r\n            this.reloadParamName = reloadParamName;\r\n            this.grid.reloadParams = {};\r\n            this.grid.reloadParams[this.reloadParamName + '[]'] = this.getDataForReloadParam();\r\n            this.grid.rowClickCallback = this.rowClick.bind(this);\r\n            this.grid.initRowCallback = this.rowInit.bind(this);\r\n            this.grid.checkboxCheckCallback = this.registerData.bind(this);\r\n            this.grid.rows.each(this.eachRow.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {String} callbackName\r\n         * @param {Function} callback\r\n         */\r\n        setOldCallback: function (callbackName, callback) {\r\n            this.oldCallbacks[callbackName] = callback;\r\n        },\r\n\r\n        /**\r\n         * @param {String} callbackName\r\n         * @return {Prototype.emptyFunction}\r\n         */\r\n        getOldCallback: function (callbackName) {\r\n            return this.oldCallbacks[callbackName] ? this.oldCallbacks[callbackName] : Prototype.emptyFunction;\r\n        },\r\n\r\n        /**\r\n         * @param {*} grid\r\n         * @param {*} element\r\n         * @param {*} checked\r\n         */\r\n        registerData: function (grid, element, checked) {\r\n            var i;\r\n\r\n            if (this.multidimensionalMode) {\r\n                if (checked) {\r\n                    /*eslint-disable max-depth*/\r\n                    if (element.inputElements) {\r\n                        this.gridData.set(element.value, {});\r\n\r\n                        for (i = 0; i < element.inputElements.length; i++) {\r\n                            element.inputElements[i].disabled = false;\r\n                            this.gridData.get(element.value)[element.inputElements[i].name] =\r\n                                element.inputElements[i].value;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (element.inputElements) {\r\n                        for (i = 0; i < element.inputElements.length; i++) {\r\n                            element.inputElements[i].disabled = true;\r\n                        }\r\n                    }\r\n                    this.gridData.unset(element.value);\r\n                }\r\n            } else {\r\n                if (checked) { //eslint-disable-line no-lonely-if\r\n                    this.gridData.set(element.value, element.value);\r\n                } else {\r\n                    this.gridData.unset(element.value);\r\n                }\r\n            }\r\n\r\n            this.hiddenDataHolder.value = this.serializeObject();\r\n            this.grid.reloadParams = {};\r\n            this.grid.reloadParams[this.reloadParamName + '[]'] = this.getDataForReloadParam();\r\n            this.getOldCallback('checkbox_check')(grid, element, checked);\r\n\r\n            /*eslint-enable max-depth*/\r\n        },\r\n\r\n        /**\r\n         * @param {*} row\r\n         */\r\n        eachRow: function (row) {\r\n            this.rowInit(this.grid, row);\r\n        },\r\n\r\n        /**\r\n         * @param {*} grid\r\n         * @param {*} event\r\n         */\r\n        rowClick: function (grid, event) {\r\n            var trElement = Event.findElement(event, 'tr'),\r\n                isInput   = Event.element(event).tagName == 'INPUT', //eslint-disable-line eqeqeq\r\n                checkbox, checked;\r\n\r\n            if (trElement) {\r\n                checkbox = Element.select(trElement, 'input');\r\n\r\n                if (checkbox[0] && !checkbox[0].disabled) {\r\n                    checked = isInput ? checkbox[0].checked : !checkbox[0].checked;\r\n                    this.grid.setCheckboxChecked(checkbox[0], checked);\r\n                }\r\n            }\r\n            this.getOldCallback('row_click')(grid, event);\r\n        },\r\n\r\n        /**\r\n         * @param {*} event\r\n         */\r\n        inputChange: function (event) {\r\n            var element = Event.element(event);\r\n\r\n            if (element && element.checkboxElement && element.checkboxElement.checked) {\r\n                this.gridData.get(element.checkboxElement.value)[element.name] = element.value;\r\n                this.hiddenDataHolder.value = this.serializeObject();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} grid\r\n         * @param {*} row\r\n         */\r\n        rowInit: function (grid, row) {\r\n            var checkbox, selectors, inputs, i;\r\n\r\n            if (this.multidimensionalMode) {\r\n                checkbox = $(row).select('.checkbox')[0];\r\n                selectors = this.inputsToManage.map(function (name) {\r\n                    return ['input[name=\"' + name + '\"]', 'select[name=\"' + name + '\"]'];\r\n                });\r\n                inputs = $(row).select.apply($(row), selectors.flatten());\r\n\r\n                if (checkbox && inputs.length > 0) {\r\n                    checkbox.inputElements = inputs;\r\n\r\n                    /* eslint-disable max-depth */\r\n                    for (i = 0; i < inputs.length; i++) {\r\n                        inputs[i].checkboxElement = checkbox;\r\n\r\n                        if (this.gridData.get(checkbox.value) && this.gridData.get(checkbox.value)[inputs[i].name]) {\r\n                            inputs[i].value = this.gridData.get(checkbox.value)[inputs[i].name];\r\n                        }\r\n                        inputs[i].disabled = !checkbox.checked;\r\n                        inputs[i].tabIndex = this.tabIndex++;\r\n                        Event.observe(inputs[i], 'keyup', this.inputChange.bind(this));\r\n                        Event.observe(inputs[i], 'change', this.inputChange.bind(this));\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* eslint-enable max-depth */\r\n            this.getOldCallback('init_row')(grid, row);\r\n        },\r\n\r\n        /**\r\n         * Stuff methods.\r\n         *\r\n         * @param {*} _object\r\n         * @return {*}\r\n         */\r\n        getGridDataHash: function (_object) {\r\n            return $H(this.multidimensionalMode ? _object : this.convertArrayToObject(_object));\r\n        },\r\n\r\n        /**\r\n         * @return {*}\r\n         */\r\n        getDataForReloadParam: function () {\r\n            return this.multidimensionalMode ? this.gridData.keys() : this.gridData.values();\r\n        },\r\n\r\n        /**\r\n         * @return {*}\r\n         */\r\n        serializeObject: function () {\r\n            var clone;\r\n\r\n            if (this.multidimensionalMode) {\r\n                clone = this.gridData.clone();\r\n                clone.each(function (pair) {\r\n                    clone.set(pair.key, Base64.encode(Object.toQueryString(pair.value)));\r\n                });\r\n\r\n                return clone.toQueryString();\r\n            }\r\n\r\n            return this.gridData.values().join('&');\r\n        },\r\n\r\n        /**\r\n         * @param {Array} _array\r\n         * @return {Object}\r\n         */\r\n        convertArrayToObject: function (_array) {\r\n            var _object = {},\r\n                i, l;\r\n\r\n            for (i = 0, l = _array.length; i < l; i++) {\r\n                _object[_array[i]] = _array[i];\r\n            }\r\n\r\n            return _object;\r\n        }\r\n    };\r\n});\r\n","mage/adminhtml/wysiwyg/events.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        afterInitialization: 'afterInitialization',\r\n        afterChangeContent: 'afterChangeContent',\r\n        afterUndo: 'afterUndo',\r\n        afterPaste: 'afterPaste',\r\n        beforeSetContent: 'beforeSetContent',\r\n        afterSetContent: 'afterSetContent',\r\n        afterSave: 'afterSave',\r\n        afterOpenFileBrowser: 'afterOpenFileBrowser',\r\n        afterFormSubmit: 'afterFormSubmit',\r\n        afterBlur: 'afterBlur',\r\n        afterFocus: 'afterFocus'\r\n    };\r\n});\r\n","mage/adminhtml/wysiwyg/widget.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global setLocation, Base64, updateElementAtCursor, varienGlobalEvents */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'wysiwygAdapter',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'mage/translate',\r\n    'mage/mage',\r\n    'mage/validation',\r\n    'mage/adminhtml/events',\r\n    'prototype',\r\n    'Magento_Ui/js/modal/modal'\r\n], function (jQuery, wysiwyg, alert) {\r\n    var widgetTools = {\r\n\r\n        /**\r\n         * Sets the widget to be active and is the scope of the slide out if the value is set\r\n         */\r\n        activeSelectedNode: null,\r\n        editMode: false,\r\n        cursorLocation: 0,\r\n\r\n        /**\r\n         * Set active selected node.\r\n         *\r\n         * @param {Object} activeSelectedNode\r\n         */\r\n        setActiveSelectedNode: function (activeSelectedNode) {\r\n            this.activeSelectedNode = activeSelectedNode;\r\n        },\r\n\r\n        /**\r\n         * Get active selected node.\r\n         *\r\n         * @returns {null}\r\n         */\r\n        getActiveSelectedNode: function () {\r\n            return this.activeSelectedNode;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Boolean} editMode\r\n         */\r\n        setEditMode: function (editMode) {\r\n            this.editMode = editMode;\r\n        },\r\n\r\n        /**\r\n         * @param {*} id\r\n         * @param {*} html\r\n         * @return {String}\r\n         */\r\n        getDivHtml: function (id, html) {\r\n\r\n            if (!html) {\r\n                html = '';\r\n            }\r\n\r\n            return '<div id=\"' + id + '\">' + html + '</div>';\r\n        },\r\n\r\n        /**\r\n         * @param {Object} transport\r\n         */\r\n        onAjaxSuccess: function (transport) {\r\n            var response;\r\n\r\n            if (transport.responseText.isJSON()) {\r\n                response = transport.responseText.evalJSON();\r\n\r\n                if (response.error) {\r\n                    throw response;\r\n                } else if (response.ajaxExpired && response.ajaxRedirect) {\r\n                    setLocation(response.ajaxRedirect);\r\n                }\r\n            }\r\n        },\r\n\r\n        dialogOpened: false,\r\n\r\n        /**\r\n         * @return {Number}\r\n         */\r\n        getMaxZIndex: function () {\r\n            var max = 0,\r\n                cn = document.body.childNodes,\r\n                i, el, zIndex;\r\n\r\n            for (i = 0; i < cn.length; i++) {\r\n                el = cn[i];\r\n                zIndex = el.nodeType == 1 ? parseInt(el.style.zIndex, 10) || 0 : 0; //eslint-disable-line eqeqeq\r\n\r\n                if (zIndex < 10000) {\r\n                    max = Math.max(max, zIndex);\r\n                }\r\n            }\r\n\r\n            return max + 10;\r\n        },\r\n\r\n        /**\r\n         * @param {String} widgetUrl\r\n         */\r\n        openDialog: function (widgetUrl) {\r\n            var oThis = this,\r\n                title = 'Insert Widget',\r\n                mode = 'new',\r\n                dialog;\r\n\r\n            if (this.editMode) {\r\n                title = 'Edit Widget';\r\n                mode = 'edit';\r\n            }\r\n\r\n            if (this.dialogOpened) {\r\n                return;\r\n            }\r\n\r\n            this.dialogWindow = jQuery('<div/>').modal({\r\n\r\n                title: jQuery.mage.__(title),\r\n                type: 'slide',\r\n                buttons: [],\r\n\r\n                /**\r\n                 * Opened.\r\n                 */\r\n                opened: function () {\r\n                    dialog = jQuery(this).addClass('loading magento-message');\r\n\r\n                    widgetUrl += 'mode/' + mode;\r\n\r\n                    new Ajax.Updater($(this), widgetUrl, {\r\n                        evalScripts: true,\r\n\r\n                        /**\r\n                         * On complete.\r\n                         */\r\n                        onComplete: function () {\r\n                            dialog.removeClass('loading');\r\n                        }\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 * @param {Object} modal\r\n                 */\r\n                closed: function (e, modal) {\r\n                    modal.modal.remove();\r\n                    oThis.dialogOpened = false;\r\n                }\r\n            });\r\n\r\n            this.dialogOpened = true;\r\n            this.dialogWindow.modal('openModal');\r\n        }\r\n    },\r\n    WysiwygWidget = {};\r\n\r\n    WysiwygWidget.Widget = Class.create();\r\n    WysiwygWidget.Widget.prototype = {\r\n        /**\r\n         * @param {HTMLElement} formEl\r\n         * @param {HTMLElement} widgetEl\r\n         * @param {*} widgetOptionsEl\r\n         * @param {*} optionsSourceUrl\r\n         * @param {*} widgetTargetId\r\n         */\r\n        initialize: function (formEl, widgetEl, widgetOptionsEl, optionsSourceUrl, widgetTargetId) {\r\n            $(formEl).insert({\r\n                bottom: widgetTools.getDivHtml(widgetOptionsEl)\r\n            });\r\n\r\n            this.formEl = formEl;\r\n            this.widgetEl = $(widgetEl);\r\n            this.widgetOptionsEl = $(widgetOptionsEl);\r\n            this.optionsUrl = optionsSourceUrl;\r\n            this.optionValues = new Hash({});\r\n            this.widgetTargetId = widgetTargetId;\r\n\r\n            if (typeof wysiwyg != 'undefined' && wysiwyg.activeEditor()) { //eslint-disable-line eqeqeq\r\n                this.bMark = wysiwyg.activeEditor().selection.getBookmark();\r\n            }\r\n\r\n            // disable -- Please Select -- option from being re-selected\r\n            this.widgetEl.querySelector('option').setAttribute('disabled', 'disabled');\r\n\r\n            Event.observe(this.widgetEl, 'change', this.loadOptions.bind(this));\r\n\r\n            this.initOptionValues();\r\n        },\r\n\r\n        /**\r\n         * @return {String}\r\n         */\r\n        getOptionsContainerId: function () {\r\n            return this.widgetOptionsEl.id + '_' + this.widgetEl.value.gsub(/\\//, '_');\r\n        },\r\n\r\n        /**\r\n         * @param {*} containerId\r\n         */\r\n        switchOptionsContainer: function (containerId) {\r\n            $$('#' + this.widgetOptionsEl.id + ' div[id^=' + this.widgetOptionsEl.id + ']').each(function (e) {\r\n                this.disableOptionsContainer(e.id);\r\n            }.bind(this));\r\n\r\n            if (containerId != undefined) { //eslint-disable-line eqeqeq\r\n                this.enableOptionsContainer(containerId);\r\n            }\r\n            this._showWidgetDescription();\r\n        },\r\n\r\n        /**\r\n         * @param {*} containerId\r\n         */\r\n        enableOptionsContainer: function (containerId) {\r\n            var container = $(containerId);\r\n\r\n            container.select('.widget-option').each(function (e) {\r\n                e.removeClassName('skip-submit');\r\n\r\n                if (e.hasClassName('obligatory')) {\r\n                    e.removeClassName('obligatory');\r\n                    e.addClassName('required-entry');\r\n                }\r\n            });\r\n            container.removeClassName('no-display');\r\n        },\r\n\r\n        /**\r\n         * @param {*} containerId\r\n         */\r\n        disableOptionsContainer: function (containerId) {\r\n            var container = $(containerId);\r\n\r\n            if (container.hasClassName('no-display')) {\r\n                return;\r\n            }\r\n            container.select('.widget-option').each(function (e) {\r\n                // Avoid submitting fields of unactive container\r\n                if (!e.hasClassName('skip-submit')) {\r\n                    e.addClassName('skip-submit');\r\n                }\r\n                // Form validation workaround for unactive container\r\n                if (e.hasClassName('required-entry')) {\r\n                    e.removeClassName('required-entry');\r\n                    e.addClassName('obligatory');\r\n                }\r\n            });\r\n            container.addClassName('no-display');\r\n        },\r\n\r\n        /**\r\n         * Assign widget options values when existing widget selected in WYSIWYG.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        initOptionValues: function () {\r\n            var e, widgetCode;\r\n\r\n            if (!this.wysiwygExists()) {\r\n                return false;\r\n            }\r\n\r\n            e = this.getWysiwygNode();\r\n\r\n            if (e.localName === 'span') {\r\n                e = e.firstElementChild;\r\n            }\r\n\r\n            if (e != undefined && e.id) { //eslint-disable-line eqeqeq\r\n                // attempt to Base64-decode id on selected node; exception is thrown if it is in fact not a widget node\r\n                try {\r\n                    widgetCode = Base64.idDecode(e.id);\r\n                } catch (ex) {\r\n                    return false;\r\n                }\r\n\r\n                if (widgetCode.indexOf('{{widget') !== -1) {\r\n                    this.optionValues = new Hash({});\r\n                    widgetCode.gsub(/([a-z0-9\\_]+)\\s*\\=\\s*[\\\"]{1}([^\\\"]+)[\\\"]{1}/i, function (match) {\r\n\r\n                        if (match[1] == 'type') { //eslint-disable-line eqeqeq\r\n                            this.widgetEl.value = match[2];\r\n                        } else {\r\n                            this.optionValues.set(match[1], match[2]);\r\n                        }\r\n\r\n                    }.bind(this));\r\n\r\n                    this.loadOptions();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Load options.\r\n         */\r\n        loadOptions: function () {\r\n            var optionsContainerId,\r\n                params,\r\n                msg,\r\n                msgTmpl,\r\n                $wrapper,\r\n                typeName = this.optionValues.get('type_name');\r\n\r\n            if (!this.widgetEl.value) {\r\n                if (typeName) {\r\n                    msgTmpl = jQuery.mage.__('The widget %1 is no longer available. Select a different widget.');\r\n                    msg = jQuery.mage.__(msgTmpl).replace('%1', typeName);\r\n\r\n                    jQuery('body').notification('clear').notification('add', {\r\n                        error: true,\r\n                        message: msg,\r\n\r\n                        /**\r\n                         * @param {String} message\r\n                         */\r\n                        insertMethod: function (message) {\r\n                            $wrapper = jQuery('<div/>').html(message);\r\n\r\n                            $wrapper.insertAfter('.modal-slide .page-main-actions');\r\n                        }\r\n                    });\r\n                }\r\n                this.switchOptionsContainer();\r\n\r\n                return;\r\n            }\r\n\r\n            optionsContainerId = this.getOptionsContainerId();\r\n\r\n            if ($(optionsContainerId) != undefined) { //eslint-disable-line eqeqeq\r\n                this.switchOptionsContainer(optionsContainerId);\r\n\r\n                return;\r\n            }\r\n\r\n            this._showWidgetDescription();\r\n\r\n            params = {\r\n                'widget_type': this.widgetEl.value,\r\n                values: this.optionValues\r\n            };\r\n            new Ajax.Request(this.optionsUrl, {\r\n                parameters: {\r\n                    widget: Object.toJSON(params)\r\n                },\r\n\r\n                /**\r\n                 * On success.\r\n                 */\r\n                onSuccess: function (transport) {\r\n                    try {\r\n                        widgetTools.onAjaxSuccess(transport);\r\n                        this.switchOptionsContainer();\r\n\r\n                        if ($(optionsContainerId) == undefined) { //eslint-disable-line eqeqeq\r\n                            this.widgetOptionsEl.insert({\r\n                                bottom: widgetTools.getDivHtml(optionsContainerId, transport.responseText)\r\n                            });\r\n                        } else {\r\n                            this.switchOptionsContainer(optionsContainerId);\r\n                        }\r\n                    } catch (e) {\r\n                        alert({\r\n                            content: e.message\r\n                        });\r\n                    }\r\n                }.bind(this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _showWidgetDescription: function () {\r\n            var noteCnt = this.widgetEl.next().down('small'),\r\n                descrCnt = $('widget-description-' + this.widgetEl.selectedIndex),\r\n                description;\r\n\r\n            if (noteCnt != undefined) { //eslint-disable-line eqeqeq\r\n                description = descrCnt != undefined ? descrCnt.innerHTML : ''; //eslint-disable-line eqeqeq\r\n                noteCnt.update(description);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate field.\r\n         */\r\n        validateField: function () {\r\n            jQuery(this.widgetEl).valid();\r\n            jQuery('#insert_button').removeClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Closes the modal\r\n         */\r\n        closeModal: function () {\r\n            widgetTools.dialogWindow.modal('closeModal');\r\n        },\r\n\r\n        /* eslint-disable max-depth*/\r\n        /**\r\n         * Insert widget.\r\n         */\r\n        insertWidget: function () {\r\n            var validationResult,\r\n                $form = jQuery('#' + this.formEl),\r\n                formElements,\r\n                i,\r\n                params,\r\n                editor,\r\n                activeNode;\r\n\r\n            // remove cached validator instance, which caches elements to validate\r\n            jQuery.data($form[0], 'validator', null);\r\n\r\n            $form.validate({\r\n                /**\r\n                 * Ignores elements with .skip-submit, .no-display ancestor elements\r\n                 */\r\n                ignore: function () {\r\n                    return jQuery(this).closest('.skip-submit, .no-display').length;\r\n                },\r\n                errorClass: 'mage-error'\r\n            });\r\n\r\n            validationResult = $form.valid();\r\n\r\n            if (validationResult) {\r\n                formElements = [];\r\n                i = 0;\r\n                Form.getElements($(this.formEl)).each(function (e) {\r\n\r\n                    if (jQuery(e).closest('.skip-submit, .no-display').length === 0) {\r\n                        formElements[i] = e;\r\n                        i++;\r\n                    }\r\n                });\r\n\r\n                // Add as_is flag to parameters if wysiwyg editor doesn't exist\r\n                params = Form.serializeElements(formElements);\r\n\r\n                if (!this.wysiwygExists()) {\r\n                    params += '&as_is=1';\r\n                }\r\n\r\n                new Ajax.Request($(this.formEl).action, {\r\n                    parameters: params,\r\n                    onComplete: function (transport) {\r\n                        try {\r\n                            editor = wysiwyg.get(this.widgetTargetId);\r\n\r\n                            widgetTools.onAjaxSuccess(transport);\r\n                            widgetTools.dialogWindow.modal('closeModal');\r\n\r\n                            if (editor) {\r\n                                editor.focus();\r\n                                activeNode = widgetTools.getActiveSelectedNode();\r\n\r\n                                if (activeNode) {\r\n                                    editor.selection.select(activeNode);\r\n                                    editor.selection.setContent(transport.responseText);\r\n                                    editor.fire('Change');\r\n                                } else if (this.bMark) {\r\n                                    editor.selection.moveToBookmark(this.bMark);\r\n                                }\r\n                            }\r\n\r\n                            if (!activeNode) {\r\n                                this.updateContent(transport.responseText);\r\n                            }\r\n                        } catch (e) {\r\n                            alert({\r\n                                content: e.message\r\n                            });\r\n                        }\r\n                    }.bind(this)\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         */\r\n        updateContent: function (content) {\r\n            var textarea;\r\n\r\n            if (this.wysiwygExists()) {\r\n                wysiwyg.insertContent(content, false);\r\n            } else {\r\n                textarea = document.getElementById(this.widgetTargetId);\r\n                updateElementAtCursor(textarea, content);\r\n                varienGlobalEvents.fireEvent('tinymceChange');\r\n                jQuery(textarea).change();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        wysiwygExists: function () {\r\n            return typeof wysiwyg != 'undefined' && wysiwyg.get(this.widgetTargetId);\r\n        },\r\n\r\n        /**\r\n         * @return {null|wysiwyg.Editor|*}\r\n         */\r\n        getWysiwyg: function () {\r\n            return wysiwyg.get(this.widgetTargetId);\r\n        },\r\n\r\n        /**\r\n         * @return {*|Element}\r\n         */\r\n        getWysiwygNode: function () {\r\n            return widgetTools.getActiveSelectedNode() || wysiwyg.activeEditor().selection.getNode();\r\n        }\r\n    };\r\n\r\n    WysiwygWidget.chooser = Class.create();\r\n    WysiwygWidget.chooser.prototype = {\r\n\r\n        // HTML element A, on which click event fired when choose a selection\r\n        chooserId: null,\r\n\r\n        // Source URL for Ajax requests\r\n        chooserUrl: null,\r\n\r\n        // Chooser config\r\n        config: null,\r\n\r\n        // Chooser dialog window\r\n        dialogWindow: null,\r\n\r\n        // Chooser content for dialog window\r\n        dialogContent: null,\r\n\r\n        overlayShowEffectOptions: null,\r\n        overlayHideEffectOptions: null,\r\n\r\n        /**\r\n         * @param {*} chooserId\r\n         * @param {*} chooserUrl\r\n         * @param {*} config\r\n         */\r\n        initialize: function (chooserId, chooserUrl, config) {\r\n            this.chooserId = chooserId;\r\n            this.chooserUrl = chooserUrl;\r\n            this.config = config;\r\n        },\r\n\r\n        /**\r\n         * @return {String}\r\n         */\r\n        getResponseContainerId: function () {\r\n            return 'responseCnt' + this.chooserId;\r\n        },\r\n\r\n        /**\r\n         * @return {jQuery|*|HTMLElement}\r\n         */\r\n        getChooserControl: function () {\r\n            return $(this.chooserId + 'control');\r\n        },\r\n\r\n        /**\r\n         * @return {jQuery|*|HTMLElement}\r\n         */\r\n        getElement: function () {\r\n            return $(this.chooserId + 'value');\r\n        },\r\n\r\n        /**\r\n         * @return {jQuery|*|HTMLElement}\r\n         */\r\n        getElementLabel: function () {\r\n            return $(this.chooserId + 'label');\r\n        },\r\n\r\n        /**\r\n         * Open.\r\n         */\r\n        open: function () {\r\n            $(this.getResponseContainerId()).show();\r\n        },\r\n\r\n        /**\r\n         * Close.\r\n         */\r\n        close: function () {\r\n            $(this.getResponseContainerId()).hide();\r\n            this.closeDialogWindow();\r\n        },\r\n\r\n        /**\r\n         * Choose.\r\n         */\r\n        choose: function () {\r\n            // Open dialog window with previously loaded dialog content\r\n            var responseContainerId;\r\n\r\n            if (this.dialogContent) {\r\n                this.openDialogWindow(this.dialogContent);\r\n\r\n                return;\r\n            }\r\n            // Show or hide chooser content if it was already loaded\r\n            responseContainerId = this.getResponseContainerId();\r\n\r\n            // Otherwise load content from server\r\n            new Ajax.Request(this.chooserUrl, {\r\n                parameters: {\r\n                    'element_value': this.getElementValue(),\r\n                    'element_label': this.getElementLabelText()\r\n                },\r\n\r\n                /**\r\n                 * On success.\r\n                 */\r\n                onSuccess: function (transport) {\r\n                    try {\r\n                        widgetTools.onAjaxSuccess(transport);\r\n                        this.dialogContent = widgetTools.getDivHtml(responseContainerId, transport.responseText);\r\n                        this.openDialogWindow(this.dialogContent);\r\n                    } catch (e) {\r\n                        alert({\r\n                            content: e.message\r\n                        });\r\n                    }\r\n                }.bind(this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Open dialog winodw.\r\n         *\r\n         * @param {*} content\r\n         */\r\n        openDialogWindow: function (content) {\r\n            this.dialogWindow = jQuery('<div/>').modal({\r\n                title: this.config.buttons.open,\r\n                type: 'slide',\r\n                buttons: [],\r\n\r\n                /**\r\n                 * Opened.\r\n                 */\r\n                opened: function () {\r\n                    jQuery(this).addClass('magento-message');\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 * @param {Object} modal\r\n                 */\r\n                closed: function (e, modal) {\r\n                    modal.modal.remove();\r\n                    this.dialogWindow = null;\r\n                }\r\n            });\r\n\r\n            this.dialogWindow.modal('openModal').append(content);\r\n        },\r\n\r\n        /**\r\n         * Close dialog window.\r\n         */\r\n        closeDialogWindow: function () {\r\n            this.dialogWindow.modal('closeModal').remove();\r\n        },\r\n\r\n        /**\r\n         * @return {*|Number}\r\n         */\r\n        getElementValue: function () {\r\n            return this.getElement().value;\r\n        },\r\n\r\n        /**\r\n         * @return {String}\r\n         */\r\n        getElementLabelText: function () {\r\n            return this.getElementLabel().innerHTML;\r\n        },\r\n\r\n        /**\r\n         * @param {*} value\r\n         */\r\n        setElementValue: function (value) {\r\n            this.getElement().value = value;\r\n        },\r\n\r\n        /**\r\n         * @param {*} value\r\n         */\r\n        setElementLabel: function (value) {\r\n            this.getElementLabel().innerHTML = value;\r\n        }\r\n    };\r\n\r\n    window.WysiwygWidget = WysiwygWidget;\r\n    window.widgetTools = widgetTools;\r\n});\r\n","mage/adminhtml/wysiwyg/tiny_mce/html5-schema.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /* eslint-disable max-len */\r\n\r\n    var schema = {\r\n        blockContent: [\r\n            'address', 'article', 'aside', 'blockquote', 'details', 'dialog', 'div', 'dl', 'fieldset',\r\n            'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',\r\n            'menu', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'\r\n        ],\r\n        phrasingContent: [\r\n            '#comment', '#text', 'a', 'abbr', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas',\r\n            'cite','code', 'command', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',\r\n            'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'meter', 'noscript', 'object',\r\n            'output', 'picture', 'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'small',\r\n            'span', 'strong', 'sub', 'sup', 'textarea', 'time', 'u', 'var', 'video', 'wbr'\r\n        ],\r\n        blockElements: [\r\n            'address', 'article', 'aside', 'blockquote', 'caption', 'center', 'datalist', 'dd', 'dir', 'div',\r\n            'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\r\n            'header', 'hgroup', 'hr', 'isindex', 'li', 'menu', 'nav', 'noscript', 'ol', 'optgroup', 'option',\r\n            'p', 'pre', 'section', 'select', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul'\r\n        ],\r\n        boolAttrs: [\r\n            'autoplay', 'checked', 'compact', 'controls', 'declare', 'defer', 'disabled', 'ismap', 'loop',\r\n            'multiple', 'nohref', 'noresize', 'noshade', 'nowrap', 'readonly', 'selected'\r\n        ],\r\n        shortEnded: [\r\n            'area', 'base', 'basefont', 'br', 'col', 'embed', 'frame', 'hr', 'img', 'input', 'isindex',\r\n            'link', 'meta', 'param', 'source', 'track', 'wbr'\r\n        ],\r\n        whiteSpace: [\r\n            'audio', 'iframe', 'noscript', 'object', 'pre', 'script', 'style', 'textarea', 'video'\r\n        ],\r\n        selfClosing: [\r\n            'colgroup', 'dd', 'dt', 'li', 'option', 'p', 'td', 'tfoot', 'th', 'thead', 'tr'\r\n        ]\r\n    };\r\n\r\n    schema.flowContent = schema.blockContent.concat(schema.phrasingContent, ['style']);\r\n    schema.nonEmpty = ['td', 'th', 'iframe', 'video', 'audio', 'object', 'script', 'i', 'em', 'span'].concat(schema.shortEnded);\r\n\r\n    _.extend(schema, (function (phrasingContent, flowContent) {\r\n        var validElements   = [],\r\n            validChildren   = [],\r\n            compiled        = {},\r\n            globalAttrs,\r\n            rawData;\r\n\r\n        globalAttrs = [\r\n            'id', 'dir', 'lang', 'class', 'style', 'title', 'hidden', 'onclick', 'onkeyup',\r\n            'tabindex', 'dropzone', 'accesskey', 'draggable', 'translate', 'onmouseup',\r\n            'onkeydown', 'spellcheck', 'ondblclick', 'onmouseout', 'onkeypress', 'contextmenu',\r\n            'onmousedown', 'onmouseover', 'onmousemove', 'contenteditable'\r\n        ];\r\n\r\n        rawData = [\r\n            ['html', 'manifest', 'head body'],\r\n            ['head', '', 'base command link meta noscript script style title'],\r\n            ['title hr noscript br'],\r\n            ['base', 'href target'],\r\n            ['link', 'href rel media hreflang type sizes hreflang'],\r\n            ['meta', 'name http-equiv content charset'],\r\n            ['style', 'media type scoped'],\r\n            ['script', 'src async defer type charset'],\r\n            ['body', 'onafterprint onbeforeprint onbeforeunload onblur onerror onfocus ' +\r\n                'onhashchange onload onmessage onoffline ononline onpagehide onpageshow ' +\r\n                'onpopstate onresize onscroll onstorage onunload background bgcolor text link vlink alink', flowContent\r\n            ],\r\n            ['caption', '', _.without(flowContent, 'table')],\r\n            ['address dt dd div', '', flowContent],\r\n            ['h1 h2 h3 h4 h5 h6 pre p abbr code var samp kbd sub sup i b u bdo span legend em strong small s cite dfn', '', phrasingContent],\r\n            ['blockquote', 'cite', flowContent],\r\n            ['ol', 'reversed start type', 'li'],\r\n            ['ul', 'type compact', 'li'],\r\n            ['li', 'value type', flowContent],\r\n            ['dl', '', 'dt dd'],\r\n            ['a', 'href target rel media hreflang type charset name rev shape coords download', phrasingContent],\r\n            ['q', 'cite', phrasingContent],\r\n            ['ins del', 'cite datetime', flowContent],\r\n            ['img', 'src sizes srcset alt usemap ismap width height name longdesc align border hspace vspace'],\r\n            ['iframe', 'src name width height longdesc frameborder marginwidth marginheight scrolling align sandbox seamless allowfullscreen', flowContent],\r\n            ['embed', 'src type width height'],\r\n            ['object', 'data type typemustmatch name usemap form width height declare classid code codebase codetype archive standby align border hspace vspace', flowContent.concat(['param'])],\r\n            ['param', 'name value valuetype type'],\r\n            ['map', 'name', flowContent.concat(['area'])],\r\n            ['area', 'alt coords shape href target rel media hreflang type nohref'],\r\n            ['table', 'border summary width frame rules cellspacing cellpadding align bgcolor', 'caption colgroup thead tfoot tbody tr col'],\r\n            ['colgroup', 'span width align char charoff valign', 'col'],\r\n            ['col', 'span'],\r\n            ['tbody thead tfoot', 'align char charoff valign', 'tr'],\r\n            ['tr', 'align char charoff valign bgcolor', 'td th'],\r\n            ['td', 'colspan rowspan headers abbr axis scope align char charoff valign nowrap bgcolor width height', flowContent],\r\n            ['th', 'colspan rowspan headers scope abbr axis align char charoff valign nowrap bgcolor width height accept', flowContent],\r\n            ['form', 'accept-charset action autocomplete enctype method name novalidate target onsubmit onreset', flowContent],\r\n            ['fieldset', 'disabled form name', flowContent.concat(['legend'])],\r\n            ['label', 'form for', phrasingContent],\r\n            ['input', 'accept alt autocomplete checked dirname disabled form formaction formenctype formmethod formnovalidate ' +\r\n                'formtarget height list max maxlength min multiple name pattern readonly required size src step type value width usemap align'\r\n            ],\r\n            ['button', 'disabled form formaction formenctype formmethod formnovalidate formtarget name type value', phrasingContent],\r\n            ['select', 'disabled form multiple name required size onfocus onblur onchange', 'option optgroup'],\r\n            ['optgroup', 'disabled label', 'option'],\r\n            ['option', 'disabled label selected value'],\r\n            ['textarea', 'cols dirname disabled form maxlength name readonly required rows wrap'],\r\n            ['menu', 'type label', flowContent.concat(['li'])],\r\n            ['noscript', '', flowContent],\r\n            ['wbr'],\r\n            ['ruby', '', phrasingContent.concat(['rt', 'rp'])],\r\n            ['figcaption', '', flowContent],\r\n            ['mark rt rp summary bdi', '', phrasingContent],\r\n            ['canvas', 'width height', flowContent],\r\n            ['video', 'src crossorigin poster preload autoplay mediagroup loop muted controls width height buffered', flowContent.concat(['track', 'source'])],\r\n            ['audio', 'src crossorigin preload autoplay mediagroup loop muted controls buffered volume', flowContent.concat(['track', 'source'])],\r\n            ['picture', '', 'img source'],\r\n            ['source', 'src srcset type media sizes'],\r\n            ['track', 'kind src srclang label default'],\r\n            ['datalist', '', phrasingContent.concat(['option'])],\r\n            ['article section nav aside header footer', '', flowContent],\r\n            ['hgroup', '', 'h1 h2 h3 h4 h5 h6'],\r\n            ['figure', '', flowContent.concat(['figcaption'])],\r\n            ['time', 'datetime', phrasingContent],\r\n            ['dialog', 'open', flowContent],\r\n            ['command', 'type label icon disabled checked radiogroup command'],\r\n            ['output', 'for form name', phrasingContent],\r\n            ['progress', 'value max', phrasingContent],\r\n            ['meter', 'value min max low high optimum', phrasingContent],\r\n            ['details', 'open', flowContent.concat(['summary'])],\r\n            ['keygen', 'autofocus challenge disabled form keytype name'],\r\n            ['script', 'language xml:space'],\r\n            ['style', 'xml:space'],\r\n            ['embed', 'align name hspace vspace'],\r\n            ['br', 'clear'],\r\n            ['applet', 'codebase archive code object alt name width height align hspace vspace'],\r\n            ['font basefont', 'size color face'],\r\n            ['h1 h2 h3 h4 h5 h6 div p legend caption', 'align'],\r\n            ['ol dl menu dir', 'compact'],\r\n            ['pre', 'width xml:space'],\r\n            ['hr', 'align noshade size width'],\r\n            ['isindex', 'prompt'],\r\n            ['col', 'width align char charoff valign'],\r\n            ['input button select textarea', 'autofocus'],\r\n            ['input textarea', 'placeholder onselect onchange onfocus onblur'],\r\n            ['link script img', 'crossorigin']\r\n        ];\r\n\r\n        rawData.forEach(function (data) {\r\n            var nodes       = data[0].split(' '),\r\n                attributes  = data[1] || [],\r\n                children    = data[2] || [],\r\n                ni          = nodes.length,\r\n                nodeName,\r\n                schemaData;\r\n\r\n            if (typeof attributes === 'string') {\r\n                attributes = attributes.split(' ');\r\n            }\r\n\r\n            if (typeof children === 'string') {\r\n                children = children.split(' ');\r\n            }\r\n\r\n            while (ni--) {\r\n                nodeName    = nodes[ni];\r\n                schemaData  = compiled[nodeName] || {};\r\n\r\n                compiled[nodeName] = {\r\n                    attributes: _.union(schemaData.attributes, globalAttrs, attributes),\r\n                    children: _.union(schemaData.children, children)\r\n                };\r\n            }\r\n        });\r\n\r\n        ['a', 'dfn', 'form', 'meter', 'progress'].forEach(function (nodeName) {\r\n            var node = compiled[nodeName];\r\n\r\n            node.children = _.without(node.children, nodeName);\r\n        });\r\n\r\n        _.each(compiled, function (node, nodeName) {\r\n            var filteredAttributes = [];\r\n\r\n            _.each(node.attributes, function (attribute) { //eslint-disable-line max-nested-callbacks\r\n                // Disallowing usage of 'on*' attributes.\r\n                if (!/^on/.test(attribute)) {\r\n                    filteredAttributes.push(attribute);\r\n                }\r\n            });\r\n\r\n            node.attributes = filteredAttributes;\r\n\r\n            validElements.push(nodeName + '[' + node.attributes.join('|') + ']');\r\n            validChildren.push(nodeName + '[' + node.children.join('|') + ']');\r\n        });\r\n\r\n        return {\r\n            nodes: compiled,\r\n            validElements: validElements,\r\n            validChildren: validChildren\r\n        };\r\n    })(schema.phrasingContent, schema.flowContent));\r\n\r\n    return schema;\r\n});\r\n","mage/adminhtml/wysiwyg/tiny_mce/setup.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'wysiwygAdapter',\r\n    'module',\r\n    'mage/translate',\r\n    'prototype',\r\n    'mage/adminhtml/events',\r\n    'mage/adminhtml/browser'\r\n], function (jQuery, _, wysiwygAdapter, module) {\r\n    var baseConfig = module.config().config || {},\r\n        wysiwygSetup = Class.create({\r\n        wysiwygInstance: null\r\n    });\r\n\r\n    wysiwygSetup.prototype = {\r\n\r\n        /**\r\n         * @param {*} htmlId\r\n         * @param {Object} config\r\n         */\r\n        initialize: function (htmlId, config) {\r\n            var WysiwygInstancePrototype = new wysiwygAdapter.getAdapterPrototype();\r\n\r\n            _.bindAll(this, 'openFileBrowser');\r\n\r\n            config = _.extend({}, baseConfig, config || {});\r\n            this.wysiwygInstance = new WysiwygInstancePrototype(htmlId, config);\r\n            this.wysiwygInstance.eventBus = this.eventBus = new window.varienEvents();\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         */\r\n        setup: function (mode) {\r\n            this.wysiwygInstance.setup(mode);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        openFileBrowser: function (o) {\r\n            this.wysiwygInstance.openFileBrowser(o);\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        toggle: function () {\r\n            return this.wysiwygInstance.toggle();\r\n        },\r\n\r\n        /**\r\n         * On form validation.\r\n         */\r\n        onFormValidation: function () {\r\n            this.wysiwygInstance.onFormValidation();\r\n        },\r\n\r\n        /**\r\n         * Encodes the content so it can be inserted into the wysiwyg\r\n         * @param {String} content - The content to be encoded\r\n         *\r\n         * @returns {*} - The encoded content\r\n         */\r\n        updateContent: function (content) {\r\n            return this.wysiwygInstance.encodeContent(content);\r\n        }\r\n\r\n    };\r\n    window.wysiwygSetup = wysiwygSetup;\r\n\r\n    return wysiwygSetup;\r\n});\r\n","mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global popups, tinyMceEditors, MediabrowserUtility, Base64 */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'tinymce4',\r\n    'mage/adminhtml/events',\r\n    'mage/adminhtml/wysiwyg/events',\r\n    'mage/translate',\r\n    'prototype',\r\n    'jquery/ui'\r\n], function (jQuery, _, tinyMCE4, varienGlobalEvents, wysiwygEvents) {\r\n    'use strict';\r\n\r\n    var tinyMce4Wysiwyg = Class.create();\r\n\r\n    tinyMce4Wysiwyg.prototype = {\r\n        mediaBrowserOpener: null,\r\n        mediaBrowserTargetElementId: null,\r\n        magentoVariablesPlugin: null,\r\n        mode: 'exact',\r\n\r\n        /**\r\n         * @param {*} htmlId\r\n         * @param {Object} config\r\n         */\r\n        initialize: function (htmlId, config) {\r\n            this.id = htmlId;\r\n            this.config = config;\r\n\r\n            _.bindAll(\r\n                this,\r\n                'beforeSetContent',\r\n                'saveContent',\r\n                'onChangeContent',\r\n                'openFileBrowser',\r\n                'updateTextArea',\r\n                'onUndo',\r\n                'removeEvents'\r\n            );\r\n\r\n            varienGlobalEvents.attachEventHandler('tinymceChange', this.onChangeContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceBeforeSetContent', this.beforeSetContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceSetContent', this.updateTextArea);\r\n            varienGlobalEvents.attachEventHandler('tinymceSaveContent', this.saveContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceUndo', this.onUndo);\r\n\r\n            if (typeof tinyMceEditors === 'undefined') {\r\n                window.tinyMceEditors = $H({});\r\n            }\r\n\r\n            tinyMceEditors.set(this.id, this);\r\n        },\r\n\r\n        /**\r\n         * Ensures the undo operation works properly\r\n         */\r\n        onUndo: function () {\r\n            this.addContentEditableAttributeBackToNonEditableNodes();\r\n        },\r\n\r\n        /**\r\n         * Setup TinyMCE4 editor\r\n         */\r\n        setup: function (mode) {\r\n            var deferreds = [],\r\n                settings,\r\n                self = this;\r\n\r\n            this.turnOff();\r\n\r\n            if (this.config.plugins) {\r\n                this.config.plugins.forEach(function (plugin) {\r\n                    var deferred;\r\n\r\n                    self.addPluginToToolbar(plugin.name, '|');\r\n\r\n                    if (!plugin.src) {\r\n                        return;\r\n                    }\r\n\r\n                    deferred = jQuery.Deferred();\r\n                    deferreds.push(deferred);\r\n\r\n                    require([plugin.src], function (factoryFn) {\r\n                        if (typeof factoryFn === 'function') {\r\n                            factoryFn(plugin.options);\r\n                        }\r\n\r\n                        tinyMCE4.PluginManager.load(plugin.name, plugin.src);\r\n                        deferred.resolve();\r\n                    });\r\n                });\r\n            }\r\n\r\n            if (jQuery.isReady) {\r\n                tinyMCE4.dom.Event.domLoaded = true;\r\n            }\r\n\r\n            settings = this.getSettings();\r\n\r\n            if (mode === 'inline') {\r\n                settings.inline = true;\r\n\r\n                if (!isNaN(settings.toolbarZIndex)) {\r\n                    tinyMCE4.ui.FloatPanel.zIndex = settings.toolbarZIndex;\r\n                }\r\n\r\n                this.removeEvents(self.id);\r\n            }\r\n\r\n            jQuery.when.apply(jQuery, deferreds).done(function () {\r\n                tinyMCE4.init(settings);\r\n                this.getPluginButtons().hide();\r\n                varienGlobalEvents.clearEventHandlers('open_browser_callback');\r\n                this.eventBus.clearEventHandlers('open_browser_callback');\r\n                this.eventBus.attachEventHandler('open_browser_callback', tinyMceEditors.get(self.id).openFileBrowser);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Remove events from instance.\r\n         *\r\n         * @param {String} wysiwygId\r\n         */\r\n        removeEvents: function (wysiwygId) {\r\n            var editor;\r\n\r\n            if (typeof tinyMceEditors !== 'undefined' && tinyMceEditors.get(wysiwygId)) {\r\n                editor = tinyMceEditors.get(wysiwygId);\r\n                varienGlobalEvents.removeEventHandler('tinymceChange', editor.onChangeContent);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add plugin to the toolbar if not added.\r\n         *\r\n         * @param {String} plugin\r\n         * @param {String} separator\r\n         */\r\n        addPluginToToolbar: function (plugin, separator) {\r\n            var plugins = this.config.tinymce4.plugins.split(' '),\r\n                toolbar = this.config.tinymce4.toolbar.split(' ');\r\n\r\n            if (plugins.indexOf(plugin) === -1) {\r\n                plugins.push(plugin);\r\n            }\r\n\r\n            if (toolbar.indexOf(plugin) === -1) {\r\n                toolbar.push(separator || '', plugin);\r\n            }\r\n\r\n            this.config.tinymce4.plugins = plugins.join(' ');\r\n            this.config.tinymce4.toolbar = toolbar.join(' ');\r\n        },\r\n\r\n        /**\r\n         * Set the status of the toolbar to disabled or enabled (true for enabled, false for disabled)\r\n         * @param {Boolean} enabled\r\n         */\r\n        setToolbarStatus: function (enabled) {\r\n            var controlIds = this.get(this.getId()).theme.panel.rootControl.controlIdLookup;\r\n\r\n            _.each(controlIds, function (controlId) {\r\n                controlId.disabled(!enabled);\r\n                controlId.canFocus = enabled;\r\n\r\n                if (controlId.tooltip) {\r\n                    controlId.tooltip().state.set('rendered', enabled);\r\n\r\n                    if (enabled) {\r\n                        jQuery(controlId.getEl()).children('button').andSelf().removeAttr('style');\r\n                    } else {\r\n                        jQuery(controlId.getEl()).children('button').andSelf().attr('style', 'color: inherit;' +\r\n                            'background-color: inherit;' +\r\n                            'border-color: transparent;'\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        getSettings: function () {\r\n            var settings,\r\n                eventBus = this.eventBus;\r\n\r\n            settings = {\r\n                selector: '#' + this.getId(),\r\n                theme: 'modern',\r\n                skin: 'magento',\r\n                'entity_encoding': 'raw',\r\n                'convert_urls': false,\r\n                'content_css': this.config.tinymce4['content_css'],\r\n                'relative_urls': true,\r\n                'valid_children': '+body[style]',\r\n                menubar: false,\r\n                plugins: this.config.tinymce4.plugins,\r\n                toolbar: this.config.tinymce4.toolbar,\r\n                adapter: this,\r\n\r\n                /**\r\n                 * @param {Object} editor\r\n                 */\r\n                setup: function (editor) {\r\n                    var onChange;\r\n\r\n                    editor.on('BeforeSetContent', function (evt) {\r\n                        varienGlobalEvents.fireEvent('tinymceBeforeSetContent', evt);\r\n                        eventBus.fireEvent(wysiwygEvents.beforeSetContent);\r\n                    });\r\n\r\n                    editor.on('SaveContent', function (evt) {\r\n                        varienGlobalEvents.fireEvent('tinymceSaveContent', evt);\r\n                        eventBus.fireEvent(wysiwygEvents.afterSave);\r\n                    });\r\n\r\n                    editor.on('paste', function (evt) {\r\n                        varienGlobalEvents.fireEvent('tinymcePaste', evt);\r\n                        eventBus.fireEvent(wysiwygEvents.afterPaste);\r\n                    });\r\n\r\n                    editor.on('PostProcess', function (evt) {\r\n                        varienGlobalEvents.fireEvent('tinymceSaveContent', evt);\r\n                        eventBus.fireEvent(wysiwygEvents.afterSave);\r\n                    });\r\n\r\n                    editor.on('undo', function (evt) {\r\n                        varienGlobalEvents.fireEvent('tinymceUndo', evt);\r\n                        eventBus.fireEvent(wysiwygEvents.afterUndo);\r\n                    });\r\n\r\n                    editor.on('focus', function () {\r\n                        eventBus.fireEvent(wysiwygEvents.afterFocus);\r\n                    });\r\n\r\n                    editor.on('blur', function () {\r\n                        eventBus.fireEvent(wysiwygEvents.afterBlur);\r\n                    });\r\n\r\n                    /**\r\n                     * @param {*} evt\r\n                     */\r\n                    onChange = function (evt) {\r\n                        varienGlobalEvents.fireEvent('tinymceChange', evt);\r\n                        eventBus.fireEvent(wysiwygEvents.afterChangeContent);\r\n                    };\r\n\r\n                    editor.on('Change', onChange);\r\n                    editor.on('keyup', onChange);\r\n\r\n                    editor.on('ExecCommand', function (cmd) {\r\n                        varienGlobalEvents.fireEvent('tinymceExecCommand', cmd);\r\n                    });\r\n\r\n                    editor.on('init', function (args) {\r\n                        varienGlobalEvents.fireEvent('wysiwygEditorInitialized', args.target);\r\n                        eventBus.fireEvent(wysiwygEvents.afterInitialization);\r\n                    });\r\n                }\r\n            };\r\n\r\n            if (this.config.skin) {\r\n                settings.skin = this.config.skin;\r\n            }\r\n\r\n            if (this.config.baseStaticUrl && this.config.baseStaticDefaultUrl) {\r\n                settings['document_base_url'] = this.config.baseStaticUrl;\r\n            }\r\n            // Set the document base URL\r\n            if (this.config['document_base_url']) {\r\n                settings['document_base_url'] = this.config['document_base_url'];\r\n            }\r\n\r\n            if (this.config['files_browser_window_url']) {\r\n                /**\r\n                 * @param {*} fieldName\r\n                 * @param {*} url\r\n                 * @param {*} objectType\r\n                 * @param {*} w\r\n                 */\r\n                settings['file_browser_callback'] = function (fieldName, url, objectType, w) {\r\n                    var payload = {\r\n                        win: w,\r\n                        type: objectType,\r\n                        field: fieldName\r\n                    };\r\n\r\n                    varienGlobalEvents.fireEvent('open_browser_callback', payload);\r\n                    this.eventBus.fireEvent('open_browser_callback', payload);\r\n                }.bind(this);\r\n            }\r\n\r\n            if (this.config.width) {\r\n                settings.width = this.config.width;\r\n            }\r\n\r\n            if (this.config.height) {\r\n                settings.height = this.config.height;\r\n            }\r\n\r\n            if (this.config.plugins) {\r\n                settings.magentoPluginsOptions = {};\r\n\r\n                _.each(this.config.plugins, function (plugin) {\r\n                    settings.magentoPluginsOptions[plugin.name] = plugin.options;\r\n                });\r\n            }\r\n\r\n            if (this.config.settings) {\r\n                Object.extend(settings, this.config.settings);\r\n            }\r\n\r\n            return settings;\r\n        },\r\n\r\n        /**\r\n         * @param {String} id\r\n         */\r\n        get: function (id) {\r\n            return tinyMCE4.get(id);\r\n        },\r\n\r\n        /**\r\n         * @return {String|null}\r\n         */\r\n        getId: function () {\r\n            return this.id || (this.activeEditor() ? this.activeEditor().id : null) || tinyMceEditors.values()[0].id;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        activeEditor: function () {\r\n            return tinyMCE4.activeEditor;\r\n        },\r\n\r\n        /**\r\n         * Insert content to active editor.\r\n         *\r\n         * @param {String} content\r\n         * @param {Boolean} ui\r\n         */\r\n        insertContent: function (content, ui) {\r\n            this.activeEditor().execCommand('mceInsertContent', typeof ui !== 'undefined' ? ui : false, content);\r\n        },\r\n\r\n        /**\r\n         * Replace entire contents of wysiwyg with string content parameter\r\n         *\r\n         * @param {String} content\r\n         */\r\n        setContent: function (content) {\r\n            this.get(this.getId()).setContent(content);\r\n        },\r\n\r\n        /**\r\n         * Set caret location in WYSIWYG editor.\r\n         *\r\n         * @param {Object} targetElement\r\n         */\r\n        setCaretOnElement: function (targetElement) {\r\n            this.activeEditor().selection.select(targetElement);\r\n            this.activeEditor().selection.collapse();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        openFileBrowser: function (o) {\r\n            var typeTitle = this.translate('Select Images'),\r\n                storeId = this.config['store_id'] ? this.config['store_id'] : 0,\r\n                frameDialog = jQuery('div.mce-container[role=\"dialog\"]'),\r\n                self = this,\r\n                wUrl = this.config['files_browser_window_url'] +\r\n                    'target_element_id/' + this.getId() + '/' +\r\n                    'store/' + storeId + '/';\r\n\r\n            this.mediaBrowserOpener = o.win;\r\n            this.mediaBrowserTargetElementId = o.field;\r\n\r\n            if (typeof o.type !== 'undefined' && o.type !== '') { //eslint-disable-line eqeqeq\r\n                wUrl = wUrl + 'type/' + o.type + '/';\r\n            }\r\n\r\n            frameDialog.hide();\r\n            jQuery('#mce-modal-block').hide();\r\n\r\n            require(['mage/adminhtml/browser'], function () {\r\n                MediabrowserUtility.openDialog(wUrl, false, false, typeTitle, {\r\n                        /**\r\n                         * Closed.\r\n                         */\r\n                        closed: function () {\r\n                            frameDialog.show();\r\n                            jQuery('#mce-modal-block').show();\r\n                        },\r\n\r\n                        targetElementId: self.activeEditor() ? self.activeEditor().id : null\r\n                    }\r\n                );\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} string\r\n         * @return {String}\r\n         */\r\n        translate: function (string) {\r\n            return jQuery.mage.__ ? jQuery.mage.__(string) : string;\r\n        },\r\n\r\n        /**\r\n         * @return {null}\r\n         */\r\n        getMediaBrowserOpener: function () {\r\n            return this.mediaBrowserOpener;\r\n        },\r\n\r\n        /**\r\n         * @return {null}\r\n         */\r\n        getMediaBrowserTargetElementId: function () {\r\n            return this.mediaBrowserTargetElementId;\r\n        },\r\n\r\n        /**\r\n         * @return {jQuery|*|HTMLElement}\r\n         */\r\n        getToggleButton: function () {\r\n            return $('toggle' + this.getId());\r\n        },\r\n\r\n        /**\r\n         * Get plugins button.\r\n         */\r\n        getPluginButtons: function () {\r\n            return jQuery('#buttons' + this.getId() + ' > button.plugin');\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         * @return {wysiwygSetup}\r\n         */\r\n        turnOn: function (mode) {\r\n            this.closePopups();\r\n\r\n            this.setup(mode);\r\n\r\n            this.getPluginButtons().hide();\r\n\r\n            tinyMCE4.execCommand('mceAddControl', false, this.getId());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {String} name\r\n         */\r\n        closeEditorPopup: function (name) {\r\n            if (typeof popups !== 'undefined' && popups[name] !== undefined && !popups[name].closed) {\r\n                popups[name].close();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {wysiwygSetup}\r\n         */\r\n        turnOff: function () {\r\n            this.closePopups();\r\n\r\n            this.getPluginButtons().show();\r\n\r\n            tinyMCE4.execCommand('mceRemoveEditor', false, this.getId());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Close popups.\r\n         */\r\n        closePopups: function () {\r\n            // close all popups to avoid problems with updating parent content area\r\n            varienGlobalEvents.fireEvent('wysiwygClosePopups');\r\n            this.closeEditorPopup('browser_window' + this.getId());\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        toggle: function () {\r\n            var content;\r\n\r\n            if (!tinyMCE4.get(this.getId())) {\r\n                this.turnOn();\r\n\r\n                return true;\r\n            }\r\n\r\n            content = this.get(this.getId()) ? this.get(this.getId()).getContent() : this.getTextArea().val();\r\n\r\n            this.turnOff();\r\n\r\n            if (content.match(/{{.+?}}/g)) {\r\n                this.getTextArea().val(content.replace(/&quot;/g, '\"'));\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * On form validation.\r\n         */\r\n        onFormValidation: function () {\r\n            if (tinyMCE4.get(this.getId())) {\r\n                $(this.getId()).value = tinyMCE4.get(this.getId()).getContent();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * On change content.\r\n         */\r\n        onChangeContent: function () {\r\n            // Add \"changed\" to tab class if it exists\r\n            var tab;\r\n\r\n            this.updateTextArea();\r\n\r\n            if (this.config['tab_id']) {\r\n                tab = $$('a[id$=' + this.config['tab_id'] + ']')[0];\r\n\r\n                if ($(tab) != undefined && $(tab).hasClassName('tab-item-link')) { //eslint-disable-line eqeqeq\r\n                    $(tab).addClassName('changed');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        beforeSetContent: function (o) {\r\n            o.content = this.encodeContent(o.content);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        saveContent: function (o) {\r\n            o.content = this.decodeContent(o.content);\r\n        },\r\n\r\n        /**\r\n         * Return the content stored in the WYSIWYG field\r\n         * @param {String} id\r\n         * @return {String}\r\n         */\r\n        getContent: function (id) {\r\n            return id ? this.get(id).getContent() : this.get(this.getId()).getContent();\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getAdapterPrototype: function () {\r\n            return tinyMce4Wysiwyg;\r\n        },\r\n\r\n        /**\r\n         * Fix range selection placement when typing.  This fixes MAGETWO-84769\r\n         * @param {Object} editor\r\n         */\r\n        fixRangeSelection: function (editor) {\r\n            var selection = editor.selection,\r\n                dom = editor.dom,\r\n                rng = dom.createRng(),\r\n                doc = editor.getDoc(),\r\n                markerHtml,\r\n                marker;\r\n\r\n            // Validate the range we're trying to fix is contained within the current editors document\r\n            if (!selection.getContent().length && jQuery.contains(doc, selection.getRng().startContainer)) {\r\n                markerHtml = '<span id=\"mce_marker\" data-mce-type=\"bookmark\">\\uFEFF</span>';\r\n                selection.setContent(markerHtml);\r\n                marker = dom.get('mce_marker');\r\n                rng.setStartBefore(marker);\r\n                rng.setEndBefore(marker);\r\n                dom.remove(marker);\r\n                selection.setRng(rng);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update text area.\r\n         */\r\n        updateTextArea: function () {\r\n            var editor = this.get(this.getId()),\r\n                content;\r\n\r\n            if (!editor || editor.id !== this.activeEditor().id) {\r\n                return;\r\n            }\r\n\r\n            this.addContentEditableAttributeBackToNonEditableNodes();\r\n            this.fixRangeSelection(editor);\r\n\r\n            content = editor.getContent();\r\n            content = this.decodeContent(content);\r\n\r\n            this.getTextArea().val(content).trigger('change');\r\n        },\r\n\r\n        /**\r\n         * @return {Object} jQuery textarea element\r\n         */\r\n        getTextArea: function () {\r\n            return jQuery('#' + this.getId());\r\n        },\r\n\r\n        /**\r\n         * Set the status of the editor and toolbar\r\n         *\r\n         * @param {Boolean} enabled\r\n         */\r\n        setEnabledStatus: function (enabled) {\r\n            if (this.activeEditor()) {\r\n                this.activeEditor().getBody().setAttribute('contenteditable', enabled);\r\n                this.activeEditor().readonly = !enabled;\r\n                this.setToolbarStatus(enabled);\r\n            }\r\n\r\n            if (enabled) {\r\n                this.getTextArea().removeProp('disabled');\r\n            } else {\r\n                this.getTextArea().prop('disabled', 'disabled');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Retrieve directives URL with substituted directive value.\r\n         *\r\n         * @param {String} directive\r\n         */\r\n        makeDirectiveUrl: function (directive) {\r\n            return this.config['directives_url']\r\n                .replace(/directive/, 'directive/___directive/' + directive)\r\n                .replace(/\\/$/, '');\r\n        },\r\n\r\n        /**\r\n         * Convert {{directive}} style attributes syntax to absolute URLs\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeDirectives: function (content) {\r\n            // collect all HTML tags with attributes that contain directives\r\n            return content.gsub(/<([a-z0-9\\-\\_]+[^>]+?)([a-z0-9\\-\\_]+=\"[^\"]*?\\{\\{.+?\\}\\}.*?\".*?)>/i, function (match) {\r\n                var attributesString = match[2],\r\n                    decodedDirectiveString;\r\n\r\n                // process tag attributes string\r\n                attributesString = attributesString.gsub(/([a-z0-9\\-\\_]+)=\"(.*?)(\\{\\{.+?\\}\\})(.*?)\"/i, function (m) {\r\n                    decodedDirectiveString = encodeURIComponent(Base64.mageEncode(m[3].replace(/&quot;/g, '\"') + m[4]));\r\n\r\n                    return m[1] + '=\"' + m[2] + this.makeDirectiveUrl(decodedDirectiveString) + '\"';\r\n                }.bind(this));\r\n\r\n                return '<' + match[1] + attributesString + '>';\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Convert absolute URLs to {{directive}} style attributes syntax\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeDirectives: function (content) {\r\n            var directiveUrl = this.makeDirectiveUrl('%directive%').split('?')[0], // remove query string from directive\r\n                // escape special chars in directives url to use in regular expression\r\n                regexEscapedDirectiveUrl = directiveUrl.replace(/([$^.?*!+:=()\\[\\]{}|\\\\])/g, '\\\\$1'),\r\n                regexDirectiveUrl = regexEscapedDirectiveUrl\r\n                    .replace(\r\n                        '%directive%',\r\n                        '([a-zA-Z0-9,_-]+(?:%2[A-Z]|)+\\/?)(?:(?!\").)*'\r\n                    ) + '/?(\\\\\\\\?[^\"]*)?', // allow optional query string\r\n                reg = new RegExp(regexDirectiveUrl);\r\n\r\n            return content.gsub(reg, function (match) {\r\n                return Base64.mageDecode(decodeURIComponent(match[1]).replace(/\\/$/, '')).replace(/\"/g, '&quot;');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attributes\r\n         * @return {Object}\r\n         */\r\n        parseAttributesString: function (attributes) {\r\n            var result = {};\r\n\r\n            // Decode &quot; entity, as regex below does not support encoded quote\r\n            attributes = attributes.replace(/&quot;/g, '\"');\r\n\r\n            attributes.gsub(\r\n                /(\\w+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/,\r\n                function (match) {\r\n                    result[match[1]] = match[2];\r\n                }\r\n            );\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeContent: function (content) {\r\n            if (this.config['add_directives']) {\r\n                content = this.decodeDirectives(content);\r\n            }\r\n\r\n            content = varienGlobalEvents.fireEventReducer('wysiwygDecodeContent', content);\r\n\r\n            return content;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeContent: function (content) {\r\n            if (this.config['add_directives']) {\r\n                content = this.encodeDirectives(content);\r\n            }\r\n\r\n            content = varienGlobalEvents.fireEventReducer('wysiwygEncodeContent', content);\r\n\r\n            return content;\r\n        },\r\n\r\n        /**\r\n         * Reinstate contenteditable attributes on .mceNonEditable nodes\r\n         */\r\n        addContentEditableAttributeBackToNonEditableNodes: function () {\r\n            jQuery('.mceNonEditable', this.activeEditor().getDoc()).attr('contenteditable', false);\r\n        }\r\n    };\r\n\r\n    return tinyMce4Wysiwyg.prototype;\r\n});\r\n","mage/adminhtml/wysiwyg/tiny_mce/plugins/magentovariable/editor_plugin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global tinymce, MagentovariablePlugin, varienGlobalEvents, Base64 */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'Magento_Variable/js/config-directive-generator',\r\n    'Magento_Variable/js/custom-directive-generator',\r\n    'wysiwygAdapter',\r\n    'jquery',\r\n    'mage/adminhtml/tools'\r\n], function (configDirectiveGenerator, customDirectiveGenerator, wysiwyg, jQuery) {\r\n    return function (config) {\r\n        tinymce.create('tinymce.plugins.magentovariable', {\r\n\r\n            /**\r\n             * Initialize editor plugin.\r\n             *\r\n             * @param {tinymce.editor} editor - Editor instance that the plugin is initialized in.\r\n             * @param {String} url - Absolute URL to where the plugin is located.\r\n             */\r\n            init: function (editor, url) {\r\n                var self = this;\r\n\r\n                /**\r\n                 * Add new command to open variables selector slideout.\r\n                 */\r\n                editor.addCommand('openVariablesSlideout', function (commandConfig) {\r\n                    var selectedElement;\r\n\r\n                    if (commandConfig) {\r\n                        selectedElement = commandConfig.selectedElement;\r\n                    } else {\r\n                        selectedElement = tinymce.activeEditor.selection.getNode();\r\n                    }\r\n                    MagentovariablePlugin.setEditor(editor);\r\n                    MagentovariablePlugin.loadChooser(\r\n                        config.url,\r\n                        wysiwyg.getId(),\r\n                        selectedElement\r\n                    );\r\n                });\r\n\r\n                /**\r\n                 * Add button to the editor toolbar.\r\n                 */\r\n                editor.addButton('magentovariable', {\r\n                    title: jQuery.mage.__('Insert Variable'),\r\n                    tooltip: jQuery.mage.__('Insert Variable'),\r\n                    cmd: 'openVariablesSlideout',\r\n                    image: url + '/img/icon.png',\r\n\r\n                    /**\r\n                     * Highlight or dismiss Insert Variable button when variable is selected or deselected.\r\n                     */\r\n                    onPostRender: function () {\r\n                        var _this = this,\r\n\r\n                        /**\r\n                         * Toggle active state of Insert Variable button.\r\n                         *\r\n                         * @param {Object} e\r\n                         */\r\n                        toggleVariableButton = function (e) {\r\n                            _this.active(false);\r\n\r\n                            if (jQuery(e.target).hasClass('magento-variable')) {\r\n                                _this.active(true);\r\n                            }\r\n                        };\r\n\r\n                        editor.on('click', toggleVariableButton);\r\n                        editor.on('change', toggleVariableButton);\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Double click handler on the editor to handle dbl click on variable placeholder.\r\n                 */\r\n                editor.on('dblclick', function (evt) {\r\n                    if (jQuery(evt.target).hasClass('magento-variable')) {\r\n                        editor.selection.collapse(false);\r\n                        editor.execCommand('openVariablesSlideout', {\r\n                            ui: true,\r\n                            selectedElement: evt.target\r\n                        });\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Attach event handler for when wysiwyg editor is about to encode its content\r\n                 */\r\n                varienGlobalEvents.attachEventHandler('wysiwygEncodeContent', function (content) {\r\n                    content = self.encodeVariables(content);\r\n\r\n                    return content;\r\n                });\r\n\r\n                /**\r\n                 * Attach event handler for when wysiwyg editor is about to decode its content\r\n                 */\r\n                varienGlobalEvents.attachEventHandler('wysiwygDecodeContent', function (content) {\r\n                    content = self.decodeVariables(content);\r\n\r\n                    return content;\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Encode variables in content\r\n             *\r\n             * @param {String} content\r\n             * @returns {*}\r\n             */\r\n            encodeVariables: function (content) {\r\n                content = content.gsub(/\\{\\{config path=\\\"([^\\\"]+)\\\"\\}\\}/i, function (match) {\r\n                    var path = match[1],\r\n                        magentoVariables,\r\n                        imageHtml;\r\n\r\n                    magentoVariables = JSON.parse(config.placeholders);\r\n\r\n                    if (magentoVariables[match[1]] && magentoVariables[match[1]]['variable_type'] === 'default') {\r\n                        imageHtml = '<span id=\"%id\" class=\"magento-variable magento-placeholder mceNonEditable\">' +\r\n                            '%s</span>';\r\n                        imageHtml = imageHtml.replace('%s', magentoVariables[match[1]]['variable_name']);\r\n                    } else {\r\n                        imageHtml = '<span id=\"%id\" class=\"' +\r\n                            'magento-variable magento-placeholder magento-placeholder-error ' +\r\n                            'mceNonEditable' +\r\n                            '\">' +\r\n                            'Not found' +\r\n                            '</span>';\r\n                    }\r\n\r\n                    return imageHtml.replace('%id', Base64.idEncode(path));\r\n                });\r\n\r\n                content = content.gsub(/\\{\\{customVar code=([^\\}\\\"]+)\\}\\}/i, function (match) {\r\n                    var path = match[1],\r\n                        magentoVariables,\r\n                        imageHtml;\r\n\r\n                    magentoVariables = JSON.parse(config.placeholders);\r\n\r\n                    if (magentoVariables[match[1]] && magentoVariables[match[1]]['variable_type'] === 'custom') {\r\n                        imageHtml = '<span id=\"%id\" class=\"magento-variable magento-custom-var magento-placeholder ' +\r\n                            'mceNonEditable\">%s</span>';\r\n                        imageHtml = imageHtml.replace('%s', magentoVariables[match[1]]['variable_name']);\r\n                    } else {\r\n                        imageHtml = '<span id=\"%id\" class=\"' +\r\n                            'magento-variable magento-custom-var magento-placeholder ' +\r\n                            'magento-placeholder-error mceNonEditable' +\r\n                            '\">' +\r\n                            match[1] +\r\n                            '</span>';\r\n                    }\r\n\r\n                    return imageHtml.replace('%id', Base64.idEncode(path));\r\n                });\r\n\r\n                return content;\r\n            },\r\n\r\n            /**\r\n             * Decode variables in content.\r\n             *\r\n             * @param {String} content\r\n             * @returns {String}\r\n             */\r\n            decodeVariables: function (content) {\r\n                var doc = (new DOMParser()).parseFromString(content.replace(/&quot;/g, '&amp;quot;'), 'text/html'),\r\n                    returnval = '';\r\n\r\n                [].forEach.call(doc.querySelectorAll('span.magento-variable'), function (el) {\r\n                    var $el = jQuery(el);\r\n\r\n                    if ($el.hasClass('magento-custom-var')) {\r\n                        $el.replaceWith(\r\n                            customDirectiveGenerator.processConfig(\r\n                                Base64.idDecode(\r\n                                    $el.attr('id')\r\n                                )\r\n                            )\r\n                        );\r\n                    } else {\r\n                        $el.replaceWith(\r\n                            configDirectiveGenerator.processConfig(\r\n                                Base64.idDecode(\r\n                                    $el.attr('id')\r\n                                )\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n\r\n                returnval += doc.head.innerHTML ?\r\n                    doc.head.innerHTML.replace(/&amp;quot;/g, '&quot;') : '';\r\n                returnval += doc.body.innerHTML ?\r\n                    doc.body.innerHTML.replace(/&amp;quot;/g, '&quot;') : '';\r\n\r\n                return returnval ? returnval : content;\r\n            },\r\n\r\n            /**\r\n             * @return {Object}\r\n             */\r\n            getInfo: function () {\r\n                return {\r\n                    longname: 'Magento Variable Manager Plugin',\r\n                    author: 'Magento Core Team',\r\n                    authorurl: 'http://magentocommerce.com',\r\n                    infourl: 'http://magentocommerce.com',\r\n                    version: '1.0'\r\n                };\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Register plugin\r\n         */\r\n        tinymce.PluginManager.add('magentovariable', tinymce.plugins.magentovariable);\r\n    };\r\n});\r\n","mage/adminhtml/wysiwyg/tiny_mce/plugins/magentowidget/editor_plugin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global tinymce, widgetTools, jQuery, Base64 */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'wysiwygAdapter',\r\n    'mage/adminhtml/events',\r\n    'mage/adminhtml/wysiwyg/widget'\r\n], function (wysiwyg, varienGlobalEvents) {\r\n    return function (config) {\r\n        tinymce.create('tinymce.plugins.magentowidget', {\r\n\r\n            /**\r\n             * @param {tinymce.Editor} editor - Editor instance that the plugin is initialized in.\r\n             * @param {String} url - Absolute URL to where the plugin is located.\r\n             */\r\n            init: function (editor, url) {\r\n                var self = this;\r\n\r\n                this.activePlaceholder = null;\r\n\r\n                editor.addCommand('mceMagentowidget', function (img) {\r\n                    if (self.activePlaceholder) {\r\n                        img = self.activePlaceholder;\r\n                    }\r\n\r\n                    widgetTools.setActiveSelectedNode(img);\r\n                    widgetTools.openDialog(\r\n                        config['window_url'] + 'widget_target_id/' + editor.getElement().id + '/'\r\n                    );\r\n                });\r\n\r\n                // Register Widget plugin button\r\n                editor.addButton('magentowidget', {\r\n                    title: jQuery.mage.__('Insert Widget'),\r\n                    cmd: 'mceMagentowidget',\r\n                    image: url + '/img/icon.png',\r\n\r\n                    /**\r\n                     * Fires after the rendering has completed. This ensures the editor will be instantiated\r\n                     */\r\n                    onPostRender: function () {\r\n                        var ctrl = this;\r\n\r\n                        // Add a node change handler, selects the button in the UI when a image is selected\r\n                        editor.on('nodeChange', function (e) {\r\n                            var placeholder = e.element;\r\n\r\n                            if (self.isWidgetPlaceholderSelected(placeholder)) {\r\n                                widgetTools.setEditMode(true);\r\n                                ctrl.active(true);\r\n                            } else {\r\n                                widgetTools.setEditMode(false);\r\n                                ctrl.active(false);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // Add a widget placeholder image double click callback\r\n                editor.on('dblClick', function (e) {\r\n                    var placeholder = e.target;\r\n\r\n                    if (self.isWidgetPlaceholderSelected(placeholder)) {\r\n                        widgetTools.setEditMode(true);\r\n                        this.execCommand('mceMagentowidget', null);\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Attach event handler for when wysiwyg editor is about to encode its content\r\n                 */\r\n                varienGlobalEvents.attachEventHandler('wysiwygEncodeContent', function (content) {\r\n                    content = self.encodeWidgets(self.decodeWidgets(content));\r\n                    content = self.removeDuplicateAncestorWidgetSpanElement(content);\r\n\r\n                    return content;\r\n                });\r\n\r\n                /**\r\n                 * Attach event handler for when wysiwyg editor is about to decode its content\r\n                 */\r\n                varienGlobalEvents.attachEventHandler('wysiwygDecodeContent', function (content) {\r\n                    content = self.decodeWidgets(content);\r\n\r\n                    return content;\r\n                });\r\n\r\n                /**\r\n                 * Attach event handler for when popups associated with wysiwyg are about to be closed\r\n                 */\r\n                varienGlobalEvents.attachEventHandler('wysiwygClosePopups', function () {\r\n                    wysiwyg.closeEditorPopup('widget_window' + wysiwyg.getId());\r\n                });\r\n            },\r\n\r\n            /**\r\n             * @param {Object} placeholder - Contains the selected node\r\n             * @returns {Boolean}\r\n             */\r\n            isWidgetPlaceholderSelected: function (placeholder) {\r\n                var isSelected = false;\r\n\r\n                if (placeholder.nodeName &&\r\n                    (placeholder.nodeName === 'SPAN' || placeholder.nodeName === 'IMG') &&\r\n                    placeholder.className && placeholder.className.indexOf('magento-widget') !== -1\r\n                ) {\r\n                    this.activePlaceholder = placeholder;\r\n                    isSelected = true;\r\n                } else {\r\n                    this.activePlaceholder = null;\r\n                }\r\n\r\n                return isSelected;\r\n            },\r\n\r\n            /**\r\n             * Convert {{widget}} style syntax to image placeholder HTML\r\n             * @param {String} content\r\n             * @return {*}\r\n             */\r\n            encodeWidgets: function (content) {\r\n                return content.gsub(/\\{\\{widget(.*?)\\}\\}/i, function (match) {\r\n                    var attributes = wysiwyg.parseAttributesString(match[1]),\r\n                        imageSrc,\r\n                        imageHtml = '';\r\n\r\n                    if (attributes.type) {\r\n                        attributes.type = attributes.type.replace(/\\\\\\\\/g, '\\\\');\r\n                        imageSrc = config.placeholders[attributes.type];\r\n\r\n                        if (imageSrc) {\r\n                            imageHtml += '<span class=\"magento-placeholder magento-widget mceNonEditable\" ' +\r\n                                'contenteditable=\"false\">';\r\n                        } else {\r\n                            imageSrc = config['error_image_url'];\r\n                            imageHtml += '<span ' +\r\n                                'class=\"magento-placeholder magento-placeholder-error magento-widget mceNonEditable\" ' +\r\n                                'contenteditable=\"false\">';\r\n                        }\r\n\r\n                        imageHtml += '<img';\r\n                        imageHtml += ' id=\"' + Base64.idEncode(match[0]) + '\"';\r\n                        imageHtml += ' src=\"' + imageSrc + '\"';\r\n                        imageHtml += ' />';\r\n\r\n                        if (config.types[attributes.type]) {\r\n                            imageHtml += config.types[attributes.type];\r\n                        }\r\n\r\n                        imageHtml += '</span>';\r\n\r\n                        return imageHtml;\r\n                    }\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Convert image placeholder HTML to {{widget}} style syntax\r\n             * @param {String} content\r\n             * @return {*}\r\n             */\r\n            decodeWidgets: function (content) {\r\n                return content.gsub(\r\n                    /(<span class=\"[^\"]*magento-widget[^\"]*\"[^>]*>)?<img([^>]+id=\"[^>]+)>(([^>]*)<\\/span>)?/i,\r\n                    function (match) {\r\n                        var attributes = wysiwyg.parseAttributesString(match[2]),\r\n                            widgetCode;\r\n\r\n                        if (attributes.id) {\r\n                            widgetCode = Base64.idDecode(attributes.id);\r\n\r\n                            if (widgetCode.indexOf('{{widget') !== -1) {\r\n                                return widgetCode;\r\n                            }\r\n                        }\r\n\r\n                        return match[0];\r\n                    }\r\n                );\r\n            },\r\n\r\n            /**\r\n             * Tinymce has strange behavior with html and this removes one of its side-effects\r\n             * @param {String} content\r\n             * @return {String}\r\n             */\r\n            removeDuplicateAncestorWidgetSpanElement: function (content) {\r\n                var parser, doc, returnval = '';\r\n\r\n                if (!window.DOMParser) {\r\n                    return content;\r\n                }\r\n\r\n                parser = new DOMParser();\r\n                doc = parser.parseFromString(content.replace(/&quot;/g, '&amp;quot;'), 'text/html');\r\n\r\n                [].forEach.call(doc.querySelectorAll('.magento-widget'), function (widgetEl) {\r\n                    var widgetChildEl = widgetEl.querySelector('.magento-widget');\r\n\r\n                    if (!widgetChildEl) {\r\n                        return;\r\n                    }\r\n\r\n                    [].forEach.call(widgetEl.childNodes, function (el) {\r\n                        widgetEl.parentNode.insertBefore(el, widgetEl);\r\n                    });\r\n\r\n                    widgetEl.parentNode.removeChild(widgetEl);\r\n                });\r\n\r\n                returnval += doc.head.innerHTML ?\r\n                    doc.head.innerHTML.replace(/&amp;quot;/g, '&quot;') : '';\r\n                returnval += doc.body.innerHTML ?\r\n                    doc.body.innerHTML.replace(/&amp;quot;/g, '&quot;') : '';\r\n\r\n                return returnval ? returnval : content;\r\n            },\r\n\r\n            /**\r\n             * @return {Object}\r\n             */\r\n            getInfo: function () {\r\n                return {\r\n                    longname: 'Magento Widget Manager Plugin',\r\n                    author: 'Magento Core Team',\r\n                    authorurl: 'http://magentocommerce.com',\r\n                    infourl: 'http://magentocommerce.com',\r\n                    version: '1.0'\r\n                };\r\n            }\r\n        });\r\n\r\n        // Register plugin\r\n        tinymce.PluginManager.add('magentowidget', tinymce.plugins.magentowidget);\r\n    };\r\n});\r\n","mage/app/config.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\n/* eslint-disable strict */\r\ndefine([], function () {\r\n    return {\r\n        /**\r\n         * Get base url.\r\n         */\r\n        getBaseUrl: function () {\r\n            return this.values.baseUrl;\r\n        },\r\n\r\n        /**\r\n         * Get form key.\r\n         */\r\n        getFormKey: function () {\r\n            return this.values.formKey;\r\n        }\r\n    };\r\n});\r\n","mage/apply/main.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    './scripts'\r\n], function (_, $, processScripts) {\r\n    'use strict';\r\n\r\n    var dataAttr = 'data-mage-init',\r\n        nodeSelector = '[' + dataAttr + ']';\r\n\r\n    /**\r\n     * Initializes components assigned to a specified element via data-* attribute.\r\n     *\r\n     * @param {HTMLElement} el - Element to initialize components with.\r\n     * @param {Object|String} config - Initial components' config.\r\n     * @param {String} component - Components' path.\r\n     */\r\n    function init(el, config, component) {\r\n        require([component], function (fn) {\r\n\r\n            if (typeof fn === 'object') {\r\n                fn = fn[component].bind(fn);\r\n            }\r\n\r\n            if (_.isFunction(fn)) {\r\n                fn(config, el);\r\n            } else if ($(el)[component]) {\r\n                $(el)[component](config);\r\n            }\r\n        }, function (error) {\r\n            if ('console' in window && typeof window.console.error === 'function') {\r\n                console.error(error);\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses elements 'data-mage-init' attribute as a valid JSON data.\r\n     * Note: data-mage-init attribute will be removed.\r\n     *\r\n     * @param {HTMLElement} el - Element whose attribute should be parsed.\r\n     * @returns {Object}\r\n     */\r\n    function getData(el) {\r\n        var data = el.getAttribute(dataAttr);\r\n\r\n        el.removeAttribute(dataAttr);\r\n\r\n        return {\r\n            el: el,\r\n            data: JSON.parse(data)\r\n        };\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Initializes components assigned to HTML elements via [data-mage-init].\r\n         *\r\n         * @example Sample 'data-mage-init' declaration.\r\n         *      data-mage-init='{\"path/to/component\": {\"foo\": \"bar\"}}'\r\n         */\r\n        apply: function (context) {\r\n            var virtuals = processScripts(!context ? document : context),\r\n                nodes = document.querySelectorAll(nodeSelector);\r\n\r\n            _.toArray(nodes)\r\n                .map(getData)\r\n                .concat(virtuals)\r\n                .forEach(function (itemContainer) {\r\n                    var element = itemContainer.el;\r\n\r\n                    _.each(itemContainer.data, function (obj, key) {\r\n                            if (obj.mixins) {\r\n                                require(obj.mixins, function () { //eslint-disable-line max-nested-callbacks\r\n                                    var i, len;\r\n\r\n                                    for (i = 0, len = arguments.length; i < len; i++) {\r\n                                        $.extend(\r\n                                            true,\r\n                                            itemContainer.data[key],\r\n                                            arguments[i](itemContainer.data[key], element)\r\n                                        );\r\n                                    }\r\n\r\n                                    delete obj.mixins;\r\n                                    init.call(null, element, obj, key);\r\n                                });\r\n                            } else {\r\n                                init.call(null, element, obj, key);\r\n                            }\r\n\r\n                        }\r\n                    );\r\n\r\n                });\r\n        },\r\n        applyFor: init\r\n    };\r\n});\r\n","mage/apply/scripts.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery'\r\n], function (_, $) {\r\n    'use strict';\r\n\r\n    var scriptSelector = 'script[type=\"text/x-magento-init\"]',\r\n        dataAttr = 'data-mage-init',\r\n        virtuals = [];\r\n\r\n    /**\r\n     * Adds components to the virtual list.\r\n     *\r\n     * @param {Object} components\r\n     */\r\n    function addVirtual(components) {\r\n        virtuals.push({\r\n            el: false,\r\n            data: components\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Merges provided data with a current data\r\n     * of a elements' \"data-mage-init\" attribute.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {HTMLElement} elem - Element whose data should be modified.\r\n     */\r\n    function setData(components, elem) {\r\n        var data = elem.getAttribute(dataAttr);\r\n\r\n        data = data ? JSON.parse(data) : {};\r\n        _.each(components, function (obj, key) {\r\n            if (_.has(obj, 'mixins')) {\r\n                data[key] = data[key] || {};\r\n                data[key].mixins = data[key].mixins || [];\r\n                data[key].mixins = data[key].mixins.concat(obj.mixins);\r\n                delete obj.mixins;\r\n            }\r\n        });\r\n\r\n        data = $.extend(true, data, components);\r\n        data = JSON.stringify(data);\r\n        elem.setAttribute(dataAttr, data);\r\n    }\r\n\r\n    /**\r\n     * Search for the elements by privded selector and extends theirs data.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {String} selector - Selector for the elements.\r\n     */\r\n    function processElems(components, selector) {\r\n        var elems,\r\n            iterator;\r\n\r\n        if (selector === '*') {\r\n            addVirtual(components);\r\n\r\n            return;\r\n        }\r\n\r\n        elems = document.querySelectorAll(selector);\r\n        iterator = setData.bind(null, components);\r\n\r\n        _.toArray(elems).forEach(iterator);\r\n    }\r\n\r\n    /**\r\n     * Parses content of a provided script node.\r\n     * Note: node will be removed from DOM.\r\n     *\r\n     * @param {HTMLScriptElement} node - Node to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function getNodeData(node) {\r\n        var data = node.textContent;\r\n\r\n        node.parentNode.removeChild(node);\r\n\r\n        return JSON.parse(data);\r\n    }\r\n\r\n    /**\r\n     * Parses 'script' tags with a custom type attribute and moves it's data\r\n     * to a 'data-mage-init' attribute of an element found by provided selector.\r\n     * Note: All found script nodes will be removed from DOM.\r\n     *\r\n     * @returns {Array} An array of components not assigned to the specific element.\r\n     *\r\n     * @example Sample declaration.\r\n     *      <script type=\"text/x-magento-init\">\r\n     *          {\r\n     *              \"body\": {\r\n     *                  \"path/to/component\": {\"foo\": \"bar\"}\r\n     *              }\r\n     *          }\r\n     *      </script>\r\n     *\r\n     * @example Providing data without selector.\r\n     *      {\r\n     *          \"*\": {\r\n     *              \"path/to/component\": {\"bar\": \"baz\"}\r\n     *          }\r\n     *      }\r\n     */\r\n    return function () {\r\n        var nodes = document.querySelectorAll(scriptSelector);\r\n\r\n        _.toArray(nodes)\r\n            .map(getNodeData)\r\n            .forEach(function (item) {\r\n                _.each(item, processElems);\r\n            });\r\n\r\n        return virtuals.splice(0, virtuals.length);\r\n    };\r\n});\r\n","mage/backend/action-link.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.actionLink', {\r\n        /**\r\n         * Button creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Bind handler on button click\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            var keyCode = $.ui.keyCode;\r\n\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                mousedown: function (e) {\r\n                    this._stopPropogation(e);\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                mouseup: function (e) {\r\n                    this._stopPropogation(e);\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                click: function (e) {\r\n                    this._stopPropogation(e);\r\n                    this._triggerEvent();\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                keydown: function (e) {\r\n                    switch (e.keyCode) {\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            this._stopPropogation(e);\r\n                            this._triggerEvent();\r\n                            break;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                keyup: function (e) {\r\n                    switch (e.keyCode) {\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            this._stopPropogation(e);\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e - event object\r\n         * @private\r\n         */\r\n        _stopPropogation: function (e) {\r\n            e.stopImmediatePropagation();\r\n            e.preventDefault();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _triggerEvent: function () {\r\n            $(this.options.related || this.element)\r\n                .trigger(this.options.event, this.options.eventData ? [this.options.eventData] : [{}]);\r\n        }\r\n    });\r\n\r\n    return $.mage.actionLink;\r\n});\r\n","mage/backend/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global FORM_KEY */\r\ndefine([\r\n    'jquery',\r\n    'mage/apply/main',\r\n    'mage/backend/notification',\r\n    'Magento_Ui/js/lib/knockout/bootstrap',\r\n    'mage/mage',\r\n    'mage/translate'\r\n], function ($, mage, notification) {\r\n    'use strict';\r\n\r\n    var bootstrap;\r\n\r\n    $.ajaxSetup({\r\n        /*\r\n         * @type {string}\r\n         */\r\n        type: 'POST',\r\n\r\n        /**\r\n         * Ajax before send callback.\r\n         *\r\n         * @param {Object} jqXHR - The jQuery XMLHttpRequest object returned by $.ajax()\r\n         * @param {Object} settings\r\n         */\r\n        beforeSend: function (jqXHR, settings) {\r\n            var formKey = typeof FORM_KEY !== 'undefined' ? FORM_KEY : null;\r\n\r\n            if (!settings.url.match(new RegExp('[?&]isAjax=true',''))) {\r\n                settings.url = settings.url.match(\r\n                    new RegExp('\\\\?', 'g')) ?\r\n                    settings.url + '&isAjax=true' :\r\n                    settings.url + '?isAjax=true';\r\n            }\r\n\r\n            if (!settings.data) {\r\n                settings.data = {\r\n                    'form_key': formKey\r\n                };\r\n            } else if ($.type(settings.data) === 'string' &&\r\n                settings.data.indexOf('form_key=') === -1) {\r\n                settings.data += '&' + $.param({\r\n                    'form_key': formKey\r\n                });\r\n            } else if ($.isPlainObject(settings.data) && !settings.data['form_key']) {\r\n                settings.data['form_key'] = formKey;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Ajax complete callback.\r\n         *\r\n         * @param {Object} jqXHR - The jQuery XMLHttpRequest object returned by $.ajax()\r\n         */\r\n        complete: function (jqXHR) {\r\n            var jsonObject;\r\n\r\n            if (jqXHR.readyState === 4) {\r\n                try {\r\n                    jsonObject = $.parseJSON(jqXHR.responseText);\r\n\r\n                    if (jsonObject.ajaxExpired && jsonObject.ajaxRedirect) { //eslint-disable-line max-depth\r\n                        window.location.replace(jsonObject.ajaxRedirect);\r\n                    }\r\n                } catch (e) {}\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Error callback.\r\n         */\r\n        error: function () {\r\n            $('body').notification('clear')\r\n                .notification('add', {\r\n                    error: true,\r\n                    message: $.mage.__(\r\n                        'A technical problem with the server created an error. ' +\r\n                        'Try again to continue what you were doing. If the problem persists, try again later.'\r\n                    ),\r\n\r\n                    /**\r\n                     * @param {String} message\r\n                     */\r\n                    insertMethod: function (message) {\r\n                        var $wrapper = $('<div/>').html(message);\r\n\r\n                        $('.page-main-actions').after($wrapper);\r\n                    }\r\n                });\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Bootstrap application.\r\n     */\r\n    bootstrap = function () {\r\n        /**\r\n         * Init all components defined via data-mage-init attribute\r\n         * and subscribe init action on contentUpdated event\r\n         */\r\n        mage.apply();\r\n\r\n        /*\r\n         * Initialization of notification widget\r\n         */\r\n        notification({}, $('body'));\r\n    };\r\n\r\n    $(bootstrap);\r\n});\r\n","mage/backend/button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('ui.button', $.ui.button, {\r\n        options: {\r\n            eventData: {},\r\n            waitTillResolved: true\r\n        },\r\n\r\n        /**\r\n         * Button creation.\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            if (this.options.event) {\r\n                this.options.target = this.options.target || this.element;\r\n                this._bind();\r\n            }\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Bind handler on button click.\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this.element\r\n                .off('click.button')\r\n                .on('click.button', $.proxy(this._click, this));\r\n        },\r\n\r\n        /**\r\n         * Button click handler.\r\n         * @protected\r\n         */\r\n        _click: function () {\r\n            var options = this.options;\r\n\r\n            $(options.target).trigger(options.event, [options.eventData]);\r\n        }\r\n    });\r\n\r\n    return $.ui.button;\r\n});\r\n","mage/backend/editablemultiselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\n/* global EditableMultiselect */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'jquery/editableMultiselect/js/jquery.editable',\r\n    'jquery/editableMultiselect/js/jquery.multiselect'\r\n], function ($, alert, confirm) {\r\n    /**\r\n     * Editable multiselect wrapper for multiselects\r\n     * This class is defined in global scope ('var' is not needed).\r\n     *\r\n     *  @param {Object} settings - settings object.\r\n     *  @param {String} settings.add_button_caption - caption of the 'Add New Value' button\r\n     *  @param {String} settings.new_url - URL to which new request has to be submitted\r\n     *  @param {String} settings.save_url - URL to which save request has to be submitted\r\n     *  @param {String} settings.delete_url - URL to which delete request has to be submitted\r\n     *  @param {String} settings.delete_confirm_message - confirmation message that is shown to user during\r\n     *      delete operation\r\n     *  @param {String} settings.target_select_id - HTML ID of target select element\r\n     *  @param {Hash} settings.submit_data - extra parameters to send with new/edit/delete requests\r\n     *  @param {String} settings.entity_value_name - name of the request parameter that represents select option text\r\n     *  @param {String} settings.entity_id_name - name of the request parameter that represents select option value\r\n     *  @param {Boolean} settings.is_entry_editable - flag that shows if user can add/edit/remove data\r\n     *\r\n     * @constructor\r\n     */\r\n    window.EditableMultiselect = function (settings) {\r\n\r\n        this.settings = settings || {};\r\n        this.addButtonCaption = this.settings['add_button_caption'] || 'Add new value';\r\n        this.newUrl = this.settings['new_url'];\r\n        this.saveUrl = this.settings['save_url'];\r\n        this.deleteUrl = this.settings['delete_url'];\r\n        this.deleteConfirmMessage = this.settings['delete_confirm_message'];\r\n        this.targetSelectId = this.settings['target_select_id'];\r\n        this.submitData = this.settings['submit_data'] || {};\r\n        this.entityIdName = this.settings['entity_id_name'] || 'entity_id';\r\n        this.entityValueName = this.settings['entity_value_name'] || 'entity_value';\r\n        this.isEntityEditable = this.settings['is_entity_editable'] || false;\r\n\r\n        /**\r\n         * Initialize editable multiselect (make it visible in UI)\r\n         */\r\n        EditableMultiselect.prototype.init = function () {\r\n            var self = this,\r\n                mselectOptions = {\r\n                    addText: this.addButtonCaption,\r\n\r\n                    /**\r\n                     * @param {*} value\r\n                     * @param {*} options\r\n                     */\r\n                    mselectInputSubmitCallback: function (value, options) {\r\n                        self.createEntity(value, options);\r\n                    }\r\n                },\r\n                mselectList;\r\n\r\n            if (!this.isEntityEditable) {\r\n                // Override default layout of editable multiselect\r\n                mselectOptions.layout = '<section class=\"block %mselectListClass%\">' +\r\n                    '<div class=\"block-content\"><div class=\"%mselectItemsWrapperClass%\">' +\r\n                    '%items%' +\r\n                    '</div></div>' +\r\n                    '<div class=\"%mselectInputContainerClass%\">' +\r\n                    '<input type=\"text\" class=\"%mselectInputClass%\" title=\"%inputTitle%\"/>' +\r\n                    '<span class=\"%mselectButtonCancelClass%\" title=\"%cancelText%\"></span>' +\r\n                    '<span class=\"%mselectButtonSaveClass%\" title=\"Add\"></span>' +\r\n                    '</div>' +\r\n                    '</section>';\r\n            }\r\n\r\n            $('#' + this.targetSelectId).multiselect(mselectOptions);\r\n\r\n            // Make multiselect editable if needed\r\n            if (this.isEntityEditable) {\r\n                this.makeMultiselectEditable();\r\n\r\n                // Root element of HTML markup that represents select element in UI\r\n                mselectList = $('#' + this.targetSelectId).next();\r\n                this.attachEventsToControls(mselectList);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Attach required event handlers to control elements of editable multiselect\r\n         *\r\n         * @param {Object} mselectList\r\n         */\r\n        EditableMultiselect.prototype.attachEventsToControls = function (mselectList) {\r\n            mselectList.on('click.mselect-delete', '.mselect-delete', {\r\n                container: this\r\n            }, function (event) {\r\n                // Pass the clicked button to container\r\n                event.data.container.deleteEntity({\r\n                    'delete_button': this\r\n                });\r\n            });\r\n\r\n            mselectList.on('click.mselect-checked', '.mselect-list-item input', {\r\n                container: this\r\n            }, function (event) {\r\n                var el = $(this),\r\n                    checkedClassName = 'mselect-checked';\r\n\r\n                el[el.is(':checked') ? 'addClass' : 'removeClass'](checkedClassName);\r\n                event.data.container.makeMultiselectEditable();\r\n            });\r\n\r\n            mselectList.on('click.mselect-edit', '.mselect-edit', {\r\n                container: this\r\n            }, function (event) {\r\n                event.data.container.makeMultiselectEditable();\r\n                $(this).parent().find('label span').trigger('dblclick');\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Make multiselect editable\r\n         */\r\n        EditableMultiselect.prototype.makeMultiselectEditable = function () {\r\n            var entityIdName = this.entityIdName,\r\n                entityValueName = this.entityValueName,\r\n                selectList = $('#' + this.targetSelectId).next();\r\n\r\n            selectList.find('.mselect-list-item:not(.mselect-list-item-not-editable) label span').editable(this.saveUrl,\r\n            {\r\n                type: 'text',\r\n                submit: '<button class=\"mselect-save\" title=\"Save\" type=\"submit\" />',\r\n                cancel: '<span class=\"mselect-cancel\" title=\"Cancel\"></span>',\r\n                event: 'dblclick',\r\n                placeholder: '',\r\n\r\n                /**\r\n                 * Is checked.\r\n                 */\r\n                isChecked: function () {\r\n                    var that = $(this),\r\n                        checked;\r\n\r\n                    if (!that.closest('.mselect-list-item').hasClass('mselect-disabled')) {\r\n                        checked = that.parent().find('[type=checkbox]').prop('disabled');\r\n                        that.parent().find('[type=checkbox]').prop({\r\n                            disabled: !checked\r\n                        });\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {*} value\r\n                 * @param {Object} sett\r\n                 * @return {*}\r\n                 */\r\n                data: function (value, sett) {\r\n                    var retval;\r\n\r\n                    sett.isChecked.apply(this, [sett]);\r\n\r\n                    if (typeof value === 'string') {\r\n                        retval = value.unescapeHTML();\r\n\r\n                        return retval;\r\n                    }\r\n\r\n                    return value;\r\n                },\r\n                submitdata: this.submitData,\r\n                onblur: 'cancel',\r\n                name: entityValueName,\r\n                ajaxoptions: {\r\n                    dataType: 'json'\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} sett\r\n                 * @param {*} original\r\n                 */\r\n                onsubmit: function (sett, original) {\r\n                    var select = $(original).closest('.mselect-list').prev(),\r\n                        current = $(original).closest('.mselect-list-item').index(),\r\n                        entityId = select.find('option').eq(current).val(),\r\n                        entityInfo = {};\r\n\r\n                    entityInfo[entityIdName] = entityId;\r\n                    sett.submitdata = $.extend(sett.submitdata || {}, entityInfo);\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} result\r\n                 * @param {Object} sett\r\n                 */\r\n                callback: function (result, sett) {\r\n                    var select, current;\r\n\r\n                    sett.isChecked.apply(this, [sett]);\r\n                    select = $(this).closest('.mselect-list').prev();\r\n                    current = $(this).closest('.mselect-list-item').index();\r\n\r\n                    if (result.success) {\r\n                        if (typeof result[entityValueName] === 'string') {\r\n                            select.find('option').eq(current).val(result[entityIdName]).text(result[entityValueName]);\r\n                            $(this).html(result[entityValueName].escapeHTML());\r\n                        }\r\n                    } else {\r\n                        alert({\r\n                            content: result['error_message']\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Callback function that is called when admin adds new value to select\r\n         *\r\n         * @param {*} value\r\n         * @param {Object} options - list of settings of multiselect\r\n         */\r\n        EditableMultiselect.prototype.createEntity = function (value, options) {\r\n            var select, entityIdName, entityValueName, entityInfo, postData, ajaxOptions;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            select = $('#' + this.targetSelectId),\r\n            entityIdName = this.entityIdName,\r\n            entityValueName = this.entityValueName,\r\n            entityInfo = {};\r\n            entityInfo[entityIdName] = null;\r\n            entityInfo[entityValueName] = value;\r\n\r\n            postData = $.extend(entityInfo, this.submitData);\r\n\r\n            ajaxOptions = {\r\n                type: 'POST',\r\n                data: postData,\r\n                dataType: 'json',\r\n                url: this.newUrl,\r\n\r\n                /**\r\n                 * @param {Object} result\r\n                 */\r\n                success: function (result) {\r\n                    var resultEntityValueName, mselectItemHtml, sectionBlock, itemsWrapper, inputSelector;\r\n\r\n                    if (result.success) {\r\n                        resultEntityValueName = '';\r\n\r\n                        if (typeof result[entityValueName] === 'string') {\r\n                            resultEntityValueName = result[entityValueName].escapeHTML();\r\n                        } else {\r\n                            resultEntityValueName = result[entityValueName];\r\n                        }\r\n                        // Add item to initial select element\r\n                        select.append('<option value=\"' + result[entityIdName] + '\" selected=\"selected\">' +\r\n                        resultEntityValueName + '</option>');\r\n                        // Add editable multiselect item\r\n                        mselectItemHtml = $(options.item.replace(/%value%|%label%/gi, resultEntityValueName)\r\n                                .replace(/%mselectDisabledClass%|%iseditable%|%isremovable%/gi, '')\r\n                                .replace(/%mselectListItemClass%/gi, options.mselectListItemClass))\r\n                                .find('[type=checkbox]')\r\n                                .attr('checked', true)\r\n                                .addClass(options.mselectCheckedClass)\r\n                                .end();\r\n                        sectionBlock = select.nextAll('section.block:first');\r\n                        itemsWrapper = sectionBlock.find('.' + options.mselectItemsWrapperClass + '');\r\n\r\n                        if (itemsWrapper.children('.' + options.mselectListItemClass + '').length) {\r\n                            itemsWrapper.children('.' + options.mselectListItemClass + ':last').after(mselectItemHtml);\r\n                        } else {\r\n                            itemsWrapper.prepend(mselectItemHtml);\r\n                        }\r\n                        // Trigger blur event on input field, that is used to add new value, to hide it\r\n                        inputSelector = '.' + options.mselectInputContainerClass + ' [type=text].' +\r\n                            options.mselectInputClass + '';\r\n                        sectionBlock.find(inputSelector).trigger('blur');\r\n                    } else {\r\n                        alert({\r\n                            content: result['error_message']\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            $.ajax(ajaxOptions);\r\n        };\r\n\r\n        /**\r\n         * Callback function that is called when user tries to delete value from select\r\n         *\r\n         * @param {Object} options\r\n         */\r\n        EditableMultiselect.prototype.deleteEntity = function (options) {\r\n            var self = this;\r\n\r\n            if (options['delete_button']) {\r\n                confirm({\r\n                    content: this.deleteConfirmMessage,\r\n                    actions: {\r\n                        /**\r\n                         * Confirm.\r\n                         */\r\n                        confirm: function () {\r\n                            // Button that has been clicked\r\n                            var deleteButton = $(options['delete_button']),\r\n                                index = deleteButton.parent().index(),\r\n                                select = deleteButton.closest('.mselect-list').prev(),\r\n                                entityId = select.find('option').eq(index).val(),\r\n                                entityInfo = {},\r\n                                postData, ajaxOptions;\r\n\r\n                            entityInfo[self.entityIdName] = entityId;\r\n                            postData = $.extend(entityInfo, self.submitData);\r\n\r\n                            ajaxOptions = {\r\n                                type: 'POST',\r\n                                data: postData,\r\n                                dataType: 'json',\r\n                                url: self.deleteUrl,\r\n\r\n                                /**\r\n                                 * @param {Object} result\r\n                                 */\r\n                                success: function (result) {\r\n                                    if (result.success) {\r\n                                        deleteButton.parent().remove();\r\n                                        select.find('option').eq(index).remove();\r\n                                    } else {\r\n                                        alert({\r\n                                            content: result['error_message']\r\n                                        });\r\n                                    }\r\n                                }\r\n                            };\r\n                            $.ajax(ajaxOptions);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    };\r\n});\r\n","mage/backend/floating-header.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.floatingHeader', {\r\n        options: {\r\n            placeholderAttrs: {\r\n                'class': 'page-actions-placeholder'\r\n            },\r\n            fixedClass: '_fixed',\r\n            hiddenClass: '_hidden',\r\n            title: '.page-title-wrapper .page-title',\r\n            pageMainActions: '.page-main-actions',\r\n            contains: '[data-role=modal]'\r\n        },\r\n\r\n        /**\r\n         * Widget initialization\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var title = $(this.options.title).text(),\r\n                wrapped = this.element.find('.page-actions-buttons').children();\r\n\r\n            if (this.element.parents(this.options.contains).length) {\r\n                return this;\r\n            }\r\n\r\n            this._setVars();\r\n            this._bind();\r\n            this.element.find('script').remove();\r\n\r\n            if (wrapped.length) {\r\n                wrapped\r\n                    .unwrap()   // .page-actions-buttons\r\n                    .unwrap();  // .page-actions-inner\r\n            }\r\n            this.element.wrapInner($('<div/>', {\r\n                'class': 'page-actions-buttons'\r\n            }));\r\n            this.element.wrapInner($('<div/>', {\r\n                'class': 'page-actions-inner', 'data-title': title\r\n            }));\r\n            this.element.removeClass('floating-header');\r\n        },\r\n\r\n        /**\r\n         * Set privat variables on load, for performance purposes\r\n         * @private\r\n         */\r\n        _setVars: function () {\r\n            this._placeholder = this.element.before($('<div/>', this.options.placeholderAttrs)).prev();\r\n            this._offsetTop = this._placeholder.offset().top;\r\n            this._height = this.element\r\n                .parents(this.options.pageMainActions)\r\n                .outerHeight();\r\n        },\r\n\r\n        /**\r\n         * Event binding, will monitor scroll and resize events (resize events left for backward compat)\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._on(window, {\r\n                scroll: this._handlePageScroll,\r\n                resize: this._handlePageScroll\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Event handler for setting fixed positioning\r\n         * @private\r\n         */\r\n        _handlePageScroll: function () {\r\n            var isActive = $(window).scrollTop() > this._offsetTop;\r\n\r\n            if (isActive) {\r\n                this.element\r\n                    .addClass(this.options.fixedClass)\r\n                    .parents(this.options.pageMainActions)\r\n                    .addClass(this.options.hiddenClass);\r\n            } else {\r\n                this.element\r\n                    .removeClass(this.options.fixedClass)\r\n                    .parents(this.options.pageMainActions)\r\n                    .removeClass(this.options.hiddenClass);\r\n            }\r\n\r\n            this._placeholder.height(isActive ? this._height : '');\r\n        },\r\n\r\n        /**\r\n         * Widget destroy functionality\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            this._placeholder.remove();\r\n            this._off($(window));\r\n        }\r\n    });\r\n\r\n    return $.mage.floatingHeader;\r\n});\r\n","mage/backend/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.form', {\r\n        options: {\r\n            handlersData: {\r\n                save: {},\r\n                saveAndContinueEdit: {\r\n                    action: {\r\n                        args: {\r\n                            back: 'edit'\r\n                        }\r\n                    }\r\n                },\r\n                preview: {\r\n                    target: '_blank'\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Form creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Set form attributes to initial state\r\n         * @protected\r\n         */\r\n        _rollback: function () {\r\n            if (this.oldAttributes) {\r\n                this.element.prop(this.oldAttributes);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if field value is changed\r\n         * @protected\r\n         * @param {Object} e - event object\r\n         */\r\n        _changesObserver: function (e) {\r\n            var target = $(e.target),\r\n                changed;\r\n\r\n            if (e.type === 'focus' || e.type === 'focusin') {\r\n                this.currentField = {\r\n                    statuses: {\r\n                        checked: target.is(':checked'),\r\n                        selected: target.is(':selected')\r\n                    },\r\n                    val: target.val()\r\n                };\r\n\r\n            } else {\r\n                if (this.currentField) { //eslint-disable-line no-lonely-if\r\n                    changed = target.val() !== this.currentField.val ||\r\n                        target.is(':checked') !== this.currentField.statuses.checked ||\r\n                        target.is(':selected') !== this.currentField.statuses.selected;\r\n\r\n                    if (changed) { //eslint-disable-line max-depth\r\n                        target.trigger('changed');\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get array with handler names\r\n         * @protected\r\n         * @return {Array} Array of handler names\r\n         */\r\n        _getHandlers: function () {\r\n            var handlers = [];\r\n\r\n            $.each(this.options.handlersData, function (key) {\r\n                handlers.push(key);\r\n            });\r\n\r\n            return handlers;\r\n        },\r\n\r\n        /**\r\n         * Store initial value of form attribute\r\n         * @param {String} attrName - name of attribute\r\n         * @protected\r\n         */\r\n        _storeAttribute: function (attrName) {\r\n            var prop;\r\n\r\n            this.oldAttributes = this.oldAttributes || {};\r\n\r\n            if (!this.oldAttributes[attrName]) {\r\n                prop = this.element.attr(attrName);\r\n                this.oldAttributes[attrName] = prop ? prop : '';\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind handlers\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this.element\r\n                .on(this._getHandlers().join(' '), $.proxy(this._submit, this))\r\n                .on('focus blur focusin focusout', $.proxy(this._changesObserver, this));\r\n        },\r\n\r\n        /**\r\n         * Get action url for form\r\n         * @param {Object|String} data - object with parameters for action url or url string\r\n         * @return {String} action url\r\n         */\r\n        _getActionUrl: function (data) {\r\n            if ($.type(data) === 'object') {\r\n                return this._buildURL(this.oldAttributes.action, data.args);\r\n            }\r\n\r\n            return $.type(data) === 'string' ? data : this.oldAttributes.action;\r\n        },\r\n\r\n        /**\r\n         * Add additional parameters into URL\r\n         * @param {String} url - original url\r\n         * @param {Object} params - object with parameters for action url\r\n         * @return {String} action url\r\n         * @private\r\n         */\r\n        _buildURL: function (url, params) {\r\n            var concat = /\\?/.test(url) ? ['&', '='] : ['/', '/'];\r\n\r\n            url = url.replace(/[\\/&]+$/, '');\r\n            $.each(params, function (key, value) {\r\n                url += concat[0] + key + concat[1] + window.encodeURIComponent(value);\r\n            });\r\n\r\n            return url + (concat[0] === '/' ? '/' : '');\r\n        },\r\n\r\n        /**\r\n         * Prepare data for form attributes\r\n         * @protected\r\n         * @param {Object} data\r\n         * @return {Object}\r\n         */\r\n        _processData: function (data) {\r\n            $.each(data, $.proxy(function (attrName, attrValue) {\r\n                this._storeAttribute(attrName);\r\n\r\n                if (attrName === 'action') {\r\n                    data[attrName] = this._getActionUrl(attrValue);\r\n                }\r\n            }, this));\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Get additional data before form submit\r\n         * @protected\r\n         * @param {String} handlerName\r\n         * @param {Object} data\r\n         */\r\n        _beforeSubmit: function (handlerName, data) {\r\n            var submitData = {},\r\n                event = new $.Event('beforeSubmit');\r\n\r\n            this.element.trigger(event, [submitData, handlerName]);\r\n            data = $.extend(\r\n                true, {},\r\n                this.options.handlersData[handlerName] || {},\r\n                submitData,\r\n                data\r\n            );\r\n            this.element.prop(this._processData(data));\r\n\r\n            return !event.isDefaultPrevented();\r\n        },\r\n\r\n        /**\r\n         * Submit the form\r\n         * @param {Object} e - event object\r\n         * @param {Object} data - event data object\r\n         */\r\n        _submit: function (e, data) {\r\n            this._rollback();\r\n\r\n            if (this._beforeSubmit(e.type, data) !== false) {\r\n                this.element.trigger('submit', e);\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.form;\r\n});\r\n","mage/backend/jstree-mixin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function () {\r\n        $.jstree._themes = require.s.contexts._.config.baseUrl + 'jquery/jstree/themes/';\r\n    };\r\n});\r\n","mage/backend/menu.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.menu', {\r\n        widgetEventPrefix: 'menu',\r\n        version: '1.10.1',\r\n        defaultElement: '<ul>',\r\n        delay: 300,\r\n        options: {\r\n            icons: {\r\n                submenu: 'ui-icon-carat-1-e'\r\n            },\r\n            menus: 'ul',\r\n            position: {\r\n                my: 'left top',\r\n                at: 'right top'\r\n            },\r\n            role: 'menu',\r\n\r\n            // callbacks\r\n            blur: null,\r\n            focus: null,\r\n            select: null\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.activeMenu = this.element;\r\n            // flag used to prevent firing of the click handler\r\n            // as the event bubbles up through nested menus\r\n            this.mouseHandled = false;\r\n            this.element\r\n                .uniqueId()\r\n                .addClass('ui-menu ui-widget ui-widget-content ui-corner-all')\r\n                .toggleClass('ui-menu-icons', !!this.element.find('.ui-icon').length)\r\n                .attr({\r\n                    role: this.options.role,\r\n                    tabIndex: 0\r\n                })\r\n                // need to catch all clicks on disabled menu\r\n                // not possible through _on\r\n                .bind('click' + this.eventNamespace, $.proxy(function (event) {\r\n                    if (this.options.disabled) {\r\n                        event.preventDefault();\r\n                    }\r\n                }, this));\r\n\r\n            if (this.options.disabled) {\r\n                this.element\r\n                    .addClass('ui-state-disabled')\r\n                    .attr('aria-disabled', 'true');\r\n            }\r\n\r\n            this._on({\r\n                /**\r\n                 * Prevent focus from sticking to links inside menu after clicking\r\n                 * them (focus should always stay on UL during navigation).\r\n                 */\r\n                'mousedown .ui-menu-item > a': function (event) {\r\n                    event.preventDefault();\r\n                },\r\n\r\n                /**\r\n                 * Prevent focus from sticking to links inside menu after clicking\r\n                 * them (focus should always stay on UL during navigation).\r\n                 */\r\n                'click .ui-state-disabled > a': function (event) {\r\n                    event.preventDefault();\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'click .ui-menu-item:has(a)': function (event) {\r\n                    var target = $(event.target).closest('.ui-menu-item');\r\n\r\n                    if (!this.mouseHandled && target.not('.ui-state-disabled').length) {\r\n                        this.mouseHandled = true;\r\n\r\n                        this.select(event);\r\n                        // Open submenu on click\r\n                        if (target.has('.ui-menu').length) {\r\n                            this.expand(event);\r\n                        } else if (!this.element.is(':focus')) {\r\n                            // Redirect focus to the menu\r\n                            this.element.trigger('focus', [true]);\r\n\r\n                            // If the active item is on the top level, let it stay active.\r\n                            // Otherwise, blur the active item since it is no longer visible.\r\n                            if (this.active && this.active.parents('.ui-menu').length === 1) { //eslint-disable-line\r\n                                clearTimeout(this.timer);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'mouseenter .ui-menu-item': function (event) {\r\n                    var target = $(event.currentTarget);\r\n\r\n                    // Remove ui-state-active class from siblings of the newly focused menu item\r\n                    // to avoid a jump caused by adjacent elements both having a class with a border\r\n                    target.siblings().children('.ui-state-active').removeClass('ui-state-active');\r\n                    this.focus(event, target);\r\n                },\r\n                mouseleave: 'collapseAll',\r\n                'mouseleave .ui-menu': 'collapseAll',\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 * @param {*} keepActiveItem\r\n                 */\r\n                focus: function (event, keepActiveItem) {\r\n                    // If there's already an active item, keep it active\r\n                    // If not, activate the first item\r\n                    var item = this.active || this.element.children('.ui-menu-item').eq(0);\r\n\r\n                    if (!keepActiveItem) {\r\n                        this.focus(event, item);\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                blur: function (event) {\r\n                    this._delay(function () {\r\n                        if (!$.contains(this.element[0], this.document[0].activeElement)) {\r\n                            this.collapseAll(event);\r\n                        }\r\n                    });\r\n                },\r\n                keydown: '_keydown'\r\n            });\r\n\r\n            this.refresh();\r\n\r\n            // Clicks outside of a menu collapse any open menus\r\n            this._on(this.document, {\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                click: function (event) {\r\n                    if (!$(event.target).closest('.ui-menu').length) {\r\n                        this.collapseAll(event);\r\n                    }\r\n\r\n                    // Reset the mouseHandled flag\r\n                    this.mouseHandled = false;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            // Destroy (sub)menus\r\n            this.element\r\n                .removeAttr('aria-activedescendant')\r\n                .find('.ui-menu').addBack()\r\n                .removeClass('ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons')\r\n                .removeAttr('role')\r\n                .removeAttr('tabIndex')\r\n                .removeAttr('aria-labelledby')\r\n                .removeAttr('aria-expanded')\r\n                .removeAttr('aria-hidden')\r\n                .removeAttr('aria-disabled')\r\n                .removeUniqueId()\r\n                .show();\r\n\r\n            // Destroy menu items\r\n            this.element.find('.ui-menu-item')\r\n                .removeClass('ui-menu-item')\r\n                .removeAttr('role')\r\n                .removeAttr('aria-disabled')\r\n                .children('a')\r\n                .removeUniqueId()\r\n                .removeClass('ui-corner-all ui-state-hover')\r\n                .removeAttr('tabIndex')\r\n                .removeAttr('role')\r\n                .removeAttr('aria-haspopup')\r\n                .children().each(function () {\r\n                    var elem = $(this);\r\n\r\n                    if (elem.data('ui-menu-submenu-carat')) {\r\n                        elem.remove();\r\n                    }\r\n                });\r\n\r\n            // Destroy menu dividers\r\n            this.element.find('.ui-menu-divider').removeClass('ui-menu-divider ui-widget-content');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var match, prev, character, skip, regex,\r\n                preventDefault = true;\r\n\r\n            /**\r\n             * @param {String} value\r\n             */\r\n            function escape(value) {\r\n                return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n            }\r\n\r\n            switch (event.keyCode) {\r\n                case $.ui.keyCode.PAGE_UP:\r\n                    this.previousPage(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.PAGE_DOWN:\r\n                    this.nextPage(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.HOME:\r\n                    this._move('first', 'first', event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.END:\r\n                    this._move('last', 'last', event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.UP:\r\n                    this.previous(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.DOWN:\r\n                    this.next(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.LEFT:\r\n                    this.collapse(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.RIGHT:\r\n                    if (this.active && !this.active.is('.ui-state-disabled')) {\r\n                        this.expand(event);\r\n                    }\r\n                    break;\r\n\r\n                case $.ui.keyCode.ENTER:\r\n                case $.ui.keyCode.SPACE:\r\n                    this._activate(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.ESCAPE:\r\n                    this.collapse(event);\r\n                    break;\r\n\r\n                default:\r\n                    preventDefault = false;\r\n                    prev = this.previousFilter || '';\r\n                    character = String.fromCharCode(event.keyCode);\r\n                    skip = false;\r\n\r\n                    clearTimeout(this.filterTimer);\r\n\r\n                    if (character === prev) {\r\n                        skip = true;\r\n                    } else {\r\n                        character = prev + character;\r\n                    }\r\n\r\n                    regex = new RegExp('^' + escape(character), 'i');\r\n                    match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                        return regex.test($(this).children('a').text());\r\n                    });\r\n                    match = skip && match.index(this.active.next()) !== -1 ?\r\n                        this.active.nextAll('.ui-menu-item') :\r\n                        match;\r\n\r\n                    // If no matches on the current filter, reset to the last character pressed\r\n                    // to move down the menu to the first item that starts with that character\r\n                    if (!match.length) {\r\n                        character = String.fromCharCode(event.keyCode);\r\n                        regex = new RegExp('^' + escape(character), 'i');\r\n                        match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                            return regex.test($(this).children('a').text());\r\n                        });\r\n                    }\r\n\r\n                    if (match.length) {\r\n                        this.focus(event, match);\r\n\r\n                        if (match.length > 1) { //eslint-disable-line max-depth\r\n                            this.previousFilter = character;\r\n                            this.filterTimer = this._delay(function () {\r\n                                delete this.previousFilter;\r\n                            }, 1000);\r\n                        } else {\r\n                            delete this.previousFilter;\r\n                        }\r\n                    } else {\r\n                        delete this.previousFilter;\r\n                    }\r\n            }\r\n\r\n            if (preventDefault) {\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _activate: function (event) {\r\n            if (!this.active.is('.ui-state-disabled')) {\r\n                if (this.active.children('a[aria-haspopup=\"true\"]').length) {\r\n                    this.expand(event);\r\n                } else {\r\n                    this.select(event);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Refresh.\r\n         */\r\n        refresh: function () {\r\n            var menus,\r\n                icon = this.options.icons.submenu,\r\n                submenus = this.element.find(this.options.menus);\r\n\r\n            // Initialize nested menus\r\n            submenus.filter(':not(.ui-menu)')\r\n                .addClass('ui-menu ui-widget ui-widget-content ui-corner-all')\r\n                .hide()\r\n                .attr({\r\n                    role: this.options.role,\r\n                    'aria-hidden': 'true',\r\n                    'aria-expanded': 'false'\r\n                })\r\n                .each(function () {\r\n                    var menu = $(this),\r\n                        item = menu.prev('a'),\r\n                        submenuCarat = $('<span>')\r\n                            .addClass('ui-menu-icon ui-icon ' + icon)\r\n                            .data('ui-menu-submenu-carat', true);\r\n\r\n                    item\r\n                        .attr('aria-haspopup', 'true')\r\n                        .prepend(submenuCarat);\r\n                    menu.attr('aria-labelledby', item.attr('id'));\r\n                });\r\n\r\n            menus = submenus.add(this.element);\r\n\r\n            // Don't refresh list items that are already adapted\r\n            menus.children(':not(.ui-menu-item):has(a)')\r\n                .addClass('ui-menu-item')\r\n                .attr('role', 'presentation')\r\n                .children('a')\r\n                .uniqueId()\r\n                .addClass('ui-corner-all')\r\n                .attr({\r\n                    tabIndex: -1,\r\n                    role: this._itemRole()\r\n                });\r\n\r\n            // Initialize unlinked menu-items containing spaces and/or dashes only as dividers\r\n            menus.children(':not(.ui-menu-item)').each(function () {\r\n                var item = $(this);\r\n\r\n                // hyphen, em dash, en dash\r\n                if (!/[^\\-\\u2014\\u2013\\s]/.test(item.text())) {\r\n                    item.addClass('ui-widget-content ui-menu-divider');\r\n                }\r\n            });\r\n\r\n            // Add aria-disabled attribute to any disabled menu item\r\n            menus.children('.ui-state-disabled').attr('aria-disabled', 'true');\r\n\r\n            // If the active item has been removed, blur the menu\r\n            if (this.active && !$.contains(this.element[0], this.active[0])) {\r\n                this.blur();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _itemRole: function () {\r\n            return {\r\n                menu: 'menuitem',\r\n                listbox: 'option'\r\n            }[this.options.role];\r\n        },\r\n\r\n        /**\r\n         * @param {String} key\r\n         * @param {*} value\r\n         * @private\r\n         */\r\n        _setOption: function (key, value) {\r\n            if (key === 'icons') {\r\n                this.element.find('.ui-menu-icon')\r\n                    .removeClass(this.options.icons.submenu)\r\n                    .addClass(value.submenu);\r\n            }\r\n            this._super(key, value);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} item\r\n         */\r\n        focus: function (event, item) {\r\n            var nested, focused;\r\n\r\n            this.blur(event, event && event.type === 'focus');\r\n\r\n            this._scrollIntoView(item);\r\n\r\n            this.active = item.first();\r\n            focused = this.active.children('a').addClass('ui-state-focus');\r\n            // Only update aria-activedescendant if there's a role\r\n            // otherwise we assume focus is managed elsewhere\r\n            if (this.options.role) {\r\n                this.element.attr('aria-activedescendant', focused.attr('id'));\r\n            }\r\n\r\n            // Highlight active parent menu item, if any\r\n            this.active\r\n                .parent()\r\n                .closest('.ui-menu-item')\r\n                .children('a:first')\r\n                .addClass('ui-state-active');\r\n\r\n            if (event && event.type === 'keydown') {\r\n                this._close();\r\n            } else {\r\n                this.timer = this._delay(function () {\r\n                    this._close();\r\n                }, this.delay);\r\n            }\r\n\r\n            nested = item.children('.ui-menu');\r\n\r\n            if (nested.length && /^mouse/.test(event.type)) {\r\n                this._startOpening(nested);\r\n            }\r\n            this.activeMenu = item.parent();\r\n\r\n            this._trigger('focus', event, {\r\n                item: item\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @private\r\n         */\r\n        _scrollIntoView: function (item) {\r\n            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\r\n\r\n            if (this._hasScroll()) {\r\n                borderTop = parseFloat($.css(this.activeMenu[0], 'borderTopWidth')) || 0;\r\n                paddingTop = parseFloat($.css(this.activeMenu[0], 'paddingTop')) || 0;\r\n                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\r\n                scroll = this.activeMenu.scrollTop();\r\n                elementHeight = this.activeMenu.height();\r\n                itemHeight = item.height();\r\n\r\n                if (offset < 0) {\r\n                    this.activeMenu.scrollTop(scroll + offset);\r\n                } else if (offset + itemHeight > elementHeight) {\r\n                    this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {*} fromFocus\r\n         */\r\n        blur: function (event, fromFocus) {\r\n            if (!fromFocus) {\r\n                clearTimeout(this.timer);\r\n            }\r\n\r\n            if (!this.active) {\r\n                return;\r\n            }\r\n\r\n            this.active.children('a').removeClass('ui-state-focus');\r\n            this.active = null;\r\n\r\n            this._trigger('blur', event, {\r\n                item: this.active\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {*} submenu\r\n         * @private\r\n         */\r\n        _startOpening: function (submenu) {\r\n            clearTimeout(this.timer);\r\n\r\n            // Don't open if already open fixes a Firefox bug that caused a .5 pixel\r\n            // shift in the submenu position when mousing over the carat icon\r\n            if (submenu.attr('aria-hidden') !== 'true') {\r\n                return;\r\n            }\r\n\r\n            this.timer = this._delay(function () {\r\n                this._close();\r\n                this._open(submenu);\r\n            }, this.delay);\r\n        },\r\n\r\n        /**\r\n         * @param {*} submenu\r\n         * @private\r\n         */\r\n        _open: function (submenu) {\r\n            var position = $.extend({\r\n                of: this.active\r\n            }, this.options.position);\r\n\r\n            clearTimeout(this.timer);\r\n            this.element.find('.ui-menu').not(submenu.parents('.ui-menu'))\r\n                .hide()\r\n                .attr('aria-hidden', 'true');\r\n\r\n            submenu\r\n                .show()\r\n                .removeAttr('aria-hidden')\r\n                .attr('aria-expanded', 'true')\r\n                .position(position);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {*} all\r\n         */\r\n        collapseAll: function (event, all) {\r\n            clearTimeout(this.timer);\r\n            this.timer = this._delay(function () {\r\n                // If we were passed an event, look for the submenu that contains the event\r\n                var currentMenu = all ? this.element :\r\n                    $(event && event.target).closest(this.element.find('.ui-menu'));\r\n\r\n                // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway\r\n                if (!currentMenu.length) {\r\n                    currentMenu = this.element;\r\n                }\r\n\r\n                this._close(currentMenu);\r\n\r\n                this.blur(event);\r\n                this.activeMenu = currentMenu;\r\n            }, this.delay);\r\n        },\r\n\r\n        // With no arguments, closes the currently active menu - if nothing is active\r\n        // it closes all menus.  If passed an argument, it will search for menus BELOW\r\n        /**\r\n         * With no arguments, closes the currently active menu - if nothing is active\r\n         * it closes all menus.  If passed an argument, it will search for menus BELOW.\r\n         *\r\n         * @param {*} startMenu\r\n         * @private\r\n         */\r\n        _close: function (startMenu) {\r\n            if (!startMenu) {\r\n                startMenu = this.active ? this.active.parent() : this.element;\r\n            }\r\n\r\n            startMenu\r\n                .find('.ui-menu')\r\n                .hide()\r\n                .attr('aria-hidden', 'true')\r\n                .attr('aria-expanded', 'false')\r\n                .end()\r\n                .find('a.ui-state-active')\r\n                .removeClass('ui-state-active');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        collapse: function (event) {\r\n            var newItem = this.active &&\r\n                this.active.parent().closest('.ui-menu-item', this.element);\r\n\r\n            if (newItem && newItem.length) {\r\n                this._close();\r\n                this.focus(event, newItem);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        expand: function (event) {\r\n            var newItem = this.active &&\r\n                this.active\r\n                    .children('.ui-menu ')\r\n                    .children('.ui-menu-item')\r\n                    .first();\r\n\r\n            if (newItem && newItem.length) {\r\n                this._open(newItem.parent());\r\n\r\n                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\r\n                this._delay(function () {\r\n                    this.focus(event, newItem);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        next: function (event) {\r\n            this._move('next', 'first', event);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        previous: function (event) {\r\n            this._move('prev', 'last', event);\r\n        },\r\n\r\n        /**\r\n         * @return {null|Boolean}\r\n         */\r\n        isFirstItem: function () {\r\n            return this.active && !this.active.prevAll('.ui-menu-item').length;\r\n        },\r\n\r\n        /**\r\n         * @return {null|Boolean}\r\n         */\r\n        isLastItem: function () {\r\n            return this.active && !this.active.nextAll('.ui-menu-item').length;\r\n        },\r\n\r\n        /**\r\n         * @param {*} direction\r\n         * @param {*} filter\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _move: function (direction, filter, event) {\r\n            var next;\r\n\r\n            if (this.active) {\r\n                if (direction === 'first' || direction === 'last') {\r\n                    next = this.active\r\n                        [direction === 'first' ? 'prevAll' : 'nextAll']('.ui-menu-item')\r\n                        .eq(-1);\r\n                } else {\r\n                    next = this.active\r\n                        [direction + 'All']('.ui-menu-item')\r\n                        .eq(0);\r\n                }\r\n            }\r\n\r\n            if (!next || !next.length || !this.active) {\r\n                next = this.activeMenu.children('.ui-menu-item')[filter]();\r\n            }\r\n\r\n            this.focus(event, next);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        nextPage: function (event) {\r\n            var item, base, height;\r\n\r\n            if (!this.active) {\r\n                this.next(event);\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.isLastItem()) {\r\n                return;\r\n            }\r\n\r\n            if (this._hasScroll()) {\r\n                base = this.active.offset().top;\r\n                height = this.element.height();\r\n                this.active.nextAll('.ui-menu-item').each(function () {\r\n                    item = $(this);\r\n\r\n                    return item.offset().top - base - height < 0;\r\n                });\r\n\r\n                this.focus(event, item);\r\n            } else {\r\n                this.focus(event, this.activeMenu.children('.ui-menu-item')\r\n                    [!this.active ? 'first' : 'last']());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        previousPage: function (event) {\r\n            var item, base, height;\r\n\r\n            if (!this.active) {\r\n                this.next(event);\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.isFirstItem()) {\r\n                return;\r\n            }\r\n\r\n            if (this._hasScroll()) {\r\n                base = this.active.offset().top;\r\n                height = this.element.height();\r\n                this.active.prevAll('.ui-menu-item').each(function () {\r\n                    item = $(this);\r\n\r\n                    return item.offset().top - base + height > 0;\r\n                });\r\n\r\n                this.focus(event, item);\r\n            } else {\r\n                this.focus(event, this.activeMenu.children('.ui-menu-item').first());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _hasScroll: function () {\r\n            return this.element.outerHeight() < this.element.prop('scrollHeight');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        select: function (event) {\r\n            // TODO: It should never be possible to not have an active item at this\r\n            // point, but the tests don't trigger mouseenter before click.\r\n            var ui;\r\n\r\n            this.active = this.active || $(event.target).closest('.ui-menu-item');\r\n            ui = {\r\n                item: this.active\r\n            };\r\n\r\n            if (!this.active.has('.ui-menu').length) {\r\n                this.collapseAll(event, true);\r\n            }\r\n            this._trigger('select', event, ui);\r\n        }\r\n    });\r\n\r\n    return $.mage.menu;\r\n});\r\n","mage/backend/notification.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.notification', {\r\n        options: {\r\n            templates: {\r\n                global: '<div data-role=\"messages\" id=\"messages\">' +\r\n                    '<div class=\"message <% if (data.error) { %>error<% } %>\"><div><%- data.message %></div></div>' +\r\n                '</div>',\r\n                error: '<div data-role=\"messages\" id=\"messages\">' +\r\n                    '<div class=\"messages\"><div class=\"message message-error error\">' +\r\n                        '<div data-ui-id=\"messages-message-error\"><%- data.message %></div></div>' +\r\n                    '</div></div>'\r\n            }\r\n        },\r\n        placeholder: '[data-role=messages]',\r\n\r\n        /**\r\n         * Notification creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            $(document).on('ajaxComplete ajaxError', $.proxy(this._add, this));\r\n        },\r\n\r\n        /**\r\n         * Add new message\r\n         * @protected\r\n         * @param {Object} event - object\r\n         * @param {Object} jqXHR - The jQuery XMLHttpRequest object returned by $.ajax()\r\n         */\r\n        _add: function (event, jqXHR) {\r\n            var response;\r\n\r\n            try {\r\n                response = JSON.parse(jqXHR.responseText);\r\n\r\n                if (response && response.error && response['html_message']) {\r\n                    $(this.placeholder).html(response['html_message']);\r\n                }\r\n            } catch (e) {}\r\n        },\r\n\r\n        /**\r\n         * Adds new message.\r\n         *\r\n         * @param {Object} data - Data with a message to be displayed.\r\n         */\r\n        add: function (data) {\r\n            var template = data.error ? this.options.templates.error : this.options.templates.global,\r\n                message = mageTemplate(template, {\r\n                    data: data\r\n                }),\r\n                messageContainer;\r\n\r\n            if (typeof data.insertMethod === 'function') {\r\n                data.insertMethod(message);\r\n            } else {\r\n                messageContainer = data.messageContainer || this.placeholder;\r\n                $(messageContainer).prepend(message);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes error messages.\r\n         */\r\n        clear: function () {\r\n            $(this.placeholder).html('');\r\n        }\r\n    });\r\n\r\n    return $.mage.notification;\r\n});\r\n","mage/backend/suggest.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'mage/mage',\r\n    'jquery/ui',\r\n    'mage/backend/menu',\r\n    'mage/translate'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Implement base functionality\r\n     */\r\n    $.widget('mage.suggest', {\r\n        widgetEventPrefix: 'suggest',\r\n        options: {\r\n            template: '<% if (data.items.length) { %>' +\r\n                '<% if (!data.term && !data.allShown() && data.recentShown()) { %>' +\r\n                '<h5 class=\"title\"><%- data.recentTitle %></h5>' +\r\n                '<% } %>' +\r\n                '<ul data-mage-init=\\'{\"menu\":[]}\\'>' +\r\n                '<% _.each(data.items, function(value){ %>' +\r\n                '<% if (!data.itemSelected(value)) { %><li <%= data.optionData(value) %>>' +\r\n                '<a href=\"#\"><%- value.label %></a></li><% } %>' +\r\n                '<% }); %>' +\r\n                '<% if (!data.term && !data.allShown() && data.recentShown()) { %>' +\r\n                '<li data-mage-init=\\'{\"actionLink\":{\"event\":\"showAll\"}}\\' class=\"show-all\">' +\r\n                '<a href=\"#\"><%- data.showAllTitle %></a></li>' +\r\n                '<% } %>' +\r\n                '</ul><% } else { %><span class=\"mage-suggest-no-records\"><%- data.noRecordsText %></span><% } %>',\r\n            minLength: 1,\r\n\r\n            /**\r\n             * @type {(String|Array)}\r\n             */\r\n            source: null,\r\n            delay: 500,\r\n            loadingClass: 'mage-suggest-state-loading',\r\n            events: {},\r\n            appendMethod: 'after',\r\n            controls: {\r\n                selector: ':ui-menu, :mage-menu',\r\n                eventsMap: {\r\n                    focus: ['menufocus'],\r\n                    blur: ['menublur'],\r\n                    select: ['menuselect']\r\n                }\r\n            },\r\n            termAjaxArgument: 'label_part',\r\n            filterProperty: 'label',\r\n            className: null,\r\n            inputWrapper: '<div class=\"mage-suggest\"><div class=\"mage-suggest-inner\"></div></div>',\r\n            dropdownWrapper: '<div class=\"mage-suggest-dropdown\"></div>',\r\n            preventClickPropagation: true,\r\n            currentlySelected: null,\r\n            submitInputOnEnter: true\r\n        },\r\n\r\n        /**\r\n         * Component's constructor\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._term = null;\r\n            this._nonSelectedItem = {\r\n                id: '',\r\n                label: ''\r\n            };\r\n            this.templates = {};\r\n            this._renderedContext = null;\r\n            this._selectedItem = this._nonSelectedItem;\r\n            this._control = this.options.controls || {};\r\n            this._setTemplate();\r\n            this._prepareValueField();\r\n            this._render();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Render base elements for suggest component\r\n         * @private\r\n         */\r\n        _render: function () {\r\n            var wrapper;\r\n\r\n            this.dropdown = $(this.options.dropdownWrapper).hide();\r\n            wrapper = this.options.className ?\r\n                $(this.options.inputWrapper).addClass(this.options.className) :\r\n                $(this.options.inputWrapper);\r\n            this.element\r\n                .wrap(wrapper)[this.options.appendMethod](this.dropdown)\r\n                .attr('autocomplete', 'off');\r\n        },\r\n\r\n        /**\r\n         * Define a field for storing item id (find in DOM or create a new one)\r\n         * @private\r\n         */\r\n        _prepareValueField: function () {\r\n            if (this.options.valueField) {\r\n                this.valueField = $(this.options.valueField);\r\n            } else {\r\n                this.valueField = this._createValueField()\r\n                    .insertBefore(this.element)\r\n                    .attr('name', this.element.attr('name'));\r\n                this.element.removeAttr('name');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Create value field which keeps a id for selected option\r\n         * can be overridden in descendants\r\n         * @return {jQuery}\r\n         * @private\r\n         */\r\n        _createValueField: function () {\r\n            return $('<input/>', {\r\n                type: 'hidden'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Component's destructor\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            this.element\r\n                .unwrap()\r\n                .removeAttr('autocomplete');\r\n\r\n            if (!this.options.valueField) {\r\n                this.element.attr('name', this.valueField.attr('name'));\r\n                this.valueField.remove();\r\n            }\r\n\r\n            this.dropdown.remove();\r\n            this._off(this.element, 'keydown keyup blur');\r\n        },\r\n\r\n        /**\r\n         * Return actual value of an \"input\"-element\r\n         * @return {String}\r\n         * @private\r\n         */\r\n        _value: function () {\r\n            return $.trim(this.element[this.element.is(':input') ? 'val' : 'text']());\r\n        },\r\n\r\n        /**\r\n         * Pass original event to a control component for handling it as it's own event\r\n         * @param {Object} event - event object\r\n         * @private\r\n         */\r\n        _proxyEvents: function (event) {\r\n            var fakeEvent = $.extend({}, $.Event(event.type), {\r\n                    ctrlKey: event.ctrlKey,\r\n                    keyCode: event.keyCode,\r\n                    which: event.keyCode\r\n                }),\r\n                target = this._control.selector ? this.dropdown.find(this._control.selector) : this.dropdown;\r\n\r\n            target.trigger(fakeEvent);\r\n        },\r\n\r\n        /**\r\n         * Bind handlers on specific events\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._on($.extend({\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                keydown: function (event) {\r\n                    var keyCode = $.ui.keyCode,\r\n                        suggestList,\r\n                        hasSuggestedItems,\r\n                        hasSelectedItems,\r\n                        selectedItem;\r\n\r\n                    switch (event.keyCode) {\r\n                        case keyCode.PAGE_UP:\r\n                        case keyCode.UP:\r\n                            if (!event.shiftKey) {\r\n                                event.preventDefault();\r\n                                this._proxyEvents(event);\r\n                            }\r\n\r\n                            suggestList = event.currentTarget.parentNode.getElementsByTagName('ul')[0];\r\n                            hasSuggestedItems = event.currentTarget\r\n                                    .parentNode.getElementsByTagName('ul')[0].children.length >= 0;\r\n\r\n                            if (hasSuggestedItems) {\r\n                                selectedItem =  $(suggestList.getElementsByClassName('_active')[0])\r\n                                    .removeClass('_active').prev().addClass('_active');\r\n                                event.currentTarget.value = selectedItem.find('a').text();\r\n                            }\r\n\r\n                            break;\r\n\r\n                        case keyCode.PAGE_DOWN:\r\n                        case keyCode.DOWN:\r\n                            if (!event.shiftKey) {\r\n                                event.preventDefault();\r\n                                this._proxyEvents(event);\r\n                            }\r\n\r\n                            suggestList = event.currentTarget.parentNode.getElementsByTagName('ul')[0];\r\n                            hasSuggestedItems = event.currentTarget\r\n                                .parentNode.getElementsByTagName('ul')[0].children.length >= 0;\r\n\r\n                            if (hasSuggestedItems) {\r\n                                hasSelectedItems = suggestList.getElementsByClassName('_active').length === 0;\r\n\r\n                                if (hasSelectedItems) { //eslint-disable-line max-depth\r\n                                    selectedItem = $(suggestList.children[0]).addClass('_active');\r\n                                    event.currentTarget.value = selectedItem.find('a').text();\r\n                                } else {\r\n                                    selectedItem = $(suggestList.getElementsByClassName('_active')[0])\r\n                                        .removeClass('_active').next().addClass('_active');\r\n                                    event.currentTarget.value = selectedItem.find('a').text();\r\n                                }\r\n                            }\r\n                            break;\r\n\r\n                        case keyCode.TAB:\r\n                            if (this.isDropdownShown()) {\r\n                                this._onSelectItem(event, null);\r\n                                event.preventDefault();\r\n                            }\r\n                            break;\r\n\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            this._toggleEnter(event);\r\n\r\n                            if (this.isDropdownShown() && this._focused) {\r\n                                this._proxyEvents(event);\r\n                                event.preventDefault();\r\n                            }\r\n                            break;\r\n\r\n                        case keyCode.ESCAPE:\r\n                            if (this.isDropdownShown()) {\r\n                                event.stopPropagation();\r\n                            }\r\n                            this.close(event);\r\n                            this._blurItem();\r\n                            break;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                keyup: function (event) {\r\n                    var keyCode = $.ui.keyCode;\r\n\r\n                    switch (event.keyCode) {\r\n                        case keyCode.HOME:\r\n                        case keyCode.END:\r\n                        case keyCode.PAGE_UP:\r\n                        case keyCode.PAGE_DOWN:\r\n                        case keyCode.ESCAPE:\r\n                        case keyCode.UP:\r\n                        case keyCode.DOWN:\r\n                        case keyCode.LEFT:\r\n                        case keyCode.RIGHT:\r\n                        case keyCode.TAB:\r\n                            break;\r\n\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            if (this.isDropdownShown()) {\r\n                                event.preventDefault();\r\n                            }\r\n                            break;\r\n                        default:\r\n                            this.search(event);\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                blur: function (event) {\r\n                    if (!this.preventBlur) {\r\n                        this._abortSearch();\r\n                        this.close(event);\r\n                        this._change(event);\r\n                    } else {\r\n                        this.element.trigger('focus');\r\n                    }\r\n                },\r\n                cut: this.search,\r\n                paste: this.search,\r\n                input: this.search,\r\n                selectItem: this._onSelectItem,\r\n                click: this.search\r\n            }, this.options.events));\r\n\r\n            this._bindSubmit();\r\n            this._bindDropdown();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} event\r\n         * @private\r\n         */\r\n        _toggleEnter: function (event) {\r\n            var suggestList,\r\n                activeItems,\r\n                selectedItem;\r\n\r\n            if (!this.options.submitInputOnEnter) {\r\n                event.preventDefault();\r\n            }\r\n\r\n            suggestList = $(event.currentTarget.parentNode).find('ul').first();\r\n            activeItems = suggestList.find('._active');\r\n\r\n            if (activeItems.length >= 0) {\r\n                selectedItem = activeItems.first();\r\n\r\n                if (selectedItem.find('a') && selectedItem.find('a').attr('href') !== undefined) {\r\n                    window.location = selectedItem.find('a').attr('href');\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind handlers for submit on enter\r\n         * @private\r\n         */\r\n        _bindSubmit: function () {\r\n            this.element.parents('form').on('submit', function (event) {\r\n                if (!this.submitInputOnEnter) {\r\n                    event.preventDefault();\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e - event object\r\n         * @private\r\n         */\r\n        _change: function (e) {\r\n            if (this._term !== this._value()) {\r\n                this._trigger('change', e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind handlers for dropdown element on specific events\r\n         * @private\r\n         */\r\n        _bindDropdown: function () {\r\n            var events = {\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                click: function (e) {\r\n                    // prevent default browser's behavior of changing location by anchor href\r\n                    e.preventDefault();\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                mousedown: function (e) {\r\n                    e.preventDefault();\r\n                }\r\n            };\r\n\r\n            $.each(this._control.eventsMap, $.proxy(function (suggestEvent, controlEvents) {\r\n                $.each(controlEvents, $.proxy(function (i, handlerName) {\r\n                    switch (suggestEvent) {\r\n                        case 'select':\r\n                            events[handlerName] = this._onSelectItem;\r\n                            break;\r\n\r\n                        case 'focus':\r\n                            events[handlerName] = this._focusItem;\r\n                            break;\r\n\r\n                        case 'blur':\r\n                            events[handlerName] = this._blurItem;\r\n                            break;\r\n                    }\r\n                }, this));\r\n            }, this));\r\n\r\n            if (this.options.preventClickPropagation) {\r\n                this._on(this.dropdown, events);\r\n            }\r\n            // Fix for IE 8\r\n            this._on(this.dropdown, {\r\n                /**\r\n                 * Mousedown.\r\n                 */\r\n                mousedown: function () {\r\n                    this.preventBlur = true;\r\n                },\r\n\r\n                /**\r\n                 * Mouseup.\r\n                 */\r\n                mouseup: function () {\r\n                    this.preventBlur = false;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _trigger: function (type, event) {\r\n            var result = this._superApply(arguments);\r\n\r\n            if (result === false && event) {\r\n                event.stopImmediatePropagation();\r\n                event.preventDefault();\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Handle focus event of options item\r\n         * @param {Object} e - event object\r\n         * @param {Object} ui - object that can contain information about focused item\r\n         * @private\r\n         */\r\n        _focusItem: function (e, ui) {\r\n            if (ui && ui.item) {\r\n                this._focused = $(ui.item).prop('tagName') ?\r\n                    this._readItemData(ui.item) :\r\n                    ui.item;\r\n\r\n                this.element.val(this._focused.label);\r\n                this._trigger('focus', e, {\r\n                    item: this._focused\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle blur event of options item\r\n         * @private\r\n         */\r\n        _blurItem: function () {\r\n            this._focused = null;\r\n            this.element.val(this._term);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e - event object\r\n         * @param {Object} item\r\n         * @private\r\n         */\r\n        _onSelectItem: function (e, item) {\r\n            if (item && $.type(item) === 'object' && $(e.target).is(this.element)) {\r\n                this._focusItem(e, {\r\n                    item: item\r\n                });\r\n            }\r\n\r\n            if (this._trigger('beforeselect', e || null, {\r\n                    item: this._focused\r\n                }) === false) {\r\n                return;\r\n            }\r\n            this._selectItem(e);\r\n            this._blurItem();\r\n            this._trigger('select', e || null, {\r\n                item: this._selectedItem\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Save selected item and hide dropdown\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        _selectItem: function (e) {\r\n            if (this._focused) {\r\n                this._selectedItem = this._focused;\r\n\r\n                if (this._selectedItem !== this._nonSelectedItem) {\r\n                    this._term = this._selectedItem.label;\r\n                    this.valueField.val(this._selectedItem.id);\r\n                    this.close(e);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Read option data from item element\r\n         * @param {Element} element\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _readItemData: function (element) {\r\n            return element.data('suggestOption') || this._nonSelectedItem;\r\n        },\r\n\r\n        /**\r\n         * Check if dropdown is shown\r\n         * @return {Boolean}\r\n         */\r\n        isDropdownShown: function () {\r\n            return this.dropdown.is(':visible');\r\n        },\r\n\r\n        /**\r\n         * Open dropdown\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        open: function (e) {\r\n            if (!this.isDropdownShown()) {\r\n                this.element.addClass('_suggest-dropdown-open');\r\n                this.dropdown.show();\r\n                this._trigger('open', e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close and clear dropdown content\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        close: function (e) {\r\n            this._renderedContext = null;\r\n\r\n            if (this.dropdown.length) {\r\n                this.element.removeClass('_suggest-dropdown-open');\r\n                this.dropdown.hide().empty();\r\n            }\r\n\r\n            this._trigger('close', e);\r\n        },\r\n\r\n        /**\r\n         * Acquire content template\r\n         * @private\r\n         */\r\n        _setTemplate: function () {\r\n            this.templateName = 'suggest' + Math.random().toString(36).substr(2);\r\n\r\n            this.templates[this.templateName] = mageTemplate(this.options.template);\r\n        },\r\n\r\n        /**\r\n         * Execute search process\r\n         * @public\r\n         * @param {Object} e - event object\r\n         */\r\n        search: function (e) {\r\n            var term = this._value();\r\n\r\n            if ((this._term !== term || term.length === 0) && !this.preventBlur) {\r\n                this._term = term;\r\n\r\n                if ($.type(term) === 'string' && term.length >= this.options.minLength) {\r\n                    if (this._trigger('search', e) === false) { //eslint-disable-line max-depth\r\n                        return;\r\n                    }\r\n                    this._search(e, term, {});\r\n                } else {\r\n                    this._selectedItem = this._nonSelectedItem;\r\n                    this._resetSuggestValue();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Clear suggest hidden input\r\n         * @private\r\n         */\r\n        _resetSuggestValue: function () {\r\n            this.valueField.val(this._nonSelectedItem.id);\r\n        },\r\n\r\n        /**\r\n         * Actual search method, can be overridden in descendants\r\n         * @param {Object} e - event object\r\n         * @param {String} term - search phrase\r\n         * @param {Object} context - search context\r\n         * @private\r\n         */\r\n        _search: function (e, term, context) {\r\n            var response = $.proxy(function (items) {\r\n                return this._processResponse(e, items, context || {});\r\n            }, this);\r\n\r\n            this.element.addClass(this.options.loadingClass);\r\n\r\n            if (this.options.delay) {\r\n                if ($.type(this.options.data) !== 'undefined') {\r\n                    response(this.filter(this.options.data, term));\r\n                }\r\n                clearTimeout(this._searchTimeout);\r\n                this._searchTimeout = this._delay(function () {\r\n                    this._source(term, response);\r\n                }, this.options.delay);\r\n            } else {\r\n                this._source(term, response);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Extend basic context with additional data (search results, search term)\r\n         * @param {Object} context\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _prepareDropdownContext: function (context) {\r\n            return $.extend(context, {\r\n                items: this._items,\r\n                term: this._term,\r\n\r\n                /**\r\n                 * @param {Object} item\r\n                 * @return {String}\r\n                 */\r\n                optionData: function (item) {\r\n                    return 'data-suggest-option=\"' +\r\n                        $('<div>').text(JSON.stringify(item)).html().replace(/\"/g, '&quot;') + '\"';\r\n                },\r\n                itemSelected: $.proxy(this._isItemSelected, this),\r\n                noRecordsText: $.mage.__('No records found.')\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _isItemSelected: function (item) {\r\n            return item.id == (this._selectedItem && this._selectedItem.id ? //eslint-disable-line eqeqeq\r\n                this._selectedItem.id :\r\n                this.options.currentlySelected);\r\n        },\r\n\r\n        /**\r\n         * Render content of suggest's dropdown\r\n         * @param {Object} e - event object\r\n         * @param {Array} items - list of label+id objects\r\n         * @param {Object} context - template's context\r\n         * @private\r\n         */\r\n        _renderDropdown: function (e, items, context) {\r\n            var tmpl = this.templates[this.templateName];\r\n\r\n            this._items = items;\r\n\r\n            tmpl = tmpl({\r\n                data: this._prepareDropdownContext(context)\r\n            });\r\n\r\n            $(tmpl).appendTo(this.dropdown.empty());\r\n\r\n            this.dropdown.trigger('contentUpdated')\r\n                .find(this._control.selector).on('focus', function (event) {\r\n                    event.preventDefault();\r\n                });\r\n\r\n            this._renderedContext = context;\r\n            this.element.removeClass(this.options.loadingClass);\r\n            this.open(e);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e\r\n         * @param {Object} items\r\n         * @param {Object} context\r\n         * @private\r\n         */\r\n        _processResponse: function (e, items, context) {\r\n            var renderer = $.proxy(function (i) {\r\n                return this._renderDropdown(e, i, context || {});\r\n            }, this);\r\n\r\n            if (this._trigger('response', e, [items, renderer]) === false) {\r\n                return;\r\n            }\r\n            this._renderDropdown(e, items, context);\r\n        },\r\n\r\n        /**\r\n         * Implement search process via spesific source\r\n         * @param {String} term - search phrase\r\n         * @param {Function} response - search results handler, process search result\r\n         * @private\r\n         */\r\n        _source: function (term, response) {\r\n            var o = this.options,\r\n                ajaxData;\r\n\r\n            if ($.isArray(o.source)) {\r\n                response(this.filter(o.source, term));\r\n            } else if ($.type(o.source) === 'string') {\r\n                ajaxData = {};\r\n                ajaxData[this.options.termAjaxArgument] = term;\r\n\r\n                this._xhr = $.ajax($.extend(true, {\r\n                    url: o.source,\r\n                    type: 'POST',\r\n                    dataType: 'json',\r\n                    data: ajaxData,\r\n                    success: $.proxy(function (items) {\r\n                        this.options.data = items;\r\n                        response.apply(response, arguments);\r\n                    }, this)\r\n                }, o.ajaxOptions || {}));\r\n            } else if ($.type(o.source) === 'function') {\r\n                o.source.apply(o.source, arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Abort search process\r\n         * @private\r\n         */\r\n        _abortSearch: function () {\r\n            this.element.removeClass(this.options.loadingClass);\r\n            clearTimeout(this._searchTimeout);\r\n        },\r\n\r\n        /**\r\n         * Perform filtering in advance loaded items and returns search result\r\n         * @param {Array} items - all available items\r\n         * @param {String} term - search phrase\r\n         * @return {Object}\r\n         */\r\n        filter: function (items, term) {\r\n            var matcher = new RegExp(term.replace(/[\\-\\/\\\\\\^$*+?.()|\\[\\]{}]/g, '\\\\$&'), 'i'),\r\n                itemsArray = $.isArray(items) ? items : $.map(items, function (element) {\r\n                    return element;\r\n                }),\r\n                property = this.options.filterProperty;\r\n\r\n            return $.grep(\r\n                itemsArray,\r\n                function (value) {\r\n                    return matcher.test(value[property] || value.id || value);\r\n                }\r\n            );\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Implement show all functionality and storing and display recent searches\r\n     */\r\n    $.widget('mage.suggest', $.mage.suggest, {\r\n        options: {\r\n            showRecent: false,\r\n            showAll: false,\r\n            storageKey: 'suggest',\r\n            storageLimit: 10\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _create: function () {\r\n            var recentItems;\r\n\r\n            if (this.options.showRecent && window.localStorage) {\r\n                recentItems = JSON.parse(localStorage.getItem(this.options.storageKey));\r\n\r\n                /**\r\n                 * @type {Array} - list of recently searched items\r\n                 * @private\r\n                 */\r\n                this._recentItems = $.isArray(recentItems) ? recentItems : [];\r\n            }\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _bind: function () {\r\n            this._super();\r\n            this._on(this.dropdown, {\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                showAll: function (e) {\r\n                    e.stopImmediatePropagation();\r\n                    e.preventDefault();\r\n                    this.element.trigger('showAll');\r\n                }\r\n            });\r\n\r\n            if (this.options.showRecent || this.options.showAll) {\r\n                this._on({\r\n                    /**\r\n                     * @param {jQuery.Event} e\r\n                     */\r\n                    focus: function (e) {\r\n                        if (!this.isDropdownShown()) {\r\n                            this.search(e);\r\n                        }\r\n                    },\r\n                    showAll: this._showAll\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        _showAll: function (e) {\r\n            this._abortSearch();\r\n            this._search(e, '', {\r\n                _allShown: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        search: function (e) {\r\n            if (!this._value()) {\r\n\r\n                if (this.options.showRecent) {\r\n\r\n                    if (this._recentItems.length) { //eslint-disable-line max-depth\r\n                        this._processResponse(e, this._recentItems, {});\r\n                    } else {\r\n                        this._showAll(e);\r\n                    }\r\n                } else if (this.options.showAll) {\r\n                    this._showAll(e);\r\n                }\r\n            }\r\n            this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _selectItem: function () {\r\n            this._superApply(arguments);\r\n\r\n            if (this._selectedItem && this._selectedItem.id && this.options.showRecent) {\r\n                this._addRecent(this._selectedItem);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _prepareDropdownContext: function () {\r\n            var context = this._superApply(arguments);\r\n\r\n            return $.extend(context, {\r\n                recentShown: $.proxy(function () {\r\n                    return this.options.showRecent;\r\n                }, this),\r\n                recentTitle: $.mage.__('Recent items'),\r\n                showAllTitle: $.mage.__('Show all...'),\r\n\r\n                /**\r\n                 * @return {Boolean}\r\n                 */\r\n                allShown: function () {\r\n                    return !!context._allShown;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Add selected item of search result into storage of recents\r\n         * @param {Object} item - label+id object\r\n         * @private\r\n         */\r\n        _addRecent: function (item) {\r\n            this._recentItems = $.grep(this._recentItems, function (obj) {\r\n                return obj.id !== item.id;\r\n            });\r\n            this._recentItems.unshift(item);\r\n            this._recentItems = this._recentItems.slice(0, this.options.storageLimit);\r\n            localStorage.setItem(this.options.storageKey, JSON.stringify(this._recentItems));\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Implement multi suggest functionality\r\n     */\r\n    $.widget('mage.suggest', $.mage.suggest, {\r\n        options: {\r\n            multiSuggestWrapper: '<ul class=\"mage-suggest-choices\">' +\r\n                '<li class=\"mage-suggest-search-field\" data-role=\"parent-choice-element\"><' +\r\n                'label class=\"mage-suggest-search-label\"></label></li></ul>',\r\n            choiceTemplate: '<li class=\"mage-suggest-choice button\"><div><%- text %></div>' +\r\n            '<span class=\"mage-suggest-choice-close\" tabindex=\"-1\" ' +\r\n            'data-mage-init=\\'{\"actionLink\":{\"event\":\"removeOption\"}}\\'></span></li>',\r\n            selectedClass: 'mage-suggest-selected'\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _create: function () {\r\n            this.choiceTmpl = mageTemplate(this.options.choiceTemplate);\r\n\r\n            this._super();\r\n\r\n            if (this.options.multiselect) {\r\n                this.valueField.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _render: function () {\r\n            this._super();\r\n\r\n            if (this.options.multiselect) {\r\n                this._renderMultiselect();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Render selected options\r\n         * @private\r\n         */\r\n        _renderMultiselect: function () {\r\n            var that = this;\r\n\r\n            this.element.wrap(this.options.multiSuggestWrapper);\r\n            this.elementWrapper = this.element.closest('[data-role=\"parent-choice-element\"]');\r\n            $(function () {\r\n                that._getOptions()\r\n                    .each(function (i, option) {\r\n                        option = $(option);\r\n                        that._createOption({\r\n                            id: option.val(),\r\n                            label: option.text()\r\n                        });\r\n                    });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @return {Array} array of DOM-elements\r\n         * @private\r\n         */\r\n        _getOptions: function () {\r\n            return this.valueField.find('option');\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _bind: function () {\r\n            this._super();\r\n\r\n            if (this.options.multiselect) {\r\n                this._on({\r\n                    /**\r\n                     * @param {jQuery.Event} event\r\n                     */\r\n                    keydown: function (event) {\r\n                        if (event.keyCode === $.ui.keyCode.BACKSPACE) {\r\n                            if (!this._value()) {\r\n                                this._removeLastAdded(event);\r\n                            }\r\n                        }\r\n                    },\r\n                    removeOption: this.removeOption\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Array} items\r\n         * @return {Array}\r\n         * @private\r\n         */\r\n        _filterSelected: function (items) {\r\n            var options = this._getOptions();\r\n\r\n            return $.grep(items, function (value) {\r\n                var itemSelected = false;\r\n\r\n                $.each(options, function () {\r\n                    if (value.id == $(this).val()) { //eslint-disable-line eqeqeq\r\n                        itemSelected = true;\r\n                    }\r\n                });\r\n\r\n                return !itemSelected;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _processResponse: function (e, items, context) {\r\n            if (this.options.multiselect) {\r\n                items = this._filterSelected(items, context);\r\n            }\r\n            this._superApply([e, items, context]);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _prepareValueField: function () {\r\n            this._super();\r\n\r\n            if (this.options.multiselect && !this.options.valueField && this.options.selectedItems) {\r\n                $.each(this.options.selectedItems, $.proxy(function (i, item) {\r\n                    this._addOption(item);\r\n                }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * If \"multiselect\" option is set, then do not need to clear value for hidden select, to avoid losing of\r\n         *      previously selected items\r\n         * @override\r\n         */\r\n        _resetSuggestValue: function () {\r\n            if (!this.options.multiselect) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _createValueField: function () {\r\n            if (this.options.multiselect) {\r\n                return $('<select/>', {\r\n                    type: 'hidden',\r\n                    multiple: 'multiple'\r\n                });\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _selectItem: function (e) {\r\n            if (this.options.multiselect) {\r\n                if (this._focused) {\r\n                    this._selectedItem = this._focused;\r\n\r\n                    /* eslint-disable max-depth */\r\n                    if (this._selectedItem !== this._nonSelectedItem) {\r\n                        this._term = '';\r\n                        this.element.val(this._term);\r\n\r\n                        if (this._isItemSelected(this._selectedItem)) {\r\n                            $(e.target).removeClass(this.options.selectedClass);\r\n                            this.removeOption(e, this._selectedItem);\r\n                            this._selectedItem = this._nonSelectedItem;\r\n                        } else {\r\n                            $(e.target).addClass(this.options.selectedClass);\r\n                            this._addOption(e, this._selectedItem);\r\n                        }\r\n                    }\r\n\r\n                    /* eslint-enable max-depth */\r\n                }\r\n                this.close(e);\r\n            } else {\r\n                this._superApply(arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _isItemSelected: function (item) {\r\n            if (this.options.multiselect) {\r\n                return this.valueField.find('option[value=' + item.id + ']').length > 0;\r\n            }\r\n\r\n            return this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} item\r\n         * @return {Element}\r\n         * @private\r\n         */\r\n        _createOption: function (item) {\r\n            var option = this._getOption(item);\r\n\r\n            if (!option.length) {\r\n                option = $('<option>', {\r\n                    value: item.id,\r\n                    selected: true\r\n                }).text(item.label);\r\n            }\r\n\r\n            return option.data('renderedOption', this._renderOption(item));\r\n        },\r\n\r\n        /**\r\n         * Add selected item in to select options\r\n         * @param {Object} e - event object\r\n         * @param {*} item\r\n         * @private\r\n         */\r\n        _addOption: function (e, item) {\r\n            this.valueField.append(this._createOption(item).data('selectTarget', $(e.target)));\r\n        },\r\n\r\n        /**\r\n         * @param {Object|Element} item\r\n         * @return {Element}\r\n         * @private\r\n         */\r\n        _getOption: function (item) {\r\n            return $(item).prop('tagName') ?\r\n                $(item) :\r\n                this.valueField.find('option[value=' + item.id + ']');\r\n        },\r\n\r\n        /**\r\n         * Remove last added option\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        _removeLastAdded: function (e) {\r\n            var lastAdded = this._getOptions().last();\r\n\r\n            if (lastAdded.length) {\r\n                this.removeOption(e, lastAdded);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove item from select options\r\n         * @param {Object} e - event object\r\n         * @param {Object} item\r\n         * @private\r\n         */\r\n        removeOption: function (e, item) {\r\n            var option = this._getOption(item),\r\n                selectTarget = option.data('selectTarget');\r\n\r\n            if (selectTarget && selectTarget.length) {\r\n                selectTarget.removeClass(this.options.selectedClass);\r\n            }\r\n\r\n            option.data('renderedOption').remove();\r\n            option.remove();\r\n        },\r\n\r\n        /**\r\n         * Render visual element of selected item\r\n         * @param {Object} item - selected item\r\n         * @private\r\n         */\r\n        _renderOption: function (item) {\r\n            var tmpl = this.choiceTmpl({\r\n                text: item.label\r\n            });\r\n\r\n            return $(tmpl)\r\n                .insertBefore(this.elementWrapper)\r\n                .trigger('contentUpdated')\r\n                .on('removeOption', $.proxy(function (e) {\r\n                    this.removeOption(e, item);\r\n                }, this));\r\n        }\r\n    });\r\n\r\n    return $.mage.suggest;\r\n});\r\n","mage/backend/tabs.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global FORM_KEY */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var rhash, isLocal;\r\n\r\n    // mage.tabs base functionality\r\n    $.widget('mage.tabs', $.ui.tabs, {\r\n        options: {\r\n            spinner: false,\r\n            groups: null,\r\n            tabPanelClass: '',\r\n            excludedPanel: ''\r\n        },\r\n\r\n        /**\r\n         * Tabs creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            var activeIndex = this._getTabIndex(this.options.active);\r\n\r\n            this.options.active = activeIndex >= 0 ? activeIndex : 0;\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         * @private\r\n         * @return {Array} Array of DOM-elements\r\n         */\r\n        _getList: function () {\r\n            if (this.options.groups) {\r\n                return this.element.find(this.options.groups);\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Get active anchor\r\n         * @return {Element}\r\n         */\r\n        activeAnchor: function () {\r\n            return this.anchors.eq(this.option('active'));\r\n        },\r\n\r\n        /**\r\n         * Get tab index by tab id\r\n         * @protected\r\n         * @param {String} id - id of tab\r\n         * @return {Number}\r\n         */\r\n        _getTabIndex: function (id) {\r\n            var anchors = this.anchors ?\r\n                this.anchors :\r\n                this._getList().find('> li > a[href]');\r\n\r\n            return anchors.index($('#' + id));\r\n        },\r\n\r\n        /**\r\n         * Switch between tabs\r\n         * @protected\r\n         * @param {Object} event - event object\r\n         * @param {undefined|Object} eventData\r\n         */\r\n        _toggle: function (event, eventData) {\r\n            var anchor = $(eventData.newTab).find('a');\r\n\r\n            if ($(eventData.newTab).find('a').data().tabType === 'link') {\r\n                location.href = anchor.prop('href');\r\n            } else {\r\n                this._superApply(arguments);\r\n            }\r\n        }\r\n    });\r\n\r\n    rhash = /#.*$/;\r\n\r\n    /**\r\n     * @param {*} anchor\r\n     * @return {Boolean}\r\n     */\r\n    isLocal = function (anchor) {\r\n        return anchor.hash.length > 1 &&\r\n            anchor.href.replace(rhash, '') ===\r\n                location.href.replace(rhash, '')\r\n                    // support: Safari 5.1\r\n                    // Safari 5.1 doesn't encode spaces in window.location\r\n                    // but it does encode spaces from anchors (#8777)\r\n                    .replace(/\\s/g, '%20');\r\n    };\r\n\r\n    // Extension for mage.tabs - Move panels in destination element\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        /**\r\n         * Move panels in destination element on creation\r\n         * @protected\r\n         * @override\r\n         */\r\n        _create: function () {\r\n            this._super();\r\n            this._movePanelsInDestination(this.panels);\r\n        },\r\n\r\n        /**\r\n         * Get panel for tab. If panel no exist in tabs container, then find panel in destination element\r\n         * @protected\r\n         * @override\r\n         * @param {Element} tab - tab \"li\" DOM-element\r\n         * @return {Element}\r\n         */\r\n        _getPanelForTab: function (tab) {\r\n            var panel = this._superApply(arguments),\r\n                id;\r\n\r\n            if (!panel.length) {\r\n                id = $(tab).attr('aria-controls');\r\n                panel = $(this.options.destination).find(this._sanitizeSelector('#' + id));\r\n            }\r\n\r\n            return panel;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _processTabs: function () {\r\n            var that = this;\r\n\r\n            this.tablist = this._getList()\r\n                .addClass('ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all')\r\n                .attr('role', 'tablist');\r\n\r\n            this.tabs = this.tablist.find('> li:has(a[href])')\r\n                .addClass('ui-state-default ui-corner-top')\r\n                .attr({\r\n                    role: 'tab',\r\n                    tabIndex: -1\r\n                });\r\n\r\n            this.anchors = this.tabs.map(function () {\r\n                return $('a', this)[ 0 ];\r\n            })\r\n                .addClass('ui-tabs-anchor')\r\n                .attr({\r\n                    role: 'presentation',\r\n                    tabIndex: -1\r\n                });\r\n\r\n            this.panels = $();\r\n\r\n            this.anchors.each(function (i, anchor) {\r\n                var selector, panel, panelId,\r\n                    anchorId = $(anchor).uniqueId().attr('id'),\r\n                    tab = $(anchor).closest('li'),\r\n                    originalAriaControls = tab.attr('aria-controls');\r\n\r\n                // inline tab\r\n                if (isLocal(anchor)) {\r\n                    selector = anchor.hash;\r\n                    panel = that.document.find(that._sanitizeSelector(selector));\r\n                    // remote tab\r\n                } else {\r\n                    panelId = that._tabId(tab);\r\n                    selector = '#' + panelId;\r\n                    panel = that.document.find(selector);\r\n\r\n                    if (!panel.length) {\r\n                        panel = that._createPanel(panelId);\r\n                        panel.insertAfter(that.panels[ i - 1 ] || that.tablist);\r\n                    }\r\n                    panel.attr('aria-live', 'polite');\r\n                }\r\n\r\n                if (panel.length) {\r\n                    that.panels = that.panels.add(panel);\r\n                }\r\n\r\n                if (originalAriaControls) {\r\n                    tab.data('ui-tabs-aria-controls', originalAriaControls);\r\n                }\r\n                tab.attr({\r\n                    'aria-controls': selector.substring(1),\r\n                    'aria-labelledby': anchorId\r\n                });\r\n                panel.attr('aria-labelledby', anchorId);\r\n\r\n                if (that.options.excludedPanel.indexOf(anchorId + '_content') < 0) {\r\n                    panel.addClass(that.options.tabPanelClass);\r\n                }\r\n            });\r\n\r\n            this.panels\r\n                .addClass('ui-tabs-panel ui-widget-content ui-corner-bottom')\r\n                .attr('role', 'tabpanel');\r\n        },\r\n\r\n        /**\r\n         * Move panels in destination element\r\n         * @protected\r\n         * @override\r\n         */\r\n        _movePanelsInDestination: function (panels) {\r\n            if (this.options.destination && !panels.parents(this.options.destination).length) {\r\n                this.element.trigger('beforePanelsMove', panels);\r\n\r\n                panels.find('script:not([type]), script[type=\"text/javascript\"]').remove();\r\n\r\n                panels.appendTo(this.options.destination)\r\n                    .each($.proxy(function (i, panel) {\r\n                        $(panel).trigger('move.tabs', this.anchors.eq(i));\r\n                    }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Move panels in destination element on tabs switching\r\n         * @protected\r\n         * @override\r\n         * @param {Object} event - event object\r\n         * @param {Object} eventData\r\n         */\r\n        _toggle: function (event, eventData) {\r\n            this._movePanelsInDestination(eventData.newPanel);\r\n            this._superApply(arguments);\r\n        }\r\n    });\r\n\r\n    // Extension for mage.tabs - Ajax functionality for tabs\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        options: {\r\n            ajaxOptions: {\r\n                data: {\r\n                    isAjax: true,\r\n                    'form_key': typeof FORM_KEY !== 'undefined' ? FORM_KEY : null\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Replacing href attribute with loaded panel id\r\n             * @param {Object} event - event object\r\n             * @param {Object} ui\r\n             */\r\n            load: function (event, ui) {\r\n                var panel = $(ui.panel);\r\n\r\n                $(ui.tab).prop('href', '#' + panel.prop('id'));\r\n                panel.trigger('contentUpdated');\r\n            }\r\n        }\r\n    });\r\n\r\n    // Extension for mage.tabs - Attach event handlers to tabs\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        options: {\r\n            tabIdArgument: 'tab',\r\n            tabsBlockPrefix: null\r\n        },\r\n\r\n        /**\r\n         * Attach event handlers to tabs, on creation\r\n         * @protected\r\n         * @override\r\n         */\r\n        _refresh: function () {\r\n            this._super();\r\n            $.each(this.tabs, $.proxy(function (i, tab) {\r\n                $(this._getPanelForTab(tab))\r\n                    .off('changed' + this.eventNamespace)\r\n                    .off('highlight.validate' + this.eventNamespace)\r\n                    .off('focusin' + this.eventNamespace)\r\n\r\n                    .on('changed' + this.eventNamespace, {\r\n                        index: i\r\n                    }, $.proxy(this._onContentChange, this))\r\n                    .on('highlight.validate' + this.eventNamespace, {\r\n                        index: i\r\n                    }, $.proxy(this._onInvalid, this))\r\n                    .on('focusin' + this.eventNamespace, {\r\n                        index: i\r\n                    }, $.proxy(this._onFocus, this));\r\n            }, this));\r\n\r\n            ($(this.options.destination).is('form') ?\r\n                $(this.options.destination) :\r\n                $(this.options.destination).closest('form'))\r\n                    .off('beforeSubmit' + this.eventNamespace)\r\n                    .on('beforeSubmit' + this.eventNamespace, $.proxy(this._onBeforeSubmit, this));\r\n        },\r\n\r\n        /**\r\n         * Mark tab as changed if some field inside tab panel is changed\r\n         * @protected\r\n         * @param {Object} e - event object\r\n         */\r\n        _onContentChange: function (e) {\r\n            var cssChanged = '_changed';\r\n\r\n            this.anchors.eq(e.data.index).addClass(cssChanged);\r\n            this._updateNavTitleMessages(e, cssChanged);\r\n        },\r\n\r\n        /**\r\n         * Clone messages (tooltips) from anchor to parent element\r\n         * @protected\r\n         * @param {Object} e - event object\r\n         * @param {String} messageType - changed or error\r\n         */\r\n        _updateNavTitleMessages: function (e, messageType) {\r\n            var curAnchor = this.anchors.eq(e.data.index),\r\n                curItem = curAnchor.parents('[data-role=\"container\"]').find('[data-role=\"title\"]'),\r\n                curItemMessages = curItem.find('[data-role=\"title-messages\"]'),\r\n                activeClass = '_active';\r\n\r\n            if (curItemMessages.is(':empty')) {\r\n                curAnchor\r\n                    .find('[data-role=\"item-messages\"]')\r\n                    .clone()\r\n                    .appendTo(curItemMessages);\r\n            }\r\n\r\n            curItemMessages.find('.' + messageType).addClass(activeClass);\r\n        },\r\n\r\n        /**\r\n         * Mark tab as error if some field inside tab panel is not passed validation\r\n         * @param {Object} e - event object\r\n         * @protected\r\n         */\r\n        _onInvalid: function (e) {\r\n            var cssError = '_error',\r\n                fakeEvent = e;\r\n\r\n            fakeEvent.currentTarget = $(this.anchors).eq(e.data.index);\r\n            this._eventHandler(fakeEvent);\r\n            this.anchors.eq(e.data.index).addClass(cssError).find('.' + cssError).show();\r\n            this._updateNavTitleMessages(e, cssError);\r\n        },\r\n\r\n        /**\r\n         * Show tab panel if focus event triggered of some field inside tab panel\r\n         * @param {Object} e - event object\r\n         * @protected\r\n         */\r\n        _onFocus: function (e) {\r\n            this.option('_active', e.data.index);\r\n        },\r\n\r\n        /**\r\n         * Add active tab id in data object when \"beforeSubmit\" event is triggered\r\n         * @param {Object} e - event object\r\n         * @param {Object} data - event data object\r\n         * @protected\r\n         */\r\n        _onBeforeSubmit: function (e, data) { //eslint-disable-line no-unused-vars\r\n            var activeAnchor = this.activeAnchor(),\r\n                activeTabId = activeAnchor.prop('id'),\r\n                options;\r\n\r\n            if (this.options.tabsBlockPrefix) {\r\n                if (activeAnchor.is('[id*=\"' + this.options.tabsBlockPrefix + '\"]')) {\r\n                    activeTabId = activeAnchor.prop('id').substr(this.options.tabsBlockPrefix.length);\r\n                }\r\n            }\r\n            $(this.anchors).removeClass('error');\r\n            options = {\r\n                action: {\r\n                    args: {}\r\n                }\r\n            };\r\n            options.action.args[this.options.tabIdArgument] = activeTabId;\r\n            data = data ? $.extend(data, options) : options;\r\n        }\r\n    });\r\n\r\n    // Extension for mage.tabs - Shadow tabs functionality\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        /**\r\n         * Add shadow tabs functionality on creation\r\n         * @protected\r\n         * @override\r\n         */\r\n        _refresh: function () {\r\n            var anchors, shadowTabs, tabs;\r\n\r\n            this._super();\r\n            anchors = this.anchors;\r\n            shadowTabs = this.options.shadowTabs;\r\n            tabs = this.tabs;\r\n\r\n            if (shadowTabs) {\r\n                anchors.each($.proxy(function (i, anchor) {\r\n                    var anchorId = $(anchor).prop('id');\r\n\r\n                    if (shadowTabs[anchorId]) {\r\n                        $(anchor).parents('li').on('click', $.proxy(function () {\r\n                            $.each(shadowTabs[anchorId], $.proxy(function (key, id) {\r\n                                this.load($(tabs).index($('#' + id).parents('li')), {});\r\n                            }, this));\r\n                        }, this));\r\n                    }\r\n                }, this));\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.tabs;\r\n});\r\n","mage/backend/tree-suggest.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'jquery/jstree/jquery.jstree',\r\n    'mage/backend/suggest'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\r\n    var hover_node, dehover_node, select_node, init;\r\n\r\n    $.extend(true, $, {\r\n        // @TODO: Move method 'treeToList' in file with utility functions\r\n        mage: {\r\n            /**\r\n             * @param {Array} list\r\n             * @param {Object} nodes\r\n             * @param {*} level\r\n             * @param {*} path\r\n             * @return {*}\r\n             */\r\n            treeToList: function (list, nodes, level, path) {\r\n                $.each(nodes, function () {\r\n                    if ($.type(this) === 'object') {\r\n                        list.push({\r\n                            label: this.label,\r\n                            id: this.id,\r\n                            level: level,\r\n                            item: this,\r\n                            path: path + this.label\r\n                        });\r\n\r\n                        if (this.children) {\r\n                            $.mage.treeToList(list, this.children, level + 1, path + this.label + ' / ');\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return list;\r\n            }\r\n        }\r\n    });\r\n\r\n    hover_node = $.jstree._instance.prototype.hover_node;\r\n    dehover_node = $.jstree._instance.prototype.dehover_node;\r\n    select_node = $.jstree._instance.prototype.select_node;\r\n    init = $.jstree._instance.prototype.init;\r\n\r\n    $.extend(true, $.jstree._instance.prototype, {\r\n        /**\r\n         * @override\r\n         */\r\n        init: function () {\r\n            this.get_container()\r\n                .show()\r\n                .on('keydown', $.proxy(function (e) {\r\n                    var o;\r\n\r\n                    if (e.keyCode === $.ui.keyCode.ENTER) {\r\n                        o = this.data.ui.hovered || this.data.ui.last_selected || -1;\r\n                        this.select_node(o, true);\r\n                    }\r\n                }, this));\r\n            init.call(this);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        hover_node: function (obj) {\r\n            hover_node.apply(this, arguments);\r\n            obj = this._get_node(obj);\r\n\r\n            if (!obj.length) {\r\n                return false;\r\n            }\r\n            this.get_container().trigger('hover_node', [{\r\n                item: obj.find('a:first')\r\n            }]);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        dehover_node: function () {\r\n            dehover_node.call(this);\r\n            this.get_container().trigger('dehover_node');\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        select_node: function (o) {\r\n            var node;\r\n\r\n            select_node.apply(this, arguments);\r\n            node = this._get_node(o);\r\n\r\n            (node ? $(node) : this.data.ui.last_selected)\r\n                .trigger('select_tree_node');\r\n        }\r\n    });\r\n\r\n    $.widget('mage.treeSuggest', $.mage.suggest, {\r\n        widgetEventPrefix: 'suggest',\r\n        options: {\r\n            template:\r\n                '<% if (data.items.length) { %>' +\r\n                    '<% if (data.allShown()) { %>' +\r\n                        '<% if (typeof data.nested === \"undefined\") { %>' +\r\n                            '<div style=\"display:none;\" data-mage-init=\"{&quot;jstree&quot;:{&quot;plugins&quot;:[&quot;themes&quot;,&quot;html_data&quot;,&quot;ui&quot;,&quot;hotkeys&quot;],&quot;themes&quot;:{&quot;theme&quot;:&quot;default&quot;,&quot;dots&quot;:false,&quot;icons&quot;:false}}}\">' + //eslint-disable-line max-len\r\n                        '<% } %>' +\r\n                        '<ul>' +\r\n                            '<% _.each(data.items, function(value) { %>' +\r\n                                '<li class=\"<% if (data.itemSelected(value)) { %>mage-suggest-selected<% } %>' +\r\n                '                   <% if (value.is_active == 0) { %> mage-suggest-not-active<% } %>\">' +\r\n                                    '<a href=\"#\" <%= data.optionData(value) %>><%- value.label %></a>' +\r\n                                    '<% if (value.children && value.children.length) { %>' +\r\n                                        '<%= data.renderTreeLevel(value.children) %>' +\r\n                                    '<% } %>' +\r\n                                '</li>' +\r\n                            '<% }); %>' +\r\n                        '</ul>' +\r\n                        '<% if (typeof data.nested === \"undefined\") { %>' +\r\n                            '</div>' +\r\n                        '<% } %>' +\r\n                    '<% } else { %>' +\r\n                        '<ul data-mage-init=\"{&quot;menu&quot;:[]}\">' +\r\n                            '<% _.each(data.items, function(value) { %>' +\r\n                                '<% if (!data.itemSelected(value)) {%>' +\r\n                                    '<li <%= data.optionData(value) %>>' +\r\n                                        '<a href=\"#\">' +\r\n                                            '<span class=\"category-label\"><%- value.label %></span>' +\r\n                                            '<span class=\"category-path\"><%- value.path %></span>' +\r\n                                        '</a>' +\r\n                                    '</li>' +\r\n                                '<% } %>' +\r\n                            '<% }); %>' +\r\n                        '</ul>' +\r\n                    '<% } %>' +\r\n                '<% } else { %>' +\r\n                    '<span class=\"mage-suggest-no-records\"><%- data.noRecordsText %></span>' +\r\n                '<% } %>',\r\n            controls: {\r\n                selector: ':ui-menu, :mage-menu, .jstree',\r\n                eventsMap: {\r\n                    focus: ['menufocus', 'hover_node'],\r\n                    blur: ['menublur', 'dehover_node'],\r\n                    select: ['menuselect', 'select_tree_node']\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _bind: function () {\r\n            this._super();\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                keydown: function (event) {\r\n                    var keyCode = $.ui.keyCode;\r\n\r\n                    switch (event.keyCode) {\r\n                        case keyCode.LEFT:\r\n                        case keyCode.RIGHT:\r\n\r\n                            if (this.isDropdownShown()) {\r\n                                event.preventDefault();\r\n                                this._proxyEvents(event);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        close: function (e) {\r\n            var eType = e ? e.type : null;\r\n\r\n            if (eType === 'select_tree_node') {\r\n                this.element.focus();\r\n            } else {\r\n                this._superApply(arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _filterSelected: function (items, context) {\r\n            if (context._allShown) {\r\n                return items;\r\n            }\r\n\r\n            return this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _prepareDropdownContext: function () {\r\n            var context = this._superApply(arguments),\r\n                optionData = context.optionData,\r\n                templates = this.templates,\r\n                tmplName = this.templateName;\r\n\r\n            /**\r\n             * @param {Object} item\r\n             * @return {*|String}\r\n             */\r\n            context.optionData = function (item) {\r\n                item = $.extend({}, item);\r\n                delete item.children;\r\n\r\n                return optionData(item);\r\n            };\r\n\r\n            return $.extend(context, {\r\n                /**\r\n                 * @param {*} children\r\n                 * @return {*|jQuery}\r\n                 */\r\n                renderTreeLevel: function (children) {\r\n                    var _context = $.extend({}, this, {\r\n                        items: children,\r\n                        nested: true\r\n                    }),\r\n                    tmpl = templates[tmplName];\r\n\r\n                    tmpl = tmpl({\r\n                        data: _context\r\n                    });\r\n\r\n                    return $('<div>').append($(tmpl)).html();\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _processResponse: function (e, items, context) {\r\n            var control;\r\n\r\n            if (context && !context._allShown) {\r\n                items = this.filter($.mage.treeToList([], items, 0, ''), this._term);\r\n            }\r\n            control = this.dropdown.find(this._control.selector);\r\n\r\n            if (control.length && control.hasClass('jstree')) {\r\n                control.jstree('destroy');\r\n            }\r\n            this._superApply([e, items, context]);\r\n        }\r\n    });\r\n\r\n    return $.mage.treeSuggest;\r\n});\r\n","mage/backend/validation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global BASE_URL, alertAlreadyDisplayed */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'jquery/validate',\r\n    'mage/translate',\r\n    'mage/validation'\r\n], function ($, _, alert) {\r\n    'use strict';\r\n\r\n    $.extend(true, $.validator.prototype, {\r\n        /**\r\n         * Focus invalid fields\r\n         */\r\n        focusInvalid: function () {\r\n            if (this.settings.focusInvalid) {\r\n                try {\r\n                    $(this.errorList.length && this.errorList[0].element || [])\r\n                        .focus()\r\n                        .trigger('focusin');\r\n                } catch (e) {\r\n                    // ignore IE throwing errors when focusing hidden elements\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Elements.\r\n         */\r\n        elements: function () {\r\n            var validator = this,\r\n                rulesCache = {};\r\n\r\n            // select all valid inputs inside the form (no submit or reset buttons)\r\n            return $(this.currentForm)\r\n                .find('input, select, textarea')\r\n                .not(this.settings.forceIgnore)\r\n                .not(':submit, :reset, :image, [disabled]')\r\n                .not(this.settings.ignore)\r\n                .filter(function () {\r\n                    if (!this.name && validator.settings.debug && window.console) {\r\n                        console.error('%o has no name assigned', this);\r\n                    }\r\n\r\n                    // select only the first element for each name, and only those with rules specified\r\n                    if (this.name in rulesCache || !validator.objectLength($(this).rules())) {\r\n                        return false;\r\n                    }\r\n\r\n                    rulesCache[this.name] = true;\r\n\r\n                    return true;\r\n                });\r\n        }\r\n    });\r\n\r\n    $.extend($.fn, {\r\n        /**\r\n         * ValidationDelegate overridden for those cases where the form is located in another form,\r\n         *     to avoid not correct working of validate plug-in\r\n         * @override\r\n         * @param {String} delegate - selector, if event target matched against this selector,\r\n         *     then event will be delegated\r\n         * @param {String} type - event type\r\n         * @param {Function} handler - event handler\r\n         * @return {Element}\r\n         */\r\n        validateDelegate: function (delegate, type, handler) {\r\n            return this.on(type, $.proxy(function (event) {\r\n                var target = $(event.target),\r\n                    form = target[0].form;\r\n\r\n                if (form && $(form).is(this) && $.data(form, 'validator') && target.is(delegate)) {\r\n                    return handler.apply(target, arguments);\r\n                }\r\n            }, this));\r\n        }\r\n    });\r\n\r\n    $.widget('mage.validation', $.mage.validation, {\r\n        options: {\r\n            messagesId: 'messages',\r\n            forceIgnore: '',\r\n            ignore: ':disabled, .ignore-validate, .no-display.template, ' +\r\n                ':disabled input, .ignore-validate input, .no-display.template input, ' +\r\n                ':disabled select, .ignore-validate select, .no-display.template select, ' +\r\n                ':disabled textarea, .ignore-validate textarea, .no-display.template textarea',\r\n            errorElement: 'label',\r\n            errorUrl: typeof BASE_URL !== 'undefined' ? BASE_URL : null,\r\n\r\n            /**\r\n             * @param {HTMLElement} element\r\n             */\r\n            highlight: function (element) {\r\n                if ($.validator.defaults.highlight && $.isFunction($.validator.defaults.highlight)) {\r\n                    $.validator.defaults.highlight.apply(this, arguments);\r\n                }\r\n                $(element).trigger('highlight.validate');\r\n            },\r\n\r\n            /**\r\n             * @param {HTMLElement} element\r\n             */\r\n            unhighlight: function (element) {\r\n                if ($.validator.defaults.unhighlight && $.isFunction($.validator.defaults.unhighlight)) {\r\n                    $.validator.defaults.unhighlight.apply(this, arguments);\r\n                }\r\n                $(element).trigger('unhighlight.validate');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validation creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            if (!this.options.submitHandler && $.type(this.options.submitHandler) !== 'function') {\r\n                if (!this.options.frontendOnly && this.options.validationUrl) {\r\n                    this.options.submitHandler = $.proxy(this._ajaxValidate, this);\r\n                } else {\r\n                    this.options.submitHandler = $.proxy(this._submit, this);\r\n                }\r\n            }\r\n            this.element.on('resetElement', function (e) {\r\n                $(e.target).rules('remove');\r\n            });\r\n            this._super('_create');\r\n        },\r\n\r\n        /**\r\n         * ajax validation\r\n         * @protected\r\n         */\r\n        _ajaxValidate: function () {\r\n            $.ajax({\r\n                url: this.options.validationUrl,\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                data: this.element.serialize(),\r\n                context: $('body'),\r\n                success: $.proxy(this._onSuccess, this),\r\n                error: $.proxy(this._onError, this),\r\n                showLoader: true,\r\n                dontHide: false\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Process ajax success.\r\n         *\r\n         * @protected\r\n         * @param {Object} response\r\n         */\r\n        _onSuccess: function (response) {\r\n            if (!response.error) {\r\n                this._submit();\r\n            } else {\r\n                this._showErrors(response);\r\n                $(this.element[0]).trigger('afterValidate.error');\r\n                $('body').trigger('processStop');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Submitting a form.\r\n         * @private\r\n         */\r\n        _submit: function () {\r\n            $(this.element[0]).trigger('afterValidate.beforeSubmit');\r\n            this.element[0].submit();\r\n        },\r\n\r\n        /**\r\n         * Displays errors after backend validation.\r\n         *\r\n         * @param {Object} data - Data that came from backend.\r\n         */\r\n        _showErrors: function (data) {\r\n            $('body').notification('clear')\r\n                .notification('add', {\r\n                    error: data.error,\r\n                    message: data.message,\r\n\r\n                    /**\r\n                     * @param {*} message\r\n                     */\r\n                    insertMethod: function (message) {\r\n                        $('.messages:first').html(message);\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Tries to retrieve element either by id or by inputs' name property.\r\n         * @param {String} code - String to search by.\r\n         * @returns {jQuery} jQuery element.\r\n         */\r\n        _getByCode: function (code) {\r\n            var parent = this.element[0],\r\n                element;\r\n\r\n            element = parent.querySelector('#' + code) || parent.querySelector('input[name=' + code + ']');\r\n\r\n            return $(element);\r\n        },\r\n\r\n        /**\r\n         * Process ajax error\r\n         * @protected\r\n         */\r\n        _onError: function () {\r\n            $(this.element[0]).trigger('afterValidate.error');\r\n            $('body').trigger('processStop');\r\n\r\n            if (this.options.errorUrl) {\r\n                location.href = this.options.errorUrl;\r\n            }\r\n        }\r\n    });\r\n\r\n    _.each({\r\n        'validate-greater-zero-based-on-option': [\r\n            function (v, el) {\r\n                var optionType = $(el)\r\n                    .closest('.form-list')\r\n                    .prev('.fieldset-alt')\r\n                    .find('select.select-product-option-type'),\r\n                    optionTypeVal = optionType.val();\r\n\r\n                v = Number(v) || 0;\r\n\r\n                if (optionType && (optionTypeVal == 'checkbox' || optionTypeVal == 'multi') && v <= 0) { //eslint-disable-line\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a number greater 0 in this field.')\r\n        ],\r\n        'validate-rating': [\r\n            function () {\r\n                var ratings = $('#detailed_rating').find('.field-rating'),\r\n                    noError = true;\r\n\r\n                ratings.each(function (index, rating) {\r\n                    noError = noError && $(rating).find('input:checked').length > 0;\r\n                });\r\n\r\n                return noError;\r\n            },\r\n            $.mage.__('Please select one of each ratings above.')\r\n        ],\r\n        'validate-downloadable-file': [\r\n            function (v, element) {\r\n                var elmParent = $(element).parent(),\r\n                    linkType = elmParent.find('input[value=\"file\"]'),\r\n                    newFileContainer;\r\n\r\n                if (linkType.is(':checked') && (v === '' || v === '[]')) {\r\n                    newFileContainer = elmParent.find('.new-file');\r\n\r\n                    if (!alertAlreadyDisplayed && (newFileContainer.empty() || newFileContainer.is(':visible'))) {\r\n                        window.alertAlreadyDisplayed = true;\r\n                        alert({\r\n                            content: $.mage.__('There are files that were selected but not uploaded yet. ' +\r\n                            'Please upload or remove them first')\r\n                        });\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            'Please upload a file.'\r\n        ],\r\n        'validate-downloadable-url': [\r\n            function (v, element) {\r\n                var linkType = $(element).parent().find('input[value=\"url\"]');\r\n\r\n                if (linkType.is(':checked') && v === '') {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please specify Url.')\r\n        ]\r\n    }, function (rule, i) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n\r\n    return $.mage.validation;\r\n});\r\n","mage/msie/file-reader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Init \"readAsBinaryString\" function for FileReader class.\r\n     * It need for IE11\r\n     * @param {Blob} fileData\r\n     */\r\n    var readAsBinaryStringIEFunc = function (fileData) {\r\n        var binary = '',\r\n            self = this,\r\n            reader = new FileReader();\r\n\r\n        /**\r\n         * Read file as binary string\r\n         */\r\n        reader.onload = function () {\r\n            var bytes, length, index;\r\n\r\n            /* eslint-disable no-undef */\r\n            bytes = new Uint8Array(reader.result);\r\n            /* eslint-enable */\r\n            length = bytes.length;\r\n\r\n            for (index = 0; index < length; index++) {\r\n                binary += String.fromCharCode(bytes[index]);\r\n            }\r\n            //self.result  - readonly so assign binary\r\n            self.content = binary;\r\n            $(self).trigger('onload');\r\n        };\r\n        reader.readAsArrayBuffer(fileData);\r\n    };\r\n\r\n    if (typeof FileReader.prototype.readAsBinaryString === 'undefined') {\r\n        FileReader.prototype.readAsBinaryString = readAsBinaryStringIEFunc;\r\n    }\r\n});\r\n","mage/requirejs/baseUrlResolver.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * Sample configuration:\r\n *\r\n require.config({\r\n        \"config\": {\r\n            \"baseUrlInterceptor\": {\r\n                \"Magento_Ui/js/lib/knockout/bindings/collapsible.js\": \"../../../../frontend/Magento/luma/en_US/\"\r\n            }\r\n        }\r\n    });\r\n */\r\n\r\n/* global jsSuffixRegExp */\r\n/* eslint-disable max-depth */\r\ndefine('baseUrlInterceptor', [\r\n    'module'\r\n], function (module) {\r\n    'use strict';\r\n\r\n    /**\r\n     * RequireJS Context object\r\n     */\r\n    var ctx = require.s.contexts._,\r\n\r\n        /**\r\n         * Original function\r\n         *\r\n         * @type {Function}\r\n         */\r\n        origNameToUrl = ctx.nameToUrl,\r\n\r\n        /**\r\n         * Original function\r\n         *\r\n         * @type {Function}\r\n         */\r\n        newContextConstr = require.s.newContext;\r\n\r\n    /**\r\n     * Remove dots from URL\r\n     *\r\n     * @param {Array} ary\r\n     */\r\n    function trimDots(ary) {\r\n        var i, part, length = ary.length;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            part = ary[i];\r\n\r\n            if (part === '.') {\r\n                ary.splice(i, 1);\r\n                i -= 1;\r\n            } else if (part === '..') {\r\n                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\r\n                    //End of the line. Keep at least one non-dot\r\n                    //path segment at the front so it can be mapped\r\n                    //correctly to disk. Otherwise, there is likely\r\n                    //no path mapping for a path starting with '..'.\r\n                    //This can still fail, but catches the most reasonable\r\n                    //uses of ..\r\n                    break;\r\n                } else if (i > 0) {\r\n                    ary.splice(i - 1, 2);\r\n                    i -= 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalize URL string (remove '/../')\r\n     *\r\n     * @param {String} name\r\n     * @param {String} baseName\r\n     * @param {Object} applyMap\r\n     * @param {Object} localContext\r\n     * @returns {*}\r\n     */\r\n    function normalize(name, baseName, applyMap, localContext) {\r\n        var lastIndex,\r\n            baseParts = baseName && baseName.split('/'),\r\n            normalizedBaseParts = baseParts;\r\n\r\n        //Adjust any relative paths.\r\n        if (name && name.charAt(0) === '.') {\r\n            //If have a base name, try to normalize against it,\r\n            //otherwise, assume it is a top-level require that will\r\n            //be relative to baseUrl in the end.\r\n            if (baseName) {\r\n                //Convert baseName to array, and lop off the last part,\r\n                //so that . matches that 'directory' and not name of the baseName's\r\n                //module. For instance, baseName of 'one/two/three', maps to\r\n                //'one/two/three.js', but we want the directory, 'one/two' for\r\n                //this normalization.\r\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\r\n                name = name.split('/');\r\n                lastIndex = name.length - 1;\r\n\r\n                // If wanting node ID compatibility, strip .js from end\r\n                // of IDs. Have to do this here, and not in nameToUrl\r\n                // because node allows either .js or non .js to map\r\n                // to same file.\r\n                if (localContext.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\r\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\r\n                }\r\n\r\n                name = normalizedBaseParts.concat(name);\r\n                trimDots(name);\r\n                name = name.join('/');\r\n            } else if (name.indexOf('./') === 0) {\r\n                // No baseName, so this is ID is resolved relative\r\n                // to baseUrl, pull off the leading dot.\r\n                name = name.substring(2);\r\n            }\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Get full url.\r\n     *\r\n     * @param {Object} context\r\n     * @param {String} url\r\n     * @return {String}\r\n     */\r\n    function getUrl(context, url) {\r\n        var baseUrl = context.config.baseUrl,\r\n            newConfig = context.config,\r\n            modulePath = url.replace(baseUrl, ''),\r\n            newBaseUrl,\r\n            rewrite = module.config()[modulePath];\r\n\r\n        if (!rewrite) {\r\n            return url;\r\n        }\r\n\r\n        newBaseUrl = normalize(rewrite, baseUrl, undefined, newConfig);\r\n\r\n        return newBaseUrl + modulePath;\r\n    }\r\n\r\n    /**\r\n     * Replace original function.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    ctx.nameToUrl = function () {\r\n        return getUrl(ctx, origNameToUrl.apply(ctx, arguments));\r\n    };\r\n\r\n    /**\r\n     * Replace original function.\r\n     *\r\n     * @return {*}\r\n     */\r\n    require.s.newContext = function () {\r\n        var newCtx = newContextConstr.apply(require.s, arguments),\r\n            newOrigNameToUrl = newCtx.nameToUrl;\r\n\r\n        /**\r\n         * New implementation of native function.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        newCtx.nameToUrl = function () {\r\n            return getUrl(newCtx, newOrigNameToUrl.apply(newCtx, arguments));\r\n        };\r\n\r\n        return newCtx;\r\n    };\r\n});\r\n\r\nrequire(['baseUrlInterceptor'], function () {\r\n    'use strict';\r\n\r\n});\r\n","mage/requirejs/resolver.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'domReady!'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var context = require.s.contexts._,\r\n        execCb = context.execCb,\r\n        registry = context.registry,\r\n        callbacks = [],\r\n        retries = 10,\r\n        updateDelay = 1,\r\n        ready,\r\n        update;\r\n\r\n    /**\r\n     * Checks if provided callback already exists in the callbacks list.\r\n     *\r\n     * @param {Object} callback - Callback object to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isSubscribed(callback) {\r\n        return !!_.findWhere(callbacks, callback);\r\n    }\r\n\r\n    /**\r\n     * Checks if provided module is rejected during load.\r\n     *\r\n     * @param {Object} module - Module to be checked.\r\n     * @return {Boolean}\r\n     */\r\n    function isRejected(module) {\r\n        return registry[module.id] && (registry[module.id].inited || registry[module.id].error);\r\n    }\r\n\r\n    /**\r\n     * Checks if provided module has unresolved dependencies.\r\n     *\r\n     * @param {Object} module - Module to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isPending(module) {\r\n        if (!module.depCount) {\r\n            return false;\r\n        }\r\n\r\n        return module.depCount > _.filter(module.depMaps, isRejected).length;\r\n    }\r\n\r\n    /**\r\n     * Checks if requirejs's registry object contains pending modules.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    function hasPending() {\r\n        return _.some(registry, isPending);\r\n    }\r\n\r\n    /**\r\n     * Checks if 'resolver' module is in ready\r\n     * state and that there are no pending modules.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    function isReady() {\r\n        return ready && !hasPending();\r\n    }\r\n\r\n    /**\r\n     * Invokes provided callback handler.\r\n     *\r\n     * @param {Object} callback\r\n     */\r\n    function invoke(callback) {\r\n        callback.handler.call(callback.ctx);\r\n    }\r\n\r\n    /**\r\n     * Sets 'resolver' module to a ready state\r\n     * and invokes pending callbacks.\r\n     */\r\n    function resolve() {\r\n        ready = true;\r\n\r\n        callbacks.splice(0).forEach(invoke);\r\n    }\r\n\r\n    /**\r\n     * Drops 'ready' flag and runs the update process.\r\n     */\r\n    function tick() {\r\n        ready = false;\r\n\r\n        update(retries);\r\n    }\r\n\r\n    /**\r\n     * Adds callback which will be invoked\r\n     * when all of the pending modules are initiated.\r\n     *\r\n     * @param {Function} handler - 'Ready' event handler function.\r\n     * @param {Object} [ctx] - Optional context with which handler\r\n     *      will be invoked.\r\n     */\r\n    function subscribe(handler, ctx) {\r\n        var callback = {\r\n            handler: handler,\r\n            ctx: ctx\r\n        };\r\n\r\n        if (!isSubscribed(callback)) {\r\n            callbacks.push(callback);\r\n\r\n            if (isReady()) {\r\n                _.defer(tick);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for all modules to be initiated\r\n     * and invokes pending callbacks if it's so.\r\n     *\r\n     * @param {Number} [retry] - Number of retries\r\n     *      that will be used to repeat the 'update' function\r\n     *      invokation in case if there are no pending requests.\r\n     */\r\n    update = _.debounce(function (retry) {\r\n        if (!hasPending()) {\r\n            retry ? update(--retry) : resolve();\r\n        }\r\n    }, updateDelay);\r\n\r\n    /**\r\n     * Overrides requirejs's original 'execCb' method\r\n     * in order to track pending modules.\r\n     *\r\n     * @returns {*} Result of original method call.\r\n     */\r\n    context.execCb = function () {\r\n        var exported = execCb.apply(context, arguments);\r\n\r\n        tick();\r\n\r\n        return exported;\r\n    };\r\n\r\n    return subscribe;\r\n});\r\n","mage/requirejs/text.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/* inspired by http://github.com/requirejs/text */\r\n/*global XMLHttpRequest, XDomainRequest */\r\n\r\ndefine(['module'], function (module) {\r\n    'use strict';\r\n\r\n    var xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\r\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\r\n        stripReg = /!strip$/i,\r\n        defaultConfig = module.config && module.config() || {};\r\n\r\n    /**\r\n     * Strips <?xml ...?> declarations so that external SVG and XML documents can be\r\n     * added to a document without worry.\r\n     * Also, if the string is an HTML document, only the part inside the body tag is returned.\r\n     *\r\n     * @param {String} external\r\n     * @returns {String}\r\n     */\r\n    function stripContent(external) {\r\n        var matches;\r\n\r\n        if (!external) {\r\n            return '';\r\n        }\r\n\r\n        matches = external.match(bodyRegExp);\r\n        external = matches ?\r\n            matches[1] :\r\n            external.replace(xmlRegExp, '');\r\n\r\n        return external;\r\n    }\r\n\r\n    /**\r\n     * Checks that url match current location\r\n     *\r\n     * @param {String} url\r\n     * @returns {Boolean}\r\n     */\r\n    function sameDomain(url) {\r\n        var uProtocol, uHostName, uPort,\r\n            xdRegExp = /^([\\w:]+)?\\/\\/([^\\/\\\\]+)/i,\r\n            location = window.location,\r\n            match = xdRegExp.exec(url);\r\n\r\n        if (!match) {\r\n            return true;\r\n        }\r\n        uProtocol = match[1];\r\n        uHostName = match[2];\r\n\r\n        uHostName = uHostName.split(':');\r\n        uPort = uHostName[1] || '';\r\n        uHostName = uHostName[0];\r\n\r\n        return (!uProtocol || uProtocol === location.protocol) &&\r\n            (!uHostName || uHostName.toLowerCase() === location.hostname.toLowerCase()) &&\r\n            (!uPort && !uHostName || uPort === location.port);\r\n    }\r\n\r\n    /**\r\n     * @returns {XMLHttpRequest|XDomainRequest|null}\r\n     */\r\n    function createRequest(url) {\r\n        var xhr = new XMLHttpRequest();\r\n\r\n        if (!sameDomain(url) && typeof XDomainRequest !== 'undefined') {\r\n            xhr = new XDomainRequest();\r\n        }\r\n\r\n        return xhr;\r\n    }\r\n\r\n    /**\r\n     * XHR requester. Returns value to callback.\r\n     *\r\n     * @param {String} url\r\n     * @param {Function} callback\r\n     * @param {Function} fail\r\n     * @param {Object} headers\r\n     */\r\n    function getContent(url, callback, fail, headers) {\r\n        var xhr = createRequest(url),\r\n            header;\r\n\r\n        xhr.open('GET', url);\r\n\r\n        /*eslint-disable max-depth */\r\n        if ('setRequestHeader' in xhr && headers) {\r\n            for (header in headers) {\r\n                if (headers.hasOwnProperty(header)) {\r\n                    xhr.setRequestHeader(header.toLowerCase(), headers[header]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        xhr.onreadystatechange = function () {\r\n            var status, err;\r\n\r\n            //Do not explicitly handle errors, those should be\r\n            //visible via console output in the browser.\r\n            if (xhr.readyState === 4) {\r\n                status = xhr.status || 0;\r\n\r\n                if (status > 399 && status < 600) {\r\n                    //An http 4xx or 5xx error. Signal an error.\r\n                    err = new Error(url + ' HTTP status: ' + status);\r\n                    err.xhr = xhr;\r\n\r\n                    if (fail) {\r\n                        fail(err);\r\n                    }\r\n                } else {\r\n                    callback(xhr.responseText);\r\n\r\n                    if (defaultConfig.onXhrComplete) {\r\n                        defaultConfig.onXhrComplete(xhr, url);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /*eslint-enable max-depth */\r\n\r\n        if (defaultConfig.onXhr) {\r\n            defaultConfig.onXhr(xhr, url);\r\n        }\r\n\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * Main method used by RequireJs.\r\n     *\r\n     * @param {String} name - has format: some.module.filext!strip\r\n     * @param {Function} req\r\n     * @param {Function|undefined} onLoad\r\n     */\r\n    function loadContent(name, req, onLoad) {\r\n\r\n        var toStrip = stripReg.test(name),\r\n            url = req.toUrl(name.replace(stripReg, '')),\r\n            headers = defaultConfig.headers;\r\n\r\n        getContent(url, function (content) {\r\n                content = toStrip ? stripContent(content) : content;\r\n                onLoad(content);\r\n            }, onLoad.error, headers);\r\n    }\r\n\r\n    return {\r\n        load: loadContent,\r\n        get: getContent\r\n    };\r\n});\r\n","mage/utils/arrays.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    './strings'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Defines index of an item in a specified container.\r\n     *\r\n     * @param {*} item - Item whose index should be defined.\r\n     * @param {Array} container - Container upon which to perform search.\r\n     * @returns {Number}\r\n     */\r\n    function getIndex(item, container) {\r\n        var index = container.indexOf(item);\r\n\r\n        if (~index) {\r\n            return index;\r\n        }\r\n\r\n        return _.findIndex(container, function (value) {\r\n            return value && value.name === item;\r\n        });\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Facade method to remove/add value from/to array\r\n         * without creating a new instance.\r\n         *\r\n         * @param {Array} arr - Array to be modified.\r\n         * @param {*} value - Value to add/remove.\r\n         * @param {Boolean} add - Flag that specfies operation.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        toggle: function (arr, value, add) {\r\n            return add ?\r\n                this.add(arr, value) :\r\n                this.remove(arr, value);\r\n        },\r\n\r\n        /**\r\n         * Removes the incoming value from array in case\r\n         * without creating a new instance of it.\r\n         *\r\n         * @param {Array} arr - Array to be modified.\r\n         * @param {*} value - Value to be removed.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        remove: function (arr, value) {\r\n            var index = arr.indexOf(value);\r\n\r\n            if (~index) {\r\n                arr.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds the incoming value to array if\r\n         * it's not alredy present in there.\r\n         *\r\n         * @param {Array} arr - Array to be modifed.\r\n         * @param {...*} arguments - Values to be added.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        add: function (arr) {\r\n            var values = _.toArray(arguments).slice(1);\r\n\r\n            values.forEach(function (value) {\r\n                if (!~arr.indexOf(value)) {\r\n                    arr.push(value);\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Inserts specified item into container at a specified position.\r\n         *\r\n         * @param {*} item - Item to be inserted into container.\r\n         * @param {Array} container - Container of items.\r\n         * @param {*} [position=-1] - Position at which item should be inserted.\r\n         *      Position can represent:\r\n         *          - specific index in container\r\n         *          - item which might already be present in container\r\n         *          - structure with one of these properties: after, before\r\n         * @returns {Boolean|*}\r\n         *      - true if element has changed its' position\r\n         *      - false if nothing has changed\r\n         *      - inserted value if it wasn't present in container\r\n         */\r\n        insert: function (item, container, position) {\r\n            var currentIndex = getIndex(item, container),\r\n                newIndex,\r\n                target;\r\n\r\n            if (typeof position === 'undefined') {\r\n                position = -1;\r\n            } else if (typeof position === 'string') {\r\n                position = isNaN(+position) ? position : +position;\r\n            }\r\n\r\n            newIndex = position;\r\n\r\n            if (~currentIndex) {\r\n                target = container.splice(currentIndex, 1)[0];\r\n\r\n                if (typeof item === 'string') {\r\n                    item = target;\r\n                }\r\n            }\r\n\r\n            if (typeof position !== 'number') {\r\n                target = position.after || position.before || position;\r\n\r\n                newIndex = getIndex(target, container);\r\n\r\n                if (~newIndex && (position.after || newIndex >= currentIndex)) {\r\n                    newIndex++;\r\n                }\r\n            }\r\n\r\n            if (newIndex < 0) {\r\n                newIndex += container.length + 1;\r\n            }\r\n\r\n            container[newIndex] ?\r\n                container.splice(newIndex, 0, item) :\r\n                container[newIndex] = item;\r\n\r\n            return !~currentIndex ? item : currentIndex !== newIndex;\r\n        },\r\n\r\n        /**\r\n         * @param {Array} elems\r\n         * @param {Number} offset\r\n         * @return {Number|*}\r\n         */\r\n        formatOffset: function (elems, offset) {\r\n            if (utils.isEmpty(offset)) {\r\n                offset = -1;\r\n            }\r\n\r\n            offset = +offset;\r\n\r\n            if (offset < 0) {\r\n                offset += elems.length + 1;\r\n            }\r\n\r\n            return offset;\r\n        }\r\n    };\r\n});\r\n","mage/utils/compare.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/utils/objects'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    var result = [];\r\n\r\n    /**\r\n     * Checks if all of the provided arrays contains equal values.\r\n     *\r\n     * @param {(Boolean|Array)} [keepOrder=false]\r\n     * @param {Array} target\r\n     * @returns {Boolean}\r\n     */\r\n    function equalArrays(keepOrder, target) {\r\n        var args = _.toArray(arguments),\r\n            arrays;\r\n\r\n        if (!Array.isArray(keepOrder)) {\r\n            arrays      = args.slice(2);\r\n        } else {\r\n            target      = keepOrder;\r\n            keepOrder   = false;\r\n            arrays      = args.slice(1);\r\n        }\r\n\r\n        if (!arrays.length) {\r\n            return true;\r\n        }\r\n\r\n        return arrays.every(function (array) {\r\n            if (array === target) {\r\n                return true;\r\n            } else if (array.length !== target.length) {\r\n                return false;\r\n            } else if (!keepOrder) {\r\n                return !_.difference(target, array).length;\r\n            }\r\n\r\n            return array.every(function (value, index) {\r\n                return target[index] === value;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if two values are different.\r\n     *\r\n     * @param {*} a - First value.\r\n     * @param {*} b - Second value.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDifferent(a, b) {\r\n        var oldIsPrimitive = utils.isPrimitive(a);\r\n\r\n        if (Array.isArray(a) && Array.isArray(b)) {\r\n            return !equalArrays(true, a, b);\r\n        }\r\n\r\n        return oldIsPrimitive ? a !== b : true;\r\n    }\r\n\r\n    /**\r\n     * @param {String} prefix\r\n     * @param {String} part\r\n     */\r\n    function getPath(prefix, part) {\r\n        return prefix ? prefix + '.' + part : part;\r\n    }\r\n\r\n    /**\r\n     * Checks if object has own specified property.\r\n     *\r\n     * @param {*} obj - Value to be checked.\r\n     * @param {String} key - Key of the property.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasOwn(obj, key) {\r\n        return Object.prototype.hasOwnProperty.call(obj, key);\r\n    }\r\n\r\n    /**\r\n     * @param {Array} changes\r\n     */\r\n    function getContainers(changes) {\r\n        var containers  = {},\r\n            indexed     = _.indexBy(changes, 'path');\r\n\r\n        _.each(indexed, function (change, name) {\r\n            var path;\r\n\r\n            name.split('.').forEach(function (part) {\r\n                path = getPath(path, part);\r\n\r\n                if (path in indexed) {\r\n                    return;\r\n                }\r\n\r\n                (containers[path] = containers[path] || []).push(change);\r\n            });\r\n        });\r\n\r\n        return containers;\r\n    }\r\n\r\n    /**\r\n     * @param {String} path\r\n     * @param {String} name\r\n     * @param {String} type\r\n     * @param {String} newValue\r\n     * @param {String} oldValue\r\n     */\r\n    function addChange(path, name, type, newValue, oldValue) {\r\n        var data;\r\n\r\n        data = {\r\n            path: path,\r\n            name: name,\r\n            type: type\r\n        };\r\n\r\n        if (type !== 'remove') {\r\n            data.value = newValue;\r\n            data.oldValue = oldValue;\r\n        } else {\r\n            data.oldValue = newValue;\r\n        }\r\n\r\n        result.push(data);\r\n    }\r\n\r\n    /**\r\n     * @param {String} ns\r\n     * @param {String} name\r\n     * @param {String} type\r\n     * @param {String} iterator\r\n     * @param {String} placeholder\r\n     */\r\n    function setAll(ns, name, type, iterator, placeholder) {\r\n        var key;\r\n\r\n        if (arguments.length > 4) {\r\n            type === 'add' ?\r\n                addChange(ns, name, 'update', iterator, placeholder) :\r\n                addChange(ns, name, 'update', placeholder, iterator);\r\n        } else {\r\n            addChange(ns, name, type, iterator);\r\n        }\r\n\r\n        if (!utils.isObject(iterator)) {\r\n            return;\r\n        }\r\n\r\n        for (key in iterator) {\r\n            if (hasOwn(iterator, key)) {\r\n                setAll(getPath(ns, key), key, type, iterator[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*eslint-disable max-depth*/\r\n    /**\r\n     * @param {Object} old\r\n     * @param {Object} current\r\n     * @param {String} ns\r\n     * @param {String} name\r\n     */\r\n    function compare(old, current, ns, name) {\r\n        var key,\r\n            oldIsObj = utils.isObject(old),\r\n            newIsObj = utils.isObject(current);\r\n\r\n        if (oldIsObj && newIsObj) {\r\n            for (key in old) {\r\n                if (hasOwn(old, key) && !hasOwn(current, key)) {\r\n                    setAll(getPath(ns, key), key, 'remove', old[key]);\r\n                }\r\n            }\r\n\r\n            for (key in current) {\r\n                if (hasOwn(current, key)) {\r\n                    hasOwn(old, key) ?\r\n                        compare(old[key], current[key], getPath(ns, key), key) :\r\n                        setAll(getPath(ns, key), key, 'add', current[key]);\r\n                }\r\n            }\r\n        } else if (oldIsObj) {\r\n            setAll(ns, name, 'remove', old, current);\r\n        } else if (newIsObj) {\r\n            setAll(ns, name, 'add', current, old);\r\n        } else if (isDifferent(old, current)) {\r\n            addChange(ns, name, 'update', current, old);\r\n        }\r\n    }\r\n\r\n    /*eslint-enable max-depth*/\r\n\r\n    return {\r\n\r\n        /**\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        compare: function () {\r\n            var changes;\r\n\r\n            compare.apply(null, arguments);\r\n\r\n            changes = result.splice(0);\r\n\r\n            return {\r\n                containers: getContainers(changes),\r\n                changes: changes,\r\n                equal: !changes.length\r\n            };\r\n        },\r\n\r\n        equalArrays: equalArrays\r\n    };\r\n});\r\n","mage/utils/main.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function (require) {\r\n    'use strict';\r\n\r\n    var utils = {},\r\n        _ = require('underscore');\r\n\r\n    return _.extend(\r\n        utils,\r\n        require('./arrays'),\r\n        require('./compare'),\r\n        require('./misc'),\r\n        require('./objects'),\r\n        require('./strings'),\r\n        require('./template')\r\n    );\r\n});\r\n","mage/utils/misc.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'FormData'\r\n], function (_, $) {\r\n    'use strict';\r\n\r\n    var defaultAttributes,\r\n        ajaxSettings,\r\n        map;\r\n\r\n    defaultAttributes = {\r\n        method: 'post',\r\n        enctype: 'multipart/form-data'\r\n    };\r\n\r\n    ajaxSettings = {\r\n        default: {\r\n            method: 'POST',\r\n            cache: false,\r\n            processData: false,\r\n            contentType: false\r\n        },\r\n        simple: {\r\n            method: 'POST',\r\n            dataType: 'json'\r\n        }\r\n    };\r\n\r\n    map = {\r\n        'D': 'DDD',\r\n        'dd': 'DD',\r\n        'd': 'D',\r\n        'EEEE': 'dddd',\r\n        'EEE': 'ddd',\r\n        'e': 'd',\r\n        'yyyy': 'YYYY',\r\n        'yy': 'YY',\r\n        'y': 'YYYY',\r\n        'a': 'A'\r\n    };\r\n\r\n    return {\r\n\r\n        /**\r\n         * Generates a unique identifier.\r\n         *\r\n         * @param {Number} [size=7] - Length of a resulting identifier.\r\n         * @returns {String}\r\n         */\r\n        uniqueid: function (size) {\r\n            var code = Math.random() * 25 + 65 | 0,\r\n                idstr = String.fromCharCode(code);\r\n\r\n            size = size || 7;\r\n\r\n            while (idstr.length < size) {\r\n                code = Math.floor(Math.random() * 42 + 48);\r\n\r\n                if (code < 58 || code > 64) {\r\n                    idstr += String.fromCharCode(code);\r\n                }\r\n            }\r\n\r\n            return idstr;\r\n        },\r\n\r\n        /**\r\n         * Limits function call.\r\n         *\r\n         * @param {Object} owner\r\n         * @param {String} target\r\n         * @param {Number} limit\r\n         */\r\n        limit: function (owner, target, limit) {\r\n            var fn = owner[target];\r\n\r\n            owner[target] = _.debounce(fn.bind(owner), limit);\r\n        },\r\n\r\n        /**\r\n         * Converts mage date format to a moment.js format.\r\n         *\r\n         * @param {String} mageFormat\r\n         * @returns {String}\r\n         */\r\n        normalizeDate: function (mageFormat) {\r\n            var result = mageFormat;\r\n\r\n            _.each(map, function (moment, mage) {\r\n                result = result.replace(mage, moment);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Puts provided value in range of min and max parameters.\r\n         *\r\n         * @param {Number} value - Value to be located.\r\n         * @param {Number} min - Min value.\r\n         * @param {Number} max - Max value.\r\n         * @returns {Number}\r\n         */\r\n        inRange: function (value, min, max) {\r\n            return Math.min(Math.max(min, value), max);\r\n        },\r\n\r\n        /**\r\n         * Serializes and sends data via POST request.\r\n         *\r\n         * @param {Object} options - Options object that consists of\r\n         *      a 'url' and 'data' properties.\r\n         * @param {Object} attrs - Attributes that will be added to virtual form.\r\n         */\r\n        submit: function (options, attrs) {\r\n            var form        = document.createElement('form'),\r\n                data        = this.serialize(options.data),\r\n                attributes  = _.extend({}, defaultAttributes, attrs || {});\r\n\r\n            if (!attributes.action) {\r\n                attributes.action = options.url;\r\n            }\r\n\r\n            data['form_key'] = window.FORM_KEY;\r\n\r\n            _.each(attributes, function (value, name) {\r\n                form.setAttribute(name, value);\r\n            });\r\n\r\n            data = _.map(\r\n                data,\r\n                function (value, name) {\r\n                    return '<input type=\"hidden\" ' +\r\n                        'name=\"' + _.escape(name) + '\" ' +\r\n                        'value=\"' + _.escape(value) + '\"' +\r\n                        ' />';\r\n                }\r\n            ).join('');\r\n\r\n            form.insertAdjacentHTML('afterbegin', data);\r\n            document.body.appendChild(form);\r\n\r\n            form.submit();\r\n        },\r\n\r\n        /**\r\n         * Serializes and sends data via AJAX POST request.\r\n         *\r\n         * @param {Object} options - Options object that consists of\r\n         *      a 'url' and 'data' properties.\r\n         * @param {Object} config\r\n         */\r\n        ajaxSubmit: function (options, config) {\r\n            var t = new Date().getTime(),\r\n                settings;\r\n\r\n            options.data['form_key'] = window.FORM_KEY;\r\n            options.data = this.prepareFormData(options.data, config.ajaxSaveType);\r\n            settings = _.extend({}, ajaxSettings[config.ajaxSaveType], options || {});\r\n\r\n            if (!config.ignoreProcessEvents) {\r\n                $('body').trigger('processStart');\r\n            }\r\n\r\n            return $.ajax(settings)\r\n                .done(function (data) {\r\n                    if (config.response) {\r\n                        data.t = t;\r\n                        config.response.data(data);\r\n                        config.response.status(undefined);\r\n                        config.response.status(!data.error);\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    config.response.status(undefined);\r\n                    config.response.status(false);\r\n                    config.response.data({\r\n                        error: true,\r\n                        messages: 'Something went wrong.',\r\n                        t: t\r\n                    });\r\n                })\r\n                .always(function () {\r\n                    if (!config.ignoreProcessEvents) {\r\n                        $('body').trigger('processStop');\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Creates FormData object and append this data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} type\r\n         * @returns {FormData}\r\n         */\r\n        prepareFormData: function (data, type) {\r\n            var formData;\r\n\r\n            if (type === 'default') {\r\n                formData = new FormData();\r\n                _.each(this.serialize(data), function (val, name) {\r\n                    formData.append(name, val);\r\n                });\r\n            } else if (type === 'simple') {\r\n                formData = this.serialize(data);\r\n            }\r\n\r\n            return formData;\r\n        },\r\n\r\n        /**\r\n         * Filters data object. Finds properties with suffix\r\n         * and sets their values to properties with the same name without suffix.\r\n         *\r\n         * @param {Object} data - The data object that should be filtered\r\n         * @param {String} suffix - The string by which data object should be filtered\r\n         * @param {String} separator - The string that is separator between property and suffix\r\n         *\r\n         * @returns {Object} Filtered data object\r\n         */\r\n        filterFormData: function (data, suffix, separator) {\r\n            data = data || {};\r\n            suffix = suffix || 'prepared-for-send';\r\n            separator = separator || '-';\r\n\r\n            _.each(data, function (value, key) {\r\n                if (_.isObject(value) && !Array.isArray(value)) {\r\n                    this.filterFormData(value, suffix, separator);\r\n                } else if (_.isString(key) && ~key.indexOf(suffix)) {\r\n                    data[key.split(separator)[0]] = value;\r\n                    delete data[key];\r\n                }\r\n            }, this);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Replaces symbol codes with their unescaped counterparts.\r\n         *\r\n         * @param {String} data\r\n         *\r\n         * @returns {String}\r\n         */\r\n        unescape: function (data) {\r\n            var unescaped = _.unescape(data),\r\n                mapCharacters = {\r\n                    '&#039;': '\\''\r\n                };\r\n\r\n            _.each(mapCharacters, function (value, key) {\r\n                unescaped = unescaped.replace(key, value);\r\n            });\r\n\r\n            return unescaped;\r\n        },\r\n\r\n        /**\r\n         * Converts PHP IntlFormatter format to moment format.\r\n         *\r\n         * @param {String} format - PHP format\r\n         * @returns {String} - moment compatible formatting\r\n         */\r\n        convertToMomentFormat: function (format) {\r\n            var newFormat;\r\n\r\n            newFormat = format.replace(/yyyy|yy|y/, 'YYYY'); // replace the year\r\n            newFormat = newFormat.replace(/dd|d/g, 'DD'); // replace the date\r\n\r\n            return newFormat;\r\n        },\r\n\r\n        /**\r\n         * Get Url Parameters.\r\n         *\r\n         * @param {String} url - Url string\r\n         * @returns {Object}\r\n         */\r\n        getUrlParameters: function (url) {\r\n            var params = {},\r\n                queries = url.split('?'),\r\n                temp,\r\n                i,\r\n                l;\r\n\r\n            if (!queries[1]) {\r\n                return params;\r\n            }\r\n\r\n            queries = queries[1].split('&');\r\n\r\n            for (i = 0, l = queries.length; i < l; i++) {\r\n                temp = queries[i].split('=');\r\n\r\n                if (temp[1]) {\r\n                    params[temp[0]] = decodeURIComponent(temp[1].replace(/\\+/g, '%20'));\r\n                } else {\r\n                    params[temp[0]] = '';\r\n                }\r\n            }\r\n\r\n            return params;\r\n        }\r\n    };\r\n});\r\n","mage/utils/objects.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore'\r\n], function (ko, $, _) {\r\n    'use strict';\r\n\r\n    var primitives = [\r\n        'undefined',\r\n        'boolean',\r\n        'number',\r\n        'string'\r\n    ];\r\n\r\n    /**\r\n     * Sets nested property of a specified object.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object to look inside for the properties.\r\n     * @param {Array} path - Splitted path the property.\r\n     * @param {*} value - Value of the last property in 'path' array.\r\n     * returns {*} New value for the property.\r\n     */\r\n    function setNested(parent, path, value) {\r\n        var last = path.pop(),\r\n            len = path.length,\r\n            pi = 0,\r\n            part = path[pi];\r\n\r\n        for (; pi < len; part = path[++pi]) {\r\n            if (!_.isObject(parent[part])) {\r\n                parent[part] = {};\r\n            }\r\n\r\n            parent = parent[part];\r\n        }\r\n\r\n        if (typeof parent[last] === 'function') {\r\n            parent[last](value);\r\n        } else {\r\n            parent[last] = value;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Retrieves value of a nested property.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object to look inside for the properties.\r\n     * @param {Array} path - Splitted path the property.\r\n     * @returns {*} Value of the property.\r\n     */\r\n    function getNested(parent, path) {\r\n        var exists = true,\r\n            len = path.length,\r\n            pi = 0;\r\n\r\n        for (; pi < len && exists; pi++) {\r\n            parent = parent[path[pi]];\r\n\r\n            if (typeof parent === 'undefined') {\r\n                exists = false;\r\n            }\r\n        }\r\n\r\n        if (exists) {\r\n            if (ko.isObservable(parent)) {\r\n                parent = parent();\r\n            }\r\n\r\n            return parent;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes property from a specified object.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object from which to remove property.\r\n     * @param {Array} path - Splitted path to the property.\r\n     */\r\n    function removeNested(parent, path) {\r\n        var field = path.pop();\r\n\r\n        parent = getNested(parent, path);\r\n\r\n        if (_.isObject(parent)) {\r\n            delete parent[field];\r\n        }\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Retrieves or defines objects' property by a composite path.\r\n         *\r\n         * @param {Object} data - Container for the properties specified in path.\r\n         * @param {String} path - Objects' properties divided by dots.\r\n         * @param {*} [value] - New value for the last property.\r\n         * @returns {*} Returns value of the last property in chain.\r\n         *\r\n         * @example\r\n         *      utils.nested({}, 'one.two', 3);\r\n         *      => { one: {two: 3} }\r\n         */\r\n        nested: function (data, path, value) {\r\n            var action = arguments.length > 2 ? setNested : getNested;\r\n\r\n            path = path ? path.split('.') : [];\r\n\r\n            return action(data, path, value);\r\n        },\r\n\r\n        /**\r\n         * Removes nested property from an object.\r\n         *\r\n         * @param {Object} data - Data source.\r\n         * @param {String} path - Path to the property e.g. 'one.two.three'\r\n         */\r\n        nestedRemove: function (data, path) {\r\n            path = path.split('.');\r\n\r\n            removeNested(data, path);\r\n        },\r\n\r\n        /**\r\n         * Flattens objects' nested properties.\r\n         *\r\n         * @param {Object} data - Object to flatten.\r\n         * @param {String} [separator='.'] - Objects' keys separator.\r\n         * @returns {Object} Flattened object.\r\n         *\r\n         * @example Example with a default separator.\r\n         *      utils.flatten({one: { two: { three: 'value'} }});\r\n         *      => { 'one.two.three': 'value' };\r\n         *\r\n         * @example Example with a custom separator.\r\n         *      utils.flatten({one: { two: { three: 'value'} }}, '=>');\r\n         *      => {'one=>two=>three': 'value'};\r\n         */\r\n        flatten: function (data, separator, parent, result) {\r\n            separator = separator || '.';\r\n            result = result || {};\r\n\r\n            if (!data) {\r\n                return result;\r\n            }\r\n\r\n            // UnderscoreJS each breaks when an object has a length property so we use Object.keys\r\n            _.each(Object.keys(data), function (name) {\r\n                var node = data[name];\r\n\r\n                if ({}.toString.call(node) === '[object Function]') {\r\n                    return;\r\n                }\r\n\r\n                if (parent) {\r\n                    name = parent + separator + name;\r\n                }\r\n\r\n                typeof node === 'object' ?\r\n                    this.flatten(node, separator, name, result) :\r\n                    result[name] = node;\r\n\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Opposite operation of the 'flatten' method.\r\n         *\r\n         * @param {Object} data - Previously flattened object.\r\n         * @param {String} [separator='.'] - Keys separator.\r\n         * @returns {Object} Object with nested properties.\r\n         *\r\n         * @example Example using custom separator.\r\n         *      utils.unflatten({'one=>two': 'value'}, '=>');\r\n         *      => {\r\n         *          one: { two: 'value' }\r\n         *      };\r\n         */\r\n        unflatten: function (data, separator) {\r\n            var result = {};\r\n\r\n            separator = separator || '.';\r\n\r\n            _.each(data, function (value, nodes) {\r\n                nodes = nodes.split(separator);\r\n\r\n                setNested(result, nodes, value);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Same operation as 'flatten' method,\r\n         * but returns objects' keys wrapped in '[]'.\r\n         *\r\n         * @param {Object} data - Object that should be serialized.\r\n         * @returns {Object} Serialized data.\r\n         *\r\n         * @example\r\n         *      utils.serialize({one: { two: { three: 'value'} }});\r\n         *      => { 'one[two][three]': 'value' }\r\n         */\r\n        serialize: function (data) {\r\n            var result = {};\r\n\r\n            data = this.flatten(data);\r\n\r\n            _.each(data, function (value, keys) {\r\n                keys = this.serializeName(keys);\r\n                value = _.isUndefined(value) ? '' : value;\r\n\r\n                result[keys] = value;\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Performs deep extend of specified objects.\r\n         *\r\n         * @returns {Object|Array} Extended object.\r\n         */\r\n        extend: function () {\r\n            var args = _.toArray(arguments);\r\n\r\n            args.unshift(true);\r\n\r\n            return $.extend.apply($, args);\r\n        },\r\n\r\n        /**\r\n         * Performs a deep clone of a specified object.\r\n         *\r\n         * @param {(Object|Array)} data - Data that should be copied.\r\n         * @returns {Object|Array} Cloned object.\r\n         */\r\n        copy: function (data) {\r\n            var result = data,\r\n                isArray = Array.isArray(data),\r\n                placeholder;\r\n\r\n            if (this.isObject(data) || isArray) {\r\n                placeholder = isArray ? [] : {};\r\n                result = this.extend(placeholder, data);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Performs a deep clone of a specified object.\r\n         * Doesn't save links to original object.\r\n         *\r\n         * @param {*} original - Object to clone\r\n         * @returns {*}\r\n         */\r\n        hardCopy: function (original) {\r\n            if (original === null || typeof original !== 'object') {\r\n                return original;\r\n            }\r\n\r\n            return JSON.parse(JSON.stringify(original));\r\n        },\r\n\r\n        /**\r\n         * Removes specified nested properties from the target object.\r\n         *\r\n         * @param {Object} target - Object whose properties should be removed.\r\n         * @param {(...String|Array|Object)} list - List that specifies properties to be removed.\r\n         * @returns {Object} Modified object.\r\n         *\r\n         * @example Basic usage\r\n         *      var obj = {a: {b: 2}, c: 'a'};\r\n         *\r\n         *      omit(obj, 'a.b');\r\n         *      => {'a.b': 2};\r\n         *      obj => {a: {}, c: 'a'};\r\n         *\r\n         * @example Various syntaxes that would return same result\r\n         *      omit(obj, ['a.b', 'c']);\r\n         *      omit(obj, 'a.b', 'c');\r\n         *      omit(obj, {'a.b': true, 'c': true});\r\n         */\r\n        omit: function (target, list) {\r\n            var removed = {},\r\n                ignored = list;\r\n\r\n            if (this.isObject(list)) {\r\n                ignored = [];\r\n\r\n                _.each(list, function (value, key) {\r\n                    if (value) {\r\n                        ignored.push(key);\r\n                    }\r\n                });\r\n            } else if (_.isString(list)) {\r\n                ignored = _.toArray(arguments).slice(1);\r\n            }\r\n\r\n            _.each(ignored, function (path) {\r\n                var value = this.nested(target, path);\r\n\r\n                if (!_.isUndefined(value)) {\r\n                    removed[path] = value;\r\n\r\n                    this.nestedRemove(target, path);\r\n                }\r\n            }, this);\r\n\r\n            return removed;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is a plain object.\r\n         *\r\n         * @param {*} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isObject: function (value) {\r\n            var objProto = Object.prototype;\r\n\r\n            return typeof value == 'object' ?\r\n            objProto.toString.call(value) === '[object Object]' :\r\n                false;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean}\r\n         */\r\n        isPrimitive: function (value) {\r\n            return value === null || ~primitives.indexOf(typeof value);\r\n        },\r\n\r\n        /**\r\n         * Iterates over obj props/array elems recursively, applying action to each one\r\n         *\r\n         * @param {Object|Array} data - Data to be iterated.\r\n         * @param {Function} action - Callback to be called with each item as an argument.\r\n         * @param {Number} [maxDepth=7] - Max recursion depth.\r\n         */\r\n        forEachRecursive: function (data, action, maxDepth) {\r\n            maxDepth = typeof maxDepth === 'number' && !isNaN(maxDepth) ? maxDepth - 1 : 7;\r\n\r\n            if (!_.isFunction(action) || _.isFunction(data) || maxDepth < 0) {\r\n                return;\r\n            }\r\n\r\n            if (!_.isObject(data)) {\r\n                action(data);\r\n\r\n                return;\r\n            }\r\n\r\n            _.each(data, function (value) {\r\n                this.forEachRecursive(value, action, maxDepth);\r\n            }, this);\r\n\r\n            action(data);\r\n        },\r\n\r\n        /**\r\n         * Maps obj props/array elems recursively\r\n         *\r\n         * @param {Object|Array} data - Data to be iterated.\r\n         * @param {Function} action - Callback to transform each item.\r\n         * @param {Number} [maxDepth=7] - Max recursion depth.\r\n         *\r\n         * @returns {Object|Array}\r\n         */\r\n        mapRecursive: function (data, action, maxDepth) {\r\n            var newData;\r\n\r\n            maxDepth = typeof maxDepth === 'number' && !isNaN(maxDepth) ? maxDepth - 1 : 7;\r\n\r\n            if (!_.isFunction(action) || _.isFunction(data) || maxDepth < 0) {\r\n                return data;\r\n            }\r\n\r\n            if (!_.isObject(data)) {\r\n                return action(data);\r\n            }\r\n\r\n            if (_.isArray(data)) {\r\n                newData = _.map(data, function (item) {\r\n                    return this.mapRecursive(item, action, maxDepth);\r\n                }, this);\r\n\r\n                return action(newData);\r\n            }\r\n\r\n            newData = _.mapObject(data, function (val, key) {\r\n                if (data.hasOwnProperty(key)) {\r\n                    return this.mapRecursive(val, action, maxDepth);\r\n                }\r\n\r\n                return val;\r\n            }, this);\r\n\r\n            return action(newData);\r\n        },\r\n\r\n        /**\r\n         * Removes empty(in common sence) obj props/array elems\r\n         *\r\n         * @param {*} data - Data to be cleaned.\r\n         * @returns {*}\r\n         */\r\n        removeEmptyValues: function (data) {\r\n            if (!_.isObject(data)) {\r\n                return data;\r\n            }\r\n\r\n            if (_.isArray(data)) {\r\n                return data.filter(function (item) {\r\n                    return !this.isEmptyObj(item);\r\n                }, this);\r\n            }\r\n\r\n            return _.omit(data, this.isEmptyObj.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Checks that argument of any type is empty in common sence:\r\n         * empty string, string with spaces only, object without own props, empty array, null or undefined\r\n         *\r\n         * @param {*} val - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isEmptyObj: function (val) {\r\n\r\n            return _.isObject(val) && _.isEmpty(val) ||\r\n            this.isEmpty(val) ||\r\n            val && val.trim && this.isEmpty(val.trim());\r\n        }\r\n    };\r\n});\r\n\r\n","mage/utils/strings.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var jsonRe = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attempts to convert string to one of the primitive values,\r\n         * or to parse it as a valid json object.\r\n         *\r\n         * @param {String} str - String to be processed.\r\n         * @returns {*}\r\n         */\r\n        castString: function (str) {\r\n            try {\r\n                str = str === 'true' ? true :\r\n                    str === 'false' ? false :\r\n                        str === 'null' ? null :\r\n                            +str + '' === str ? +str :\r\n                                jsonRe.test(str) ? JSON.parse(str) :\r\n                                    str;\r\n            } catch (e) {\r\n            }\r\n\r\n            return str;\r\n        },\r\n\r\n        /**\r\n         * Splits string by separator if it's possible,\r\n         * otherwise returns the incoming value.\r\n         *\r\n         * @param {(String|Array|*)} str - String to split.\r\n         * @param {String} [separator=' '] - Seperator based on which to split the string.\r\n         * @returns {Array|*} Splitted string or the incoming value.\r\n         */\r\n        stringToArray: function (str, separator) {\r\n            separator = separator || ' ';\r\n\r\n            return typeof str === 'string' ?\r\n                str.split(separator) :\r\n                str;\r\n        },\r\n\r\n        /**\r\n         * Converts the incoming string which consists\r\n         * of a specified delimiters into a format commonly used in form elements.\r\n         *\r\n         * @param {String} name - The incoming string.\r\n         * @param {String} [separator='.']\r\n         * @returns {String} Serialized string.\r\n         *\r\n         * @example\r\n         *      utils.serializeName('one.two.three');\r\n         *      => 'one[two][three]';\r\n         */\r\n        serializeName: function (name, separator) {\r\n            var result;\r\n\r\n            separator = separator || '.';\r\n            name = name.split(separator);\r\n\r\n            result = name.shift();\r\n\r\n            name.forEach(function (part) {\r\n                result += '[' + part + ']';\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Checks wether the incoming value is not empty,\r\n         * e.g. not 'null' or 'undefined'\r\n         *\r\n         * @param {*} value - Value to check.\r\n         * @returns {Boolean}\r\n         */\r\n        isEmpty: function (value) {\r\n            return value === '' || _.isUndefined(value) || _.isNull(value);\r\n        },\r\n\r\n        /**\r\n         * Adds 'prefix' to the 'part' value if it was provided.\r\n         *\r\n         * @param {String} prefix\r\n         * @param {String} part\r\n         * @returns {String}\r\n         */\r\n        fullPath: function (prefix, part) {\r\n            return prefix ? prefix + '.' + part : part;\r\n        },\r\n\r\n        /**\r\n         * Splits incoming string and returns its' part specified by offset.\r\n         *\r\n         * @param {String} parts\r\n         * @param {Number} [offset]\r\n         * @param {String} [delimiter=.]\r\n         * @returns {String}\r\n         */\r\n        getPart: function (parts, offset, delimiter) {\r\n            delimiter = delimiter || '.';\r\n            parts = parts.split(delimiter);\r\n            offset = this.formatOffset(parts, offset);\r\n\r\n            parts.splice(offset, 1);\r\n\r\n            return parts.join(delimiter) || '';\r\n        },\r\n\r\n        /**\r\n         * Converts nameThroughCamelCase to name-through-minus\r\n         *\r\n         * @param {String} string\r\n         * @returns {String}\r\n         */\r\n        camelCaseToMinus: function camelCaseToMinus(string) {\r\n            return ('' + string)\r\n                .split('')\r\n                .map(function (symbol, index) {\r\n                    return index ?\r\n                        symbol.toUpperCase() === symbol ?\r\n                        '-' + symbol.toLowerCase() :\r\n                            symbol :\r\n                        symbol.toLowerCase();\r\n                })\r\n                .join('');\r\n        },\r\n\r\n        /**\r\n         * Converts name-through-minus to nameThroughCamelCase\r\n         *\r\n         * @param {String} string\r\n         * @returns {String}\r\n         */\r\n        minusToCamelCase: function minusToCamelCase(string) {\r\n            return ('' + string)\r\n                .split('-')\r\n                .map(function (part, index) {\r\n                    return index ? part.charAt(0).toUpperCase() + part.slice(1) : part;\r\n                })\r\n                .join('');\r\n        }\r\n    };\r\n});\r\n","mage/utils/template.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-shadow */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/utils/objects',\r\n    'mage/utils/strings'\r\n], function ($, _, utils, stringUtils) {\r\n    'use strict';\r\n\r\n    var tmplSettings = _.templateSettings,\r\n        interpolate = /\\$\\{([\\s\\S]+?)\\}/g,\r\n        opener = '${',\r\n        template,\r\n        hasStringTmpls;\r\n\r\n    /**\r\n     * Identifies whether ES6 templates are supported.\r\n     */\r\n    hasStringTmpls = (function () {\r\n        var testString = 'var foo = \"bar\"; return `${ foo }` === foo';\r\n\r\n        try {\r\n            return Function(testString)();\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Objects can specify how to use templating for their properties - getting that configuration.\r\n     *\r\n     * To disable rendering for all properties of your object add __disableTmpl: true.\r\n     * To disable for specific property add __disableTmpl: {propertyName: true}.\r\n     * To limit recursion for a specific property add __disableTmpl: {propertyName: numberOfCycles}.\r\n     *\r\n     * @param {String} tmpl\r\n     * @param {Object | undefined} target\r\n     * @returns {Boolean|Object}\r\n     */\r\n    function isTmplIgnored(tmpl, target) {\r\n        var parsedTmpl;\r\n\r\n        try {\r\n            parsedTmpl = JSON.parse(tmpl);\r\n\r\n            if (typeof parsedTmpl === 'object') {\r\n                return tmpl.includes('__disableTmpl');\r\n            }\r\n        } catch (e) {\r\n        }\r\n\r\n        if (typeof target !== 'undefined') {\r\n            if (typeof target === 'object' && target.hasOwnProperty('__disableTmpl')) {\r\n                return target.__disableTmpl;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    if (hasStringTmpls) {\r\n\r\n        /*eslint-disable no-unused-vars, no-eval*/\r\n        /**\r\n         * Evaluates template string using ES6 templates.\r\n         *\r\n         * @param {String} tmpl - Template string.\r\n         * @param {Object} $ - Data object used in a template.\r\n         * @returns {String} Compiled template.\r\n         */\r\n        template = function (tmpl, $) {\r\n            return eval('`' + tmpl + '`');\r\n        };\r\n\r\n        /*eslint-enable no-unused-vars, no-eval*/\r\n    } else {\r\n\r\n        /**\r\n         * Fallback function used when ES6 templates are not supported.\r\n         * Uses underscore templates renderer.\r\n         *\r\n         * @param {String} tmpl - Template string.\r\n         * @param {Object} data - Data object used in a template.\r\n         * @returns {String} Compiled template.\r\n         */\r\n        template = function (tmpl, data) {\r\n            var cached = tmplSettings.interpolate;\r\n\r\n            tmplSettings.interpolate = interpolate;\r\n\r\n            tmpl = _.template(tmpl, {\r\n                variable: '$'\r\n            })(data);\r\n\r\n            tmplSettings.interpolate = cached;\r\n\r\n            return tmpl;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if provided value contains template syntax.\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isTemplate(value) {\r\n        return typeof value === 'string' &&\r\n            value.indexOf(opener) !== -1 &&\r\n            // the below pattern almost always indicates an accident which should not cause template evaluation\r\n            // refuse to evaluate\r\n            value.indexOf('${{') === -1;\r\n    }\r\n\r\n    /**\r\n     * Iteratively processes provided string\r\n     * until no templates syntax will be found.\r\n     *\r\n     * @param {String} tmpl - Template string.\r\n     * @param {Object} data - Data object used in a template.\r\n     * @param {Boolean} [castString=false] - Flag that indicates whether template\r\n     *      should be casted after evaluation to a value of another type or\r\n     *      that it should be leaved as a string.\r\n     * @param {Number|undefined} maxCycles - Maximum number of rendering cycles, can be 0.\r\n     * @returns {*} Compiled template.\r\n     */\r\n    function render(tmpl, data, castString, maxCycles) {\r\n        var last = tmpl,\r\n            cycles = 0;\r\n\r\n        while (~tmpl.indexOf(opener) && (typeof maxCycles === 'undefined' || cycles < maxCycles)) {\r\n            if (!isTmplIgnored(tmpl)) {\r\n                tmpl = template(tmpl, data);\r\n            }\r\n\r\n            if (tmpl === last) {\r\n                break;\r\n            }\r\n\r\n            last = tmpl;\r\n            cycles++;\r\n        }\r\n\r\n        return castString ?\r\n            stringUtils.castString(tmpl) :\r\n            tmpl;\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Applies provided data to the template.\r\n         *\r\n         * @param {Object|String} tmpl\r\n         * @param {Object} [data] - Data object to match with template.\r\n         * @param {Boolean} [castString=false] - Flag that indicates whether template\r\n         *      should be casted after evaluation to a value of another type or\r\n         *      that it should be leaved as a string.\r\n         * @returns {*}\r\n         *\r\n         * @example Template defined as a string.\r\n         *      var source = { foo: 'Random Stuff', bar: 'Some' };\r\n         *\r\n         *      utils.template('${ $.bar } ${ $.foo }', source);\r\n         *      => 'Some Random Stuff';\r\n         *\r\n         * @example Template defined as an object.\r\n         *      var tmpl = {\r\n         *              key: {'${ $.$data.bar }': '${ $.$data.foo }'},\r\n         *              foo: 'bar',\r\n         *              x1: 2, x2: 5,\r\n         *              delta: '${ $.x2 - $.x1 }',\r\n         *              baz: 'Upper ${ $.foo.toUpperCase() }'\r\n         *      };\r\n         *\r\n         *      utils.template(tmpl, source);\r\n         *      => {\r\n         *          key: {'Some': 'Random Stuff'},\r\n         *          foo: 'bar',\r\n         *          x1: 2, x2: 5,\r\n         *          delta: 3,\r\n         *          baz: 'Upper BAR'\r\n         *      };\r\n         */\r\n        template: function (tmpl, data, castString, dontClone) {\r\n            if (typeof tmpl === 'string') {\r\n                return render(tmpl, data, castString);\r\n            }\r\n\r\n            if (!dontClone) {\r\n                tmpl = utils.copy(tmpl);\r\n            }\r\n\r\n            tmpl.$data = data || {};\r\n\r\n            /**\r\n             * Template iterator function.\r\n             */\r\n            _.each(tmpl, function iterate(value, key, list) {\r\n                var disabled,\r\n                    maxCycles;\r\n\r\n                if (key === '$data') {\r\n                    return;\r\n                }\r\n\r\n                if (isTemplate(key)) {\r\n                    delete list[key];\r\n\r\n                    key = render(key, tmpl);\r\n                    list[key] = value;\r\n                }\r\n\r\n                if (isTemplate(value)) {\r\n                    //Getting template disabling settings, can be true for all disabled and separate settings\r\n                    //for each property.\r\n                    disabled = isTmplIgnored(value, list);\r\n\r\n                    if (typeof disabled === 'object' && disabled.hasOwnProperty(key) && disabled[key] !== false) {\r\n                        //Checking if specific settings for a property provided.\r\n                        maxCycles = disabled[key];\r\n                    }\r\n\r\n                    if (disabled === true || maxCycles === true) {\r\n                        //Rendering for all properties is disabled.\r\n                        maxCycles = 0;\r\n                    }\r\n\r\n                    list[key] = render(value, tmpl, castString, maxCycles);\r\n                } else if ($.isPlainObject(value) || Array.isArray(value)) {\r\n                    _.each(value, iterate);\r\n                }\r\n            });\r\n\r\n            delete tmpl.$data;\r\n\r\n            return tmpl;\r\n        }\r\n    };\r\n});\r\n","mage/utils/wrapper.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * Utility methods used to wrap and extend functions.\r\n *\r\n * @example Usage of a 'wrap' method with arguments delegation.\r\n *      var multiply = function (a, b) {\r\n *          return a * b;\r\n *      };\r\n *\r\n *      multiply = module.wrap(multiply, function (orig) {\r\n *          return 'Result is: ' + orig();\r\n *      });\r\n *\r\n *      multiply(2, 2);\r\n *      => 'Result is: 4'\r\n *\r\n * @example Usage of 'wrapSuper' method.\r\n *      var multiply = function (a, b) {\r\n *         return a * b;\r\n *      };\r\n *\r\n *      var obj = {\r\n *          multiply: module.wrapSuper(multiply, function () {\r\n *              return 'Result is: ' + this._super();\r\n *          });\r\n *      };\r\n *\r\n *      obj.multiply(2, 2);\r\n *      => 'Result is: 4'\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if string has a '_super' substring.\r\n     */\r\n    var superReg = /\\b_super\\b/;\r\n\r\n    return {\r\n\r\n        /**\r\n         * Wraps target function with a specified wrapper, which will receive\r\n         * reference to the original function as a first argument.\r\n         *\r\n         * @param {Function} target - Function to be wrapped.\r\n         * @param {Function} wrapper - Wrapper function.\r\n         * @returns {Function} Wrapper function.\r\n         */\r\n        wrap: function (target, wrapper) {\r\n            if (!_.isFunction(target) || !_.isFunction(wrapper)) {\r\n                return wrapper;\r\n            }\r\n\r\n            return function () {\r\n                var args    = _.toArray(arguments),\r\n                    ctx     = this,\r\n                    _super;\r\n\r\n                /**\r\n                 * Function that will be passed to the wrapper.\r\n                 * If no arguments will be passed to it, then the original\r\n                 * function will be called with an arguments of a wrapper function.\r\n                 */\r\n                _super = function () {\r\n                    var superArgs = arguments.length ? arguments : args.slice(1);\r\n\r\n                    return target.apply(ctx, superArgs);\r\n                };\r\n\r\n                args.unshift(_super);\r\n\r\n                return wrapper.apply(ctx, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Wraps the incoming function to implement support of the '_super' method.\r\n         *\r\n         * @param {Function} target - Function to be wrapped.\r\n         * @param {Function} wrapper - Wrapper function.\r\n         * @returns {Function} Wrapped function.\r\n         */\r\n        wrapSuper: function (target, wrapper) {\r\n            if (!this.hasSuper(wrapper) || !_.isFunction(target)) {\r\n                return wrapper;\r\n            }\r\n\r\n            return function () {\r\n                var _super  = this._super,\r\n                    args    = arguments,\r\n                    result;\r\n\r\n                /**\r\n                 * Temporary define '_super' method which\r\n                 * contains call to the original function.\r\n                 */\r\n                this._super = function () {\r\n                    var superArgs = arguments.length ? arguments : args;\r\n\r\n                    return target.apply(this, superArgs);\r\n                };\r\n\r\n                result = wrapper.apply(this, args);\r\n\r\n                this._super = _super;\r\n\r\n                return result;\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Checks wether the incoming method contains calls of the '_super' method.\r\n         *\r\n         * @param {Function} fn - Function to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        hasSuper: function (fn) {\r\n            return _.isFunction(fn) && superReg.test(fn);\r\n        },\r\n\r\n        /**\r\n         * Extends target object with provided extenders.\r\n         * If property in target and extender objects is a function,\r\n         * then it will be wrapped using 'wrap' method.\r\n         *\r\n         * @param {Object} target - Object to be extended.\r\n         * @param {...Object} extenders - Multiple extenders objects.\r\n         * @returns {Object} Modified target object.\r\n         */\r\n        extend: function (target) {\r\n            var extenders = _.toArray(arguments).slice(1),\r\n                iterator = this._extend.bind(this, target);\r\n\r\n            extenders.forEach(iterator);\r\n\r\n            return target;\r\n        },\r\n\r\n        /**\r\n         * Same as the 'extend' method, but operates only on one extender object.\r\n         *\r\n         * @private\r\n         * @param {Object} target\r\n         * @param {Object} extender\r\n         */\r\n        _extend: function (target, extender) {\r\n            _.each(extender, function (value, key) {\r\n                target[key] = this.wrap(target[key], extender[key]);\r\n            }, this);\r\n        }\r\n    };\r\n});\r\n","mage/validation/url.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Redirects to the url if it is considered safe\r\n         *\r\n         * @param {String} path - url to be redirected to\r\n         */\r\n        redirect: function (path) {\r\n            path = this.sanitize(path);\r\n\r\n            if (this.validate(path)) {\r\n                window.location.href = path;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validates url\r\n         *\r\n         * @param {Object} path - url to be validated\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function (path) {\r\n            var hostname = window.location.hostname;\r\n\r\n            if (path.indexOf(hostname) === -1 ||\r\n                path.indexOf('javascript:') !== -1 ||\r\n                path.indexOf('vbscript:') !== -1) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Sanitize url, replacing disallowed chars\r\n         *\r\n         * @param {String} path - url to be normalized\r\n         * @returns {String}\r\n         */\r\n        sanitize: function (path) {\r\n            return path.replace('[^-A-Za-z0-9+&@#/%?=~_|!:,.;\\(\\)]', '');\r\n        }\r\n    };\r\n});\r\n","mage/view/composite.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\n/* eslint-disable strict */\r\ndefine(['jquery'], function ($) {\r\n    return function () {\r\n        var renderedChildren = {},\r\n            children = {};\r\n\r\n        return {\r\n            /**\r\n             * @param {*} child\r\n             * @param {String} key\r\n             */\r\n            addChild: function (child, key) {\r\n                children[key] = child;\r\n            },\r\n\r\n            /**\r\n             * @param {*} root\r\n             */\r\n            render: function (root) {\r\n                $.each(children, function (key, child) {\r\n                    var childRoot = $('<div>');\r\n\r\n                    renderedChildren[key] = child.render(childRoot);\r\n                    root.append(childRoot);\r\n                });\r\n            }\r\n        };\r\n    };\r\n});\r\n","Magento_AdminAnalytics/js/modal/component.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal-component',\r\n    'uiRegistry',\r\n    'analyticsPopupConfig'\r\n],\r\n    function (_, $, Modal, registry, analyticsPopupConfig) {\r\n        'use strict';\r\n\r\n        return Modal.extend(\r\n            {\r\n                defaults: {\r\n                    imports: {\r\n                        enableLogAction: '${ $.provider }:data.enableLogAction',\r\n                        disableLogAction: '${ $.provider }:data.disableLogAction'\r\n                    },\r\n                    options: {},\r\n                    notificationWindow: null\r\n                },\r\n\r\n                /**\r\n                 * Initializes modal on opened function\r\n                 */\r\n                initModal: function () {\r\n                    this.options.opened = this.onOpened.bind(this);\r\n                    this._super();\r\n                },\r\n\r\n                /**\r\n                 * Configure ESC and TAB so user can't leave modal\r\n                 * without selecting an option\r\n                 *\r\n                 * @returns {Object} Chainable.\r\n                 */\r\n                initModalEvents: function () {\r\n                    this._super();\r\n                    //Don't allow ESC key to close modal\r\n                    this.options.keyEventHandlers.escapeKey = this.handleEscKey.bind(this);\r\n                    //Restrict tab action to the modal\r\n                    this.options.keyEventHandlers.tabKey = this.handleTabKey.bind(this);\r\n\r\n                    return this;\r\n                },\r\n\r\n                /**\r\n                 * Once the modal is opened it hides the X\r\n                 */\r\n                onOpened: function () {\r\n                    $('.modal-header button.action-close').attr('disabled', true).hide();\r\n\r\n                    this.focusableElements = $(this.rootSelector).find('a[href], button:enabled');\r\n                    this.firstFocusableElement = this.focusableElements[0];\r\n                    this.lastFocusableElement = this.focusableElements[this.focusableElements.length - 1];\r\n                    this.firstFocusableElement.focus();\r\n                },\r\n\r\n                /**\r\n                 * Changes admin usage setting to yes\r\n                 */\r\n                enableAdminUsage: function () {\r\n                    var data = {\r\n                        'form_key': window.FORM_KEY\r\n                    };\r\n\r\n                    $.ajax(\r\n                        {\r\n                            type: 'POST',\r\n                            url: this.enableLogAction,\r\n                            data: data,\r\n                            showLoader: true\r\n                        }\r\n                    ).done(\r\n                        function (xhr) {\r\n                            if (xhr.error) {\r\n                                self.onError(xhr);\r\n                            }\r\n                        }\r\n                    ).fail(this.onError);\r\n                    this.openReleasePopup();\r\n                    this.closeModal();\r\n                },\r\n\r\n                /**\r\n                 * Changes admin usage setting to no\r\n                 */\r\n                disableAdminUsage: function () {\r\n                    var data = {\r\n                        'form_key': window.FORM_KEY\r\n                    };\r\n\r\n                    $.ajax(\r\n                        {\r\n                            type: 'POST',\r\n                            url: this.disableLogAction,\r\n                            data: data,\r\n                            showLoader: true\r\n                        }\r\n                    ).done(\r\n                        function (xhr) {\r\n                            if (xhr.error) {\r\n                                self.onError(xhr);\r\n                            }\r\n                        }\r\n                    ).fail(this.onError);\r\n                    this.openReleasePopup();\r\n                    this.closeModal();\r\n                },\r\n\r\n                /**\r\n                 * Allows admin usage popup to be shown first and then new release notification\r\n                 */\r\n                openReleasePopup: function () {\r\n                    var notificationModalSelector = 'release_notification.release_notification.notification_modal_1';\r\n\r\n                    if (analyticsPopupConfig.releaseVisible) {\r\n                        registry.get(notificationModalSelector).initializeContentAfterAnalytics();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Handle Tab and Shift+Tab key event\r\n                 *\r\n                 * Keep the tab actions restricted to the popup modal\r\n                 * so the user must select an option to dismiss the modal\r\n                 */\r\n                handleTabKey: function (event) {\r\n                    var modal = this,\r\n                        KEY_TAB = 9;\r\n\r\n                    /**\r\n                     * Handle Shift+Tab to tab backwards\r\n                     */\r\n                    function handleBackwardTab() {\r\n                        if (document.activeElement === modal.firstFocusableElement ||\r\n                            document.activeElement === $(modal.rootSelector)[0]\r\n                        ) {\r\n                            event.preventDefault();\r\n                            modal.lastFocusableElement.focus();\r\n                        }\r\n                    }\r\n\r\n                    /**\r\n                     * Handle Tab forward\r\n                     */\r\n                    function handleForwardTab() {\r\n                        if (document.activeElement === modal.lastFocusableElement) {\r\n                            event.preventDefault();\r\n                            modal.firstFocusableElement.focus();\r\n                        }\r\n                    }\r\n\r\n                    switch (event.keyCode) {\r\n                        case KEY_TAB:\r\n                            if (modal.focusableElements.length === 1) {\r\n                                event.preventDefault();\r\n                                break;\r\n                            }\r\n\r\n                            if (event.shiftKey) {\r\n                                handleBackwardTab();\r\n                                break;\r\n                            }\r\n                            handleForwardTab();\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Handle Esc key\r\n                 *\r\n                 * Esc key should not close modal\r\n                 */\r\n                handleEscKey: function (event) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        );\r\n    }\r\n);\r\n","Magento_AdminAnalytics/js/release-notification/modal/component-mixin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['jquery', 'analyticsPopupConfig'], function ($, analyticsPopupConfig) {\r\n    'use strict';\r\n\r\n    var deferred = $.Deferred(),\r\n\r\n        mixin = {\r\n        /**\r\n         * Initializes content only if its visible\r\n         */\r\n        initializeContent: function () {\r\n            var initializeContent = this._super.bind(this);\r\n\r\n            if (!analyticsPopupConfig.analyticsVisible) {\r\n                initializeContent();\r\n            } else {\r\n                deferred.then(function () {\r\n                    initializeContent();\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes release notification content after admin analytics\r\n         */\r\n        initializeContentAfterAnalytics: function () {\r\n            deferred.resolve();\r\n        }\r\n    };\r\n\r\n    return function (target) {\r\n        return target.extend(mixin);\r\n    };\r\n});\r\n\r\n","Magento_AdminNotification/toolbar_entry.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'domReady!'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Mark notification as read via AJAX call.\r\n     *\r\n     * @param {String} notificationId\r\n     */\r\n    var markNotificationAsRead = function (notificationId) {\r\n            var requestUrl = $('.notifications-wrapper .admin__action-dropdown-menu').attr('data-mark-as-read-url');\r\n\r\n            $.ajax({\r\n                url: requestUrl,\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                data: {\r\n                    id: notificationId\r\n                },\r\n                showLoader: false\r\n            });\r\n        },\r\n        notificationCount = $('.notifications-wrapper').attr('data-notification-count'),\r\n\r\n        /**\r\n         * Remove notification from the list.\r\n         *\r\n         * @param {jQuery} notificationEntry\r\n         */\r\n        removeNotificationFromList = function (notificationEntry) {\r\n            var notificationIcon, actionElement;\r\n\r\n            notificationEntry.remove();\r\n            notificationCount--;\r\n            $('.notifications-wrapper').attr('data-notification-count', notificationCount);\r\n\r\n            if (notificationCount == 0) {// eslint-disable-line eqeqeq\r\n                // Change appearance of the bubble and its behavior when the last notification is removed\r\n                $('.notifications-wrapper .admin__action-dropdown-menu').remove();\r\n                notificationIcon = $('.notifications-wrapper .notifications-icon');\r\n                notificationIcon.removeAttr('data-toggle');\r\n                notificationIcon.off('click.dropdown');\r\n                $('.notifications-action .notifications-counter').text('').hide();\r\n            } else {\r\n                // Change top counter only for allowable range\r\n                if (notificationCount <= 99) {\r\n                    $('.notifications-action .notifications-counter').text(notificationCount);\r\n                }\r\n                $('.notifications-entry-last .notifications-counter').text(notificationCount);\r\n                // Modify caption of the 'See All' link\r\n                actionElement = $('.notifications-wrapper .admin__action-dropdown-menu .last .action-more');\r\n                actionElement.text(actionElement.text().replace(/\\d+/, notificationCount));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show notification details.\r\n         *\r\n         * @param {jQuery} notificationEntry\r\n         */\r\n        showNotificationDetails = function (notificationEntry) {\r\n            var notificationDescription = notificationEntry.find('.notifications-entry-description'),\r\n                notificationDescriptionEnd = notificationEntry.find('.notifications-entry-description-end');\r\n\r\n            if (notificationDescriptionEnd.length > 0) {\r\n                notificationDescriptionEnd.addClass('_show');\r\n            }\r\n\r\n            if (notificationDescription.hasClass('_cutted')) {\r\n                notificationDescription.removeClass('_cutted');\r\n            }\r\n        };\r\n\r\n    // Show notification description when corresponding item is clicked\r\n    $('.notifications-wrapper .admin__action-dropdown-menu .notifications-entry').on(\r\n        'click.showNotification',\r\n        function (event) {\r\n            // hide notification dropdown\r\n            $('.notifications-wrapper .notifications-icon').trigger('click.dropdown');\r\n\r\n            showNotificationDetails($(this));\r\n            event.stopPropagation();\r\n        }\r\n    );\r\n\r\n    // Remove corresponding notification from the list and mark it as read\r\n    $('.notifications-close').on('click.removeNotification', function (event) {\r\n        var notificationEntry = $(this).closest('.notifications-entry'),\r\n            notificationId = notificationEntry.attr('data-notification-id');\r\n\r\n        markNotificationAsRead(notificationId);\r\n        removeNotificationFromList(notificationEntry);\r\n\r\n        // Checking for last unread notification to hide dropdown\r\n        if (notificationCount == 0) {// eslint-disable-line eqeqeq\r\n            $('.notifications-wrapper').removeClass('active')\r\n                .find('.notifications-action')\r\n                .removeAttr('data-toggle')\r\n                .off('click.dropdown');\r\n        }\r\n        event.stopPropagation();\r\n    });\r\n\r\n    // Hide notifications bubble\r\n    if (notificationCount == 0) {// eslint-disable-line eqeqeq\r\n        $('.notifications-action .notifications-counter').hide();\r\n    } else {\r\n        $('.notifications-action .notifications-counter').show();\r\n    }\r\n});\r\n","Magento_AdminNotification/js/grid/listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/listing',\r\n    'Magento_Ui/js/lib/spinner',\r\n    'jquery'\r\n], function (Listing, loader, $) {\r\n    'use strict';\r\n\r\n    return Listing.extend({\r\n        defaults: {\r\n            imports: {\r\n                totalRecords: '${ $.provider }:data.totalRecords'\r\n            },\r\n            selectors: {\r\n                collapsible: '.message-system-collapsible',\r\n                messages: '.message-system'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    totalRecords: 0\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        showLoader: function () {\r\n            if (!this.source.firstLoad) {\r\n                this.fixLoaderHeight();\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Calculates loader height\r\n         *\r\n         * @param {Boolean} [closed]\r\n         */\r\n        fixLoaderHeight: function (closed) {\r\n            var $messagesBlock = $(this.selectors.messages),\r\n                $collapsibleBlock = $(this.selectors.collapsible),\r\n                resultHeight = 0;\r\n\r\n            if ($messagesBlock.length) {\r\n                resultHeight += $messagesBlock.outerHeight();\r\n            }\r\n\r\n            if ($collapsibleBlock.length && $collapsibleBlock.is(':visible') && !closed) {\r\n                resultHeight += $collapsibleBlock.outerHeight();\r\n            }\r\n\r\n            loader.get(this.name).height(resultHeight);\r\n        }\r\n    });\r\n});\r\n","Magento_AdminNotification/js/grid/columns/message.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'underscore'\r\n], function (Column, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_AdminNotification/grid/cells/message',\r\n            messageIndex: 'text',\r\n            fieldClass: {\r\n                message: true,\r\n                'message-warning': false,\r\n                'message-progress': false,\r\n                'message-success': false,\r\n                'message-error': false\r\n            },\r\n            statusMap: {\r\n                0: 'info',\r\n                1: 'progress',\r\n                2: 'success',\r\n                3: 'error'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getLabel: function (record) {\r\n            return record[this.messageIndex];\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getFieldClass: function ($row) {\r\n            var status = this.statusMap[$row.status] || 'warning',\r\n                result = {};\r\n\r\n            result['message-' + status] = true;\r\n            result = _.extend({}, this.fieldClass, result);\r\n\r\n            return result;\r\n        }\r\n    });\r\n});\r\n","Magento_AdminNotification/js/system/messages/popup.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, modal) {\r\n    'use strict';\r\n\r\n    return function (data, element) {\r\n\r\n        if (modal.modal) {\r\n            modal.modal.html($(element).html());\r\n        } else {\r\n            modal.modal = $(element).modal({\r\n                modalClass: data.class,\r\n                type: 'popup',\r\n                buttons: []\r\n            });\r\n        }\r\n\r\n        modal.modal.modal('openModal');\r\n    };\r\n});\r\n","Magento_AdminNotification/system/notification.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.systemMessageDialog', $.mage.modal, {\r\n        options: {\r\n            modalClass: 'modal-system-messages',\r\n            systemMessageTemplate:\r\n                '<% _.each(data.items, function(item) { %>' +\r\n                    '<li class=\"message message-warning' +\r\n                        '<% if (item.severity == 1) { %>error<% } else { %>warning<% } %>\">' +\r\n                        '<%= item.text %>' +\r\n                    '</li>' +\r\n                '<% }); %>'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this.options.title = $('#message-system-all').attr('title');\r\n            this._super();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        openModal: function (severity) {\r\n            var superMethod = $.proxy(this._super, this);\r\n\r\n            $.ajax({\r\n                url: this.options.ajaxUrl,\r\n                type: 'GET',\r\n                data: {\r\n                    severity: severity\r\n                }\r\n            }).done($.proxy(function (data) {\r\n                var tmpl = mageTemplate(this.options.systemMessageTemplate, {\r\n                    data: {\r\n                        items: data\r\n                    }\r\n                });\r\n\r\n                tmpl = $(tmpl);\r\n\r\n                this.element.html(\r\n                    $('<ul />', {\r\n                        'class': 'message-system-list'\r\n                    }).append(tmpl)\r\n                ).trigger('contentUpdated');\r\n\r\n                superMethod();\r\n            }, this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        closeModal: function () {\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    $(document).ready(function () {\r\n        $('#system_messages .message-system-short .error').on('click', function () {\r\n            $('#message-system-all').systemMessageDialog('openModal', 1);\r\n        });\r\n\r\n        $('#system_messages .message-system-short .warning').on('click', function () {\r\n            $('#message-system-all').systemMessageDialog('openModal', 2);\r\n        });\r\n    });\r\n\r\n    return $.mage.systemMessageDialog;\r\n});\r\n","Magento_AdobeIms/js/signIn.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'Magento_AdobeIms/js/action/authorization'\r\n], function (Component, $, login) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n\r\n        defaults: {\r\n            profileUrl: 'adobe_ims/user/profile',\r\n            logoutUrl: 'adobe_ims/user/logout',\r\n            defaultProfileImage:\r\n                'https://a5.behance.net/27000444e0c8b62c56deff3fc491e1a92d07f0cb/img/profile/no-image-276.png',\r\n            user: {\r\n                isAuthorized: false,\r\n                name: '',\r\n                email: '',\r\n                image: ''\r\n            },\r\n            loginConfig: {\r\n                url: 'https://ims-na1.adobelogin.com/ims/authorize',\r\n                callbackParsingParams: {\r\n                    regexpPattern: /auth\\[code=(success|error);message=(.+)\\]/,\r\n                    codeIndex: 1,\r\n                    messageIndex: 2,\r\n                    nameIndex: 3,\r\n                    successCode: 'success',\r\n                    errorCode: 'error'\r\n                },\r\n                popupWindowParams: {\r\n                    width: 500,\r\n                    height: 600,\r\n                    top: 100,\r\n                    left: 300\r\n                },\r\n                popupWindowTimeout: 60000\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['user']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Login to Adobe\r\n         *\r\n         * @return {window.Promise}\r\n         */\r\n        login: function () {\r\n\r\n            return new window.Promise(function (resolve, reject) {\r\n                if (this.user().isAuthorized) {\r\n                    return resolve();\r\n                }\r\n                login(this.loginConfig)\r\n                    .then(function (response) {\r\n                        this.loadUserProfile();\r\n                        resolve(response);\r\n                    }.bind(this))\r\n                    .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Retrieve data to authorized user.\r\n         *\r\n         * @return array\r\n         */\r\n        loadUserProfile: function () {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.profileUrl,\r\n                showLoader: true,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns void\r\n                 */\r\n                success: function (response) {\r\n                    this.user({\r\n                        isAuthorized: true,\r\n                        name: response.result.name,\r\n                        email: response.result.email,\r\n                        image: response.result.image\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Logout from adobe account\r\n         */\r\n        logout: function () {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.logoutUrl,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dataType: 'json',\r\n                context: this,\r\n                showLoader: true,\r\n                success: function () {\r\n                    this.user({\r\n                        isAuthorized: false,\r\n                        name: '',\r\n                        email: '',\r\n                        image: this.defaultProfileImage\r\n                    });\r\n                }.bind(this),\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeIms/js/action/authorization.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Build window params\r\n     * @param {Object} windowParams\r\n     * @returns {String}\r\n     */\r\n    function buildWindowParams(windowParams) {\r\n        var output = '',\r\n            coma = '',\r\n            paramName,\r\n            paramValue;\r\n\r\n        for (paramName in windowParams) {\r\n            if (windowParams[paramName]) {\r\n                paramValue = windowParams[paramName];\r\n                output += coma + paramName + '=' + paramValue;\r\n                coma = ',';\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    return function (config) {\r\n        var authWindow;\r\n\r\n        /**\r\n         * Opens authorization window with special parameters\r\n         */\r\n        authWindow = window.adobeIMSAuthWindow = window.open(\r\n            config.url,\r\n            '',\r\n            buildWindowParams(\r\n                config.popupWindowParams || {\r\n                    width: 500,\r\n                    height: 300\r\n                }\r\n            )\r\n        );\r\n\r\n        return new window.Promise(function (resolve, reject) {\r\n            var watcherId,\r\n                stopWatcherId;\r\n\r\n            /**\r\n             * Stop handle\r\n             */\r\n            function stopHandle() {\r\n                // Clear timers\r\n                clearTimeout(stopWatcherId);\r\n                clearInterval(watcherId);\r\n\r\n                // Close window\r\n                authWindow.close();\r\n            }\r\n\r\n            /**\r\n             * Start handle\r\n             */\r\n            function startHandle() {\r\n                var responseData;\r\n\r\n                try {\r\n\r\n                    if (authWindow.document.domain !== document.domain ||\r\n                        authWindow.document.readyState !== 'complete') {\r\n                        return;\r\n                    }\r\n\r\n                    /**\r\n                     * If within 10 seconds the result is not received, then reject the request\r\n                     */\r\n                    stopWatcherId = setTimeout(function () {\r\n                        stopHandle();\r\n                        reject(new Error('Time\\'s up.'));\r\n                    }, config.popupWindowTimeout || 60000);\r\n\r\n                    responseData = authWindow.document.body.innerHTML.match(\r\n                        config.callbackParsingParams.regexpPattern\r\n                    );\r\n\r\n                    if (!responseData) {\r\n                        return;\r\n                    }\r\n\r\n                    stopHandle();\r\n\r\n                    if (responseData[config.callbackParsingParams.codeIndex] ===\r\n                        config.callbackParsingParams.successCode) {\r\n                        resolve({\r\n                            isAuthorized: true,\r\n                            lastAuthSuccessMessage: responseData[config.callbackParsingParams.messageIndex]\r\n                        });\r\n                    } else {\r\n                        reject(responseData[config.callbackParsingParams.messageIndex]);\r\n                    }\r\n                } catch (e) {\r\n                    if (authWindow.closed) {\r\n                        clearTimeout(stopWatcherId);\r\n                        clearInterval(watcherId);\r\n                        reject(new Error('Authentication window was closed.'));\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Watch a result 1 time per second\r\n             */\r\n            watcherId = setInterval(startHandle, 1000);\r\n        });\r\n    };\r\n});\r\n","Magento_AdobeStockAdminUi/js/connection.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'uiComponent',\r\n    'jquery'\r\n], function (ko, Component, $) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_AdobeStockAdminUi/connection',\r\n            connectionFailedMessage: 'Connection test failed.',\r\n            emptyApiKeyMessage: 'Please fill the \"API Key (Client ID)\" field for a connection test',\r\n            apiKeyInputId: 'system_adobe_stock_integration_api_key',\r\n            url: '',\r\n            success: false,\r\n            message: '',\r\n            visible: false\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'success',\r\n                    'message',\r\n                    'visible'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.messageClass = ko.computed(function () {\r\n                return 'message-validation message message-' + (this.success() ? 'success' : 'error');\r\n            }, this);\r\n\r\n            if (!this.success()) {\r\n                this.showMessage(false, this.connectionFailedMessage);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {bool} success\r\n         * @param {String} message\r\n         */\r\n        showMessage: function (success, message) {\r\n            this.message(message);\r\n            this.success(success);\r\n            this.visible(true);\r\n        },\r\n\r\n        /**\r\n         * Send request to server to test connection to Adobe Stock API and display the result\r\n         */\r\n        testConnection: function () {\r\n            var apiKey = document.getElementById(this.apiKeyInputId).value;\r\n\r\n            if (apiKey.length === 0) {\r\n                this.showMessage(false, this.emptyApiKeyMessage);\r\n\r\n                return;\r\n            }\r\n\r\n            this.visible(false);\r\n\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.url,\r\n                dataType: 'json',\r\n                data: {\r\n                    'api_key': apiKey\r\n                },\r\n                success: function (response) {\r\n                    this.showMessage(response.success === true, response.message);\r\n                }.bind(this),\r\n                error: function () {\r\n                    this.showMessage(false, this.connectionFailedMessage);\r\n                }.bind(this)\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/media-gallery.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function ($, confirm) {\r\n    'use strict';\r\n\r\n    return {\r\n        jsTreeRootFolderName: 'Storage Root',\r\n        jsTreeFolderNameMaxLength: 20,\r\n\r\n        /**\r\n         * Locate downloaded image in media browser\r\n         *\r\n         * @param {String} path\r\n         */\r\n        locate: function (path) {\r\n            var i,\r\n                folderName,\r\n                openFolderChildrenButton,\r\n                imageFolder,\r\n                locatedImage,\r\n                imagePath = path.replace(/^\\/+/, ''),\r\n                imagePathParts = imagePath.split('/'),\r\n                imageFilename = imagePath,\r\n                imageFolderName = this.jsTreeRootFolderName;\r\n\r\n            $.ajaxSetup({\r\n                async: false\r\n            });\r\n\r\n            if (imagePathParts.length > 1) {\r\n                imageFilename = imagePathParts[imagePathParts.length - 1];\r\n                imageFolderName = imagePathParts[imagePathParts.length - 2];\r\n\r\n                for (i = 0; i < imagePathParts.length - 2; i++) {\r\n                    folderName = imagePathParts[i];\r\n\r\n                    /* folder name is being cut in file browser */\r\n                    // eslint-disable-next-line max-depth\r\n                    if (folderName.length > this.jsTreeFolderNameMaxLength) {\r\n                        folderName = folderName.substring(0, this.jsTreeFolderNameMaxLength) + '...';\r\n                    }\r\n\r\n                    //var folderSelector = \".jstree a:contains('\" + folderName + \"')\";\r\n                    openFolderChildrenButton = $('.jstree a:contains(\"' + folderName + '\")').prev('.jstree-icon');\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    if (openFolderChildrenButton.length) {\r\n                        openFolderChildrenButton.click();\r\n                    }\r\n                }\r\n            }\r\n\r\n            //select folder\r\n            imageFolder = $('.jstree a:contains(\"' + imageFolderName + '\")');\r\n\r\n            if (imageFolder.length) {\r\n                imageFolder[0].click();\r\n                //select image\r\n                locatedImage = $('div[data-row=\"file\"]:has(img[alt=\\\"' + imageFilename + '\\\"])');\r\n\r\n                return locatedImage.length ?  locatedImage : false;\r\n            }\r\n\r\n            $.ajaxSetup({\r\n                async: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Show popup that image cannot be located\r\n         */\r\n        notLocated: function () {\r\n            confirm({\r\n                title: $.mage.__('The image cannot be located'),\r\n                content: $.mage.__('We cannot find this image in the media gallery.'),\r\n                buttons: [{\r\n                    text: $.mage.__('Ok'),\r\n                    class: 'action-primary',\r\n                    attr: {},\r\n\r\n                    /**\r\n                     * Close modal on button click\r\n                     */\r\n                    click: function (event) {\r\n                        this.closeModal(event);\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/panel.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiElement',\r\n    'jquery',\r\n    'mage/translate'\r\n], function (Element, $, $t) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            containerId: '#adobe-stock-images-search-modal',\r\n            masonryComponentPath: 'adobe_stock_images_listing.adobe_stock_images_listing.adobe_stock_images_columns',\r\n            dataSourcePath: 'adobe_stock_images_listing.adobe_stock_images_listing_data_source',\r\n            modules: {\r\n                masonry: '${ $.masonryComponentPath }',\r\n                source: '${ $.dataSourcePath }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init component\r\n         *\r\n         * @return {exports}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            $(this.containerId).modal({\r\n                type: 'slide',\r\n                buttons: [],\r\n                modalClass: 'adobe-stock-modal',\r\n                title: $t('Adobe Stock')\r\n            }).on('openModal', function () {\r\n                this.masonry().setLayoutStylesWhenLoaded();\r\n            }.bind(this)).applyBindings();\r\n\r\n            $(window).on('fileDeleted.mediabrowser', this.reloadGrid.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update listing data\r\n         */\r\n        reloadGrid: function () {\r\n            this.source().set('params.t', Date.now());\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/signIn.js":"// jscs:disable\r\n/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n// jscs:enable\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_AdobeIms/js/signIn',\r\n    'Magento_AdobeIms/js/action/authorization',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function ($, signIn, auth, confirm) {\r\n    'use strict';\r\n\r\n    return signIn.extend({\r\n\r\n        defaults: {\r\n            userQuota: {},\r\n            // eslint-disable-next-line max-len\r\n            dataProvider: 'name = adobe_stock_images_listing.adobe_stock_images_listing_data_source, ns = adobe_stock_images_listing',\r\n            // eslint-disable-next-line max-len\r\n            previewProvider: 'name = adobe_stock_images_listing.adobe_stock_images_listing.adobe_stock_images_columns.preview, ns = adobe_stock_images_listing',\r\n            quotaUrl: 'adobe_stock/license/quota',\r\n            modules: {\r\n                source: '${ $.dataProvider }',\r\n                preview: '${ $.previewProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['userQuota']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Login to Adobe\r\n         *\r\n         * @return {window.Promise}\r\n         */\r\n        login: function () {\r\n            return new window.Promise(function (resolve, reject) {\r\n                if (this.user().isAuthorized) {\r\n                    return resolve();\r\n                }\r\n                auth(this.loginConfig)\r\n                    .then(function (response) {\r\n                        this.loadUserProfile();\r\n                        resolve(response);\r\n                    }.bind(this))\r\n                    .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Login action with popup on error..\r\n         */\r\n        loginClick: function () {\r\n            this.login().catch(function (error) {\r\n                this.showLoginErrorPopup(error);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Show popup that user failed to login.\r\n         */\r\n        showLoginErrorPopup: function (error) {\r\n            confirm({\r\n                title: $.mage.__('Couldn\\'t log you in'),\r\n                content: error,\r\n                buttons: [{\r\n                    text: $.mage.__('Ok'),\r\n                    class: 'action-primary',\r\n                    attr: {},\r\n\r\n                    /**\r\n                     * Close modal on button click\r\n                     */\r\n                    click: function (event) {\r\n                        this.closeModal(event);\r\n                    }\r\n                }]\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Logout from adobe account\r\n         */\r\n        logout: function () {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.logoutUrl,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dataType: 'json',\r\n                context: this,\r\n                showLoader: true,\r\n                success: function () {\r\n                    this.user({\r\n                        isAuthorized: false,\r\n                        name: '',\r\n                        email: '',\r\n                        image: this.defaultProfileImage\r\n                    });\r\n                }.bind(this),\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Retrieves full user quota.\r\n         */\r\n        getUserQuota: function () {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.quotaUrl,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns void\r\n                 */\r\n                success: function (response) {\r\n                    this.userQuota(response.result);\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        loadUserProfile: function () {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.profileUrl,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns void\r\n                 */\r\n                success: function (response) {\r\n                    this.user({\r\n                        isAuthorized: true,\r\n                        name: response.result.name,\r\n                        email: response.result.email,\r\n                        image: response.result.image\r\n                    });\r\n                    this.getUserQuota();\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/images-grid-sizes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/paging/sizes'\r\n], function (Sizes) {\r\n    'use strict';\r\n\r\n    return Sizes.extend({\r\n        defaults: {\r\n            value: 32,\r\n            minSize: 1,\r\n            maxSize: 64\r\n        },\r\n\r\n        exports: {\r\n            value: '${ $.provider }:params.paging.page',\r\n            options: '${ $.provider }:params.paging.options'\r\n        },\r\n\r\n        sizes: {\r\n            '32': {\r\n                value: 32,\r\n                label: 32\r\n            },\r\n            '48': {\r\n                value: 48,\r\n                label: 48\r\n            },\r\n            '64': {\r\n                value: 64,\r\n                label: 64\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.options = this.sizes;\r\n            this.updateArray();\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/sorting.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiElement',\r\n    'uiRegistry'\r\n], function (Element, uiRegistry) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'Magento_AdobeStockImageAdminUi/sorting',\r\n            options: [],\r\n            // eslint-disable-next-line max-len\r\n            previewProvider: 'name = adobe_stock_images_listing.adobe_stock_images_listing.adobe_stock_images_columns.preview, ns = ${ $.ns }',\r\n            applied: {},\r\n            selectedOption: '',\r\n            listens: {\r\n                'selectedOption': 'applyChanges'\r\n            },\r\n            statefull: {\r\n                selectedOption: true,\r\n                applied: true\r\n            },\r\n            modules: {\r\n                preview: '${ $.previewProvider }'\r\n            },\r\n            exports: {\r\n                applied: '${ $.provider }:params.sorting'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            this.preparedOptions();\r\n\r\n            return this._super()\r\n                .observe([\r\n                    'applied',\r\n                    'selectedOption'\r\n                ]);\r\n        },\r\n\r\n        /**\r\n         * Prepared sort order options\r\n         */\r\n        preparedOptions: function () {\r\n            var columns = uiRegistry.get('index = adobe_stock_images_columns');\r\n\r\n            if (columns && columns.elems().length > 0) {\r\n                columns.elems().map(function (column) {\r\n                    if (column.sortable === true) {\r\n                        this.options.push({\r\n                            value: column.index,\r\n                            label: column.label\r\n                        });\r\n                    }\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Apply changes\r\n         */\r\n        applyChanges: function () {\r\n            this.applied({\r\n                field: this.selectedOption(),\r\n                direction: 'desc'\r\n            });\r\n            this.preview().hide();\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/image-preview.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'uiLayout',\r\n    'Magento_Ui/js/grid/columns/image-preview'\r\n], function ($, layout, imagePreview) {\r\n    'use strict';\r\n\r\n    return imagePreview.extend({\r\n        defaults: {\r\n            downloadImagePreviewUrl: 'adobe_stock/preview/download',\r\n            licenseAndDownloadUrl: 'adobe_stock/license/license',\r\n            saveLicensedAndDownloadUrl: 'adobe_stock/license/saveLicensed',\r\n            confirmationUrl: 'adobe_stock/license/confirmation',\r\n            relatedImagesUrl: 'adobe_stock/preview/relatedimages',\r\n            buyCreditsUrl: 'https://stock.adobe.com/',\r\n            mediaGallerySelector: '.media-gallery-modal:has(#search_adobe_stock)',\r\n            adobeStockModalSelector: '.adobe-search-images-modal',\r\n            activeMediaGallerySelector: 'aside.modal-slide.adobe-stock-modal._show',\r\n            modules: {\r\n                keywords: '${ $.name }_keywords',\r\n                related: '${ $.name }_related',\r\n                actions: '${ $.name }_actions'\r\n            },\r\n            viewConfig: [\r\n                {\r\n                    component: 'Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/keywords',\r\n                    name: '${ $.name }_keywords'\r\n                },\r\n                {\r\n                    component: 'Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/related',\r\n                    name: '${ $.name }_related'\r\n                },\r\n                {\r\n                    component: 'Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/actions',\r\n                    name: '${ $.name }_actions',\r\n                    provider: '${ $.provider }'\r\n                }\r\n            ]\r\n        },\r\n\r\n        /**\r\n         * Initialize the component\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super().initView();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize child components\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initView: function () {\r\n            layout(this.viewConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get previous button disabled\r\n         *\r\n         * @param {Object} record\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        cannotViewPrevious: function (record) {\r\n            return this.related().cannotViewPrevious(record);\r\n        },\r\n\r\n        /**\r\n         * Get next button disabled\r\n         *\r\n         * @param {Object} record\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        cannotViewNext: function (record) {\r\n            return this.related().cannotViewNext(record);\r\n        },\r\n\r\n        /**\r\n         * Return active adobe gallery selector.\r\n         */\r\n        getAdobeModal: function () {\r\n            return $(this.activeMediaGallerySelector).find(this.adobeStockModalSelector);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        next: function (record) {\r\n            if (this.related().selectedTab()) {\r\n                this.related().nextRelated(record);\r\n\r\n                return;\r\n            }\r\n            this.keywords().hideAllKeywords();\r\n            this._super(record);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        prev: function (record) {\r\n            if (this.related().selectedTab()) {\r\n                this.related().prevRelated(record);\r\n\r\n                return;\r\n            }\r\n            this.keywords().hideAllKeywords();\r\n            this._super(record);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        show: function (record) {\r\n            this.related().selectedTab(null);\r\n            this.keywords().hideAllKeywords();\r\n            this.displayedRecord(record);\r\n            this._super(record);\r\n            this.related().loadRelatedImages(record);\r\n        },\r\n\r\n        /**\r\n         * Show related image data in the preview section\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        showRelated: function (record) {\r\n            this.keywords().hideAllKeywords();\r\n            this.displayedRecord(record);\r\n            this.updateHeight();\r\n        },\r\n\r\n        /**\r\n         * Returns attributes to display under the preview image\r\n         *\r\n         * @returns {*[]}\r\n         */\r\n        getDisplayAttributes: function () {\r\n            if (!this.displayedRecord()) {\r\n                return [];\r\n            }\r\n\r\n            return [\r\n                {\r\n                    name: 'Dimensions',\r\n                    value: this.displayedRecord().width + ' x ' + this.displayedRecord().height + ' px'\r\n                },\r\n                {\r\n                    name: 'File type',\r\n                    value: this.displayedRecord()['content_type'].toUpperCase()\r\n                },\r\n                {\r\n                    name: 'Category',\r\n                    value: this.displayedRecord().category.name || 'None'\r\n                },\r\n                {\r\n                    name: 'File #',\r\n                    value: this.displayedRecord().id\r\n                }\r\n            ];\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/overlay.js":"// jscs:disable\r\n/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n// jscs:enable\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/overlay',\r\n    'jquery'\r\n], function (overlay, $) {\r\n    'use strict';\r\n\r\n    return overlay.extend({\r\n        defaults: {\r\n            // eslint-disable-next-line max-len\r\n            provider: 'name = adobe_stock_images_listing.adobe_stock_images_listing_data_source, ns = adobe_stock_images_listing',\r\n            loginProvider: 'name = adobe-login, ns = adobe-login',\r\n            getImagesUrl: 'adobe_stock/license/getlist',\r\n            licensed: {},\r\n            modules: {\r\n                login: '${ $.loginProvider }',\r\n                masonry: '${ $.parentName }'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:data.items': 'updateLicensed',\r\n                '${ $.loginProvider }:user': 'updateLicensed'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'licensed'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set Licensed images data.\r\n         */\r\n        updateLicensed: function () {\r\n            if (!this.login().user().isAuthorized) {\r\n                this.licensed({});\r\n\r\n                return;\r\n            }\r\n\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: this.getImagesUrl + '?ids=' + this.getIds().join(','),\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns void\r\n                 */\r\n                success: function (response) {\r\n                    this.licensed(response.result);\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get all ids from data provider\r\n         *\r\n         * @returns {Number[]}\r\n         */\r\n        getIds: function () {\r\n            var ids = [];\r\n\r\n            this.masonry().rows().forEach(function (record) {\r\n                ids.push(record.id);\r\n            });\r\n\r\n            return ids;\r\n        },\r\n\r\n        /**\r\n         * Returns top displacement of overlay according to image height\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Object}\r\n         */\r\n        getStyles: function (record) {\r\n            var height = record.styles().height.replace('px', '') - 50;\r\n\r\n            return {\r\n                top: height + 'px'\r\n            };\r\n        },\r\n\r\n        /**\r\n         * If overlay should be visible\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        isVisible: function (row) {\r\n            return this.licensed()[row.id];\r\n        },\r\n\r\n        /**\r\n         * Get overlay label\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getLabel: function (row) {\r\n            return this.licensed()[row.id] ? 'Licensed' : '';\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/actions.js":"// jscs:disable\r\n/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n// jscs:enable\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'Magento_AdobeStockImageAdminUi/js/model/messages',\r\n    'Magento_AdobeStockImageAdminUi/js/media-gallery',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'text!Magento_AdobeStockImageAdminUi/template/modal/adobe-modal-prompt-content.html'\r\n], function (Component, $, messages, mediaGallery, confirmation, prompt, adobePromptContentTmpl) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_AdobeStockImageAdminUi/grid/column/preview/actions',\r\n            loginProvider: 'name = adobe-login, ns = adobe-login',\r\n            mediaGallerySelector: '.media-gallery-modal:has(#search_adobe_stock)',\r\n            adobeStockModalSelector: '.adobe-search-images-modal',\r\n            downloadImagePreviewUrl: 'adobe_stock/preview/download',\r\n            licenseAndDownloadUrl: 'adobe_stock/license/license',\r\n            saveLicensedAndDownloadUrl: 'adobe_stock/license/saveLicensed',\r\n            confirmationUrl: 'adobe_stock/license/confirmation',\r\n            buyCreditsUrl: 'https://stock.adobe.com/',\r\n            messageDelay: 5,\r\n            listens: {\r\n                '${ $.provider }:data.items': 'updateActions'\r\n            },\r\n            modules: {\r\n                login: '${ $.loginProvider }',\r\n                preview: '${ $.parentName }.preview',\r\n                overlay: '${ $.parentName }.overlay',\r\n                source: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update displayed record data on data source update\r\n         */\r\n        updateActions: function () {\r\n            var displayedRecord = this.preview().displayedRecord(),\r\n                updatedDisplayedRecord = this.preview().displayedRecord(),\r\n                records = this.source().data.items,\r\n                index;\r\n\r\n            if (typeof displayedRecord.id === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            for (index = 0; index < records.length; index++) {\r\n                if (records[index].id === displayedRecord.id) {\r\n                    updatedDisplayedRecord = records[index];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            this.preview().displayedRecord(updatedDisplayedRecord);\r\n        },\r\n\r\n        /**\r\n         * Returns is_downloaded flag as observable for given record\r\n         *\r\n         * @returns {observable}\r\n         */\r\n        isDownloaded: function () {\r\n            return this.preview().displayedRecord()['is_downloaded'];\r\n        },\r\n\r\n        /**\r\n         * Is asset licensed in adobe stock in context of currently logged in account\r\n         *\r\n         * @returns {observable}\r\n         */\r\n        isLicensed: function () {\r\n            return this.overlay().licensed()[this.preview().displayedRecord().id] && !this.isLicensedLocally();\r\n        },\r\n\r\n        /**\r\n         * Is licensed version of asset saved locally\r\n         *\r\n         * @returns {observable}\r\n         */\r\n        isLicensedLocally: function () {\r\n            return this.preview().displayedRecord()['is_licensed_locally'];\r\n        },\r\n\r\n        /**\r\n         * Locate downloaded image in media browser\r\n         */\r\n        locate: function () {\r\n            this.preview().getAdobeModal().trigger('closeModal');\r\n            this.selectDisplayedImageInMediaGallery();\r\n        },\r\n\r\n        /**\r\n         * Selects displayed image in media gallery\r\n         */\r\n        selectDisplayedImageInMediaGallery: function () {\r\n            var image = mediaGallery.locate(this.preview().displayedRecord().path);\r\n\r\n            image ? image.click() : mediaGallery.notLocated();\r\n        },\r\n\r\n        /**\r\n         * Save preview\r\n         */\r\n        savePreview: function () {\r\n            this.getPrompt(\r\n                {\r\n                    'title': $.mage.__('Save Preview'),\r\n                    'content': $.mage.__('File Name'),\r\n                    'visible': true,\r\n                    'actions': {\r\n                        confirm: function (fileName) {\r\n                            $.ajaxSetup({\r\n                                async: true\r\n                            });\r\n                            this.save(this.preview().displayedRecord(), fileName);\r\n                        }.bind(this)\r\n                    },\r\n                    'buttons': [{\r\n                        text: $.mage.__('Cancel'),\r\n                        class: 'action-secondary action-dismiss',\r\n\r\n                        /**\r\n                         * Close modal on button click\r\n                         */\r\n                        click: function () {\r\n                            this.closeModal();\r\n                        }\r\n                    }, {\r\n                        text: $.mage.__('Confirm'),\r\n                        class: 'action-primary action-accept'\r\n                    }]\r\n\r\n                }\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Save record as image\r\n         *\r\n         * @param {Object} record\r\n         * @param {String} fileName\r\n         * @param {bool} license\r\n         * @param {bool} isLicensed\r\n         */\r\n        save: function (record, fileName, license, isLicensed) {\r\n            var mediaBrowser = $(this.preview().mediaGallerySelector).data('mageMediabrowser'),\r\n                requestUrl = isLicensed ? this.preview().saveLicensedAndDownloadUrl :\r\n                    license ? this.preview().licenseAndDownloadUrl : this.preview().downloadImagePreviewUrl,\r\n                destinationPath = (mediaBrowser.activeNode.path || '') + '/' + fileName + '.' +\r\n                    this.getImageExtension(record);\r\n\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: requestUrl,\r\n                dataType: 'json',\r\n                showLoader: true,\r\n                data: {\r\n                    'media_id': record.id,\r\n                    'destination_path': destinationPath\r\n                },\r\n                context: this,\r\n\r\n                /**\r\n                 * Success handler for Adobe Stock preview or licensed image\r\n                 * download\r\n                 *\r\n                 */\r\n                success: function () {\r\n                    record['is_downloaded'] = 1;\r\n\r\n                    if (record.path === '') {\r\n                        record.path = destinationPath;\r\n                    }\r\n\r\n                    if (license || isLicensed) {\r\n                        record['is_licensed'] = 1;\r\n                        record['is_licensed_locally'] = 1;\r\n                    }\r\n                    this.preview().displayedRecord(record);\r\n                    this.source().reload({\r\n                        refresh: true\r\n                    });\r\n                    this.preview().getAdobeModal().trigger('closeModal');\r\n                    $.ajaxSetup({\r\n                        async: false\r\n                    });\r\n                    mediaBrowser.reload();\r\n                    $.ajaxSetup({\r\n                        async: true\r\n                    });\r\n                    this.selectDisplayedImageInMediaGallery();\r\n                },\r\n\r\n                /**\r\n                 * Error handler for Adobe Stock preview or licensed image\r\n                 * download\r\n                 *\r\n                 * @param {Object} response\r\n                 */\r\n                error: function (response) {\r\n                    var message;\r\n\r\n                    if (typeof response.responseJSON === 'undefined' ||\r\n                        typeof response.responseJSON.message === 'undefined'\r\n                    ) {\r\n                        message = 'There was an error on attempt to save the image!';\r\n                    } else {\r\n                        message = response.responseJSON.message;\r\n\r\n                        if (response.responseJSON['is_licensed'] === true) {\r\n                            record['is_licensed'] = 1;\r\n                            this.preview().displayedRecord(record);\r\n                            this.source().reload({\r\n                                refresh: true\r\n                            });\r\n                        }\r\n                    }\r\n                    messages.add('error', message);\r\n                    messages.scheduleCleanup(this.messageDelay);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Generate meaningful name image file,\r\n         * allow only alphanumerics, dashes, and underscores\r\n         *\r\n         * @param {Object} record\r\n         * @return string\r\n         */\r\n        generateImageName: function (record) {\r\n            var fileName = record.title.substring(0, 32)\r\n                .replace(/[^a-zA-Z0-9_]/g, '-')\r\n                .replace(/-{2,}/g, '-')\r\n                .toLowerCase();\r\n\r\n            /* If the filename does not contain latin chars, use ID as a filename */\r\n            return fileName === '-' ? record.id : fileName;\r\n        },\r\n\r\n        /**\r\n         * Get image file extension\r\n         *\r\n         * @param {Object} record\r\n         * @return string\r\n         */\r\n        getImageExtension: function (record) {\r\n            return record['content_type'].match(/[^/]{1,4}$/);\r\n        },\r\n\r\n        /**\r\n         * Get messages\r\n         *\r\n         * @return {Array}\r\n         */\r\n        getMessages: function () {\r\n            return messages.get();\r\n        },\r\n\r\n        /**\r\n         * License and save image\r\n         *\r\n         * @param {Object} record\r\n         * @param {String} fileName\r\n         */\r\n        licenseAndSave: function (record, fileName) {\r\n            this.save(record, fileName, true);\r\n        },\r\n\r\n        /**\r\n         * Shows license confirmation popup with information about current license quota\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        showLicenseConfirmation: function (record) {\r\n            $.ajax(\r\n                {\r\n                    type: 'POST',\r\n                    url: this.preview().confirmationUrl,\r\n                    dataType: 'json',\r\n                    data: {\r\n                        'media_id': record.id\r\n                    },\r\n                    context: this,\r\n                    showLoader: true,\r\n\r\n                    /**\r\n                     * On success result\r\n                     *\r\n                     * @param {Object} response\r\n                     */\r\n                    success: function (response) {\r\n                        var confirmationContent = $.mage.__('License \"' + record.title + '\"'),\r\n                            quotaMessage = response.result.message,\r\n                            canPurchase = response.result.canLicense,\r\n                            buyCreditsUrl = this.preview().buyCreditsUrl,\r\n                            displayFieldName = !this.isDownloaded() ? '<b>' + $.mage.__('File Name') + '</b>' : '',\r\n                            filePathArray = record.path.split('/'),\r\n                            imageIndex = filePathArray.length - 1,\r\n                            title = $.mage.__('License Adobe Stock Images?'),\r\n                            cancelText = $.mage.__('Cancel'),\r\n                            baseContent = '<p>' + confirmationContent + '</p><p><b>' + quotaMessage + '</b></p><br>';\r\n\r\n                        if (canPurchase) {\r\n                            this.getPrompt(\r\n                                 {\r\n                                    'title': title,\r\n                                    'content': baseContent + displayFieldName,\r\n                                    'visible': !this.isDownloaded(),\r\n                                    'actions': {\r\n                                        /**\r\n                                         * Confirm action\r\n                                         */\r\n                                        confirm: function (fileName) {\r\n                                            if (typeof fileName === 'undefined') {\r\n                                                fileName = filePathArray[imageIndex]\r\n                                                 .substring(0, filePathArray[imageIndex].lastIndexOf('.'));\r\n                                            }\r\n\r\n                                            this.licenseAndSave(record, fileName);\r\n                                        }.bind(this)\r\n                                    },\r\n                                    'buttons': [{\r\n                                        text: cancelText,\r\n                                        class: 'action-secondary action-dismiss',\r\n\r\n                                        /**\r\n                                         * Close modal\r\n                                         */\r\n                                        click: function () {\r\n                                            this.closeModal();\r\n                                        }\r\n                                    }, {\r\n                                        text: $.mage.__('Confirm'),\r\n                                        class: 'action-primary action-accept'\r\n                                    }]\r\n\r\n                                }\r\n                            );\r\n                        } else {\r\n                            confirmation({\r\n                                title: title,\r\n                                content: baseContent,\r\n                                buttons: [{\r\n                                    text: cancelText,\r\n                                    class: 'action-secondary action-dismiss',\r\n\r\n                                    /**\r\n                                     * Close modal\r\n                                     */\r\n                                    click: function () {\r\n                                        this.closeModal();\r\n                                    }\r\n                                },{\r\n                                    text: $.mage.__('Buy Credits'),\r\n                                    class: 'action-primary action-accept',\r\n\r\n                                    /**\r\n                                     * Close modal\r\n                                     */\r\n                                    click: function () {\r\n                                        window.open(buyCreditsUrl);\r\n                                        this.closeModal();\r\n                                    }\r\n                                }]\r\n                            });\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * On error\r\n                     */\r\n                    error: function (response) {\r\n                        messages.add('error', response.responseJSON.message);\r\n                        messages.scheduleCleanup(this.messageDelay);\r\n                    }\r\n                }\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Return configured  prompt with input field.\r\n         */\r\n        getPrompt: function (data) {\r\n\r\n            prompt({\r\n                title: data.title,\r\n                content:  data.content,\r\n                value: this.generateImageName(this.preview().displayedRecord()),\r\n                imageExtension: this.getImageExtension(this.preview().displayedRecord()),\r\n                visible: data.visible,\r\n                promptContentTmpl: adobePromptContentTmpl,\r\n                modalClass: 'adobe-stock-save-preview-prompt',\r\n                validation: true,\r\n                promptField: '[data-role=\"adobe-stock-image-name-field\"]',\r\n                validationRules: ['required-entry', 'validate-image-name'],\r\n                attributesForm: {\r\n                    novalidate: 'novalidate',\r\n                    action: '',\r\n                    onkeydown: 'return event.key != \\'Enter\\';'\r\n                },\r\n                attributesField: {\r\n                    name: 'name',\r\n                    'data-validate': '{required:true}',\r\n                    maxlength: '128'\r\n                },\r\n                context: this,\r\n                actions: data.actions,\r\n                buttons: data.buttons\r\n            });\r\n\r\n        },\r\n\r\n        /**\r\n         * Process of license\r\n         */\r\n        licenseProcess: function () {\r\n            this.login().login()\r\n                .then(function () {\r\n                    this.showLicenseConfirmation(this.preview().displayedRecord());\r\n                }.bind(this))\r\n                .catch(function (error) {\r\n                    messages.add('error', error);\r\n                })\r\n                .finally(function () {\r\n                    messages.scheduleCleanup(this.messageDelay);\r\n                }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Save licensed\r\n         */\r\n        saveLicensed: function () {\r\n            if (!this.login().user().isAuthorized) {\r\n                return;\r\n            }\r\n\r\n            if (!this.isLicensed()) {\r\n                return;\r\n            }\r\n\r\n            this.getPrompt(\r\n                {\r\n                    'title': $.mage.__('Save'),\r\n                    'content': $.mage.__('File Name'),\r\n                    'visible': true,\r\n                    'actions': {\r\n                        confirm: function (fileName) {\r\n                            this.save(this.preview().displayedRecord(), fileName, false, true);\r\n                        }.bind(this)\r\n                    },\r\n                    'buttons': [\r\n                        {\r\n                            text: $.mage.__('Cancel'),\r\n                            class: 'action-secondary action-dismiss',\r\n\r\n                            /**\r\n                             * Close modal on button click\r\n                             */\r\n                            click: function () {\r\n                                this.closeModal();\r\n                            }\r\n                        },\r\n                        {\r\n                            text: $.mage.__('Confirm'),\r\n                            class: 'action-primary action-accept'\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Returns license button title depending on the existing saved preview\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLicenseButtonTitle: function () {\r\n            return this.isDownloaded() ?  $.mage.__('License') : $.mage.__('License and Save');\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/keywords.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiComponent',\r\n    'underscore'\r\n], function (Component, _) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_AdobeStockImageAdminUi/grid/column/preview/keywords',\r\n            chipsProvider: 'componentType = filtersChips, ns = ${ $.ns }',\r\n            defaultKeywordsLimit: 5,\r\n            keywordsLimit: 5,\r\n            canViewMoreKeywords: true,\r\n            modules: {\r\n                chips: '${ $.chipsProvider }',\r\n                preview: '${ $.parentName }.preview'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'keywordsLimit',\r\n                    'canViewMoreKeywords'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns keywords to display under the attributes image\r\n         *\r\n         * @returns {*[]}\r\n         */\r\n        getKeywords: function (record) {\r\n            return record.keywords;\r\n        },\r\n\r\n        /**\r\n         * Returns keywords limit to show no of keywords\r\n         */\r\n        getKeywordsLimit: function () {\r\n            return this.keywordsLimit();\r\n        },\r\n\r\n        /**\r\n         * Show all the related keywords\r\n         */\r\n        viewAllKeywords: function (record) {\r\n            this.keywordsLimit(record.keywords.length);\r\n            this.canViewMoreKeywords(false);\r\n            this.preview().updateHeight();\r\n            this.preview().scrollToPreview();\r\n        },\r\n\r\n        /**\r\n         * Hide all the related keywords\r\n         */\r\n        hideAllKeywords: function () {\r\n            this.keywordsLimit(this.defaultKeywordsLimit);\r\n            this.canViewMoreKeywords(true);\r\n        },\r\n\r\n        /**\r\n         * Drop all filters and initiate search on keyword click event\r\n         */\r\n        searchByKeyWord: function (keyword) {\r\n            _.invoke(this.chips().elems(), 'clear');\r\n            _.invoke(this.chips().elems(), 'apply', keyword);\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/related.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiComponent',\r\n    'underscore',\r\n    'jquery',\r\n    'mage/backend/tabs'\r\n], function (Component, _, $) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_AdobeStockImageAdminUi/grid/column/preview/related',\r\n            filterChipsProvider: 'componentType = filters, ns = ${ $.ns }',\r\n            tabImagesLimit: 4,\r\n            serieFilterValue: '',\r\n            modelFilterValue: '',\r\n            selectedTab: null,\r\n            relatedImages: {\r\n                series: {},\r\n                model: {}\r\n            },\r\n            statefull: {\r\n                serieFilterValue: true,\r\n                modelFilterValue: true\r\n            },\r\n            modules: {\r\n                chips: '${ $.chipsProvider }',\r\n                filterChips: '${ $.filterChipsProvider }',\r\n                preview: '${ $.parentName }.preview'\r\n            },\r\n            exports: {\r\n                serieFilterValue: '${ $.provider }:params.filters.serie_id',\r\n                modelFilterValue: '${ $.provider }:params.filters.model_id'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes related component.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.filterChips().updateActive();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'serieFilterValue',\r\n                    'modelFilterValue',\r\n                    'selectedTab',\r\n                    'relatedImages'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check if related images are present for the record\r\n         *\r\n         * @param {Object} record\r\n         * @returns boolean\r\n         */\r\n        _isLoaded: function (record) {\r\n            return this.getSeries(record).length || this.getModel(record).length;\r\n        },\r\n\r\n        /**\r\n         * Check if related images has Data\r\n         *\r\n         * @param {Object} record\r\n         * @returns boolean\r\n         */\r\n        _hasData: function (record) {\r\n            return typeof this.relatedImages().series[record.id] !== 'undefined' ||\r\n                typeof this.relatedImages().model[record.id] !== 'undefined';\r\n        },\r\n\r\n        /**\r\n         * Check if visible container\r\n         *\r\n         * @param {Object} record\r\n         * @returns boolean\r\n         */\r\n        isVisible: function (record) {\r\n            return !this._isLoaded(record) || this._hasData(record);\r\n        },\r\n\r\n        /**\r\n         * Get image related image series.s\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        loadRelatedImages: function (record) {\r\n            var series = this.getSeries(record),\r\n                model = this.getModel(record);\r\n\r\n            if (series && series.length ||\r\n                model && model.length\r\n            ) {\r\n                return;\r\n            }\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: this.preview().relatedImagesUrl,\r\n                dataType: 'json',\r\n                data: {\r\n                    'image_id': record.id,\r\n                    'limit': this.tabImagesLimit\r\n                }\r\n            }).done(function (data) {\r\n                var relatedImages = this.relatedImages();\r\n\r\n                relatedImages.series[record.id] = data.result['same_series'];\r\n                relatedImages.model[record.id] = data.result['same_model'];\r\n                this.relatedImages(relatedImages);\r\n                this.preview().updateHeight();\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Returns series to display under the image\r\n         *\r\n         * @param {Object} record\r\n         * @returns {*[]}\r\n         */\r\n        getSeries: function (record) {\r\n            return this.relatedImages().series[record.id] || [];\r\n        },\r\n\r\n        /**\r\n         * Check if the number of related series image is greater than 4 or not\r\n         *\r\n         * @param {Object} record\r\n         * @returns boolean\r\n         */\r\n        canShowMoreSeriesImages: function (record) {\r\n            return this.getSeries(record).length >= this.tabImagesLimit;\r\n        },\r\n\r\n        /**\r\n         * Returns model to display under the image\r\n         *\r\n         * @param {Object} record\r\n         * @returns {*[]}\r\n         */\r\n        getModel: function (record) {\r\n            return this.relatedImages().model[record.id] || [];\r\n        },\r\n\r\n        /**\r\n         * Check if the number of related model image is greater than 4 or not\r\n         *\r\n         * @param {Object} record\r\n         * @returns boolean\r\n         */\r\n        canShowMoreModelImages: function (record) {\r\n            return this.getModel(record).length >= this.tabImagesLimit;\r\n        },\r\n\r\n        /**\r\n         * Filter images from serie_id\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        seeMoreFromSeries: function (record) {\r\n            this.serieFilterValue(record.id);\r\n            this.filterChips().set(\r\n                'applied',\r\n                {\r\n                    'serie_id': record.id.toString()\r\n                }\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Filter images from serie_id\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        seeMoreFromModel: function (record) {\r\n            this.modelFilterValue(record.id);\r\n            this.filterChips().set(\r\n                'applied',\r\n                {\r\n                    'model_id': record.id.toString()\r\n                }\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Next related image preview\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        nextRelated: function (record) {\r\n            var relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record),\r\n                nextRelatedIndex = _.findLastIndex(\r\n                    relatedList,\r\n                    {\r\n                        id: this.preview().displayedRecord().id\r\n                    }\r\n                ) + 1,\r\n                nextRelated = relatedList[nextRelatedIndex];\r\n\r\n            if (typeof nextRelated === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            this.switchImagePreviewToRelatedImage(nextRelated);\r\n        },\r\n\r\n        /**\r\n         * Previous related preview\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        prevRelated: function (record) {\r\n            var relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record),\r\n                prevRelatedIndex = _.findLastIndex(\r\n                    relatedList,\r\n                    {\r\n                        id: this.preview().displayedRecord().id\r\n                    }\r\n                ) - 1,\r\n                prevRelated = relatedList[prevRelatedIndex];\r\n\r\n            if (typeof prevRelated === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            this.switchImagePreviewToRelatedImage(prevRelated);\r\n        },\r\n\r\n        /**\r\n         * Get previous button disabled\r\n         *\r\n         * @param {Object} record\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        cannotViewPrevious: function (record) {\r\n            var relatedList, prevRelatedIndex, prevRelated;\r\n\r\n            if (!this.selectedTab()) {\r\n                return false;\r\n            }\r\n            relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record);\r\n            prevRelatedIndex = _.findLastIndex(\r\n                relatedList,\r\n                {\r\n                    id: this.preview().displayedRecord().id\r\n                }\r\n            ) - 1;\r\n            prevRelated = relatedList[prevRelatedIndex];\r\n\r\n            return typeof prevRelated === 'undefined';\r\n        },\r\n\r\n        /**\r\n         * Get next button disabled\r\n         *\r\n         * @param {Object} record\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        cannotViewNext: function (record) {\r\n            var relatedList, nextRelatedIndex, nextRelated;\r\n\r\n            if (!this.selectedTab()) {\r\n                return false;\r\n            }\r\n            relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record);\r\n            nextRelatedIndex = _.findLastIndex(\r\n                relatedList,\r\n                {\r\n                    id: this.preview().displayedRecord().id\r\n                }\r\n            ) + 1;\r\n            nextRelated = relatedList[nextRelatedIndex];\r\n\r\n            return typeof nextRelated === 'undefined';\r\n        },\r\n\r\n        /**\r\n         * Switch image preview to related image\r\n         *\r\n         * @param {Object|null} relatedImage\r\n         */\r\n        switchImagePreviewToRelatedImage: function (relatedImage) {\r\n            if (!relatedImage) {\r\n                this.selectedTab(null);\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.preview().displayedRecord().id === relatedImage.id) {\r\n                return;\r\n            }\r\n\r\n            this.preview().showRelated(relatedImage);\r\n        },\r\n\r\n        /**\r\n         * Switch image preview to series image\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        switchImagePreviewToSeriesImage: function (record) {\r\n            this.selectedTab('series');\r\n            this.switchImagePreviewToRelatedImage(record);\r\n        },\r\n\r\n        /**\r\n         * Switch image preview to model image\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        switchImagePreviewToModelImage: function (record) {\r\n            this.selectedTab('model');\r\n            this.switchImagePreviewToRelatedImage(record);\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/model/messages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'knockout'\r\n], function (ko) {\r\n    'use strict';\r\n\r\n    return {\r\n        messages: ko.observableArray(),\r\n\r\n        /**\r\n         * Get messages\r\n         *\r\n         * @return {Array}\r\n         */\r\n        get: function () {\r\n            return this.messages();\r\n        },\r\n\r\n        /**\r\n         * Add message\r\n         *\r\n         * @param {String} type\r\n         * @param {String} message\r\n         */\r\n        add: function (type, message) {\r\n            this.messages.push({\r\n                code: type,\r\n                message: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Clear messages\r\n         */\r\n        clear: function () {\r\n            this.messages.removeAll();\r\n        },\r\n\r\n        /**\r\n         * Schedule message cleanup\r\n         *\r\n         * @param {Number} delay\r\n         */\r\n        scheduleCleanup: function (delay) {\r\n            // eslint-disable-next-line no-unused-vars\r\n            var timerId;\r\n\r\n            delay = delay || 3;\r\n\r\n            timerId = setTimeout(function () {\r\n                clearTimeout(timerId);\r\n                this.clear();\r\n            }.bind(this), Number(delay) * 1000);\r\n        }\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/validation/validate-image-name.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/validate',\r\n    'mage/translate'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.validator.addMethod(\r\n        'validate-image-name', function (value) {\r\n            return /^[a-zA-Z0-9\\-\\_]+$/i.test(value);\r\n\r\n        }, $.mage.__('Please name the file using only letters, numbers, underscores and dashes'));\r\n});\r\n","Magento_AdvancedSearch/js/testconnection.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui'\r\n], function ($, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.testConnection', {\r\n        options: {\r\n            url: '',\r\n            elementId: '',\r\n            successText: '',\r\n            failedText: '',\r\n            fieldMapping: ''\r\n        },\r\n\r\n        /**\r\n         * Bind handlers to events\r\n         */\r\n        _create: function () {\r\n            this._on({\r\n                'click': $.proxy(this._connect, this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method triggers an AJAX request to check search engine connection\r\n         * @private\r\n         */\r\n        _connect: function () {\r\n            var result = this.options.failedText,\r\n                element =  $('#' + this.options.elementId),\r\n                self = this,\r\n                params = {},\r\n                msg = '',\r\n                fieldToCheck = this.options.fieldToCheck || 'success';\r\n\r\n            element.removeClass('success').addClass('fail');\r\n            $.each($.parseJSON(this.options.fieldMapping), function (key, el) {\r\n                params[key] = $('#' + el).val();\r\n            });\r\n            $.ajax({\r\n                url: this.options.url,\r\n                showLoader: true,\r\n                data: params,\r\n                headers: this.options.headers || {}\r\n            }).done(function (response) {\r\n                if (response[fieldToCheck]) {\r\n                    element.removeClass('fail').addClass('success');\r\n                    result = self.options.successText;\r\n                } else {\r\n                    msg = response.errorMessage;\r\n\r\n                    if (msg) {\r\n                        alert({\r\n                            content: msg\r\n                        });\r\n                    }\r\n                }\r\n            }).always(function () {\r\n                $('#' + self.options.elementId + '_result').text(result);\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.testConnection;\r\n});\r\n","Magento_AsynchronousOperations/js/insert-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/insert-form',\r\n    'uiRegistry'\r\n], function (Insert, registry) {\r\n    'use strict';\r\n\r\n    return Insert.extend({\r\n        defaults: {\r\n            modalProvider: '${ $.parentName }',\r\n            titlePrefix: '',\r\n            imports: {\r\n                changeModalTitle: '${ $.modalProvider }:state'\r\n            },\r\n            listens: {\r\n                responseData: 'afterRetry'\r\n            },\r\n            modules: {\r\n                modal: '${ $.modalProvider }',\r\n                notificationListing: '${ $.columnsProvider }'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function () {\r\n            var modalTitleProvider;\r\n\r\n            this._super();\r\n            modalTitleProvider = this.modalTitleProvider.split(':');\r\n            this.modalTitleTarget = modalTitleProvider[0];\r\n            this.modalTitlePath = modalTitleProvider[1];\r\n        },\r\n\r\n        /**\r\n         * Change modal title.\r\n         *\r\n         * @param {Boolean} change\r\n         */\r\n        changeModalTitle: function (change) {\r\n            if (change) {\r\n                registry.get(this.modalTitleTarget, function (target) {\r\n                    this.modal().setTitle(this.titlePrefix + target.get(this.modalTitlePath));\r\n                }.bind(this));\r\n            } else {\r\n                this.modal().setTitle('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Action after retry operation.\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        afterRetry: function (data) {\r\n            if (!data.error) {\r\n                this.modal().closeModal();\r\n                this.notificationListing().reload();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_AsynchronousOperations/js/form/error.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        /** @inheritdoc */\r\n        onUpdate: function () {\r\n            this.bubble('update', this.hasChanged());\r\n        }\r\n    });\r\n});\r\n","Magento_AsynchronousOperations/js/grid/listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_AdminNotification/js/grid/listing',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate',\r\n    'underscore',\r\n    'jquery'\r\n], function (Listing, uiAlert, $t, _, $) {\r\n    'use strict';\r\n\r\n    return Listing.extend({\r\n        defaults: {\r\n            isAllowed: true,\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                data: {},\r\n                url: '${ $.dismissUrl }'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            _.bindAll(this, 'reload', 'onError');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Dismiss all items.\r\n         */\r\n        dismissAll: function () {\r\n            var toDismiss = [];\r\n\r\n            _.each(this.rows, function (row) {\r\n                if (row.dismiss) {\r\n                    toDismiss.push(row.uuid);\r\n                }\r\n            });\r\n            toDismiss.length && this.dismiss(toDismiss);\r\n        },\r\n\r\n        /**\r\n         * Dismiss action.\r\n         *\r\n         * @param {Array} items\r\n         */\r\n        dismiss: function (items) {\r\n            var config = _.extend({}, this.ajaxSettings);\r\n\r\n            config.data.uuid = items;\r\n            this.showLoader();\r\n\r\n            $.ajax(config)\r\n                .done(this.reload)\r\n                .fail(this.onError);\r\n        },\r\n\r\n        /**\r\n         * Success callback for dismiss request.\r\n         */\r\n        reload: function () {\r\n            this.source.reload({\r\n                refresh: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Error callback for dismiss request.\r\n         *\r\n         * @param {Object} xhr\r\n         */\r\n        onError: function (xhr) {\r\n            this.hideLoader();\r\n\r\n            if (xhr.statusText === 'abort') {\r\n                return;\r\n            }\r\n\r\n            uiAlert({\r\n                content: $t('Something went wrong.')\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Authorizenet/js/direct-post.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/backend/validation',\r\n    'prototype'\r\n], function (jQuery) {\r\n    window.directPost = Class.create();\r\n    directPost.prototype = {\r\n        initialize: function (methodCode, iframeId, controller, orderSaveUrl, cgiUrl, nativeAction) {\r\n            var prepare = function (event, method) {\r\n                if (method === 'authorizenet_directpost') {\r\n                    this.preparePayment();\r\n                } else {\r\n                    jQuery('#edit_form')\r\n                        .off('submitOrder.authorizenet');\r\n                }\r\n            };\r\n\r\n            this.iframeId = iframeId;\r\n            this.controller = controller;\r\n            this.orderSaveUrl = orderSaveUrl;\r\n            this.nativeAction = nativeAction;\r\n            this.cgiUrl = cgiUrl;\r\n            this.code = methodCode;\r\n            this.inputs = ['cc_type', 'cc_number', 'expiration', 'expiration_yr', 'cc_cid'];\r\n            this.headers = [];\r\n            this.isValid = true;\r\n            this.paymentRequestSent = false;\r\n            this.orderIncrementId = false;\r\n            this.successUrl = false;\r\n            this.hasError = false;\r\n            this.tmpForm = false;\r\n\r\n            this.onLoadIframe = this.loadIframe.bindAsEventListener(this);\r\n            this.onLoadOrderIframe = this.loadOrderIframe.bindAsEventListener(this);\r\n            this.onSubmitAdminOrder = this.submitAdminOrder.bindAsEventListener(this);\r\n\r\n            jQuery('#edit_form').on('changePaymentMethod', prepare.bind(this));\r\n\r\n            jQuery('#edit_form').trigger(\r\n                'changePaymentMethod',\r\n                [\r\n                    jQuery('#edit_form').find(':radio[name=\"payment[method]\"]:checked').val()\r\n                ]\r\n            );\r\n        },\r\n\r\n        validate: function () {\r\n            this.isValid = true;\r\n            this.inputs.each(function (elemIndex) {\r\n                if ($(this.code + '_' + elemIndex)) {\r\n                    if (!jQuery.validator.validateElement($(this.code + '_' + elemIndex))) {\r\n                        this.isValid = false;\r\n                    }\r\n                }\r\n            }, this);\r\n\r\n            return this.isValid;\r\n        },\r\n\r\n        changeInputOptions: function (param, value) {\r\n            this.inputs.each(function (elemIndex) {\r\n                if ($(this.code + '_' + elemIndex)) {\r\n                    $(this.code + '_' + elemIndex).writeAttribute(param, value);\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        preparePayment: function () {\r\n            this.changeInputOptions('autocomplete', 'off');\r\n            jQuery('#edit_form')\r\n                .off('submitOrder')\r\n                .on('submitOrder.authorizenet', this.submitAdminOrder.bind(this));\r\n\r\n            if ($(this.iframeId)) {\r\n                // Temporary solution will be removed after refactoring Authorize.Net (sales) functionality\r\n                jQuery('.scalable.save:not(disabled)').removeAttr('onclick');\r\n                jQuery(document).off('click.directPost');\r\n                jQuery(document).on(\r\n                    'click.directPost',\r\n                    '.scalable.save:not(disabled)',\r\n                    jQuery.proxy(this.onSubmitAdminOrder, this)\r\n                );\r\n                $('order-' + this.iframeId).observe('load', this.onLoadOrderIframe);\r\n                $(this.iframeId).observe('load', this.onLoadIframe);\r\n            }\r\n        },\r\n\r\n        loadIframe: function () {\r\n            if (this.paymentRequestSent) {\r\n                if (!this.orderRequestSent) {\r\n                    this.paymentRequestSent = false;\r\n\r\n                    if (!this.hasError) {\r\n                        this.returnQuote();\r\n                    } else {\r\n                        this.changeInputOptions('disabled', false);\r\n                        jQuery('body').trigger('processStop');\r\n                        enableElements('save');\r\n                    }\r\n                }\r\n\r\n                if (this.tmpForm) {\r\n                    document.body.removeChild(this.tmpForm);\r\n                }\r\n            }\r\n        },\r\n\r\n        loadOrderIframe: function () {\r\n            if (this.orderRequestSent) {\r\n                $(this.iframeId).hide();\r\n                var data = $('order-' + this.iframeId).contentWindow.document.body.getElementsByTagName('pre')[0].innerHTML;\r\n\r\n                this.saveAdminOrderSuccess(data);\r\n                this.orderRequestSent = false;\r\n            }\r\n        },\r\n\r\n        showError: function (msg) {\r\n            this.hasError = true;\r\n\r\n            if (this.controller == 'onepage') {\r\n                $(this.iframeId).hide();\r\n                this.resetLoadWaiting();\r\n            }\r\n            alert(msg);\r\n        },\r\n\r\n        returnQuote: function () {\r\n            var url = this.orderSaveUrl.replace('place', 'returnQuote');\r\n\r\n            new Ajax.Request(url, {\r\n                onSuccess: function (transport) {\r\n                    try {\r\n                        response = transport.responseText.evalJSON(true);\r\n                    } catch (e) {\r\n                        response = {};\r\n                    }\r\n\r\n                    if (response.error_message) {\r\n                        alert(response.error_message);\r\n                    }\r\n                    $(this.iframeId).show();\r\n                    this.changeInputOptions('disabled', false);\r\n                    jQuery('body').trigger('processStop');\r\n                    enableElements('save');\r\n                }.bind(this)\r\n            });\r\n        },\r\n\r\n        setLoadWaiting: function () {\r\n            this.headers.each(function (header) {\r\n                header.removeClassName('allow');\r\n            });\r\n            checkout.setLoadWaiting('review');\r\n        },\r\n\r\n        resetLoadWaiting: function () {\r\n            this.headers.each(function (header) {\r\n                header.addClassName('allow');\r\n            });\r\n            checkout.setLoadWaiting(false);\r\n        },\r\n\r\n        submitAdminOrder: function () {\r\n            // Temporary solution will be removed after refactoring Authorize.Net (sales) functionality\r\n            var editForm = jQuery('#edit_form');\r\n\r\n            if (editForm.valid()) {\r\n                // Temporary solution will be removed after refactoring Authorize.Net (sales) functionality\r\n                paymentMethodEl = editForm.find(':radio[name=\"payment[method]\"]:checked');\r\n                this.hasError = false;\r\n\r\n                if (paymentMethodEl.val() == this.code) {\r\n                    jQuery('body').trigger('processStart');\r\n                    setLoaderPosition();\r\n                    this.changeInputOptions('disabled', 'disabled');\r\n                    this.paymentRequestSent = true;\r\n                    this.orderRequestSent = true;\r\n                    // Temporary solutions will be removed after refactoring Authorize.Net (sales) functionality\r\n                    editForm.attr('action', this.orderSaveUrl);\r\n                    editForm.attr('target',\r\n                            jQuery('#order-' + this.iframeId).attr('name'));\r\n                    editForm.append(this.createHiddenElement('controller', this.controller));\r\n                    disableElements('save');\r\n                    // Temporary solutions will be removed after refactoring Authorize.Net (sales) functionality\r\n                    order._realSubmit();\r\n                } else {\r\n                    editForm.attr('action', this.nativeAction);\r\n                    editForm.attr('target', '_top');\r\n                    disableElements('save');\r\n                    // Temporary solutions will be removed after refactoring Authorize.Net (sales) functionality\r\n                    order._realSubmit();\r\n                }\r\n            }\r\n        },\r\n\r\n        recollectQuote: function () {\r\n            var area = ['sidebar', 'items', 'shipping_method', 'billing_method', 'totals', 'giftmessage'];\r\n\r\n            area = order.prepareArea(area);\r\n            var url = order.loadBaseUrl + 'block/' + area;\r\n            var info = $('order-items_grid').select('input', 'select', 'textarea');\r\n            var data = {};\r\n\r\n            for (var i = 0; i < info.length; i++) {\r\n                if (!info[i].disabled && (info[i].type != 'checkbox' || info[i].checked)) {\r\n                    data[info[i].name] = info[i].getValue();\r\n                }\r\n            }\r\n            data.reset_shipping = true;\r\n            data.update_items = true;\r\n\r\n            if ($('coupons:code') && $F('coupons:code')) {\r\n                data['order[coupon][code]'] = $F('coupons:code');\r\n            }\r\n            data.json = true;\r\n            new Ajax.Request(url, {\r\n                parameters: data,\r\n                loaderArea: 'html-body',\r\n                onSuccess: function (transport) {\r\n                    jQuery('#edit_form').submit();\r\n                }\r\n            });\r\n\r\n        },\r\n\r\n        saveAdminOrderSuccess: function (data) {\r\n            try {\r\n                response = data.evalJSON(true);\r\n            } catch (e) {\r\n                response = {};\r\n            }\r\n\r\n            if (response.directpost) {\r\n                this.orderIncrementId = response.directpost.fields.x_invoice_num;\r\n                var paymentData = {};\r\n\r\n                for (var key in response.directpost.fields) {\r\n                    paymentData[key] = response.directpost.fields[key];\r\n                }\r\n                var preparedData = this.preparePaymentRequest(paymentData);\r\n\r\n                this.sendPaymentRequest(preparedData);\r\n            } else {\r\n                if (response.redirect) {\r\n                    window.location = response.redirect;\r\n                }\r\n\r\n                if (response.error_messages) {\r\n                    var msg = response.error_messages;\r\n\r\n                    if (typeof msg == 'object') {\r\n                        msg = msg.join('\\n');\r\n                    }\r\n\r\n                    if (msg) {\r\n                        alert(msg);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        preparePaymentRequest: function (data) {\r\n            if ($(this.code + '_cc_cid')) {\r\n                data.x_card_code = $(this.code + '_cc_cid').value;\r\n            }\r\n            var year = $(this.code + '_expiration_yr').value;\r\n\r\n            if (year.length > 2) {\r\n                year = year.substring(2);\r\n            }\r\n            var month = parseInt($(this.code + '_expiration').value, 10);\r\n\r\n            if (month < 10) {\r\n                month = '0' + month;\r\n            }\r\n\r\n            data.x_exp_date = month + '/' + year;\r\n            data.x_card_num = $(this.code + '_cc_number').value;\r\n\r\n            return data;\r\n        },\r\n\r\n        sendPaymentRequest: function (preparedData) {\r\n            this.recreateIframe();\r\n            this.tmpForm = document.createElement('form');\r\n            this.tmpForm.style.display = 'none';\r\n            this.tmpForm.enctype = 'application/x-www-form-urlencoded';\r\n            this.tmpForm.method = 'POST';\r\n            document.body.appendChild(this.tmpForm);\r\n            this.tmpForm.action = this.cgiUrl;\r\n            this.tmpForm.target = $(this.iframeId).readAttribute('name');\r\n            this.tmpForm.setAttribute('target', $(this.iframeId).readAttribute('name'));\r\n\r\n            for (var param in preparedData) {\r\n                this.tmpForm.appendChild(this.createHiddenElement(param, preparedData[param]));\r\n            }\r\n\r\n            this.paymentRequestSent = true;\r\n            this.tmpForm.submit();\r\n        },\r\n\r\n        createHiddenElement: function (name, value) {\r\n            var field;\r\n\r\n            if (isIE) {\r\n                field = document.createElement('input');\r\n                field.setAttribute('type', 'hidden');\r\n                field.setAttribute('name', name);\r\n                field.setAttribute('value', value);\r\n            } else {\r\n                field = document.createElement('input');\r\n                field.type = 'hidden';\r\n                field.name = name;\r\n                field.value = value;\r\n            }\r\n\r\n            return field;\r\n        },\r\n\r\n        recreateIframe: function () {\r\n            if ($(this.iframeId)) {\r\n                var nextElement = $(this.iframeId).next();\r\n                var src = $(this.iframeId).readAttribute('src');\r\n                var name = $(this.iframeId).readAttribute('name');\r\n\r\n                $(this.iframeId).stopObserving();\r\n                $(this.iframeId).remove();\r\n                var iframe = '<iframe id=\"' + this.iframeId +\r\n                    '\" allowtransparency=\"true\" frameborder=\"0\"  name=\"' + name +\r\n                    '\" style=\"display:none;width:100%;background-color:transparent\" src=\"' + src + '\" />';\r\n\r\n                Element.insert(nextElement, {\r\n                    'before': iframe\r\n                });\r\n                $(this.iframeId).observe('load', this.onLoadIframe);\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_AuthorizenetAcceptjs/js/authorizenet.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_AuthorizenetAcceptjs/js/view/payment/acceptjs-client'\r\n], function ($, Class, alert, AcceptjsClient) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            acceptjsClient: null,\r\n            $selector: null,\r\n            selector: 'edit_form',\r\n            container: 'payment_form_authorizenet_acceptjs',\r\n            active: false,\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @{inheritdoc}\r\n         */\r\n        initConfig: function (config) {\r\n            this._super();\r\n\r\n            this.acceptjsClient = AcceptjsClient({\r\n                environment: config.environment\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @{inheritdoc}\r\n         */\r\n        initObservable: function () {\r\n            this.$selector = $('#' + this.selector);\r\n            this._super()\r\n                .observe('active');\r\n\r\n            // re-init payment method events\r\n            this.$selector.off('changePaymentMethod.' + this.code)\r\n                .on('changePaymentMethod.' + this.code, this.changePaymentMethod.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Enable/disable current payment method\r\n         *\r\n         * @param {Object} event\r\n         * @param {String} method\r\n         * @returns {Object}\r\n         */\r\n        changePaymentMethod: function (event, method) {\r\n            this.active(method === this.code);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggered when payment changed\r\n         *\r\n         * @param {Boolean} isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            if (!isActive) {\r\n\r\n                return;\r\n            }\r\n\r\n            this.disableEventListeners();\r\n\r\n            window.order.addExcludedPaymentMethod(this.code);\r\n\r\n            this.enableEventListeners();\r\n        },\r\n\r\n        /**\r\n         * Sets the payment details on the form\r\n         *\r\n         * @param {Object} tokens\r\n         */\r\n        setPaymentDetails: function (tokens) {\r\n            var $ccNumber = $(this.getSelector('cc_number')),\r\n                ccLast4 = $ccNumber.val().replace(/[^\\d]/g, '').substr(-4);\r\n\r\n            $(this.getSelector('opaque_data_descriptor')).val(tokens.opaqueDataDescriptor);\r\n            $(this.getSelector('opaque_data_value')).val(tokens.opaqueDataValue);\r\n            $(this.getSelector('cc_last_4')).val(ccLast4);\r\n            $ccNumber.val('');\r\n            $(this.getSelector('cc_exp_month')).val('');\r\n            $(this.getSelector('cc_exp_year')).val('');\r\n\r\n            if (this.useCvv) {\r\n                $(this.getSelector('cc_cid')).val('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Trigger order submit\r\n         */\r\n        submitOrder: function () {\r\n            var authData = {},\r\n                cardData = {},\r\n                secureData = {};\r\n\r\n            this.$selector.validate().form();\r\n            this.$selector.trigger('afterValidate.beforeSubmit');\r\n\r\n            authData.clientKey = this.clientKey;\r\n            authData.apiLoginID = this.apiLoginID;\r\n\r\n            cardData.cardNumber = $(this.getSelector('cc_number')).val();\r\n            cardData.month = $(this.getSelector('cc_exp_month')).val();\r\n            cardData.year = $(this.getSelector('cc_exp_year')).val();\r\n\r\n            if (this.useCvv) {\r\n                cardData.cardCode = $(this.getSelector('cc_cid')).val();\r\n            }\r\n\r\n            secureData.authData = authData;\r\n            secureData.cardData = cardData;\r\n\r\n            this.disableEventListeners();\r\n\r\n            this.acceptjsClient.createTokens(secureData)\r\n                .always(function () {\r\n                    $('body').trigger('processStop');\r\n                    this.enableEventListeners();\r\n                }.bind(this))\r\n                .done(function (tokens) {\r\n                    this.setPaymentDetails(tokens);\r\n                    this.placeOrder();\r\n                }.bind(this))\r\n                .fail(function (messages) {\r\n                    this.tokens = null;\r\n\r\n                    if (messages.length > 0) {\r\n                        this._showError(messages[0]);\r\n                    }\r\n                }.bind(this));\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        placeOrder: function () {\r\n            this.$selector.trigger('realOrder');\r\n        },\r\n\r\n        /**\r\n         * Get jQuery selector\r\n         *\r\n         * @param {String} field\r\n         * @returns {String}\r\n         */\r\n        getSelector: function (field) {\r\n            return '#' + this.code + '_' + field;\r\n        },\r\n\r\n        /**\r\n         * Show alert message\r\n         *\r\n         * @param {String} message\r\n         */\r\n        _showError: function (message) {\r\n            alert({\r\n                content: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Enable form event listeners\r\n         */\r\n        enableEventListeners: function () {\r\n            this.$selector.on('submitOrder.authorizenetacceptjs', this.submitOrder.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Disable form event listeners\r\n         */\r\n        disableEventListeners: function () {\r\n            this.$selector.off('submitOrder');\r\n            this.$selector.off('submit');\r\n        }\r\n\r\n    });\r\n});\r\n","Magento_AuthorizenetAcceptjs/js/payment-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_AuthorizenetAcceptjs/js/authorizenet',\r\n    'jquery'\r\n], function (AuthorizenetAcceptjs, $) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n        var $form = $(element);\r\n\r\n        config.active = $form.length > 0 && !$form.is(':hidden');\r\n        new AuthorizenetAcceptjs(config);\r\n    };\r\n});\r\n","Magento_AuthorizenetAcceptjs/js/view/payment/acceptjs-client.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiClass',\r\n    'Magento_AuthorizenetAcceptjs/js/view/payment/acceptjs-factory',\r\n    'Magento_AuthorizenetAcceptjs/js/view/payment/validator-handler'\r\n], function ($, Class, acceptjsFactory, validatorHandler) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            environment: 'production'\r\n        },\r\n\r\n        /**\r\n         * @{inheritdoc}\r\n         */\r\n        initialize: function () {\r\n            validatorHandler.initialize();\r\n\r\n            this._super();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates the token pair with the provided data\r\n         *\r\n         * @param {Object} data\r\n         * @return {jQuery.Deferred}\r\n         */\r\n        createTokens: function (data) {\r\n            var deferred = $.Deferred();\r\n\r\n            if (this.acceptjsClient) {\r\n                this._createTokens(deferred, data);\r\n            } else {\r\n                acceptjsFactory(this.environment)\r\n                    .done(function (client) {\r\n                        this.acceptjsClient = client;\r\n                        this._createTokens(deferred, data);\r\n                    }.bind(this));\r\n            }\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        /**\r\n         * Creates a token from the payment information in the form\r\n         *\r\n         * @param {jQuery.Deferred} deferred\r\n         * @param {Object} data\r\n         */\r\n        _createTokens: function (deferred, data) {\r\n            this.acceptjsClient.dispatchData(data, function (response) {\r\n                validatorHandler.validate(response, function (valid, messages) {\r\n                    if (valid) {\r\n                        deferred.resolve({\r\n                            opaqueDataDescriptor: response.opaqueData.dataDescriptor,\r\n                            opaqueDataValue: response.opaqueData.dataValue\r\n                        });\r\n                    } else {\r\n                        deferred.reject(messages);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_AuthorizenetAcceptjs/js/view/payment/acceptjs-factory.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (environment) {\r\n        var deferred = $.Deferred(),\r\n            dependency = 'acceptjs';\r\n\r\n        if (environment === 'sandbox') {\r\n            dependency = 'acceptjssandbox';\r\n        }\r\n\r\n        require([dependency], function (accept) {\r\n                var $body = $('body');\r\n\r\n                /*\r\n                 * Acceptjs doesn't safely load dependent files which leads to a race condition when trying to use\r\n                 * the sdk right away.\r\n                 * @see https://community.developer.authorize.net/t5/Integration-and-Testing/\r\n                 * Dynamically-loading-Accept-js-E-WC-03-Accept-js-is-not-loaded/td-p/63283\r\n                 */\r\n                $body.on('handshake.acceptjs', function () {\r\n                    deferred.resolve(accept);\r\n                    $body.off('handshake.acceptjs');\r\n                });\r\n            },\r\n            deferred.reject\r\n        );\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AuthorizenetAcceptjs/js/view/payment/response-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/translate'\r\n], function ($, $t) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Validate Authorizenet-Acceptjs response\r\n         *\r\n         * @param {Object} context\r\n         * @returns {jQuery.Deferred}\r\n         */\r\n        validate: function (context) {\r\n            var state = $.Deferred(),\r\n                messages = [];\r\n\r\n            if (context.messages.resultCode === 'Ok') {\r\n                state.resolve();\r\n            } else {\r\n                if (context.messages.message.length > 0) {\r\n                    $.each(context.messages.message, function (index, element) {\r\n                        messages.push($t(element.text));\r\n                    });\r\n                }\r\n                state.reject(messages);\r\n            }\r\n\r\n            return state.promise();\r\n        }\r\n    };\r\n});\r\n\r\n","Magento_AuthorizenetAcceptjs/js/view/payment/validator-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_AuthorizenetAcceptjs/js/view/payment/response-validator'\r\n], function ($, responseValidator) {\r\n    'use strict';\r\n\r\n    return {\r\n        validators: [],\r\n\r\n        /**\r\n         * Init list of validators\r\n         */\r\n        initialize: function () {\r\n            this.add(responseValidator);\r\n        },\r\n\r\n        /**\r\n         * Add new validator\r\n         * @param {Object} validator\r\n         */\r\n        add: function (validator) {\r\n            this.validators.push(validator);\r\n        },\r\n\r\n        /**\r\n         * Run pull of validators\r\n         * @param {Object} context\r\n         * @param {Function} callback\r\n         */\r\n        validate: function (context, callback) {\r\n            var self = this,\r\n                deferred;\r\n\r\n            // no available validators\r\n            if (!self.validators.length) {\r\n                callback(true);\r\n\r\n                return;\r\n            }\r\n\r\n            // get list of deferred validators\r\n            deferred = $.map(self.validators, function (current) {\r\n                return current.validate(context);\r\n            });\r\n\r\n            $.when.apply($, deferred)\r\n                .done(function () {\r\n                    callback(true);\r\n                }).fail(function (error) {\r\n                    callback(false, error);\r\n                });\r\n        }\r\n    };\r\n});\r\n","Magento_Backend/js/delete-with-confirm.js":"/**\r\n *\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Backend/js/validate-store'\r\n], function ($, validateStore) {\r\n    'use strict';\r\n\r\n    $.widget('mage.deleteWithConfirm', validateStore, {});\r\n\r\n    return $.mage.deleteWithConfirm;\r\n});\r\n","Magento_Backend/js/media-uploader.js":"/**\r\n *\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n\r\n/*global byteConvert*/\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/form/element/file-uploader',\r\n    'mage/translate',\r\n    'jquery/file-uploader'\r\n], function ($, mageTemplate, alert, FileUploader) {\r\n    'use strict';\r\n\r\n    var fileUploader = new FileUploader({\r\n        dataScope: '',\r\n        isMultipleFiles: true\r\n    });\r\n\r\n    fileUploader.initUploader();\r\n\r\n    $.widget('mage.mediaUploader', {\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var self = this,\r\n                progressTmpl = mageTemplate('[data-template=\"uploader\"]'),\r\n                isResizeEnabled = this.options.isResizeEnabled,\r\n                resizeConfiguration = {\r\n                    action: 'resize',\r\n                    maxWidth: this.options.maxWidth,\r\n                    maxHeight: this.options.maxHeight\r\n                };\r\n\r\n            if (!isResizeEnabled) {\r\n                resizeConfiguration = {\r\n                    action: 'resize'\r\n                };\r\n            }\r\n\r\n            this.element.find('input[type=file]').fileupload({\r\n                dataType: 'json',\r\n                formData: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dropZone: '[data-tab-panel=image-management]',\r\n                sequentialUploads: true,\r\n                acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n                maxFileSize: this.options.maxFileSize,\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                add: function (e, data) {\r\n                    var fileSize,\r\n                        tmpl;\r\n\r\n                    $.each(data.files, function (index, file) {\r\n                        fileSize = typeof file.size == 'undefined' ?\r\n                            $.mage.__('We could not detect a size.') :\r\n                            byteConvert(file.size);\r\n\r\n                        data.fileId = Math.random().toString(33).substr(2, 18);\r\n\r\n                        tmpl = progressTmpl({\r\n                            data: {\r\n                                name: file.name,\r\n                                size: fileSize,\r\n                                id: data.fileId\r\n                            }\r\n                        });\r\n\r\n                        $(tmpl).appendTo(self.element);\r\n                    });\r\n\r\n                    $(this).fileupload('process', data).done(function () {\r\n                        data.submit();\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                done: function (e, data) {\r\n                    if (data.result && !data.result.error) {\r\n                        self.element.trigger('addItem', data.result);\r\n                    } else {\r\n                        fileUploader.aggregateError(data.files[0].name, data.result.error);\r\n                    }\r\n\r\n                    self.element.find('#' + data.fileId).remove();\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                progress: function (e, data) {\r\n                    var progress = parseInt(data.loaded / data.total * 100, 10),\r\n                        progressSelector = '#' + data.fileId + ' .progressbar-container .progressbar';\r\n\r\n                    self.element.find(progressSelector).css('width', progress + '%');\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                fail: function (e, data) {\r\n                    var progressSelector = '#' + data.fileId;\r\n\r\n                    self.element.find(progressSelector).removeClass('upload-progress').addClass('upload-failure')\r\n                        .delay(2000)\r\n                        .hide('highlight')\r\n                        .remove();\r\n                },\r\n\r\n                stop: fileUploader.uploaderConfig.stop\r\n            });\r\n\r\n            this.element.find('input[type=file]').fileupload('option', {\r\n                process: [{\r\n                    action: 'load',\r\n                    fileTypes: /^image\\/(gif|jpeg|png)$/\r\n                },\r\n                resizeConfiguration,\r\n                {\r\n                    action: 'save'\r\n                }]\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.mediaUploader;\r\n});\r\n","Magento_Backend/js/save-with-confirm.js":"/**\r\n *\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Backend/js/validate-store'\r\n], function ($, validateStore) {\r\n    'use strict';\r\n\r\n    $.widget('mage.saveWithConfirm', validateStore, {\r\n\r\n        /**\r\n         * Check is it need to show confirmation popup\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        _needConfirm: function () {\r\n\r\n            var storeData = this.settings.storeData,\r\n\r\n            /* edit store view*/\r\n                storeViewEdit = $('[name=\"store[store_id]\"]').length,\r\n                groupId = $('[name=\"store[group_id]\"]').val(),\r\n                isNewStoreView = !$('[name=\"store[store_id]\"]').val(),\r\n\r\n            /* edit store */\r\n                storeEdit = $('[name=\"group[group_id]\"]').length,\r\n                storeId = $('[name=\"group[group_id]\"]').val(),\r\n                rootCategoryId = $('[name=\"group[root_category_id]\"]').val(),\r\n                defaultStoreView = $('[name=\"group[default_store_id]\"]').val(),\r\n\r\n            /* edit website */\r\n                websiteEdit = $('[name=\"website[website_id]\"]').length,\r\n                defaultStore = $('[name=\"website[default_group_id]\"]').val(),\r\n\r\n            /* conditions */\r\n                storeViewUpdated = storeViewEdit && (isNewStoreView || storeData['group_id'] !== groupId),\r\n                storeUpdated = storeEdit && storeId &&\r\n                    (rootCategoryId !== null  && storeData['root_category_id'] !== rootCategoryId ||\r\n                    defaultStoreView !== null && storeData['default_store_id'] !== defaultStoreView),\r\n                websiteUpdated = websiteEdit && defaultStore !== null && storeData['default_group_id'] !== defaultStore;\r\n\r\n            return storeViewUpdated || storeUpdated || websiteUpdated;\r\n        }\r\n    });\r\n\r\n    return $.mage.saveWithConfirm;\r\n});\r\n","Magento_Backend/js/translate.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'mage/mage'\r\n], function ($) {\r\n    $.extend(true, $, {\r\n        mage: {\r\n            translate: (function () {\r\n                /**\r\n                 * Key-value translations storage\r\n                 * @type {Object}\r\n                 * @private\r\n                 */\r\n                var _data = {};\r\n\r\n                /**\r\n                 * Add new translation (two string parameters) or several translations (object)\r\n                 */\r\n                this.add = function () {\r\n                    if (arguments.length > 1) {\r\n                        _data[arguments[0]] = arguments[1];\r\n                    } else if (typeof arguments[0] === 'object') {\r\n                        $.extend(_data, arguments[0]);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Make a translation with parsing (to handle case when _data represents tuple)\r\n                 * @param {String} text\r\n                 * @return {String}\r\n                 */\r\n                this.translate = function (text) {\r\n                    return _data[text] ? _data[text] : text;\r\n                };\r\n\r\n                return this;\r\n            }())\r\n        }\r\n    });\r\n    $.mage.__ = $.proxy($.mage.translate.translate, $.mage.translate);\r\n\r\n    return $.mage.__;\r\n});\r\n","Magento_Backend/js/validate-store.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'mage/dataPost',\r\n    'mage/backend/validation',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function ($, jqueryUi, dataPost, validation, modalConfirm) {\r\n    'use strict';\r\n\r\n    $.widget('mage.storeValidation', {\r\n\r\n        /**\r\n         * Validation creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            var form = this.element[0],\r\n                validator = $.data(form, 'validator');\r\n\r\n            if (validator && validator.settings) {\r\n                validator.settings.submitHandler = this._saveHandler;\r\n                validator.settings.confirmCallback = this._needConfirm;\r\n                $.extend(validator.settings, this.options);\r\n                $.data(form, 'validator', validator);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check is it need to show confirmation popup\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        _needConfirm: function () {\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Save form with confirmation if needed\r\n         *\r\n         * @param {Object} form\r\n         * @private\r\n         */\r\n        _saveHandler: function (form) {\r\n            var formData = {},\r\n                requestData = {},\r\n                options = $.data(form, 'validator').settings;\r\n\r\n            if ($(form).validation('isValid')) {\r\n                $.each($(form).serializeArray(), function () {\r\n                    formData[this.name] = this.value || '';\r\n                });\r\n                requestData = {\r\n                    action: $(form).attr('action'),\r\n                    data: formData\r\n                };\r\n\r\n                if (options.confirmCallback.call(this)) {\r\n                    modalConfirm({\r\n                        title: $.mage.__('Warning message'),\r\n                        content: $.mage.__('This operation can take a long time'),\r\n                        actions: {\r\n                            /**\r\n                             * 'Confirm' action handler.\r\n                             */\r\n                            confirm: function () {\r\n                                $('body').trigger('processStart');\r\n                                dataPost().postData(requestData);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    dataPost().postData(requestData);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.storeValidation;\r\n});\r\n","Magento_Backend/js/bootstrap/editor.js":"/**\r\n *\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'Magento_Variable/variables',\r\n    'mage/adminhtml/browser'\r\n]);\r\n","Magento_Braintree/js/braintree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/lib/view/utils/dom-observer',\r\n    'mage/translate',\r\n    'Magento_Braintree/js/validator'\r\n], function ($, Class, alert, domObserver, $t, validator) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n\r\n        defaults: {\r\n            $selector: null,\r\n            selector: 'edit_form',\r\n            container: 'payment_form_braintree',\r\n            active: false,\r\n            scriptLoaded: false,\r\n            braintreeClient: null,\r\n            braintreeHostedFields: null,\r\n            hostedFieldsInstance: null,\r\n            selectedCardType: null,\r\n            selectorsMapper: {\r\n                'expirationMonth': 'expirationMonth',\r\n                'expirationYear': 'expirationYear',\r\n                'number': 'cc_number',\r\n                'cvv': 'cc_cid'\r\n            },\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            var self = this;\r\n\r\n            validator.setConfig(this);\r\n\r\n            self.$selector = $('#' + self.selector);\r\n            this._super()\r\n                .observe([\r\n                    'active',\r\n                    'scriptLoaded',\r\n                    'selectedCardType'\r\n                ]);\r\n\r\n            // re-init payment method events\r\n            self.$selector.off('changePaymentMethod.' + this.code)\r\n                .on('changePaymentMethod.' + this.code, this.changePaymentMethod.bind(this));\r\n\r\n            // listen block changes\r\n            domObserver.get('#' + self.container, function () {\r\n                if (self.scriptLoaded()) {\r\n                    self.$selector.off('submit');\r\n                    self.initBraintree();\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Enable/disable current payment method\r\n         * @param {Object} event\r\n         * @param {String} method\r\n         * @returns {exports.changePaymentMethod}\r\n         */\r\n        changePaymentMethod: function (event, method) {\r\n            this.active(method === this.code);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggered when payment changed\r\n         * @param {Boolean} isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            if (!isActive) {\r\n                this.$selector.off('submitOrder.braintree');\r\n\r\n                return;\r\n            }\r\n            this.disableEventListeners();\r\n            window.order.addExcludedPaymentMethod(this.code);\r\n\r\n            if (!this.clientToken) {\r\n                this.error($.mage.__('This payment is not available'));\r\n\r\n                return;\r\n            }\r\n\r\n            this.enableEventListeners();\r\n\r\n            if (!this.scriptLoaded()) {\r\n                this.loadScript();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Load external Braintree SDK\r\n         */\r\n        loadScript: function () {\r\n            var self = this,\r\n                state = self.scriptLoaded;\r\n\r\n            $('body').trigger('processStart');\r\n            require([this.sdkUrl, this.hostedFieldsSdkUrl], function (client, hostedFields) {\r\n                state(true);\r\n                self.braintreeClient = client;\r\n                self.braintreeHostedFields = hostedFields;\r\n                self.initBraintree();\r\n                $('body').trigger('processStop');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Retrieves client token and setup Braintree SDK\r\n         */\r\n        initBraintree: function () {\r\n            var self = this;\r\n\r\n            try {\r\n                $('body').trigger('processStart');\r\n\r\n                $.getJSON(self.clientTokenUrl).done(function (response) {\r\n                    self.clientToken = response.clientToken;\r\n                    self._initBraintree();\r\n                }).fail(function (response) {\r\n                    var failed = JSON.parse(response.responseText);\r\n\r\n                    $('body').trigger('processStop');\r\n                    self.error(failed.message);\r\n                });\r\n            } catch (e) {\r\n                $('body').trigger('processStop');\r\n                self.error(e.message);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Setup Braintree SDK\r\n         */\r\n        _initBraintree: function () {\r\n            var self = this;\r\n\r\n            self.disableEventListeners();\r\n\r\n            self.braintreeClient.create({\r\n                authorization: self.clientToken\r\n            })\r\n                .then(function (clientInstance) {\r\n                    return self.braintreeHostedFields.create({\r\n                        client: clientInstance,\r\n                        fields: self.getHostedFields()\r\n                    });\r\n                })\r\n                .then(function (hostedFieldsInstance) {\r\n                    self.hostedFieldsInstance = hostedFieldsInstance;\r\n                    self.enableEventListeners();\r\n                    self.fieldEventHandler(hostedFieldsInstance);\r\n                    $('body').trigger('processStop');\r\n                })\r\n                .catch(function () {\r\n                    self.error($t('Braintree can\\'t be initialized.'));\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Get hosted fields configuration\r\n         * @returns {Object}\r\n         */\r\n        getHostedFields: function () {\r\n            var self = this,\r\n                fields = {\r\n                    number: {\r\n                        selector: self.getSelector('cc_number')\r\n                    },\r\n                    expirationMonth: {\r\n                        selector: self.getSelector('cc_exp_month'),\r\n                        placeholder: $t('MM')\r\n                    },\r\n                    expirationYear: {\r\n                        selector: self.getSelector('cc_exp_year'),\r\n                        placeholder: $t('YY')\r\n                    }\r\n                };\r\n\r\n            if (self.useCvv) {\r\n                fields.cvv = {\r\n                    selector: self.getSelector('cc_cid')\r\n                };\r\n            }\r\n\r\n            return fields;\r\n        },\r\n\r\n        /**\r\n         * Function to handle hosted fields events\r\n         * @param {Object} hostedFieldsInstance\r\n         */\r\n        fieldEventHandler: function (hostedFieldsInstance) {\r\n            var self = this,\r\n                $cardType = $('#' + self.container).find('.icon-type');\r\n\r\n            hostedFieldsInstance.on('empty', function (event) {\r\n                if (event.emittedBy === 'number') {\r\n                    $cardType.attr('class', 'icon-type');\r\n                    self.selectedCardType(null);\r\n                }\r\n\r\n            });\r\n\r\n            hostedFieldsInstance.on('validityChange', function (event) {\r\n                var field = event.fields[event.emittedBy],\r\n                    fieldKey = event.emittedBy;\r\n\r\n                if (fieldKey === 'number') {\r\n                    $cardType.addClass('icon-type-' + event.cards[0].type);\r\n                }\r\n\r\n                if (fieldKey in self.selectorsMapper && field.isValid === false) {\r\n                    self.addInvalidClass(self.selectorsMapper[fieldKey]);\r\n                }\r\n            });\r\n\r\n            hostedFieldsInstance.on('blur', function (event) {\r\n                if (event.emittedBy === 'number') {\r\n                    self.validateCardType();\r\n                }\r\n            });\r\n\r\n            hostedFieldsInstance.on('cardTypeChange', function (event) {\r\n                if (event.cards.length !== 1) {\r\n                    return;\r\n                }\r\n\r\n                $cardType.addClass('icon-type-' + event.cards[0].type);\r\n                self.selectedCardType(\r\n                    validator.getMageCardType(event.cards[0].type, self.getCcAvailableTypes())\r\n                );\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Show alert message\r\n         * @param {String} message\r\n         */\r\n        error: function (message) {\r\n            alert({\r\n                content: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Enable form event listeners\r\n         */\r\n        enableEventListeners: function () {\r\n            this.$selector.on('submitOrder.braintree', this.submitOrder.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Disable form event listeners\r\n         */\r\n        disableEventListeners: function () {\r\n            this.$selector.off('submitOrder');\r\n            this.$selector.off('submit');\r\n        },\r\n\r\n        /**\r\n         * Store payment details\r\n         * @param {String} nonce\r\n         */\r\n        setPaymentDetails: function (nonce) {\r\n            var $container = $('#' + this.container);\r\n\r\n            $container.find('[name=\"payment[payment_method_nonce]\"]').val(nonce);\r\n        },\r\n\r\n        /**\r\n         * Trigger order submit\r\n         */\r\n        submitOrder: function () {\r\n            var self = this;\r\n\r\n            self.$selector.validate().form();\r\n            self.$selector.trigger('afterValidate.beforeSubmit');\r\n\r\n            // validate parent form\r\n            if (self.$selector.validate().errorList.length) {\r\n                $('body').trigger('processStop');\r\n\r\n                return false;\r\n            }\r\n\r\n            if (!self.validateCardType()) {\r\n                return false;\r\n            }\r\n\r\n            self.hostedFieldsInstance.tokenize(function (err, payload) {\r\n                if (err) {\r\n                    self.error($t('Some payment input fields are invalid.'));\r\n\r\n                    return false;\r\n                }\r\n\r\n                self.setPaymentDetails(payload.nonce);\r\n                $('#' + self.container).find('[type=\"submit\"]').trigger('click');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        placeOrder: function () {\r\n            $('#' + this.selector).trigger('realOrder');\r\n        },\r\n\r\n        /**\r\n         * Get list of currently available card types\r\n         * @returns {Array}\r\n         */\r\n        getCcAvailableTypes: function () {\r\n            var types = [],\r\n                $options = $(this.getSelector('cc_type')).find('option');\r\n\r\n            $.map($options, function (option) {\r\n                types.push($(option).val());\r\n            });\r\n\r\n            return types;\r\n        },\r\n\r\n        /**\r\n         * Validate current entered card type\r\n         * @returns {Boolean}\r\n         */\r\n        validateCardType: function () {\r\n            this.removeInvalidClass('cc_number');\r\n\r\n            if (!this.selectedCardType()) {\r\n                this.addInvalidClass('cc_number');\r\n\r\n                return false;\r\n            }\r\n            $(this.getSelector('cc_type')).val(this.selectedCardType());\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Get jQuery selector\r\n         * @param {String} field\r\n         * @returns {String}\r\n         */\r\n        getSelector: function (field) {\r\n            return '#' + this.code + '_' + field;\r\n        },\r\n\r\n        /**\r\n         * Add invalid class to field.\r\n         *\r\n         * @param {String} field\r\n         * @returns void\r\n         * @private\r\n         */\r\n        addInvalidClass: function (field) {\r\n            $(this.getSelector(field)).addClass('braintree-hosted-fields-invalid');\r\n        },\r\n\r\n        /**\r\n         * Remove invalid class from field.\r\n         *\r\n         * @param {String} field\r\n         * @returns void\r\n         * @private\r\n         */\r\n        removeInvalidClass: function (field) {\r\n            $(this.getSelector(field)).removeClass('braintree-hosted-fields-invalid');\r\n        }\r\n    });\r\n});\r\n","Magento_Braintree/js/validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    return {\r\n        config: {},\r\n\r\n        /**\r\n         * Set configuration\r\n         * @param {Object} config\r\n         */\r\n        setConfig: function (config) {\r\n            this.config = config;\r\n        },\r\n\r\n        /**\r\n         * Get List of available card types\r\n         * @returns {*|exports.defaults.availableCardTypes|{}}\r\n         */\r\n        getAvailableCardTypes: function () {\r\n            return this.config.availableCardTypes;\r\n        },\r\n\r\n        /**\r\n         * Get list of card types\r\n         * @returns {Object}\r\n         */\r\n        getCcTypesMapper: function () {\r\n            return this.config.ccTypesMapper;\r\n        },\r\n\r\n        /**\r\n         * Find mage card type by Braintree type\r\n         * @param {String} type\r\n         * @param {Object} availableTypes\r\n         * @returns {*}\r\n         */\r\n        getMageCardType: function (type, availableTypes) {\r\n            var storedCardType = null,\r\n                mapper = this.getCcTypesMapper();\r\n\r\n            if (type && typeof mapper[type] !== 'undefined') {\r\n                storedCardType = mapper[type];\r\n\r\n                if (_.indexOf(availableTypes, storedCardType) !== -1) {\r\n                    return storedCardType;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Filter list of available card types\r\n         * @param {Object} availableTypes\r\n         * @param {Object} countrySpecificCardTypes\r\n         * @returns {Object}\r\n         */\r\n        collectTypes: function (availableTypes, countrySpecificCardTypes) {\r\n            var key,\r\n                filteredTypes = [];\r\n\r\n            for (key in availableTypes) {\r\n                if (_.indexOf(countrySpecificCardTypes, availableTypes[key]) !== -1) {\r\n                    filteredTypes.push(availableTypes[key]);\r\n                }\r\n            }\r\n\r\n            return filteredTypes;\r\n        },\r\n\r\n        /**\r\n         * Get list of card types for country\r\n         * @param {String} countryId\r\n         * @returns {*}\r\n         */\r\n        getCountrySpecificCardTypes: function (countryId) {\r\n            if (typeof this.config.countrySpecificCardTypes[countryId] !== 'undefined') {\r\n                return this.config.countrySpecificCardTypes[countryId];\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n});\r\n","Magento_Braintree/js/vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'Magento_Ui/js/modal/alert'\r\n], function ($, Class, alert) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            $selector: null,\r\n            selector: 'edit_form',\r\n            $container: null\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            var self = this;\r\n\r\n            self.$selector = $('#' + self.selector);\r\n            self.$container =  $('#' + self.container);\r\n            self.$selector.on(\r\n                'setVaultNotActive.' + self.getCode(),\r\n                function () {\r\n                    self.$selector.off('submitOrder.' + self.getCode());\r\n                }\r\n            );\r\n            self._super();\r\n\r\n            self.initEventHandlers();\r\n\r\n            return self;\r\n        },\r\n\r\n        /**\r\n         * Get payment code\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         * Init event handlers\r\n         */\r\n        initEventHandlers: function () {\r\n            $(this.$container).find('[name=\"payment[token_switcher]\"]')\r\n                .on('click', this.selectPaymentMethod.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Select current payment token\r\n         */\r\n        selectPaymentMethod: function () {\r\n            this.disableEventListeners();\r\n            this.enableEventListeners();\r\n        },\r\n\r\n        /**\r\n         * Enable form event listeners\r\n         */\r\n        enableEventListeners: function () {\r\n            this.$selector.on('submitOrder.' + this.getCode(), this.submitOrder.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Disable form event listeners\r\n         */\r\n        disableEventListeners: function () {\r\n            this.$selector.off('submitOrder');\r\n        },\r\n\r\n        /**\r\n         * Pre submit for order\r\n         * @returns {Boolean}\r\n         */\r\n        submitOrder: function () {\r\n            this.$selector.validate().form();\r\n            this.$selector.trigger('afterValidate.beforeSubmit');\r\n            $('body').trigger('processStop');\r\n\r\n            // validate parent form\r\n            if (this.$selector.validate().errorList.length) {\r\n                return false;\r\n            }\r\n            this.getPaymentMethodNonce();\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        placeOrder: function () {\r\n            this.$selector.trigger('realOrder');\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            var self = this;\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash\r\n            }).done(function (response) {\r\n                self.setPaymentDetails(response.paymentMethodNonce);\r\n                self.placeOrder();\r\n            }).fail(function (response) {\r\n                var failed = JSON.parse(response.responseText);\r\n\r\n                self.error(failed.message);\r\n            }).always(function () {\r\n                $('body').trigger('processStop');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Store payment details\r\n         * @param {String} nonce\r\n         */\r\n        setPaymentDetails: function (nonce) {\r\n            this.createPublicHashSelector();\r\n\r\n            this.$selector.find('[name=\"payment[public_hash]\"]').val(this.publicHash);\r\n            this.$container.find('#' + this.getNonceSelectorName()).val(nonce);\r\n        },\r\n\r\n        /**\r\n         * Creates public hash selector\r\n         */\r\n        createPublicHashSelector: function () {\r\n            var $input;\r\n\r\n            if (this.$container.find('#' + this.getNonceSelectorName()).size() === 0) {\r\n                $input = $('<input>').attr(\r\n                    {\r\n                        type: 'hidden',\r\n                        id: this.getNonceSelectorName(),\r\n                        name: 'payment[payment_method_nonce]'\r\n                    }\r\n                );\r\n\r\n                $input.appendTo(this.$container);\r\n                $input.prop('disabled', false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show alert message\r\n         * @param {String} message\r\n         */\r\n        error: function (message) {\r\n            alert({\r\n                content: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get selector name for nonce input\r\n         * @returns {String}\r\n         */\r\n        getNonceSelectorName: function () {\r\n            return 'nonce_' + this.getCode();\r\n        }\r\n    });\r\n});\r\n","Magento_Braintree/js/grid/provider.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/grid/provider'\r\n], function (_, Provider) {\r\n    'use strict';\r\n\r\n    return Provider.extend({\r\n\r\n        /**\r\n         * Reload grid\r\n         * @returns {exports}\r\n         */\r\n        reload: function () {\r\n            if (this.hasFilters()) {\r\n                this._super();\r\n\r\n                return this;\r\n            }\r\n\r\n            this.trigger('reload');\r\n\r\n            this.onReload({\r\n                items: [],\r\n                totalRecords: 0\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Has filters checker\r\n         * @returns {Boolean}\r\n         */\r\n        hasFilters: function () {\r\n            var params = this.params,\r\n                filters = params.filters || {};\r\n\r\n            return _.keys(filters).length > 1;\r\n        }\r\n    });\r\n});\r\n"}
}});
