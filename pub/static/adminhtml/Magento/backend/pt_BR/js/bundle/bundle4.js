require.config({"config": {
        "jsbuild":{"Magento_Bundle/js/bundle-product.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*global FORM_KEY*/\r\n/*global bSelection*/\r\n/*global $H*/\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/js/product/weight-handler',\r\n    'Magento_Ui/js/modal/modal',\r\n    'jquery/ui',\r\n    'mage/translate',\r\n    'Magento_Theme/js/sortable',\r\n    'prototype'\r\n], function ($, weightHandler) {\r\n    'use strict';\r\n\r\n    $.widget('mage.bundleProduct', {\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._initOptionBoxes()\r\n                ._initSortableSelections()\r\n                ._bindCheckboxHandlers()\r\n                ._initCheckboxState()\r\n                ._bindAddSelectionDialog()\r\n                ._hideProductTypeSwitcher();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _initOptionBoxes: function () {\r\n            var syncOptionTitle;\r\n\r\n            this.element.sortable({\r\n                axis: 'y',\r\n                handle: '[data-role=draggable-handle]',\r\n                items: '.option-box',\r\n                update: this._updateOptionBoxPositions,\r\n                tolerance: 'pointer'\r\n            });\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            syncOptionTitle = function (event) {\r\n                var originalValue = $(event.target).attr('data-original-value'),\r\n                    currentValue = $(event.target).val(),\r\n                    optionBoxTitle = $('.title > span', $(event.target).closest('.option-box')),\r\n                    newOptionTitle = $.mage.__('New Option');\r\n\r\n                optionBoxTitle.text(currentValue === '' && !originalValue.length ? newOptionTitle : currentValue);\r\n            };\r\n            this._on({\r\n                'change .field-option-title input[name$=\"[title]\"]': syncOptionTitle,\r\n                'keyup .field-option-title input[name$=\"[title]\"]': syncOptionTitle,\r\n                'paste .field-option-title input[name$=\"[title]\"]': syncOptionTitle\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _initSortableSelections: function () {\r\n            this.element.find('.option-box .form-list tbody').sortable({\r\n                axis: 'y',\r\n                handle: '[data-role=draggable-handle]',\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 * @param {jQuery} ui\r\n                 * @return {jQuery}\r\n                 */\r\n                helper: function (event, ui) {\r\n                    ui.children().each(function () {\r\n                        $(this).width($(this).width());\r\n                    });\r\n\r\n                    return ui;\r\n                },\r\n                update: this._updateSelectionsPositions,\r\n                tolerance: 'pointer'\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _initCheckboxState: function () {\r\n            this.element.find('.is-required').each(function () {\r\n                $(this).prop('checked', $(this).closest('.option-box').find('[name$=\"[required]\"]').val() > 0);\r\n            });\r\n\r\n            this.element.find('.is-user-defined-qty').each(function () {\r\n                $(this).prop('checked', $(this).closest('.qty-box').find('.select').val() > 0);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _bindAddSelectionDialog: function () {\r\n            var widget = this;\r\n\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'click .add-selection': function (event) {\r\n                    var $optionBox = $(event.target).closest('.option-box'),\r\n                        $selectionGrid = $optionBox.find('.selection-search').clone(),\r\n                        optionIndex = $optionBox.attr('id').replace('bundle_option_', ''),\r\n                        productIds = [],\r\n                        productSkus = [],\r\n                        selectedProductList = {};\r\n\r\n                    $optionBox.find('[name$=\"[product_id]\"]').each(function () {\r\n                        if (!$(this).closest('tr').find('[name$=\"[delete]\"]').val()) {\r\n                            productIds.push($(this).val());\r\n                            productSkus.push($(this).closest('tr').find('.col-sku').text());\r\n                        }\r\n                    });\r\n\r\n                    bSelection.gridSelection.set(optionIndex, $H({}));\r\n                    bSelection.gridRemoval = $H({});\r\n                    bSelection.gridSelectedProductSkus = productSkus;\r\n\r\n                    $selectionGrid.on('contentUpdated', bSelection.gridUpdateCallback);\r\n                    $selectionGrid.on('change', '.col-id input', function () {\r\n                        var tr = $(this).closest('tr');\r\n\r\n                        if ($(this).is(':checked')) {\r\n                            selectedProductList[$(this).val()] = {\r\n                                name: $.trim(tr.find('.col-name').html()),\r\n                                sku: $.trim(tr.find('.col-sku').html()),\r\n                                'product_id': $(this).val(),\r\n                                'option_id': $('bundle_selection_id_' + optionIndex).val(),\r\n                                'selection_price_value': 0,\r\n                                'selection_qty': 1\r\n                            };\r\n                        } else {\r\n                            delete selectedProductList[$(this).val()];\r\n                        }\r\n                    });\r\n\r\n                    $selectionGrid.modal({\r\n                        title: $optionBox.find('input[name$=\"[title]\"]').val() === '' ?\r\n                            $.mage.__('Add Products to New Option') :\r\n                            $.mage.__('Add Products to Option \"%1\"').replace(\r\n                                '%1',\r\n                                $('<div>').text($optionBox.find('input[name$=\"[title]\"]').val()).html()\r\n                            ),\r\n                        modalClass: 'bundle',\r\n                        type: 'slide',\r\n\r\n                        /**\r\n                         * @param {jQuery.Event} e\r\n                         * @param {Object} modalWindow\r\n                         */\r\n                        closed: function (e, modalWindow) {\r\n                            modalWindow.modal.remove();\r\n                        },\r\n                        buttons: [{\r\n                            text: $.mage.__('Add Selected Products'),\r\n                            'class': 'action-primary action-add',\r\n\r\n                            /** Click action. */\r\n                            click: function () {\r\n                                $.each(selectedProductList, function () {\r\n                                    window.bSelection.addRow(optionIndex, this);\r\n                                });\r\n                                bSelection.gridRemoval.each(function (pair) {\r\n                                    $optionBox.find('.col-sku').filter(function () {\r\n                                        return $.trim($(this).text()) === pair.key; // find row by SKU\r\n                                    }).closest('tr').find('button.delete').trigger('click');\r\n                                });\r\n                                widget.refreshSortableElements();\r\n                                widget._updateSelectionsPositions.apply(widget.element);\r\n                                $selectionGrid.modal('closeModal');\r\n                            }\r\n                        }]\r\n                    });\r\n                    $.ajax({\r\n                        url: bSelection.selectionSearchUrl,\r\n                        dataType: 'html',\r\n                        data: {\r\n                            index: optionIndex,\r\n                            products: productIds,\r\n                            'selected_products': productIds,\r\n                            'form_key': FORM_KEY\r\n                        },\r\n\r\n                        /**\r\n                         * @param {*} data\r\n                         */\r\n                        success: function (data) {\r\n                            $selectionGrid.html(data).modal('openModal');\r\n                        },\r\n                        context: $('body'),\r\n                        showLoader: true\r\n                    });\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _hideProductTypeSwitcher: function () {\r\n            weightHandler.hideWeightSwitcher();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _bindCheckboxHandlers: function () {\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'change .is-required': function (event) {\r\n                    var $this = $(event.target);\r\n\r\n                    $this.closest('.option-box').find('[name$=\"[required]\"]').val($this.is(':checked') ? 1 : 0);\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'change .is-user-defined-qty': function (event) {\r\n                    var $this = $(event.target);\r\n\r\n                    $this.closest('.qty-box').find('.select').val($this.is(':checked') ? 1 : 0);\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _updateOptionBoxPositions: function () {\r\n            $(this).find('[name^=bundle_options][name$=\"[position]\"]').each(function (index) {\r\n                $(this).val(index);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _updateSelectionsPositions: function () {\r\n            $(this).find('[name^=bundle_selections][name$=\"[position]\"]').each(function (index) {\r\n                $(this).val(index);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @return {Object}\r\n         */\r\n        refreshSortableElements: function () {\r\n            this.element.sortable('refresh');\r\n            this._updateOptionBoxPositions.apply(this.element);\r\n            this._initSortableSelections();\r\n            this._initCheckboxState();\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n});\r\n","Magento_Bundle/js/bundle-type-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/catalog/type-events',\r\n    'Magento_Catalog/js/product/weight-handler'\r\n], function ($, productType, weight) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Constructor component\r\n         */\r\n        'Magento_Bundle/js/bundle-type-handler': function () {\r\n            this.bindAll();\r\n            this._initType();\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            $(document).on('changeTypeProduct', this._initType.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Init type\r\n         * @private\r\n         */\r\n        _initType: function () {\r\n            if (\r\n                productType.type.init === 'bundle' &&\r\n                productType.type.current !== 'bundle' &&\r\n                !weight.isLocked()\r\n            ) {\r\n                weight.switchWeight();\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_Bundle/js/price-bundle.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'priceUtils',\r\n    'priceBox'\r\n], function ($, _, mageTemplate, utils) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n        optionConfig: null,\r\n        productBundleSelector: 'input.bundle.option, select.bundle.option, textarea.bundle.option',\r\n        qtyFieldSelector: 'input.qty',\r\n        priceBoxSelector: '.price-box',\r\n        optionHandlers: {},\r\n        optionTemplate: '<%- data.label %>' +\r\n        '<% if (data.finalPrice.value) { %>' +\r\n        ' +<%- data.finalPrice.formatted %>' +\r\n        '<% } %>',\r\n        controlContainer: 'dd', // should be eliminated\r\n        priceFormat: {},\r\n        isFixedPrice: false,\r\n        optionTierPricesBlocksSelector: '#option-tier-prices-{1} [data-role=\"selection-tier-prices\"]'\r\n    };\r\n\r\n    $.widget('mage.priceBundle', {\r\n        options: globalOptions,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function initPriceBundle() {\r\n            var form = this.element,\r\n                options = $(this.options.productBundleSelector, form);\r\n\r\n            options.trigger('change');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function createPriceBundle() {\r\n            var form = this.element,\r\n                options = $(this.options.productBundleSelector, form),\r\n                priceBox = $(this.options.priceBoxSelector, form),\r\n                qty = $(this.options.qtyFieldSelector, form);\r\n\r\n            if (priceBox.data('magePriceBox') &&\r\n                priceBox.priceBox('option') &&\r\n                priceBox.priceBox('option').priceConfig\r\n            ) {\r\n                if (priceBox.priceBox('option').priceConfig.optionTemplate) {\r\n                    this._setOption('optionTemplate', priceBox.priceBox('option').priceConfig.optionTemplate);\r\n                }\r\n                this._setOption('priceFormat', priceBox.priceBox('option').priceConfig.priceFormat);\r\n                priceBox.priceBox('setDefault', this.options.optionConfig.prices);\r\n            }\r\n            this._applyOptionNodeFix(options);\r\n\r\n            options.on('change', this._onBundleOptionChanged.bind(this));\r\n            qty.on('change', this._onQtyFieldChanged.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Handle change on bundle option inputs\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _onBundleOptionChanged: function onBundleOptionChanged(event) {\r\n            var changes,\r\n                bundleOption = $(event.target),\r\n                priceBox = $(this.options.priceBoxSelector, this.element),\r\n                handler = this.options.optionHandlers[bundleOption.data('role')];\r\n\r\n            bundleOption.data('optionContainer', bundleOption.closest(this.options.controlContainer));\r\n            bundleOption.data('qtyField', bundleOption.data('optionContainer').find(this.options.qtyFieldSelector));\r\n\r\n            if (handler && handler instanceof Function) {\r\n                changes = handler(bundleOption, this.options.optionConfig, this);\r\n            } else {\r\n                changes = defaultGetOptionValue(bundleOption, this.options.optionConfig);//eslint-disable-line\r\n            }\r\n\r\n            if (changes) {\r\n                priceBox.trigger('updatePrice', changes);\r\n            }\r\n\r\n            this._displayTierPriceBlock(bundleOption);\r\n            this.updateProductSummary();\r\n        },\r\n\r\n        /**\r\n         * Handle change on qty inputs near bundle option\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _onQtyFieldChanged: function onQtyFieldChanged(event) {\r\n            var field = $(event.target),\r\n                optionInstance,\r\n                optionConfig;\r\n\r\n            if (field.data('optionId') && field.data('optionValueId')) {\r\n                optionInstance = field.data('option');\r\n                optionConfig = this.options.optionConfig\r\n                    .options[field.data('optionId')]\r\n                    .selections[field.data('optionValueId')];\r\n                optionConfig.qty = field.val();\r\n\r\n                optionInstance.trigger('change');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Helper to fix backend behavior:\r\n         *  - if default qty large than 1 then backend multiply price in config\r\n         *\r\n         * @deprecated\r\n         * @private\r\n         */\r\n        _applyQtyFix: function applyQtyFix() {\r\n            var config = this.options.optionConfig;\r\n\r\n            if (config.isFixedPrice) {\r\n                _.each(config.options, function (option) {\r\n                    _.each(option.selections, function (item) {\r\n                        if (item.qty && item.qty !== 1) {\r\n                            _.each(item.prices, function (price) {\r\n                                price.amount /= item.qty;\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Helper to fix issue with option nodes:\r\n         *  - you can't place any html in option ->\r\n         *    so you can't style it via CSS\r\n         * @param {jQuery} options\r\n         * @private\r\n         */\r\n        _applyOptionNodeFix: function applyOptionNodeFix(options) {\r\n            var config = this.options,\r\n                format = config.priceFormat,\r\n                template = config.optionTemplate;\r\n\r\n            template = mageTemplate(template);\r\n            options.filter('select').each(function (index, element) {\r\n                var $element = $(element),\r\n                    optionId = utils.findOptionId($element),\r\n                    optionConfig = config.optionConfig && config.optionConfig.options[optionId].selections,\r\n                    value;\r\n\r\n                $element.find('option').each(function (idx, option) {\r\n                    var $option,\r\n                        optionValue,\r\n                        toTemplate,\r\n                        prices;\r\n\r\n                    $option = $(option);\r\n                    optionValue = $option.val();\r\n\r\n                    if (!optionValue && optionValue !== 0) {\r\n                        return;\r\n                    }\r\n\r\n                    toTemplate = {\r\n                        data: {\r\n                            label: optionConfig[optionValue] && optionConfig[optionValue].name\r\n                        }\r\n                    };\r\n                    prices = optionConfig[optionValue].prices;\r\n\r\n                    _.each(prices, function (price, type) {\r\n                        value = +price.amount;\r\n                        value += _.reduce(price.adjustments, function (sum, x) {//eslint-disable-line\r\n                            return sum + x;\r\n                        }, 0);\r\n                        toTemplate.data[type] = {\r\n                            value: value,\r\n                            formatted: utils.formatPrice(value, format)\r\n                        };\r\n                    });\r\n\r\n                    $option.html(template(toTemplate));\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Custom behavior on getting options:\r\n         * now widget able to deep merge accepted configuration with instance options.\r\n         * @param  {Object}  options\r\n         * @return {$.Widget}\r\n         */\r\n        _setOptions: function setOptions(options) {\r\n            $.extend(true, this.options, options);\r\n\r\n            this._super(options);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Show or hide option tier prices block\r\n         *\r\n         * @param {Object} optionElement\r\n         * @private\r\n         */\r\n        _displayTierPriceBlock: function (optionElement) {\r\n            var optionType = optionElement.prop('type'),\r\n                optionId,\r\n                optionValue,\r\n                optionTierPricesElements;\r\n\r\n            if (optionType === 'select-one') {\r\n                optionId = utils.findOptionId(optionElement[0]);\r\n                optionValue = optionElement.val() || null;\r\n                optionTierPricesElements = $(this.options.optionTierPricesBlocksSelector.replace('{1}', optionId));\r\n\r\n                _.each(optionTierPricesElements, function (tierPriceElement) {\r\n                    var selectionId = $(tierPriceElement).data('selection-id') + '';\r\n\r\n                    if (selectionId === optionValue) {\r\n                        $(tierPriceElement).show();\r\n                    } else {\r\n                        $(tierPriceElement).hide();\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler to update productSummary box\r\n         */\r\n        updateProductSummary: function updateProductSummary() {\r\n            this.element.trigger('updateProductSummary', {\r\n                config: this.options.optionConfig\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.priceBundle;\r\n\r\n    /**\r\n     * Converts option value to priceBox object\r\n     *\r\n     * @param   {jQuery} element\r\n     * @param   {Object} config\r\n     * @returns {Object|null} - priceBox object with additional prices\r\n     */\r\n    function defaultGetOptionValue(element, config) {\r\n        var changes = {},\r\n            optionHash,\r\n            tempChanges,\r\n            qtyField,\r\n            optionId = utils.findOptionId(element[0]),\r\n            optionValue = element.val() || null,\r\n            optionName = element.prop('name'),\r\n            optionType = element.prop('type'),\r\n            optionConfig = config.options[optionId].selections,\r\n            optionQty = 0,\r\n            canQtyCustomize = false,\r\n            selectedIds = config.selected;\r\n\r\n        switch (optionType) {\r\n            case 'radio':\r\n            case 'select-one':\r\n\r\n                if (optionType === 'radio' && !element.is(':checked')) {\r\n                    return null;\r\n                }\r\n\r\n                qtyField = element.data('qtyField');\r\n                qtyField.data('option', element);\r\n\r\n                if (optionValue) {\r\n                    optionQty = optionConfig[optionValue].qty || 0;\r\n                    canQtyCustomize = optionConfig[optionValue].customQty === '1';\r\n                    toggleQtyField(qtyField, optionQty, optionId, optionValue, canQtyCustomize);//eslint-disable-line\r\n                    tempChanges = utils.deepClone(optionConfig[optionValue].prices);\r\n                    tempChanges = applyTierPrice(//eslint-disable-line\r\n                        tempChanges,\r\n                        optionQty,\r\n                        optionConfig[optionValue]\r\n                    );\r\n                    tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n                } else {\r\n                    tempChanges = {};\r\n                    toggleQtyField(qtyField, '0', optionId, optionValue, false);//eslint-disable-line\r\n                }\r\n                optionHash = 'bundle-option-' + optionName;\r\n                changes[optionHash] = tempChanges;\r\n                selectedIds[optionId] = [optionValue];\r\n                break;\r\n\r\n            case 'select-multiple':\r\n                optionValue = _.compact(optionValue);\r\n\r\n                _.each(optionConfig, function (row, optionValueCode) {\r\n                    optionHash = 'bundle-option-' + optionName + '##' + optionValueCode;\r\n                    optionQty = row.qty || 0;\r\n                    tempChanges = utils.deepClone(row.prices);\r\n                    tempChanges = applyTierPrice(tempChanges, optionQty, optionConfig);//eslint-disable-line\r\n                    tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n                    changes[optionHash] = _.contains(optionValue, optionValueCode) ? tempChanges : {};\r\n                });\r\n\r\n                selectedIds[optionId] = optionValue || [];\r\n                break;\r\n\r\n            case 'checkbox':\r\n                optionHash = 'bundle-option-' + optionName + '##' + optionValue;\r\n                optionQty = optionConfig[optionValue].qty || 0;\r\n                tempChanges = utils.deepClone(optionConfig[optionValue].prices);\r\n                tempChanges = applyTierPrice(tempChanges, optionQty, optionConfig);//eslint-disable-line\r\n                tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n                changes[optionHash] = element.is(':checked') ? tempChanges : {};\r\n\r\n                selectedIds[optionId] = selectedIds[optionId] || [];\r\n\r\n                if (!_.contains(selectedIds[optionId], optionValue) && element.is(':checked')) {\r\n                    selectedIds[optionId].push(optionValue);\r\n                } else if (!element.is(':checked')) {\r\n                    selectedIds[optionId] = _.without(selectedIds[optionId], optionValue);\r\n                }\r\n                break;\r\n\r\n            case 'hidden':\r\n                optionHash = 'bundle-option-' + optionName + '##' + optionValue;\r\n                optionQty = optionConfig[optionValue].qty || 0;\r\n                canQtyCustomize = optionConfig[optionValue].customQty === '1';\r\n                qtyField = element.data('qtyField');\r\n                qtyField.data('option', element);\r\n                toggleQtyField(qtyField, optionQty, optionId, optionValue, canQtyCustomize);//eslint-disable-line\r\n                tempChanges = utils.deepClone(optionConfig[optionValue].prices);\r\n                tempChanges = applyTierPrice(tempChanges, optionQty, optionConfig);//eslint-disable-line\r\n                tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n\r\n                optionHash = 'bundle-option-' + optionName;\r\n                changes[optionHash] = tempChanges;\r\n                selectedIds[optionId] = [optionValue];\r\n                break;\r\n        }\r\n\r\n        return changes;\r\n    }\r\n\r\n    /**\r\n     * Helper to toggle qty field\r\n     * @param {jQuery} element\r\n     * @param {String|Number} value\r\n     * @param {String|Number} optionId\r\n     * @param {String|Number} optionValueId\r\n     * @param {Boolean} canEdit\r\n     */\r\n    function toggleQtyField(element, value, optionId, optionValueId, canEdit) {\r\n        element\r\n            .val(value)\r\n            .data('optionId', optionId)\r\n            .data('optionValueId', optionValueId)\r\n            .attr('disabled', !canEdit);\r\n\r\n        if (canEdit) {\r\n            element.removeClass('qty-disabled');\r\n        } else {\r\n            element.addClass('qty-disabled');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper to multiply on qty\r\n     *\r\n     * @param   {Object} prices\r\n     * @param   {Number} qty\r\n     * @returns {Object}\r\n     */\r\n    function applyQty(prices, qty) {\r\n        _.each(prices, function (everyPrice) {\r\n            everyPrice.amount *= qty;\r\n            _.each(everyPrice.adjustments, function (el, index) {\r\n                everyPrice.adjustments[index] *= qty;\r\n            });\r\n        });\r\n\r\n        return prices;\r\n    }\r\n\r\n    /**\r\n     * Helper to limit price with tier price\r\n     *\r\n     * @param {Object} oneItemPrice\r\n     * @param {Number} qty\r\n     * @param {Object} optionConfig\r\n     * @returns {Object}\r\n     */\r\n    function applyTierPrice(oneItemPrice, qty, optionConfig) {\r\n        var tiers = optionConfig.tierPrice,\r\n            magicKey = _.keys(oneItemPrice)[0],\r\n            tiersFirstKey = _.keys(optionConfig)[0],\r\n            lowest = false;\r\n\r\n        if (!tiers) {//tiers is undefined when options has only one option\r\n            tiers = optionConfig[tiersFirstKey].tierPrice;\r\n        }\r\n\r\n        tiers.sort(function (a, b) {//sorting based on \"price_qty\"\r\n            return a['price_qty'] - b['price_qty'];\r\n        });\r\n\r\n        _.each(tiers, function (tier, index) {\r\n            if (tier['price_qty'] > qty) {\r\n                return;\r\n            }\r\n\r\n            if (tier.prices[magicKey].amount < oneItemPrice[magicKey].amount) {\r\n                lowest = index;\r\n            }\r\n        });\r\n\r\n        if (lowest !== false) {\r\n            oneItemPrice = utils.deepClone(tiers[lowest].prices);\r\n        }\r\n\r\n        return oneItemPrice;\r\n    }\r\n});\r\n","Magento_Bundle/js/components/bundle-checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox',\r\n    'uiRegistry'\r\n], function (Checkbox, registry) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            clearing: false,\r\n            parentContainer: '',\r\n            parentSelections: '',\r\n            changer: '',\r\n            exports: {\r\n                value: '${$.parentName}:isDefaultValue'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            this._super().\r\n                observe('elementTmpl');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n            this.imports.changeType = this.retrieveParentName(this.parentContainer) + '.' + this.changer + ':value';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onUpdate: function () {\r\n            if (this.prefer === 'radio' && this.checked() && !this.clearing) {\r\n                this.clearValues();\r\n            }\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Checkbox to radio type changer.\r\n         *\r\n         * @param {String} type - type to change.\r\n         */\r\n        changeType: function (type) {\r\n            var typeMap = registry.get(this.retrieveParentName(this.parentContainer) + '.' + this.changer).typeMap;\r\n\r\n            this.prefer = typeMap[type];\r\n            this.elementTmpl(this.templates[typeMap[type]]);\r\n        },\r\n\r\n        /**\r\n         * Clears values in components like this.\r\n         */\r\n        clearValues: function () {\r\n            var records = registry.get(this.retrieveParentName(this.parentSelections)),\r\n                index = this.index,\r\n                uid = this.uid;\r\n\r\n            records.elems.each(function (record) {\r\n                record.elems.filter(function (comp) {\r\n                    return comp.index === index && comp.uid !== uid;\r\n                }).each(function (comp) {\r\n                    comp.clearing = true;\r\n                    comp.clear();\r\n                    comp.clearing = false;\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Retrieve name for the most global parent with provided index.\r\n         *\r\n         * @param {String} parent - parent name.\r\n         * @returns {String}\r\n         */\r\n        retrieveParentName: function (parent) {\r\n            return this.name.replace(new RegExp('^(.+?\\\\.)?' + parent + '\\\\..+'), '$1' + parent);\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-dynamic-rows-grid.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows-grid'\r\n], function (_, dynamicRowsGrid) {\r\n    'use strict';\r\n\r\n    return dynamicRowsGrid.extend({\r\n        defaults: {\r\n            label: '',\r\n            columnsHeader: false,\r\n            columnsHeaderAfterRender: true,\r\n            addButton: false,\r\n            isDefaultFieldScope: 'is_default',\r\n            defaultRecords: {\r\n                use: [],\r\n                moreThanOne: false,\r\n                state: {}\r\n            },\r\n            listens: {\r\n                inputType: 'onInputTypeChange',\r\n                isDefaultValue: 'onIsDefaultValue'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler for type select.\r\n         *\r\n         * @param {String} inputType - changed.\r\n         */\r\n        onInputTypeChange: function (inputType) {\r\n            if (this.defaultRecords.moreThanOne && (inputType === 'radio' || inputType === 'select')) {\r\n                _.each(this.defaultRecords.use, function (index, counter) {\r\n                    this.source.set(\r\n                        this.dataScope + '.bundle_selections.' + index + '.' + this.isDefaultFieldScope,\r\n                        counter ? '0' : '1'\r\n                    );\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler for is_default field.\r\n         *\r\n         * @param {Object} data - changed data.\r\n         */\r\n        onIsDefaultValue: function (data) {\r\n            var cb,\r\n                use = 0;\r\n\r\n            this.defaultRecords.use = [];\r\n\r\n            cb = function (elem, key) {\r\n\r\n                if (~~elem) {\r\n                    this.defaultRecords.use.push(key);\r\n                    use++;\r\n                }\r\n\r\n                this.defaultRecords.moreThanOne = use > 1;\r\n            }.bind(this);\r\n\r\n            _.each(data, cb);\r\n        },\r\n\r\n        /**\r\n         * Initialize elements from grid\r\n         *\r\n         * @param {Array} data\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initElements: function (data) {\r\n            var newData = this.getNewData(data),\r\n                recordIndex;\r\n\r\n            this.parsePagesData(data);\r\n\r\n            if (newData.length) {\r\n                if (this.insertData().length) {\r\n                    recordIndex = data.length - newData.length - 1;\r\n\r\n                    _.each(newData, function (newRecord) {\r\n                        this.processingAddChild(newRecord, ++recordIndex, newRecord[this.identificationProperty]);\r\n                    }, this);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Mapping value from grid\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        mappingValue: function (data) {\r\n            if (_.isEmpty(data)) {\r\n                return;\r\n            }\r\n\r\n            this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-dynamic-rows.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows'\r\n], function (_, utils, registry, dynamicRows) {\r\n    'use strict';\r\n\r\n    return dynamicRows.extend({\r\n        defaults: {\r\n            label: '',\r\n            collapsibleHeader: true,\r\n            columnsHeader: false,\r\n            deleteProperty: false,\r\n            addButton: false\r\n        },\r\n\r\n        /**\r\n         * Set new data to dataSource,\r\n         * delete element\r\n         *\r\n         * @param {Array} data - record data\r\n         */\r\n        _updateData: function (data) {\r\n            var elems = _.clone(this.elems()),\r\n                path,\r\n                dataArr,\r\n                optionBaseData;\r\n\r\n            dataArr = this.recordData.splice(this.startIndex, this.recordData().length - this.startIndex);\r\n            dataArr.splice(0, this.pageSize);\r\n            elems = _.sortBy(this.elems(), function (elem) {\r\n                return ~~elem.index;\r\n            });\r\n\r\n            data.concat(dataArr).forEach(function (rec, idx) {\r\n                if (elems[idx]) {\r\n                    elems[idx].recordId = rec[this.identificationProperty];\r\n                }\r\n\r\n                if (!rec.position) {\r\n                    rec.position = this.maxPosition;\r\n                    this.setMaxPosition();\r\n                }\r\n\r\n                path = this.dataScope + '.' + this.index + '.' + (this.startIndex + idx);\r\n                optionBaseData = _.pick(rec, function (value) {\r\n                    return !_.isObject(value);\r\n                });\r\n                this.source.set(path, optionBaseData);\r\n                this.source.set(path + '.bundle_button_proxy', []);\r\n                this.source.set(path + '.bundle_selections', []);\r\n                this.removeBundleItemsFromOption(idx);\r\n                _.each(rec['bundle_selections'], function (obj, index) {\r\n                    this.source.set(path + '.bundle_button_proxy' + '.' + index, rec['bundle_button_proxy'][index]);\r\n                    this.source.set(path + '.bundle_selections' + '.' + index, obj);\r\n                }, this);\r\n            }, this);\r\n\r\n            this.elems(elems);\r\n        },\r\n\r\n        /**\r\n         *  Removes nested dynamic-rows-grid rendered records from option\r\n         *\r\n         * @param {Number|String} index - element index\r\n         */\r\n        removeBundleItemsFromOption: function (index) {\r\n            var bundleSelections = registry.get(this.name + '.' + index + '.' + this.bundleSelectionsName),\r\n                bundleSelectionsLength = (bundleSelections.elems() || []).length,\r\n                i;\r\n\r\n            if (bundleSelectionsLength) {\r\n                for (i = 0; i < bundleSelectionsLength; i++) {\r\n                    bundleSelections.elems()[0].destroy();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n        * {@inheritdoc}\r\n        */\r\n        processingAddChild: function (ctx, index, prop) {\r\n            var recordIds = _.map(this.recordData(), function (rec) {\r\n                return parseInt(rec['record_id'], 10);\r\n            }),\r\n            maxRecordId = _.max(recordIds);\r\n\r\n            prop = maxRecordId > -1 ? maxRecordId + 1 : prop;\r\n            this._super(ctx, index, prop);\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-input-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated Not used anymore\r\n * @see Magento_Bundle/js/components/bundle-record\r\n * @see Magento_Bundle/js/components/bundle-checkbox\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'uiRegistry'\r\n], function (Select, registry) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            previousType: '',\r\n            parentContainer: '',\r\n            selections: '',\r\n            targetIndex: '',\r\n            typeMap: {}\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onUpdate: function () {\r\n            var type = this.typeMap[this.value()];\r\n\r\n            if (type !== this.previousType) {\r\n                this.previousType = type;\r\n                this.processSelections(type === 'radio');\r\n            }\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Toggle 'User Defined' column and clears values\r\n         * @param {Boolean} isRadio\r\n         */\r\n        processSelections: function (isRadio) {\r\n            var records = registry.get(this.retrieveParentName(this.parentContainer) + '.' + this.selections),\r\n                checkedFound = false;\r\n\r\n            records.elems.each(function (record) {\r\n                record.elems.filter(function (comp) {\r\n                    return comp.index === this.userDefinedIndex;\r\n                }, this).each(function (comp) {\r\n                    comp.visible(isRadio);\r\n                });\r\n\r\n                if (isRadio) {\r\n                    record.elems.filter(function (comp) {\r\n                        return comp.index === this.isDefaultIndex;\r\n                    }, this).each(function (comp) {\r\n                        if (comp.checked()) {\r\n                            if (checkedFound) {\r\n                                comp.clearing = true;\r\n                                comp.clear();\r\n                                comp.clearing = false;\r\n                            }\r\n\r\n                            checkedFound = true;\r\n                        }\r\n                    });\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Retrieve name for the most global parent with provided index.\r\n         *\r\n         * @param {String} parent - parent name.\r\n         * @returns {String}\r\n         */\r\n        retrieveParentName: function (parent) {\r\n            return this.name.replace(new RegExp('^(.+?\\\\.)?' + parent + '\\\\..+'), '$1' + parent);\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-option-qty.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            valueUpdate: 'input',\r\n            isInteger: true,\r\n            validation: {\r\n                'validate-number': true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onUpdate: function () {\r\n            this.validation['validate-digits'] = this.isInteger;\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        hasChanged: function () {\r\n            var notEqual = this.value() !== this.initialValue.toString();\r\n\r\n            return !this.visible() ? false : notEqual;\r\n        }\r\n\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-record.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/dynamic-rows/record',\r\n    'uiRegistry'\r\n], function (Record, registry) {\r\n    'use strict';\r\n\r\n    return Record.extend({\r\n        /**\r\n         * @param {String} val - type of Input Type\r\n         */\r\n        onTypeChanged: function (val) {\r\n            var columnVisibility  = !(val === 'multi' || val === 'checkbox');\r\n\r\n            registry.async(this.name + '.' + 'selection_can_change_qty')(function (elem) {\r\n                elem.visible(columnVisibility);\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-user-defined-checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Checkbox) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            listens: {\r\n                inputType: 'onInputTypeChange'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler for \"inputType\" property\r\n         *\r\n         * @param {String} data\r\n         */\r\n        onInputTypeChange: function (data) {\r\n            data === 'checkbox' || data === 'multi' ?\r\n                this.clear()\r\n                    .visible(false) :\r\n                this.visible(true);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/catalog/apply-to-type-switcher.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/catalog/type-events'\r\n], function ($, productType) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Bind event\r\n         */\r\n        bindAll: function () {\r\n            $('[data-form=edit-product] [data-role=tabs]').on(\r\n                'contentUpdated',\r\n                this._switchToTypeByApplyAttr.bind(this)\r\n            );\r\n\r\n            $('#product_info_tabs').on(\r\n                'beforePanelsMove tabscreate tabsactivate',\r\n                this._switchToTypeByApplyAttr.bind(this)\r\n            );\r\n\r\n            $(document).on('changeTypeProduct', this._switchToTypeByApplyAttr.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Constructor component\r\n         */\r\n        'Magento_Catalog/catalog/apply-to-type-switcher': function () {\r\n            this.bindAll();\r\n            this._switchToTypeByApplyAttr();\r\n        },\r\n\r\n        /**\r\n         * Show/hide elements based on type\r\n         *\r\n         * @private\r\n         */\r\n        _switchToTypeByApplyAttr: function () {\r\n            $('[data-apply-to]:not(.removed)').each(function (index, element) {\r\n                var attrContainer = $(element),\r\n                    applyTo = attrContainer.data('applyTo') || [],\r\n                    $inputs = attrContainer.find('select, input, textarea');\r\n\r\n                if (applyTo.length === 0 || $.inArray(productType.type.current, applyTo) !== -1) {\r\n                    attrContainer.removeClass('not-applicable-attribute');\r\n                    $inputs.removeClass('ignore-validate');\r\n                } else {\r\n                    attrContainer.addClass('not-applicable-attribute');\r\n                    $inputs.addClass('ignore-validate');\r\n                }\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/base-image-uploader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*global alert:true*/\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'jquery/file-uploader',\r\n    'mage/translate',\r\n    'mage/backend/notification'\r\n], function ($, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.baseImage', {\r\n        /**\r\n         * Button creation\r\n         * @protected\r\n         */\r\n        options: {\r\n            maxImageUploadCount: 10\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var $container = this.element,\r\n                imageTmpl = mageTemplate(this.element.find('[data-template=image]').html()),\r\n                $dropPlaceholder = this.element.find('.image-placeholder'),\r\n                $galleryContainer = $('#media_gallery_content'),\r\n                mainClass = 'base-image',\r\n                maximumImageCount = 5,\r\n                $fieldCheckBox = $container.closest('[data-attribute-code=image]').find(':checkbox'),\r\n                isDefaultChecked = $fieldCheckBox.is(':checked'),\r\n                findElement, updateVisibility;\r\n\r\n            if (isDefaultChecked) {\r\n                $fieldCheckBox.trigger('click');\r\n            }\r\n\r\n            /**\r\n             * @param {Object} data\r\n             * @return {HTMLElement}\r\n             */\r\n            findElement = function (data) {\r\n                return $container.find('.image:not(.image-placeholder)').filter(function () {\r\n                    if (!$(this).data('image')) {\r\n                        return false;\r\n                    }\r\n\r\n                    return $(this).data('image').file === data.file;\r\n                }).first();\r\n            };\r\n\r\n            /** Update image visibility. */\r\n            updateVisibility = function () {\r\n                var elementsList = $container.find('.image:not(.removed-item)');\r\n\r\n                elementsList.each(function (index) {\r\n                    $(this)[index < maximumImageCount ? 'show' : 'hide']();\r\n                });\r\n                $dropPlaceholder[elementsList.length > maximumImageCount ? 'hide' : 'show']();\r\n            };\r\n\r\n            $galleryContainer.on('setImageType', function (event, data) {\r\n                if (data.type === 'image') {\r\n                    $container.find('.' + mainClass).removeClass(mainClass);\r\n\r\n                    if (data.imageData) {\r\n                        findElement(data.imageData).addClass(mainClass);\r\n                    }\r\n                }\r\n            });\r\n\r\n            $galleryContainer.on('addItem', function (event, data) {\r\n                var tmpl = imageTmpl({\r\n                    data: data\r\n                });\r\n\r\n                $(tmpl).data('image', data).insertBefore($dropPlaceholder);\r\n\r\n                updateVisibility();\r\n            });\r\n\r\n            $galleryContainer.on('removeItem', function (event, image) {\r\n                findElement(image).addClass('removed-item').hide();\r\n                updateVisibility();\r\n            });\r\n\r\n            $galleryContainer.on('moveElement', function (event, data) {\r\n                var $element = findElement(data.imageData),\r\n                    $after;\r\n\r\n                if (data.position === 0) {\r\n                    $container.prepend($element);\r\n                } else {\r\n                    $after = $container.find('.image').eq(data.position);\r\n\r\n                    if (!$element.is($after)) {\r\n                        $element.insertAfter($after);\r\n                    }\r\n                }\r\n                updateVisibility();\r\n            });\r\n\r\n            $container.on('click', '[data-role=make-base-button]', function (event) {\r\n                var data;\r\n\r\n                event.preventDefault();\r\n                data = $(event.target).closest('.image').data('image');\r\n                $galleryContainer.productGallery('setBase', data);\r\n            });\r\n\r\n            $container.on('click', '[data-role=delete-button]', function (event) {\r\n                event.preventDefault();\r\n                $galleryContainer.trigger('removeItem', $(event.target).closest('.image').data('image'));\r\n            });\r\n\r\n            $container.sortable({\r\n                axis: 'x',\r\n                items: '.image:not(.image-placeholder)',\r\n                distance: 8,\r\n                tolerance: 'pointer',\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 * @param {Object} data\r\n                 */\r\n                stop: function (event, data) {\r\n                    $galleryContainer.trigger('setPosition', {\r\n                        imageData: data.item.data('image'),\r\n                        position: $container.find('.image').index(data.item)\r\n                    });\r\n                    $galleryContainer.trigger('resort');\r\n                }\r\n            }).disableSelection();\r\n\r\n            this.element.find('input[type=\"file\"]').fileupload({\r\n                dataType: 'json',\r\n                dropZone: $dropPlaceholder.closest('[data-attribute-code]'),\r\n                acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n                maxFileSize: this.element.data('maxFileSize'),\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 * @param {Object} data\r\n                 */\r\n                done: function (event, data) {\r\n                    $dropPlaceholder.find('.progress-bar').text('').removeClass('in-progress');\r\n\r\n                    if (!data.result) {\r\n                        return;\r\n                    }\r\n\r\n                    if (!data.result.error) {\r\n                        $galleryContainer.trigger('addItem', data.result);\r\n                    } else {\r\n                        alert({\r\n                            content: $.mage.__('We don\\'t recognize or support this file extension type.')\r\n                        });\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 * @param {Object} data\r\n                 */\r\n                change: function (e, data) {\r\n                    if (data.files.length > this.options.maxImageUploadCount) {\r\n                        $('body').notification('clear').notification('add', {\r\n                            error: true,\r\n                            message: $.mage.__('You can\\'t upload more than ' + this.options.maxImageUploadCount +\r\n                                ' images in one time'),\r\n\r\n                            /**\r\n                             * @param {*} message\r\n                             */\r\n                            insertMethod: function (message) {\r\n                                $('.page-main-actions').after(message);\r\n                            }\r\n                        });\r\n\r\n                        return false;\r\n                    }\r\n                }.bind(this),\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 * @param {*} data\r\n                 */\r\n                add: function (event, data) {\r\n                    $(this).fileupload('process', data).done(function () {\r\n                        data.submit();\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 * @param {Object} data\r\n                 */\r\n                progress: function (e, data) {\r\n                    var progress = parseInt(data.loaded / data.total * 100, 10);\r\n\r\n                    $dropPlaceholder.find('.progress-bar').addClass('in-progress').text(progress + '%');\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                start: function (event) {\r\n                    var uploaderContainer = $(event.target).closest('.image-placeholder');\r\n\r\n                    uploaderContainer.addClass('loading');\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                stop: function (event) {\r\n                    var uploaderContainer = $(event.target).closest('.image-placeholder');\r\n\r\n                    uploaderContainer.removeClass('loading');\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.baseImage;\r\n});\r\n","Magento_Catalog/catalog/product-attributes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'mage/translate'\r\n], function ($, _, registry) {\r\n    'use strict';\r\n\r\n    $.widget('mage.productAttributes', {\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._on({\r\n                'click': '_showPopup'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initModal: function () {\r\n            var self = this;\r\n\r\n            this.modal = $('<div id=\"create_new_attribute\"/>').modal({\r\n                title: $.mage.__('New Attribute'),\r\n                type: 'slide',\r\n                buttons: [],\r\n\r\n                /** @inheritdoc */\r\n                opened: function () {\r\n                    $(this).parent().addClass('modal-content-new-attribute');\r\n                    self.iframe = $('<iframe id=\"create_new_attribute_container\">').attr({\r\n                        src: self._prepareUrl(),\r\n                        frameborder: 0\r\n                    });\r\n                    self.modal.append(self.iframe);\r\n                    self._changeIframeSize();\r\n                    $(window).off().on('resize.modal', _.debounce(self._changeIframeSize.bind(self), 400));\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                closed: function () {\r\n                    var doc = self.iframe.get(0).document;\r\n\r\n                    if (doc && $.isFunction(doc.execCommand)) {\r\n                        //IE9 break script loading but not execution on iframe removing\r\n                        doc.execCommand('stop');\r\n                        self.iframe.remove();\r\n                    }\r\n                    self.modal.data('modal').modal.remove();\r\n                    $(window).off('resize.modal');\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @return {Number}\r\n         * @private\r\n         */\r\n        _getHeight: function () {\r\n            var modal = this.modal.data('modal').modal,\r\n                modalHead = modal.find('header'),\r\n                modalHeadHeight = modalHead.outerHeight(),\r\n                modalHeight = modal.outerHeight(),\r\n                modalContentPadding = this.modal.parent().outerHeight() - this.modal.parent().height();\r\n\r\n            return modalHeight - modalHeadHeight - modalContentPadding;\r\n        },\r\n\r\n        /**\r\n         * @return {Number}\r\n         * @private\r\n         */\r\n        _getWidth: function () {\r\n            return this.modal.width();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _changeIframeSize: function () {\r\n            this.modal.parent().outerHeight(this._getHeight());\r\n            this.iframe.outerHeight(this._getHeight());\r\n            this.iframe.outerWidth(this._getWidth());\r\n\r\n        },\r\n\r\n        /**\r\n         * @return {String}\r\n         * @private\r\n         */\r\n        _prepareUrl: function () {\r\n            var productSource,\r\n                attributeSetId = '';\r\n\r\n            if (this.options.dataProvider) {\r\n                try {\r\n                    productSource = registry.get(this.options.dataProvider);\r\n                    attributeSetId = productSource.data.product['attribute_set_id'];\r\n                } catch (e) {}\r\n            }\r\n\r\n            return this.options.url +\r\n                (/\\?/.test(this.options.url) ? '&' : '?') +\r\n                'set=' + attributeSetId;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _showPopup: function () {\r\n            this._initModal();\r\n            this.modal.modal('openModal');\r\n        }\r\n    });\r\n\r\n    return $.mage.productAttributes;\r\n});\r\n","Magento_Catalog/catalog/product.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    window.Product = {};\r\n\r\n    /**\r\n     * @param {String} id\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\r\n    function byId(id) {\r\n        return $('#' + id);\r\n    }\r\n\r\n    /**\r\n     * @param {String} fieldId\r\n     */\r\n    function disableFieldEditMode(fieldId) {\r\n        var field = byId(fieldId);\r\n\r\n        field.prop('disabled', true);\r\n\r\n        if (field.next().hasClass('addafter')) {\r\n            field.parent().addClass('_update-attributes-disabled');\r\n        }\r\n\r\n        if (byId(fieldId + '_hidden').length) {\r\n            byId(fieldId + '_hidden').prop('disabled', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {String} fieldId\r\n     */\r\n    function enableFieldEditMode(fieldId) {\r\n        var field = byId(fieldId);\r\n\r\n        field.prop('disabled', false);\r\n\r\n        if (field.parent().hasClass('_update-attributes-disabled')) {\r\n            field.parent().removeClass('_update-attributes-disabled');\r\n        }\r\n\r\n        if (byId(fieldId + '_hidden').length) {\r\n            byId(fieldId + '_hidden').prop('disabled', false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {String} toogleIdentifier\r\n     * @param {String} fieldId\r\n     */\r\n    function toogleFieldEditMode(toogleIdentifier, fieldId) {\r\n        if ($(toogleIdentifier).is(':checked')) {\r\n            enableFieldEditMode(fieldId);\r\n        } else {\r\n            disableFieldEditMode(fieldId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On complete disable.\r\n     */\r\n    function onCompleteDisableInited() {\r\n        var item;\r\n\r\n        $.each($('[data-disable]'), function () {\r\n            item = $(this).data('disable');\r\n            disableFieldEditMode(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {String} urlKey\r\n     */\r\n    function onUrlkeyChanged(urlKey) {\r\n        var hidden, chbx, oldValue;\r\n\r\n        urlKey = byId(urlKey);\r\n        hidden = urlKey.siblings('input[type=hidden]');\r\n        chbx = urlKey.siblings('input[type=checkbox]');\r\n        oldValue = chbx.val();\r\n\r\n        chbx.prop('disabled', oldValue === urlKey.val());\r\n        hidden.prop('disabled', chbx.prop('disabled'));\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} element\r\n     */\r\n    function onCustomUseParentChanged(element) {\r\n        var useParent, parent;\r\n\r\n        element = $(element);\r\n        useParent = element.val() == 1; //eslint-disable-line eqeqeq\r\n        parent = element.offsetParent().parent();\r\n\r\n        parent.find('input, select, textarea').each(function (i, el) {\r\n            el = $(el);\r\n\r\n            if (element.prop('id') !== el.prop('id')) {\r\n                el.prop('disabled', useParent);\r\n            }\r\n        });\r\n\r\n        parent.find('img').each(function (i, el) {\r\n            if (useParent) {\r\n                $(el).hide();\r\n            } else {\r\n                $(el).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    window.onCustomUseParentChanged = onCustomUseParentChanged;\r\n    window.onUrlkeyChanged = onUrlkeyChanged;\r\n    window.toogleFieldEditMode = toogleFieldEditMode;\r\n\r\n    $(onCompleteDisableInited);\r\n});\r\n","Magento_Catalog/catalog/type-events.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return {\r\n        $type: $('#product_type_id'),\r\n\r\n        /**\r\n         * Init\r\n         */\r\n        init: function () {\r\n            this.type = {\r\n                init: this.$type.val(),\r\n                current: this.$type.val()\r\n            };\r\n\r\n            this.bindAll();\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            $(document).on('setTypeProduct', function (event, type) {\r\n                this.setType(type);\r\n            }.bind(this));\r\n\r\n            //direct change type input\r\n            this.$type.on('change', function () {\r\n                this.type.current = this.$type.val();\r\n                this._notifyType();\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Set type\r\n         * @param {String} type - type product (downloadable, simple, virtual ...)\r\n         * @returns {*}\r\n         */\r\n        setType: function (type) {\r\n            return this.$type.val(type || this.type.init).trigger('change');\r\n        },\r\n\r\n        /**\r\n         * Notify type\r\n         * @private\r\n         */\r\n        _notifyType: function () {\r\n            $(document).trigger('changeTypeProduct', this.type);\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/category/assign-products.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global $, $H */\r\n\r\ndefine([\r\n    'mage/adminhtml/grid'\r\n], function () {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var selectedProducts = config.selectedProducts,\r\n            categoryProducts = $H(selectedProducts),\r\n            gridJsObject = window[config.gridJsObjectName],\r\n            tabIndex = 1000;\r\n\r\n        $('in_category_products').value = Object.toJSON(categoryProducts);\r\n\r\n        /**\r\n         * Register Category Product\r\n         *\r\n         * @param {Object} grid\r\n         * @param {Object} element\r\n         * @param {Boolean} checked\r\n         */\r\n        function registerCategoryProduct(grid, element, checked) {\r\n            if (checked) {\r\n                if (element.positionElement) {\r\n                    element.positionElement.disabled = false;\r\n                    categoryProducts.set(element.value, element.positionElement.value);\r\n                }\r\n            } else {\r\n                if (element.positionElement) {\r\n                    element.positionElement.disabled = true;\r\n                }\r\n                categoryProducts.unset(element.value);\r\n            }\r\n            $('in_category_products').value = Object.toJSON(categoryProducts);\r\n            grid.reloadParams = {\r\n                'selected_products[]': categoryProducts.keys()\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Click on product row\r\n         *\r\n         * @param {Object} grid\r\n         * @param {String} event\r\n         */\r\n        function categoryProductRowClick(grid, event) {\r\n            var trElement = Event.findElement(event, 'tr'),\r\n                isInput = Event.element(event).tagName === 'INPUT',\r\n                checked = false,\r\n                checkbox = null;\r\n\r\n            if (trElement) {\r\n                checkbox = Element.getElementsBySelector(trElement, 'input');\r\n\r\n                if (checkbox[0]) {\r\n                    checked = isInput ? checkbox[0].checked : !checkbox[0].checked;\r\n                    gridJsObject.setCheckboxChecked(checkbox[0], checked);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Change product position\r\n         *\r\n         * @param {String} event\r\n         */\r\n        function positionChange(event) {\r\n            var element = Event.element(event);\r\n\r\n            if (element && element.checkboxElement && element.checkboxElement.checked) {\r\n                categoryProducts.set(element.checkboxElement.value, element.value);\r\n                $('in_category_products').value = Object.toJSON(categoryProducts);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Initialize category product row\r\n         *\r\n         * @param {Object} grid\r\n         * @param {String} row\r\n         */\r\n        function categoryProductRowInit(grid, row) {\r\n            var checkbox = $(row).getElementsByClassName('checkbox')[0],\r\n                position = $(row).getElementsByClassName('input-text')[0];\r\n\r\n            if (checkbox && position) {\r\n                checkbox.positionElement = position;\r\n                position.checkboxElement = checkbox;\r\n                position.disabled = !checkbox.checked;\r\n                position.tabIndex = tabIndex++;\r\n                Event.observe(position, 'keyup', positionChange);\r\n            }\r\n        }\r\n\r\n        gridJsObject.rowClickCallback = categoryProductRowClick;\r\n        gridJsObject.initRowCallback = categoryProductRowInit;\r\n        gridJsObject.checkboxCheckCallback = registerCategoryProduct;\r\n\r\n        if (gridJsObject.rows) {\r\n            gridJsObject.rows.each(function (row) {\r\n                categoryProductRowInit(gridJsObject, row);\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/category/edit.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * Create/edit some category\r\n * @deprecated since version 2.2.0\r\n */\r\n\r\n/* global tree */\r\ndefine([\r\n    'jquery',\r\n    'prototype'\r\n], function (jQuery) {\r\n    'use strict';\r\n\r\n    /** Category submit. */\r\n    var categorySubmit = function () {\r\n        var activeTab = $('active_tab_id'),\r\n            params = {},\r\n            fields, i,categoryId, isCreating, path, parentId, currentNode, oldClass, newClass;\r\n\r\n        if (activeTab) {\r\n            if (activeTab.tabsJsObject && activeTab.tabsJsObject.tabs('activeAnchor')) {\r\n                activeTab.value = activeTab.tabsJsObject.tabs('activeAnchor').prop('id');\r\n            }\r\n        }\r\n\r\n        fields = $('category_edit_form').getElementsBySelector('input', 'select');\r\n\r\n        for (i = 0; i < fields.length; i++) {\r\n            if (!fields[i].name) {\r\n                continue;//jscs:ignore\r\n            }\r\n            params[fields[i].name] = fields[i].getValue();\r\n        }\r\n\r\n        // Get info about what we're submitting - to properly update tree nodes\r\n        categoryId = params['general[id]'] ? params['general[id]'] : 0;\r\n        isCreating = categoryId == 0; // eslint-disable-line eqeqeq\r\n        path = params['general[path]'].split('/');\r\n        parentId = path.pop();\r\n\r\n        if (parentId == categoryId) { // eslint-disable-line eqeqeq\r\n            parentId = path.pop();\r\n        }\r\n\r\n        // Make operations with category tree\r\n        if (isCreating) {\r\n            /* Some specific tasks for creating category */\r\n            if (!tree.currentNodeId) {\r\n                // First submit of form - select some node to be current\r\n                tree.currentNodeId = parentId;\r\n            }\r\n            tree.addNodeTo = parentId;\r\n        } else {\r\n            /* Some specific tasks for editing category */\r\n            // Maybe change category enabled/disabled style\r\n            if (tree && tree.storeId == 0) {// eslint-disable-line eqeqeq, no-lonely-if\r\n                currentNode = tree.getNodeById(categoryId);\r\n\r\n                if (currentNode) {//eslint-disable-line max-depth\r\n                    if (parseInt(params['general[is_active]'])) {//eslint-disable-line radix, max-depth\r\n                        oldClass = 'no-active-category';\r\n                        newClass = 'active-category';\r\n                    } else {\r\n                        oldClass = 'active-category';\r\n                        newClass = 'no-active-category';\r\n                    }\r\n\r\n                    Element.removeClassName(currentNode.ui.wrap.firstChild, oldClass);\r\n                    Element.addClassName(currentNode.ui.wrap.firstChild, newClass);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Submit form\r\n        jQuery('#category_edit_form').trigger('submit');\r\n    };\r\n\r\n    return function (config, element) {\r\n        config = config || {};\r\n        jQuery(element).on('click', function () {\r\n            categorySubmit();\r\n        });\r\n    };\r\n});\r\n","Magento_Catalog/catalog/category/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert'\r\n], function ($, alert) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var categoryForm = {\r\n            options: {\r\n                categoryIdSelector: 'input[name=\"id\"]',\r\n                categoryPathSelector: 'input[name=\"path\"]',\r\n                categoryParentSelector: 'input[name=\"parent\"]',\r\n                categoryLevelSelector: 'input[name=\"level\"]',\r\n                refreshUrl: config.refreshUrl\r\n            },\r\n\r\n            /**\r\n             * Sending ajax to server to refresh field 'path'\r\n             * @protected\r\n             */\r\n            refreshPath: function () {\r\n                if (!$(this.options.categoryIdSelector)) {\r\n                    return false;\r\n                }\r\n                $.ajax({\r\n                    url: this.options.refreshUrl,\r\n                    method: 'GET',\r\n                    showLoader: true\r\n                }).done(this._refreshPathSuccess.bind(this));\r\n            },\r\n\r\n            /**\r\n             * Refresh field 'path' on ajax success\r\n             * @param {Object} data\r\n             * @private\r\n             */\r\n            _refreshPathSuccess: function (data) {\r\n                if (data.error) {\r\n                    alert({\r\n                        content: data.message\r\n                    });\r\n                } else {\r\n                    $(this.options.categoryIdSelector).val(data.id).change();\r\n                    $(this.options.categoryPathSelector).val(data.path).change();\r\n                    $(this.options.categoryParentSelector).val(data.parentId).change();\r\n                    $(this.options.categoryLevelSelector).val(data.level).change();\r\n                }\r\n            }\r\n        };\r\n\r\n        $('body').on('categoryMove.tree', $.proxy(categoryForm.refreshPath.bind(categoryForm), this));\r\n    };\r\n});\r\n","Magento_Catalog/catalog/product/attribute/unique-validate.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/backend/validation'\r\n], function (jQuery) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var msg = '',\r\n            _config = jQuery.extend({\r\n                element: null,\r\n                message: '',\r\n                uniqueClass: 'required-unique'\r\n            }, config),\r\n\r\n            /** @inheritdoc */\r\n            messager = function () {\r\n                return msg;\r\n            };\r\n\r\n        if (typeof _config.element === 'string') {\r\n            jQuery.validator.addMethod(\r\n                _config.element,\r\n\r\n                function (value, element) {\r\n                    var inputs = jQuery(element)\r\n                            .closest('table')\r\n                            .find('.' + _config.uniqueClass + ':visible'),\r\n                        valuesHash = {},\r\n                        isValid = true,\r\n                        duplicates = [];\r\n\r\n                    inputs.each(function (el) {\r\n                        var inputValue = inputs[el].value;\r\n\r\n                        if (typeof valuesHash[inputValue] !== 'undefined') {\r\n                            isValid = false;\r\n                            duplicates.push(inputValue);\r\n                        }\r\n                        valuesHash[inputValue] = el;\r\n                    });\r\n\r\n                    if (!isValid) {\r\n                        msg = _config.message + ' (' + duplicates.join(', ') + ')';\r\n                    }\r\n\r\n                    return isValid;\r\n                },\r\n\r\n                messager\r\n            );\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/product/composite/configure.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'jquery/ui',\r\n    'mage/translate',\r\n    'prototype',\r\n    'Magento_Ui/js/modal/modal'\r\n], function (jQuery) {\r\n\r\n    window.ProductConfigure = Class.create();\r\n\r\n    ProductConfigure.prototype = {\r\n\r\n        listTypes:                  $H({}),\r\n        current:                    $H({}),\r\n        itemsFilter:                $H({}),\r\n        blockWindow:                null,\r\n        blockForm:                  null,\r\n        blockFormFields:            null,\r\n        blockFormAdd:               null,\r\n        blockFormConfirmed:         null,\r\n        blockConfirmed:             null,\r\n        blockIFrame:                null,\r\n        blockCancelBtn:             null,\r\n        blockMask:                  null,\r\n        blockMsg:                   null,\r\n        blockMsgError:              null,\r\n        windowHeight:               null,\r\n        confirmedCurrentId:         null,\r\n        confirmCallback:            {},\r\n        cancelCallback:             {},\r\n        onLoadIFrameCallback:       {},\r\n        showWindowCallback:         {},\r\n        beforeSubmitCallback:       {},\r\n        iFrameJSVarname:            null,\r\n        _listTypeId:                1,\r\n\r\n        /**\r\n         * Initialize object\r\n         */\r\n        initialize: function () {\r\n            var self = this;\r\n\r\n            this._initWindowElements();\r\n            jQuery.async('#product_composite_configure', function (el) {\r\n                self.dialog = jQuery(el).modal({\r\n                    title: jQuery.mage.__('Configure Product'),\r\n                    type: 'slide',\r\n                    buttons: [{\r\n                        text: jQuery.mage.__('OK'),\r\n                        'class': 'action-primary',\r\n                        click: function () {\r\n                            self.onConfirmBtn();\r\n                        }\r\n                    }]\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Initialize window elements\r\n         */\r\n        _initWindowElements: function () {\r\n            this.blockWindow                = $('product_composite_configure');\r\n            this.blockForm                  = $('product_composite_configure_form');\r\n            this.blockFormFields            = $('product_composite_configure_form_fields');\r\n            this.blockFormAdd               = $('product_composite_configure_form_additional');\r\n            this.blockFormConfirmed         = $('product_composite_configure_form_confirmed');\r\n            this.blockConfirmed             = $('product_composite_configure_confirmed');\r\n            this.blockIFrame                = $('product_composite_configure_iframe');\r\n            this.blockCancelBtn             = $('product_composite_configure_form_cancel');\r\n            this.blockMsg                   = $('product_composite_configure_messages');\r\n            this.blockMsgError              = this.blockMsg.select('.message.error div')[0];\r\n            this.iFrameJSVarname            = this.blockForm.select('input[name=\"as_js_varname\"]')[0].value;\r\n        },\r\n\r\n        /**\r\n         * Returns next unique list type id\r\n         */\r\n        _generateListTypeId: function () {\r\n            return '_internal_lt_' + this._listTypeId++;\r\n        },\r\n\r\n        /**\r\n         * Add product list types as scope and their urls\r\n         * example: addListType('product_to_add', {urlFetch: 'http://magento...'})\r\n         * example: addListType('wishlist', {urlSubmit: 'http://magento...'})\r\n         *\r\n         * @param type types as scope\r\n         * @param urls obj can be\r\n         *             - {urlFetch: 'http://magento...'} for fetching configuration fields through ajax\r\n         *             - {urlConfirm: 'http://magento...'} for submit configured data through iFrame when clicked confirm button\r\n         *             - {urlSubmit: 'http://magento...'} for submit configured data through iFrame\r\n         */\r\n        addListType: function (type, urls) {\r\n            if ('undefined' == typeof this.listTypes[type]) {\r\n                this.listTypes[type] = {};\r\n            }\r\n            Object.extend(this.listTypes[type], urls);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds complex list type - that is used to submit several list types at once\r\n         * Only urlSubmit is possible for this list type\r\n         * example: addComplexListType(['wishlist', 'product_list'], 'http://magento...')\r\n         *\r\n         * @param type types as scope\r\n         * @param urls obj can be\r\n         *             - {urlSubmit: 'http://magento...'} for submit configured data through iFrame\r\n         * @return type string\r\n         */\r\n        addComplexListType: function (types, urlSubmit) {\r\n            var type = this._generateListTypeId();\r\n\r\n            this.listTypes[type] = {};\r\n            this.listTypes[type].complexTypes = types;\r\n            this.listTypes[type].urlSubmit = urlSubmit;\r\n\r\n            return type;\r\n        },\r\n\r\n        /**\r\n         * Add filter of items\r\n         *\r\n         * @param listType scope name\r\n         * @param itemsFilter\r\n         */\r\n        addItemsFilter: function (listType, itemsFilter) {\r\n            if (!listType || !itemsFilter) {\r\n                return false;\r\n            }\r\n\r\n            if ('undefined' == typeof this.itemsFilter[listType]) {\r\n                this.itemsFilter[listType] = [];\r\n            }\r\n            this.itemsFilter[listType] = this.itemsFilter[listType].concat(itemsFilter);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns id of block where configuration for an item is stored\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         * @return string\r\n         */\r\n        _getConfirmedBlockId: function (listType, itemId) {\r\n            return this.blockConfirmed.id + '[' + listType + '][' + itemId + ']';\r\n        },\r\n\r\n        /**\r\n         * Checks whether item has some configuration fields\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         * @return bool\r\n         */\r\n        itemConfigured: function (listType, itemId) {\r\n            var confirmedBlockId = this._getConfirmedBlockId(listType, itemId);\r\n            var itemBlock = $(confirmedBlockId);\r\n\r\n            return !!(itemBlock && itemBlock.innerHTML);\r\n        },\r\n\r\n        /**\r\n         * Show configuration fields of item, if it not found then get it through ajax\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         */\r\n        showItemConfiguration: function (listType, itemId) {\r\n            if (!listType || !itemId) {\r\n                return false;\r\n            }\r\n\r\n            this.initialize();\r\n            this.current.listType = listType;\r\n            this.current.itemId = itemId;\r\n            this.confirmedCurrentId = this._getConfirmedBlockId(listType, itemId);\r\n\r\n            if (!this.itemConfigured(listType, itemId)) {\r\n                this._requestItemConfiguration(listType, itemId);\r\n            } else {\r\n                this._processFieldsData('item_restore');\r\n                this._showWindow();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get configuration fields of product through ajax and show them\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         */\r\n        _requestItemConfiguration: function (listType, itemId) {\r\n            if (!this.listTypes[listType].urlFetch) {\r\n                return false;\r\n            }\r\n            var url = this.listTypes[listType].urlFetch;\r\n\r\n            if (url) {\r\n                new Ajax.Request(url, {\r\n                    parameters: {\r\n                        id: itemId\r\n                    },\r\n                    onSuccess: function (transport) {\r\n                        var response = transport.responseText;\r\n\r\n                        if (response.isJSON()) {\r\n                            response = response.evalJSON();\r\n\r\n                            if (response.error) {\r\n                                this.blockMsg.show();\r\n                                this.blockMsgError.innerHTML = response.message;\r\n                                this.blockCancelBtn.hide();\r\n                                this.setConfirmCallback(listType, null);\r\n                                this._showWindow();\r\n                            }\r\n                        } else if (response) {\r\n                            response += '';\r\n                            this.blockFormFields.update(response);\r\n\r\n                            // Add special div to hold mage data, e.g. scripts to execute on every popup show\r\n                            var mageData = {};\r\n                            var scripts = response.extractScripts();\r\n\r\n                            mageData.scripts = scripts;\r\n\r\n                            var scriptHolder = new Element('div', {\r\n                                'style': 'display:none'\r\n                            });\r\n\r\n                            scriptHolder.mageData = mageData;\r\n                            this.blockFormFields.insert(scriptHolder);\r\n\r\n                            // Show window\r\n                            this._showWindow();\r\n                        }\r\n                    }.bind(this)\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggered on confirm button click\r\n         * Do submit configured data through iFrame if needed\r\n         */\r\n        onConfirmBtn: function () {\r\n            if (jQuery(this.blockForm).valid()) {\r\n                if (this.listTypes[this.current.listType].urlConfirm) {\r\n                    this.submit();\r\n                } else {\r\n                    this._processFieldsData('item_confirm');\r\n                    this._closeWindow();\r\n\r\n                    if (Object.isFunction(this.confirmCallback[this.current.listType])) {\r\n                        this.confirmCallback[this.current.listType]();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggered on cancel button click\r\n         */\r\n        onCancelBtn: function () {\r\n            this._closeWindow();\r\n\r\n            if (Object.isFunction(this.cancelCallback[this.current.listType])) {\r\n                this.cancelCallback[this.current.listType]();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Submit configured data through iFrame\r\n         *\r\n         * @param listType scope name\r\n         */\r\n        submit: function (listType) {\r\n            // prepare data\r\n            if (listType) {\r\n                this.current.listType = listType;\r\n                this.current.itemId = null;\r\n            }\r\n            var urlConfirm = this.listTypes[this.current.listType].urlConfirm;\r\n            var urlSubmit = this.listTypes[this.current.listType].urlSubmit;\r\n\r\n            if (!urlConfirm && !urlSubmit) {\r\n                return false;\r\n            }\r\n\r\n            if (urlConfirm) {\r\n                this.blockForm.action = urlConfirm;\r\n                this.addFields([new Element('input', {\r\n                    type: 'hidden', name: 'id', value: this.current.itemId\r\n                })]);\r\n            } else {\r\n                this.blockForm.action = urlSubmit;\r\n\r\n                var complexTypes = this.listTypes[this.current.listType].complexTypes;\r\n\r\n                if (complexTypes) {\r\n                    this.addFields([new Element('input', {\r\n                        type: 'hidden', name: 'configure_complex_list_types', value: complexTypes.join(',')\r\n                    })]);\r\n                }\r\n\r\n                this._processFieldsData('current_confirmed_to_form');\r\n\r\n                // Disable item controls that duplicate added fields (e.g. sometimes qty controls can intersect)\r\n                // so they won't be submitted\r\n                var tagNames = ['input', 'select', 'textarea'];\r\n\r\n                var names = {}; // Map of added field names\r\n\r\n                for (var i = 0, len = tagNames.length; i < len; i++) {\r\n                    var tagName = tagNames[i];\r\n                    var elements = this.blockFormAdd.getElementsByTagName(tagName);\r\n\r\n                    for (var index = 0, elLen = elements.length; index < elLen; index++) {\r\n                        names[elements[index].name] = true;\r\n                    }\r\n                }\r\n\r\n                for (var i = 0, len = tagNames.length; i < len; i++) {\r\n                    var tagName = tagNames[i];\r\n                    var elements = this.blockFormConfirmed.getElementsByTagName(tagName);\r\n\r\n                    for (var index = 0, elLen = elements.length; index < elLen; index++) {\r\n                        var element = elements[index];\r\n\r\n                        if (names[element.name]) {\r\n                            element.setAttribute('configure_disabled', 1);\r\n                            element.setAttribute('configure_prev_disabled', element.disabled ? 1 : 0);\r\n                            element.disabled = true;\r\n                        } else {\r\n                            element.setAttribute('configure_disabled', 0);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // do submit\r\n            if (Object.isFunction(this.beforeSubmitCallback[this.current.listType])) {\r\n                this.beforeSubmitCallback[this.current.listType]();\r\n            }\r\n            this.blockForm.submit();\r\n\r\n            // Show loader\r\n            jQuery(this.blockForm).trigger('processStart');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add dynamically additional fields for form\r\n         *\r\n         * @param fields\r\n         */\r\n        addFields: function (fields) {\r\n            fields.each(function (elm) {\r\n                this.blockFormAdd.insert(elm);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggered when form was submitted and iFrame was loaded. Get response from iFrame and handle it\r\n         */\r\n        onLoadIFrame: function () {\r\n            this.blockFormConfirmed.select('[configure_disabled=1]').each(function (element) {\r\n                element.disabled = element.getAttribute('configure_prev_disabled') == '1';\r\n            });\r\n\r\n            this._processFieldsData('form_confirmed_to_confirmed');\r\n\r\n            var response = this.blockIFrame.contentWindow[this.iFrameJSVarname];\r\n\r\n            if (response && 'object' == typeof response) {\r\n                if (this.listTypes[this.current.listType].urlConfirm) {\r\n                    if (response.ok) {\r\n                        this._closeWindow();\r\n                        this.clean('current');\r\n                    } else if (response.error) {\r\n                        this.showItemConfiguration(this.current.listType, this.current.itemId);\r\n                        this.blockMsg.show();\r\n                        this.blockMsgError.innerHTML = response.message;\r\n                        this._showWindow();\r\n\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (Object.isFunction(this.onLoadIFrameCallback[this.current.listType])) {\r\n                    this.onLoadIFrameCallback[this.current.listType](response);\r\n                }\r\n                document.fire(this.current.listType + ':afterIFrameLoaded');\r\n            }\r\n            // Hide loader\r\n            jQuery(this.blockForm).trigger('processStop');\r\n\r\n            this.clean('current');\r\n            this.initialize();\r\n        },\r\n\r\n        /**\r\n         * Helper for fetching content from iFrame\r\n         */\r\n        _getIFrameContent: function () {\r\n            var content = this.blockIFrame.contentWindow || this.blockIFrame.contentDocument;\r\n\r\n            if (content.document) {\r\n                content = content.document;\r\n            }\r\n\r\n            return content;\r\n        },\r\n\r\n        /**\r\n         * Helper to find qty of currently confirmed item\r\n         */\r\n        getCurrentConfirmedQtyElement: function () {\r\n            var elms = $(this.confirmedCurrentId).getElementsByTagName('input');\r\n\r\n            for (var i = 0; i < elms.length; i++) {\r\n                if (elms[i].name == 'qty') {\r\n                    return elms[i];\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Helper to find qty of active form\r\n         */\r\n        getCurrentFormQtyElement: function () {\r\n            var elms = this.blockFormFields.getElementsByTagName('input');\r\n\r\n            for (var i = 0; i < elms.length; i++) {\r\n                if (elms[i].name == 'qty') {\r\n                    return elms[i];\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show configuration window\r\n         */\r\n        _showWindow: function () {\r\n            this.dialog.modal('openModal');\r\n            //this._toggleSelectsExceptBlock(false);\r\n\r\n            if (Object.isFunction(this.showWindowCallback[this.current.listType])) {\r\n                this.showWindowCallback[this.current.listType]();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close configuration window\r\n         */\r\n        _closeWindow: function () {\r\n            this.dialog.modal('closeModal');\r\n            //this.blockWindow.style.display = 'none';\r\n            //this.clean('window');\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when confirm button was clicked\r\n         *\r\n         * @param confirmCallback\r\n         */\r\n        setConfirmCallback: function (listType, confirmCallback) {\r\n            this.confirmCallback[listType] = confirmCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when cancel button was clicked\r\n         *\r\n         * @param cancelCallback\r\n         */\r\n        setCancelCallback: function (listType, cancelCallback) {\r\n            this.cancelCallback[listType] = cancelCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when iFrame was loaded\r\n         *\r\n         * @param onLoadIFrameCallback\r\n         */\r\n        setOnLoadIFrameCallback: function (listType, onLoadIFrameCallback) {\r\n            this.onLoadIFrameCallback[listType] = onLoadIFrameCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when iFrame was loaded\r\n         *\r\n         * @param showWindowCallback\r\n         */\r\n        setShowWindowCallback: function (listType, showWindowCallback) {\r\n            this.showWindowCallback[listType] = showWindowCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered before submitting form\r\n         *\r\n         * @param beforeSubmitCallback\r\n         */\r\n        setBeforeSubmitCallback: function (listType, beforeSubmitCallback) {\r\n            this.beforeSubmitCallback[listType] = beforeSubmitCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clean object data\r\n         *\r\n         * @param method can be 'all' or 'current'\r\n         */\r\n        clean: function (method) {\r\n            var listInfo = null;\r\n            var listTypes = null;\r\n            var removeConfirmed = function (listTypes) {\r\n                this.blockConfirmed.childElements().each(function (elm) {\r\n                    for (var i = 0, len = listTypes.length; i < len; i++) {\r\n                        var pattern = this.blockConfirmed.id + '[' + listTypes[i] + ']';\r\n\r\n                        if (elm.id.indexOf(pattern) == 0) {\r\n                            elm.remove();\r\n                            break;\r\n                        }\r\n                    }\r\n                }.bind(this));\r\n            }.bind(this);\r\n\r\n            switch (method) {\r\n                case 'current':\r\n                    listInfo = this.listTypes[this.current.listType];\r\n                    listTypes = [this.current.listType];\r\n\r\n                    if (listInfo && listInfo.complexTypes) {\r\n                        listTypes = listTypes.concat(listInfo.complexTypes);\r\n                    }\r\n                    removeConfirmed(listTypes);\r\n                    break;\r\n\r\n                case 'window':\r\n                    this.blockFormFields.update();\r\n                    this.blockMsg.hide();\r\n                    this.blockMsgError.update();\r\n                    this.blockCancelBtn.show();\r\n                    break;\r\n                default:\r\n                    // search in list types for its cleaning\r\n                    if (this.listTypes[method]) {\r\n                        listInfo = this.listTypes[method];\r\n                        listTypes = [method];\r\n\r\n                        if (listInfo.complexTypes) {\r\n                            listTypes = listTypes.concat(listInfo.complexTypes);\r\n                        }\r\n                        removeConfirmed(listTypes);\r\n                        // clean all\r\n                    } else if (!method) {\r\n                        this.current = $H({});\r\n                        this.blockConfirmed.update();\r\n                        this.blockFormFields.update();\r\n                        this.blockMsg.hide();\r\n                        this.blockMsgError.update();\r\n                        this.blockCancelBtn.show();\r\n                    }\r\n                    break;\r\n            }\r\n            this._getIFrameContent().body.innerHTML = '';\r\n            this.blockIFrame.contentWindow[this.iFrameJSVarname] = {};\r\n            this.blockFormAdd.update();\r\n            this.blockFormConfirmed.update();\r\n            this.blockForm.action = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Process fields data: save, restore, move saved to form and back\r\n         *\r\n         * @param method can be 'item_confirm', 'item_restore', 'current_confirmed_to_form', 'form_confirmed_to_confirmed'\r\n         */\r\n        _processFieldsData: function (method) {\r\n\r\n            /**\r\n             * Internal function for rename fields names of some list type\r\n             * if listType is not specified, then it won't be added as prefix to all names\r\n             *\r\n             * @param method can be 'current_confirmed_to_form', 'form_confirmed_to_confirmed'\r\n             * @param blockItem\r\n             */\r\n            var _renameFields = function (method, blockItem, listType) {\r\n                var pattern         = null;\r\n                var patternFlat     = null;\r\n                var replacement     = null;\r\n                var replacementFlat = null;\r\n                var scopeArr        = blockItem.id.match(/.*\\[\\w+\\]\\[([^\\]]+)\\]$/);\r\n                var itemId          = scopeArr[1];\r\n\r\n                if (method == 'current_confirmed_to_form') {\r\n                    pattern         = RegExp('(\\\\w+)(\\\\[?)');\r\n                    patternFlat     = RegExp('(\\\\w+)');\r\n                    replacement     = 'item[' + itemId + '][$1]$2';\r\n                    replacementFlat = 'item_' + itemId + '_$1';\r\n\r\n                    if (listType) {\r\n                        replacement = 'list[' + listType + '][item][' + itemId + '][$1]$2';\r\n                        replacementFlat = 'list_' + listType + '_' + replacementFlat;\r\n                    }\r\n                } else if (method == 'form_confirmed_to_confirmed') {\r\n                    var stPattern = 'item\\\\[' + itemId + '\\\\]\\\\[(\\\\w+)\\\\](.*)';\r\n                    var stPatternFlat = 'item_' + itemId + '_(\\\\w+)';\r\n\r\n                    if (listType) {\r\n                        stPattern = 'list\\\\[' + listType + '\\\\]\\\\[item\\\\]\\\\[' + itemId + '\\\\]\\\\[(\\\\w+)\\\\](.*)';\r\n                        stPatternFlat = 'list_' + listType + '_' + stPatternFlat;\r\n                    }\r\n                    pattern         = new RegExp(stPattern);\r\n                    patternFlat     = new RegExp(stPatternFlat);\r\n                    replacement     = '$1$2';\r\n                    replacementFlat = '$1';\r\n                } else {\r\n                    return false;\r\n                }\r\n                var rename = function (elms) {\r\n                    for (var i = 0; i < elms.length; i++) {\r\n                        if (elms[i].name && elms[i].type == 'file') {\r\n                            elms[i].name = elms[i].name.replace(patternFlat, replacementFlat);\r\n                        } else if (elms[i].name) {\r\n                            elms[i].name = elms[i].name.replace(pattern, replacement);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                rename(blockItem.getElementsByTagName('input'));\r\n                rename(blockItem.getElementsByTagName('select'));\r\n                rename(blockItem.getElementsByTagName('textarea'));\r\n            };\r\n\r\n            switch (method) {\r\n                case 'item_confirm':\r\n                    if (!$(this.confirmedCurrentId)) {\r\n                        this.blockConfirmed.insert(new Element('div', {\r\n                            id: this.confirmedCurrentId\r\n                        }));\r\n                    } else {\r\n                        $(this.confirmedCurrentId).update();\r\n                    }\r\n                    this.blockFormFields.childElements().each(function (elm) {\r\n                        $(this.confirmedCurrentId).insert(elm);\r\n                    }.bind(this));\r\n                    break;\r\n\r\n                case 'item_restore':\r\n                    this.blockFormFields.update();\r\n\r\n                    // clone confirmed to form\r\n                    var mageData = null;\r\n\r\n                    $(this.confirmedCurrentId).childElements().each(function (elm) {\r\n                        var cloned = elm.cloneNode(true);\r\n\r\n                        if (elm.mageData) {\r\n                            cloned.mageData = elm.mageData;\r\n                            mageData = elm.mageData;\r\n                        }\r\n                        this.blockFormFields.insert(cloned);\r\n                    }.bind(this));\r\n\r\n                    // get confirmed values\r\n                    var fieldsValue = {};\r\n                    var getConfirmedValues = function (elms) {\r\n                        for (var i = 0; i < elms.length; i++) {\r\n                            if (elms[i].name) {\r\n                                if ('undefined' == typeof fieldsValue[elms[i].name]) {\r\n                                    fieldsValue[elms[i].name] = {};\r\n                                }\r\n\r\n                                if (elms[i].type == 'checkbox') {\r\n                                    fieldsValue[elms[i].name][elms[i].value] = elms[i].checked;\r\n                                } else if (elms[i].type == 'radio') {\r\n                                    if (elms[i].checked) {\r\n                                        fieldsValue[elms[i].name] = elms[i].value;\r\n                                    }\r\n                                } else {\r\n                                    fieldsValue[elms[i].name] = Form.Element.getValue(elms[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    getConfirmedValues($(this.confirmedCurrentId).getElementsByTagName('input'));\r\n                    getConfirmedValues($(this.confirmedCurrentId).getElementsByTagName('select'));\r\n                    getConfirmedValues($(this.confirmedCurrentId).getElementsByTagName('textarea'));\r\n\r\n                    // restore confirmed values\r\n                    var restoreConfirmedValues = function (elms) {\r\n                        for (var i = 0; i < elms.length; i++) {\r\n                            if ('undefined' != typeof fieldsValue[elms[i].name]) {\r\n                                if (elms[i].type != 'file') {\r\n                                    if (elms[i].type == 'checkbox') {\r\n                                        elms[i].checked = fieldsValue[elms[i].name][elms[i].value];\r\n                                    } else if (elms[i].type == 'radio') {\r\n                                        if (elms[i].value == fieldsValue[elms[i].name]) {\r\n                                            elms[i].checked = true;\r\n                                        }\r\n                                    } else {\r\n                                        elms[i].setValue(fieldsValue[elms[i].name]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    restoreConfirmedValues(this.blockFormFields.getElementsByTagName('input'));\r\n                    restoreConfirmedValues(this.blockFormFields.getElementsByTagName('select'));\r\n                    restoreConfirmedValues(this.blockFormFields.getElementsByTagName('textarea'));\r\n\r\n                    // Execute scripts\r\n                    if (mageData && mageData.scripts) {\r\n                        this.restorePhase = true;\r\n\r\n                        try {\r\n                            mageData.scripts.map(function (script) {\r\n                                return eval(script);\r\n                            });\r\n                        } catch (e) {\r\n\r\n                        }\r\n                        this.restorePhase = false;\r\n                    }\r\n                    break;\r\n\r\n                case 'current_confirmed_to_form':\r\n                    var allowedListTypes = {};\r\n\r\n                    allowedListTypes[this.current.listType] = true;\r\n                    var listInfo = this.listTypes[this.current.listType];\r\n\r\n                    if (listInfo.complexTypes) {\r\n                        for (var i = 0, len = listInfo.complexTypes.length; i < len; i++) {\r\n                            allowedListTypes[listInfo.complexTypes[i]] = true;\r\n                        }\r\n                    }\r\n\r\n                    this.blockFormConfirmed.update();\r\n                    this.blockConfirmed.childElements().each(function (blockItem) {\r\n                        var scopeArr    = blockItem.id.match(/.*\\[(\\w+)\\]\\[([^\\]]+)\\]$/);\r\n                        var listType    = scopeArr[1];\r\n                        var itemId    = scopeArr[2];\r\n\r\n                        if (allowedListTypes[listType] && (!this.itemsFilter[listType] ||\r\n                            this.itemsFilter[listType].indexOf(itemId) != -1)) {\r\n                            _renameFields(method, blockItem, listInfo.complexTypes ? listType : null);\r\n                            this.blockFormConfirmed.insert(blockItem);\r\n                        }\r\n                    }.bind(this));\r\n                    break;\r\n\r\n                case 'form_confirmed_to_confirmed':\r\n                    var listInfo = this.listTypes[this.current.listType];\r\n\r\n                    this.blockFormConfirmed.childElements().each(function (blockItem) {\r\n                        var scopeArr = blockItem.id.match(/.*\\[(\\w+)\\]\\[([^\\]]+)\\]$/);\r\n                        var listType = scopeArr[1];\r\n\r\n                        _renameFields(method, blockItem, listInfo.complexTypes ? listType : null);\r\n                        this.blockConfirmed.insert(blockItem);\r\n                    }.bind(this));\r\n                    break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if qty selected correctly\r\n         *\r\n         * @param object element\r\n         * @param object event\r\n         */\r\n        changeOptionQty: function (element, event) {\r\n            var checkQty = true;\r\n\r\n            if ('undefined' != typeof event) {\r\n                if (event.keyCode == 8 || event.keyCode == 46) {\r\n                    checkQty = false;\r\n                }\r\n            }\r\n\r\n            if (checkQty && (Number(element.value) <= 0 || isNaN(Number(element.value)))) {\r\n                element.value = 1;\r\n            }\r\n        }\r\n    };\r\n\r\n    productConfigure = new ProductConfigure();\r\n    jQuery(document).trigger('productConfigure:inited');\r\n    jQuery(document).data('productConfigureInited', true);\r\n});\r\n","Magento_Catalog/catalog/product/edit/attribute.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/mage',\r\n    'validation'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n        $(element).mage('form').validation({\r\n            validationUrl: config.validationUrl\r\n        });\r\n    };\r\n});\r\n","Magento_Catalog/component/file-type-field.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if (value === 'file') {\r\n                this.disabled(false);\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.reset();\r\n            this.disabled(true);\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/image-size-field.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/lib/validation/utils',\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Ui/js/lib/validation/validator',\r\n    'mage/translate'\r\n], function ($, utils, Abstract, validator) {\r\n    'use strict';\r\n\r\n    validator.addRule(\r\n        'validate-image-size-range',\r\n        function (value) {\r\n            var dataAttrRange = /^(\\d+)x(\\d+)$/,\r\n                m;\r\n\r\n            if (utils.isEmptyNoTrim(value)) {\r\n                return true;\r\n            }\r\n\r\n            m = dataAttrRange.exec(value);\r\n\r\n            return !!(m &&  m[1] > 0 && m[2] > 0);\r\n        },\r\n        $.mage.__('This value does not follow the specified format (for example, 200X300).')\r\n    );\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks for relevant value\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isRangeCorrect: function () {\r\n            return validator('validate-image-size-range', this.value()).passed;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/select-type-grid.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows'\r\n], function ($, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if ($.inArray(value, ['drop_down', 'radio', 'checkbox', 'multiple']) !== -1) {\r\n                this.disabled(false);\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.reset();\r\n            this.disabled(true);\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/static-type-container.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/components/group'\r\n], function ($, Group) {\r\n    'use strict';\r\n\r\n    return Group.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if ($.inArray(value, ['field', 'area', 'file', 'date', 'date_time', 'time']) !== -1) {\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/static-type-input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (registry, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            parentOption: null\r\n        },\r\n\r\n        /**\r\n         * Initialize component.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        initialize: function () {\r\n            return this\r\n                ._super()\r\n                .initLinkToParent();\r\n        },\r\n\r\n        /**\r\n         * Cache link to parent component - option holder.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        initLinkToParent: function () {\r\n            var pathToParent = this.parentName.replace(/(\\.[^.]*){2}$/, '');\r\n\r\n            this.parentOption = registry.async(pathToParent);\r\n            this.value() && this.parentOption('label', this.value());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * On value change handler.\r\n         *\r\n         * @param {String} value\r\n         */\r\n        onUpdate: function (value) {\r\n            this.parentOption(function (component) {\r\n                component.set('label', value ? value : component.get('headerLabel'));\r\n            });\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/static-type-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/element/select'\r\n], function ($, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if (!value || $.inArray(value, ['drop_down', 'radio', 'checkbox', 'multiple']) !== -1) {\r\n                this.reset();\r\n                this.disabled(true);\r\n\r\n                return false;\r\n            }\r\n\r\n            this.disabled(false);\r\n\r\n            return true;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/text-type-field.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function ($, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks for relevant value\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if ($.inArray(value, ['field', 'area']) !== -1) {\r\n                this.disabled(false);\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.reset();\r\n            this.disabled(true);\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/bundle-proxy-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/components/button',\r\n    'uiRegistry',\r\n    'underscore'\r\n], function (Button, registry, _) {\r\n    'use strict';\r\n\r\n    return Button.extend({\r\n        defaults: {\r\n            currentRecordNamespace: 'bundle_current_record',\r\n            listingDataProvider: '',\r\n            value: [],\r\n            imports: {\r\n                currentRecordName: '${ $.provider }:${ $.currentRecordNamespace }',\r\n                listingData: '${ $.provider }:${ $.listingDataProvider }'\r\n            },\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            },\r\n            listens: {\r\n                listingData: 'setListingData'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initSource();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'value',\r\n                    'listingData'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'destroy' of parent and\r\n         * clear listing provider source\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n            this.source.set(this.listingDataProvider, []);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Call parent \"action\" method\r\n         * and set new data to record and listing.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n\r\n        action: function () {\r\n            this._super();\r\n            this.source.set(this.currentRecordNamespace, this.name);\r\n            this.source.set(this.listingDataProvider, this.value());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init current source.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initSource: function () {\r\n            if (!_.isFunction(this.source)) {\r\n                this.source = registry.get(this.provider);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set data to listing source.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setListingData: function (data) {\r\n            if (this.name === this.currentRecordName) {\r\n                this.source.set(this.dataScope, data);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/category-checkbox-tree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global Ext, varienWindowOnload, varienElementMethods */\r\n\r\ndefine([\r\n    'jquery',\r\n    'prototype',\r\n    'extjs/ext-tree-checkbox',\r\n    'mage/adminhtml/form'\r\n], function (jQuery) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var tree,\r\n            options = {\r\n                dataUrl: config.dataUrl,\r\n                divId: config.divId,\r\n                rootVisible: config.rootVisible,\r\n                useAjax: config.useAjax,\r\n                currentNodeId: config.currentNodeId,\r\n                jsFormObject: window[config.jsFormObject],\r\n                name: config.name,\r\n                checked: config.checked,\r\n                allowDrop: config.allowDrop,\r\n                rootId: config.rootId,\r\n                expanded: config.expanded,\r\n                categoryId: config.categoryId,\r\n                treeJson: config.treeJson\r\n            },\r\n            data = {},\r\n            parameters = {},\r\n            root = {},\r\n            key = '';\r\n\r\n        /**\r\n         * Fix ext compatibility with prototype 1.6\r\n         */\r\n        Ext.lib.Event.getTarget = function (e) {\r\n            var ee = e.browserEvent || e;\r\n\r\n            return ee.target ? Event.element(ee) : null;\r\n        };\r\n\r\n        /**\r\n         * @param {Object} el\r\n         * @param {Object} nodeConfig\r\n         */\r\n        Ext.tree.TreePanel.Enhanced = function (el, nodeConfig) {\r\n            Ext.tree.TreePanel.Enhanced.superclass.constructor.call(this, el, nodeConfig);\r\n        };\r\n\r\n        Ext.extend(Ext.tree.TreePanel.Enhanced, Ext.tree.TreePanel, {\r\n            /**\r\n             * @param {Object} treeConfig\r\n             * @param {Boolean} firstLoad\r\n             */\r\n            loadTree: function (treeConfig, firstLoad) {\r\n                parameters = treeConfig.parameters,\r\n                    data = treeConfig.data,\r\n                    root = new Ext.tree.TreeNode(parameters);\r\n\r\n                if (typeof parameters.rootVisible !== 'undefined') {\r\n                    this.rootVisible = parameters.rootVisible * 1;\r\n                }\r\n\r\n                this.nodeHash = {};\r\n                this.setRootNode(root);\r\n\r\n                if (firstLoad) {\r\n                    this.addListener('click', this.categoryClick.createDelegate(this));\r\n                }\r\n\r\n                this.loader.buildCategoryTree(root, data);\r\n                this.el.dom.innerHTML = '';\r\n                // render the tree\r\n                this.render();\r\n            },\r\n\r\n            /**\r\n             * @param {Object} node\r\n             */\r\n            categoryClick: function (node) {\r\n                node.getUI().check(!node.getUI().checked());\r\n            }\r\n        });\r\n\r\n        jQuery(function () {\r\n            var categoryLoader = new Ext.tree.TreeLoader({\r\n                dataUrl: config.dataUrl\r\n            });\r\n\r\n            /**\r\n             * @param {Object} response\r\n             * @param {Object} parent\r\n             * @param {Function} callback\r\n             */\r\n            categoryLoader.processResponse = function (response, parent, callback) {\r\n                config = JSON.parse(response.responseText);\r\n\r\n                this.buildCategoryTree(parent, config);\r\n\r\n                if (typeof callback === 'function') {\r\n                    callback(this, parent);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * @param {Object} nodeConfig\r\n             * @returns {Object}\r\n             */\r\n            categoryLoader.createNode = function (nodeConfig) {\r\n                var node;\r\n\r\n                nodeConfig.uiProvider = Ext.tree.CheckboxNodeUI;\r\n\r\n                if (nodeConfig.children && !nodeConfig.children.length) {\r\n                    delete nodeConfig.children;\r\n                    node = new Ext.tree.AsyncTreeNode(nodeConfig);\r\n                } else {\r\n                    node = new Ext.tree.TreeNode(nodeConfig);\r\n                }\r\n\r\n                return node;\r\n            };\r\n\r\n            /**\r\n             * @param {Object} parent\r\n             * @param {Object} nodeConfig\r\n             * @param {Integer} i\r\n             */\r\n            categoryLoader.processCategoryTree = function (parent, nodeConfig, i) {\r\n                var node,\r\n                    _node = {};\r\n\r\n                nodeConfig[i].uiProvider = Ext.tree.CheckboxNodeUI;\r\n\r\n                _node = Object.clone(nodeConfig[i]);\r\n\r\n                if (_node.children && !_node.children.length) {\r\n                    delete _node.children;\r\n                    node = new Ext.tree.AsyncTreeNode(_node);\r\n                } else {\r\n                    node = new Ext.tree.TreeNode(nodeConfig[i]);\r\n                }\r\n                parent.appendChild(node);\r\n                node.loader = node.getOwnerTree().loader;\r\n\r\n                if (_node.children) {\r\n                    categoryLoader.buildCategoryTree(node, _node.children);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * @param {Object} parent\r\n             * @param {Object} nodeConfig\r\n             * @returns {void}\r\n             */\r\n            categoryLoader.buildCategoryTree = function (parent, nodeConfig) {\r\n                var i = 0;\r\n\r\n                if (!nodeConfig) {\r\n                    return null;\r\n                }\r\n\r\n                if (parent && nodeConfig && nodeConfig.length) {\r\n                    for (i; i < nodeConfig.length; i++) {\r\n                        categoryLoader.processCategoryTree(parent, nodeConfig, i);\r\n                    }\r\n                }\r\n            };\r\n\r\n            /**\r\n             *\r\n             * @param {Object} hash\r\n             * @param {Object} node\r\n             * @returns {Object}\r\n             */\r\n            categoryLoader.buildHashChildren = function (hash, node) {\r\n                var i = 0,\r\n                    len;\r\n\r\n                if (node.childNodes.length > 0 || node.loaded === false && node.loading === false) {\r\n                    hash.children = [];\r\n\r\n                    for (i, len = node.childNodes.length; i < len; i++) {\r\n                        hash.children = hash.children ? hash.children : [];\r\n                        hash.children.push(this.buildHash(node.childNodes[i]));\r\n                    }\r\n                }\r\n\r\n                return hash;\r\n            };\r\n\r\n            /**\r\n             * @param {Object} node\r\n             * @returns {Object}\r\n             */\r\n            categoryLoader.buildHash = function (node) {\r\n                var hash = {};\r\n\r\n                hash = this.toArray(node.attributes);\r\n\r\n                return categoryLoader.buildHashChildren(hash, node);\r\n            };\r\n\r\n            /**\r\n             * @param {Object} attributes\r\n             * @returns {Object}\r\n             */\r\n            categoryLoader.toArray = function (attributes) {\r\n                data = {};\r\n\r\n                for (key in attributes) {\r\n\r\n                    if (attributes[key]) {\r\n                        data[key] = attributes[key];\r\n                    }\r\n                }\r\n\r\n                return data;\r\n            };\r\n\r\n            categoryLoader.on('beforeload', function (treeLoader, node) {\r\n                treeLoader.baseParams.id = node.attributes.id;\r\n                treeLoader.baseParams.selected = options.jsFormObject.updateElement.value;\r\n            });\r\n\r\n            categoryLoader.on('load', function () {\r\n                varienWindowOnload();\r\n            });\r\n\r\n            tree = new Ext.tree.TreePanel.Enhanced(options.divId, {\r\n                animate: false,\r\n                loader: categoryLoader,\r\n                enableDD: false,\r\n                containerScroll: true,\r\n                selModel: new Ext.tree.CheckNodeMultiSelectionModel(),\r\n                rootVisible: options.rootVisible,\r\n                useAjax: options.useAjax,\r\n                currentNodeId: options.currentNodeId,\r\n                addNodeTo: false,\r\n                rootUIProvider: Ext.tree.CheckboxNodeUI\r\n            });\r\n\r\n            tree.on('check', function (node) {\r\n                options.jsFormObject.updateElement.value = this.getChecked().join(', ');\r\n                varienElementMethods.setHasChanges(node.getUI().checkbox);\r\n            }, tree);\r\n\r\n            // set the root node\r\n            //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            parameters = {\r\n                text: options.name,\r\n                draggable: false,\r\n                checked: options.checked,\r\n                uiProvider: Ext.tree.CheckboxNodeUI,\r\n                allowDrop: options.allowDrop,\r\n                id: options.rootId,\r\n                expanded: options.expanded,\r\n                category_id: options.categoryId\r\n            };\r\n            //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n\r\n            tree.loadTree({\r\n                parameters: parameters, data: options.treeJson\r\n            }, true);\r\n        });\r\n    };\r\n});\r\n","Magento_Catalog/js/category-tree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mageUtils',\r\n    'jquery/ui',\r\n    'jquery/jstree/jquery.jstree'\r\n], function ($, utils) {\r\n    'use strict';\r\n\r\n    $.widget('mage.categoryTree', {\r\n        options: {\r\n            url: '',\r\n            data: [],\r\n            tree: {\r\n                plugins: ['themes', 'json_data', 'ui', 'hotkeys'],\r\n                themes: {\r\n                    theme: 'default',\r\n                    dots: false,\r\n                    icons: true\r\n                }\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var options = this.options,\r\n                treeOptions = $.extend(\r\n                    true,\r\n                    {},\r\n                    options.tree,\r\n                    {\r\n                        'json_data': {\r\n                            ajax: {\r\n                                url: options.url,\r\n                                type: 'POST',\r\n                                success: $.proxy(function (nodes) {\r\n                                    return this._convertDataNodes(nodes);\r\n                                }, this),\r\n\r\n                                /**\r\n                                 * @param {HTMLElement} node\r\n                                 * @return {Object}\r\n                                 */\r\n                                data: function (node) {\r\n                                    return {\r\n                                        id: $(node).data('id'),\r\n                                        'form_key': window.FORM_KEY\r\n                                    };\r\n                                }\r\n                            },\r\n                            data: this._convertData(options.data).children,\r\n                            'progressive_render': true\r\n                        }\r\n                    }\r\n                );\r\n\r\n            this.element.jstree(treeOptions);\r\n            this.element.on('select_node.jstree', $.proxy(this._selectNode, this));\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _selectNode: function (event, data) {\r\n            var node = data.rslt.obj.data();\r\n\r\n            if (!node.disabled) {\r\n                window.location = window.location + '/' + node.id;\r\n            } else {\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Array} nodes\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _convertDataNodes: function (nodes) {\r\n            var nodesData = [];\r\n\r\n            nodes.forEach(function (node) {\r\n                nodesData.push(this._convertData(node));\r\n            }, this);\r\n\r\n            return nodesData;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} node\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _convertData: function (node) {\r\n            var self = this,\r\n                result;\r\n\r\n            if (!node) {\r\n                return result;\r\n            }\r\n            result = {\r\n                data: {\r\n                    title: utils.unescape(node.name) + ' (' + node['product_count'] + ')'\r\n                },\r\n                attr: {\r\n                    'class': node.cls + (!!node.disabled ? ' disabled' : '') //eslint-disable-line no-extra-boolean-cast\r\n                },\r\n                metadata: {\r\n                    id: node.id,\r\n                    disabled: node.disabled\r\n                }\r\n            };\r\n\r\n            if (node['children_count'] && !node.expanded) {\r\n                result.state = 'closed';\r\n            } else {\r\n                result.state = 'open';\r\n            }\r\n\r\n            if (node.children) {\r\n                result.children = [];\r\n                $.each(node.children, function () {\r\n                    result.children.push(self._convertData(this));\r\n                });\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return $.mage.categoryTree;\r\n});\r\n","Magento_Catalog/js/custom-options-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/element/ui-select'\r\n], function ($, _, registry, UiSelect) {\r\n    'use strict';\r\n\r\n    return UiSelect.extend({\r\n        defaults: {\r\n            previousGroup: null,\r\n            groupsConfig: {},\r\n            valuesMap: {},\r\n            indexesMap: {},\r\n            filterPlaceholder: 'ns = ${ $.ns }, parentScope = ${ $.parentScope }'\r\n        },\r\n\r\n        /**\r\n         * Initialize component.\r\n         * @returns {Element}\r\n         */\r\n        initialize: function () {\r\n            return this\r\n                ._super()\r\n                .initMapping()\r\n                .updateComponents(this.initialValue, true);\r\n        },\r\n\r\n        /**\r\n         * Create additional mappings.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        initMapping: function () {\r\n            _.each(this.groupsConfig, function (groupData, group) {\r\n                _.each(groupData.values, function (value) {\r\n                    this.valuesMap[value] = group;\r\n                }, this);\r\n\r\n                _.each(groupData.indexes, function (index) {\r\n                    if (!this.indexesMap[index]) {\r\n                        this.indexesMap[index] = [];\r\n                    }\r\n\r\n                    this.indexesMap[index].push(group);\r\n                }, this);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Callback that fires when 'value' property is updated.\r\n         *\r\n         * @param {String} currentValue\r\n         * @returns {*}\r\n         */\r\n        onUpdate: function (currentValue) {\r\n            this.updateComponents(currentValue);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Show, hide or clear components based on the current type value.\r\n         *\r\n         * @param {String} currentValue\r\n         * @param {Boolean} isInitialization\r\n         * @returns {Element}\r\n         */\r\n        updateComponents: function (currentValue, isInitialization) {\r\n            var currentGroup = this.valuesMap[currentValue];\r\n\r\n            if (currentGroup !== this.previousGroup) {\r\n                _.each(this.indexesMap, function (groups, index) {\r\n                    var template = this.filterPlaceholder + ', index = ' + index,\r\n                        visible = groups.indexOf(currentGroup) !== -1,\r\n                        component;\r\n\r\n                    switch (index) {\r\n                        case 'container_type_static':\r\n                        case 'values':\r\n                            template = 'ns=' + this.ns +\r\n                                ', dataScope=' + this.parentScope +\r\n                                ', index=' + index;\r\n                            break;\r\n                    }\r\n\r\n                    /*eslint-disable max-depth */\r\n                    if (isInitialization) {\r\n                        registry.async(template)(\r\n                            function (currentComponent) {\r\n                                currentComponent.visible(visible);\r\n                            }\r\n                        );\r\n                    } else {\r\n                        component = registry.get(template);\r\n\r\n                        if (component) {\r\n                            component.visible(visible);\r\n                        }\r\n                    }\r\n                }, this);\r\n\r\n                this.previousGroup = currentGroup;\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/custom-options.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'useDefault',\r\n    'collapsable',\r\n    'mage/translate',\r\n    'mage/backend/validation',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.customOptions', {\r\n        options: {\r\n            selectionItemCount: {}\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this.baseTmpl = mageTemplate('#custom-option-base-template');\r\n            this.rowTmpl = mageTemplate('#custom-option-select-type-row-template');\r\n\r\n            this._initOptionBoxes();\r\n            this._initSortableSelections();\r\n            this._bindCheckboxHandlers();\r\n            this._bindReadOnlyMode();\r\n            this._addValidation();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _addValidation: function () {\r\n            $.validator.addMethod(\r\n                'required-option-select', function (value) {\r\n                    return value !== '';\r\n                }, $.mage.__('Select type of option.'));\r\n\r\n            $.validator.addMethod(\r\n                'required-option-select-type-rows', function (value, element) {\r\n                    var optionContainerElm = element.up('div[id*=_type_]'),\r\n                        selectTypesFlag = false,\r\n                        selectTypeElements = $('#' + optionContainerElm.id + ' .select-type-title');\r\n\r\n                    selectTypeElements.each(function () {\r\n                        if (!$(this).closest('tr').hasClass('ignore-validate')) {\r\n                            selectTypesFlag = true;\r\n                        }\r\n                    });\r\n\r\n                    return selectTypesFlag;\r\n                }, $.mage.__('Please add rows to option.'));\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initOptionBoxes: function () {\r\n            var syncOptionTitle;\r\n\r\n            if (!this.options.isReadonly) {\r\n                this.element.sortable({\r\n                    axis: 'y',\r\n                    handle: '[data-role=draggable-handle]',\r\n                    items: '#product_options_container_top > div',\r\n                    update: this._updateOptionBoxPositions,\r\n                    tolerance: 'pointer'\r\n                });\r\n            }\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            syncOptionTitle = function (event) {\r\n                var currentValue = $(event.target).val(),\r\n                    optionBoxTitle = $(\r\n                        '.admin__collapsible-title > span',\r\n                        $(event.target).closest('.fieldset-wrapper')\r\n                    ),\r\n                    newOptionTitle = $.mage.__('New Option');\r\n\r\n                optionBoxTitle.text(currentValue === '' ? newOptionTitle : currentValue);\r\n            };\r\n            this._on({\r\n                /**\r\n                 * Reset field value to Default\r\n                 */\r\n                'click .use-default-label': function (event) {\r\n                    $(event.target).closest('label').find('input').prop('checked', true).trigger('change');\r\n                },\r\n\r\n                /**\r\n                 * Remove custom option or option row for 'select' type of custom option\r\n                 */\r\n                'click button[id^=product_option_][id$=_delete]': function (event) {\r\n                    var element = $(event.target).closest('#product_options_container_top > div.fieldset-wrapper,tr');\r\n\r\n                    if (element.length) {\r\n                        $('#product_' + element.attr('id').replace('product_', '') + '_is_delete').val(1);\r\n                        element.addClass('ignore-validate').hide();\r\n                        this.refreshSortableElements();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Minimize custom option block\r\n                 */\r\n                'click #product_options_container_top [data-target$=-content]': function () {\r\n                    if (this.options.isReadonly) {\r\n                        return false;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Add new custom option\r\n                 */\r\n                'click #add_new_defined_option': function (event) {\r\n                    this.addOption(event);\r\n                },\r\n\r\n                /**\r\n                 * Add new option row for 'select' type of custom option\r\n                 */\r\n                'click button[id^=product_option_][id$=_add_select_row]': function (event) {\r\n                    this.addSelection(event);\r\n                },\r\n\r\n                /**\r\n                 * Import custom options from products\r\n                 */\r\n                'click #import_new_defined_option': function () {\r\n                    var importContainer = $('#import-container'),\r\n                        widget = this;\r\n\r\n                    importContainer.modal({\r\n                        title: $.mage.__('Select Product'),\r\n                        type: 'slide',\r\n\r\n                        /** @inheritdoc */\r\n                        opened: function () {\r\n                            $(document).off().on('click', '#productGrid_massaction-form button', function () {\r\n                                $('.import-custom-options-apply-button').trigger('click', 'massActionTrigger');\r\n                            });\r\n                        },\r\n                        buttons: [{\r\n                            text: $.mage.__('Import'),\r\n                            attr: {\r\n                                id: 'import-custom-options-apply-button'\r\n                            },\r\n                            'class': 'action-primary action-import import-custom-options-apply-button',\r\n\r\n                            /** @inheritdoc */\r\n                            click: function (event, massActionTrigger) {\r\n                                var request = [];\r\n\r\n                                $(this.element).find('input[name=product]:checked').map(function () {\r\n                                    request.push(this.value);\r\n                                });\r\n\r\n                                if (request.length === 0) {\r\n                                    if (!massActionTrigger) {\r\n                                        alert({\r\n                                            content: $.mage.__('An item needs to be selected. Select and try again.')\r\n                                        });\r\n                                    }\r\n\r\n                                    return;\r\n                                }\r\n\r\n                                $.post(widget.options.customOptionsUrl, {\r\n                                    'products[]': request,\r\n                                    'form_key': widget.options.formKey\r\n                                }, function ($data) {\r\n                                    $.parseJSON($data).each(function (el) {\r\n                                        var i;\r\n\r\n                                        el.id = widget.getFreeOptionId(el.id);\r\n                                        el['option_id'] = el.id;\r\n\r\n                                        if (typeof el.optionValues !== 'undefined') {\r\n                                            for (i = 0; i < el.optionValues.length; i++) {\r\n                                                el.optionValues[i]['option_id'] = el.id;\r\n                                            }\r\n                                        }\r\n                                        //Adding option\r\n                                        widget.addOption(el);\r\n                                        //Will save new option on server side\r\n                                        $('#product_option_' + el.id + '_option_id').val(0);\r\n                                        $('#option_' + el.id + ' input[name$=\"option_type_id]\"]').val(-1);\r\n                                    });\r\n                                    importContainer.modal('closeModal');\r\n                                });\r\n                            }\r\n                        }]\r\n                    });\r\n                    importContainer.load(\r\n                        this.options.productGridUrl,\r\n                        {\r\n                            'form_key': this.options.formKey,\r\n                            'current_product_id': this.options.currentProductId\r\n                        },\r\n                        function () {\r\n                            importContainer.modal('openModal');\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * Change custom option type\r\n                 */\r\n                'change select[id^=product_option_][id$=_type]': function (event, data) {\r\n                    var widget = this,\r\n                        currentElement = $(event.target),\r\n                        parentId = '#' + currentElement.closest('.fieldset-alt').attr('id'),\r\n                        group = currentElement.find('[value=\"' + currentElement.val() + '\"]')\r\n                            .closest('optgroup').attr('data-optgroup-name'),\r\n                        previousGroup = $(parentId + '_previous_group').val(),\r\n                        previousBlock = $(parentId + '_type_' + previousGroup),\r\n                        tmpl, disabledBlock, priceType;\r\n\r\n                    data = data || {};\r\n\r\n                    if (typeof group !== 'undefined') {\r\n                        group = group.toLowerCase();\r\n                    }\r\n\r\n                    if (previousGroup !== group) {\r\n                        if (previousBlock.length) {\r\n                            previousBlock.addClass('ignore-validate').hide();\r\n                        }\r\n                        $(parentId + '_previous_group').val(group);\r\n\r\n                        if (typeof group === 'undefined') {\r\n                            return;\r\n                        }\r\n                        disabledBlock = $(parentId).find(parentId + '_type_' + group);\r\n\r\n                        if (disabledBlock.length) {\r\n                            disabledBlock.removeClass('ignore-validate').show();\r\n                        } else {\r\n                            if ($.isEmptyObject(data)) { //eslint-disable-line max-depth\r\n                                data['option_id'] = $(parentId + '_id').val();\r\n                                data.price = data.sku = '';\r\n                            }\r\n                            data.group = group;\r\n\r\n                            tmpl = widget.element.find('#custom-option-' + group + '-type-template').html();\r\n                            tmpl = mageTemplate(tmpl, {\r\n                                data: data\r\n                            });\r\n\r\n                            $(tmpl).insertAfter($(parentId));\r\n\r\n                            if (data['price_type']) { //eslint-disable-line max-depth\r\n                                priceType = $('#' + widget.options.fieldId + '_' + data['option_id'] + '_price_type');\r\n                                priceType.val(data['price_type']).attr('data-store-label', data['price_type']);\r\n                            }\r\n                            this._bindUseDefault(widget.options.fieldId + '_' + data['option_id'], data);\r\n                            //Add selections\r\n\r\n                            if (data.optionValues) { //eslint-disable-line max-depth\r\n                                data.optionValues.each(function (value) {\r\n                                    widget.addSelection(value);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                //Sync title\r\n                'change .field-option-title > .control > input[id$=\"_title\"]': syncOptionTitle,\r\n                'keyup .field-option-title > .control > input[id$=\"_title\"]': syncOptionTitle,\r\n                'paste .field-option-title > .control > input[id$=\"_title\"]': syncOptionTitle\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initSortableSelections: function () {\r\n            if (!this.options.isReadonly) {\r\n                this.element.find('[id^=product_option_][id$=_type_select] tbody').sortable({\r\n                    axis: 'y',\r\n                    handle: '[data-role=draggable-handle]',\r\n\r\n                    /** @inheritdoc */\r\n                    helper: function (event, ui) {\r\n                        ui.children().each(function () {\r\n                            $(this).width($(this).width());\r\n                        });\r\n\r\n                        return ui;\r\n                    },\r\n                    update: this._updateSelectionsPositions,\r\n                    tolerance: 'pointer'\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sync sort order checkbox with hidden dropdown\r\n         */\r\n        _bindCheckboxHandlers: function () {\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'change [id^=product_option_][id$=_required]': function (event) {\r\n                    var $this = $(event.target);\r\n\r\n                    $this.closest('#product_options_container_top > div')\r\n                        .find('[name$=\"[is_require]\"]').val($this.is(':checked') ? 1 : 0);\r\n                }\r\n            });\r\n            this.element.find('[id^=product_option_][id$=_required]').each(function () {\r\n                $(this).prop('checked', $(this).closest('#product_options_container_top > div')\r\n                        .find('[name$=\"[is_require]\"]').val() > 0);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Update Custom option position\r\n         */\r\n        _updateOptionBoxPositions: function () {\r\n            $(this).find('div[id^=option_]:not(.ignore-validate) .fieldset-alt > [name$=\"[sort_order]\"]').each(\r\n                function (index) {\r\n                    $(this).val(index);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Update selections positions for 'select' type of custom option\r\n         */\r\n        _updateSelectionsPositions: function () {\r\n            $(this).find('tr:not(.ignore-validate) [name$=\"[sort_order]\"]').each(function (index) {\r\n                $(this).val(index);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Disable input data if \"Read Only\"\r\n         */\r\n        _bindReadOnlyMode: function () {\r\n            if (this.options.isReadonly) {\r\n                $('div.product-custom-options').find('button,input,select,textarea').each(function () {\r\n                    $(this).prop('disabled', true);\r\n\r\n                    if ($(this).is('button')) {\r\n                        $(this).addClass('disabled');\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {String} id\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _bindUseDefault: function (id, data) {\r\n            var title = $('#' + id + '_title'),\r\n                price = $('#' + id + '_price'),\r\n                priceType = $('#' + id + '_price_type');\r\n\r\n            //enable 'use default' link for title\r\n            if (data.checkboxScopeTitle) {\r\n                title.useDefault({\r\n                    field: '.field',\r\n                    useDefault: 'label[for$=_title]',\r\n                    checkbox: 'input[id$=_title_use_default]',\r\n                    label: 'span'\r\n                });\r\n            }\r\n            //enable 'use default' link for price and price_type\r\n            if (data.checkboxScopePrice) {\r\n                price.useDefault({\r\n                    field: '.field',\r\n                    useDefault: 'label[for$=_price]',\r\n                    checkbox: 'input[id$=_price_use_default]',\r\n                    label: 'span'\r\n                });\r\n                //not work set default value for second field\r\n                priceType.useDefault({\r\n                    field: '.field',\r\n                    useDefault: 'label[for$=_price]',\r\n                    checkbox: 'input[id$=_price_use_default]',\r\n                    label: 'span'\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add selection value for 'select' type of custom option\r\n         */\r\n        addSelection: function (event) {\r\n            var data = {},\r\n                element = event.target || event.srcElement || event.currentTarget,\r\n                rowTmpl, priceType;\r\n\r\n            if (typeof element !== 'undefined') {\r\n                data.id = $(element).closest('#product_options_container_top > div')\r\n                    .find('[name^=\"product[options]\"][name$=\"[id]\"]').val();\r\n                data['option_type_id'] = -1;\r\n\r\n                if (!this.options.selectionItemCount[data.id]) {\r\n                    this.options.selectionItemCount[data.id] = 1;\r\n                }\r\n\r\n                data['select_id'] = this.options.selectionItemCount[data.id];\r\n                data.price = data.sku = '';\r\n            } else {\r\n                data = event;\r\n                data.id = data['option_id'];\r\n                data['select_id'] = data['option_type_id'];\r\n                this.options.selectionItemCount[data.id] = data['item_count'];\r\n            }\r\n\r\n            rowTmpl = this.rowTmpl({\r\n                data: data\r\n            });\r\n\r\n            $(rowTmpl).appendTo($('#select_option_type_row_' + data.id));\r\n\r\n            //set selected price_type value if set\r\n            if (data['price_type']) {\r\n                priceType = $('#' + this.options.fieldId + '_' + data.id + '_select_' + data['select_id'] +\r\n                    '_price_type');\r\n                priceType.val(data['price_type']).attr('data-store-label', data['price_type']);\r\n            }\r\n\r\n            this._bindUseDefault(this.options.fieldId + '_' + data.id + '_select_' + data['select_id'], data);\r\n            this.refreshSortableElements();\r\n            this.options.selectionItemCount[data.id] = parseInt(this.options.selectionItemCount[data.id], 10) + 1;\r\n\r\n            $('#' + this.options.fieldId + '_' + data.id + '_select_' + data['select_id'] + '_title').focus();\r\n        },\r\n\r\n        /**\r\n         * Add custom option\r\n         */\r\n        addOption: function (event) {\r\n            var data = {},\r\n                element = event.target || event.srcElement || event.currentTarget,\r\n                baseTmpl;\r\n\r\n            if (typeof element !== 'undefined') {\r\n                data.id = this.options.itemCount;\r\n                data.type = '';\r\n                data['option_id'] = 0;\r\n            } else {\r\n                data = event;\r\n                this.options.itemCount = data['item_count'];\r\n            }\r\n\r\n            baseTmpl = this.baseTmpl({\r\n                data: data\r\n            });\r\n\r\n            $(baseTmpl)\r\n                .appendTo(this.element.find('#product_options_container_top'))\r\n                .find('.collapse').collapsable();\r\n\r\n            //set selected type value if set\r\n            if (data.type) {\r\n                $('#' + this.options.fieldId + '_' + data.id + '_type').val(data.type).trigger('change', data);\r\n            }\r\n\r\n            //set selected is_require value if set\r\n            if (data['is_require']) {\r\n                $('#' + this.options.fieldId + '_' + data.id + '_is_require').val(data['is_require']).trigger('change');\r\n            }\r\n\r\n            this.refreshSortableElements();\r\n            this._bindCheckboxHandlers();\r\n            this._bindReadOnlyMode();\r\n            this.options.itemCount++;\r\n            $('#' + this.options.fieldId + '_' + data.id + '_title').trigger('change');\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        refreshSortableElements: function () {\r\n            if (!this.options.isReadonly) {\r\n                this.element.sortable('refresh');\r\n                this._updateOptionBoxPositions.apply(this.element);\r\n                this._updateSelectionsPositions.apply(this.element);\r\n                this._initSortableSelections();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {String} id\r\n         * @return {*}\r\n         */\r\n        getFreeOptionId: function (id) {\r\n            return $('#' + this.options.fieldId + '_' + id).length ? this.getFreeOptionId(parseInt(id, 10) + 1) : id;\r\n        }\r\n    });\r\n\r\n});\r\n","Magento_Catalog/js/edit-tree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-undef */\r\n// jscs:disable jsDoc\r\n\r\nrequire([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/modal/alert',\r\n    'loadingPopup',\r\n    'mage/backend/floating-header'\r\n], function (jQuery, confirm) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Delete some category\r\n     * This routine get categoryId explicitly, so even if currently selected tree node is out of sync\r\n     * with this form, we surely delete same category in the tree and at backend.\r\n     *\r\n     * @deprecated\r\n     * @see deleteConfirm\r\n     */\r\n    function categoryDelete(url) {\r\n        confirm({\r\n            content: 'Are you sure you want to delete this category?',\r\n            actions: {\r\n                confirm: function () {\r\n                    location.href = url;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function displayLoadingMask() {\r\n        jQuery('body').loadingPopup();\r\n    }\r\n\r\n    window.categoryDelete = categoryDelete;\r\n    window.displayLoadingMask = displayLoadingMask;\r\n});\r\n","Magento_Catalog/js/new-category-dialog.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\n/*global FORM_KEY*/\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'mage/backend/tree-suggest',\r\n    'mage/backend/validation'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /** Clear parent category. */\r\n    var clearParentCategory = function () {\r\n        $('#new_category_parent').find('option').each(function () {\r\n            $('#new_category_parent-suggest').treeSuggest('removeOption', null, this);\r\n        });\r\n    };\r\n\r\n    $.widget('mage.newCategoryDialog', {\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var widget = this,\r\n                newCategoryForm;\r\n\r\n            $('#new_category_parent').before($('<input>', {\r\n                id: 'new_category_parent-suggest',\r\n                placeholder: $.mage.__('start typing to search category')\r\n            }));\r\n\r\n            $('#new_category_parent-suggest').treeSuggest(this.options.suggestOptions)\r\n                .on('suggestbeforeselect', function (event) {\r\n                    clearParentCategory();\r\n                    $(event.target).treeSuggest('close');\r\n                });\r\n\r\n            $.validator.addMethod('validate-parent-category', function () {\r\n                return $('#new_category_parent').val() || $('#new_category_parent-suggest').val() === '';\r\n            }, $.mage.__('Choose existing category.'));\r\n            newCategoryForm = $('#new_category_form');\r\n            newCategoryForm.mage('validation', {\r\n                /**\r\n                 * @param {jQuery} error\r\n                 * @param {*} element\r\n                 */\r\n                errorPlacement: function (error, element) {\r\n                    error.insertAfter(element.is('#new_category_parent') ?\r\n                        $('#new_category_parent-suggest').closest('.mage-suggest') :\r\n                        element);\r\n                }\r\n            }).on('highlight.validate', function (e) {\r\n                var options = $(this).validation('option');\r\n\r\n                if ($(e.target).is('#new_category_parent')) {\r\n                    options.highlight($('#new_category_parent-suggest').get(0),\r\n                        options.errorClass, options.validClass || '');\r\n                }\r\n            });\r\n            this.element.modal({\r\n                type: 'slide',\r\n                modalClass: 'mage-new-category-dialog form-inline',\r\n                title: $.mage.__('Create Category'),\r\n\r\n                /** @inheritdoc */\r\n                opened: function () {\r\n                    var enteredName = $('#category_ids-suggest').val();\r\n\r\n                    $('#new_category_name').val(enteredName);\r\n\r\n                    if (enteredName === '') {\r\n                        $('#new_category_name').focus();\r\n                    }\r\n                    $('#new_category_messages').html('');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                closed: function () {\r\n                    var validationOptions = newCategoryForm.validation('option');\r\n\r\n                    $('#new_category_name, #new_category_parent-suggest').val('');\r\n                    validationOptions.unhighlight($('#new_category_parent-suggest').get(0),\r\n                        validationOptions.errorClass, validationOptions.validClass || '');\r\n                    newCategoryForm.validation('clearError');\r\n                    $('#category_ids-suggest').focus();\r\n                },\r\n                buttons: [{\r\n                    text: $.mage.__('Create Category'),\r\n                    class: 'action-primary',\r\n\r\n                    /** @inheritdoc */\r\n                    click: function (e) {\r\n                        var thisButton;\r\n\r\n                        if (!newCategoryForm.valid()) {\r\n                            return;\r\n                        }\r\n                        thisButton = $(e.currentTarget);\r\n\r\n                        thisButton.prop('disabled', true);\r\n                        $.ajax({\r\n                            type: 'POST',\r\n                            url: widget.options.saveCategoryUrl,\r\n                            data: {\r\n                                name: $('#new_category_name').val(),\r\n                                parent: $('#new_category_parent').val(),\r\n                                'is_active': 1,\r\n                                'include_in_menu': 1,\r\n                                'use_config': ['available_sort_by', 'default_sort_by'],\r\n                                'form_key': FORM_KEY,\r\n                                'return_session_messages_only': 1\r\n                            },\r\n                            dataType: 'json',\r\n                            context: $('body')\r\n                        }).success(function (data) {\r\n                            var $suggest;\r\n\r\n                            if (!data.error) {\r\n                                $suggest = $('#category_ids-suggest');\r\n\r\n                                $suggest.trigger('selectItem', {\r\n                                    id: data.category['entity_id'],\r\n                                    label: data.category.name\r\n                                });\r\n                                $('#new_category_name, #new_category_parent-suggest').val('');\r\n                                $suggest.val('');\r\n                                clearParentCategory();\r\n                                $(widget.element).modal('closeModal');\r\n                            } else {\r\n                                $('#new_category_messages').html(data.messages);\r\n                            }\r\n                        }).complete(\r\n                            function () {\r\n                                thisButton.prop('disabled', false);\r\n                            }\r\n                        );\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.newCategoryDialog;\r\n});\r\n","Magento_Catalog/js/options.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-undef */\r\n// jscs:disable jsDoc\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'prototype',\r\n    'form',\r\n    'validation',\r\n    'mage/translate'\r\n], function (jQuery, mageTemplate, rg) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var optionPanel = jQuery('#manage-options-panel'),\r\n            editForm = jQuery('#edit_form'),\r\n            attributeOption = {\r\n                table: $('attribute-options-table'),\r\n                itemCount: 0,\r\n                totalItems: 0,\r\n                rendered: 0,\r\n                template: mageTemplate('#row-template'),\r\n                newOptionClass: 'new-option',\r\n                isReadOnly: config.isReadOnly,\r\n                add: function (data, render) {\r\n                    var isNewOption = false,\r\n                        element;\r\n\r\n                    if (typeof data.id == 'undefined') {\r\n                        data = {\r\n                            'id': 'option_' + this.itemCount,\r\n                            'sort_order': this.itemCount + 1,\r\n                            'rowClasses': this.newOptionClass\r\n                        };\r\n                        isNewOption = true;\r\n                    }\r\n\r\n                    if (!data.intype) {\r\n                        data.intype = this.getOptionInputType();\r\n                    }\r\n\r\n                    element = this.template({\r\n                        data: data\r\n                    });\r\n\r\n                    if (isNewOption && !this.isReadOnly) {\r\n                        this.enableNewOptionDeleteButton(data.id);\r\n                    }\r\n                    this.itemCount++;\r\n                    this.totalItems++;\r\n                    this.elements += element;\r\n\r\n                    if (render) {\r\n                        this.render();\r\n                        this.updateItemsCountField();\r\n                    }\r\n                },\r\n                remove: function (event) {\r\n                    var element = $(Event.findElement(event, 'tr')),\r\n                        elementFlags; // !!! Button already have table parent in safari\r\n\r\n                    // Safari workaround\r\n                    element.ancestors().each(function (parentItem) {\r\n                        if (parentItem.hasClassName('option-row')) {\r\n                            element = parentItem;\r\n                            throw $break;\r\n                        } else if (parentItem.hasClassName('box')) {\r\n                            throw $break;\r\n                        }\r\n                    });\r\n\r\n                    if (element) {\r\n                        elementFlags = element.getElementsByClassName('delete-flag');\r\n\r\n                        if (elementFlags[0]) {\r\n                            elementFlags[0].value = 1;\r\n                        }\r\n\r\n                        element.addClassName('no-display');\r\n                        element.addClassName('template');\r\n                        element.hide();\r\n                        this.totalItems--;\r\n                        this.updateItemsCountField();\r\n                    }\r\n\r\n                    if (element.hasClassName(this.newOptionClass)) {\r\n                        element.remove();\r\n                    }\r\n                },\r\n                updateItemsCountField: function () {\r\n                    $('option-count-check').value = this.totalItems > 0 ? '1' : '';\r\n                },\r\n                enableNewOptionDeleteButton: function (id) {\r\n                    $$('#delete_button_container_' + id + ' button').each(function (button) {\r\n                        button.enable();\r\n                        button.removeClassName('disabled');\r\n                    });\r\n                },\r\n                bindRemoveButtons: function () {\r\n                    jQuery('#swatch-visual-options-panel').on('click', '.delete-option', this.remove.bind(this));\r\n                },\r\n                render: function () {\r\n                    Element.insert($$('[data-role=options-container]')[0], this.elements);\r\n                    this.elements = '';\r\n                },\r\n                renderWithDelay: function (data, from, step, delay) {\r\n                    var arrayLength = data.length,\r\n                        len;\r\n\r\n                    for (len = from + step; from < len && from < arrayLength; from++) {\r\n                        this.add(data[from]);\r\n                    }\r\n                    this.render();\r\n\r\n                    if (from === arrayLength) {\r\n                        this.updateItemsCountField();\r\n                        this.rendered = 1;\r\n                        jQuery('body').trigger('processStop');\r\n\r\n                        return true;\r\n                    }\r\n                    setTimeout(this.renderWithDelay.bind(this, data, from, step, delay), delay);\r\n                },\r\n                ignoreValidate: function () {\r\n                    var ignore = '.ignore-validate input, ' +\r\n                        '.ignore-validate select, ' +\r\n                        '.ignore-validate textarea';\r\n\r\n                    jQuery('#edit_form').data('validator').settings.forceIgnore = ignore;\r\n                },\r\n                getOptionInputType: function () {\r\n                    var optionDefaultInputType = 'radio';\r\n\r\n                    if ($('frontend_input') && $('frontend_input').value === 'multiselect') {\r\n                        optionDefaultInputType = 'checkbox';\r\n                    }\r\n\r\n                    return optionDefaultInputType;\r\n                }\r\n            },\r\n            tableBody = jQuery(),\r\n            activePanelClass = 'selected-type-options';\r\n\r\n        if ($('add_new_option_button')) {\r\n            Event.observe('add_new_option_button', 'click', attributeOption.add.bind(attributeOption, {}, true));\r\n        }\r\n        $('manage-options-panel').on('click', '.delete-option', function (event) {\r\n            attributeOption.remove(event);\r\n        });\r\n\r\n        optionPanel.on('render', function () {\r\n            attributeOption.ignoreValidate();\r\n\r\n            if (attributeOption.rendered) {\r\n                return false;\r\n            }\r\n            jQuery('body').trigger('processStart');\r\n            attributeOption.renderWithDelay(config.attributesData, 0, 100, 300);\r\n            attributeOption.bindRemoveButtons();\r\n        });\r\n\r\n        if (config.isSortable) {\r\n            jQuery(function ($) {\r\n                $('[data-role=options-container]').sortable({\r\n                    distance: 8,\r\n                    tolerance: 'pointer',\r\n                    cancel: 'input, button',\r\n                    axis: 'y',\r\n                    update: function () {\r\n                        $('[data-role=options-container] [data-role=order]').each(function (index, element) {\r\n                            $(element).val(index + 1);\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        editForm.on('beforeSubmit', function () {\r\n            var optionContainer = optionPanel.find('table tbody'),\r\n                optionsValues;\r\n\r\n            if (optionPanel.hasClass(activePanelClass)) {\r\n                optionsValues = jQuery.map(\r\n                    optionContainer.find('tr'),\r\n                    function (row) {\r\n                        return jQuery(row).find('input, select, textarea').serialize();\r\n                    }\r\n                );\r\n                jQuery('<input>')\r\n                    .attr({\r\n                        type: 'hidden',\r\n                        name: 'serialized_options'\r\n                    })\r\n                    .val(JSON.stringify(optionsValues))\r\n                    .prependTo(editForm);\r\n            }\r\n            tableBody = optionContainer.detach();\r\n        });\r\n        editForm.on('afterValidate.error highlight.validate', function () {\r\n            if (optionPanel.hasClass(activePanelClass)) {\r\n                optionPanel.find('table').append(tableBody);\r\n                jQuery('input[name=\"serialized_options\"]').remove();\r\n            }\r\n        });\r\n        window.attributeOption = attributeOption;\r\n        window.optionDefaultInputType = attributeOption.getOptionInputType();\r\n\r\n        rg.set('manage-options-panel', attributeOption);\r\n    };\r\n});\r\n","Magento_Catalog/js/price-box.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/js/price-utils',\r\n    'underscore',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget'\r\n], function ($, utils, _, mageTemplate) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n        productId: null,\r\n        priceConfig: null,\r\n        prices: {},\r\n        priceTemplate: '<span class=\"price\"><%- data.formatted %></span>'\r\n    };\r\n\r\n    $.widget('mage.priceBox', {\r\n        options: globalOptions,\r\n\r\n        /**\r\n         * Widget initialisation.\r\n         * Every time when option changed prices also can be changed. So\r\n         * changed options.prices -> changed cached prices -> recalculation -> redraw price box\r\n         */\r\n        _init: function initPriceBox() {\r\n            var box = this.element;\r\n\r\n            box.trigger('updatePrice');\r\n            this.cache.displayPrices = utils.deepClone(this.options.prices);\r\n        },\r\n\r\n        /**\r\n         * Widget creating.\r\n         */\r\n        _create: function createPriceBox() {\r\n            var box = this.element;\r\n\r\n            this.cache = {};\r\n            this._setDefaultsFromPriceConfig();\r\n            this._setDefaultsFromDataSet();\r\n\r\n            box.on('reloadPrice', this.reloadPrice.bind(this));\r\n            box.on('updatePrice', this.onUpdatePrice.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Call on event updatePrice. Proxy to updatePrice method.\r\n         * @param {Event} event\r\n         * @param {Object} prices\r\n         */\r\n        onUpdatePrice: function onUpdatePrice(event, prices) {\r\n            return this.updatePrice(prices);\r\n        },\r\n\r\n        /**\r\n         * Updates price via new (or additional values).\r\n         * It expects object like this:\r\n         * -----\r\n         *   \"option-hash\":\r\n         *      \"price-code\":\r\n         *         \"amount\": 999.99999,\r\n         *         ...\r\n         * -----\r\n         * Empty option-hash object or empty price-code object treats as zero amount.\r\n         * @param {Object} newPrices\r\n         */\r\n        updatePrice: function updatePrice(newPrices) {\r\n            var prices = this.cache.displayPrices,\r\n                additionalPrice = {},\r\n                pricesCode = [],\r\n                priceValue, origin, finalPrice;\r\n\r\n            this.cache.additionalPriceObject = this.cache.additionalPriceObject || {};\r\n\r\n            if (newPrices) {\r\n                $.extend(this.cache.additionalPriceObject, newPrices);\r\n            }\r\n\r\n            if (!_.isEmpty(additionalPrice)) {\r\n                pricesCode = _.keys(additionalPrice);\r\n            } else if (!_.isEmpty(prices)) {\r\n                pricesCode = _.keys(prices);\r\n            }\r\n\r\n            _.each(this.cache.additionalPriceObject, function (additional) {\r\n                if (additional && !_.isEmpty(additional)) {\r\n                    pricesCode = _.keys(additional);\r\n                }\r\n                _.each(pricesCode, function (priceCode) {\r\n                    priceValue = additional[priceCode] || {};\r\n                    priceValue.amount = +priceValue.amount || 0;\r\n                    priceValue.adjustments = priceValue.adjustments || {};\r\n\r\n                    additionalPrice[priceCode] = additionalPrice[priceCode] || {\r\n                            'amount': 0,\r\n                            'adjustments': {}\r\n                        };\r\n                    additionalPrice[priceCode].amount =  0 + (additionalPrice[priceCode].amount || 0) +\r\n                        priceValue.amount;\r\n                    _.each(priceValue.adjustments, function (adValue, adCode) {\r\n                        additionalPrice[priceCode].adjustments[adCode] = 0 +\r\n                            (additionalPrice[priceCode].adjustments[adCode] || 0) + adValue;\r\n                    });\r\n                });\r\n            });\r\n\r\n            if (_.isEmpty(additionalPrice)) {\r\n                this.cache.displayPrices = utils.deepClone(this.options.prices);\r\n            } else {\r\n                _.each(additionalPrice, function (option, priceCode) {\r\n                    origin = this.options.prices[priceCode] || {};\r\n                    finalPrice = prices[priceCode] || {};\r\n                    option.amount = option.amount || 0;\r\n                    origin.amount = origin.amount || 0;\r\n                    origin.adjustments = origin.adjustments || {};\r\n                    finalPrice.adjustments = finalPrice.adjustments || {};\r\n\r\n                    finalPrice.amount = 0 + origin.amount + option.amount;\r\n                    _.each(option.adjustments, function (pa, paCode) {\r\n                        finalPrice.adjustments[paCode] = 0 + (origin.adjustments[paCode] || 0) + pa;\r\n                    });\r\n                }, this);\r\n            }\r\n\r\n            this.element.trigger('reloadPrice');\r\n        },\r\n\r\n        /*eslint-disable no-extra-parens*/\r\n        /**\r\n         * Render price unit block.\r\n         */\r\n        reloadPrice: function reDrawPrices() {\r\n            var priceFormat = (this.options.priceConfig && this.options.priceConfig.priceFormat) || {},\r\n                priceTemplate = mageTemplate(this.options.priceTemplate);\r\n\r\n            _.each(this.cache.displayPrices, function (price, priceCode) {\r\n                price.final = _.reduce(price.adjustments, function (memo, amount) {\r\n                    return memo + amount;\r\n                }, price.amount);\r\n\r\n                price.formatted = utils.formatPrice(price.final, priceFormat);\r\n\r\n                $('[data-price-type=\"' + priceCode + '\"]', this.element).html(priceTemplate({\r\n                    data: price\r\n                }));\r\n            }, this);\r\n        },\r\n\r\n        /*eslint-enable no-extra-parens*/\r\n        /**\r\n         * Overwrites initial (default) prices object.\r\n         * @param {Object} prices\r\n         */\r\n        setDefault: function setDefaultPrices(prices) {\r\n            this.cache.displayPrices = utils.deepClone(prices);\r\n            this.options.prices = utils.deepClone(prices);\r\n        },\r\n\r\n        /**\r\n         * Custom behavior on getting options:\r\n         * now widget able to deep merge of accepted configuration.\r\n         * @param  {Object} options\r\n         * @return {mage.priceBox}\r\n         */\r\n        _setOptions: function setOptions(options) {\r\n            $.extend(true, this.options, options);\r\n\r\n            if ('disabled' in options) {\r\n                this._setOption('disabled', options.disabled);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * setDefaultsFromDataSet\r\n         */\r\n        _setDefaultsFromDataSet: function _setDefaultsFromDataSet() {\r\n            var box = this.element,\r\n                priceHolders = $('[data-price-type]', box),\r\n                prices = this.options.prices;\r\n\r\n            this.options.productId = box.data('productId');\r\n\r\n            if (_.isEmpty(prices)) {\r\n                priceHolders.each(function (index, element) {\r\n                    var type = $(element).data('priceType'),\r\n                        amount = parseFloat($(element).data('priceAmount'));\r\n\r\n                    if (type && !_.isNaN(amount)) {\r\n                        prices[type] = {\r\n                            amount: amount\r\n                        };\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * setDefaultsFromPriceConfig\r\n         */\r\n        _setDefaultsFromPriceConfig: function _setDefaultsFromPriceConfig() {\r\n            var config = this.options.priceConfig;\r\n\r\n            if (config && config.prices) {\r\n                this.options.prices = config.prices;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.priceBox;\r\n});\r\n","Magento_Catalog/js/price-option-date.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'priceUtils',\r\n    'priceOptions',\r\n    'jquery-ui-modules/widget'\r\n], function ($, utils) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n            fromSelector: 'form',\r\n            dropdownsSelector: '[data-role=calendar-dropdown]'\r\n        },\r\n        optionHandler = {};\r\n\r\n    optionHandler.optionHandlers = {};\r\n\r\n    /**\r\n     * Custom handler for Date-with-Dropdowns option type.\r\n     * @param  {jQuery} siblings\r\n     * @return {Function} function that return object { optionHash : optionAdditionalPrice }\r\n     */\r\n    function onCalendarDropdownChange(siblings) {\r\n        return function (element, optionConfig) {\r\n            var changes = {},\r\n                optionId = utils.findOptionId(element),\r\n                overhead = optionConfig[optionId].prices,\r\n                isNeedToUpdate = true,\r\n                optionHash = 'price-option-calendar-' + optionId;\r\n\r\n            siblings.each(function (index, el) {\r\n                isNeedToUpdate = isNeedToUpdate && !!$(el).val();\r\n            });\r\n\r\n            overhead = isNeedToUpdate ? overhead : {};\r\n            changes[optionHash] = overhead;\r\n\r\n            return changes;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns number of days for special month and year\r\n     * @param  {Number} month\r\n     * @param  {Number} year\r\n     * @return {Number}\r\n     */\r\n    function getDaysInMonth(month, year) {\r\n        return new Date(year, month, 0).getDate();\r\n    }\r\n\r\n    /**\r\n     * Adjusts the number of days in the day option element based on which month or year\r\n     * is selected (changed). Adjusts the days to 28, 29, 30, or 31 typically.\r\n     * @param {jQuery} dropdowns\r\n     */\r\n    function onDateChange(dropdowns) {\r\n        var daysNodes,\r\n            curMonth, curYear, expectedDays,\r\n            options, needed,\r\n            month = dropdowns.filter('[data-calendar-role=month]'),\r\n            year = dropdowns.filter('[data-calendar-role=year]');\r\n\r\n        if (month.length && year.length) {\r\n            daysNodes = dropdowns.filter('[data-calendar-role=day]').find('option');\r\n\r\n            curMonth = month.val() || '01';\r\n            curYear = year.val() || '2000';\r\n            expectedDays = getDaysInMonth(curMonth, curYear);\r\n\r\n            if (daysNodes.length - 1 > expectedDays) { // remove unnecessary option nodes\r\n                daysNodes.each(function (i, e) {\r\n                    if (e.value > expectedDays) {\r\n                        $(e).remove();\r\n                    }\r\n                });\r\n            } else if (daysNodes.length - 1 < expectedDays) { // add missing option nodes\r\n                options = [];\r\n                needed = expectedDays - daysNodes.length + 1;\r\n\r\n                while (needed--) { //eslint-disable-line max-depth\r\n                    options.push(\r\n                        '<option value=\"' + (expectedDays - needed) + '\">' + (expectedDays - needed) + '</option>'\r\n                    );\r\n                }\r\n                $(options.join('')).insertAfter(daysNodes.last());\r\n            }\r\n        }\r\n    }\r\n\r\n    $.widget('mage.priceOptionDate', {\r\n        options: globalOptions,\r\n\r\n        /**\r\n         * Function-initializer of priceOptionDate widget\r\n         * @private\r\n         */\r\n        _create: function initOptionDate() {\r\n            var field = this.element,\r\n                form = field.closest(this.options.fromSelector),\r\n                dropdowns = $(this.options.dropdownsSelector, field),\r\n                dateOptionId;\r\n\r\n            if (dropdowns.length) {\r\n                dateOptionId = this.options.dropdownsSelector + dropdowns.attr('name');\r\n\r\n                optionHandler.optionHandlers[dateOptionId] = onCalendarDropdownChange(dropdowns);\r\n\r\n                form.priceOptions(optionHandler);\r\n\r\n                dropdowns.data('role', dateOptionId);\r\n                dropdowns.on('change', onDateChange.bind(this, dropdowns));\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.priceOptionDate;\r\n});\r\n","Magento_Catalog/js/price-option-file.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.priceOptionFile', {\r\n        options: {\r\n            fileName: '',\r\n            fileNamed: '',\r\n            fieldNameAction: '',\r\n            changeFileSelector: '',\r\n            deleteFileSelector: ''\r\n        },\r\n\r\n        /**\r\n         * Creates instance of widget\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.fileDeleteFlag = this.fileChangeFlag = false;\r\n            this.inputField = this.element.find('input[name=' + this.options.fileName + ']')[0];\r\n            this.inputFieldAction = this.element.find('input[name=' + this.options.fieldNameAction + ']')[0];\r\n            this.fileNameSpan = this.element.parent('dd').find('.' + this.options.fileNamed);\r\n\r\n            $(this.options.changeFileSelector).on('click', $.proxy(function () {\r\n                this._toggleFileChange();\r\n            }, this));\r\n            $(this.options.deleteFileSelector).on('click', $.proxy(function () {\r\n                this._toggleFileDelete();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Toggles whether the current file is being changed or not. If the file is being deleted\r\n         * then the option to change the file is disabled.\r\n         * @private\r\n         */\r\n        _toggleFileChange: function () {\r\n            this.element.toggle();\r\n            this.fileChangeFlag = !this.fileChangeFlag;\r\n\r\n            if (!this.fileDeleteFlag) {\r\n                $(this.inputFieldAction).attr('value', this.fileChangeFlag ? 'save_new' : 'save_old');\r\n                this.inputField.disabled = !this.fileChangeFlag;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggles whether the file is to be deleted. When the file is being deleted, the name of\r\n         * the file is decorated with strike-through text and the option to change the file is\r\n         * disabled.\r\n         * @private\r\n         */\r\n        _toggleFileDelete: function () {\r\n            this.fileDeleteFlag = $(this.options.deleteFileSelector + ':checked').val();\r\n            $(this.inputFieldAction).attr('value',\r\n                this.fileDeleteFlag ? '' : this.fileChangeFlag ? 'save_new' : 'save_old');\r\n            this.inputField.disabled = this.fileDeleteFlag || !this.fileChangeFlag;\r\n            this.fileNameSpan.css('text-decoration', this.fileDeleteFlag ? 'line-through' : 'none');\r\n        }\r\n    });\r\n\r\n    return $.mage.priceOptionFile;\r\n});\r\n","Magento_Catalog/js/price-options.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'priceUtils',\r\n    'priceBox',\r\n    'jquery-ui-modules/widget'\r\n], function ($, _, mageTemplate, utils) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n        productId: null,\r\n        priceHolderSelector: '.price-box', //data-role=\"priceBox\"\r\n        optionsSelector: '.product-custom-option',\r\n        optionConfig: {},\r\n        optionHandlers: {},\r\n        optionTemplate: '<%= data.label %>' +\r\n        '<% if (data.finalPrice.value > 0) { %>' +\r\n        ' +<%- data.finalPrice.formatted %>' +\r\n        '<% } else if (data.finalPrice.value < 0) { %>' +\r\n        ' <%- data.finalPrice.formatted %>' +\r\n        '<% } %>',\r\n        controlContainer: 'dd'\r\n    };\r\n\r\n    /**\r\n     * Custom option preprocessor\r\n     * @param  {jQuery} element\r\n     * @param  {Object} optionsConfig - part of config\r\n     * @return {Object}\r\n     */\r\n    function defaultGetOptionValue(element, optionsConfig) {\r\n        var changes = {},\r\n            optionValue = element.val(),\r\n            optionId = utils.findOptionId(element[0]),\r\n            optionName = element.prop('name'),\r\n            optionType = element.prop('type'),\r\n            optionConfig = optionsConfig[optionId],\r\n            optionHash = optionName;\r\n\r\n        switch (optionType) {\r\n            case 'text':\r\n            case 'textarea':\r\n                changes[optionHash] = optionValue ? optionConfig.prices : {};\r\n                break;\r\n\r\n            case 'radio':\r\n                if (element.is(':checked')) {\r\n                    changes[optionHash] = optionConfig[optionValue] && optionConfig[optionValue].prices || {};\r\n                }\r\n                break;\r\n\r\n            case 'select-one':\r\n                changes[optionHash] = optionConfig[optionValue] && optionConfig[optionValue].prices || {};\r\n                break;\r\n\r\n            case 'select-multiple':\r\n                _.each(optionConfig, function (row, optionValueCode) {\r\n                    optionHash = optionName + '##' + optionValueCode;\r\n                    changes[optionHash] = _.contains(optionValue, optionValueCode) ? row.prices : {};\r\n                });\r\n                break;\r\n\r\n            case 'checkbox':\r\n                optionHash = optionName + '##' + optionValue;\r\n                changes[optionHash] = element.is(':checked') ? optionConfig[optionValue].prices : {};\r\n                break;\r\n\r\n            case 'file':\r\n                // Checking for 'disable' property equal to checking DOMNode with id*=\"change-\"\r\n                changes[optionHash] = optionValue || element.prop('disabled') ? optionConfig.prices : {};\r\n                break;\r\n        }\r\n\r\n        return changes;\r\n    }\r\n\r\n    $.widget('mage.priceOptions', {\r\n        options: globalOptions,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function initPriceBundle() {\r\n            $(this.options.optionsSelector, this.element).trigger('change');\r\n        },\r\n\r\n        /**\r\n         * Widget creating method.\r\n         * Triggered once.\r\n         * @private\r\n         */\r\n        _create: function createPriceOptions() {\r\n            var form = this.element,\r\n                options = $(this.options.optionsSelector, form),\r\n                priceBox = $(this.options.priceHolderSelector, $(this.options.optionsSelector).element);\r\n\r\n            if (priceBox.data('magePriceBox') &&\r\n                priceBox.priceBox('option') &&\r\n                priceBox.priceBox('option').priceConfig\r\n            ) {\r\n                if (priceBox.priceBox('option').priceConfig.optionTemplate) {\r\n                    this._setOption('optionTemplate', priceBox.priceBox('option').priceConfig.optionTemplate);\r\n                }\r\n                this._setOption('priceFormat', priceBox.priceBox('option').priceConfig.priceFormat);\r\n            }\r\n\r\n            this._applyOptionNodeFix(options);\r\n\r\n            options.on('change', this._onOptionChanged.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Custom option change-event handler\r\n         * @param {Event} event\r\n         * @private\r\n         */\r\n        _onOptionChanged: function onOptionChanged(event) {\r\n            var changes,\r\n                option = $(event.target),\r\n                handler = this.options.optionHandlers[option.data('role')];\r\n\r\n            option.data('optionContainer', option.closest(this.options.controlContainer));\r\n\r\n            if (handler && handler instanceof Function) {\r\n                changes = handler(option, this.options.optionConfig, this);\r\n            } else {\r\n                changes = defaultGetOptionValue(option, this.options.optionConfig);\r\n            }\r\n            $(this.options.priceHolderSelector).trigger('updatePrice', changes);\r\n        },\r\n\r\n        /**\r\n         * Helper to fix issue with option nodes:\r\n         *  - you can't place any html in option ->\r\n         *    so you can't style it via CSS\r\n         * @param {jQuery} options\r\n         * @private\r\n         */\r\n        _applyOptionNodeFix: function applyOptionNodeFix(options) {\r\n            var config = this.options,\r\n                format = config.priceFormat,\r\n                template = config.optionTemplate;\r\n\r\n            template = mageTemplate(template);\r\n            options.filter('select').each(function (index, element) {\r\n                var $element = $(element),\r\n                    optionId = utils.findOptionId($element),\r\n                    optionConfig = config.optionConfig && config.optionConfig[optionId];\r\n\r\n                $element.find('option').each(function (idx, option) {\r\n                    var $option,\r\n                        optionValue,\r\n                        toTemplate,\r\n                        prices;\r\n\r\n                    $option = $(option);\r\n                    optionValue = $option.val();\r\n\r\n                    if (!optionValue && optionValue !== 0) {\r\n                        return;\r\n                    }\r\n\r\n                    toTemplate = {\r\n                        data: {\r\n                            label: optionConfig[optionValue] && optionConfig[optionValue].name\r\n                        }\r\n                    };\r\n                    prices = optionConfig[optionValue] ? optionConfig[optionValue].prices : null;\r\n\r\n                    if (prices) {\r\n                        _.each(prices, function (price, type) {\r\n                            var value = +price.amount;\r\n\r\n                            value += _.reduce(price.adjustments, function (sum, x) { //eslint-disable-line\r\n                                return sum + x;\r\n                            }, 0);\r\n                            toTemplate.data[type] = {\r\n                                value: value,\r\n                                formatted: utils.formatPrice(value, format)\r\n                            };\r\n                        });\r\n\r\n                        $option.text(template(toTemplate));\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Custom behavior on getting options:\r\n         * now widget able to deep merge accepted configuration with instance options.\r\n         * @param  {Object}  options\r\n         * @return {$.Widget}\r\n         * @private\r\n         */\r\n        _setOptions: function setOptions(options) {\r\n            $.extend(true, this.options, options);\r\n            this._super(options);\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    return $.mage.priceOptions;\r\n});\r\n","Magento_Catalog/js/price-utils.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    var globalPriceFormat = {\r\n        requiredPrecision: 2,\r\n        integerRequired: 1,\r\n        decimalSymbol: ',',\r\n        groupSymbol: ',',\r\n        groupLength: ','\r\n    };\r\n\r\n    /**\r\n     * Repeats {string} {times} times\r\n     * @param  {String} string\r\n     * @param  {Number} times\r\n     * @return {String}\r\n     */\r\n    function stringPad(string, times) {\r\n        return (new Array(times + 1)).join(string);\r\n    }\r\n\r\n    /**\r\n     * Formatter for price amount\r\n     * @param  {Number}  amount\r\n     * @param  {Object}  format\r\n     * @param  {Boolean} isShowSign\r\n     * @return {String}              Formatted value\r\n     */\r\n    function formatPrice(amount, format, isShowSign) {\r\n        var s = '',\r\n            precision, integerRequired, decimalSymbol, groupSymbol, groupLength, pattern, i, pad, j, re, r, am;\r\n\r\n        format = _.extend(globalPriceFormat, format);\r\n\r\n        // copied from price-option.js | Could be refactored with varien/js.js\r\n\r\n        precision = isNaN(format.requiredPrecision = Math.abs(format.requiredPrecision)) ? 2 : format.requiredPrecision;\r\n        integerRequired = isNaN(format.integerRequired = Math.abs(format.integerRequired)) ? 1 : format.integerRequired;\r\n        decimalSymbol = format.decimalSymbol === undefined ? ',' : format.decimalSymbol;\r\n        groupSymbol = format.groupSymbol === undefined ? '.' : format.groupSymbol;\r\n        groupLength = format.groupLength === undefined ? 3 : format.groupLength;\r\n        pattern = format.pattern || '%s';\r\n\r\n        if (isShowSign === undefined || isShowSign === true) {\r\n            s = amount < 0 ? '-' : isShowSign ? '+' : '';\r\n        } else if (isShowSign === false) {\r\n            s = '';\r\n        }\r\n        pattern = pattern.indexOf('{sign}') < 0 ? s + pattern : pattern.replace('{sign}', s);\r\n\r\n        // we're avoiding the usage of to fixed, and using round instead with the e representation to address\r\n        // numbers like 1.005 = 1.01. Using ToFixed to only provide trailing zeroes in case we have a whole number\r\n        i = parseInt(\r\n                amount = Number(Math.round(Math.abs(+amount || 0) + 'e+' + precision) + ('e-' + precision)),\r\n                10\r\n            ) + '';\r\n        pad = i.length < integerRequired ? integerRequired - i.length : 0;\r\n\r\n        i = stringPad('0', pad) + i;\r\n\r\n        j = i.length > groupLength ? i.length % groupLength : 0;\r\n        re = new RegExp('(\\\\d{' + groupLength + '})(?=\\\\d)', 'g');\r\n\r\n        // replace(/-/, 0) is only for fixing Safari bug which appears\r\n        // when Math.abs(0).toFixed() executed on '0' number.\r\n        // Result is '0.-0' :(\r\n\r\n        am = Number(Math.round(Math.abs(amount - i) + 'e+' + precision) + ('e-' + precision));\r\n        r = (j ? i.substr(0, j) + groupSymbol : '') +\r\n            i.substr(j).replace(re, '$1' + groupSymbol) +\r\n            (precision ? decimalSymbol + am.toFixed(precision).replace(/-/, 0).slice(2) : '');\r\n\r\n        return pattern.replace('%s', r).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\r\n    }\r\n\r\n    /**\r\n     * Deep clone of Object. Doesn't support functions\r\n     * @param {Object} obj\r\n     * @return {Object}\r\n     */\r\n    function objectDeepClone(obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    }\r\n\r\n    /**\r\n     * Helper to find ID in name attribute\r\n     * @param   {jQuery} element\r\n     * @returns {undefined|String}\r\n     */\r\n    function findOptionId(element) {\r\n        var re, id, name;\r\n\r\n        if (!element) {\r\n            return id;\r\n        }\r\n        name = $(element).attr('name');\r\n\r\n        if (name.indexOf('[') !== -1) {\r\n            re = /\\[([^\\]]+)?\\]/;\r\n        } else {\r\n            re = /_([^\\]]+)?_/; // just to support file-type-option\r\n        }\r\n        id = re.exec(name) && re.exec(name)[1];\r\n\r\n        if (id) {\r\n            return id;\r\n        }\r\n    }\r\n\r\n    return {\r\n        formatPrice: formatPrice,\r\n        deepClone: objectDeepClone,\r\n        strPad: stringPad,\r\n        findOptionId: findOptionId\r\n    };\r\n});\r\n","Magento_Catalog/js/product-gallery.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'baseImage'\r\n], function ($, _, mageTemplate, registry) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Formats incoming bytes value to a readable format.\r\n     *\r\n     * @param {Number} bytes\r\n     * @returns {String}\r\n     */\r\n    function bytesToSize(bytes) {\r\n        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'],\r\n            i;\r\n\r\n        if (bytes === 0) {\r\n            return '0 Byte';\r\n        }\r\n\r\n        i = window.parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n\r\n        return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n    }\r\n\r\n    /**\r\n     * Product gallery widget\r\n     */\r\n    $.widget('mage.productGallery', {\r\n        options: {\r\n            imageSelector: '[data-role=image]',\r\n            imageElementSelector: '[data-role=image-element]',\r\n            template: '[data-template=image]',\r\n            imageResolutionLabel: '[data-role=resolution]',\r\n            imgTitleSelector: '[data-role=img-title]',\r\n            imageSizeLabel: '[data-role=size]',\r\n            types: null,\r\n            initialized: false\r\n        },\r\n\r\n        /**\r\n         * Gallery creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.options.types = this.options.types || this.element.data('types');\r\n            this.options.images = this.options.images || this.element.data('images');\r\n            this.options.parentComponent = this.options.parentComponent || this.element.data('parent-component');\r\n\r\n            this.imgTmpl = mageTemplate(this.element.find(this.options.template).html().trim());\r\n\r\n            this._bind();\r\n\r\n            $.each(this.options.images, $.proxy(function (index, imageData) {\r\n                this.element.trigger('addItem', imageData);\r\n            }, this));\r\n\r\n            this.options.initialized = true;\r\n        },\r\n\r\n        /**\r\n         * Bind handler to elements\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                updateImageTitle: '_updateImageTitle',\r\n                updateVisibility: '_updateVisibility',\r\n                openDialog: '_onOpenDialog',\r\n                addItem: '_addItem',\r\n                removeItem: '_removeItem',\r\n                setImageType: '_setImageType',\r\n                setPosition: '_setPosition',\r\n                resort: '_resort',\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'mouseup [data-role=delete-button]': function (event) {\r\n                    var $imageContainer;\r\n\r\n                    event.preventDefault();\r\n                    $imageContainer = $(event.currentTarget).closest(this.options.imageSelector);\r\n                    this.element.find('[data-role=dialog]').trigger('close');\r\n                    this.element.trigger('removeItem', $imageContainer.data('imageData'));\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'mouseup [data-role=make-base-button]': function (event) {\r\n                    var $imageContainer,\r\n                        imageData;\r\n\r\n                    event.preventDefault();\r\n                    event.stopImmediatePropagation();\r\n                    $imageContainer = $(event.currentTarget).closest(this.options.imageSelector);\r\n                    imageData = $imageContainer.data('imageData');\r\n                    this.setBase(imageData);\r\n                }\r\n            });\r\n\r\n            this.element.sortable({\r\n                distance: 8,\r\n                items: this.options.imageSelector,\r\n                tolerance: 'pointer',\r\n                cancel: 'input, button, .uploader',\r\n                update: $.proxy(function () {\r\n                    this.element.trigger('resort');\r\n                }, this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set image as main\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        setBase: function (imageData) {\r\n            var baseImage = this.options.types.image,\r\n                sameImages = $.grep(\r\n                    $.map(this.options.types, function (el) {\r\n                        return el;\r\n                    }),\r\n                    function (el) {\r\n                        return el.value === baseImage.value;\r\n                    }\r\n                ),\r\n                isImageOpened = this.findElement(imageData).hasClass('active');\r\n\r\n            $.each(sameImages, $.proxy(function (index, image) {\r\n                this.element.trigger('setImageType', {\r\n                    type: image.code,\r\n                    imageData: imageData\r\n                });\r\n\r\n                if (isImageOpened) {\r\n                    this.element.find('.item').addClass('selected');\r\n                    this.element.find('[data-role=type-selector]').prop({\r\n                        'checked': true\r\n                    });\r\n                }\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Find element by fileName\r\n         * @param {Object} data\r\n         * @returns {Element}\r\n         */\r\n        findElement: function (data) {\r\n            return this.element.find(this.options.imageSelector).filter(function () {\r\n                return $(this).data('imageData').file === data.file;\r\n            }).first();\r\n        },\r\n\r\n        /**\r\n         * Mark parent fieldset that content was updated\r\n         */\r\n        _contentUpdated: function () {\r\n            if (this.options.initialized && this.options.parentComponent) {\r\n                registry.async(this.options.parentComponent)(\r\n                    function (parentComponent) {\r\n                        parentComponent.bubble('update', true);\r\n                    }\r\n                );\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add image\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _addItem: function (event, imageData) {\r\n            var count = this.element.find(this.options.imageSelector).length,\r\n                element,\r\n                imgElement;\r\n\r\n            imageData = $.extend({\r\n                'file_id': imageData['value_id'] ? imageData['value_id'] : Math.random().toString(33).substr(2, 18),\r\n                'disabled': imageData.disabled ? imageData.disabled : 0,\r\n                'position': count + 1,\r\n                sizeLabel: bytesToSize(imageData.size)\r\n            }, imageData);\r\n\r\n            element = this.imgTmpl({\r\n                data: imageData\r\n            });\r\n\r\n            element = $(element).data('imageData', imageData);\r\n\r\n            if (count === 0) {\r\n                element.prependTo(this.element);\r\n            } else {\r\n                element.insertAfter(this.element.find(this.options.imageSelector + ':last'));\r\n            }\r\n\r\n            if (!this.options.initialized &&\r\n                this.options.images.length === 0 ||\r\n                this.options.initialized &&\r\n                this.element.find(this.options.imageSelector + ':not(.removed)').length === 1\r\n            ) {\r\n                this.setBase(imageData);\r\n            }\r\n\r\n            imgElement = element.find(this.options.imageElementSelector);\r\n\r\n            imgElement.on('load', this._updateImageDimesions.bind(this, element));\r\n\r\n            $.each(this.options.types, $.proxy(function (index, image) {\r\n                if (imageData.file === image.value) {\r\n                    this.element.trigger('setImageType', {\r\n                        type: image.code,\r\n                        imageData: imageData\r\n                    });\r\n                }\r\n            }, this));\r\n\r\n            this._updateImagesRoles();\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Returns a list of current images.\r\n         *\r\n         * @returns {jQueryCollection}\r\n         */\r\n        _getImages: function () {\r\n            return this.element.find(this.options.imageSelector);\r\n        },\r\n\r\n        /**\r\n         * Returns a list of images roles.\r\n         *\r\n         * @return {Object}\r\n         */\r\n        _getRoles: function () {\r\n            return _.mapObject(this.options.types, function (data, key) {\r\n                var elem = this.element.find('.image-' + key);\r\n\r\n                return {\r\n                    index: key,\r\n                    value: elem.val(),\r\n                    elem: elem\r\n                };\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Updates labels with roles information for each image.\r\n         */\r\n        _updateImagesRoles: function () {\r\n            var $images = this._getImages().toArray(),\r\n                roles = this._getRoles();\r\n\r\n            $images.forEach(function (img) {\r\n                var $img = $(img),\r\n                    data = $img.data('imageData');\r\n\r\n                $img.find('[data-role=roles-labels] li').each(function (index, elem) {\r\n                    var $elem = $(elem),\r\n                        roleCode = $elem.data('roleCode'),\r\n                        role = roles[roleCode];\r\n\r\n                    role.value === data.file  ?\r\n                        $elem.show() :\r\n                        $elem.hide();\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates image's dimensions information.\r\n         *\r\n         * @param {jQeuryCollection} imgContainer\r\n         */\r\n        _updateImageDimesions: function (imgContainer) {\r\n            var $img = imgContainer.find(this.options.imageElementSelector)[0],\r\n                $dimens = imgContainer.find('[data-role=image-dimens]');\r\n\r\n            $dimens.text($img.naturalWidth + 'x' + $img.naturalHeight + ' px');\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         */\r\n        _updateImageTitle: function (event, data) {\r\n            var imageData = data.imageData,\r\n                $imgContainer = this.findElement(imageData),\r\n                $title = $imgContainer.find(this.options.imgTitleSelector),\r\n                value;\r\n\r\n            value = imageData['media_type'] === 'external-video' ?\r\n                imageData['video_title'] :\r\n                imageData.label;\r\n\r\n            $title.text(value);\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Remove Image\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _removeItem: function (event, imageData) {\r\n            var $imageContainer = this.findElement(imageData);\r\n\r\n            imageData.isRemoved = true;\r\n            $imageContainer.addClass('removed').hide().find('.is-removed').val(1);\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Set image type\r\n         * @param {jQuery.Event} event\r\n         * @param {Obejct} data\r\n         * @private\r\n         */\r\n        _setImageType: function (event, data) {\r\n            if (data.type === 'image') {\r\n                this.element.find('.base-image').removeClass('base-image');\r\n            }\r\n\r\n            if (data.imageData) {\r\n                this.options.types[data.type].value = data.imageData.file;\r\n\r\n                if (data.type === 'image') {\r\n                    this.findElement(data.imageData).addClass('base-image');\r\n                }\r\n            } else {\r\n                this.options.types[data.type].value = 'no_selection';\r\n            }\r\n            this.element.find('.image-' + data.type).val(this.options.types[data.type].value || 'no_selection');\r\n            this._updateImagesRoles();\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Resort images\r\n         * @private\r\n         */\r\n        _resort: function () {\r\n            this.element.find('.position').each($.proxy(function (index, element) {\r\n                var value = $(element).val();\r\n\r\n                if (value != index) { //eslint-disable-line eqeqeq\r\n                    this.element.trigger('moveElement', {\r\n                        imageData: $(element).closest(this.options.imageSelector).data('imageData'),\r\n                        position: index\r\n                    });\r\n                    $(element).val(index);\r\n                }\r\n            }, this));\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Set image position\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _setPosition: function (event, data) {\r\n            var $element = this.findElement(data.imageData),\r\n                curIndex = this.element.find(this.options.imageSelector).index($element),\r\n                newPosition = data.position + (curIndex > data.position ? -1 : 0);\r\n\r\n            if (data.position != curIndex) { //eslint-disable-line eqeqeq\r\n                if (data.position === 0) {\r\n                    this.element.prepend($element);\r\n                } else {\r\n                    $element.insertAfter(\r\n                        this.element.find(this.options.imageSelector).eq(newPosition)\r\n                    );\r\n                }\r\n                this.element.trigger('resort');\r\n            }\r\n\r\n            this._contentUpdated();\r\n        }\r\n    });\r\n\r\n    // Extension for mage.productGallery - Add advanced settings block\r\n    $.widget('mage.productGallery', $.mage.productGallery, {\r\n        options: {\r\n            dialogTemplate: '[data-role=img-dialog-tmpl]',\r\n            dialogContainerTmpl: '[data-role=img-dialog-container-tmpl]'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var template = this.element.find(this.options.dialogTemplate),\r\n                containerTmpl = this.element.find(this.options.dialogContainerTmpl);\r\n\r\n            this._super();\r\n            this.modalPopupInit = false;\r\n\r\n            if (template.length) {\r\n                this.dialogTmpl = mageTemplate(template.html().trim());\r\n            }\r\n\r\n            if (containerTmpl.length) {\r\n                this.dialogContainerTmpl = mageTemplate(containerTmpl.html().trim());\r\n            } else {\r\n                this.dialogContainerTmpl = mageTemplate('');\r\n            }\r\n\r\n            this._initDialog();\r\n        },\r\n\r\n        /**\r\n         * Bind handler to elements\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            var events = {};\r\n\r\n            this._super();\r\n\r\n            events['click [data-role=close-panel]'] = $.proxy(function () {\r\n                this.element.find('[data-role=dialog]').trigger('close');\r\n            }, this);\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            events['click ' + this.options.imageSelector] = function (event) {\r\n                var imageData, $imageContainer;\r\n\r\n                if (!$(event.currentTarget).is('.ui-sortable-helper')) {\r\n                    $(event.currentTarget).addClass('active');\r\n                    imageData = $(event.currentTarget).data('imageData');\r\n                    $imageContainer = this.findElement(imageData);\r\n\r\n                    if ($imageContainer.is('.removed')) {\r\n                        return;\r\n                    }\r\n                    this.element.trigger('openDialog', [imageData]);\r\n                }\r\n            };\r\n            this._on(events);\r\n            this.element.on('sortstart', $.proxy(function () {\r\n                this.element.find('[data-role=dialog]').trigger('close');\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Initializes dialog element.\r\n         */\r\n        _initDialog: function () {\r\n            var $dialog = $(this.dialogContainerTmpl());\r\n\r\n            $dialog.modal({\r\n                'type': 'slide',\r\n                title: $.mage.__('Image Detail'),\r\n                buttons: [],\r\n\r\n                /** @inheritdoc */\r\n                opened: function () {\r\n                    $dialog.trigger('open');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                closed: function () {\r\n                    $dialog.trigger('close');\r\n                }\r\n            });\r\n\r\n            $dialog.on('open', this.onDialogOpen.bind(this));\r\n            $dialog.on('close', function () {\r\n                var $imageContainer = $dialog.data('imageContainer');\r\n\r\n                $imageContainer.removeClass('active');\r\n                $dialog.find('#hide-from-product-page').remove();\r\n            });\r\n\r\n            $dialog.on('change', '[data-role=type-selector]', function () {\r\n                var parent = $(this).closest('.item'),\r\n                    selectedClass = 'selected';\r\n\r\n                parent.toggleClass(selectedClass, $(this).prop('checked'));\r\n            });\r\n\r\n            $dialog.on('change', '[data-role=type-selector]', $.proxy(this._notifyType, this));\r\n\r\n            $dialog.on('change', '[data-role=visibility-trigger]', $.proxy(function (e) {\r\n                var imageData = $dialog.data('imageData');\r\n\r\n                this.element.trigger('updateVisibility', {\r\n                    disabled: $(e.currentTarget).is(':checked'),\r\n                    imageData: imageData\r\n                });\r\n            }, this));\r\n\r\n            $dialog.on('change', '[data-role=\"image-description\"]', function (e) {\r\n                var target = $(e.target),\r\n                    targetName = target.attr('name'),\r\n                    desc = target.val(),\r\n                    imageData = $dialog.data('imageData');\r\n\r\n                this.element.find('input[type=\"hidden\"][name=\"' + targetName + '\"]').val(desc);\r\n\r\n                imageData.label = desc;\r\n                imageData['label_default'] = desc;\r\n\r\n                this.element.trigger('updateImageTitle', {\r\n                    imageData: imageData\r\n                });\r\n            }.bind(this));\r\n\r\n            this.$dialog = $dialog;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _showDialog: function (imageData) {\r\n            var $imageContainer = this.findElement(imageData),\r\n                $template;\r\n\r\n            $template = this.dialogTmpl({\r\n                'data': imageData\r\n            });\r\n\r\n            this.$dialog\r\n                .html($template)\r\n                .data('imageData', imageData)\r\n                .data('imageContainer', $imageContainer)\r\n                .modal('openModal');\r\n        },\r\n\r\n        /**\r\n         * Handles dialog open event.\r\n         *\r\n         * @param {EventObject} event\r\n         */\r\n        onDialogOpen: function (event) {\r\n            var imageData = this.$dialog.data('imageData'),\r\n                imageSizeKb = imageData.sizeLabel,\r\n                image = document.createElement('img'),\r\n                sizeSpan = this.$dialog.find(this.options.imageSizeLabel)\r\n                    .find('[data-message]'),\r\n                resolutionSpan = this.$dialog.find(this.options.imageResolutionLabel)\r\n                    .find('[data-message]'),\r\n                sizeText = sizeSpan.attr('data-message').replace('{size}', imageSizeKb),\r\n                resolutionText;\r\n\r\n            image.src = imageData.url;\r\n\r\n            resolutionText = resolutionSpan\r\n                .attr('data-message')\r\n                .replace('{width}^{height}', image.width + 'x' + image.height);\r\n\r\n            sizeSpan.text(sizeText);\r\n            resolutionSpan.text(resolutionText);\r\n\r\n            $(event.target)\r\n                .find('[data-role=type-selector]')\r\n                .each($.proxy(function (index, checkbox) {\r\n                    var $checkbox = $(checkbox),\r\n                        parent = $checkbox.closest('.item'),\r\n                        selectedClass = 'selected',\r\n                        isChecked = this.options.types[$checkbox.val()].value == imageData.file; //eslint-disable-line\r\n\r\n                    $checkbox.prop(\r\n                        'checked',\r\n                        isChecked\r\n                    );\r\n                    parent.toggleClass(selectedClass, isChecked);\r\n                }, this));\r\n        },\r\n\r\n        /**\r\n         *\r\n         * Click by image handler\r\n         *\r\n         * @param {jQuery.Event} e\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _onOpenDialog: function (e, imageData) {\r\n            if (imageData['media_type'] && imageData['media_type'] != 'image') { //eslint-disable-line eqeqeq\r\n                return;\r\n            }\r\n            this._showDialog(imageData);\r\n        },\r\n\r\n        /**\r\n         * Change visibility\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * * @param {Object} data\r\n         * @private\r\n         */\r\n        _updateVisibility: function (event, data) {\r\n            var imageData = data.imageData,\r\n                disabled = +data.disabled,\r\n                $imageContainer = this.findElement(imageData);\r\n\r\n            !!disabled ? //eslint-disable-line no-extra-boolean-cast\r\n                $imageContainer.addClass('hidden-for-front') :\r\n                $imageContainer.removeClass('hidden-for-front');\r\n\r\n            $imageContainer.find('[name*=\"disabled\"]').val(disabled);\r\n            imageData.disabled = disabled;\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Set image\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _notifyType: function (event) {\r\n            var $checkbox = $(event.currentTarget),\r\n                $imageContainer = $checkbox.closest('[data-role=dialog]').data('imageContainer');\r\n\r\n            this.element.trigger('setImageType', {\r\n                type: $checkbox.val(),\r\n                imageData: $checkbox.is(':checked') ? $imageContainer.data('imageData') : null\r\n            });\r\n\r\n            this._updateImagesRoles();\r\n        }\r\n    });\r\n\r\n    return $.mage.productGallery;\r\n});\r\n","Magento_Catalog/js/components/attribute-set-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/ui-select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            listens: {\r\n                'value': 'changeFormSubmitUrl'\r\n            },\r\n            modules: {\r\n                formProvider: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change set parameter in save and validate urls of form\r\n         *\r\n         * @param {String|Number} value\r\n         */\r\n        changeFormSubmitUrl: function (value) {\r\n            var pattern = /(set\\/)(\\d)*?\\//,\r\n                change = '$1' + value + '/';\r\n\r\n            this.formProvider().client.urls.save = this.formProvider().client.urls.save.replace(pattern, change);\r\n            this.formProvider().client.urls.beforeSave = this.formProvider().client.urls.beforeSave.replace(\r\n                pattern,\r\n                change\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/attributes-fieldset.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'Magento_Ui/js/core/app'\r\n], function (Fieldset, app) {\r\n    'use strict';\r\n\r\n    return Fieldset.extend({\r\n        defaults: {\r\n            listens: {\r\n                '${ $.provider }:additionalAttributes': 'onAttributeAdd'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * On attribute add trigger\r\n         *\r\n         * @param {Object} listOfNewAttributes\r\n         */\r\n        onAttributeAdd: function (listOfNewAttributes) {\r\n            app(listOfNewAttributes, true);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/attributes-grid-paging.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/paging/paging',\r\n    'underscore'\r\n], function (Paging, _) {\r\n    'use strict';\r\n\r\n    return Paging.extend({\r\n        defaults: {\r\n            totalTmpl: 'Magento_Catalog/attributes/grid/paging',\r\n            modules: {\r\n                selectionColumn: '${ $.selectProvider }'\r\n            },\r\n            listens: {\r\n                '${ $.selectProvider }:selected': 'changeLabel'\r\n            },\r\n            label: '',\r\n            selectedAttrs: []\r\n        },\r\n\r\n        /**\r\n         * Change label.\r\n         *\r\n         * @param {Array} selected\r\n         */\r\n        changeLabel: function (selected) {\r\n            this.selectedAttrs = [];\r\n            _.each(this.selectionColumn().rows(), function (row) {\r\n                if (selected.indexOf(row['attribute_id']) !== -1) {\r\n                    this.selectedAttrs.push(row['attribute_code']);\r\n                }\r\n            }, this);\r\n\r\n            this.label(this.selectedAttrs.join(', '));\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('label');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/attributes-insert-listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'uiRegistry',\r\n    'underscore',\r\n    'Magento_Ui/js/form/components/insert-listing'\r\n], function ($, registry, _, InsertListing) {\r\n    'use strict';\r\n\r\n    return InsertListing.extend({\r\n        defaults: {\r\n            addAttributeUrl: '',\r\n            attributeSetId: '',\r\n            attributeIds: '',\r\n            groupCode: '',\r\n            groupName: '',\r\n            groupSortOrder: 0,\r\n            productId: 0,\r\n            formProvider: '',\r\n            modules: {\r\n                form: '${ $.formProvider }',\r\n                modal: '${ $.parentName }'\r\n            },\r\n            productType: ''\r\n        },\r\n\r\n        /**\r\n         * Render attribute\r\n         */\r\n        render: function () {\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Save attribute\r\n         */\r\n        save: function () {\r\n            this.addSelectedAttributes();\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Add selected attributes\r\n         */\r\n        addSelectedAttributes: function () {\r\n            $.ajax({\r\n                url: this.addAttributeUrl,\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                data: {\r\n                    attributeIds: this.selections().getSelections(),\r\n                    templateId: this.attributeSetId,\r\n                    groupCode: this.groupCode,\r\n                    groupName: this.groupName,\r\n                    groupSortOrder: this.groupSortOrder,\r\n                    productId: this.productId,\r\n                    componentJson: 1\r\n                },\r\n                success: function () {\r\n                    this.form().params = {\r\n                        set: this.attributeSetId,\r\n                        id: this.productId,\r\n                        type: this.productType\r\n                    };\r\n                    this.form().reload();\r\n                    this.modal().state(false);\r\n                    this.reload();\r\n                }.bind(this)\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'knockout'\r\n], function (Abstract, ko) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('checked');\r\n\r\n            this.value = ko.pureComputed({\r\n\r\n                /**\r\n                 * use 'mappedValue' as value if checked\r\n                 */\r\n                read: function () {\r\n                    return this.checked() ? this.mappedValue : '';\r\n                },\r\n\r\n                /**\r\n                 * any value made checkbox checked\r\n                 */\r\n                write: function (val) {\r\n                    if (val) {\r\n                        this.checked(true);\r\n                    }\r\n                },\r\n                owner: this\r\n            });\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/custom-options-component.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (_, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            this.addBefore(this.addbefore);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n\r\n            this.observe('addBefore');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/custom-options-price-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/select',\r\n    'uiRegistry'\r\n], function (_, Select, uiRegistry) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        onUpdate: function () {\r\n            this._super();\r\n\r\n            this.updateAddBeforeForPrice();\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            this.updateAddBeforeForPrice();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update addbefore for price field. Change it to currency or % depends of price_type value.\r\n         */\r\n        updateAddBeforeForPrice: function () {\r\n            var addBefore, currentValue, priceIndex, priceName, uiPrice;\r\n\r\n            priceIndex = typeof this.imports.priceIndex == 'undefined' ? 'price' : this.imports.priceIndex;\r\n            priceName = this.parentName + '.' + priceIndex;\r\n\r\n            uiPrice = uiRegistry.get(priceName);\r\n\r\n            if (uiPrice && uiPrice.addbeforePool) {\r\n                currentValue = this.value();\r\n\r\n                uiPrice.addbeforePool.forEach(function (item) {\r\n                    if (item.value === currentValue) {\r\n                        addBefore = item.label;\r\n                    }\r\n                });\r\n\r\n                if (typeof addBefore != 'undefined') {\r\n                    uiPrice.addBefore(addBefore);\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/disable-hide-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, visibleStrategy, disableStrategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(visibleStrategy).extend(disableStrategy);\r\n});\r\n","Magento_Catalog/js/components/dynamic-rows-import-custom-options.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows-grid',\r\n    'underscore',\r\n    'mageUtils'\r\n], function (DynamicRows, _, utils) {\r\n    'use strict';\r\n\r\n    return DynamicRows.extend({\r\n        defaults: {\r\n            mappingSettings: {\r\n                enabled: false,\r\n                distinct: false\r\n            },\r\n            update: true,\r\n            map: {\r\n                'option_id': 'option_id'\r\n            },\r\n            identificationProperty: 'option_id',\r\n            identificationDRProperty: 'option_id'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        processingInsertData: function (data) {\r\n            var options = [],\r\n                currentOption,\r\n                generalContext = this;\r\n\r\n            if (!data) {\r\n                return;\r\n            }\r\n            _.each(data, function (item) {\r\n                if (!item.options) {\r\n                    return;\r\n                }\r\n                _.each(item.options, function (option) {\r\n                    currentOption = utils.copy(option);\r\n\r\n                    if (currentOption.hasOwnProperty('sort_order')) {\r\n                        delete currentOption['sort_order'];\r\n                    }\r\n\r\n                    if (currentOption.hasOwnProperty('option_id')) {\r\n                        delete currentOption['option_id'];\r\n                    }\r\n\r\n                    if (currentOption.values.length > 0) {\r\n                        generalContext.removeOptionsIds(currentOption.values);\r\n                    }\r\n                    options.push(currentOption);\r\n                });\r\n            });\r\n\r\n            if (!options.length) {\r\n                return;\r\n            }\r\n            this.cacheGridData = options;\r\n            _.each(options, function (opt) {\r\n                this.mappingValue(opt);\r\n            }, this);\r\n\r\n            this.insertData([]);\r\n        },\r\n\r\n        /**\r\n         * Removes option_id and option_type_id from every option\r\n         *\r\n         * @param {Array} options\r\n         */\r\n        removeOptionsIds: function (options) {\r\n            _.each(options, function (optionValue) {\r\n                delete optionValue['option_id'];\r\n                delete optionValue['option_type_id'];\r\n            });\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        processingAddChild: function (ctx, index, prop) {\r\n            if (!ctx) {\r\n                this.showSpinner(true);\r\n                this.addChild(ctx, index, prop);\r\n\r\n                return;\r\n            }\r\n\r\n            this._super(ctx, index, prop);\r\n        },\r\n\r\n        /**\r\n         * Set empty array to dataProvider\r\n         */\r\n        clearDataProvider: function () {\r\n            this.source.set(this.dataProvider, []);\r\n        },\r\n\r\n        /**\r\n         * Mutes parent method\r\n         */\r\n        updateInsertData: function () {\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/dynamic-rows-tier-price.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows'\r\n], function (_, DynamicRows) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @deprecated Parent method contains labels sorting.\r\n     * @see Magento_Ui/js/dynamic-rows/dynamic-rows\r\n     */\r\n    return DynamicRows.extend({\r\n\r\n        /**\r\n         * Init header elements\r\n         */\r\n        initHeader: function () {\r\n            var labels;\r\n\r\n            this._super();\r\n            labels = _.clone(this.labels());\r\n            labels = _.sortBy(labels, function (label) {\r\n                return label.sortOrder;\r\n            });\r\n\r\n            this.labels(labels);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/import-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'underscore',\r\n    'uiRegistry'\r\n], function (Abstract, _, registry) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            allowImport: true,\r\n            autoImportIfEmpty: false,\r\n            values: {},\r\n            mask: '',\r\n            queryTemplate: 'ns = ${ $.ns }, index = '\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.allowImport) {\r\n                this.setHandlers();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Split mask placeholder and attach events to placeholder fields.\r\n         */\r\n        setHandlers: function () {\r\n            var str = this.mask || '',\r\n                placeholders;\r\n\r\n            placeholders = str.match(/{{(.*?)}}/g); // Get placeholders\r\n\r\n            _.each(placeholders, function (placeholder) {\r\n                placeholder = placeholder.replace(/[{{}}]/g, ''); // Remove curly braces\r\n\r\n                registry.get(this.queryTemplate + placeholder, function (component) {\r\n                    this.values[placeholder] = component.getPreview();\r\n                    component.on('value', this.updateValue.bind(this, placeholder, component));\r\n                    component.valueUpdate = 'keyup';\r\n                }.bind(this));\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Update field with mask value, if it's allowed.\r\n         *\r\n         * @param {Object} placeholder\r\n         * @param {Object} component\r\n         */\r\n        updateValue: function (placeholder, component) {\r\n            var string = this.mask || '',\r\n                nonEmptyValueFlag = false;\r\n\r\n            if (placeholder) {\r\n                this.values[placeholder] = component.getPreview() || '';\r\n            }\r\n\r\n            if (!this.allowImport) {\r\n                return;\r\n            }\r\n\r\n            _.each(this.values, function (propertyValue, propertyName) {\r\n                string = string.replace('{{' + propertyName + '}}', propertyValue);\r\n                nonEmptyValueFlag = nonEmptyValueFlag || !!propertyValue;\r\n            });\r\n\r\n            if (nonEmptyValueFlag) {\r\n                string = string.replace(/(<([^>]+)>)/ig, ''); // Remove html tags\r\n                this.value(string);\r\n            } else {\r\n                this.value('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disallow import when initial value isn't empty string\r\n         *\r\n         * @returns {*}\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            if (this.initialValue !== '') {\r\n                this.allowImport = false;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *  Callback when value is changed by user,\r\n         *  and disallow/allow import value\r\n         */\r\n        userChanges: function () {\r\n\r\n            /**\r\n             *  As userChanges is called before updateValue,\r\n             *  we forced to get value from component by reference\r\n             */\r\n            var actualValue = arguments[1].currentTarget.value;\r\n\r\n            this._super();\r\n\r\n            if (actualValue === '') {\r\n                this.allowImport = true;\r\n\r\n                if (this.autoImportIfEmpty) {\r\n                    this.updateValue(null, null);\r\n                }\r\n            } else {\r\n                this.allowImport = false;\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/input-handle-required.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Disable required validation, when 'use config option' checked\r\n         */\r\n        handleRequired: function (newValue) {\r\n            this.validation['required-entry'] = !newValue;\r\n            this.required(!newValue);\r\n            this.error(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/messages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/html'\r\n], function (Html) {\r\n    'use strict';\r\n\r\n    return Html.extend({\r\n        defaults: {\r\n            form: '${ $.namespace }.${ $.namespace }',\r\n            visible: false,\r\n            imports: {\r\n                responseData: '${ $.form }:responseData',\r\n                visible: 'responseData.error',\r\n                content: 'responseData.messages'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:data.reset': 'hide'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show messages.\r\n         */\r\n        show: function () {\r\n            this.visible(true);\r\n        },\r\n\r\n        /**\r\n         * Hide messages.\r\n         */\r\n        hide: function () {\r\n            this.visible(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/multiselect-handle-required.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/multiselect'\r\n], function (Multiselect) {\r\n    'use strict';\r\n\r\n    return Multiselect.extend({\r\n\r\n        /**\r\n         * Disable required validation, when 'use config option' checked\r\n         */\r\n        handleRequired: function (newValue) {\r\n            this.validation['required-entry'] = !newValue;\r\n            this.required(!newValue);\r\n            this.error(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/new-attribute-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/form',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'Magento_Ui/js/modal/alert'\r\n], function ($, Form, prompt, alert) {\r\n    'use strict';\r\n\r\n    return Form.extend({\r\n        defaults: {\r\n            newSetPromptMessage: '',\r\n            listens: {\r\n                responseData: 'processResponseData'\r\n            },\r\n            modules: {\r\n                productForm: 'product_form.product_form'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Process response data\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        processResponseData: function (data) {\r\n            if (data.params['new_attribute_set_id']) {\r\n                this.productForm().params = {\r\n                    set: data.params['new_attribute_set_id']\r\n                };\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Process Save In New Attribute Set prompt\r\n         */\r\n        saveAttributeInNewSet: function () {\r\n\r\n            var self = this;\r\n\r\n            this.validate();\r\n\r\n            if (!this.additionalInvalid && !this.source.get('params.invalid')) {\r\n                prompt({\r\n                    content: this.newSetPromptMessage,\r\n                    actions: {\r\n\r\n                        /**\r\n                         * @param {String} val\r\n                         * @this {actions}\r\n                         */\r\n                        confirm: function (val) {\r\n                            var rules = ['required-entry', 'validate-no-html-tags'],\r\n                                editForm = self,\r\n                                newAttributeSetName = val,\r\n                                i,\r\n                                params = {};\r\n\r\n                            if (!newAttributeSetName) {\r\n                                return;\r\n                            }\r\n\r\n                            for (i = 0; i < rules.length; i++) {\r\n                                if (!$.validator.methods[rules[i]](newAttributeSetName)) {\r\n                                    alert({\r\n                                        content: $.validator.messages[rules[i]]\r\n                                    });\r\n\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            params['new_attribute_set_name'] = newAttributeSetName;\r\n                            editForm.setAdditionalData(params);\r\n                            editForm.save();\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                this.focusInvalid();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/new-attribute-insert-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/insert-form'\r\n], function (InsertForm) {\r\n    'use strict';\r\n\r\n    return InsertForm.extend({\r\n        defaults: {\r\n            modules: {\r\n                productForm: 'product_form.product_form'\r\n            },\r\n            listens: {\r\n                responseStatus: 'processResponseStatus'\r\n            },\r\n            attributeSetId: 0,\r\n            productId: 0\r\n        },\r\n\r\n        /**\r\n         * Process response status.\r\n         */\r\n        processResponseStatus: function () {\r\n            if (this.responseStatus()) {\r\n\r\n                if (this.productForm().params === undefined) {\r\n                    this.productForm().params = {\r\n                        set: this.attributeSetId\r\n                    };\r\n                }\r\n\r\n                if (this.productId) {\r\n                    this.productForm().params.id = this.productId;\r\n                }\r\n                this.productForm().params.type = this.productType;\r\n\r\n                this.productForm().reload();\r\n                this.resetForm();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/new-category.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/ui-select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n\r\n        /**\r\n         * Parse data and set it to options.\r\n         *\r\n         * @param {Object} data - Response data object.\r\n         * @returns {Object}\r\n         */\r\n        setParsed: function (data) {\r\n            var option = this.parseData(data);\r\n\r\n            if (data.error) {\r\n                return this;\r\n            }\r\n\r\n            this.options([]);\r\n            this.setOption(option);\r\n            this.set('newOption', option);\r\n        },\r\n\r\n        /**\r\n         * Normalize option object.\r\n         *\r\n         * @param {Object} data - Option object.\r\n         * @returns {Object}\r\n         */\r\n        parseData: function (data) {\r\n            return {\r\n                'is_active': data.category['is_active'],\r\n                level: data.category.level,\r\n                value: data.category['entity_id'],\r\n                label: data.category.name,\r\n                parent: data.category.parent\r\n            };\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/product-status.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'underscore'\r\n], function (Abstract, _) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            'mappingValues': {\r\n                '1': true,\r\n                '2': false\r\n            },\r\n            'checked': false,\r\n            'mappedValue': '',\r\n            'links': {\r\n                value: false,\r\n                'mappedValue': '${ $.provider }:${ $.dataScope }'\r\n            },\r\n            imports: {\r\n                checked: 'mappedValue'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {*}\r\n         */\r\n        setMappedValue: function () {\r\n            var newValue;\r\n\r\n            _.some(this.mappingValues, function (item, key) {\r\n                if (item === this.value()) {\r\n                    newValue = key;\r\n\r\n                    return true;\r\n                }\r\n            }, this);\r\n\r\n            return newValue;\r\n        },\r\n\r\n        /**\r\n         * @returns {*}\r\n         */\r\n        initObservable: function () {\r\n            return this.observe('mappedValue checked')._super();\r\n        },\r\n\r\n        /**\r\n         * @returns {*}\r\n         */\r\n        setInitialValue: function () {\r\n            this.value(this.mappedValue());\r\n            this._super();\r\n            this.mappedValue(this.initialValue);\r\n            this.value(this.mappingValues[this.initialValue]);\r\n            this.initialValue = this.value();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @returns {*}\r\n         */\r\n        onUpdate: function () {\r\n            this.mappedValue(this.setMappedValue());\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/product-ui-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/ui-select',\r\n    'jquery',\r\n    'underscore'\r\n], function (Select, $, _) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            validationUrl: false,\r\n            loadedOption: [],\r\n            validationLoading: true\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.validateInitialValue();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate initial value actually exists\r\n         */\r\n        validateInitialValue: function () {\r\n            if (!_.isEmpty(this.value())) {\r\n                $.ajax({\r\n                    url: this.validationUrl,\r\n                    type: 'GET',\r\n                    dataType: 'json',\r\n                    context: this,\r\n                    data: {\r\n                        productId: this.value()\r\n                    },\r\n\r\n                    /** @param {Object} response */\r\n                    success: function (response) {\r\n                        if (!_.isEmpty(response)) {\r\n                            this.options([response]);\r\n                            this.loadedOption = response;\r\n                        }\r\n                    },\r\n\r\n                    /** set empty array if error occurs */\r\n                    error: function () {\r\n                        this.options([]);\r\n                    },\r\n\r\n                    /** stop loader */\r\n                    complete: function () {\r\n                        this.validationLoading(false);\r\n                        this.setCaption();\r\n                    }\r\n                });\r\n            } else {\r\n                this.validationLoading(false);\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getSelected: function () {\r\n            var options = this._super();\r\n\r\n            if (!_.isEmpty(this.loadedOption)) {\r\n                return this.value() === this.loadedOption.value ? [this.loadedOption] : options;\r\n            }\r\n\r\n            return options;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/select-handle-required.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n\r\n        /**\r\n         * Disable required validation, when 'use config option' checked\r\n         */\r\n        handleRequired: function (newValue) {\r\n            this.validation['required-entry'] = !newValue;\r\n            this.required(!newValue);\r\n            this.error(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/select-to-checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Converts initial value to integer\r\n         *\r\n         * @returns {Abstract}\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n            this.value(+this.value());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts new value to integer\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        onUpdate: function () {\r\n            this._super();\r\n            this.value(+this.value());\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/url-key-handle-changes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Checkbox) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            imports: {\r\n                handleUseDefault: '${ $.parentName }.use_default.url_key:checked',\r\n                urlKey: '${ $.provider }:data.url_key'\r\n            },\r\n            listens: {\r\n                urlKey: 'handleChanges'\r\n            },\r\n            modules: {\r\n                useDefault: '${ $.parentName }.use_default.url_key'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable checkbox field, when 'url_key' field without changes or 'use default' field is checked\r\n         */\r\n        handleChanges: function (newValue) {\r\n            this.disabled(newValue === this.valueMap['true'] || this.useDefault.checked);\r\n        },\r\n\r\n        /**\r\n         * Disable checkbox field, when 'url_key' field without changes or 'use default' field is checked\r\n         */\r\n        handleUseDefault: function (checkedUseDefault) {\r\n            this.disabled(this.urlKey === this.valueMap['true'] || checkedUseDefault);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/strategy.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    return {\r\n        defaults: {\r\n            valuesForEnable: [],\r\n            disabled: true,\r\n            imports: {\r\n                toggleDisable:\r\n                    'product_attribute_add_form.product_attribute_add_form.base_fieldset.frontend_input:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle disabled state.\r\n         *\r\n         * @param {Number} selected\r\n         */\r\n        toggleDisable: function (selected) {\r\n            this.disabled(!(selected in this.valuesForEnable));\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/yesno.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    var comp = Element.extend(strategy).extend({\r\n\r\n        defaults: {\r\n            listens: {\r\n                disabled: 'updateValueForDisabledField',\r\n                visible: 'updateValueForDisabledField'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.updateValueForDisabledField();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set element value to O(No) if element is invisible and disabled\r\n         * Set element value to initialValue if element becomes visible and enable\r\n         */\r\n        updateValueForDisabledField: function () {\r\n            if (!this.disabled() && this.visible()) {\r\n                this.set('value', this.initialValue);\r\n            } else {\r\n                this.set('value', 0);\r\n            }\r\n        }\r\n    });\r\n\r\n    return comp.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/use-parent-settings/select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component;\r\n});\r\n","Magento_Catalog/js/components/use-parent-settings/single-checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component;\r\n});\r\n","Magento_Catalog/js/components/use-parent-settings/textarea.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/textarea'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component;\r\n});\r\n","Magento_Catalog/js/components/use-parent-settings/toggle-disabled-mixin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var mixin = {\r\n        defaults: {\r\n            imports: {\r\n                toggleDisabled: '${ $.parentName }.custom_use_parent_settings:checked'\r\n            },\r\n            useParent: false,\r\n            useDefaults: false\r\n        },\r\n\r\n        /**\r\n         * Disable form input if settings for parent section is used\r\n         * or default value is applied.\r\n         *\r\n         * @param {Boolean} isUseParent\r\n         */\r\n        toggleDisabled: function (isUseParent) {\r\n            var disabled = this.useParent = isUseParent;\r\n\r\n            if (!disabled && !_.isUndefined(this.service)) {\r\n                disabled = !!this.isUseDefault();\r\n            }\r\n\r\n            this.saveUseDefaults();\r\n            this.disabled(disabled);\r\n        },\r\n\r\n        /**\r\n         * Stores original state of the field.\r\n         */\r\n        saveUseDefaults: function () {\r\n            this.useDefaults = this.disabled();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        setInitialValue: function () {\r\n            this._super();\r\n            this.isUseDefault(this.useDefaults);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        toggleUseDefault: function (state) {\r\n            this._super();\r\n            this.disabled(state || this.useParent);\r\n        }\r\n    };\r\n\r\n    return function (target) {\r\n        return target.extend(mixin);\r\n    };\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/date.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/date',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/fieldset.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Fieldset, strategy) {\r\n    'use strict';\r\n\r\n    return Fieldset.extend(strategy).extend(\r\n        {\r\n            defaults: {\r\n                openOnShow: true\r\n            },\r\n\r\n            /**\r\n             * Toggle visibility state.\r\n             */\r\n            toggleVisibility: function () {\r\n                this._super();\r\n\r\n                if (this.openOnShow) {\r\n                    this.opened(this.inverseVisibility ? !this.isShown : this.isShown);\r\n                }\r\n            }\r\n        }\r\n    );\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/strategy.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    return {\r\n        defaults: {\r\n            valuesForOptions: [],\r\n            imports: {\r\n                toggleVisibility:\r\n                    'product_attribute_add_form.product_attribute_add_form.base_fieldset.frontend_input:value'\r\n            },\r\n            isShown: false,\r\n            inverseVisibility: false\r\n        },\r\n\r\n        /**\r\n         * Toggle visibility state.\r\n         *\r\n         * @param {Number} selected\r\n         */\r\n        toggleVisibility: function (selected) {\r\n            this.isShown = selected in this.valuesForOptions;\r\n            this.visible(this.inverseVisibility ? !this.isShown : this.isShown);\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/textarea.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/textarea',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/yesno.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/form/element/action-delete.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (_, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            prefixName: '',\r\n            prefixElementName: '',\r\n            elementName: '',\r\n            suffixName: ''\r\n        },\r\n\r\n        /**\r\n         * Parses options and merges the result with instance\r\n         *\r\n         * @param  {Object} config\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function (config) {\r\n            this._super(config);\r\n\r\n            this.configureDataScope();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure data scope.\r\n         */\r\n        configureDataScope: function () {\r\n            var recordId,\r\n                prefixName,\r\n                suffixName;\r\n\r\n            // Get recordId\r\n            recordId = this.parentName.split('.').last();\r\n\r\n            prefixName = this.dataScopeToHtmlArray(this.prefixName);\r\n            this.elementName = this.prefixElementName + recordId;\r\n\r\n            suffixName = '';\r\n\r\n            if (!_.isEmpty(this.suffixName) || _.isNumber(this.suffixName)) {\r\n                suffixName = '[' + this.suffixName + ']';\r\n            }\r\n            this.inputName = prefixName + '[' + this.elementName + ']' + suffixName;\r\n\r\n            suffixName = '';\r\n\r\n            if (!_.isEmpty(this.suffixName) || _.isNumber(this.suffixName)) {\r\n                suffixName = '.' + this.suffixName;\r\n            }\r\n            this.dataScope = 'data.' + this.prefixName + '.' + this.elementName + suffixName;\r\n\r\n            this.links.value = this.provider + ':' + this.dataScope;\r\n        },\r\n\r\n        /**\r\n         * Get HTML array from data scope.\r\n         *\r\n         * @param {String} dataScopeString\r\n         * @returns {String}\r\n         */\r\n        dataScopeToHtmlArray: function (dataScopeString) {\r\n            var dataScopeArray, dataScope, reduceFunction;\r\n\r\n            /**\r\n             * Reduce\r\n             *\r\n             * @param {String} prev\r\n             * @param {String} curr\r\n             * @returns {String}\r\n             */\r\n            reduceFunction = function (prev, curr) {\r\n                return prev + '[' + curr + ']';\r\n            };\r\n\r\n            dataScopeArray = dataScopeString.split('.');\r\n\r\n            dataScope = dataScopeArray.shift();\r\n            dataScope += dataScopeArray.reduce(reduceFunction, '');\r\n\r\n            return dataScope;\r\n        },\r\n\r\n        /**\r\n         * Delete record instance\r\n         * update data provider dataScope\r\n         *\r\n         * @param {Object} parents\r\n         */\r\n        deleteRecord: function (parents) {\r\n            this.value(1);\r\n            parents[1].deleteRecord(parents[0].index, parents[0].recordId);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/form/element/checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Checkbox) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            inputCheckBoxName: '',\r\n            prefixElementName: '',\r\n            parentDynamicRowName: 'visual_swatch'\r\n        },\r\n\r\n        /**\r\n         * Parses options and merges the result with instance\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n            this.configureDataScope();\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.rows && this.rows().elems().length === 0) {\r\n                this.checked(true);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure data scope.\r\n         */\r\n        configureDataScope: function () {\r\n            var recordId,\r\n                value;\r\n\r\n            recordId = this.parentName.split('.').last();\r\n            value = this.prefixElementName + recordId;\r\n\r\n            this.dataScope = 'data.' + this.inputCheckBoxName;\r\n            this.inputName = this.dataScopeToHtmlArray(this.inputCheckBoxName);\r\n\r\n            this.initialValue = value;\r\n\r\n            this.links.value = this.provider + ':' + this.dataScope;\r\n        },\r\n\r\n        /**\r\n         * Get HTML array from data scope.\r\n         *\r\n         * @param {String} dataScopeString\r\n         * @returns {String}\r\n         */\r\n        dataScopeToHtmlArray: function (dataScopeString) {\r\n            var dataScopeArray, dataScope, reduceFunction;\r\n\r\n            /**\r\n             * Add new level of nesting.\r\n             *\r\n             * @param {String} prev\r\n             * @param {String} curr\r\n             * @returns {String}\r\n             */\r\n            reduceFunction = function (prev, curr) {\r\n                return prev + '[' + curr + ']';\r\n            };\r\n\r\n            dataScopeArray = dataScopeString.split('.');\r\n\r\n            dataScope = dataScopeArray.shift();\r\n            dataScope += dataScopeArray.reduce(reduceFunction, '');\r\n\r\n            return dataScope;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/form/element/input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (_, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            prefixName: '',\r\n            prefixElementName: '',\r\n            elementName: '',\r\n            suffixName: ''\r\n        },\r\n\r\n        /**\r\n         * Parses options and merges the result with instance\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n            this.configureDataScope();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure data scope.\r\n         */\r\n        configureDataScope: function () {\r\n            var recordId,\r\n                prefixName,\r\n                suffixName;\r\n\r\n            // Get recordId\r\n            recordId = this.parentName.split('.').last();\r\n\r\n            prefixName = this.dataScopeToHtmlArray(this.prefixName);\r\n            this.elementName = this.prefixElementName + recordId;\r\n\r\n            suffixName = '';\r\n\r\n            if (!_.isEmpty(this.suffixName) || _.isNumber(this.suffixName)) {\r\n                suffixName = '[' + this.suffixName + ']';\r\n            }\r\n            this.inputName = prefixName + '[' + this.elementName + ']' + suffixName;\r\n\r\n            suffixName = '';\r\n\r\n            if (!_.isEmpty(this.suffixName) || _.isNumber(this.suffixName)) {\r\n                suffixName = '.' + this.suffixName;\r\n            }\r\n\r\n            this.exportDataLink = 'data.' + this.prefixName + '.' + this.elementName + suffixName;\r\n            this.exports.value = this.provider + ':' + this.exportDataLink;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroy: function () {\r\n            this._super();\r\n\r\n            this.source.remove(this.exportDataLink);\r\n        },\r\n\r\n        /**\r\n         * Get HTML array from data scope.\r\n         *\r\n         * @param {String} dataScopeString\r\n         * @returns {String}\r\n         */\r\n        dataScopeToHtmlArray: function (dataScopeString) {\r\n            var dataScopeArray, dataScope, reduceFunction;\r\n\r\n            /**\r\n             * Add new level of nesting.\r\n             *\r\n             * @param {String} prev\r\n             * @param {String} curr\r\n             * @returns {String}\r\n             */\r\n            reduceFunction = function (prev, curr) {\r\n                return prev + '[' + curr + ']';\r\n            };\r\n\r\n            dataScopeArray = dataScopeString.split('.');\r\n\r\n            dataScope = dataScopeArray.shift();\r\n            dataScope += dataScopeArray.reduce(reduceFunction, '');\r\n\r\n            return dataScope;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/addtocart-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/uenc-processor',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Element, uencProcessor, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            label: ''\r\n        },\r\n\r\n        /**\r\n         * Prepare data, that will be inserted as data-mage-init attribute into button. With help of this attribute\r\n         * Add To * buttons can understand post data and urls\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getDataMageInit: function (row) {\r\n            return '{\"redirectUrl\": { \"url\" : \"'  + uencProcessor(row['add_to_cart_button'].url) + '\"}}';\r\n        },\r\n\r\n        /**\r\n         * Prepare Data-Post data that will be used in data-mage-init\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getDataPost: function (row) {\r\n            return uencProcessor(row['add_to_cart_button']['post_data']);\r\n        },\r\n\r\n        /**\r\n         * Check if product has required options.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        hasRequiredOptions: function (row) {\r\n            return row['add_to_cart_button']['required_options'];\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, \"Add to cart\" button can be shown or hide\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        isSalable: function (row) {\r\n            return row['is_salable'];\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, \"Add to cart\" button can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'add_to_cart', 'show_buttons');\r\n        },\r\n\r\n        /**\r\n         * Get button label.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/addtocompare-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/uenc-processor',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Column, uencProcessor, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            label: ''\r\n        },\r\n\r\n        /**\r\n         * Prepare Data-Post data that will be used in data-mage-init\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Array}\r\n         */\r\n        getDataPost: function (row) {\r\n            return uencProcessor(row['add_to_compare_button'].url ||\r\n                    row['add_to_compare_button']['post_data']);\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, \"Add to compare\" button can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'add_to_compare', 'show_buttons');\r\n        },\r\n\r\n        /**\r\n         * Get button label.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/learn-more.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Column, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        /**\r\n         * Depends on this option, \"Learn More\" link can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'learn_more', 'show_attributes');\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/name.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Column, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        /**\r\n         * Depends on this option, product name can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'name', 'show_attributes');\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/weight-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Get weight\r\n         * @returns {*|jQuery|HTMLElement}\r\n         */\r\n        $weight: function () {\r\n            return $('#weight');\r\n        },\r\n\r\n        /**\r\n         * Weight Switcher\r\n         * @returns {*|jQuery|HTMLElement}\r\n         */\r\n        $weightSwitcher: function () {\r\n            return $('[data-role=weight-switcher]');\r\n        },\r\n\r\n        /**\r\n         * Is locked\r\n         * @returns {*}\r\n         */\r\n        isLocked: function () {\r\n            return this.$weight().is('[data-locked]');\r\n        },\r\n\r\n        /**\r\n         * Disabled\r\n         */\r\n        disabled: function () {\r\n            this.$weight().addClass('ignore-validate').prop('disabled', true);\r\n        },\r\n\r\n        /**\r\n         * Enabled\r\n         */\r\n        enabled: function () {\r\n            this.$weight().removeClass('ignore-validate').prop('disabled', false);\r\n        },\r\n\r\n        /**\r\n         * Switch Weight\r\n         * @returns {*}\r\n         */\r\n        switchWeight: function () {\r\n            return this.productHasWeightBySwitcher() ? this.enabled() : this.disabled();\r\n        },\r\n\r\n        /**\r\n         * Hide weight switcher\r\n         */\r\n        hideWeightSwitcher: function () {\r\n            this.$weightSwitcher().hide();\r\n        },\r\n\r\n        /**\r\n         * Has weight switcher\r\n         * @returns {*}\r\n         */\r\n        hasWeightSwitcher: function () {\r\n            return this.$weightSwitcher().is(':visible');\r\n        },\r\n\r\n        /**\r\n         * Has weight\r\n         * @returns {*}\r\n         */\r\n        hasWeight: function () {\r\n            return this.$weight.is(':visible');\r\n        },\r\n\r\n        /**\r\n         * Product has weight\r\n         * @returns {Bool}\r\n         */\r\n        productHasWeightBySwitcher: function () {\r\n            return $('input:checked', this.$weightSwitcher()).val() === '1';\r\n        },\r\n\r\n        /**\r\n         * Change\r\n         * @param {String} data\r\n         */\r\n        change: function (data) {\r\n            var value = data !== undefined ? +data : !this.productHasWeightBySwitcher();\r\n\r\n            $('input[value=' + value + ']', this.$weightSwitcher()).prop('checked', true);\r\n            this.switchWeight();\r\n        },\r\n\r\n        /**\r\n         * Constructor component\r\n         */\r\n        'Magento_Catalog/js/product/weight-handler': function () {\r\n            this.bindAll();\r\n\r\n            if (this.hasWeightSwitcher()) {\r\n                this.switchWeight();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            this.$weightSwitcher().find('input').on('change', this.switchWeight.bind(this));\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/js/product/list/column-status-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    return _.extend({\r\n        /**\r\n         * Check whether we can show column depends on server settings or not\r\n         *\r\n         * @param {Object} source\r\n         * @param {String} attributeCode\r\n         * @param {String} type\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function (source, attributeCode, type) {\r\n            var attributes;\r\n\r\n            if (!source[type]) {\r\n                return false;\r\n            }\r\n\r\n            attributes = source[type].split(',');\r\n\r\n            return _.contains(attributes, attributeCode);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/grid/listing'\r\n], function (ko, _, Listing) {\r\n    'use strict';\r\n\r\n    return Listing.extend({\r\n        defaults: {\r\n            additionalClasses: '',\r\n            filteredRows: {},\r\n            limit: 5,\r\n            listens: {\r\n                elems: 'filterRowsFromCache',\r\n                '${ $.provider }:data.items': 'filterRowsFromServer'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.filteredRows = ko.observable();\r\n            this.initProductsLimit();\r\n            this.hideLoader();\r\n        },\r\n\r\n        /**\r\n         * Initialize product limit\r\n         * Product limit can be configured through Ui component.\r\n         * Product limit are present in widget form\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initProductsLimit: function () {\r\n            if (this.source['page_size']) {\r\n                this.limit = this.source['page_size'];\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    rows: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sort and filter rows, that are already in magento storage cache\r\n         *\r\n         * @return void\r\n         */\r\n        filterRowsFromCache: function () {\r\n            this._filterRows(this.rows);\r\n        },\r\n\r\n        /**\r\n         * Sort and filter rows, that are come from backend\r\n         *\r\n         * @param {Object} rows\r\n         */\r\n        filterRowsFromServer: function (rows) {\r\n            this._filterRows(rows);\r\n        },\r\n\r\n        /**\r\n         * Filter rows by limit and sort them\r\n         *\r\n         * @param {Array} rows\r\n         * @private\r\n         */\r\n        _filterRows: function (rows) {\r\n            this.filteredRows(_.sortBy(rows, 'added_at').reverse().slice(0, this.limit));\r\n        },\r\n\r\n        /**\r\n         * Can retrieve product url\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getUrl: function (row) {\r\n            return row.url;\r\n        },\r\n\r\n        /**\r\n         * Get product attribute by code.\r\n         *\r\n         * @param {String} code\r\n         * @return {Object}\r\n         */\r\n        getComponentByCode: function (code) {\r\n            var elems = this.elems() ? this.elems() : ko.getObservable(this, 'elems'),\r\n                component;\r\n\r\n            component = _.filter(elems, function (elem) {\r\n                return elem.index === code;\r\n            }, this).pop();\r\n\r\n            return component;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/final-price.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiCollection'\r\n], function (_, registry, utils, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            label: false,\r\n            headerTmpl: 'ui/grid/columns/text',\r\n            showMinimalPrice: false,\r\n            showMaximumPrice: false,\r\n            useLinkForAsLowAs: false,\r\n            bodyTmpl: 'Magento_Catalog/product/final_price',\r\n            priceWrapperCssClasses: '',\r\n            priceWrapperAttr: {}\r\n        },\r\n\r\n        /**\r\n         * Get product final price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} final price html\r\n         */\r\n        getPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['final_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product regular price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} regular price html\r\n         */\r\n        getRegularPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if product has a price range.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        hasPriceRange: function (row) {\r\n            return row['price_info']['max_regular_price'] !== row['price_info']['min_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if product has special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} special price html\r\n         */\r\n        hasSpecialPrice: function (row) {\r\n            return row['price_info']['regular_price'] > row['price_info']['final_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if product has minimal price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal price html\r\n         */\r\n        isMinimalPrice: function (row) {\r\n            return row['price_info']['minimal_price'] < row['price_info']['final_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product minimal price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal price html\r\n         */\r\n        getMinimalPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['minimal_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if product is salable.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        isSalable: function (row) {\r\n            return row['is_salable'];\r\n        },\r\n\r\n        /**\r\n         * Get product maximum price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} maximum price html\r\n         */\r\n        getMaxPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['max_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product maximum regular price in case of price range and special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} maximum regular price html\r\n         */\r\n        getMaxRegularPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['max_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product minimal regular price in case of price range and special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal regular price html\r\n         */\r\n        getMinRegularPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['min_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Get adjustments names and return as string.\r\n         *\r\n         * @return {String} adjustments classes\r\n         */\r\n        getAdjustmentCssClasses: function () {\r\n            return _.pluck(this.getAdjustments(), 'index').join(' ');\r\n        },\r\n\r\n        /**\r\n         * Get product minimal price as number.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} minimal price amount\r\n         */\r\n        getMinimalPriceAmount: function (row) {\r\n            return row['price_info']['minimal_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product minimal regular price as number in case of special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} minimal regular price amount\r\n         */\r\n        getMinimalRegularPriceAmount: function (row) {\r\n            return row['price_info']['min_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product maximum price as number.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} maximum price amount\r\n         */\r\n        getMaximumPriceAmount: function (row) {\r\n            return row['price_info']['max_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product maximum regular price as number in case of special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} maximum regular price amount\r\n         */\r\n        getMaximumRegularPriceAmount: function (row) {\r\n            return row['price_info']['max_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if minimal regular price exist for product.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        showMinRegularPrice: function (row) {\r\n            return this.getMinimalPriceAmount(row) < this.getMinimalRegularPriceAmount(row);\r\n        },\r\n\r\n        /**\r\n         * Check if maximum regular price exist for product.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        showMaxRegularPrice: function (row) {\r\n            return this.getMaximumPriceAmount(row) < this.getMaximumRegularPriceAmount(row);\r\n        },\r\n\r\n        /**\r\n         * Get path to the columns' body template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Get all price adjustments.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getAdjustments: function () {\r\n            var adjustments = this.elems();\r\n\r\n            _.each(adjustments, function (adjustment) {\r\n                adjustment.setPriceType(this.priceType);\r\n                adjustment.source = this.source;\r\n            }, this);\r\n\r\n            return adjustments;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/image.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (_, Element, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_Catalog/product/list/columns/image',\r\n            imageCode: 'default',\r\n            image: {}\r\n        },\r\n\r\n        /**\r\n         * Find image by code in scope of images\r\n         *\r\n         * @param {Object} images\r\n         * @returns {*|T}\r\n         */\r\n        getImage: function (images) {\r\n            return _.filter(images, function (image) {\r\n                return this.imageCode === image.code;\r\n            }, this).pop();\r\n        },\r\n\r\n        /**\r\n         * Get image path.\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getImageUrl: function (row) {\r\n            return this.getImage(row.images).url;\r\n        },\r\n\r\n        /**\r\n         * Get image box width.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getWidth: function (row) {\r\n            return this.getImage(row.images).width;\r\n        },\r\n\r\n        /**\r\n         * Get image box height.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getHeight: function (row) {\r\n            return this.getImage(row.images).height;\r\n        },\r\n\r\n        /**\r\n         * Get resized image width.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getResizedImageWidth: function (row) {\r\n            return this.getImage(row.images)['resized_width'];\r\n        },\r\n\r\n        /**\r\n         * Get resized image height.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getResizedImageHeight: function (row) {\r\n            return this.getImage(row.images)['resized_height'];\r\n        },\r\n\r\n        /**\r\n         * Get image alt text.\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getLabel: function (row) {\r\n            if (!this.imageExists(row)) {\r\n                return this._super();\r\n            }\r\n\r\n            return this.getImage(row.images).label;\r\n        },\r\n\r\n        /**\r\n         * Check if image exist.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        imageExists: function (row) {\r\n            return this.getImage(row.images) !== 'undefined';\r\n        },\r\n\r\n        /**\r\n         * Check if component must be shown.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'image', 'show_attributes');\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/price-box.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiCollection',\r\n    'Magento_Catalog/js/product/list/column-status-validator',\r\n    'uiLayout'\r\n], function (ko, _, registry, utils, Collection, columnStatusValidator, layout) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            label: '',\r\n            hasSpecialPrice: false,\r\n            showMinimalPrice: false,\r\n            useLinkForAsLowAs: false,\r\n            visible: true,\r\n            headerTmpl: 'ui/grid/columns/text',\r\n            bodyTmpl: 'Magento_Catalog/product/price/price_box',\r\n            disableAction: false,\r\n            controlVisibility: true,\r\n            sortable: false,\r\n            sorting: false,\r\n            draggable: true,\r\n            fieldClass: {},\r\n            renders: {\r\n                default: {}\r\n            },\r\n            ignoreTmpls: {\r\n                fieldAction: true\r\n            },\r\n            statefull: {\r\n                visible: true,\r\n                sorting: true\r\n            },\r\n            imports: {\r\n                exportSorting: 'sorting'\r\n            },\r\n            listens: {\r\n                elems: ''\r\n            },\r\n            modules: {\r\n                source: '${ $.provider }'\r\n            },\r\n            pricesInit: {}\r\n        },\r\n\r\n        /**\r\n         * Sort prices api\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        sort: function () {\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check whether is allowed to render price or not\r\n         *\r\n         * @returns {*}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'price', 'show_attributes');\r\n        },\r\n\r\n        /**\r\n         * Retrieve array of prices, that should be rendered for specific product\r\n         *\r\n         * @param {Array} row\r\n         * @return {Array}\r\n         */\r\n        getPrices: function (row) {\r\n            var elems = this.elems() ? this.elems() : ko.getObservable(this, 'elems'),\r\n                result;\r\n\r\n            //we cant take type of product from row\r\n            this.initPrices(row);\r\n            result = _.filter(elems, function (elem) {\r\n                return elem.productType === row.type;\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Recursive Merging of objects\r\n         *\r\n         * @param {Array} target\r\n         * @param {Array} source\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _deepObjectExtend: function (target, source) {\r\n            var _target = utils.copy(target);\r\n\r\n            _.each(source, function (value, key) {\r\n                if (_.keys(value).length && typeof _target[key] !== 'undefined') {\r\n                    _target[key] = this._deepObjectExtend(_target[key], value);\r\n                } else {\r\n                    _target[key] = value;\r\n                }\r\n            }, this);\r\n\r\n            return _target;\r\n        },\r\n\r\n        /**\r\n         * Init price type box, in cases when product type has custom component or bodyTmpl\r\n         *\r\n         * @param {String} productType\r\n         * @private\r\n         */\r\n        _initPriceWithCustomMetaData: function (productType) {\r\n            var price = this._deepObjectExtend(\r\n                this.renders.prices['default'],\r\n                this.renders.prices[productType]\r\n            );\r\n\r\n            price.name = productType + '.default';\r\n            price.parent = this.name;\r\n            price.source = this.source;\r\n            price.productType = productType;\r\n            layout([price]);\r\n        },\r\n\r\n        /**\r\n         * Init Prices by product type and add them to layout\r\n         *\r\n         * @param {Array} _priceData\r\n         * @param {String} productType\r\n         * @private\r\n         */\r\n        _initPricesForProductType: function (_priceData, productType) {\r\n            var prices = [];\r\n\r\n            this._setPriceNamesToPrices(_priceData, productType);\r\n            _.sortBy(_priceData, this._comparePrices);\r\n\r\n            _.each(_priceData, function (priceData) {\r\n                if (!priceData.component) {\r\n                    return;\r\n                }\r\n\r\n                priceData.parent = this.name;\r\n                priceData.provider = this.provider;\r\n                priceData.productType = productType;\r\n                priceData = utils.template(priceData, this);\r\n                prices.push(priceData);\r\n            }, this);\r\n\r\n            layout(prices);\r\n        },\r\n\r\n        /**\r\n         * Init dynamic price components\r\n         *\r\n         * @param {Array} row\r\n         * @returns {void}\r\n         */\r\n        initPrices: function (row) {\r\n            var _priceData = [],\r\n                productType = row.type,\r\n                defaultPrice = this.renders.prices['default'];\r\n\r\n            if (this.pricesInit[productType]) {\r\n                return true;\r\n            }\r\n\r\n            this.pricesInit[productType] = true;\r\n\r\n            if (this.renders.prices[productType] && this._needToApplyCustomTemplate(this.renders.prices[productType])) {\r\n                return this._initPriceWithCustomMetaData(productType);\r\n            }\r\n\r\n            if (this.renders.prices[productType] && this.renders.prices[productType].children) {\r\n                _priceData = this._deepObjectExtend(defaultPrice.children, this.renders.prices[productType].children);\r\n            } else {\r\n                _priceData = defaultPrice.children;\r\n            }\r\n\r\n            return this._initPricesForProductType(_priceData, productType);\r\n        },\r\n\r\n        /**\r\n         * Set name to all price components\r\n         *\r\n         * @param {Array} prices\r\n         * @param {String} productType\r\n         * @private\r\n         */\r\n        _setPriceNamesToPrices: function (prices, productType) {\r\n            _.each(prices, function (price, name) {\r\n                price.priceType = name;\r\n                price.name = name + '.' + productType;\r\n            });\r\n\r\n            return prices;\r\n        },\r\n\r\n        /**\r\n         * Sort callback to compare prices by sort order\r\n         *\r\n         * @param {Number} firstPrice\r\n         * @param {Number} secondPrice\r\n         * @returns {Number}\r\n         * @private\r\n         */\r\n        _comparePrices: function (firstPrice, secondPrice) {\r\n            if (firstPrice.sortOrder < secondPrice.sortOrder) {\r\n                return -1;\r\n            }\r\n\r\n            if (firstPrice.sortOrder > secondPrice.sortOrder) {\r\n                return 1;\r\n            }\r\n\r\n            return 0;\r\n        },\r\n\r\n        /**\r\n         * Check whether metadata of product type prices was changed, and we should\r\n         * to apply custom template or custom component\r\n         *\r\n         * @param {Array} productData\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _needToApplyCustomTemplate: function (productData) {\r\n            return productData.bodyTmpl || productData.component;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the columns' body template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Get price label.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/pricetype-box.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'uiCollection'\r\n], function (ko, _, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        /**\r\n         * Find from all price ui components, price with specific code, init source on it and set priceType\r\n         *\r\n         * @param {String} code\r\n         * @returns {*|T}\r\n         */\r\n        getPriceByCode: function (code) {\r\n            var elems = this.elems() ? this.elems() : ko.getObservable(this, 'elems'),\r\n                price;\r\n\r\n            price = _.filter(elems, function (elem) {\r\n                return elem.index.split('.').shift() === code;\r\n            }, this).pop();\r\n\r\n            price.source = this.source();\r\n            price.priceType = code;\r\n\r\n            return price;\r\n        },\r\n\r\n        /**\r\n         * Retrieve body template\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Check whether price has price range, depends on different options, that can be choose\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        hasPriceRange: function (row) {\r\n            return row['price_info']['max_regular_price'] !== row['price_info']['min_regular_price'];\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/tier-price/percentage-processor.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiElement',\r\n    'underscore',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'Magento_Catalog/js/utils/percentage-price-calculator'\r\n], function (Element, _, $, percentagePriceCalculator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            priceElem: '${ $.parentName }.price',\r\n            selector: 'input',\r\n            imports: {\r\n                priceValue: '${ $.priceElem }:priceValue'\r\n            },\r\n            exports: {\r\n                calculatedVal: '${ $.priceElem }:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            _.bindAll(this, 'initPriceListener', 'onInput');\r\n\r\n            $.async({\r\n                component: this.priceElem,\r\n                selector: this.selector\r\n            }, this.initPriceListener);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe(['visible']);\r\n        },\r\n\r\n        /**\r\n         * Handles keyup event on price input.\r\n         *\r\n         * {@param} HTMLElement elem\r\n         */\r\n        initPriceListener: function (elem) {\r\n            $(elem).on('keyup.priceCalc', this.onInput);\r\n        },\r\n\r\n        /**\r\n         * Delegates calculation of the price input value to percentagePriceCalculator.\r\n         *\r\n         * {@param} object event\r\n         */\r\n        onInput: function (event) {\r\n            var value = event.currentTarget.value;\r\n\r\n            if (value.slice(-1) === '%') {\r\n                value = percentagePriceCalculator(this.priceValue, value);\r\n                this.set('calculatedVal', value);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/tier-price/value-type-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'uiRegistry',\r\n    'underscore'\r\n], function (Select, uiRegistry, _) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            prices: {}\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .prepareForm();\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        setInitialValue: function () {\r\n            this.initialValue = this.getInitialValue();\r\n\r\n            if (this.value.peek() !== this.initialValue) {\r\n                this.value(this.initialValue);\r\n            }\r\n\r\n            this.isUseDefault(this.disabled());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        prepareForm: function () {\r\n            var elements = this.getElementsByPrices(),\r\n                prices = this.prices,\r\n                currencyType = _.keys(prices)[0],\r\n                select = this;\r\n\r\n            uiRegistry.get(elements, function () {\r\n                _.each(arguments, function (currentValue) {\r\n                    if (parseFloat(currentValue.value()) > 0) {\r\n                        _.each(prices, function (priceValue, priceKey) {\r\n                            if (priceValue === currentValue.name) {\r\n                                currencyType = priceKey;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                select.value(currencyType);\r\n                select.on('value', select.onUpdate.bind(select));\r\n                select.onUpdate();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @returns {Array}\r\n         */\r\n        getElementsByPrices: function () {\r\n            var elements = [];\r\n\r\n            _.each(this.prices, function (currentValue) {\r\n                elements.push(currentValue);\r\n            });\r\n\r\n            return elements;\r\n        },\r\n\r\n        /**\r\n         * Callback that fires when 'value' property is updated\r\n         */\r\n        onUpdate: function () {\r\n            var value = this.value(),\r\n                prices = this.prices,\r\n                select = this,\r\n                parentDataScopeArr = this.dataScope.split('.'),\r\n                parentDataScope,\r\n                elements = this.getElementsByPrices();\r\n\r\n            parentDataScopeArr.pop();\r\n            parentDataScope = parentDataScopeArr.join('.');\r\n\r\n            uiRegistry.get(elements, function () {\r\n                var sourceData = select.source.get(parentDataScope);\r\n\r\n                _.each(arguments, function (currentElement) {\r\n                    var index;\r\n\r\n                    _.each(prices, function (priceValue, priceKey) {\r\n                        if (priceValue === currentElement.name) {\r\n                            index = priceKey;\r\n                        }\r\n                    });\r\n\r\n                    if (value === index) {\r\n                        currentElement.visible(true);\r\n                        sourceData[currentElement.index] = currentElement.value();\r\n                    } else {\r\n                        currentElement.value('');\r\n                        currentElement.visible(false);\r\n                        delete sourceData[currentElement.index];\r\n                    }\r\n                });\r\n                select.source.set(parentDataScope, sourceData);\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/utils/percentage-price-calculator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine(['Magento_Ui/js/lib/validation/utils'], function (utils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Calculates the price input value when entered percentage value.\r\n     *\r\n     * @param {String} price\r\n     * @param {String} input\r\n     *\r\n     * @returns {String}\r\n     */\r\n    return function (price, input) {\r\n        var result,\r\n            lastInputSymbol = input.slice(-1),\r\n            inputPercent = input.slice(0, -1),\r\n            parsedPercent = utils.parseNumber(inputPercent),\r\n            parsedPrice = utils.parseNumber(price);\r\n\r\n        if (lastInputSymbol !== '%') {\r\n            result = input;\r\n        } else if (\r\n            input === '%' ||\r\n            isNaN(parsedPrice) ||\r\n            parsedPercent != inputPercent || /* eslint eqeqeq:0 */\r\n            isNaN(parsedPercent) ||\r\n            input === ''\r\n        ) {\r\n            result = '';\r\n        } else if (parsedPercent > 100) {\r\n            result = '0.00';\r\n        } else if (lastInputSymbol === '%') {\r\n            result = parsedPrice - parsedPrice * (inputPercent / 100);\r\n            result = result.toFixed(2);\r\n        } else {\r\n            result = input;\r\n        }\r\n\r\n        return result;\r\n    };\r\n});\r\n","Magento_CatalogInventory/js/components/qty-validator-changer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            valueUpdate: 'input'\r\n        },\r\n\r\n        /**\r\n         * Change validator\r\n         */\r\n        handleChanges: function (value) {\r\n            var isDigits = value !== 1;\r\n\r\n            this.validation['validate-integer'] = isDigits;\r\n            this.validation['less-than-equals-to'] = isDigits ? 99999999 : 99999999.9999;\r\n            this.validate();\r\n        }\r\n    });\r\n});\r\n","Magento_CatalogInventory/js/components/use-config-min-sale-qty.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox',\r\n    'underscore',\r\n    'uiRegistry'\r\n], function (checkbox, _, registry) {\r\n    'use strict';\r\n\r\n    return checkbox.extend({\r\n        defaults: {\r\n            valueFromConfig: ''\r\n        },\r\n\r\n        /**\r\n         * @returns {Element}\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe(['valueFromConfig']);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.onCheckedChanged(this.checked());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        'onCheckedChanged': function (newChecked) {\r\n            var valueFromConfig = this.valueFromConfig();\r\n\r\n            if (newChecked && (_.isArray(valueFromConfig) && valueFromConfig.length === 0 || valueFromConfig === 1)) {\r\n                this.changeVisibleDisabled(this.inputField, true, true, 1);\r\n            } else if (newChecked && _.isObject(valueFromConfig)) {\r\n                this.changeVisibleDisabled(this.inputField, false, true, null);\r\n                this.changeVisibleDisabled(this.dynamicRowsField, true, true, null);\r\n            } else if (newChecked && _.isNumber(valueFromConfig)) {\r\n                this.changeVisibleDisabled(this.inputField, true, true, null);\r\n                this.changeVisibleDisabled(this.dynamicRowsField, false, true, null);\r\n            } else {\r\n                this.changeVisibleDisabled(this.inputField, true, false, null);\r\n                this.changeVisibleDisabled(this.dynamicRowsField, false, true, null);\r\n            }\r\n\r\n            this._super(newChecked);\r\n        },\r\n\r\n        /**\r\n         * Change visible and disabled\r\n         *\r\n         * @param {String} filter\r\n         * @param {Boolean} visible\r\n         * @param {Boolean} disabled\r\n         * @param {Null|Number} valueFromConfig\r\n         */\r\n        changeVisibleDisabled: function (filter, visible, disabled, valueFromConfig) {\r\n            registry.async(filter)(\r\n                function (currentComponent) {\r\n                    var initialValue = currentComponent.initialValue;\r\n\r\n                    if (_.isString(initialValue) || initialValue === 0 || valueFromConfig === 1) {\r\n                        currentComponent.value(1);\r\n                    } else if (initialValue) {\r\n                        currentComponent.value(initialValue);\r\n                    }\r\n\r\n                    currentComponent.visible(visible);\r\n                    currentComponent.disabled(disabled);\r\n                }\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_CatalogInventory/js/components/use-config-settings.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (checkbox) {\r\n    'use strict';\r\n\r\n    return checkbox.extend({\r\n        defaults: {\r\n            valueFromConfig: '',\r\n            linkedValue: ''\r\n        },\r\n\r\n        /**\r\n         * @returns {Element}\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe(['valueFromConfig', 'linkedValue']);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        'onCheckedChanged': function (newChecked) {\r\n            if (newChecked) {\r\n                this.linkedValue(this.valueFromConfig());\r\n            }\r\n\r\n            this._super(newChecked);\r\n        }\r\n    });\r\n});\r\n","Magento_Checkout/js/model/default-post-code-resolver.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Define necessity of using default post code value\r\n     */\r\n    var useDefaultPostCode;\r\n\r\n    return {\r\n        /**\r\n         * Resolve default post code\r\n         *\r\n         * @returns {String|null}\r\n         */\r\n        resolve: function () {\r\n            return useDefaultPostCode ?  window.checkoutConfig.defaultPostcode : null;\r\n        },\r\n\r\n        /**\r\n         * Set state to useDefaultPostCode variable\r\n         *\r\n         * @param {Boolean} shouldUseDefaultPostCode\r\n         * @returns {underscore}\r\n         */\r\n        setUseDefaultPostCode: function (shouldUseDefaultPostCode) {\r\n            useDefaultPostCode = shouldUseDefaultPostCode;\r\n\r\n            return this;\r\n        }\r\n    };\r\n});\r\n","Magento_Cms/js/folder-tree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'jquery/jstree/jquery.jstree'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.folderTree', {\r\n        options: {\r\n            root: 'root',\r\n            rootName: 'Root',\r\n            url: '',\r\n            currentPath: ['root'],\r\n            tree: {\r\n                'plugins': ['themes', 'json_data', 'ui', 'hotkeys'],\r\n                'themes': {\r\n                    'theme': 'default',\r\n                    'dots': false,\r\n                    'icons': true\r\n                }\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var options = this.options,\r\n                treeOptions = $.extend(\r\n                    true,\r\n                    {},\r\n                    options.tree,\r\n                    {\r\n                        'json_data': {\r\n                            data: {\r\n                                data: options.rootName,\r\n                                state: 'closed',\r\n                                metadata: {\r\n                                    node: {\r\n                                        id: options.root,\r\n                                        text: options.rootName\r\n                                    }\r\n                                },\r\n                                attr: {\r\n                                    'data-id': options.root,\r\n                                    id: options.root\r\n                                }\r\n                            },\r\n                            ajax: {\r\n                                url: options.url,\r\n\r\n                                /**\r\n                                 * @param {Object} node\r\n                                 * @return {Object}\r\n                                 */\r\n                                data: function (node) {\r\n                                    return {\r\n                                        node: node.data('id'),\r\n                                        'form_key': window.FORM_KEY\r\n                                    };\r\n                                },\r\n                                success: this._convertData\r\n                            }\r\n                        }\r\n                    }\r\n                );\r\n\r\n            this.element.jstree(treeOptions).on('loaded.jstree', $.proxy(this.treeLoaded, this));\r\n        },\r\n\r\n        /**\r\n         * Tree loaded.\r\n         */\r\n        treeLoaded: function () {\r\n            var path = this.options.currentPath,\r\n                tree = this.element,\r\n                lastExistentFolderEl,\r\n\r\n                /**\r\n                 * Recursively open folders specified in path array.\r\n                 */\r\n                recursiveOpen = function () {\r\n                    var folderEl = $('[data-id=\"' + path.pop() + '\"]');\r\n\r\n                    // if folder doesn't exist, select the last opened folder\r\n                    if (!folderEl.length) {\r\n                        tree.jstree('select_node', lastExistentFolderEl);\r\n\r\n                        return;\r\n                    }\r\n\r\n                    lastExistentFolderEl = folderEl;\r\n\r\n                    if (path.length) {\r\n                        tree.jstree('open_node', folderEl, recursiveOpen);\r\n                    } else {\r\n                        tree.jstree('open_node', folderEl, function () {\r\n                            tree.jstree('select_node', folderEl);\r\n                        });\r\n                    }\r\n                };\r\n\r\n            recursiveOpen();\r\n        },\r\n\r\n        /**\r\n         * @param {*} data\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _convertData: function (data) {\r\n            return $.map(data, function (node) {\r\n                var codeCopy = $.extend({}, node);\r\n\r\n                return {\r\n                    data: node.text,\r\n                    attr: {\r\n                        'data-id': node.id,\r\n                        id: node.id\r\n                    },\r\n                    metadata: {\r\n                        node: codeCopy\r\n                    },\r\n                    state: node.state || 'closed'\r\n                };\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.folderTree;\r\n});\r\n","Magento_ConfigurableProduct/js/configurable-type-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/catalog/type-events',\r\n    'collapsible',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'domReady!'\r\n], function ($, productType) {\r\n    'use strict';\r\n\r\n    return {\r\n        $block: null,\r\n        hasVariations: null,\r\n        configurationSectionMessageHandler: (function () {\r\n            var title = $('[data-role=\"product-create-configuration-info\"]'),\r\n                buttons = $('[data-action=\"product-create-configuration-buttons\"]'),\r\n                newText = 'Configurations cannot be created for a standard product with downloadable files.' +\r\n                ' To create configurations, first remove all downloadable files.',\r\n                oldText = title.text();\r\n\r\n            return function (change) {\r\n                if (change) {\r\n                    title.text(newText);\r\n                    buttons.hide();\r\n                } else {\r\n                    title.text(oldText);\r\n                    buttons.show();\r\n                }\r\n            };\r\n        }()),\r\n\r\n        /**\r\n         * Set element disabled\r\n         * @param {Object} $element - jquery instance element\r\n         * @param {Bool} state\r\n         * @param {Bool} triggerEvent\r\n         * @private\r\n         */\r\n        _setElementDisabled: function ($element, state, triggerEvent) {\r\n            if (!$element.is('[data-locked]')) {\r\n                $element.prop('disabled', state);\r\n\r\n                if (triggerEvent) {\r\n                    $element.trigger('change');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show\r\n         */\r\n        show: function () {\r\n            this.configurationSectionMessageHandler(false);\r\n        },\r\n\r\n        /**\r\n         * Hide\r\n         */\r\n        hide: function () {\r\n            this.configurationSectionMessageHandler(true);\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            $(document).on('changeConfigurableTypeProduct', function (event, isConfigurable) {\r\n                $(document).trigger('setTypeProduct', isConfigurable ?\r\n                    'configurable' :\r\n                    productType.type.init === 'configurable' ? 'simple' : productType.type.init\r\n                );\r\n            });\r\n            $(document).on('changeTypeProduct', this._initType.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Init type\r\n         * @private\r\n         */\r\n        _initType: function () {\r\n\r\n            /*var suggestContainer = $('#product-template-suggest-container .action-dropdown > .action-toggle');\r\n\r\n\r\n            if (productType.type.current === 'configurable') {\r\n                this._setElementDisabled(suggestContainer.addClass('disabled'), true);\r\n                this._setElementDisabled($('#inventory_qty'), true);\r\n                this._setElementDisabled($('#inventory_stock_availability'), false);\r\n                this._setElementDisabled($('#qty'), true, true);\r\n                this._setElementDisabled($('#quantity_and_stock_status'), false, false);\r\n            } else {\r\n                this._setElementDisabled(suggestContainer.removeClass('disabled'), false);\r\n                this._setElementDisabled($('#inventory_qty'), false);\r\n                this._setElementDisabled($('#inventory_stock_availability'), true);\r\n                this._setElementDisabled($('#qty'), false, true);\r\n            }\r\n            */\r\n\r\n            /*if (['simple', 'virtual', 'configurable'].indexOf(productType.type.current) < 0) {\r\n                this.hide();\r\n            } else {\r\n                this.show();\r\n            }*/\r\n\r\n            this.show();\r\n        },\r\n\r\n        /**\r\n         * Constructor component\r\n         * @param {Object} data - this backend data\r\n         */\r\n        'Magento_ConfigurableProduct/js/configurable-type-handler': function (data) {\r\n            this.$block = $(data.blockId + ' input[name=\"attributes[]\"]');\r\n            this.hasVariations = data.hasVariations;\r\n\r\n            //advancedPricingHandler.init();\r\n            //priceTypeHandler.init();\r\n\r\n            /*if (productType.type.init === 'configurable' && !this.hasVariations) {\r\n                $(document).trigger('setTypeProduct', 'simple');\r\n            }*/\r\n            $(document).trigger('setTypeProduct', 'simple');\r\n\r\n            this.bindAll();\r\n            this._initType();\r\n        }\r\n    };\r\n});\r\n","Magento_ConfigurableProduct/js/configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**************************** CONFIGURABLE PRODUCT **************************/\r\n/* global Product, optionsPrice */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'mage/translate',\r\n    'prototype'\r\n], function (jQuery, mageTemplate) {\r\n    'use strict';\r\n\r\n    if (typeof Product == 'undefined') {\r\n        window.Product = {};\r\n    }\r\n\r\n    Product.Config = Class.create();\r\n    Product.Config.prototype = {\r\n        /**\r\n         * Initialize function.\r\n         *\r\n         * @param {Object} config\r\n         */\r\n        initialize: function (config) {\r\n            var separatorIndex, paramsStr, urlValues, i, childSettings, prevSetting, nextSetting;\r\n\r\n            // Magic preprocessing\r\n            // TODO MAGETWO-31539\r\n            config.taxConfig = {\r\n                showBothPrices: false,\r\n                inclTaxTitle: jQuery.mage.__('Incl. Tax')\r\n            };\r\n\r\n            this.config     = config;\r\n            this.taxConfig  = this.config.taxConfig;\r\n\r\n            if (config.containerId) {\r\n                this.settings   = $$('#' + config.containerId + ' ' + '.super-attribute-select');\r\n            } else {\r\n                this.settings   = $$('.super-attribute-select');\r\n            }\r\n            this.state      = new Hash();\r\n            this.priceTemplate = mageTemplate(this.config.template);\r\n            this.prices     = config.prices;\r\n            this.values     = {};\r\n\r\n            // Set default values from config\r\n            if (config.defaultValues) {\r\n                this.values = config.defaultValues;\r\n            }\r\n\r\n            // Overwrite defaults by url\r\n            separatorIndex = window.location.href.indexOf('#');\r\n\r\n            if (separatorIndex != -1) { //eslint-disable-line eqeqeq\r\n                paramsStr = window.location.href.substr(separatorIndex + 1);\r\n                urlValues = paramsStr.toQueryParams();\r\n\r\n                for (i in urlValues) { //eslint-disable-line guard-for-in\r\n                    this.values[i] = urlValues[i];\r\n                }\r\n            }\r\n\r\n            // Overwrite defaults by inputs values if needed\r\n            if (config.inputsInitialized) {\r\n                this.values = {};\r\n                this.settings.each(function (element) {\r\n                    var attributeId;\r\n\r\n                    if (element.value) {\r\n                        attributeId = element.id.replace(/[a-z]*/, '');\r\n                        this.values[attributeId] = element.value;\r\n                    }\r\n                }.bind(this));\r\n            }\r\n\r\n            // Put events to check select reloads\r\n            this.settings.each(function (element) {\r\n                Event.observe(element, 'change', this.configure.bind(this));\r\n            }.bind(this));\r\n\r\n            // fill state\r\n            this.settings.each(function (element) {\r\n                var attributeId = element.id.replace(/[a-z]*/, '');\r\n\r\n                if (attributeId && this.config.attributes[attributeId]) {\r\n                    element.config = this.config.attributes[attributeId];\r\n                    element.attributeId = attributeId;\r\n                    this.state[attributeId] = false;\r\n                }\r\n            }.bind(this));\r\n\r\n            // Init settings dropdown\r\n            childSettings = [];\r\n\r\n            for (i = this.settings.length - 1; i >= 0; i--) {\r\n                prevSetting = this.settings[i - 1] ? this.settings[i - 1] : false;\r\n                nextSetting = this.settings[i + 1] ? this.settings[i + 1] : false;\r\n\r\n                if (i === 0) {\r\n                    this.fillSelect(this.settings[i]);\r\n                } else {\r\n                    this.settings[i].disabled = true;\r\n                }\r\n                $(this.settings[i]).childSettings = childSettings.clone();\r\n                $(this.settings[i]).prevSetting   = prevSetting;\r\n                $(this.settings[i]).nextSetting   = nextSetting;\r\n                childSettings.push(this.settings[i]);\r\n            }\r\n\r\n            // Set values to inputs\r\n            this.configureForValues();\r\n            document.observe('dom:loaded', this.configureForValues.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Configure for values.\r\n         */\r\n        configureForValues: function () {\r\n            if (this.values) {\r\n                this.settings.each(function (element) {\r\n                    var attributeId = element.attributeId;\r\n\r\n                    element.value = typeof this.values[attributeId] === 'undefined' ? '' : this.values[attributeId];\r\n                    this.configureElement(element);\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} event\r\n         */\r\n        configure: function (event) {\r\n            var element = Event.element(event);\r\n\r\n            this.configureElement(element);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        configureElement: function (element) {\r\n            this.reloadOptionLabels(element);\r\n\r\n            if (element.value) {\r\n                this.state[element.config.id] = element.value;\r\n\r\n                if (element.nextSetting) {\r\n                    element.nextSetting.disabled = false;\r\n                    this.fillSelect(element.nextSetting);\r\n                    this.resetChildren(element.nextSetting);\r\n                }\r\n            } else {\r\n                this.resetChildren(element);\r\n            }\r\n            this.reloadPrice();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        reloadOptionLabels: function (element) {\r\n            var selectedPrice = 0,\r\n                option, i;\r\n\r\n            if (element.options[element.selectedIndex] && element.options[element.selectedIndex].config) {\r\n                option = element.options[element.selectedIndex].config;\r\n                selectedPrice = parseFloat(this.config.optionPrices[option.allowedProducts[0]].finalPrice.amount);\r\n            }\r\n            element.setAttribute('price', selectedPrice);\r\n\r\n            for (i = 0; i < element.options.length; i++) {\r\n                if (element.options[i].config) {\r\n                    element.options[i].setAttribute('price', selectedPrice);\r\n                    element.options[i].setAttribute('summarizePrice', 0);\r\n                    element.options[i].text = this.getOptionLabel(element.options[i].config, selectedPrice);\r\n                }\r\n            }\r\n        },\r\n\r\n        /* eslint-disable max-depth */\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        resetChildren: function (element) {\r\n            var i;\r\n\r\n            if (element.childSettings) {\r\n                for (i = 0; i < element.childSettings.length; i++) {\r\n                    element.childSettings[i].selectedIndex = 0;\r\n                    element.childSettings[i].disabled = true;\r\n\r\n                    if (element.config) {\r\n                        this.state[element.config.id] = false;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        fillSelect: function (element) {\r\n            var attributeId = element.id.replace(/[a-z]*/, ''),\r\n                options = this.getAttributeOptions(attributeId),\r\n                prevConfig = false,\r\n                index = 1,\r\n                i, j, allowedProducts;\r\n\r\n            this.clearSelect(element);\r\n            element.options[0] = new Option('', '');\r\n            element.options[0].innerHTML = this.config.chooseText;\r\n\r\n            if (element.prevSetting) {\r\n                prevConfig = element.prevSetting.options[element.prevSetting.selectedIndex];\r\n            }\r\n\r\n            if (options) {\r\n                for (i = 0; i < options.length; i++) {\r\n                    allowedProducts = [];\r\n\r\n                    if (prevConfig) {\r\n                        for (j = 0; j < options[i].products.length; j++) {\r\n                            if (prevConfig.config.allowedProducts &&\r\n                                prevConfig.config.allowedProducts.indexOf(options[i].products[j]) > -1\r\n                            ) {\r\n                                allowedProducts.push(options[i].products[j]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        allowedProducts = options[i].products.clone();\r\n                    }\r\n\r\n                    if (allowedProducts.size() > 0) {\r\n                        options[i].allowedProducts = allowedProducts;\r\n                        element.options[index] = new Option(this.getOptionLabel(options[i]), options[i].id);\r\n\r\n                        if (typeof options[i].price != 'undefined') {\r\n                            element.options[index].setAttribute('price', options[i].price);\r\n                        }\r\n                        element.options[index].config = options[i];\r\n                        index++;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        //eslint-enable max-depth\r\n        /**\r\n         * @param {Object} option\r\n         */\r\n        getOptionLabel: function (option) {\r\n            return option.label;\r\n        },\r\n\r\n        /**\r\n         * @param {*} price\r\n         * @param {Boolean} showSign\r\n         * @return {String}\r\n         */\r\n        formatPrice: function (price, showSign) {\r\n            var str = '',\r\n                roundedPrice;\r\n\r\n            price = parseFloat(price);\r\n\r\n            if (showSign) {\r\n                if (price < 0) {\r\n                    str += '-';\r\n                    price = -price;\r\n                } else {\r\n                    str += '+';\r\n                }\r\n            }\r\n\r\n            roundedPrice = Number(Math.round(price + 'e+2') + 'e-2').toString();\r\n\r\n            if (this.prices && this.prices[roundedPrice]) {\r\n                str += this.prices[roundedPrice];\r\n            } else {\r\n                str += this.priceTemplate({\r\n                    data: {\r\n                        price: price.toFixed(2)\r\n                    }\r\n                });\r\n            }\r\n\r\n            return str;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        clearSelect: function (element) {\r\n            var i;\r\n\r\n            for (i = element.options.length - 1; i >= 0; i--) {\r\n                element.remove(i);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} attributeId\r\n         * @return {*|undefined}\r\n         */\r\n        getAttributeOptions: function (attributeId) {\r\n            if (this.config.attributes[attributeId]) {\r\n                return this.config.attributes[attributeId].options;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reload price.\r\n         *\r\n         * @return {undefined|Number}\r\n         */\r\n        reloadPrice: function () {\r\n            var price = 0,\r\n                oldPrice = 0,\r\n                inclTaxPrice = 0,\r\n                exclTaxPrice = 0,\r\n                i, selected;\r\n\r\n            if (this.config.disablePriceReload) {\r\n                return undefined;\r\n            }\r\n\r\n            for (i = this.settings.length - 1; i >= 0; i--) {\r\n                selected = this.settings[i].options[this.settings[i].selectedIndex];\r\n\r\n                if (selected.config) {\r\n                    price += parseFloat(selected.config.price);\r\n                    oldPrice += parseFloat(selected.config.oldPrice);\r\n                    inclTaxPrice += parseFloat(selected.config.inclTaxPrice);\r\n                    exclTaxPrice += parseFloat(selected.config.exclTaxPrice);\r\n                }\r\n            }\r\n\r\n            optionsPrice.changePrice(\r\n                'config', {\r\n                    'price': price,\r\n                    'oldPrice': oldPrice,\r\n                    'inclTaxPrice': inclTaxPrice,\r\n                    'exclTaxPrice': exclTaxPrice\r\n                }\r\n            );\r\n            optionsPrice.reload();\r\n\r\n            return price;\r\n        },\r\n\r\n        /**\r\n         * Reload old price.\r\n         */\r\n        reloadOldPrice: function () {\r\n            var price, i, selected;\r\n\r\n            if (this.config.disablePriceReload) {\r\n                return;\r\n            }\r\n\r\n            if ($('old-price-' + this.config.productId)) {\r\n\r\n                price = parseFloat(this.config.oldPrice);\r\n\r\n                for (i = this.settings.length - 1; i >= 0; i--) {\r\n                    selected = this.settings[i].options[this.settings[i].selectedIndex];\r\n\r\n                    if (selected.config) {\r\n                        price += parseFloat(selected.config.price);\r\n                    }\r\n                }\r\n\r\n                if (price < 0) {\r\n                    price = 0;\r\n                }\r\n                price = this.formatPrice(price);\r\n\r\n                if ($('old-price-' + this.config.productId)) {\r\n                    $('old-price-' + this.config.productId).innerHTML = price;\r\n                }\r\n\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_ConfigurableProduct/js/components/associated-product-insert-listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/components/insert-listing'\r\n], function (_, insertListing) {\r\n    'use strict';\r\n\r\n    return insertListing.extend({\r\n        defaults: {\r\n            gridInitialized: false,\r\n            paramsUpdated: false,\r\n            showMassActionColumn: true,\r\n            currentProductId: 0,\r\n            dataScopeAssociatedProduct: 'data.associated_product_ids',\r\n            typeGrid: '',\r\n            product: {},\r\n            rowIndexForChange: undefined,\r\n            changeProductData: [],\r\n            modules: {\r\n                productsProvider: '${ $.productsProvider }',\r\n                productsColumns: '${ $.productsColumns }',\r\n                productsMassAction: '${ $.productsMassAction }',\r\n                modalWithGrid: '${ $.modalWithGrid }',\r\n                productsFilters: '${ $.productsFilters }'\r\n            },\r\n            exports: {\r\n                externalProviderParams: '${ $.externalProvider }:params'\r\n            },\r\n            links: {\r\n                changeProductData: '${ $.provider }:${ $.changeProductProvider }'\r\n            },\r\n            listens: {\r\n                '${ $.externalProvider }:params': '_setFilters _setVisibilityMassActionColumn',\r\n                '${ $.productsProvider }:data': '_handleManualGridOpening',\r\n                '${ $.productsMassAction }:selected': '_handleManualGridSelect'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize observables.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(\r\n                'changeProductData'\r\n            );\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get ids of used products.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getUsedProductIds: function () {\r\n            var usedProductsIds = this.source.get(this.dataScopeAssociatedProduct);\r\n\r\n            return usedProductsIds.slice();\r\n        },\r\n\r\n        /**\r\n         * Request for render content.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        doRender: function (showMassActionColumn, typeGrid) {\r\n            this.typeGrid = typeGrid;\r\n            this.showMassActionColumn = showMassActionColumn;\r\n\r\n            if (this.gridInitialized) {\r\n                this.paramsUpdated = false;\r\n                this.productsFilters().clear();\r\n                this._setFilters(this.externalProviderParams);\r\n                this._setVisibilityMassActionColumn();\r\n            }\r\n\r\n            return this.render();\r\n        },\r\n\r\n        /**\r\n         * Show grid with assigned product.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        showGridAssignProduct: function () {\r\n            this.product = {};\r\n            this.rowIndexForChange = undefined;\r\n\r\n            return this.doRender(true, 'assignProduct');\r\n        },\r\n\r\n        /**\r\n         * Show grid with changed product.\r\n         *\r\n         * @param {String} rowIndex\r\n         * @param {String} product\r\n         */\r\n        showGridChangeProduct: function (rowIndex, product) {\r\n            this.rowIndexForChange = rowIndex;\r\n            this.product = product;\r\n            this.doRender(false, 'changeProduct');\r\n        },\r\n\r\n        /**\r\n         * Select product.\r\n         *\r\n         * @param {String} rowIndex\r\n         */\r\n        selectProduct: function (rowIndex) {\r\n            this.changeProductData({\r\n                rowIndex: this.rowIndexForChange,\r\n                product: this.productsProvider().data.items[rowIndex]\r\n            });\r\n            this.modalWithGrid().closeModal();\r\n        },\r\n\r\n        /**\r\n         * Set visibility state for mass action column\r\n         *\r\n         * @private\r\n         */\r\n        _setVisibilityMassActionColumn: function () {\r\n            this.productsMassAction(function (massActionComponent) {\r\n                this.productsColumns().elems().each(function (rowElement) {\r\n                    rowElement.disableAction = this.showMassActionColumn;\r\n                }, this);\r\n                massActionComponent.visible = this.showMassActionColumn;\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Set filters.\r\n         *\r\n         * @param {Object} params\r\n         * @private\r\n         */\r\n        _setFilters: function (params) {\r\n            var filterModifier = {},\r\n                attrCodes,\r\n                usedProductIds,\r\n                attributes;\r\n\r\n            params = _.omit(params);\r\n\r\n            if (!this.paramsUpdated) {\r\n                this.gridInitialized = true;\r\n                this.paramsUpdated = true;\r\n\r\n                attrCodes = this._getAttributesCodes();\r\n                usedProductIds = this.getUsedProductIds();\r\n\r\n                if (this.currentProductId) {\r\n                    usedProductIds.push(this.currentProductId);\r\n                }\r\n\r\n                filterModifier['entity_id'] = {\r\n                    'condition_type': 'nin', value: usedProductIds\r\n                };\r\n                attrCodes.each(function (code) {\r\n                    filterModifier[code] = {\r\n                        'condition_type': 'notnull'\r\n                    };\r\n                });\r\n\r\n                if (this.typeGrid === 'changeProduct') {\r\n                    attributes = JSON.parse(this.product.attributes);\r\n\r\n                    filterModifier = _.extend(filterModifier, _.mapObject(attributes, function (value) {\r\n                        return {\r\n                            'condition_type': 'eq',\r\n                            'value': value\r\n                        };\r\n                    }));\r\n\r\n                    params.filters = attributes;\r\n                } else {\r\n                    params.filters = {};\r\n                }\r\n\r\n                params['attributes_codes'] = attrCodes;\r\n\r\n                this.set('externalProviderParams', params);\r\n                this.set('externalFiltersModifier', filterModifier);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get attribute codes.\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _getAttributesCodes: function () {\r\n            var attrCodes = this.source.get('data.attribute_codes');\r\n\r\n            return attrCodes ? attrCodes : [];\r\n        },\r\n\r\n        /**\r\n         * Get product variations.\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _getProductVariations: function () {\r\n            var matrix = this.source.get('data.configurable-matrix');\r\n\r\n            return matrix ? matrix : [];\r\n        },\r\n\r\n        /**\r\n         * Handle manual grid after opening\r\n         * @private\r\n         */\r\n        _handleManualGridOpening: function (data) {\r\n            if (data.items.length && this.typeGrid === 'assignProduct') {\r\n                this.productsColumns().elems().each(function (rowElement) {\r\n                    rowElement.disableAction = true;\r\n                });\r\n\r\n                this._disableRows(data.items);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle manual selection.\r\n         *\r\n         * @param {Array} selected\r\n         * @private\r\n         */\r\n        _handleManualGridSelect: function (selected) {\r\n            var selectedRows,\r\n                selectedVariationKeys;\r\n\r\n            if (this.typeGrid === 'assignProduct') {\r\n                selectedRows = _.filter(this.productsProvider().data.items, function (row) {\r\n                    return selected.indexOf(row['entity_id']) !== -1;\r\n                });\r\n                selectedVariationKeys = _.values(this._getVariationKeyMap(selectedRows));\r\n                this._disableRows(this.productsProvider().data.items, selectedVariationKeys, selected);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable rows in grid for products with the same variation key\r\n         *\r\n         * @param {Array} items\r\n         * @param {Array} selectedVariationKeys\r\n         * @param {Array} selected\r\n         * @private\r\n         */\r\n        _disableRows: function (items, selectedVariationKeys, selected) {\r\n            selectedVariationKeys = selectedVariationKeys === undefined ? [] : selectedVariationKeys;\r\n            selected = selected === undefined ? [] : selected;\r\n            this.productsMassAction(function (massaction) {\r\n                var configurableVariationKeys = _.union(\r\n                    selectedVariationKeys,\r\n                    _.pluck(this._getProductVariations(), 'variationKey')\r\n                    ),\r\n                    variationKeyMap = this._getVariationKeyMap(items),\r\n                    rowsForDisable = _.keys(_.pick(\r\n                        variationKeyMap,\r\n                        function (variationKey) {\r\n                            return configurableVariationKeys.indexOf(variationKey) !== -1;\r\n                        }\r\n                    ));\r\n\r\n                massaction.disabled(_.difference(rowsForDisable, selected));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Get variation key map used in manual grid.\r\n         *\r\n         * @param {Array} items\r\n         * @returns {Array} [{entity_id: variation-key}, ...]\r\n         * @private\r\n         */\r\n        _getVariationKeyMap: function (items) {\r\n            var variationKeyMap = {};\r\n\r\n            _.each(items, function (row) {\r\n                variationKeyMap[row['entity_id']] = _.values(\r\n                    _.pick(row, this._getAttributesCodes())\r\n                ).sort().join('-');\r\n\r\n            }, this);\r\n\r\n            return variationKeyMap;\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/container-configurable-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            listens: {\r\n                '${ $.provider }:data.is_downloadable': 'handleProductType'\r\n            },\r\n            links: {\r\n                isDownloadable: '${ $.provider }:data.is_downloadable'\r\n            },\r\n            modules: {\r\n                createConfigurableButton: '${$.createConfigurableButton}'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.handleProductType(this.isDownloadable);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe(['content']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Change content for container and visibility for button\r\n         *\r\n         * @param {String} isDownloadable\r\n         */\r\n        handleProductType: function (isDownloadable) {\r\n            if (isDownloadable === '1') {\r\n                this.content(this.content2);\r\n\r\n                if (this.createConfigurableButton()) {\r\n                    this.createConfigurableButton().visible(false);\r\n                }\r\n            } else {\r\n                this.content(this.content1);\r\n\r\n                if (this.createConfigurableButton()) {\r\n                    this.createConfigurableButton().visible(true);\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/custom-options-price-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Catalog/js/components/custom-options-price-type'\r\n], function (_, PriceType) {\r\n    'use strict';\r\n\r\n    return PriceType.extend({\r\n        defaults: {\r\n            isConfigurable: false,\r\n            isFiltered: null,\r\n            defaultOptions: null,\r\n            filteredOptions: null,\r\n            bannedOptions: []\r\n        },\r\n\r\n        /**\r\n         * Updates options.\r\n         *\r\n         * @param {Boolean} variationsEmpty\r\n         * @returns {Boolean}\r\n         */\r\n        updateOptions: function (variationsEmpty) {\r\n            var isFiltered = this.isConfigurable || !variationsEmpty,\r\n                value;\r\n\r\n            if (this.isFiltered !== isFiltered) {\r\n                value = this.value();\r\n\r\n                this.options(isFiltered ? this.getFilteredOptions() : this.getDefaultOptions());\r\n                this.value(value);\r\n            }\r\n\r\n            return isFiltered;\r\n        },\r\n\r\n        /**\r\n         * Get default list of options.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getDefaultOptions: function () {\r\n            if (this.defaultOptions === null) {\r\n                this.defaultOptions = this.options();\r\n            }\r\n\r\n            return this.defaultOptions;\r\n        },\r\n\r\n        /**\r\n         * Get filtered list of options.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getFilteredOptions: function () {\r\n            var defaultOptions;\r\n\r\n            if (this.filteredOptions === null) {\r\n                defaultOptions = this.getDefaultOptions();\r\n                this.filteredOptions = [];\r\n\r\n                _.each(defaultOptions, function (option) {\r\n                    if (this.bannedOptions.indexOf(option.value) === -1) {\r\n                        this.filteredOptions.push(option);\r\n                    }\r\n                }, this);\r\n            }\r\n\r\n            return this.filteredOptions;\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/custom-options-warning.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/html'\r\n], function (Html) {\r\n    'use strict';\r\n\r\n    return Html.extend({\r\n        defaults: {\r\n            isConfigurable: false\r\n        },\r\n\r\n        /**\r\n         * Updates component visibility state.\r\n         *\r\n         * @param {Boolean} variationsEmpty\r\n         * @returns {Boolean}\r\n         */\r\n        updateVisibility: function (variationsEmpty) {\r\n            var isVisible = this.isConfigurable || !variationsEmpty;\r\n\r\n            this.visible(isVisible);\r\n\r\n            return isVisible;\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/dynamic-rows-configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows',\r\n    'jquery'\r\n], function (_, registry, dynamicRows, $) {\r\n    'use strict';\r\n\r\n    return dynamicRows.extend({\r\n        defaults: {\r\n            actionsListOpened: false,\r\n            canEditField: 'canEdit',\r\n            newProductField: 'newProduct',\r\n            dataScopeAssociatedProduct: 'data.associated_product_ids',\r\n            dataProviderFromGrid: '',\r\n            dataProviderChangeFromGrid: '',\r\n            insertDataFromGrid: [],\r\n            changeDataFromGrid: [],\r\n            dataProviderFromWizard: '',\r\n            insertDataFromWizard: [],\r\n            map: null,\r\n            isEmpty: true,\r\n            isShowAddProductButton: false,\r\n            cacheGridData: [],\r\n            unionInsertData: [],\r\n            deleteProperty: false,\r\n            dataLength: 0,\r\n            identificationProperty: 'id',\r\n            'attribute_set_id': '',\r\n            attributesTmp: [],\r\n            changedFlag: 'was_changed',\r\n            listens: {\r\n                'insertDataFromGrid': 'processingInsertDataFromGrid',\r\n                'insertDataFromWizard': 'processingInsertDataFromWizard',\r\n                'unionInsertData': 'processingUnionInsertData',\r\n                'changeDataFromGrid': 'processingChangeDataFromGrid',\r\n                'isEmpty': 'changeVisibility'\r\n            },\r\n            imports: {\r\n                'attribute_set_id': '${$.provider}:data.product.attribute_set_id'\r\n            },\r\n            'exports': {\r\n                'attribute_set_id': '${$.provider}:data.new-variations-attribute-set-id'\r\n            },\r\n            modules: {\r\n                modalWithGrid: '${ $.modalWithGrid }',\r\n                gridWithProducts: '${ $.gridWithProducts}'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .changeVisibility(this.isEmpty());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Change visibility\r\n         *\r\n         * When isEmpty = true, then visbible = false\r\n         *\r\n         * @param {Boolean} isEmpty\r\n         */\r\n        changeVisibility: function (isEmpty) {\r\n            this.visible(!isEmpty);\r\n        },\r\n\r\n        /**\r\n         * Open modal with grid.\r\n         *\r\n         * @param {String} rowIndex\r\n         */\r\n        openModalWithGrid: function (rowIndex) {\r\n            var productSource = this.source.get(this.dataScope + '.' + this.index + '.' + rowIndex),\r\n                product = {\r\n                    'id': productSource.id,\r\n                    'attributes': productSource['configurable_attribute']\r\n                };\r\n\r\n            this.modalWithGrid().openModal();\r\n            this.gridWithProducts().showGridChangeProduct(rowIndex, product);\r\n        },\r\n\r\n        /**\r\n         * Initialize children\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            var tmpArray = [];\r\n\r\n            this.recordData.each(function (recordData) {\r\n                tmpArray.push(recordData);\r\n            }, this);\r\n\r\n            this.unionInsertData(tmpArray);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delete record\r\n         *\r\n         * @param {Number} index - row index\r\n         */\r\n        deleteRecord: function (index) {\r\n            var tmpArray,\r\n                lastRecord;\r\n\r\n            this.reRender = false;\r\n            tmpArray = this.getUnionInsertData();\r\n            tmpArray.splice(index, 1);\r\n\r\n            if (!tmpArray.length) {\r\n                this.attributesTmp = this.source.get('data.attributes');\r\n                this.source.set('data.attributes', []);\r\n                this.cacheGridData = [];\r\n            }\r\n\r\n            if (parseInt(this.currentPage(), 10) === this.pages()) {\r\n                lastRecord =\r\n                    _.findWhere(this.elems(), {\r\n                        index: this.startIndex + this.getChildItems().length - 1\r\n                    }) ||\r\n                    _.findWhere(this.elems(), {\r\n                        index: (this.startIndex + this.getChildItems().length - 1).toString()\r\n                    });\r\n\r\n                lastRecord.destroy();\r\n            }\r\n\r\n            this.unionInsertData(tmpArray);\r\n\r\n            if (this.pages() < parseInt(this.currentPage(), 10)) {\r\n                this.currentPage(this.pages());\r\n            }\r\n\r\n            this.reRender = true;\r\n            this.showSpinner(false);\r\n        },\r\n\r\n        /**\r\n         * Generate associated products\r\n         */\r\n        generateAssociatedProducts: function () {\r\n            var productsIds = [];\r\n\r\n            this.getUnionInsertData().forEach(function (data) {\r\n                if (data.id !== null) {\r\n                    productsIds.push(data.id);\r\n                }\r\n            });\r\n\r\n            this.source.set(this.dataScopeAssociatedProduct, productsIds);\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'insertDataFromGrid', 'unionInsertData', 'isEmpty', 'isShowAddProductButton', 'actionsListOpened'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get union insert data from source\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getUnionInsertData: function () {\r\n            var source = this.source.get(this.dataScope + '.' + this.index),\r\n                result = [];\r\n\r\n            _.each(source, function (data) {\r\n                result.push(data);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Process union insert data.\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        processingUnionInsertData: function (data) {\r\n            var dataCount,\r\n                elemsCount,\r\n                tmpData,\r\n                path,\r\n                attributeCodes = this.source.get('data.attribute_codes');\r\n\r\n            this.isEmpty(data.length === 0);\r\n            this.isShowAddProductButton(\r\n                (!attributeCodes || data.length > 0 ? data.length : attributeCodes.length) > 0\r\n            );\r\n\r\n            tmpData = data.slice(this.pageSize * (this.currentPage() - 1),\r\n                                 this.pageSize * (this.currentPage() - 1) + this.pageSize);\r\n\r\n            this.source.set(this.dataScope + '.' + this.index, []);\r\n\r\n            _.each(tmpData, function (row, index) {\r\n                path = this.dataScope + '.' + this.index + '.' + (this.startIndex + index);\r\n                row.attributes = $('<i></i>').text(row.attributes).html();\r\n                row.sku = $('<i></i>').text(row.sku).html();\r\n                this.source.set(path, row);\r\n            }, this);\r\n\r\n            this.source.set(this.dataScope + '.' + this.index, data);\r\n            this.parsePagesData(data);\r\n\r\n            // Render\r\n            dataCount = data.length;\r\n            elemsCount = this.elems().length;\r\n\r\n            if (dataCount > elemsCount) {\r\n                this.getChildItems().each(function (elemData, index) {\r\n                    this.addChild(elemData, this.startIndex + index);\r\n                }, this);\r\n            } else {\r\n                for (elemsCount; elemsCount > dataCount; elemsCount--) {\r\n                    this.elems()[elemsCount - 1].destroy();\r\n                }\r\n            }\r\n\r\n            this.generateAssociatedProducts();\r\n        },\r\n\r\n        /**\r\n         * Parsed data\r\n         *\r\n         * @param {Array} data - array with data\r\n         * about selected records\r\n         */\r\n        processingInsertDataFromGrid: function (data) {\r\n            var changes,\r\n                tmpArray;\r\n\r\n            if (!data.length) {\r\n                return;\r\n            }\r\n\r\n            tmpArray = this.getUnionInsertData();\r\n\r\n            changes = this._checkGridData(data);\r\n            this.cacheGridData = data;\r\n\r\n            changes.each(function (changedObject) {\r\n                var mappedData = this.mappingValue(changedObject);\r\n\r\n                mappedData[this.canEditField] = 0;\r\n                mappedData[this.newProductField] = 0;\r\n                mappedData.variationKey = this._getVariationKey(changedObject);\r\n                mappedData['configurable_attribute'] = this._getConfigurableAttribute(changedObject);\r\n                tmpArray.push(mappedData);\r\n            }, this);\r\n\r\n            // Attributes cannot be changed before regeneration thought wizard\r\n            if (!this.source.get('data.attributes').length) {\r\n                this.source.set('data.attributes', this.attributesTmp);\r\n            }\r\n            this.unionInsertData(tmpArray);\r\n        },\r\n\r\n        /**\r\n         * Process changes from grid.\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        processingChangeDataFromGrid: function (data) {\r\n            var tmpArray = this.getUnionInsertData(),\r\n                mappedData = this.mappingValue(data.product);\r\n\r\n            mappedData[this.canEditField] = 0;\r\n            mappedData[this.newProductField] = 0;\r\n            mappedData.variationKey = this._getVariationKey(data.product);\r\n            mappedData['configurable_attribute'] = this._getConfigurableAttribute(data.product);\r\n            tmpArray[data.rowIndex] = mappedData;\r\n\r\n            this.unionInsertData(tmpArray);\r\n        },\r\n\r\n        /**\r\n         * Get variation key.\r\n         *\r\n         * @param {Object} data\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _getVariationKey: function (data) {\r\n            var attrCodes = this.source.get('data.attribute_codes'),\r\n                key = [];\r\n\r\n            attrCodes.each(function (code) {\r\n                key.push(data[code]);\r\n            });\r\n\r\n            return key.sort().join('-');\r\n        },\r\n\r\n        /**\r\n         * Get configurable attribute.\r\n         *\r\n         * @param {Object} data\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _getConfigurableAttribute: function (data) {\r\n            var attrCodes = this.source.get('data.attribute_codes'),\r\n                confAttrs = {};\r\n\r\n            attrCodes.each(function (code) {\r\n                confAttrs[code] = data[code];\r\n            });\r\n\r\n            return JSON.stringify(confAttrs);\r\n        },\r\n\r\n        /**\r\n         * Process data insertion from wizard\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        processingInsertDataFromWizard: function (data) {\r\n            var tmpArray = this.getUnionInsertData(),\r\n                productIdsToDelete = this.source.get(this.dataScopeAssociatedProduct),\r\n                index,\r\n                product = {};\r\n\r\n            tmpArray = this.unsetArrayItem(\r\n                tmpArray,\r\n                {\r\n                    id: null\r\n                }\r\n            );\r\n\r\n            _.each(data, function (row) {\r\n                if (row.productId) {\r\n                    index = _.indexOf(productIdsToDelete, row.productId);\r\n\r\n                    if (index > -1) {\r\n                        productIdsToDelete.splice(index, 1);\r\n                        tmpArray = this.unsetArrayItem(\r\n                            tmpArray,\r\n                            {\r\n                                id: row.productId\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n                product = this.getProductData(row);\r\n\r\n                product[this.changedFlag] = true;\r\n                product[this.canEditField] = row.editable;\r\n                product[this.newProductField] = row.newProduct;\r\n                tmpArray.push(product);\r\n            }, this);\r\n\r\n            _.each(productIdsToDelete, function (id) {\r\n                tmpArray = this.unsetArrayItem(\r\n                    tmpArray,\r\n                    {\r\n                        id: id\r\n                    }\r\n                );\r\n            }, this);\r\n\r\n            this.unionInsertData(tmpArray);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Object}\r\n         */\r\n        getProductData: function (row) {\r\n            var product,\r\n                attributesText = '';\r\n\r\n            _.each(row.options, function (attribute) {\r\n                if (attributesText) {\r\n                    attributesText += ', ';\r\n                }\r\n                attributesText += attribute['attribute_label'] + ': ' + attribute.label;\r\n            }, this);\r\n\r\n            product = {\r\n                'id': row.productId,\r\n                'product_link': row.productUrl,\r\n                'name': $('<i></i>').text(row.name).html(),\r\n                'sku': $('<i></i>').text(row.sku).html(),\r\n                'status': row.status,\r\n                'price': row.price,\r\n                'price_currency': row.priceCurrency,\r\n                'price_string': row.priceCurrency + row.price,\r\n                'weight': row.weight,\r\n                'qty': row.quantity,\r\n                'variationKey': row.variationKey,\r\n                'configurable_attribute': row.attribute,\r\n                'thumbnail_image': row.images.preview,\r\n                'media_gallery': row['media_gallery'],\r\n                'swatch_image': row['swatch_image'],\r\n                'small_image': row['small_image'],\r\n                image: row.image,\r\n                'thumbnail': row.thumbnail,\r\n                'attributes': attributesText\r\n            };\r\n\r\n            return product;\r\n        },\r\n\r\n        /**\r\n         * Remove array items matching condition.\r\n         *\r\n         * @param {Array} data\r\n         * @param {Object} condition\r\n         * @returns {Array}\r\n         */\r\n        unsetArrayItem: function (data, condition) {\r\n            var objs = _.where(data, condition);\r\n\r\n            _.each(objs, function (obj) {\r\n                var index = _.indexOf(data, obj);\r\n\r\n                if (index > -1) {\r\n                    data.splice(index, 1);\r\n                }\r\n            });\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Check changed records\r\n         *\r\n         * @param {Array} data - array with records data\r\n         * @returns {Array} Changed records\r\n         */\r\n        _checkGridData: function (data) {\r\n            var cacheLength = this.cacheGridData.length,\r\n                curData = data.length,\r\n                max = cacheLength > curData ? this.cacheGridData : data,\r\n                changes = [],\r\n                obj = {};\r\n\r\n            max.each(function (record, index) {\r\n                obj[this.map.id] = record[this.map.id];\r\n\r\n                if (!_.where(this.cacheGridData, obj).length) {\r\n                    changes.push(data[index]);\r\n                }\r\n            }, this);\r\n\r\n            return changes;\r\n        },\r\n\r\n        /**\r\n         * Mapped value\r\n         */\r\n        mappingValue: function (data) {\r\n            var result = {};\r\n\r\n            _.each(this.map, function (prop, index) {\r\n                result[index] = data[prop];\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Toggle actions list.\r\n         *\r\n         * @param {Number} rowIndex\r\n         * @returns {Object} Chainable.\r\n         */\r\n        toggleActionsList: function (rowIndex) {\r\n            var state = false;\r\n\r\n            if (rowIndex !== this.actionsListOpened()) {\r\n                state = rowIndex;\r\n            }\r\n            this.actionsListOpened(state);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Close action list.\r\n         *\r\n         * @param {Number} rowIndex\r\n         * @returns {Object} Chainable\r\n         */\r\n        closeList: function (rowIndex) {\r\n            if (this.actionsListOpened() === rowIndex) {\r\n                this.actionsListOpened(false);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggle product status.\r\n         *\r\n         * @param {Number} rowIndex\r\n         */\r\n        toggleStatusProduct: function (rowIndex) {\r\n            var tmpArray = this.getUnionInsertData(),\r\n                status = parseInt(tmpArray[rowIndex].status, 10);\r\n\r\n            if (status === 1) {\r\n                tmpArray[rowIndex].status = 2;\r\n            } else {\r\n                tmpArray[rowIndex].status = 1;\r\n            }\r\n\r\n            tmpArray[rowIndex][this.changedFlag] = true;\r\n            this.unionInsertData(tmpArray);\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/file-uploader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/file-uploader',\r\n    'underscore'\r\n], function (Element, _) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        processedFile: {},\r\n        actionsListOpened: false,\r\n        thumbnailUrl: '',\r\n        thumbnail: null,\r\n        smallImage: null,\r\n        defaults: {\r\n            fileInputName: ''\r\n        },\r\n\r\n        /**\r\n         * Initialize observables.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['processedFile', 'actionsListOpened', 'thumbnailUrl', 'thumbnail', 'smallImage']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        setInitialValue: function () {\r\n            var value = this.getInitialValue();\r\n\r\n            if (!_.isString(value)) {\r\n                this._super();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds provided file to the files list.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {Object} Chainable.\r\n         */\r\n        addFile: function (file) {\r\n            this.processedFile(this.processFile(file));\r\n\r\n            this.value(this.processedFile().file);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggle actions list.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        toggleActionsList: function () {\r\n            if (this.actionsListOpened()) {\r\n                this.actionsListOpened(false);\r\n            } else {\r\n                this.actionsListOpened(true);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Close action list.\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        closeList: function () {\r\n            if (this.actionsListOpened()) {\r\n                this.actionsListOpened(false);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delete Image\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        deleteImage: function () {\r\n            this.processedFile({});\r\n            this.value(null);\r\n            this.thumbnail(null);\r\n            this.thumbnailUrl(null);\r\n            this.smallImage(null);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/modal-configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/modal/modal-component',\r\n    'uiRegistry',\r\n    'underscore'\r\n], function (Modal, registry, _) {\r\n    'use strict';\r\n\r\n    return Modal.extend({\r\n        defaults: {\r\n            stepWizard: '',\r\n            modules: {\r\n                form: '${ $.formName }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Open modal\r\n         */\r\n        openModal: function () {\r\n            var stepWizard = {};\r\n\r\n            this.form().validate();\r\n\r\n            if (this.form().source.get('params.invalid') === false) {\r\n                stepWizard = registry.get('index = ' + this.stepWizard);\r\n\r\n                if (!_.isUndefined(stepWizard)) {\r\n                    stepWizard.open();\r\n                }\r\n\r\n                this._super();\r\n            } else {\r\n                this.form().focusInvalid();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/price-configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (_, registry, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            imports: {\r\n                isConfigurable: '!ns = ${ $.ns }, index = configurable-matrix:isEmpty'\r\n            },\r\n            modules: {\r\n                createConfigurableButton: '${$.createConfigurableButton}'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            // resolve initial disable state\r\n            this.handlePriceValue(this.isConfigurable);\r\n            // add listener to track \"configurable\" type\r\n            this.setListeners({\r\n                isConfigurable: 'handlePriceValue'\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe(['content']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Disable and clear price if product type changed to configurable\r\n         *\r\n         * @param {String} isConfigurable\r\n         */\r\n        handlePriceValue: function (isConfigurable) {\r\n            this.disabled(!!this.isUseDefault() || isConfigurable);\r\n\r\n            if (isConfigurable) {\r\n                this.clear();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/options/price-type-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/catalog/type-events',\r\n    'notification',\r\n    'mage/translate'\r\n], function ($, productType) {\r\n    'use strict';\r\n\r\n    return {\r\n        isConfigurable: false,\r\n        messageInited: false,\r\n        messageSelector: '[data-role=product-custom-options-content]',\r\n        isPercentPriceTypeExist: function () {\r\n            var productOptionsContainer = $('#product_options_container_top');\r\n\r\n            return !!productOptionsContainer.length;\r\n        },\r\n        showWarning: function () {\r\n            if (!this.messageInited) {\r\n                $(this.messageSelector).notification();\r\n                this.messageInited = true;\r\n            }\r\n            this.hideWarning();\r\n            $(this.messageSelector).notification('add', {\r\n                message: $.mage.__('Custom options with price type \"percent\" is not available for ' +\r\n                    'configurable product.'),\r\n                error: false,\r\n                messageContainer: this.messageSelector\r\n            });\r\n        },\r\n        hideWarning: function () {\r\n            $(this.messageSelector).notification('clear');\r\n        },\r\n        init: function () {\r\n            $(document).on('changeTypeProduct', this._initType.bind(this));\r\n\r\n            $('#product-edit-form-tabs').on('change', '.opt-type > select', function () {\r\n                var selected = $('.opt-type > select :selected'),\r\n                    optGroup = selected.parent().attr('label');\r\n\r\n                if (optGroup === 'Select') {\r\n                    $('#product-edit-form-tabs').on(\r\n                        'click',\r\n                        '[data-ui-id=\"admin-product-options-options-box-select-option-type-add-select-row-button\"]',\r\n                        function () {\r\n                            this.percentPriceTypeHandler();\r\n                        }.bind(this)\r\n                    );\r\n                } else {\r\n                    this.percentPriceTypeHandler();\r\n                }\r\n            }.bind(this));\r\n\r\n            this._initType();\r\n        },\r\n        _initType: function () {\r\n            this.isConfigurable = productType.type.current === 'configurable';\r\n            if (this.isPercentPriceTypeExist()) {\r\n                this.percentPriceTypeHandler();\r\n            }\r\n        },\r\n        percentPriceTypeHandler: function () {\r\n            var priceType = $('[data-attr=\"price-type\"]'),\r\n                optionPercentPriceType = priceType.find('option[value=\"percent\"]');\r\n\r\n            if (this.isConfigurable) {\r\n                this.showWarning();\r\n                optionPercentPriceType.hide();\r\n                optionPercentPriceType.parent().val() === 'percent' ? optionPercentPriceType.parent().val('fixed') : '';\r\n            } else {\r\n                $(this.messageSelector).notification();\r\n                optionPercentPriceType.show();\r\n                this.hideWarning();\r\n            }\r\n        }\r\n    };\r\n});\r\n*/\r\n","Magento_ConfigurableProduct/js/variations/product-grid.js":"// jscs:disable requireDotNotation\r\n/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'Magento_Ui/js/core/app',\r\n    'underscore',\r\n    'notification',\r\n    'mage/translate'\r\n], function (Component, $, bootstrap, _) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            productsGridUrl: null,\r\n            productAttributes: [],\r\n            productsModal: null,\r\n            button: '',\r\n            gridSelector: '[data-grid-id=associated-products-container]',\r\n            modules: {\r\n                productsFilter: '${ $.productsFilter }',\r\n                productsProvider: '${ $.productsProvider }',\r\n                productsMassAction: '${ $.productsMassAction }',\r\n                productsColumns: '${ $.productsColumns }',\r\n                variationsComponent: '${ $.configurableVariations }'\r\n            },\r\n            listens: {\r\n                '${ $.productsProvider }:data': '_showMessageAssociatedGrid _handleManualGridOpening',\r\n                '${ $.productsMassAction }:selected': '_handleManualGridSelect',\r\n                '${ $.configurableVariations }:productMatrix': '_showButtonAddManual _switchProductType'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize\r\n         *\r\n         * @param {Array} options\r\n         */\r\n        initialize: function (options) {\r\n            this._super(options);\r\n            this.productsModal = $(this.gridSelector).modal({\r\n                title: $.mage.__('Select Associated Product'),\r\n                type: 'slide',\r\n                buttons: [\r\n                    {\r\n                        text: $.mage.__('Cancel'),\r\n\r\n                        /** Close modal */\r\n                        click: function () {\r\n                            this.closeModal();\r\n                        }\r\n                    }, {\r\n                        text: $.mage.__('Done'),\r\n                        click: this.close.bind(this, null)\r\n                    }\r\n                ]\r\n            });\r\n\r\n            this.productsProvider(function () {\r\n                this.productsModal.notification();\r\n            }.bind(this));\r\n            this.variationsComponent(function (variation) {\r\n                this._showButtonAddManual(variation.productMatrix());\r\n            }.bind(this));\r\n\r\n            this._initGrid = _.once(this._initGrid);\r\n            this._switchProductType = _.wrap(this._switchProductType.bind(this), function (func, params) {\r\n                if (!!params.length !== !!this.init) {\r\n                    this.init = !!params.length;\r\n                    func(params);\r\n                }\r\n            }.bind(this._switchProductType));\r\n        },\r\n\r\n        /**\r\n         * Initial observerable\r\n         * @returns {*}\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe('button');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * init Grid\r\n         * @private\r\n         */\r\n        _initGrid: function (filterData) {\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: this._buildGridUrl(filterData),\r\n                context: $('body')\r\n            }).done(function (data) {\r\n                bootstrap(JSON.parse(data));\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Select different product in configurations section\r\n         * @see configurable_associated_product_listing.xml\r\n         * @param {Integer} rowIndex\r\n         */\r\n        selectProduct: function (rowIndex) {\r\n            this.close(rowIndex);\r\n        },\r\n\r\n        /**\r\n         * Open\r\n         * @param {Object} filterData - filter data\r\n         * @param {Object|*} filterData.filters - attribute name\r\n         * @param {Object|*} filterData.filters_modifier - modifier value\r\n         * @param {String} callbackName\r\n         * @param {Boolean} showMassActionColumn\r\n         */\r\n        open: function (filterData, callbackName, showMassActionColumn) {\r\n            this.callbackName = callbackName;\r\n            this.productsMassAction(function (massActionComponent) {\r\n                this.productsColumns().elems().each(function (rowElement) {\r\n                    rowElement.disableAction = showMassActionColumn;\r\n                });\r\n                massActionComponent.visible = showMassActionColumn;\r\n            }.bind(this));\r\n            this._setFilter(filterData);\r\n            this._initGrid(filterData);\r\n            this.productsModal.trigger('openModal');\r\n        },\r\n\r\n        /**\r\n         * Close\r\n         */\r\n        close: function (rowIndex) {\r\n            try {\r\n                if (this.productsMassAction().selected.getLength()) {\r\n                    this.variationsComponent()[this.callbackName](this.productsMassAction()\r\n                        .selected.map(this.getProductById.bind(this)));\r\n                    this.productsMassAction().deselectAll();\r\n                } else if (!_.isNull(rowIndex)) {\r\n                    this.variationsComponent()[this.callbackName]([this.getProductByIndex(rowIndex)]);\r\n                }\r\n                this.productsModal.trigger('closeModal');\r\n            } catch (e) {\r\n                if (e.name === 'UserException') {\r\n                    this.productsModal.notification('clear');\r\n                    this.productsModal.notification('add', {\r\n                        message: e.message,\r\n                        messageContainer: this.gridSelector\r\n                    });\r\n                } else {\r\n                    throw e;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get product by id\r\n         * @param {Integer} productId\r\n         * @returns {*}\r\n         */\r\n        getProductById: function (productId) {\r\n            return _.findWhere(this.productsProvider().data.items, {\r\n                'entity_id': productId\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get product\r\n         * @param {Integer} rowIndex\r\n         * @returns {*}\r\n         */\r\n        getProductByIndex: function (rowIndex) {\r\n            return this.productsProvider().data.items[rowIndex];\r\n        },\r\n\r\n        /**\r\n         * Build grid url\r\n         * @private\r\n         */\r\n        _buildGridUrl: function (filterData) {\r\n            var params = '?' + $.param({\r\n                'filters': filterData.filters,\r\n                'attributes_codes': this._getAttributesCodes(),\r\n                'filters_modifier': filterData['filters_modifier']\r\n            });\r\n\r\n            return this.productsGridUrl + params;\r\n        },\r\n\r\n        /**\r\n         * Show button add manual\r\n         * @param {Array} variations\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _showButtonAddManual: function (variations) {\r\n            return this.button(variations.length);\r\n        },\r\n\r\n        /**\r\n         * @param {Array} variations\r\n         * @private\r\n         */\r\n        _switchProductType: function (variations) {\r\n            $(document).trigger('changeConfigurableTypeProduct', variations.length);\r\n        },\r\n\r\n        /**\r\n         * Get attributes codes used for configurable\r\n         * @private\r\n         */\r\n        _getAttributesCodes: function () {\r\n            return this.variationsComponent().attributes.pluck('code');\r\n        },\r\n\r\n        /**\r\n         * Show data associated grid\r\n         * @private\r\n         */\r\n        _showMessageAssociatedGrid: function (data) {\r\n            this.productsModal.notification('clear');\r\n\r\n            if (data.items.length) {\r\n                this.productsModal.notification('add', {\r\n                    message: $.mage.__('Choose a new product to delete and replace the current product configuration.'),\r\n                    messageContainer: this.gridSelector\r\n                });\r\n            } else {\r\n                this.productsModal.notification('add', {\r\n                    message: $.mage.__('For better results, add attributes and attribute values to your products.'),\r\n                    messageContainer: this.gridSelector\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show manually grid\r\n         */\r\n        showManuallyGrid: function () {\r\n            var filterModifier = _.mapObject(_.object(this._getAttributesCodes(), []), function () {\r\n                    return {\r\n                        'condition_type': 'notnull'\r\n                    };\r\n                }),\r\n                usedProductIds = _.values(this.variationsComponent().productAttributesMap);\r\n\r\n            if (usedProductIds && usedProductIds.length > 0) {\r\n                filterModifier['entity_id'] = {\r\n                    'condition_type': 'nin', value: usedProductIds\r\n                };\r\n            }\r\n\r\n            this.open(\r\n                {\r\n                    'filters_modifier': filterModifier\r\n                },\r\n                'appendProducts',\r\n                true\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Handle manual grid after opening\r\n         * @private\r\n         */\r\n        _handleManualGridOpening: function (data) {\r\n            if (data.items.length && this.callbackName == 'appendProducts') { //eslint-disable-line eqeqeq\r\n                this.productsColumns().elems().each(function (rowElement) {\r\n                    rowElement.disableAction = true;\r\n                });\r\n\r\n                this._disableRows(data.items);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable rows in grid for products with the same variation key\r\n         *\r\n         * @param {Array} items\r\n         * @param {Array} selectedVariationKeys\r\n         * @param {Array} selected\r\n         * @private\r\n         */\r\n        _disableRows: function (items, selectedVariationKeys, selected) {\r\n            selectedVariationKeys = selectedVariationKeys === undefined ? [] : selectedVariationKeys;\r\n            selected = selected === undefined ? [] : selected;\r\n            this.productsMassAction(function (massaction) {\r\n                var configurableVariationKeys = _.union(\r\n                        selectedVariationKeys,\r\n                        _.pluck(this.variationsComponent().productMatrix(), 'variationKey')\r\n                    ),\r\n                    variationKeyMap = this._getVariationKeyMap(items),\r\n                    rowsForDisable = _.keys(_.pick(\r\n                        variationKeyMap,\r\n                        function (variationKey) {\r\n                            return configurableVariationKeys.indexOf(variationKey) !== -1;\r\n                        }\r\n                    ));\r\n\r\n                massaction.disabled(_.difference(rowsForDisable, selected));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _handleManualGridSelect: function (selected) {\r\n            var selectedRows, selectedVariationKeys;\r\n\r\n            if (this.callbackName == 'appendProducts') { //eslint-disable-line eqeqeq\r\n                selectedRows = _.filter(this.productsProvider().data.items, function (row) {\r\n                    return selected.indexOf(row['entity_id']) !== -1;\r\n                });\r\n                selectedVariationKeys = _.values(this._getVariationKeyMap(selectedRows));\r\n                this._disableRows(this.productsProvider().data.items, selectedVariationKeys, selected);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get variation key map used in manual grid.\r\n         *\r\n         * @param {Object} items\r\n         * @returns {Array} [{entity_id: variation-key}, ...]\r\n         * @private\r\n         */\r\n        _getVariationKeyMap: function (items) {\r\n            this._variationKeyMap = {};\r\n\r\n            _.each(items, function (row) {\r\n                this._variationKeyMap[row['entity_id']] = _.values(\r\n                    _.pick(row, this._getAttributesCodes())\r\n                ).sort().join('-');\r\n\r\n            }, this);\r\n\r\n            return this._variationKeyMap;\r\n        },\r\n\r\n        /**\r\n         * Set filter\r\n         * @private\r\n         */\r\n        _setFilter: function (filterData) {\r\n            this.productsProvider(function (provider) {\r\n                provider.params['filters_modifier'] = filterData['filters_modifier'];\r\n                provider.params['attributes_codes'] = this._getAttributesCodes();\r\n            }.bind(this));\r\n\r\n            this.productsFilter(function (filter) {\r\n                filter.set('filters', _.extend({\r\n                    'filters_modifier': filterData['filters_modifier']\r\n                }, filterData.filters))\r\n                    .apply();\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/variations.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/alert',\r\n    'uiRegistry',\r\n    'mage/translate'\r\n], function (Component, $, ko, _, alert, registry, $t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} message\r\n     * @constructor\r\n     */\r\n    function UserException(message) {\r\n        this.message = message;\r\n        this.name = 'UserException';\r\n    }\r\n    UserException.prototype = Object.create(Error.prototype);\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            opened: false,\r\n            attributes: [],\r\n            usedAttributes: [],\r\n            attributeCodes: [],\r\n            attributesData: {},\r\n            productMatrix: [],\r\n            variations: [],\r\n            formSaveParams: [],\r\n            productAttributes: [],\r\n            disabledAttributes: [],\r\n            fullAttributes: [],\r\n            rowIndexToEdit: false,\r\n            productAttributesMap: null,\r\n            value: [],\r\n            modules: {\r\n                associatedProductGrid: '${ $.configurableProductGrid }',\r\n                wizardButtonElement: '${ $.wizardModalButtonName }',\r\n                formElement: '${ $.formName }',\r\n                attributeSetHandlerModal: '${ $.attributeSetHandler }'\r\n            },\r\n            imports: {\r\n                attributeSetName: '${ $.provider }:configurableNewAttributeSetName',\r\n                attributeSetId: '${ $.provider }:configurableExistingAttributeSetId',\r\n                attributeSetSelection: '${ $.provider }:configurableAffectedAttributeSet',\r\n                productPrice: '${ $.provider }:data.product.price'\r\n            },\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScopeVariations }',\r\n                usedAttributes: '${ $.provider }:${ $.dataScopeAttributes }',\r\n                attributesData: '${ $.provider }:${ $.dataScopeAttributesData }',\r\n                attributeCodes: '${ $.provider }:${ $.dataScopeAttributeCodes }',\r\n                skeletonAttributeSet: '${ $.provider }:data.new-variations-attribute-set-id'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.changeButtonWizard();\r\n            this.initProductAttributesMap();\r\n            this.disableConfigurableAttributes(this.productAttributes);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe(\r\n                'actions opened attributes productMatrix value usedAttributes attributesData attributeCodes'\r\n            );\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} product\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _makeProduct: function (product) {\r\n            var productId = product['entity_id'] || product.productId || null,\r\n                attributes = _.pick(product, this.attributes.pluck('code')),\r\n                options = _.map(attributes, function (option, attribute) {\r\n                    var oldOptions = _.findWhere(this.attributes(), {\r\n                            code: attribute\r\n                        }).options,\r\n                        result;\r\n\r\n                    if (_.isFunction(oldOptions)) {\r\n                        result = oldOptions.findWhere({\r\n                            value: option\r\n                        });\r\n                    } else {\r\n                        result = _.findWhere(oldOptions, {\r\n                            value: option\r\n                        });\r\n                    }\r\n\r\n                    return result;\r\n                }.bind(this));\r\n\r\n            return {\r\n                attribute: JSON.stringify(attributes),\r\n                editable: false,\r\n                images: {\r\n                    preview: product['thumbnail_src']\r\n                },\r\n                name: product.name || product.sku,\r\n                options: options,\r\n                price: parseFloat(Math.round(product.price.replace(/[^\\d.]+/g, '') + 'e+4') + 'e-4').toFixed(4),\r\n                productId: productId,\r\n                productUrl: this.buildProductUrl(productId),\r\n                quantity: product.quantity || null,\r\n                sku: product.sku,\r\n                status: product.status === undefined ? 1 : parseInt(product.status, 10),\r\n                variationKey: this.getVariationKey(options),\r\n                weight: product.weight || null\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {String} name\r\n         * @return {String|Number|Array}\r\n         */\r\n        getProductValue: function (name) {\r\n            name = name.split('/').join('][');\r\n\r\n            return $('[name=\"product[' + name + ']\"]:enabled:not(.ignore-validate)', this.productForm).val();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} data\r\n         * @param {String} field\r\n         * @return {String}\r\n         */\r\n        getRowId: function (data, field) {\r\n            var key = data.variationKey;\r\n\r\n            return 'variations-matrix-' + key + '-' + field;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} variation\r\n         * @param {String} field\r\n         * @return {String}\r\n         */\r\n        getVariationRowName: function (variation, field) {\r\n            var result;\r\n\r\n            if (variation.productId) {\r\n                result = 'configurations[' + variation.productId + '][' + field.split('/').join('][') + ']';\r\n            } else {\r\n                result = 'variations-matrix[' + variation.variationKey + '][' + field.split('/').join('][') + ']';\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {*} variations\r\n         * @param {*} attributes\r\n         */\r\n        render: function (variations, attributes) {\r\n            this.changeButtonWizard();\r\n            this.populateVariationMatrix(variations);\r\n            this.attributes(attributes);\r\n            this.disableConfigurableAttributes(attributes);\r\n            this.handleValue(variations);\r\n            this.handleAttributes();\r\n        },\r\n\r\n        /**\r\n         * Change button wizard.\r\n         */\r\n        changeButtonWizard: function () {\r\n            if (this.variations.length) {\r\n                this.wizardButtonElement().title(this.wizardModalButtonTitle);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Array} variations\r\n         */\r\n        handleValue: function (variations) {\r\n            var tmpArray = [];\r\n\r\n            _.each(variations, function (variation) {\r\n                var attributes = _.reduce(variation.options, function (memo, option) {\r\n                    var attribute = {};\r\n\r\n                    attribute[option['attribute_code']] = option.value;\r\n\r\n                    return _.extend(memo, attribute);\r\n                }, {}),\r\n                    gallery = {\r\n                        images: {}\r\n                    },\r\n                    types = {};\r\n\r\n                _.each(variation.images.images, function (image) {\r\n                    gallery.images[image['file_id']] = {\r\n                        position: image.position,\r\n                        file: image.file,\r\n                        disabled: image.disabled,\r\n                        label: image.label || ''\r\n                    };\r\n                    _.each(image.galleryTypes, function (type) {\r\n                        types[type] = image.file;\r\n                    });\r\n                }, this);\r\n\r\n                tmpArray.push(_.extend(variation, types, {\r\n                    productId: variation.productId || null,\r\n                    name: variation.name || variation.sku,\r\n                    priceCurrency: this.currencySymbol,\r\n                    weight: variation.weight,\r\n                    attribute: JSON.stringify(attributes),\r\n                    variationKey: this.getVariationKey(variation.options),\r\n                    editable: variation.editable === undefined ? 0 : 1,\r\n                    productUrl: this.buildProductUrl(variation.productId),\r\n                    status: variation.status === undefined ? 1 : parseInt(variation.status, 10),\r\n                    newProduct: variation.productId ? 0 : 1,\r\n                    'media_gallery': gallery\r\n                }));\r\n            }, this);\r\n\r\n            this.value(tmpArray);\r\n        },\r\n\r\n        /**\r\n         * Handle attributes.\r\n         */\r\n        handleAttributes: function () {\r\n            var tmpArray = [],\r\n                codesArray = [],\r\n                tmpOptions = {},\r\n                option = {},\r\n                position = 0,\r\n                values = {};\r\n\r\n            _.each(this.attributes(), function (attribute) {\r\n                tmpArray.push(attribute.id);\r\n                codesArray.push(attribute.code);\r\n                values = {};\r\n                _.each(attribute.chosen, function (row) {\r\n                    values[row.value] = {\r\n                        'include': '1',\r\n                        'value_index': row.value\r\n                    };\r\n                }, this);\r\n                option = {\r\n                    'attribute_id': attribute.id,\r\n                    'code': attribute.code,\r\n                    'label': attribute.label,\r\n                    'position': position,\r\n                    'values': values\r\n                };\r\n                tmpOptions[attribute.id] = option;\r\n                position++;\r\n            }, this);\r\n\r\n            this.attributesData(tmpOptions);\r\n            this.usedAttributes(tmpArray);\r\n            this.attributeCodes(codesArray);\r\n        },\r\n\r\n        /**\r\n         * Get attributes options\r\n         * @see use in matrix.phtml\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getAttributesOptions: function () {\r\n            return this.showVariations() ? this.productMatrix()[0].options : [];\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        showVariations: function () {\r\n            return this.productMatrix().length > 0;\r\n        },\r\n\r\n        /**\r\n         * @param {Array} variations\r\n         */\r\n        populateVariationMatrix: function (variations) {\r\n            this.productMatrix([]);\r\n            _.each(variations, function (variation) {\r\n                var attributes = _.reduce(variation.options, function (memo, option) {\r\n                    var attribute = {};\r\n\r\n                    attribute[option['attribute_code']] = option.value;\r\n\r\n                    return _.extend(memo, attribute);\r\n                }, {});\r\n\r\n                this.productMatrix.push(_.extend(variation, {\r\n                    productId: variation.productId || null,\r\n                    name: variation.name || variation.sku,\r\n                    weight: variation.weight,\r\n                    attribute: JSON.stringify(attributes),\r\n                    variationKey: this.getVariationKey(variation.options),\r\n                    editable: variation.editable === undefined ? !variation.productId : variation.editable,\r\n                    productUrl: this.buildProductUrl(variation.productId),\r\n                    status: variation.status === undefined ? 1 : parseInt(variation.status, 10)\r\n                }));\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * @param {*} productId\r\n         */\r\n        buildProductUrl: function (productId) {\r\n            return this.productUrl.replace('%id%', productId);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} options\r\n         * @return {String}\r\n         */\r\n        getVariationKey: function (options) {\r\n            return _.pluck(options, 'value').sort().join('-');\r\n        },\r\n\r\n        /**\r\n         * @param {*} options\r\n         * @return {*|null}\r\n         */\r\n        getProductIdByOptions: function (options) {\r\n            return this.productAttributesMap[this.getVariationKey(options)] || null;\r\n        },\r\n\r\n        /**\r\n         * Init product attributes map\r\n         */\r\n        initProductAttributesMap: function () {\r\n            if (this.productAttributesMap === null) {\r\n                this.productAttributesMap = {};\r\n                _.each(this.variations, function (product) {\r\n                    this.productAttributesMap[this.getVariationKey(product.options)] = product.productId;\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Array} attributes\r\n         */\r\n        disableConfigurableAttributes: function (attributes) {\r\n            var element;\r\n\r\n            _.each(this.disabledAttributes, function (attribute) {\r\n                registry.get('inputName = ' + 'product[' + attribute + ']').disabled(false);\r\n            });\r\n            this.disabledAttributes = [];\r\n\r\n            _.each(attributes, function (attribute) {\r\n                element = registry.get('inputName = ' + 'product[' + attribute.code + ']');\r\n\r\n                if (!_.isUndefined(element)) {\r\n                    element.disabled(true);\r\n                    this.disabledAttributes.push(attribute.code);\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Get currency symbol\r\n         * @returns {String}\r\n         */\r\n        getCurrencySymbol: function () {\r\n            return this.currencySymbol;\r\n        },\r\n\r\n        /**\r\n         * Chose action for the form save button\r\n         */\r\n        saveFormHandler: function () {\r\n            this.formElement().validate();\r\n\r\n            if (this.formElement().source.get('params.invalid') === false) {\r\n                this.serializeData();\r\n            }\r\n\r\n            if (this.checkForNewAttributes()) {\r\n                this.formSaveParams = arguments;\r\n                this.attributeSetHandlerModal().openModal();\r\n            } else {\r\n                if (this.validateForm(this.formElement())) {\r\n                    this.clearOutdatedData();\r\n                }\r\n                this.formElement().save(arguments[0], arguments[1]);\r\n\r\n                if (this.formElement().source.get('params.invalid')) {\r\n                    this.unserializeData();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} formElement\r\n         *\r\n         * Validates each form element and returns true, if all elements are valid.\r\n         */\r\n        validateForm: function (formElement) {\r\n            formElement.validate();\r\n\r\n            return !formElement.additionalInvalid && !formElement.source.get('params.invalid');\r\n        },\r\n\r\n        /**\r\n         * Serialize data for specific form fields\r\n         *\r\n         * Serializes some complex data fields\r\n         *\r\n         * Original fields:\r\n         *   - configurable-matrix;\r\n         *   - associated_product_ids.\r\n         *\r\n         * Serialized fields in request:\r\n         *   - configurable-matrix-serialized;\r\n         *   - associated_product_ids_serialized.\r\n         */\r\n        serializeData: function () {\r\n            if (this.source.data['configurable-matrix']) {\r\n                this.source.data['configurable-matrix-serialized'] =\r\n                    JSON.stringify(this.source.data['configurable-matrix']);\r\n            }\r\n\r\n            if (this.source.data['associated_product_ids']) {\r\n                this.source.data['associated_product_ids_serialized'] =\r\n                    JSON.stringify(this.source.data['associated_product_ids']);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Clear outdated data for specific form fields\r\n         *\r\n         * Outdated fields:\r\n         *   - configurable-matrix;\r\n         *   - associated_product_ids.\r\n         */\r\n        clearOutdatedData: function () {\r\n            if (this.source.data['configurable-matrix']) {\r\n                delete this.source.data['configurable-matrix'];\r\n            }\r\n\r\n            if (this.source.data['associated_product_ids']) {\r\n                delete this.source.data['associated_product_ids'];\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Unserialize data for specific form fields\r\n         *\r\n         * Unserializes some fields that were serialized this.serializeData\r\n         */\r\n        unserializeData: function () {\r\n            if (this.source.data['configurable-matrix-serialized']) {\r\n                this.source.data['configurable-matrix'] =\r\n                    JSON.parse(this.source.data['configurable-matrix-serialized']);\r\n                delete this.source.data['configurable-matrix-serialized'];\r\n            }\r\n\r\n            if (this.source.data['associated_product_ids_serialized']) {\r\n                this.source.data['associated_product_ids'] =\r\n                    JSON.parse(this.source.data['associated_product_ids_serialized']);\r\n                delete this.source.data['associated_product_ids_serialized'];\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check for newly added attributes\r\n         * @returns {Boolean}\r\n         */\r\n        checkForNewAttributes: function () {\r\n            var element, newAttributes = false;\r\n\r\n            _.each(this.source.get('data.attribute_codes'), function (attribute) {\r\n                element = registry.get('index = ' + attribute);\r\n\r\n                if (_.isUndefined(element)) {\r\n                    newAttributes = true;\r\n                }\r\n            }, this);\r\n\r\n            return newAttributes;\r\n        },\r\n\r\n        /**\r\n         * New attributes handler\r\n         * @returns {Boolean}\r\n         */\r\n        addNewAttributeSetHandler: function () {\r\n            var chosenAttributeSetOption;\r\n\r\n            this.formElement().validate();\r\n\r\n            if (this.formElement().source.get('params.invalid') === false) {\r\n                chosenAttributeSetOption = this.attributeSetSelection;\r\n\r\n                if (chosenAttributeSetOption === 'new') {\r\n                    this.createNewAttributeSet();\r\n\r\n                    return false;\r\n                }\r\n\r\n                if (chosenAttributeSetOption === 'existing') {\r\n                    this.set(\r\n                        'skeletonAttributeSet',\r\n                        this.attributeSetId\r\n                    );\r\n                }\r\n\r\n                this.closeDialogAndProcessForm();\r\n\r\n                return true;\r\n            }\r\n\r\n            this.unserializeData();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Handles new attribute set creation\r\n         * @returns {Boolean}\r\n         */\r\n        createNewAttributeSet: function () {\r\n            var messageBoxElement = registry.get('index = affectedAttributeSetError');\r\n\r\n            messageBoxElement.visible(false);\r\n\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.attributeSetCreationUrl,\r\n                data: {\r\n                    gotoEdit: 1,\r\n                    'attribute_set_name': this.attributeSetName,\r\n                    'skeleton_set': this.skeletonAttributeSet,\r\n                    'return_session_messages_only': 1\r\n                },\r\n                dataType: 'json',\r\n                showLoader: true,\r\n                context: this\r\n            }).done(function (data) {\r\n                if (!data.error) {\r\n                    this.set(\r\n                        'skeletonAttributeSet',\r\n                        data.id\r\n                    );\r\n                    messageBoxElement.content(data.messages);\r\n                    messageBoxElement.visible(true);\r\n                    this.closeDialogAndProcessForm();\r\n                } else {\r\n                    messageBoxElement.content(data.messages);\r\n                    messageBoxElement.visible(true);\r\n                }\r\n\r\n                return false;\r\n            }).fail(function (xhr) {\r\n                if (xhr.statusText === 'abort') {\r\n                    return;\r\n                }\r\n\r\n                alert({\r\n                    content: $t('Something went wrong.')\r\n                });\r\n            });\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Closes attribute set handler modal and process product form\r\n         */\r\n        closeDialogAndProcessForm: function () {\r\n            this.attributeSetHandlerModal().closeModal();\r\n            this.formElement().save(this.formSaveParams[0], this.formSaveParams[1]);\r\n        },\r\n\r\n        /**\r\n         * Retrieves product price\r\n         * @returns {*}\r\n         */\r\n        getProductPrice: function () {\r\n            return this.productPrice;\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/paging/sizes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/paging/sizes'\r\n], function (Sizes) {\r\n    'use strict';\r\n\r\n    return Sizes.extend({\r\n        defaults: {\r\n            options: {\r\n                '20': {\r\n                    value: 20,\r\n                    label: 20\r\n                },\r\n                '30': {\r\n                    value: 30,\r\n                    label: 30\r\n                },\r\n                '50': {\r\n                    value: 50,\r\n                    label: 50\r\n                }\r\n            },\r\n            value: 20\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/steps/attributes_values.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'Magento_Ui/js/lib/collapsible',\r\n    'mage/translate'\r\n], function (Component, $, ko, _, utils, Collapsible) {\r\n    'use strict';\r\n\r\n    //connect items with observableArrays\r\n    ko.bindingHandlers.sortableList = {\r\n        /** @inheritdoc */\r\n        init: function (element, valueAccessor) {\r\n            var list = valueAccessor();\r\n\r\n            $(element).sortable({\r\n                axis: 'y',\r\n                handle: '[data-role=\"draggable\"]',\r\n                tolerance: 'pointer',\r\n\r\n                /** @inheritdoc */\r\n                update: function (event, ui) {\r\n                    var item = ko.contextFor(ui.item[0]).$data,\r\n                        position = ko.utils.arrayIndexOf(ui.item.parent().children(), ui.item[0]);\r\n\r\n                    if (ko.contextFor(ui.item[0]).$index() != position) { //eslint-disable-line eqeqeq\r\n                        if (position >= 0) {\r\n                            list.remove(item);\r\n                            list.splice(position, 0, item);\r\n                        }\r\n                        ui.item.remove();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return Collapsible.extend({\r\n        defaults: {\r\n            notificationMessage: {\r\n                text: null,\r\n                error: null\r\n            },\r\n            createOptionsUrl: null,\r\n            attributes: [],\r\n            stepInitialized: false\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.createAttribute = _.wrap(this.createAttribute, function () {\r\n                var args = _.toArray(arguments),\r\n                    createAttribute = args.shift();\r\n\r\n                return this.doInitSavedOptions(createAttribute.apply(this, args));\r\n            });\r\n            this.createAttribute = _.memoize(this.createAttribute.bind(this), _.property('id'));\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe(['attributes']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Create option.\r\n         */\r\n        createOption: function () {\r\n            // this - current attribute\r\n            this.options.push({\r\n                value: 0,\r\n                label: '',\r\n                id: utils.uniqueid(),\r\n                'attribute_id': this.id,\r\n                'is_new': true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} option\r\n         */\r\n        saveOption: function (option) {\r\n            if (this.isValidOption(option)) {\r\n                this.options.remove(option);\r\n                this.options.push(option);\r\n                this.chosenOptions.push(option.id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} newOption\r\n         * @return boolean\r\n         */\r\n        isValidOption: function (newOption) {\r\n            var duplicatedOptions = [],\r\n                errorOption,\r\n                allOptions = [];\r\n\r\n            if (_.isEmpty(newOption.label)) {\r\n                return false;\r\n            }\r\n\r\n            _.each(this.options(), function (option) {\r\n                if (!_.isUndefined(allOptions[option.label]) && newOption.label === option.label) {\r\n                    duplicatedOptions.push(option);\r\n                }\r\n\r\n                allOptions[option.label] = option.label;\r\n            });\r\n\r\n            if (duplicatedOptions.length) {\r\n                _.each(duplicatedOptions, function (duplicatedOption) {\r\n                    errorOption = $('[data-role=\"' + duplicatedOption.id + '\"]');\r\n                    errorOption.addClass('_error');\r\n                });\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} option\r\n         */\r\n        removeOption: function (option) {\r\n            this.options.remove(option);\r\n        },\r\n\r\n        /**\r\n         * @param {String} attribute\r\n         */\r\n        removeAttribute: function (attribute) {\r\n            this.attributes.remove(attribute);\r\n            this.wizard.setNotificationMessage(\r\n                $.mage.__('An attribute has been removed. This attribute will no longer appear in your configurations.')\r\n            );\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attribute\r\n         * @param {*} index\r\n         * @return {Object}\r\n         */\r\n        createAttribute: function (attribute, index) {\r\n            attribute.chosenOptions = ko.observableArray([]);\r\n            attribute.options = ko.observableArray(_.map(attribute.options, function (option) {\r\n                option.id = utils.uniqueid();\r\n\r\n                return option;\r\n            }));\r\n            attribute.opened = ko.observable(this.initialOpened(index));\r\n            attribute.collapsible = ko.observable(true);\r\n            attribute.isValidOption = this.isValidOption;\r\n\r\n            return attribute;\r\n        },\r\n\r\n        /**\r\n         * First 3 attribute panels must be open.\r\n         *\r\n         * @param {Number} index\r\n         * @return {Boolean}\r\n         */\r\n        initialOpened: function (index) {\r\n            return index < 3;\r\n        },\r\n\r\n        /**\r\n         * Save attribute.\r\n         */\r\n        saveAttribute: function () {\r\n            var errorMessage = $.mage.__('Select options for all attributes or remove unused attributes.');\r\n\r\n            if (!this.attributes().length) {\r\n                throw new Error(errorMessage);\r\n            }\r\n\r\n            _.each(this.attributes(), function (attribute) {\r\n                attribute.chosen = [];\r\n\r\n                if (!attribute.chosenOptions.getLength()) {\r\n                    throw new Error(errorMessage);\r\n                }\r\n                _.each(attribute.chosenOptions(), function (id) {\r\n                    attribute.chosen.push(attribute.options.findWhere({\r\n                        id: id\r\n                    }));\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attribute\r\n         */\r\n        selectAllAttributes: function (attribute) {\r\n            this.chosenOptions(_.pluck(attribute.options(), 'id'));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attribute\r\n         */\r\n        deSelectAllAttributes: function (attribute) {\r\n            attribute.chosenOptions.removeAll();\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        saveOptions: function () {\r\n            var newOptions = [];\r\n\r\n            _.each(this.attributes(), function (attribute) {\r\n                _.each(attribute.options(), function (element) {\r\n                    var option = attribute.options.findWhere({\r\n                        id: element.id\r\n                    });\r\n\r\n                    if (option['is_new'] === true) {\r\n                        if (!attribute.isValidOption(option)) {\r\n                            throw new Error(\r\n                                $.mage.__('The value of attribute \"\"%1\"\" must be unique')\r\n                                    .replace('\"%1\"', attribute.label)\r\n                            );\r\n                        }\r\n\r\n                        newOptions.push(option);\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (!newOptions.length) {\r\n                return false;\r\n            }\r\n\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.createOptionsUrl,\r\n                data: {\r\n                    options: newOptions\r\n                },\r\n                showLoader: true\r\n            }).done(function (savedOptions) {\r\n                if (savedOptions.error) {\r\n                    this.notificationMessage.error = savedOptions.error;\r\n                    this.notificationMessage.text = savedOptions.message;\r\n\r\n                    return;\r\n                }\r\n\r\n                _.each(this.attributes(), function (attribute) {\r\n                    _.each(savedOptions, function (newOptionId, oldOptionId) {\r\n                        var option = attribute.options.findWhere({\r\n                            id: oldOptionId\r\n                        });\r\n\r\n                        if (option) {\r\n                            attribute.options.remove(option);\r\n                            option['is_new'] = false;\r\n                            option.value = newOptionId;\r\n                            attribute.options.push(option);\r\n                        }\r\n                    });\r\n                });\r\n\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {*} attributeIds\r\n         */\r\n        requestAttributes: function (attributeIds) {\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: this.optionsUrl,\r\n                data: {\r\n                    attributes: attributeIds\r\n                },\r\n                showLoader: true\r\n            }).done(function (attributes) {\r\n                attributes = _.sortBy(attributes, function (attribute) {\r\n                    return this.wizard.data.attributesIds.indexOf(attribute.id);\r\n                }.bind(this));\r\n                this.attributes(_.map(attributes, this.createAttribute));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {*} attribute\r\n         * @return {*}\r\n         */\r\n        doInitSavedOptions: function (attribute) {\r\n            var selectedOptions, selectedOptionsIds, selectedAttribute = _.findWhere(this.initData.attributes, {\r\n                id: attribute.id\r\n            });\r\n\r\n            if (selectedAttribute) {\r\n                selectedOptions = _.pluck(selectedAttribute.chosen, 'value');\r\n                selectedOptionsIds = _.pluck(_.filter(attribute.options(), function (option) {\r\n                    return _.contains(selectedOptions, option.value);\r\n                }), 'id');\r\n                attribute.chosenOptions(selectedOptionsIds);\r\n                this.initData.attributes = _.without(this.initData.attributes, selectedAttribute);\r\n            }\r\n\r\n            return attribute;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        render: function (wizard) {\r\n            this.wizard = wizard;\r\n            this.requestAttributes(wizard.data.attributesIds());\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        force: function (wizard) {\r\n            this.saveOptions();\r\n            this.saveAttribute(wizard);\r\n\r\n            wizard.data.attributes = this.attributes;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        back: function (wizard) {\r\n            wizard.data.attributesIds(this.attributes().pluck('id'));\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/steps/bulk.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global FORM_KEY, byteConvert */\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/lib/collapsible',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Catalog/js/product-gallery',\r\n    'jquery/file-uploader',\r\n    'mage/translate',\r\n    'Magento_ConfigurableProduct/js/variations/variations'\r\n], function (Component, $, ko, _, Collapsible, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            modules: {\r\n                variationsComponent: '${ $.variationsComponent }'\r\n            },\r\n            countVariations: 0,\r\n            attributes: [],\r\n            sections: {},\r\n            images: null,\r\n            price: '',\r\n            quantity: '',\r\n            notificationMessage: {\r\n                text: null,\r\n                error: null\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe('countVariations attributes sections');\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            var self = this;\r\n\r\n            this._super();\r\n            this.sections({\r\n                images: {\r\n                    label: 'images',\r\n                    type: ko.observable('none'),\r\n                    value: ko.observable(),\r\n                    attribute: ko.observable()\r\n                },\r\n                price: {\r\n                    label: 'price',\r\n                    type: ko.observable('none'),\r\n                    value: ko.observable(),\r\n                    attribute: ko.observable(),\r\n                    currencySymbol: ''\r\n                },\r\n                quantity: {\r\n                    label: 'quantity',\r\n                    type: ko.observable('none'),\r\n                    value: ko.observable(),\r\n                    attribute: ko.observable()\r\n                }\r\n            });\r\n\r\n            this.variationsComponent(function (variationsComponent) {\r\n                this.sections().price.currencySymbol = variationsComponent.getCurrencySymbol();\r\n            }.bind(this));\r\n\r\n            /**\r\n             * Make options sections.\r\n             */\r\n            this.makeOptionSections = function () {\r\n                return {\r\n                    images: new this.makeImages(null),\r\n                    price: this.price,\r\n                    quantity: this.quantity\r\n                };\r\n            }.bind(this);\r\n\r\n            /**\r\n             * @param {Object} images\r\n             * @param {*} typePreview\r\n             */\r\n            this.makeImages = function (images, typePreview) {\r\n                var preview;\r\n\r\n                if (!images) {\r\n                    this.images = [];\r\n                    this.preview = self.noImage;\r\n                    this.file = null;\r\n                } else {\r\n                    this.images = images;\r\n                    preview = _.find(this.images, function (image) {\r\n                        return _.contains(image.galleryTypes, typePreview);\r\n                    });\r\n\r\n                    if (preview) {\r\n                        this.file = preview.file;\r\n                        this.preview = preview.url;\r\n                    } else {\r\n                        this.file = null;\r\n                        this.preview = self.noImage;\r\n                    }\r\n                }\r\n            };\r\n            this.images = new this.makeImages();\r\n            _.each(this.sections(), function (section) {\r\n                section.type.subscribe(function () {\r\n                    this.setWizardNotifyMessageDependOnSectionType();\r\n                }.bind(this));\r\n            }, this);\r\n        },\r\n        types: ['each', 'single', 'none'],\r\n\r\n        /**\r\n         * Set Wizard notify message depend on section type\r\n         */\r\n        setWizardNotifyMessageDependOnSectionType: function () {\r\n            var flag = false;\r\n\r\n            _.each(this.sections(), function (section) {\r\n                if (section.type() !== 'none') {\r\n                    flag = true;\r\n                }\r\n            }, this);\r\n\r\n            if (flag) {\r\n                this.wizard.setNotificationMessage(\r\n                    $.mage.__('Choose this option to delete and replace extension data for all past configurations.')\r\n                );\r\n            } else {\r\n                this.wizard.cleanNotificationMessage();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        render: function (wizard) {\r\n            this.wizard = wizard;\r\n            this.attributes(wizard.data.attributes());\r\n\r\n            if (this.mode === 'edit') {\r\n                this.setWizardNotifyMessageDependOnSectionType();\r\n            }\r\n            //fill option section data\r\n            this.attributes.each(function (attribute) {\r\n                attribute.chosen.each(function (option) {\r\n                    option.sections = ko.observable(this.makeOptionSections());\r\n                }, this);\r\n            }, this);\r\n            //reset section.attribute\r\n            _.each(this.sections(), function (section) {\r\n                section.attribute(null);\r\n            });\r\n\r\n            this.initCountVariations();\r\n            this.bindGalleries();\r\n        },\r\n\r\n        /**\r\n         * Init count variations.\r\n         */\r\n        initCountVariations: function () {\r\n            var variations = this.generateVariation(this.attributes()),\r\n                newVariations = _.map(variations, function (options) {\r\n                    return this.variationsComponent().getVariationKey(options);\r\n                }.bind(this)),\r\n                existingVariations = _.keys(this.variationsComponent().productAttributesMap);\r\n\r\n            this.countVariations(_.difference(newVariations, existingVariations).length);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attributes - example [['b1', 'b2'],['a1', 'a2', 'a3'],['c1', 'c2', 'c3'],['d1']]\r\n         * @returns {*} example [['b1','a1','c1','d1'],['b1','a1','c2','d1']...]\r\n         */\r\n        generateVariation: function (attributes) {\r\n            return _.reduce(attributes, function (matrix, attribute) {\r\n                var tmp = [];\r\n\r\n                _.each(matrix, function (variations) {\r\n                    _.each(attribute.chosen, function (option) {\r\n                        option['attribute_code'] = attribute.code;\r\n                        option['attribute_label'] = attribute.label;\r\n                        tmp.push(_.union(variations, [option]));\r\n                    });\r\n                });\r\n\r\n                if (!tmp.length) {\r\n                    return _.map(attribute.chosen, function (option) {\r\n                        option['attribute_code'] = attribute.code;\r\n                        option['attribute_label'] = attribute.label;\r\n\r\n                        return [option];\r\n                    });\r\n                }\r\n\r\n                return tmp;\r\n            }, []);\r\n        },\r\n\r\n        /**\r\n         * @param {*} section\r\n         * @param {Object} options\r\n         * @return {*}\r\n         */\r\n        getSectionValue: function (section, options) {\r\n            switch (this.sections()[section].type()) {\r\n                case 'each':\r\n                    return _.find(this.sections()[section].attribute().chosen, function (chosen) {\r\n                        return _.find(options, function (option) {\r\n                            return chosen.id == option.id; //eslint-disable-line eqeqeq\r\n                        });\r\n                    }).sections()[section];\r\n\r\n                case 'single':\r\n                    return this.sections()[section].value();\r\n\r\n                case 'none':\r\n                    return this[section];\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} node\r\n         * @return {Promise|*}\r\n         */\r\n        getImageProperty: function (node) {\r\n            var types = node.find('[data-role=gallery]').productGallery('option').types,\r\n                images = _.map(node.find('[data-role=image]'), function (image) {\r\n                    var imageData = $(image).data('imageData'),\r\n                        positionElement;\r\n\r\n                    imageData.galleryTypes = _.pluck(_.filter(types, function (type) {\r\n                        return type.value === imageData.file;\r\n                    }), 'code');\r\n\r\n                    //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n                    positionElement =\r\n                        $(image).find('[name=\"product[media_gallery][images][' + imageData.file_id + '][position]\"]');\r\n                    //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n                    if (!_.isEmpty(positionElement.val())) {\r\n                        imageData.position = positionElement.val();\r\n                    }\r\n\r\n                    return imageData;\r\n                });\r\n\r\n            return _.reject(images, function (image) {\r\n                return !!image.isRemoved;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Fill images section.\r\n         */\r\n        fillImagesSection: function () {\r\n            switch (this.sections().images.type()) {\r\n                case 'each':\r\n                    if (this.sections().images.attribute()) {\r\n                        this.sections().images.attribute().chosen.each(function (option) {\r\n                            option.sections().images = new this.makeImages(\r\n                                this.getImageProperty($('[data-role=step-gallery-option-' + option.id + ']')),\r\n                                'thumbnail'\r\n                            );\r\n                        }, this);\r\n                    }\r\n                    break;\r\n\r\n                case 'single':\r\n                    this.sections().images.value(new this.makeImages(\r\n                        this.getImageProperty($('[data-role=step-gallery-single]')),\r\n                        'thumbnail'\r\n                    ));\r\n                    break;\r\n\r\n                default:\r\n                    this.sections().images.value(new this.makeImages());\r\n                    break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        force: function (wizard) {\r\n            this.fillImagesSection();\r\n            this.validate();\r\n            this.validateImage();\r\n            wizard.data.sections = this.sections;\r\n            wizard.data.sectionHelper = this.getSectionValue.bind(this);\r\n            wizard.data.variations = this.generateVariation(this.attributes());\r\n        },\r\n\r\n        /**\r\n         * Validate.\r\n         */\r\n        validate: function () {\r\n            var formValid;\r\n\r\n            _.each(this.sections(), function (section) {\r\n                switch (section.type()) {\r\n                    case 'each':\r\n                        if (!section.attribute()) {\r\n                            throw new Error($.mage.__('Please select attribute for {section} section.')\r\n                                .replace('{section}', section.label));\r\n                        }\r\n                        break;\r\n\r\n                    case 'single':\r\n                        if (!section.value()) {\r\n                            throw new Error($.mage.__('Please fill in the values for {section} section.')\r\n                                .replace('{section}', section.label));\r\n                        }\r\n                        break;\r\n                }\r\n            }, this);\r\n            formValid = true;\r\n            _.each($('[data-role=attributes-values-form]'), function (form) {\r\n                formValid = $(form).valid() && formValid;\r\n            });\r\n\r\n            if (!formValid) {\r\n                throw new Error($.mage.__('Please fill-in correct values.'));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate image.\r\n         */\r\n        validateImage: function () {\r\n            switch (this.sections().images.type()) {\r\n                case 'each':\r\n                    _.each(this.sections().images.attribute().chosen, function (option) {\r\n                        if (!option.sections().images.images.length) {\r\n                            throw new Error($.mage.__('Please select image(s) for your attribute.'));\r\n                        }\r\n                    });\r\n                    break;\r\n\r\n                case 'single':\r\n                    if (this.sections().images.value().file == null) {\r\n                        throw new Error($.mage.__('Please choose image(s).'));\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Back.\r\n         */\r\n        back: function () {\r\n            this.setWizardNotifyMessageDependOnSectionType();\r\n        },\r\n\r\n        /**\r\n         * Bind galleries.\r\n         */\r\n        bindGalleries: function () {\r\n            $('[data-role=bulk-step] [data-role=gallery]').each(function (index, element) {\r\n                var gallery = $(element),\r\n                    uploadInput = $(gallery.find('[name=image]')),\r\n                    dropZone = $(gallery).find('.image-placeholder');\r\n\r\n                if (!gallery.data('gallery-initialized')) {\r\n                    gallery.mage('productGallery', {\r\n                        template: '[data-template=gallery-content]',\r\n                        dialogTemplate: '.dialog-template',\r\n                        dialogContainerTmpl: '[data-role=img-dialog-container-tmpl]'\r\n                    });\r\n\r\n                    uploadInput.fileupload({\r\n                        dataType: 'json',\r\n                        dropZone: dropZone,\r\n                        process: [{\r\n                            action: 'load',\r\n                            fileTypes: /^image\\/(gif|jpeg|png)$/\r\n                        }, {\r\n                            action: 'resize',\r\n                            maxWidth: 1920,\r\n                            maxHeight: 1200\r\n                        }, {\r\n                            action: 'save'\r\n                        }],\r\n                        formData: {\r\n                            'form_key': FORM_KEY\r\n                        },\r\n                        sequentialUploads: true,\r\n                        acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n\r\n                        /**\r\n                         * @param {jQuery.Event} e\r\n                         * @param {Object} data\r\n                         */\r\n                        add: function (e, data) {\r\n                            var progressTmpl = mageTemplate('[data-template=uploader]'),\r\n                                fileSize,\r\n                                tmpl;\r\n\r\n                            $.each(data.files, function (i, file) {\r\n                                fileSize = typeof file.size == 'undefined' ?\r\n                                    $.mage.__('We could not detect a size.') :\r\n                                    byteConvert(file.size);\r\n\r\n                                data.fileId = Math.random().toString(33).substr(2, 18);\r\n\r\n                                tmpl = progressTmpl({\r\n                                    data: {\r\n                                        name: file.name,\r\n                                        size: fileSize,\r\n                                        id: data.fileId\r\n                                    }\r\n                                });\r\n\r\n                                $(tmpl).appendTo(gallery.find('[data-role=uploader]'));\r\n                            });\r\n\r\n                            $(this).fileupload('process', data).done(function () {\r\n                                data.submit();\r\n                            });\r\n                        },\r\n\r\n                        /**\r\n                         * @param {jQuery.Event} e\r\n                         * @param {Object} data\r\n                         */\r\n                        done: function (e, data) {\r\n                            if (data.result && !data.result.error) {\r\n                                gallery.trigger('addItem', data.result);\r\n                            } else {\r\n                                $('#' + data.fileId)\r\n                                    .delay(2000)\r\n                                    .hide('highlight');\r\n                                alert({\r\n                                    content: $.mage.__('We don\\'t recognize or support this file extension type.')\r\n                                });\r\n                            }\r\n                            $('#' + data.fileId).remove();\r\n                        },\r\n\r\n                        /**\r\n                         * @param {jQuery.Event} e\r\n                         * @param {Object} data\r\n                         */\r\n                        progress: function (e, data) {\r\n                            var progress = parseInt(data.loaded / data.total * 100, 10),\r\n                                progressSelector = '#' + data.fileId + ' .progressbar-container .progressbar';\r\n\r\n                            $(progressSelector).css('width', progress + '%');\r\n                        },\r\n\r\n                        /**\r\n                         * @param {jQuery.Event} e\r\n                         * @param {Object} data\r\n                         */\r\n                        fail: function (e, data) {\r\n                            var progressSelector = '#' + data.fileId;\r\n\r\n                            $(progressSelector).removeClass('upload-progress').addClass('upload-failure')\r\n                                .delay(2000)\r\n                                .hide('highlight')\r\n                                .remove();\r\n                        }\r\n                    });\r\n                    gallery.data('gallery-initialized', 1);\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/steps/select_attributes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'underscore',\r\n    'mage/translate'\r\n], function (Component, $, _) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {Function} provider\r\n     */\r\n    var initNewAttributeListener = function (provider) {\r\n        $('[data-role=product-variations-matrix]').on('add', function () {\r\n            provider().reload();\r\n        });\r\n    };\r\n\r\n    return Component.extend({\r\n        attributesLabels: {},\r\n        stepInitialized: false,\r\n        defaults: {\r\n            modules: {\r\n                multiselect: '${ $.multiselectName }',\r\n                attributeProvider: '${ $.providerName }'\r\n            },\r\n            listens: {\r\n                '${ $.multiselectName }:selected': 'doSelectedAttributesLabels',\r\n                '${ $.multiselectName }:rows': 'doSelectSavedAttributes'\r\n            },\r\n            notificationMessage: {\r\n                text: null,\r\n                error: null\r\n            },\r\n            selectedAttributes: []\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.selected = [];\r\n\r\n            initNewAttributeListener(this.attributeProvider);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe(['selectedAttributes']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        render: function (wizard) {\r\n            this.wizard = wizard;\r\n            this.setNotificationMessage();\r\n        },\r\n\r\n        /**\r\n         * Set notification message.\r\n         */\r\n        setNotificationMessage: function () {\r\n            /*eslint-disable max-len*/\r\n            var msg = $.mage.__('When you remove or add an attribute, we automatically update all configurations and you will need to recreate current configurations manually.');\r\n\r\n            /*eslint-enable max-len*/\r\n\r\n            if (this.mode === 'edit') {\r\n                this.wizard.setNotificationMessage(msg);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Do select saved attributes.\r\n         */\r\n        doSelectSavedAttributes: function () {\r\n            if (this.stepInitialized === false) {\r\n                this.stepInitialized = true;\r\n                //cache attributes labels, which can be present on the 2nd page\r\n                _.each(this.initData.attributes, function (attribute) {\r\n                    this.attributesLabels[attribute.id] = attribute.label;\r\n                }.bind(this));\r\n                this.multiselect().selected(_.pluck(this.initData.attributes, 'id'));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} selected\r\n         */\r\n        doSelectedAttributesLabels: function (selected) {\r\n            var labels = [];\r\n\r\n            this.selected = selected;\r\n            _.each(selected, function (attributeId) {\r\n                var attribute;\r\n\r\n                if (!this.attributesLabels[attributeId]) {\r\n                    attribute = _.findWhere(this.multiselect().rows(), {\r\n                        'attribute_id': attributeId\r\n                    });\r\n\r\n                    if (attribute) {\r\n                        this.attributesLabels[attribute['attribute_id']] = attribute['frontend_label'];\r\n                    }\r\n                }\r\n                labels.push(this.attributesLabels[attributeId]);\r\n            }.bind(this));\r\n            this.selectedAttributes(labels.join(', '));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        force: function (wizard) {\r\n            wizard.data.attributesIds = this.multiselect().selected;\r\n\r\n            if (!wizard.data.attributesIds() || wizard.data.attributesIds().length === 0) {\r\n                throw new Error($.mage.__('Please select attribute(s).'));\r\n            }\r\n            this.setNotificationMessage();\r\n        },\r\n\r\n        /**\r\n         * Back.\r\n         */\r\n        back: function () {\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/steps/summary.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/grid/paging/paging',\r\n    'mage/translate'\r\n], function (Component, $, ko, _, paging) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            modules: {\r\n                variationsComponent: '${ $.variationsComponent }',\r\n                modalComponent: '${ $.modalComponent }'\r\n            },\r\n            notificationMessage: {\r\n                text: null,\r\n                error: null\r\n            },\r\n            gridExisting: [],\r\n            gridNew: [],\r\n            gridDeleted: [],\r\n            variationsExisting: [],\r\n            variationsNew: [],\r\n            variationsDeleted: [],\r\n            pagingExisting: paging({\r\n                name: 'configurableWizard.pagingExisting',\r\n                sizesConfig: {\r\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\r\n                    name: 'configurableWizard.pagingExisting_sizes'\r\n                }\r\n            }),\r\n            pagingNew: paging({\r\n                name: 'configurableWizard.pagingNew',\r\n                sizesConfig: {\r\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\r\n                    name: 'configurableWizard.pagingNew_sizes'\r\n                }\r\n            }),\r\n            pagingDeleted: paging({\r\n                name: 'configurableWizard.pagingDeleted',\r\n                sizesConfig: {\r\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\r\n                    name: 'configurableWizard.pagingDeleted_sizes'\r\n                }\r\n            }),\r\n            attributes: [],\r\n            attributesName: [$.mage.__('Images'), $.mage.__('SKU'), $.mage.__('Quantity'), $.mage.__('Price')],\r\n            sections: [],\r\n            gridTemplate: 'Magento_ConfigurableProduct/variations/steps/summary-grid',\r\n            quantityFieldName: 'quantity'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            var pagingObservables = {\r\n                currentNew: ko.getObservable(this.pagingNew, 'current'),\r\n                currentExisting: ko.getObservable(this.pagingExisting, 'current'),\r\n                currentDeleted: ko.getObservable(this.pagingDeleted, 'current'),\r\n                pageSizeNew: ko.getObservable(this.pagingNew, 'pageSize'),\r\n                pageSizeExisting: ko.getObservable(this.pagingExisting, 'pageSize'),\r\n                pageSizeDeleted: ko.getObservable(this.pagingDeleted, 'pageSize')\r\n            };\r\n\r\n            this._super().observe('gridExisting gridNew gridDeleted attributes sections');\r\n            this.gridExisting.columns = ko.observableArray();\r\n            this.gridNew.columns = ko.observableArray();\r\n            this.gridDeleted.columns = ko.observableArray();\r\n\r\n            _.each(pagingObservables, function (observable) {\r\n                observable.subscribe(function () {\r\n                    this.generateGrid();\r\n                }, this);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n        nextLabelText: $.mage.__('Generate Products'),\r\n        variations: [],\r\n\r\n        /**\r\n         * @param {*} variations\r\n         * @param {Function} getSectionValue\r\n         */\r\n        calculate: function (variations, getSectionValue) {\r\n            var productSku = this.variationsComponent().getProductValue('sku'),\r\n                productPrice = this.variationsComponent().getProductPrice(),\r\n                productWeight = this.variationsComponent().getProductValue('weight'),\r\n                productName = this.variationsComponent().getProductValue('name'),\r\n                variationsKeys = [],\r\n                gridExisting = [],\r\n                gridNew = [],\r\n                gridDeleted = [];\r\n\r\n            this.variations = [];\r\n            _.each(variations, function (options) {\r\n                var product, images, sku, name, quantity, price, variation,\r\n                    productId = this.variationsComponent().getProductIdByOptions(options);\r\n\r\n                if (productId) {\r\n                    product = _.findWhere(this.variationsComponent().variations, {\r\n                        productId: productId\r\n                    });\r\n                }\r\n                images = getSectionValue('images', options);\r\n                sku = productSku + _.reduce(options, function (memo, option) {\r\n                    return memo + '-' + option.label;\r\n                }, '');\r\n                name = productName + _.reduce(options, function (memo, option) {\r\n                    return memo + '-' + option.label;\r\n                }, '');\r\n                quantity = getSectionValue(this.quantityFieldName, options);\r\n\r\n                if (!quantity && productId) {\r\n                    quantity = product[this.quantityFieldName];\r\n                }\r\n                price = getSectionValue('price', options);\r\n\r\n                if (!price) {\r\n                    price = productId ? product.price : productPrice;\r\n                }\r\n\r\n                if (productId && !images.file) {\r\n                    images = product.images;\r\n                }\r\n                variation = {\r\n                    options: options,\r\n                    images: images,\r\n                    sku: sku,\r\n                    name: name,\r\n                    price: price,\r\n                    productId: productId,\r\n                    weight: productWeight,\r\n                    editable: true\r\n                };\r\n                variation[this.quantityFieldName] = quantity;\r\n\r\n                if (productId) {\r\n                    variation.sku = product.sku;\r\n                    variation.weight = product.weight;\r\n                    variation.name = product.name;\r\n                    gridExisting.push(this.prepareRowForGrid(variation));\r\n                } else {\r\n                    gridNew.push(this.prepareRowForGrid(variation));\r\n                }\r\n                this.variations.push(variation);\r\n                variationsKeys.push(this.variationsComponent().getVariationKey(options));\r\n            }, this);\r\n\r\n            _.each(_.omit(this.variationsComponent().productAttributesMap, variationsKeys), function (productId) {\r\n                gridDeleted.push(this.prepareRowForGrid(\r\n                    _.findWhere(this.variationsComponent().variations, {\r\n                        productId: productId\r\n                    })\r\n                ));\r\n            }.bind(this));\r\n\r\n            this.variationsExisting = gridExisting;\r\n            this.variationsNew = gridNew;\r\n            this.variationsDeleted = gridDeleted;\r\n        },\r\n\r\n        /**\r\n         * Generate grid.\r\n         */\r\n        generateGrid: function () {\r\n            var pageExisting = this.pagingExisting.pageSize * this.pagingExisting.current,\r\n                pageNew = this.pagingNew.pageSize * this.pagingNew.current,\r\n                pageDeleted = this.pagingDeleted.pageSize * this.pagingDeleted.current;\r\n\r\n            this.pagingExisting.totalRecords = this.variationsExisting.length;\r\n            this.gridExisting(this.variationsExisting.slice(pageExisting - this.pagingExisting.pageSize, pageExisting));\r\n\r\n            this.pagingNew.totalRecords = this.variationsNew.length;\r\n            this.gridNew(this.variationsNew.slice(pageNew - this.pagingNew.pageSize, pageNew));\r\n\r\n            this.pagingDeleted.totalRecords = this.variationsDeleted.length;\r\n            this.gridDeleted(this.variationsDeleted.slice(pageDeleted - this.pagingDeleted.pageSize, pageDeleted));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} variation\r\n         * @return {Array}\r\n         */\r\n        prepareRowForGrid: function (variation) {\r\n            var row = [];\r\n\r\n            row.push(_.extend({\r\n                images: []\r\n            }, variation.images));\r\n            row.push(variation.sku);\r\n            row.push(variation[this.quantityFieldName]);\r\n            _.each(variation.options, function (option) {\r\n                row.push(option.label);\r\n            });\r\n            row.push(this.variationsComponent().getCurrencySymbol() +  ' ' + variation.price);\r\n\r\n            return row;\r\n        },\r\n\r\n        /**\r\n         * @return {String|*}\r\n         */\r\n        getGridTemplate: function () {\r\n            return this.gridTemplate;\r\n        },\r\n\r\n        /**\r\n         * @return {*|String}\r\n         */\r\n        getGridId: function () {\r\n            return _.uniqueId('grid_');\r\n        },\r\n\r\n        /**\r\n         * @param {*} attributes\r\n         * @return {Array}\r\n         */\r\n        getColumnsName: function (attributes) {\r\n            var columns = this.attributesName.slice(0);\r\n\r\n            attributes.each(function (attribute, index) {\r\n                columns.splice(3 + index, 0, attribute.label);\r\n            }, this);\r\n\r\n            return columns;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        render: function (wizard) {\r\n            this.wizard = wizard;\r\n            this.sections(wizard.data.sections());\r\n            this.attributes(wizard.data.attributes());\r\n            this.gridNew([]);\r\n            this.gridExisting([]);\r\n            this.gridDeleted([]);\r\n            this.gridExisting.columns(this.getColumnsName(this.wizard.data.attributes));\r\n            this.gridNew.columns(this.getColumnsName(this.wizard.data.attributes));\r\n            this.gridDeleted.columns(this.getColumnsName(this.variationsComponent().productAttributes));\r\n            this.calculate(wizard.data.variations, wizard.data.sectionHelper);\r\n            this.generateGrid();\r\n        },\r\n\r\n        /**\r\n         * Force.\r\n         */\r\n        force: function () {\r\n            this.variationsComponent().render(this.variations, this.attributes());\r\n            this.modalComponent().closeModal();\r\n        },\r\n\r\n        /**\r\n         * Back.\r\n         */\r\n        back: function () {\r\n        }\r\n    });\r\n});\r\n","Magento_Cookie/js/jquery.storageapi.extended.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/jquery.cookie',\r\n    'jquery/jquery.storageapi.min'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     *\r\n     * @param {Object} storage\r\n     * @private\r\n     */\r\n    function _extend(storage) {\r\n        $.extend(storage, {\r\n            _secure: window.cookiesConfig ? window.cookiesConfig.secure : false,\r\n\r\n            /**\r\n             * Set value under name\r\n             * @param {String} name\r\n             * @param {String} value\r\n             * @param {Object} [options]\r\n             */\r\n            setItem: function (name, value, options) {\r\n                var _default = {\r\n                    expires: this._expires,\r\n                    path: this._path,\r\n                    domain: this._domain,\r\n                    secure: this._secure\r\n                };\r\n\r\n                $.cookie(this._prefix + name, value, $.extend(_default, options || {}));\r\n            },\r\n\r\n            /**\r\n             * Set default options\r\n             * @param {Object} c\r\n             * @returns {storage}\r\n             */\r\n            setConf: function (c) {\r\n                if (c.path) {\r\n                    this._path = c.path;\r\n                }\r\n\r\n                if (c.domain) {\r\n                    this._domain = c.domain;\r\n                }\r\n\r\n                if (c.expires) {\r\n                    this._expires = c.expires;\r\n                }\r\n\r\n                if (typeof c.secure !== 'undefined') {\r\n                    this._secure = c.secure;\r\n                }\r\n\r\n                return this;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (window.cookieStorage) {\r\n        _extend(window.cookieStorage);\r\n    }\r\n});\r\n","Magento_CurrencySymbol/js/symbols-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/mage'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n        $(element)\r\n            .mage('form')\r\n            .mage('validation');\r\n\r\n        /**\r\n         * Toggle the field to use the default value\r\n         *\r\n         * @param {String} code\r\n         * @param {String} value\r\n         */\r\n        function toggleUseDefault(code, value) {\r\n            var checkbox = $('#custom_currency_symbol_inherit' + code),\r\n                input = $('#custom_currency_symbol' + code);\r\n\r\n            if (checkbox.is(':checked')) {\r\n                input.addClass('disabled');\r\n                input.val(value);\r\n                input.prop('readonly', true);\r\n            } else {\r\n                input.removeClass('disabled');\r\n                input.prop('readonly', false);\r\n            }\r\n        }\r\n\r\n        window.toggleUseDefault = toggleUseDefault;\r\n    };\r\n});\r\n","Magento_Customer/edit/post-wrapper.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/translate'\r\n], function ($, confirm) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {String} url\r\n     * @returns {Object}\r\n     */\r\n    function getForm(url) {\r\n        return $('<form>', {\r\n            'action': url,\r\n            'method': 'POST'\r\n        }).append($('<input>', {\r\n            'name': 'form_key',\r\n            'value': window.FORM_KEY,\r\n            'type': 'hidden'\r\n        }));\r\n    }\r\n\r\n    $('#customer-edit-delete-button').click(function () {\r\n        var msg = $.mage.__('Are you sure you want to do this?'),\r\n            url = $('#customer-edit-delete-button').data('url');\r\n\r\n        confirm({\r\n            'content': msg,\r\n            'actions': {\r\n\r\n                /**\r\n                 * 'Confirm' action handler.\r\n                 */\r\n                confirm: function () {\r\n                    getForm(url).appendTo('body').submit();\r\n                }\r\n            }\r\n        });\r\n\r\n        return false;\r\n    });\r\n});\r\n","Magento_Customer/edit/tab/js/addresses.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'jquery/ui',\r\n    'mage/backend/tabs'\r\n], function ($, mageTemplate, confirm) {\r\n    'use strict';\r\n\r\n    $.widget('mage.addressTabs', $.mage.tabs, {\r\n        options: {\r\n            itemCount: 0,\r\n            baseItemId: 'new_item',\r\n            templatePrefix: '_templatePrefix_',\r\n            regionsUrl: null,\r\n            defaultCountries: [],\r\n            optionalZipCountries: [],\r\n            requiredStateForCountries: [],\r\n            deleteConfirmPrompt: '',\r\n            formTemplateSelector: '[data-template=\"address-form\"]',\r\n            tabTemplateSelector: '[data-template=\"address-tab\"]',\r\n            tabAddressTemplateSelector: '[data-template=\"tab-address-content\"]',\r\n            formsSelector: '[data-container=\"address-forms\"]',\r\n            addAddressSelector: '[data-container=\"add-address\"]',\r\n            formFirstNameSelector: ':input' +\r\n                '[data-ui-id=\"adminhtml-edit-tab-addresses-fieldset-element-text-address-template-firstname\"]',\r\n            accountFirstNameSelector: ':input' +\r\n                '[data-ui-id=\"adminhtml-edit-tab-account-fieldset-element-text-account-firstname\"]',\r\n            formLastNameSelector: ':input' +\r\n                '[data-ui-id=\"adminhtml-edit-tab-addresses-fieldset-element-text-address-template-lastname\"]',\r\n            accountLastNameSelector: ':input' +\r\n                '[data-ui-id=\"adminhtml-edit-tab-account-fieldset-element-text-account-lastname\"]',\r\n            accountWebsiteIdSelector: ':input' +\r\n                '[data-ui-id=\"store-switcher-form-renderer-fieldset-element-select-account-website-id\"]',\r\n            formCountrySelector: 'customer-edit-tab-addresses-fieldset-element-form-field-country-id',\r\n            addAddressButtonSelector: ':button[data-ui-id=\"adminhtml-edit-tab-addresses-add-address-button\"]'\r\n        },\r\n\r\n        /**\r\n         * This method adds a new address - tab and form to the widget.\r\n         */\r\n        _addNewAddress: function () {\r\n            var formName, newForm, formTemplate, itemTemplate, firstname, accountWebsiteId;\r\n\r\n            this.options.itemCount++;\r\n\r\n            // prevent duplication of ids\r\n            while (this.element.find('div[data-item=' + this.options.itemCount + ']').length) {\r\n                this.options.itemCount++;\r\n            }\r\n\r\n            formName = this.options.baseItemId + this.options.itemCount;\r\n            newForm = $('#form_' + formName);\r\n            formTemplate = this.element.find(this.options.formTemplateSelector).html();\r\n            itemTemplate = this.element.find(this.options.tabTemplateSelector).html();\r\n\r\n            formTemplate = mageTemplate(formTemplate, {\r\n                data: {\r\n                    formName: formName,\r\n                    itemCount: this.options.itemCount\r\n                }\r\n            });\r\n\r\n            itemTemplate = mageTemplate(itemTemplate, {\r\n                data: {\r\n                    'itemId': this.options.itemCount\r\n                }\r\n            });\r\n\r\n            this.element.find(this.options.formsSelector).append(this._prepareTemplate(formTemplate));\r\n\r\n            // add the new address to the tabs list before the add new action list\r\n            this.element.find(this.options.addAddressSelector).before(itemTemplate);\r\n\r\n            // refresh the widget to pick up the newly added tab.\r\n            this.refresh();\r\n\r\n            // activate the newly added tab\r\n            this.option('active', -1);\r\n\r\n            this.element.trigger('contentUpdated', $(formName));\r\n\r\n            // pre-fill form with account firstname, lastname, and country\r\n            firstname = newForm.find(this.options.formFirstNameSelector);\r\n            firstname.val($(this.options.accountFirstNameSelector).val());\r\n            newForm.find(this.options.formLastNameSelector).val($(this.options.accountLastNameSelector).val());\r\n\r\n            accountWebsiteId = $(this.options.accountWebsiteIdSelector).val();\r\n\r\n            if (accountWebsiteId !== '' && typeof this.options.defaultCountries[accountWebsiteId] !== 'undefined') {\r\n                newForm.find(this.options.formCountrySelector).val(this.options.defaultCountries[accountWebsiteId]);\r\n            }\r\n\r\n            // .val does not trigger change event, so manually trigger.\r\n            // (Triggering change of any field will handle update of all fields.)\r\n            firstname.trigger('change');\r\n\r\n            this._bindCountryRegionRelation(newForm);\r\n        },\r\n\r\n        /**\r\n         * This method is used to bind events associated with this widget.\r\n         */\r\n        _bind: function () {\r\n            this._on(this.element.find(this.options.addAddressButtonSelector), {\r\n                'click': '_addNewAddress'\r\n            });\r\n            this._on({\r\n                'formchange': '_updateAddress',\r\n                'dataItemDelete': '_deleteItemPrompt'\r\n            });\r\n            this.element.find('.countries').addressCountry({\r\n                regionsUrl: this.options.regionsUrl,\r\n                optionalZipCountries: this.options.optionalZipCountries,\r\n                requiredStateForCountries: this.options.requiredStateForCountries\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Create, Initialize this widget.\r\n         */\r\n        _create: function () {\r\n            this._super();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * This method deletes the item in the list.\r\n         * @private\r\n         */\r\n        _deleteItem: function (dataItem) {\r\n            // remove the elements from the page\r\n            this.element.find('[data-item=\"' + dataItem + '\"]').remove();\r\n\r\n            // refresh the widget to pick up the removed tab\r\n            this.refresh();\r\n        },\r\n\r\n        /**\r\n         * This method prompts the user to confirm the deletion of the item in the list.\r\n         * @private\r\n         */\r\n        _deleteItemPrompt: function (event, data) {\r\n            var self = this;\r\n\r\n            confirm({\r\n                content: this.options.deleteConfirmPrompt,\r\n                actions: {\r\n\r\n                    /** @inheritdoc */\r\n                    confirm: function () {\r\n                        self._deleteItem(data.item);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Initialize form template variables for the new address item.\r\n         * @param {Element} template - Address form html 'template'.\r\n         * @private\r\n         */\r\n        _prepareTemplate: function (template) {\r\n            var re = new RegExp(this.options.templatePrefix, 'g');\r\n\r\n            return template.replace(re, '_item' + this.options.itemCount);\r\n        },\r\n\r\n        /**\r\n         * This method is used to grab the data from the form and display it nicely.\r\n         * @param {Element} container - Address form container.\r\n         * @private\r\n         */\r\n        _syncFormData: function (container) {\r\n            var data = {},\r\n                itemContainer, tmpl;\r\n\r\n            if (container) {\r\n                $(container).find(':input').each(function (index, inputField) {\r\n                    var id = inputField.id,\r\n                        value, tagName, values, l, j, o, option, text;\r\n\r\n                    if (id) {\r\n                        id = id.replace(/^(_item)?[0-9]+/, '');\r\n                        id = id.replace(/^(id)?[0-9]+/, '');\r\n                        value = inputField.getValue();\r\n                        tagName = inputField.tagName.toLowerCase();\r\n\r\n                        if (tagName === 'select') {\r\n                            if (inputField.multiple) { //eslint-disable-line max-depth\r\n                                values = $([]);\r\n                                l = inputField.options.length;\r\n\r\n                                for (j = 0; j < l; j++) { //eslint-disable-line max-depth\r\n                                    o = inputField.options[j];\r\n\r\n                                    if (o.selected === true) { //eslint-disable-line max-depth\r\n                                        values[values.length] = o.text.escapeHTML();\r\n                                    }\r\n                                }\r\n                                data[id] = values.join(', ');\r\n                            } else {\r\n                                option = inputField.options[inputField.selectedIndex];\r\n                                text = option.value == '0' || option.value === '' ? '' : option.text; //eslint-disable-line\r\n                                data[id] = text.escapeHTML();\r\n                            }\r\n                        } else if (value !== null) {\r\n                            data[id] = value.escapeHTML();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Set name of state to 'region' if list of states are in 'region_id' selectbox\r\n                if (!data.region && data['region_id']) {\r\n                    data.region = data['region_id'];\r\n                    delete data['region_id'];\r\n                }\r\n\r\n                // Set data to html\r\n                itemContainer = this.element.find('[aria-selected=\"true\"] address');\r\n\r\n                if (itemContainer.length && itemContainer[0]) {\r\n                    tmpl = mageTemplate(this.options.tabAddressTemplateSelector, {\r\n                        data: data\r\n                    });\r\n\r\n                    itemContainer[0].innerHTML = tmpl;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * This method processes the event associated with a form field changing.\r\n         * @param {EventObject} event - Event occurring.\r\n         * @private\r\n         */\r\n        _updateAddress: function (event) {\r\n            this._syncFormData(this._getFormContainer(event.target));\r\n        },\r\n\r\n        /**\r\n         * This method returns the form containing this element.\r\n         * @param {JQuery|Element} element - JQuery object or DOM element.\r\n         * @private\r\n         */\r\n        _getFormContainer: function (element) {\r\n            if (!(element instanceof $)) {\r\n                element = $(element);\r\n            }\r\n\r\n            return element.closest('[data-item]');\r\n        },\r\n\r\n        /**\r\n         * This method binds a country element on the given form to the addressCountry widget.\r\n         * @param {JQuery} formElement - The form containing the country.\r\n         * @private\r\n         */\r\n        _bindCountryRegionRelation: function (formElement) {\r\n            $(formElement).find('.countries').addressCountry({\r\n                regionsUrl: this.options.regionsUrl,\r\n                optionalZipCountries: this.options.optionalZipCountries,\r\n                requiredStateForCountries: this.options.requiredStateForCountries\r\n            });\r\n        }\r\n    });\r\n\r\n    $.widget('mage.addressCountry', {\r\n        options: {\r\n            regionsUrl: null,\r\n            optionalZipCountries: [],\r\n            requiredStateForCountries: [],\r\n            countryElement: null,\r\n            regionIdElement: null,\r\n            regionElement: null\r\n        },\r\n\r\n        /**\r\n         * This method is used to bind events associated with this widget.\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                'change': '_onAddressCountryChange'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Create, Initialize this widget.\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * This method updates country dependent fields; region input, and region and zipCode required indicator.\r\n         * @param {Event} event - Change event occurring.\r\n         * @private\r\n         */\r\n        _onAddressCountryChange: function (event) {\r\n            var countryElement = event.target,\r\n                formElement = $(countryElement).closest('[data-item]'),\r\n                fieldElement = $(formElement).find('.field-region'),\r\n                regionElement = $(fieldElement).find('.input-text');\r\n\r\n            this.options.countryElement = countryElement;\r\n\r\n            if ($(regionElement).prop('tagName').toLowerCase() === 'select') {\r\n                this.options.regionIdElement = regionElement;\r\n                this.options.regionElement = regionElement.next();\r\n            } else {\r\n                this.options.regionElement = regionElement;\r\n                this.options.regionIdElement = regionElement.next();\r\n            }\r\n\r\n            if (countryElement.value) {\r\n                // obtain regions for the country\r\n                $.ajax({\r\n                    url: this.options.regionsUrl,\r\n                    type: 'post',\r\n                    dataType: 'json',\r\n                    showLoader: true,\r\n                    data: {\r\n                        parent: countryElement.value\r\n                    },\r\n                    context: this,\r\n                    success: $.proxy(this._refreshRegionField, this)\r\n                });\r\n            } else {\r\n                // Set empty text field in region\r\n                this._refreshRegionField({});\r\n            }\r\n            // set Zip optional/required\r\n            this._setPostcodeOptional(countryElement);\r\n        },\r\n\r\n        /**\r\n         * This method updates the region input from the server response.\r\n         * @param {Object} data - Regions (state/province) or empty if regions n/a for the country.\r\n         * @private\r\n         */\r\n        _refreshRegionField: function (data) {\r\n            var regionField = $(this.options.regionElement).closest('div.field'),\r\n                regionControl = regionField.find('.control'),\r\n                regionInput,\r\n                regionIdInput,\r\n                newInput,\r\n                regionValue;\r\n\r\n            // clear current region input/select\r\n            regionControl.empty();\r\n\r\n            if (data.length) {\r\n                // Create visible selectbox 'region_id' and hidden 'region'\r\n                regionIdInput = $('<select>').attr({\r\n                    'name': this.options.regionIdElement.attr('name'),\r\n                    'id': this.options.regionIdElement.attr('id'),\r\n                    'class': 'required-entry input-text select',\r\n                    'title': this.options.regionIdElement.attr('title')\r\n                }).appendTo(regionControl);\r\n\r\n                regionValue = this.options.regionElement.attr('value');\r\n\r\n                $.each(data, function (idx, item) {\r\n                    var regionOption = $('<option />').val(item.value).text(item.label);\r\n\r\n                    if (regionValue && regionValue == item.label) { //eslint-disable-line eqeqeq\r\n                        regionOption.attr('selected', 'selected');\r\n                    }\r\n\r\n                    regionIdInput.append(regionOption);\r\n                });\r\n\r\n                regionInput = $('<input>').attr({\r\n                    'name': this.options.regionElement.attr('name'),\r\n                    'id': this.options.regionElement.attr('id'),\r\n                    'type': 'hidden'\r\n                }).appendTo(regionControl);\r\n\r\n                newInput = regionIdInput;\r\n            } else {\r\n                // Create visible text input 'region' and hidden 'region_id'\r\n                regionInput = $('<input>').attr({\r\n                    'type': 'text',\r\n                    'name': this.options.regionElement.attr('name'),\r\n                    'id': this.options.regionElement.attr('id'),\r\n                    'class': 'input-text',\r\n                    'title': this.options.regionElement.attr('title')\r\n                }).appendTo(regionControl);\r\n\r\n                regionIdInput = $('<input>').attr({\r\n                    'type': 'hidden',\r\n                    'name': this.options.regionIdElement.attr('name'),\r\n                    'id': this.options.regionIdElement.attr('id')\r\n                }).appendTo(regionControl);\r\n\r\n                newInput = regionInput;\r\n            }\r\n\r\n            this.options.regionElement = regionInput;\r\n            this.options.regionIdElement = regionIdInput;\r\n\r\n            // Updating in address info\r\n            this.element.trigger('formchange');\r\n\r\n            // bind region input change event\r\n            newInput.on('change', $.proxy(this._triggerFormChange, this, newInput));\r\n\r\n            this._checkRegionRequired([regionInput, regionIdInput], newInput, regionField);\r\n        },\r\n\r\n        /**\r\n         * This method is used to trigger a change element for a given element.\r\n         */\r\n        _triggerFormChange: function (element) {\r\n            element.trigger('formchange');\r\n        },\r\n\r\n        /**\r\n         * This method updates the region input required/optional and validation classes.\r\n         * @param {Array} elements - Region elements\r\n         * @param {Element} activeElement - Active Region element\r\n         * @param {Element} regionField - Region section element\r\n         * @private\r\n         */\r\n        _checkRegionRequired: function (elements, activeElement, regionField) {\r\n            var regionRequired = this.options.requiredStateForCountries.indexOf(this.options.countryElement.value) >= 0;\r\n\r\n            elements.each(function (currentElement) {\r\n                var form = $(currentElement).closest('form'),\r\n                    validationInstance = form ? $(form).data('validation') : null;\r\n\r\n                if (validationInstance) {\r\n                    validationInstance.clearError(currentElement);\r\n                }\r\n\r\n                if (!regionRequired) {\r\n                    if (regionField.hasClass('required')) {\r\n                        regionField.removeClass('required');\r\n                    }\r\n\r\n                    if (currentElement.hasClass('required-entry')) {\r\n                        currentElement.removeClass('required-entry');\r\n                    }\r\n\r\n                    if (currentElement.prop('tagName').toLowerCase() === 'select' &&\r\n                        currentElement.hasClass('validate-select')) {\r\n                        currentElement.removeClass('validate-select');\r\n                    }\r\n                } else {\r\n                    if (regionField.hasClass('required') === false) {\r\n                        regionField.addClass('required');\r\n                    }\r\n\r\n                    if (activeElement == currentElement) { //eslint-disable-line eqeqeq\r\n                        if (!currentElement.hasClass('required-entry')) { //eslint-disable-line max-depth\r\n                            currentElement.addClass('required-entry');\r\n                        }\r\n\r\n                        if (currentElement.prop('tagName').toLowerCase() === 'select' && //eslint-disable-line max-depth\r\n                            !currentElement.hasClass('validate-select')) {\r\n                            currentElement.addClass('validate-select');\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * This method shows/hides the zip/postalCode code required indicator.\r\n         * @param {Element} countryElement\r\n         * @private\r\n         */\r\n        _setPostcodeOptional: function (countryElement) {\r\n            var formElement = $(countryElement).closest('[data-item]'),\r\n                fieldElement = $(formElement).find('.field-postcode'),\r\n                zipElement = $(fieldElement).find('.input-text'),\r\n                zipField = $(zipElement).closest('.field-postcode');\r\n\r\n            if (this.options.optionalZipCountries.indexOf(countryElement.value) !== -1) {\r\n                if ($(zipElement).hasClass('required-entry')) {\r\n                    $(zipElement).removeClass('required-entry');\r\n                }\r\n                $(zipField).removeClass('required');\r\n            } else {\r\n                $(zipElement).addClass('required-entry');\r\n                $(zipField).addClass('required');\r\n            }\r\n        }\r\n    });\r\n\r\n    $.widget('mage.observableInputs', {\r\n        options: {\r\n            name: ''\r\n        },\r\n\r\n        /**\r\n         * This method is used to bind events associated with this widget.\r\n         */\r\n        _bind: function () {\r\n            this._on(this.element.find(':input').not('.countries'), {\r\n                'change': '_triggerChange'\r\n            });\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._super();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * This method is used to trigger a change element for a given entity.\r\n         */\r\n        _triggerChange: function (element) {\r\n            // send the name of the captor and the field that changed\r\n            this.element.trigger('formchange', {\r\n                'name': this.options.name,\r\n                'element': element.target\r\n            });\r\n        }\r\n    });\r\n\r\n    /**\r\n     * This widget is used to trigger a message to delete a data item (i.e. D of CRUD).\r\n     */\r\n    $.widget('mage.dataItemDeleteButton', {\r\n        options: {\r\n            item: ''\r\n        },\r\n\r\n        /**\r\n         * This method is used to bind events associated with this widget.\r\n         */\r\n        _bind: function () {\r\n            this._on(this.element.find('[data-role=\"delete\"]'), {\r\n                'click': '_triggerDelete'\r\n            });\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var dataItemContainer;\r\n\r\n            this._super();\r\n            this._bind();\r\n\r\n            // if the item was not specified, find the data-item element wrapper\r\n            if (this.options.item.length === 0) {\r\n                dataItemContainer = this.element.parents('[data-item]');\r\n\r\n                if (dataItemContainer.length === 1) {\r\n                    this.options.item = dataItemContainer.attr('data-item');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * This method is used to trigger a delete message for this item.\r\n         */\r\n        _triggerDelete: function () {\r\n            // send the name of the captor and the field that changed\r\n            this.element.trigger('dataItemDelete', {\r\n                'item': this.options.item\r\n            });\r\n\r\n            // we are handling the click, so stop processing\r\n            return false;\r\n        }\r\n    });\r\n\r\n    return {\r\n        addressTabs: $.mage.addressTabs,\r\n        addressCountry: $.mage.addressCountry,\r\n        observableInputs: $.mage.observableInputs,\r\n        dataItemDeleteButton: $.mage.dataItemDeleteButton\r\n    };\r\n});\r\n","Magento_Customer/js/address/default-address.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/button',\r\n    'underscore'\r\n], function (Button, _) {\r\n    'use strict';\r\n\r\n    return Button.extend({\r\n        defaults: {\r\n            entityId: null,\r\n            parentId: null,\r\n            listens: {\r\n                entity: 'changeVisibility'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Apply action on target component,\r\n         * but previously create this component from template if it is not existed\r\n         *\r\n         * @param {Object} action - action configuration\r\n         */\r\n        applyAction: function (action) {\r\n            if (action.params && action.params[0]) {\r\n                action.params[0]['entity_id'] = this.entityId;\r\n                action.params[0]['parent_id'] = this.parentId;\r\n            } else {\r\n                action.params = [{\r\n                    'entity_id': this.entityId,\r\n                    'parent_id': this.parentId\r\n                }];\r\n            }\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Change visibility of the default address shipping/billing blocks\r\n         *\r\n         * @param {Object} entity - customer address\r\n         */\r\n        changeVisibility: function (entity) {\r\n            this.visible(!_.isEmpty(entity));\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/bootstrap/customer-post-action.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'Magento_Customer/edit/post-wrapper'\r\n]);\r\n","Magento_Customer/js/form/components/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/form/form',\r\n    'underscore',\r\n    'mage/translate'\r\n], function ($, uiAlert, uiConfirm, Form, _, $t) {\r\n    'use strict';\r\n\r\n    return Form.extend({\r\n        defaults: {\r\n            deleteConfirmationMessage: '',\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                dataType: 'json'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Delete customer address by provided url.\r\n         * Will call confirmation message to be sure that user is really wants to delete this address\r\n         *\r\n         * @param {String} url - ajax url\r\n         */\r\n        deleteAddress: function (url) {\r\n            var that = this;\r\n\r\n            uiConfirm({\r\n                content: this.deleteConfirmationMessage,\r\n                actions: {\r\n                    /** @inheritdoc */\r\n                    confirm: function () {\r\n                        that._delete(url);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous DELETE request to server.\r\n         * @param {String} url - ajax url\r\n         * @returns {Deferred}\r\n         */\r\n        _delete: function (url) {\r\n            var settings = _.extend({}, this.ajaxSettings, {\r\n                    url: url,\r\n                    data: {\r\n                        'form_key': window.FORM_KEY\r\n                    }\r\n                }),\r\n                that = this;\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            return $.ajax(settings)\r\n                .done(function (response) {\r\n                    if (response.error) {\r\n                        uiAlert({\r\n                            content: response.message\r\n                        });\r\n                    } else {\r\n                        that.trigger('deleteAddressAction', that.source.get('data.entity_id'));\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    uiAlert({\r\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\r\n                    });\r\n                })\r\n                .always(function () {\r\n                    $('body').trigger('processStop');\r\n                });\r\n\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/form/components/insert-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/insert-form'\r\n], function (Insert) {\r\n    'use strict';\r\n\r\n    return Insert.extend({\r\n        defaults: {\r\n            listens: {\r\n                responseData: 'onResponse'\r\n            },\r\n            modules: {\r\n                addressListing: '${ $.addressListingProvider }',\r\n                addressModal: '${ $.addressModalProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close modal, reload customer address listing and save customer address\r\n         *\r\n         * @param {Object} responseData\r\n         */\r\n        onResponse: function (responseData) {\r\n            var data;\r\n\r\n            if (!responseData.error) {\r\n                this.addressModal().closeModal();\r\n                this.addressListing().reload({\r\n                    refresh: true\r\n                });\r\n                data = this.externalSource().get('data');\r\n                this.saveAddress(responseData, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save customer address to customer form data source\r\n         *\r\n         * @param {Object} responseData\r\n         * @param {Object} data - customer address\r\n         */\r\n        saveAddress: function (responseData, data) {\r\n            data['entity_id'] = responseData.data['entity_id'];\r\n\r\n            if (parseFloat(data['default_billing'])) {\r\n                this.source.set('data.default_billing_address', data);\r\n            } else if (\r\n                parseFloat(this.source.get('data.default_billing_address')['entity_id']) === data['entity_id']\r\n            ) {\r\n                this.source.set('data.default_billing_address', []);\r\n            }\r\n\r\n            if (parseFloat(data['default_shipping'])) {\r\n                this.source.set('data.default_shipping_address', data);\r\n            } else if (\r\n                parseFloat(this.source.get('data.default_shipping_address')['entity_id']) === data['entity_id']\r\n            ) {\r\n                this.source.set('data.default_shipping_address', []);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Event method that closes \"Edit customer address\" modal and refreshes grid after customer address\r\n         * was removed through \"Delete\" button on the \"Edit customer address\" modal\r\n         *\r\n         * @param {String} id - customer address ID to delete\r\n         */\r\n        onAddressDelete: function (id) {\r\n            this.addressModal().closeModal();\r\n            this.addressListing().reload({\r\n                refresh: true\r\n            });\r\n            this.addressListing()._delete([parseFloat(id)]);\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/form/components/insert-listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/insert-listing',\r\n    'underscore'\r\n], function (Insert, _) {\r\n    'use strict';\r\n\r\n    return Insert.extend({\r\n\r\n        /**\r\n         * On action call\r\n         *\r\n         * @param {Object} data - customer address and actions\r\n         */\r\n        onAction: function (data) {\r\n            this[data.action + 'Action'].call(this, data.data);\r\n        },\r\n\r\n        /**\r\n         * On mass action call\r\n         *\r\n         * @param {Object} data - customer address\r\n         */\r\n        onMassAction: function (data) {\r\n            this[data.action + 'Massaction'].call(this, data.data);\r\n        },\r\n\r\n        /**\r\n         * Set default billing address\r\n         *\r\n         * @param {Object} data - customer address\r\n         */\r\n        setDefaultBillingAction: function (data) {\r\n            this.source.set('data.default_billing_address', data);\r\n        },\r\n\r\n        /**\r\n         * Set default shipping address\r\n         *\r\n         * @param {Object} data - customer address\r\n         */\r\n        setDefaultShippingAction: function (data) {\r\n            this.source.set('data.default_shipping_address', data);\r\n        },\r\n\r\n        /**\r\n         * Delete customer address\r\n         *\r\n         * @param {Object} data - customer address\r\n         */\r\n        deleteAction: function (data) {\r\n            this._delete([parseFloat(data[data['id_field_name']])]);\r\n        },\r\n\r\n        /**\r\n         * Mass action delete\r\n         *\r\n         * @param {Object} data - customer address\r\n         */\r\n        deleteMassaction: function (data) {\r\n            var ids = _.map(data, function (val) {\r\n                return parseFloat(val);\r\n            });\r\n\r\n            this._delete(ids);\r\n        },\r\n\r\n        /**\r\n         * Delete customer address by ids\r\n         *\r\n         * @param {Array} ids\r\n         */\r\n        _delete: function (ids) {\r\n            var defaultShippingId = parseFloat(this.source.get('data.default_shipping_address.entity_id')),\r\n                defaultBillingId = parseFloat(this.source.get('data.default_billing_address.entity_id'));\r\n\r\n            if (ids.indexOf(defaultShippingId) !== -1) {\r\n                this.source.set('data.default_shipping_address', []);\r\n            }\r\n\r\n            if (ids.indexOf(defaultBillingId) !== -1) {\r\n                this.source.set('data.default_billing_address', []);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/form/element/country.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/country'\r\n], function (Country) {\r\n    'use strict';\r\n\r\n    return Country.extend({\r\n        defaults: {\r\n            countryScope: 'data.country'\r\n        },\r\n\r\n        /**\r\n         * Set country to customer address form\r\n         *\r\n         * @param {String} value - country\r\n         */\r\n        setDifferedFromDefault: function (value) {\r\n            this._super();\r\n\r\n            if (value) {\r\n                this.source.set(this.countryScope, this.indexedOptions[value].label);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/form/element/region.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/region'\r\n], function (Region) {\r\n    'use strict';\r\n\r\n    return Region.extend({\r\n        defaults: {\r\n            regionScope: 'data.region'\r\n        },\r\n\r\n        /**\r\n         * Set region to customer address form\r\n         *\r\n         * @param {String} value - region\r\n         */\r\n        setDifferedFromDefault: function (value) {\r\n            this._super();\r\n\r\n            if (parseFloat(value)) {\r\n                this.source.set(this.regionScope, this.indexedOptions[value].label);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/grid/massactions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/massactions',\r\n    'Magento_Ui/js/modal/alert',\r\n    'underscore',\r\n    'jquery',\r\n    'mage/translate'\r\n], function (Massactions, uiAlert, _, $, $t) {\r\n    'use strict';\r\n\r\n    return Massactions.extend({\r\n        defaults: {\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                dataType: 'json'\r\n            },\r\n            listens: {\r\n                massaction: 'onAction'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reload customer addresses listing\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        onAction: function (data) {\r\n            if (data.action === 'delete') {\r\n                this.source.reload({\r\n                    refresh: true\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Default action callback. Send selections data\r\n         * via POST request.\r\n         *\r\n         * @param {Object} action - Action data.\r\n         * @param {Object} data - Selections data.\r\n         */\r\n        defaultCallback: function (action, data) {\r\n            var itemsType, selections;\r\n\r\n            if (action.isAjax) {\r\n                itemsType = data.excludeMode ? 'excluded' : 'selected';\r\n                selections = {};\r\n\r\n                selections[itemsType] = data[itemsType];\r\n\r\n                if (!selections[itemsType].length) {\r\n                    selections[itemsType] = false;\r\n                }\r\n\r\n                _.extend(selections, data.params || {});\r\n\r\n                this.request(action.url, selections).done(function (response) {\r\n                    if (!response.error) {\r\n                        this.trigger('massaction', {\r\n                            action: action.type,\r\n                            data: selections\r\n                        });\r\n                    }\r\n                }.bind(this));\r\n            } else {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Send customer address listing mass action ajax request\r\n         *\r\n         * @param {String} href\r\n         * @param {Object} data\r\n         */\r\n        request: function (href, data) {\r\n            var settings = _.extend({}, this.ajaxSettings, {\r\n                url: href,\r\n                data: data\r\n            });\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            return $.ajax(settings)\r\n                .done(function (response) {\r\n                    if (response.error) {\r\n                        uiAlert({\r\n                            content: response.message\r\n                        });\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    uiAlert({\r\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\r\n                    });\r\n                })\r\n                .always(function () {\r\n                    $('body').trigger('processStop');\r\n                });\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/grid/columns/actions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/actions',\r\n    'Magento_Ui/js/modal/alert',\r\n    'underscore',\r\n    'jquery',\r\n    'mage/translate'\r\n], function (Actions, uiAlert, _, $, $t) {\r\n    'use strict';\r\n\r\n    return Actions.extend({\r\n        defaults: {\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                dataType: 'json'\r\n            },\r\n            listens: {\r\n                action: 'onAction'\r\n            },\r\n            ignoreTmpls: {\r\n                fieldAction: true,\r\n                options: true,\r\n                action: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reload customer address listing data source after customer address delete action\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        onAction: function (data) {\r\n            if (data.action === 'delete') {\r\n                this.source().reload({\r\n                    refresh: true\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Default action callback. Redirects to\r\n         * the specified in action's data url.\r\n         *\r\n         * @param {String} actionIndex - Action's identifier.\r\n         * @param {(Number|String)} recordId - Id of the record associated\r\n         *      with a specified action.\r\n         * @param {Object} action - Action's data.\r\n         */\r\n        defaultCallback: function (actionIndex, recordId, action) {\r\n            if (action.isAjax) {\r\n                this.request(action.href).done(function (response) {\r\n                    var data;\r\n\r\n                    if (!response.error) {\r\n                        data = _.findWhere(this.rows, {\r\n                            _rowIndex: action.rowIndex\r\n                        });\r\n\r\n                        this.trigger('action', {\r\n                            action: actionIndex,\r\n                            data: data\r\n                        });\r\n                    }\r\n                }.bind(this));\r\n\r\n            } else {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Send customer address listing ajax request\r\n         *\r\n         * @param {String} href\r\n         */\r\n        request: function (href) {\r\n            var settings = _.extend({}, this.ajaxSettings, {\r\n                url: href,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                }\r\n            });\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            return $.ajax(settings)\r\n                .done(function (response) {\r\n                    if (response.error) {\r\n                        uiAlert({\r\n                            content: response.message\r\n                        });\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    uiAlert({\r\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\r\n                    });\r\n                })\r\n                .always(function () {\r\n                    $('body').trigger('processStop');\r\n                });\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/grid/filters/chips.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/filters/chips'\r\n], function (Chips) {\r\n    'use strict';\r\n\r\n    return Chips.extend({\r\n\r\n        /**\r\n         * Clear previous filters while initializing element to prevent filters sharing between customers\r\n         *\r\n         * @param {Object} elem\r\n         */\r\n        initElement: function (elem) {\r\n            this.clear();\r\n            this._super(elem);\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/grid/filters/filters.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/filters/filters'\r\n], function (Filters) {\r\n    'use strict';\r\n\r\n    return Filters.extend({\r\n        defaults: {\r\n            chipsConfig: {\r\n                name: '${ $.name }_chips',\r\n                provider: '${ $.chipsConfig.name }',\r\n                component: 'Magento_Customer/js/grid/filters/chips'\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Downloadable/downloadable-type-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/js/product/weight-handler',\r\n    'Magento_Catalog/catalog/type-events'\r\n], function ($, weight, productType) {\r\n    'use strict';\r\n\r\n    return {\r\n        $checkbox: $('[data-action=change-type-product-downloadable]'),\r\n        $items: $('#product_info_tabs_downloadable_items'),\r\n        $tab: null,\r\n        isDownloadable: false,\r\n\r\n        /**\r\n         * Show\r\n         */\r\n        show: function () {\r\n            this.$checkbox.prop('checked', true);\r\n            this.$items.show();\r\n        },\r\n\r\n        /**\r\n         * Hide\r\n         */\r\n        hide: function () {\r\n            this.$checkbox.prop('checked', false);\r\n            this.$items.hide();\r\n        },\r\n\r\n        /**\r\n         * Constructor component\r\n         * @param {Object} data - this backend data\r\n         */\r\n        'Magento_Downloadable/downloadable-type-handler': function (data) {\r\n            this.$tab = $('[data-tab=' + data.tabId + ']');\r\n            this.isDownloadable = data.isDownloadable;\r\n            this.bindAll();\r\n            this._initType();\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            this.$checkbox.on('change', function (event) {\r\n                $(document).trigger('setTypeProduct', $(event.target).prop('checked') ?\r\n                    'downloadable' :\r\n                    productType.type.init === 'downloadable' ? 'virtual' : productType.type.init\r\n                );\r\n            });\r\n\r\n            $(document).on('changeTypeProduct', this._initType.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Init type\r\n         * @private\r\n         */\r\n        _initType: function () {\r\n            if (productType.type.current === 'downloadable') {\r\n                weight.change(false);\r\n                weight.$weightSwitcher().one('change', function () {\r\n                    $(document).trigger(\r\n                        'setTypeProduct',\r\n                        productType.type.init === 'downloadable' ? 'virtual' : productType.type.init\r\n                    );\r\n                });\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_Downloadable/js/components/file-uploader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/file-uploader'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            fileInputName: ''\r\n        },\r\n\r\n        /**\r\n         * Adds provided file to the files list.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {FileUploder} Chainable.\r\n         */\r\n        addFile: function (file) {\r\n            var processedFile = this.processFile(file),\r\n                tmpFile = [],\r\n                resultFile = {\r\n                'file': processedFile.file,\r\n                'name': processedFile.name,\r\n                'size': processedFile.size,\r\n                'status': processedFile.status ? processedFile.status : 'new'\r\n            };\r\n\r\n            tmpFile[0] = resultFile;\r\n\r\n            this.isMultipleFiles ?\r\n                this.value.push(tmpFile) :\r\n                this.value(tmpFile);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Downloadable/js/components/is-downloadable-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            listens: {\r\n                disabled: 'changeVisibility'\r\n            },\r\n            modules: {\r\n                samplesFieldset: '${ $.samplesFieldset }',\r\n                linksFieldset: '${ $.linksFieldset}'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change visibility for samplesFieldset & linksFieldset based on current statuses of checkbox.\r\n         */\r\n        changeVisibility: function () {\r\n            if (this.samplesFieldset() && this.linksFieldset()) {\r\n                if (this.checked() && !this.disabled()) {\r\n                    this.samplesFieldset().visible(true);\r\n                    this.linksFieldset().visible(true);\r\n                } else {\r\n                    this.samplesFieldset().visible(false);\r\n                    this.linksFieldset().visible(false);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle checked state changes for checkbox / radio button.\r\n         *\r\n         * @param {Boolean} newChecked\r\n         */\r\n        onCheckedChanged: function (newChecked) {\r\n            this.changeVisibility();\r\n            this._super(newChecked);\r\n        }\r\n    });\r\n});\r\n","Magento_Downloadable/js/components/price-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            linksPurchasedSeparately: '0',\r\n            useDefaultPrice: false,\r\n            listens: {\r\n                linksPurchasedSeparately: 'changeDisabledStatus',\r\n                useDefaultPrice: 'changeDisabledStatus'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.changeDisabledStatus();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Disable/enable price field\r\n         */\r\n        changeDisabledStatus: function () {\r\n            if (this.linksPurchasedSeparately === '1') {\r\n                if (this.useDefaultPrice) {\r\n                    this.disabled(true);\r\n                } else {\r\n                    this.disabled(false);\r\n                }\r\n            } else {\r\n                this.disabled(true);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Downloadable/js/components/upload-type-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'uiRegistry'\r\n], function (Select, registry) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            listens: {\r\n                value: 'changeTypeUpload'\r\n            },\r\n            typeUrl: 'file',\r\n            typeFile: 'link_url',\r\n            filterPlaceholder: 'ns = ${ $.ns }, parentScope = ${ $.parentScope }'\r\n        },\r\n\r\n        /**\r\n         * Initialize component.\r\n         * @returns {Element}\r\n         */\r\n        initialize: function () {\r\n            return this\r\n                ._super()\r\n                .changeTypeUpload(this.initialValue);\r\n        },\r\n\r\n        /**\r\n         * Callback that fires when 'value' property is updated.\r\n         *\r\n         * @param {String} currentValue\r\n         * @returns {*}\r\n         */\r\n        onUpdate: function (currentValue) {\r\n            this.changeTypeUpload(currentValue);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Change visibility for typeUrl/typeFile based on current value.\r\n         *\r\n         * @param {String} currentValue\r\n         */\r\n        changeTypeUpload: function (currentValue) {\r\n            var componentFile = this.filterPlaceholder + ', index=' + this.typeFile,\r\n                componentUrl = this.filterPlaceholder + ', index=' + this.typeUrl;\r\n\r\n            switch (currentValue) {\r\n\r\n                case 'file':\r\n                    this.changeVisible(componentFile, true);\r\n                    this.changeVisible(componentUrl, false);\r\n                    break;\r\n\r\n                case 'url':\r\n                    this.changeVisible(componentFile, false);\r\n                    this.changeVisible(componentUrl, true);\r\n                    break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change visible\r\n         *\r\n         * @param {String} filter\r\n         * @param {Boolean} visible\r\n         */\r\n        changeVisible: function (filter, visible) {\r\n            registry.async(filter)(\r\n                function (currentComponent) {\r\n                    currentComponent.visible(visible);\r\n                }\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_Downloadable/js/components/use-price-default-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            linksPurchasedSeparately: '0',\r\n            listens: {\r\n                linksPurchasedSeparately: 'changeVisibleStatus'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change visibility of checkbox\r\n         */\r\n        changeVisibleStatus: function () {\r\n            if (this.linksPurchasedSeparately === '1') {\r\n                this.visible(true);\r\n            } else {\r\n                this.visible(false);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Eav/js/input-types.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/translate'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        $('select#frontend_input').each(function () {\r\n            var select = $(this),\r\n                currentValue = select.find('option:selected').val(),\r\n                compatibleTypes = config.inputTypes,\r\n                enabledTypes = [],\r\n                iterator,\r\n                warning = $('<label>')\r\n                    .hide()\r\n                    .text($.mage.__('These changes affect all related products.'))\r\n                    .addClass('mage-error')\r\n                    .attr({\r\n                        generated: true, for: select.attr('id')\r\n                    }),\r\n                hint = $('<p>')\r\n                    .hide()\r\n                    .addClass('note')\r\n                    .attr({\r\n                        generated: true\r\n                    }),\r\n                hints = config.hints,\r\n\r\n            /**\r\n             * Toggle hint about changes types\r\n             */\r\n            toggleWarning = function () {\r\n                if (select.find('option:selected').val() === currentValue) {\r\n                    warning.hide();\r\n                } else {\r\n                    warning.show();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Toggle hint\r\n             */\r\n            toggleHint = function () {\r\n                if (typeof hints[select.find('option:selected').val()] !== 'undefined') {\r\n                    select.after(hint.show().text(hints[select.find('option:selected').val()]));\r\n                } else {\r\n                    hint.hide();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Remove unsupported options\r\n             */\r\n            removeOption = function () {\r\n                if (!~enabledTypes.indexOf($(this).val())) {\r\n                    $(this).remove();\r\n                }\r\n            };\r\n\r\n            // find enabled types for switching dor current input type\r\n            for (iterator = 0; iterator < compatibleTypes.length; iterator++) {\r\n                if (compatibleTypes[iterator].indexOf(currentValue) >= 0) {\r\n                    enabledTypes = compatibleTypes[iterator];\r\n                }\r\n            }\r\n\r\n            // Check current type (allow only compatible types)\r\n            if (~enabledTypes.indexOf(currentValue)) {\r\n                // Enable select and keep only available options (all other will be removed)\r\n                select.removeAttr('disabled').find('option').each(removeOption);\r\n                // Add warning on page and event for show/hide it\r\n                select.after(warning).on('change', toggleWarning);\r\n            }\r\n            //bind hint toggling on change event\r\n            select.on('change', toggleHint);\r\n            //show hint for currently selected value\r\n            toggleHint();\r\n        });\r\n    };\r\n});\r\n","Magento_Email/js/variables.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global Variables, updateElementAtCursor */\r\ndefine([\r\n    'jquery',\r\n    'mage/translate',\r\n    'Magento_Ui/js/modal/modal',\r\n    'jquery/ui',\r\n    'prototype'\r\n], function (jQuery, $t) {\r\n    'use strict';\r\n\r\n    window.Variables = {\r\n        textareaElementId: null,\r\n        variablesContent: null,\r\n        dialogWindow: null,\r\n        dialogWindowId: 'variables-chooser',\r\n        overlayShowEffectOptions: null,\r\n        overlayHideEffectOptions: null,\r\n        insertFunction: 'Variables.insertVariable',\r\n        variablesValue: [],\r\n\r\n        /**\r\n         * @param {*} textareaElementId\r\n         * @param {Function} insertFunction\r\n         */\r\n        init: function (textareaElementId, insertFunction) {\r\n            if ($(textareaElementId)) {\r\n                this.textareaElementId = textareaElementId;\r\n            }\r\n\r\n            if (insertFunction) {\r\n                this.insertFunction = insertFunction;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * reset data.\r\n         */\r\n        resetData: function () {\r\n            this.variablesContent = null;\r\n            this.dialogWindow = null;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} variables\r\n         */\r\n        openVariableChooser: function (variables) {\r\n            if (this.variablesContent == null && variables) {\r\n                this.variablesContent = '<ul class=\"insert-variable\">';\r\n                variables.each(function (variableGroup) {\r\n                    if (variableGroup.label && variableGroup.value) {\r\n                        this.variablesContent += '<li><b>' + variableGroup.label.escapeHTML() + '</b></li>';\r\n                        variableGroup.value.each(function (variable) {\r\n                            if (variable.value && variable.label) {\r\n                                this.variablesValue.push(variable.value);\r\n                                this.variablesContent += '<li>' +\r\n                                    this.prepareVariableRow(this.variablesValue.length, variable.label) + '</li>';\r\n                            }\r\n                        }.bind(this));\r\n                    }\r\n                }.bind(this));\r\n                this.variablesContent += '</ul>';\r\n            }\r\n\r\n            if (this.variablesContent) {\r\n                this.openDialogWindow(this.variablesContent);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} variablesContent\r\n         */\r\n        openDialogWindow: function (variablesContent) {\r\n            var windowId = this.dialogWindowId;\r\n\r\n            jQuery('<div id=\"' + windowId + '\">' + variablesContent + '</div>').modal({\r\n                title: $t('Insert Variable...'),\r\n                type: 'slide',\r\n                buttons: [],\r\n\r\n                /** @inheritdoc */\r\n                closed: function (e, modal) {\r\n                    modal.modal.remove();\r\n                }\r\n            });\r\n\r\n            jQuery('#' + windowId).modal('openModal');\r\n        },\r\n\r\n        /**\r\n         * Close dialog window.\r\n         */\r\n        closeDialogWindow: function () {\r\n            jQuery('#' + this.dialogWindowId).modal('closeModal');\r\n        },\r\n\r\n        /**\r\n         * @param {Number} index\r\n         * @param {*} varLabel\r\n         * @return {String}\r\n         */\r\n        prepareVariableRow: function (index, varLabel) {\r\n            return '<a href=\"#\" onclick=\"' +\r\n                this.insertFunction +\r\n                '(' +\r\n                index +\r\n                ');return false;\">' +\r\n                varLabel.escapeHTML() +\r\n                '</a>';\r\n        },\r\n\r\n        /**\r\n         * @param {*} variable\r\n         */\r\n        insertVariable: function (variable) {\r\n            var windowId = this.dialogWindowId,\r\n                textareaElm, scrollPos;\r\n\r\n            jQuery('#' + windowId).modal('closeModal');\r\n            textareaElm = $(this.textareaElementId);\r\n\r\n            if (textareaElm) {\r\n                scrollPos = textareaElm.scrollTop;\r\n\r\n                if (!isNaN(variable)) {\r\n                    updateElementAtCursor(textareaElm, Variables.variablesValue[variable - 1]);\r\n                } else {\r\n                    updateElementAtCursor(textareaElm, variable);\r\n                }\r\n                textareaElm.focus();\r\n                textareaElm.scrollTop = scrollPos;\r\n                jQuery(textareaElm).change();\r\n                textareaElm = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    window.MagentovariablePlugin = {\r\n        editor: null,\r\n        variables: null,\r\n        textareaId: null,\r\n\r\n        /**\r\n         * @param {*} editor\r\n         */\r\n        setEditor: function (editor) {\r\n            this.editor = editor;\r\n        },\r\n\r\n        /**\r\n         * @param {String} url\r\n         * @param {*} textareaId\r\n         */\r\n        loadChooser: function (url, textareaId) {\r\n            this.textareaId = textareaId;\r\n\r\n            if (this.variables == null) {\r\n                new Ajax.Request(url, {\r\n                    parameters: {},\r\n                    onComplete: function (transport) {\r\n                        if (transport.responseText.isJSON()) {\r\n                            Variables.init(null, 'MagentovariablePlugin.insertVariable');\r\n                            this.variables = transport.responseText.evalJSON();\r\n                            this.openChooser(this.variables);\r\n                        }\r\n                    }.bind(this)\r\n                });\r\n            } else {\r\n                this.openChooser(this.variables);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} variables\r\n         */\r\n        openChooser: function (variables) {\r\n            Variables.openVariableChooser(variables);\r\n        },\r\n\r\n        /**\r\n         * @param {*} value\r\n         */\r\n        insertVariable: function (value) {\r\n            if (this.textareaId) {\r\n                Variables.init(this.textareaId);\r\n                Variables.insertVariable(value);\r\n            } else {\r\n                Variables.closeDialogWindow();\r\n                this.editor.execCommand('mceInsertContent', false, value);\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_GroupedProduct/js/grouped-product-grid.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows-grid'\r\n], function (_, registry, dynamicRowsGrid) {\r\n    'use strict';\r\n\r\n    return dynamicRowsGrid.extend({\r\n\r\n        /**\r\n         * Set max element position\r\n         *\r\n         * @param {Number} position - element position\r\n         * @param {Object} elem - instance\r\n         */\r\n        setMaxPosition: function (position, elem) {\r\n\r\n            if (position || position === 0) {\r\n                this.checkMaxPosition(position);\r\n                this.sort(position, elem);\r\n\r\n                if (~~position === this.maxPosition && ~~position > this.getDefaultPageBoundary() + 1) {\r\n                    this.shiftNextPagesPositions(position);\r\n                }\r\n            } else {\r\n                this.maxPosition += 1;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Shift positions for next page elements\r\n         *\r\n         * @param {Number} position\r\n         */\r\n        shiftNextPagesPositions: function (position) {\r\n\r\n            var recordData = this.recordData(),\r\n                startIndex = ~~this.currentPage() * this.pageSize,\r\n                offset = position - startIndex + 1,\r\n                index = startIndex;\r\n\r\n            if (~~this.currentPage() === this.pages()) {\r\n                return false;\r\n            }\r\n\r\n            for (index; index < recordData.length; index++) {\r\n                recordData[index].position = index + offset;\r\n            }\r\n            this.recordData(recordData);\r\n        },\r\n\r\n        /**\r\n         * Update position for element after position from another page is entered\r\n         *\r\n         * @param {Object} data\r\n         * @param {Object} event\r\n         */\r\n        updateGridPosition: function (data, event) {\r\n            var inputValue = parseInt(event.target.value, 10),\r\n                recordData = this.recordData(),\r\n                record,\r\n                previousValue,\r\n                updatedRecord;\r\n\r\n            record = this.elems().find(function (obj) {\r\n                return obj.dataScope === data.parentScope;\r\n            });\r\n\r\n            previousValue = this.getCalculatedPosition(record);\r\n\r\n            if (isNaN(inputValue) || inputValue < 0 || inputValue === previousValue) {\r\n                return false;\r\n            }\r\n\r\n            this.elems([]);\r\n\r\n            updatedRecord = this.getUpdatedRecordIndex(recordData, record.data().id);\r\n\r\n            if (inputValue >= this.recordData().size() - 1) {\r\n                recordData[updatedRecord].position = this.getGlobalMaxPosition() + 1;\r\n            } else {\r\n                recordData.forEach(function (value, index) {\r\n                    if (~~value.id === ~~record.data().id) {\r\n                        recordData[index].position = inputValue;\r\n                    } else if (inputValue > previousValue && index <= inputValue) {\r\n                        recordData[index].position = index - 1;\r\n                    } else if (inputValue < previousValue && index >= inputValue) {\r\n                        recordData[index].position = index + 1;\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.reloadGridData(recordData);\r\n\r\n        },\r\n\r\n        /**\r\n         * Get updated record index\r\n         *\r\n         * @param  {Array} recordData\r\n         * @param {Number} recordId\r\n         * @return {Number}\r\n         */\r\n        getUpdatedRecordIndex: function (recordData, recordId) {\r\n            return recordData.map(function (o) {\r\n                return ~~o.id;\r\n            }).indexOf(~~recordId);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Array} recordData - to reprocess\r\n         */\r\n        reloadGridData: function (recordData) {\r\n            this.recordData(recordData.sort(function (a, b) {\r\n                return ~~a.position - ~~b.position;\r\n            }));\r\n            this._updateCollection();\r\n            this.reload();\r\n        },\r\n\r\n        /**\r\n         * Event handler for \"Send to bottom\" button\r\n         *\r\n         * @param {Object} positionObj\r\n         * @return {Boolean}\r\n         */\r\n        sendToBottom: function (positionObj) {\r\n\r\n            var objectToUpdate = this.getObjectToUpdate(positionObj),\r\n                recordData = this.recordData(),\r\n                updatedRecord;\r\n\r\n            if (~~this.currentPage() === this.pages) {\r\n                objectToUpdate.position = this.maxPosition;\r\n            } else {\r\n                this.elems([]);\r\n                updatedRecord = this.getUpdatedRecordIndex(recordData, objectToUpdate.data().id);\r\n                recordData[updatedRecord].position = this.getGlobalMaxPosition() + 1;\r\n                this.reloadGridData(recordData);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Event handler for \"Send to top\" button\r\n         *\r\n         * @param {Object} positionObj\r\n         * @return {Boolean}\r\n         */\r\n        sendToTop: function (positionObj) {\r\n            var objectToUpdate = this.getObjectToUpdate(positionObj),\r\n                recordData = this.recordData(),\r\n                updatedRecord;\r\n\r\n            //isFirst\r\n            if (~~this.currentPage() === 1) {\r\n                objectToUpdate.position = 0;\r\n            } else {\r\n                this.elems([]);\r\n                updatedRecord = this.getUpdatedRecordIndex(recordData, objectToUpdate.data().id);\r\n                recordData.forEach(function (value, index) {\r\n                    recordData[index].position = index === updatedRecord ? 0 : value.position + 1;\r\n                });\r\n                this.reloadGridData(recordData);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Get element from grid for update\r\n         *\r\n         * @param {Object} object\r\n         * @return {*}\r\n         */\r\n        getObjectToUpdate: function (object) {\r\n            return this.elems().filter(function (item) {\r\n                return item.name === object.parentName;\r\n            })[0];\r\n        },\r\n\r\n        /**\r\n         * Value function for position input\r\n         *\r\n         * @param {Object} data\r\n         * @return {Number}\r\n         */\r\n        getCalculatedPosition: function (data) {\r\n            return (~~this.currentPage() - 1) * this.pageSize + this.elems().pluck('name').indexOf(data.name);\r\n        },\r\n\r\n        /**\r\n         * Return Page Boundary\r\n         *\r\n         * @return {Number}\r\n         */\r\n        getDefaultPageBoundary: function () {\r\n            return ~~this.currentPage() * this.pageSize - 1;\r\n        },\r\n\r\n        /**\r\n         * Returns position for last element to be moved after\r\n         *\r\n         * @return {Number}\r\n         */\r\n        getGlobalMaxPosition: function () {\r\n            return _.max(this.recordData().map(function (r) {\r\n                return ~~r.position;\r\n            }));\r\n        }\r\n    });\r\n});\r\n","Magento_GroupedProduct/js/grouped-product.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'mage/adminhtml/grid'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.groupedProduct', {\r\n        /**\r\n         * Create widget\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.$grid = this.element.find('[data-role=grouped-product-grid]');\r\n            this.$grid.sortable({\r\n                distance: 8,\r\n                items: '[data-role=row]',\r\n                tolerance: 'pointer',\r\n                cancel: ':input',\r\n                update: $.proxy(function () {\r\n                    this.element.trigger('resort');\r\n                }, this)\r\n            });\r\n\r\n            this.productTmpl = mageTemplate('#group-product-template');\r\n\r\n            $.each(\r\n                this.$grid.data('products'),\r\n                $.proxy(function (index, product) {\r\n                    this._add(null, product);\r\n                }, this)\r\n            );\r\n\r\n            this._on({\r\n                'add': '_add',\r\n                'resort': '_resort',\r\n                'click [data-column=actions] [data-role=delete]': '_remove'\r\n            });\r\n\r\n            this._bindDialog();\r\n            this._updateGridVisibility();\r\n        },\r\n\r\n        /**\r\n         * Add product to grouped grid\r\n         * @param {EventObject} event\r\n         * @param {Object} product\r\n         * @private\r\n         */\r\n        _add: function (event, product) {\r\n            var tmpl,\r\n                productExists;\r\n\r\n            productExists = this.$grid.find('[data-role=id]')\r\n                .filter(function (index, element) {\r\n                    return $(element).val() == product.id; //eslint-disable-line eqeqeq\r\n                }).length;\r\n\r\n            if (!productExists) {\r\n                tmpl = this.productTmpl({\r\n                    data: product\r\n                });\r\n\r\n                $(tmpl).appendTo(this.$grid.find('tbody'));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove product\r\n         * @param {EventObject} event\r\n         * @private\r\n         */\r\n        _remove: function (event) {\r\n            $(event.target).closest('[data-role=row]').remove();\r\n            this.element.trigger('resort');\r\n            this._updateGridVisibility();\r\n        },\r\n\r\n        /**\r\n         * Resort products\r\n         * @private\r\n         */\r\n        _resort: function () {\r\n            this.element.find('[data-role=position]').each($.proxy(function (index, element) {\r\n                $(element).val(index + 1);\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Create modal for show product\r\n         *\r\n         * @private\r\n         */\r\n        _bindDialog: function () {\r\n            var widget = this,\r\n                selectedProductList = {},\r\n                popup = $('[data-role=add-product-dialog]'),\r\n                gridPopup;\r\n\r\n            popup.modal({\r\n                type: 'slide',\r\n                innerScroll: true,\r\n                title: $.mage.__('Add Products to Group'),\r\n                modalClass: 'grouped',\r\n\r\n                /** @inheritdoc */\r\n                open: function () {\r\n                    $(this).addClass('admin__scope-old'); // ToDo UI: remove with old styles removal\r\n                },\r\n                buttons: [{\r\n                    id: 'grouped-product-dialog-apply-button',\r\n                    text: $.mage.__('Add Selected Products'),\r\n                    'class': 'action-primary action-add',\r\n\r\n                    /** @inheritdoc */\r\n                    click: function () {\r\n                        $.each(selectedProductList, function (index, product) {\r\n                            widget._add(null, product);\r\n                        });\r\n                        widget._resort();\r\n                        widget._updateGridVisibility();\r\n                        popup.modal('closeModal');\r\n                    }\r\n                }]\r\n            });\r\n\r\n            popup.on('click', '[data-role=row]', function (event) {\r\n                var target = $(event.target);\r\n\r\n                if (!target.is('input')) {\r\n                    target.closest('[data-role=row]')\r\n                        .find('[data-column=entity_ids] input')\r\n                        .prop('checked', function (element, value) {\r\n                            return !value;\r\n                        })\r\n                        .trigger('change');\r\n                }\r\n            });\r\n\r\n            popup.on(\r\n                'change',\r\n                '[data-role=row] [data-column=entity_ids] input',\r\n                $.proxy(function (event) {\r\n                    var element = $(event.target),\r\n                        product = {};\r\n\r\n                    if (element.is(':checked')) {\r\n                        product.id = element.val();\r\n                        product.qty = 0;\r\n                        element.closest('[data-role=row]').find('[data-column]').each(function (index, el) {\r\n                            product[$(el).data('column')] = $.trim($(el).text());\r\n                        });\r\n                        selectedProductList[product.id] = product;\r\n                    } else {\r\n                        delete selectedProductList[element.val()];\r\n                    }\r\n                }, this)\r\n            );\r\n\r\n            gridPopup = $(this.options.gridPopup).data('gridObject');\r\n\r\n            $('[data-role=add-product]').on('click', function (event) {\r\n                event.preventDefault();\r\n                popup.modal('openModal');\r\n                gridPopup.reload();\r\n                selectedProductList = {};\r\n            });\r\n\r\n            $('#' + gridPopup.containerId).on('gridajaxsettings', function (event, ajaxSettings) {\r\n                var ids = widget.$grid.find('[data-role=id]').map(function (index, element) {\r\n                    return $(element).val();\r\n                }).toArray();\r\n\r\n                ajaxSettings.data.filter = $.extend(ajaxSettings.data.filter || {}, {\r\n                    'entity_ids': ids\r\n                });\r\n            }).on('gridajax', function (event, ajaxRequest) {\r\n                ajaxRequest.done(function () {\r\n                    popup.find('[data-role=row] [data-column=entity_ids] input').each(function (index, element) {\r\n                        var $element = $(element);\r\n\r\n                        $element.prop('checked', !!selectedProductList[$element.val()]);\r\n                    });\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Show or hide message\r\n         * @private\r\n         */\r\n        _updateGridVisibility: function () {\r\n            var showGrid = this.element.find('[data-role=id]').length > 0;\r\n\r\n            this.element.find('.grid-container').toggle(showGrid);\r\n            this.element.find('.no-products-message').toggle(!showGrid);\r\n        }\r\n    });\r\n\r\n    return $.mage.groupedProduct;\r\n});\r\n","Magento_Integration/js/integration.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * jQuery plugin is added.\r\n *\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'mage/translate',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.integration', {\r\n        /**\r\n         * Options common to all instances of this widget.\r\n         * @type {Object}\r\n         */\r\n        options: {\r\n            /**\r\n             * URL of the integration grid.\r\n             * @type {String}\r\n             */\r\n            gridUrl: ''\r\n        },\r\n\r\n        /**\r\n         * Bind event handler for the action when admin clicks \"Save & Activate\" button.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            if ($('#save-split-button-activate').length) {\r\n                // We're on the \"New integration\" page - bind related handler\r\n                this._form = $('#edit_form');\r\n                this._form.on('saveAndActivate', $.proxy(this._saveAndActivate, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save new integration, then kick off the activate dialog.\r\n         * @private\r\n         */\r\n        _saveAndActivate: function () {\r\n            if (this._form.validation && !this._form.validation('isValid')) {\r\n                return false;\r\n            }\r\n\r\n            $.ajax({\r\n                url: this._form.prop('action'),\r\n                type: 'post',\r\n                data: this._form.serialize(),\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /** @inheritdoc */\r\n                beforeSend: function () {\r\n                    $('body').trigger('processStart');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                success: function (data) {\r\n                    var integrationName, that;\r\n\r\n                    if (data._redirect) {\r\n                        window.location.href = data._redirect;\r\n                    } else if (data.integrationId) {\r\n                        integrationName = $('#integration_properties_name').val();\r\n                        window.integration.popup.show($('<span>').attr({\r\n                            'data-row-dialog': 'permissions',\r\n                            'data-row-id': data.integrationId,\r\n                            // We do escaping here instead of the place of actual output because _showPopup()\r\n                            // actually receives dialog window title from couple of places: from here and from the grid.\r\n                            // The issue is we always should escape values in the grid, so that value is already\r\n                            // escaped. To avoid double escaping we do it here instead of the output.\r\n                            'data-row-name': $('<div>').text(integrationName).html(),\r\n                            'data-row-is-reauthorize': '0',\r\n                            'data-row-is-token-exchange': data.isTokenExchange\r\n                        }));\r\n                        that = this;\r\n                        $('#integration-popup-container').on('dialogclose', function () {\r\n                            $('body').trigger('processStart');\r\n                            window.location.href = that.options.gridUrl;\r\n\r\n                            return false;\r\n                        });\r\n                    }\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                error: function (jqXHR, status, error) {\r\n                    alert({\r\n                        content: $.mage.__('Sorry, something went wrong. Please try again later.')\r\n                    });\r\n                    window.console && console.log(status + ': ' + error + '\\nResponse text:\\n' + jqXHR.responseText);\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                complete: function () {\r\n                    $('body').trigger('processStop');\r\n                }\r\n            });\r\n\r\n            return true;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @param {*} permissionsDialogUrl\r\n     * @param {*} tokensDialogUrl\r\n     * @param {*} tokensExchangeUrl\r\n     * @param {*} gridUrl\r\n     * @param {*} successCallbackUrl\r\n     * @return {Object}\r\n     * @constructor\r\n     */\r\n    window.Integration = function (\r\n        permissionsDialogUrl,\r\n        tokensDialogUrl,\r\n        tokensExchangeUrl,\r\n        gridUrl,\r\n        successCallbackUrl\r\n    ) {\r\n        var url = {\r\n            permissions: permissionsDialogUrl,\r\n            tokens: tokensDialogUrl,\r\n            tokensExchange: tokensExchangeUrl,\r\n            grid: gridUrl\r\n        },\r\n        IdentityLogin = {\r\n            win: null,\r\n            strLocation: null,\r\n            checker: null,\r\n            isCalledBack: false,\r\n            //Info popup dialog. Should be hidden when login window is closed\r\n            jqInfoDialog: $('#integration-popup-container'),\r\n            successCallbackUrl: successCallbackUrl,\r\n            Constants: {\r\n                /*\r\n                 This interval is set such that it adjusts to the child window closing timeout of 1000 ms. This will\r\n                 give the checker function enough time to detect if the successCallback has been invoked\r\n                 */\r\n                CHECKER_INTERVAL: 500,\r\n                //Login screen size plus some buffer\r\n                WIDTH: 680,\r\n                HEIGHT: 510,\r\n                // subtract pixels(30) and width(680) from screen width to move popup from extreme left\r\n                LEFT: screen.width - 680 - 30,\r\n                // subtract pixels(300) and height(300) from screen height to move from top\r\n                TOP: screen.height - 510 - 300\r\n            },\r\n\r\n            /**\r\n             * @param {*} identityCallbackUrl\r\n             * @param {*} consumerKey\r\n             * @param {*} jqInfoDialog\r\n             */\r\n            invokePopup: function (identityCallbackUrl, consumerKey, jqInfoDialog) {\r\n                var param;\r\n\r\n                // Callback should be invoked only once. Reset callback flag on subsequent invocations.\r\n                IdentityLogin.isCalledBack = false;\r\n                IdentityLogin.jqInfoDialog = jqInfoDialog;\r\n                param = $.param({\r\n                    'oauth_consumer_key': consumerKey,\r\n                    'success_call_back': IdentityLogin.successCallbackUrl\r\n                });\r\n                IdentityLogin.win = window.open(identityCallbackUrl + '?' + param, '',\r\n                    'top=' + IdentityLogin.Constants.TOP +\r\n                        ', left=' + IdentityLogin.Constants.LEFT +\r\n                        ', width=' + IdentityLogin.Constants.WIDTH +\r\n                        ', height=' + IdentityLogin.Constants.HEIGHT + ',scrollbars=no');\r\n\r\n                if (IdentityLogin.checker != null) {\r\n                    //Clear any previous check\r\n                    clearInterval(IdentityLogin.checker);\r\n                }\r\n                //Polling to detect url of the child window.\r\n                IdentityLogin.checker = setInterval(\r\n                    IdentityLogin.fnCheckLocation, IdentityLogin.Constants.CHECKER_INTERVAL\r\n                );\r\n            },\r\n\r\n            /**\r\n             * Function to check the location of the child popup window.\r\n             * Once detected if the callback is successful, parent window will be reloaded\r\n             */\r\n            fnCheckLocation: function () {\r\n                if (IdentityLogin.win == null) {\r\n                    return;\r\n                }\r\n                // Check to see if the location has changed.\r\n                try {\r\n                    //Is the success callback invoked\r\n                    if (IdentityLogin.win.closed ||\r\n                        IdentityLogin.win.location.href == IdentityLogin.successCallbackUrl //eslint-disable-line eqeqeq\r\n                    ) {\r\n                        //Stop the polling\r\n                        clearInterval(IdentityLogin.checker);\r\n                        $('body').trigger('processStart');\r\n                        //Check for window closed\r\n                        window.location.href = url.grid;\r\n                        IdentityLogin.jqInfoDialog.modal('closeModal');\r\n                    }\r\n                } catch (e) {\r\n                    //squash. In case Window closed without success callback, clear polling\r\n                    if (IdentityLogin.win.closed) {\r\n                        IdentityLogin.jqInfoDialog.modal('closeModal');\r\n                        clearInterval(IdentityLogin.checker);\r\n                    }\r\n\r\n                    return;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} popupWindow\r\n         * @return {Boolean}\r\n         */\r\n        isPopupBlocked = function (popupWindow) {\r\n            try {\r\n                popupWindow.focus();\r\n            } catch (e) {\r\n                alert({\r\n                    content: $.mage.__('Popup Blocker is enabled! Please add this site to your exception list.')\r\n                });\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @param {*} dialog\r\n         * @param {*} title\r\n         * @param {*} okButton\r\n         * @param {*} ajaxUrl\r\n         * @private\r\n         */\r\n        _showPopup = function (dialog, title, okButton, ajaxUrl) {\r\n            $.ajax({\r\n                url: ajaxUrl,\r\n                cache: false,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                method: 'GET',\r\n\r\n                /** @inheritdoc */\r\n                beforeSend: function () {\r\n                    // Show the spinner\r\n                    $('body').trigger('processStart');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                success: function (result) {\r\n                    var redirect = result._redirect,\r\n                        identityLinkUrl, consumerKey, popupHtml, popup, resultObj, buttons, dialogProperties;\r\n\r\n                    if (redirect) {\r\n                        window.location.href = redirect;\r\n\r\n                        return;\r\n                    }\r\n\r\n                    identityLinkUrl = null;\r\n                    consumerKey = null;\r\n                    popupHtml = null;\r\n                    popup = $('#integration-popup-container');\r\n\r\n                    try {\r\n                        resultObj = typeof result === 'string' ?\r\n                            JSON.parse(result) :\r\n                            result;\r\n\r\n                        identityLinkUrl = resultObj['identity_link_url'];\r\n                        consumerKey      = resultObj['oauth_consumer_key'];\r\n                        popupHtml       = resultObj['popup_content'];\r\n\r\n                    } catch (e) {\r\n                        //This is expected if result is not json. Do nothing.\r\n                    }\r\n\r\n                    if (identityLinkUrl && consumerKey && popupHtml) {\r\n                        IdentityLogin.invokePopup(identityLinkUrl, consumerKey, popup);\r\n\r\n                        if (isPopupBlocked(IdentityLogin.win)) {\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        popupHtml = result;\r\n                    }\r\n\r\n                    if (popup.length === 0) {\r\n                        popup = $('<div/>');\r\n                    }\r\n                    popup.html(popupHtml);\r\n\r\n                    buttons = [];\r\n                    dialogProperties = {\r\n                        title: title,\r\n                        type: 'slide',\r\n                        dialogClass: dialog == 'permissions' ? 'integration-dialog' : 'integration-dialog no-close' //eslint-disable-line\r\n                    };\r\n\r\n                    // Add confirmation button to the list of dialog buttons. okButton not set for tokenExchange dialog\r\n                    if (okButton) {\r\n                        buttons.push(okButton);\r\n                    }\r\n                    // Add button only if its not empty\r\n                    if (buttons.length > 0) {\r\n                        dialogProperties.buttons = buttons;\r\n                    }\r\n                    popup.modal(dialogProperties);\r\n                    popup.modal('openModal');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                error: function (jqXHR, status, error) {\r\n                    alert({\r\n                        content: $.mage.__('Sorry, something went wrong. Please try again later.')\r\n                    });\r\n                    window.console && console.log(status + ': ' + error + '\\nResponse text:\\n' + jqXHR.responseText);\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                complete: function () {\r\n                    // Hide the spinner\r\n                    $('body').trigger('processStop');\r\n                }\r\n            });\r\n        };\r\n\r\n        return {\r\n            popup: {\r\n                /**\r\n                 * @param {*} ctx\r\n                 */\r\n                show: function (ctx) {\r\n                    var dialog = $(ctx).attr('data-row-dialog'),\r\n                        isReauthorize = $(ctx).attr('data-row-is-reauthorize'),\r\n                        isTokenExchange = $(ctx).attr('data-row-is-token-exchange'),\r\n                        integrationId, ajaxUrl, integrationName, okButton;\r\n\r\n                    if (!url.hasOwnProperty(dialog)) {\r\n                        throw 'Invalid dialog type';\r\n                    }\r\n\r\n                    integrationId = $(ctx).attr('data-row-id');\r\n\r\n                    if (!integrationId) {\r\n                        throw 'Unable to find integration ID';\r\n                    }\r\n\r\n                    // Replace placeholders in URL\r\n                    ajaxUrl = url[dialog].replace(':id', integrationId).replace(':isReauthorize', isReauthorize);\r\n\r\n                    try {\r\n                        // Get integration name either from current element or from neighbor column\r\n                        integrationName = $(ctx).attr('data-row-name') ||\r\n                            $(ctx).parents('tr').find('.col-name').html().trim();\r\n\r\n                        if (integrationName.indexOf('<span') > -1) {\r\n                            // Remove unsecure URL warning from popup window title if it is present\r\n                            integrationName = integrationName.substring(0, integrationName.indexOf('<span'));\r\n                        }\r\n                    } catch (e) {\r\n                        throw 'Unable to find integration name';\r\n                    }\r\n\r\n                    okButton = {\r\n                        permissions: {\r\n                            text: isReauthorize == '1' ? $.mage.__('Reauthorize') : $.mage.__('Allow'), //eslint-disable-line\r\n                            'class': 'action-primary',\r\n                            attr: {\r\n                                'data-row-id': integrationId,\r\n                                'data-row-name': integrationName,\r\n                                'data-row-dialog': isTokenExchange == '1' ? 'tokensExchange' : 'tokens', //eslint-disable-line\r\n                                'data-row-is-reauthorize': isReauthorize,\r\n                                'data-row-is-token-exchange': isTokenExchange\r\n                            },\r\n\r\n                            /**\r\n                             * Click.\r\n                             */\r\n                            click: function () {\r\n                                // Find the 'Allow' button and clone - it has all necessary data, but is going to be\r\n                                // destroyed along with the current dialog\r\n                                var context = this.modal.find('button.action-primary').clone(true);\r\n\r\n                                this.closeModal();\r\n                                this.modal.remove();\r\n                                // Make popup out of data we saved from 'Allow' button\r\n                                window.integration.popup.show(context);\r\n                            }\r\n                        },\r\n                        tokens: {\r\n                            text: $.mage.__('Done'),\r\n                            'class': 'action-primary',\r\n\r\n                            /**\r\n                             * Click.\r\n                             */\r\n                            click: function () {\r\n                                // Integration has been activated at the point of generating tokens\r\n                                window.location.href = url.grid;\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    _showPopup(dialog, integrationName, okButton[dialog], ajaxUrl);\r\n                }\r\n            }\r\n        };\r\n    };\r\n\r\n    return $.mage.integration;\r\n});\r\n","Magento_InventoryAdminUi/js/form/element/region.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/region'\r\n], function (Region) {\r\n    'use strict';\r\n\r\n    return Region.extend({\r\n        defaults: {\r\n            regionScope: 'data.general.region'\r\n        },\r\n\r\n        /**\r\n         * Set region to source form\r\n         *\r\n         * @param {String} value - region\r\n         */\r\n        setDifferedFromDefault: function (value) {\r\n            this._super();\r\n\r\n            if (parseFloat(value)) {\r\n                this.source.set(this.regionScope, this.indexedOptions[value].label);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryAdminUi/js/stock/grid/cell/assigned-sources.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventoryAdminUi/stock/grid/cell/assigned-sources-cell.html',\r\n            itemsToDisplay: 5\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Array} record\r\n         * @returns {Array}\r\n         */\r\n        getTooltipData: function (record) {\r\n            return record[this.index].map(function (source) {\r\n                return {\r\n                    sourceCode: source.sourceCode,\r\n                    name: source.name\r\n                };\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getSourcesAssignedToStockOrderedByPriority: function (record) {\r\n            return this.getTooltipData(record).slice(0, this.itemsToDisplay);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/form/qty.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_CatalogInventory/js/components/qty-validator-changer'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            links: {\r\n                value: false\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getInitialValue: function () {\r\n            var values = [this.source.get(this.dataScope), this.default],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                if (v !== null && v !== undefined) {\r\n                    value = v;\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return this.normalizeData(value);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        setDifferedFromDefault: function () {\r\n            this._super();\r\n\r\n            if (this.value() && parseFloat(this.initialValue) !== parseFloat(this.value())) {\r\n                this.source.set(this.dataScope, this.value());\r\n            } else {\r\n                this.source.remove(this.dataScope);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/form/source-items.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'uiRegistry',\r\n    'underscore'\r\n], function (Fieldset, registry, _) {\r\n    'use strict';\r\n\r\n    return Fieldset.extend({\r\n        defaults: {\r\n            advancedInventoryButtonIndex: '',\r\n            imports: {\r\n                onStockChange: '${ $.provider }:data.product.stock_data.manage_stock'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * \"Advanced Inventory\" button should stay active in any case.\r\n         *\r\n         * @param {Integer} canManageStock\r\n         */\r\n        onStockChange: function (canManageStock) {\r\n            var advancedInventoryButton = registry.get('index = ' + this.advancedInventoryButtonIndex);\r\n\r\n            if (canManageStock === 0) {\r\n                if (!_.isUndefined(advancedInventoryButton)) {\r\n                    advancedInventoryButton.disabled(false);\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/form/stock-status.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            links: {\r\n                linkedValue: false\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getInitialValue: function () {\r\n            var values = [this.source.get(this.dataScope), this.default],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                if (v !== null && v !== undefined) {\r\n                    value = v;\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return this.normalizeData(value);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        setDifferedFromDefault: function () {\r\n            this._super();\r\n\r\n            if (parseFloat(this.initialValue) !== parseFloat(this.value())) {\r\n                this.source.set(this.dataScope, this.value());\r\n            } else {\r\n                this.source.remove(this.dataScope);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/form/sources/qty.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_CatalogInventory/js/components/qty-validator-changer'\r\n], function (Validator) {\r\n    'use strict';\r\n\r\n    return Validator.extend({\r\n\r\n        /**\r\n         * Set default value for source quantity, depends on 'Use Decimal\" value.\r\n         *\r\n         * @param {Integer} isDecimal\r\n         * @returns void\r\n         */\r\n        setDefaultValue: function (isDecimal) {\r\n            this.default = isDecimal ? '0.0' : '0';\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/grid/cell/quantity-per-source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventoryCatalogAdminUi/product/grid/cell/source-items.html',\r\n            itemsToDisplay: 5\r\n        },\r\n\r\n        /**\r\n         * Get source items data (source name and qty)\r\n         *\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getSourceItemsData: function (record) {\r\n            return record[this.index] ? record[this.index] : [];\r\n        },\r\n\r\n        /**\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getSourceItemsDataCut: function (record) {\r\n            return this.getSourceItemsData(record).slice(0, this.itemsToDisplay);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/configurable-quantity-resolver.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiCollection',\r\n    'jquery',\r\n    'ko',\r\n    'uiLayout',\r\n    'mageUtils',\r\n    'underscore',\r\n    'mage/translate'\r\n], function (Collection, $, ko, layout, utils, _, $t) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            attribute: {},\r\n            template: 'Magento_InventoryConfigurableProductAdminUi/container',\r\n            identifier: 'source_code',\r\n            dataScope: '',\r\n            currentAttribute: '',\r\n            insertListingComponent: '',\r\n            dynamicRowsName: 'dynamicRows',\r\n            type: '',\r\n            templateElementNames: {\r\n                button: 'button_template',\r\n                dynamicRows: 'dynamic_rows_template',\r\n                group: 'group_template'\r\n            },\r\n            ignoreTmpls: {\r\n                childTemplate: true\r\n            },\r\n            listens: {\r\n                'attribute': 'handlerAttributeChange',\r\n                'insertListingValue': 'handlerInsertValueChange',\r\n                'type': 'handlerTypeChange'\r\n            },\r\n            dynamicRowsCollection: {},\r\n            imports: {\r\n                insertListingValue: '${$.insertListingComponent}:value'\r\n            },\r\n            modules: {\r\n                insertListing: '${$.insertListingComponent}'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generates data for dynamic-rows records\r\n         * @param {Array} data\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        generateDynamicRowsData: function (data) {\r\n            var items = [];\r\n\r\n            _.each(data, function (item) {\r\n                items.push({\r\n                    'source': item.name,\r\n                    'source_code': item[this.identifier],\r\n                    'source_status': parseInt(item.enabled, 10) ? $.mage.__('Enabled') : $.mage.__('Disabled')\r\n                });\r\n            }.bind(this));\r\n\r\n            return items;\r\n        },\r\n\r\n        /**\r\n         * Handler for InsertListing value\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        handlerInsertValueChange: function (data) {\r\n            var items,\r\n                path = this.dynamicRowsName + '.' + this.currentDynamicRows;\r\n\r\n            if (!this.currentDynamicRows) {\r\n                return;\r\n            }\r\n\r\n            if (!data.length) {\r\n                return;\r\n            }\r\n\r\n            items = this.generateDynamicRowsData(data);\r\n            this.source.set(path, items);\r\n        },\r\n\r\n        /**\r\n         * Handler for attribute property\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        handlerAttributeChange: function (data) {\r\n            if (data && data !== this.currentAttribute) {\r\n                this.currentAttribute = data;\r\n                this.destroyChildren();\r\n\r\n                _.each(data.chosen, function (item) {\r\n                    this.addChild(item);\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler for type property\r\n         *\r\n         * @param {String} data\r\n         */\r\n        handlerTypeChange: function (data) {\r\n            if (data === 'single') {\r\n                this.destroyChildren();\r\n                this.currentAttribute = {};\r\n                this.addChild();\r\n            } else if (data === 'each' && this.attribute) {\r\n                this.handlerAttributeChange(this.attribute);\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        validate: function (elem) {\r\n            if (typeof elem === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            if (typeof elem.validate === 'function') {\r\n                this.valid = this.valid & elem.validate().valid;\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.validate, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Parses string templates.\r\n         * Skip parse if deferredTmpl property set to \"true\"\r\n         *\r\n         * @param {Object} obj\r\n         *\r\n         * @returns obj\r\n         */\r\n        parseTemplateString: function (obj) {\r\n            var children;\r\n\r\n            if (obj.children) {\r\n                children = utils.copy(obj.children);\r\n                delete obj.children;\r\n            }\r\n\r\n            obj = utils.template(obj, obj);\r\n            obj.children = children;\r\n\r\n            if (children) {\r\n                _.each(children, function (child, name) {\r\n                    obj.children[name] = child.config.deferredTmpl ? child : this.parseTemplateString(child);\r\n                }, this);\r\n            }\r\n\r\n            obj.name = obj.config.name || obj.name;\r\n\r\n            return obj;\r\n        },\r\n\r\n        /**\r\n         * Handler for modal\r\n         *\r\n         * @param {String} id - dynamic-rows name that open modal\r\n         */\r\n        handleToggleSourcesModal: function (id) {\r\n            this.currentDynamicRows = this.type === 'each' ? this.currentAttribute.code + '.' + id : id;\r\n            this.insertListing().value(this.source.get(this.dynamicRowsName + '.' + this.currentDynamicRows));\r\n        },\r\n\r\n        /**\r\n         * Generates dynamic data for child.\r\n         *\r\n         * @param {Object | Undefined} data - optional.\r\n         */\r\n        generateDynamicData: function (data) {\r\n            var key = data ? data.label : this.dynamicRowsName,\r\n                drExportTo = this.name + ':dynamicRowsCollection.',\r\n                drDataScope = 'data.' + this.name + '.',\r\n                drDataProvider = this.dynamicRowsName + '.';\r\n\r\n            if (this.type === 'each') {\r\n                drDataScope += this.currentAttribute.code + '.';\r\n                drExportTo += this.currentAttribute.code + '.';\r\n                drDataProvider += this.currentAttribute.code + '.';\r\n            }\r\n\r\n            drDataScope += key;\r\n            drExportTo += key;\r\n            drDataProvider += key;\r\n\r\n            return {\r\n                group: {\r\n                    name: key\r\n                },\r\n                button: {\r\n                    label: data ? data.label : $t('Quantity'),\r\n                    targetName: this.name,\r\n                    param: key\r\n                },\r\n                dynamicRows: {\r\n                    dataScope: drDataScope,\r\n                    dataProvider: drDataProvider,\r\n                    name: this.dynamicRowsName,\r\n                    exportTo: drExportTo\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {Object | Undefined} data - optional.\r\n         */\r\n        addChild: function (data) {\r\n            var template = utils.copy(this.childTemplate.templates).children,\r\n                dynamicRows = template[this.templateElementNames.dynamicRows],\r\n                button = template[this.templateElementNames.button],\r\n                group = template[this.templateElementNames.group],\r\n                dynamicData = this.generateDynamicData(data);\r\n\r\n            group.dynamicData = dynamicData.group;\r\n            group.parent = this.name;\r\n            group = this.parseTemplateString(group);\r\n\r\n            button.dynamicData = dynamicData.button;\r\n            button.parent = this.name + '.' + group.name;\r\n            button = this.parseTemplateString(button);\r\n\r\n            dynamicRows.dynamicData = dynamicData.dynamicRows;\r\n            dynamicRows.parent = this.name + '.' + group.name;\r\n            dynamicRows = this.parseTemplateString(dynamicRows);\r\n\r\n            layout([group, button, dynamicRows]);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/dynamic-rows-configurable-mixin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n        'use strict';\r\n\r\n        var mixin = {\r\n\r\n            /**\r\n             * Parsed data\r\n             *\r\n             * @param {Array} data - array with data\r\n             * about selected records\r\n             */\r\n            processingInsertDataFromGrid: function (data) {\r\n                var changes,\r\n                    tmpArray;\r\n\r\n                if (!data.length) {\r\n                    return;\r\n                }\r\n\r\n                tmpArray = this.getUnionInsertData();\r\n\r\n                changes = this._checkGridData(data);\r\n                this.cacheGridData = data;\r\n\r\n                changes.each(function (changedObject) {\r\n                    var mappedData = this.mappingValue(changedObject),\r\n                        sources = [];\r\n\r\n                    mappedData[this.canEditField] = 0;\r\n                    mappedData[this.newProductField] = 0;\r\n                    mappedData.variationKey = this._getVariationKey(changedObject);\r\n                    mappedData['configurable_attribute'] = this._getConfigurableAttribute(changedObject);\r\n\r\n                    if ('quantity_per_source' in changedObject) {\r\n                        changedObject['quantity_per_source'].each(function (source) {\r\n                            sources.push({\r\n                                'quantity_per_source': source.qty,\r\n                                'source': source['source_name'],\r\n                                'source_code': source['source_code']\r\n                            });\r\n                        });\r\n                        mappedData['quantity_per_source'] = sources;\r\n                    }\r\n\r\n                    tmpArray.push(mappedData);\r\n                }, this);\r\n\r\n                // Attributes cannot be changed before regeneration thought wizard\r\n                if (!this.source.get('data.attributes').length) {\r\n                    this.source.set('data.attributes', this.attributesTmp);\r\n                }\r\n                this.unionInsertData(tmpArray);\r\n            }\r\n        };\r\n\r\n        return function (target) {\r\n            return target.extend(mixin);\r\n        };\r\n    }\r\n);\r\n","Magento_InventoryConfigurableProductAdminUi/js/components/dynamic-rows-configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_ConfigurableProduct/js/components/dynamic-rows-configurable'\r\n], function (dynamicRowsConfigurable) {\r\n    'use strict';\r\n\r\n    return dynamicRowsConfigurable.extend({\r\n        defaults: {\r\n            quantityFieldName: 'quantity_per_source'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getProductData: function (row) {\r\n            var product = this._super(row);\r\n\r\n            product[this.quantityFieldName] = row.quantityPerSource;\r\n\r\n            return product;\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/components/sources-visibility-checker.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'uiComponent'\r\n], function (_, registry, component) {\r\n    'use strict';\r\n\r\n    return component.extend({\r\n        defaults: {\r\n            sourcesIndex: ''\r\n        },\r\n\r\n        /**\r\n         * Hide source tab if convert product to configurable and show it if to simple.\r\n         */\r\n        applySourcesConfiguration: function (visibleMatrix) {\r\n            var source = registry.get('index = ' + this.sourcesIndex);\r\n\r\n            if (!_.isUndefined(source)) {\r\n                source.visible(!visibleMatrix);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/form/element/quantity-per-source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'mage/translate',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function ($t, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            elementTmpl: 'Magento_InventoryConfigurableProductAdminUi/dynamic-rows/cells/cell-source',\r\n            itemsToDisplay: 5,\r\n            isFullList: true,\r\n            showFullListDescription: $t('Show more...'),\r\n            listens: {\r\n                value: 'updateItems'\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe(['items', 'isFullList']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        updateItems: function (data) {\r\n            this.isFullList(data.length > this.itemsToDisplay);\r\n            this.isFullList() ? this.items(data.slice(0, this.itemsToDisplay)) : this.items(data);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/variations/steps/bulk.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_ConfigurableProduct/js/variations/steps/bulk',\r\n    'jquery',\r\n    'ko',\r\n    'underscore'\r\n], function (Bulk, $, ko, _) {\r\n    'use strict';\r\n\r\n    return Bulk.extend({\r\n        defaults: {\r\n            quantityModuleName: '',\r\n            quantityPerSource: '',\r\n            exports: {\r\n                attribute: '${$.provider}:data.inventoryAttribute',\r\n                type: '${$.provider}:data.inventoryType'\r\n            },\r\n            modules: {\r\n                quantityResolver: '${$.quantityResolver}'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            var sections;\r\n\r\n            this._super();\r\n\r\n            sections = this.sections();\r\n            sections.quantityPerSource = {\r\n                label: 'Quantity Per Source',\r\n                type: ko.observable('none'),\r\n                value: ko.observable(),\r\n                attribute: ko.observable()\r\n            };\r\n            this.sections(sections);\r\n\r\n            /**\r\n             * Make options sections.\r\n             */\r\n            this.makeOptionSections = function () {\r\n                return {\r\n                    images: new this.makeImages(null),\r\n                    price: this.price,\r\n                    quantityPerSource: this.quantityPerSource\r\n                };\r\n            }.bind(this);\r\n\r\n            this.initAttributeListener();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Inits listeners for attribute change.\r\n         */\r\n        initAttributeListener: function () {\r\n            var quantityPerSource = this.sections().quantityPerSource;\r\n\r\n            quantityPerSource.attribute.subscribe(function (data) {\r\n                this.attribute(data);\r\n            }.bind(this));\r\n\r\n            quantityPerSource.type.subscribe(function (data) {\r\n                this.type(data);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\r\n         *     properties, calls 'setOptions' passing options to it\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'attribute',\r\n                    'type'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        force: function (wizard) {\r\n            if (this.type() === 'each' && this.attribute() || this.type() === 'single') {\r\n                this.prepareDynamicRowsData();\r\n            }\r\n\r\n            this._super(wizard);\r\n        },\r\n\r\n        /**\r\n         * Prepares dynamic rows data for the next step\r\n         */\r\n        prepareDynamicRowsData: function () {\r\n            var data,\r\n                module = this.quantityResolver();\r\n\r\n            if (this.type() === 'each') {\r\n                data = module.dynamicRowsCollection[this.attribute().code];\r\n\r\n                _.each(this.attribute().chosen, function (item) {\r\n                    item.sections().quantityPerSource = data[item.label];\r\n                });\r\n            } else if (this.type() === 'single') {\r\n                data = module.dynamicRowsCollection[module.dynamicRowsName];\r\n                this.sections().quantityPerSource.value(data);\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        validate: function () {\r\n            var valid = true,\r\n                quantityPerSource = this.quantityResolver();\r\n\r\n            this._super();\r\n\r\n            if (this.type() && this.type() !== 'none') {\r\n                quantityPerSource.valid = true;\r\n\r\n                quantityPerSource.elems().forEach(function (item) {\r\n                    quantityPerSource.validate.call(quantityPerSource, item);\r\n                    valid = valid && item.elems()[1].elems().length;\r\n                });\r\n\r\n                if (!quantityPerSource.valid || !valid) {\r\n                    throw new Error($.mage.__('Please fill-in correct values.'));\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/variations/steps/summary.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_ConfigurableProduct/js/variations/steps/summary',\r\n    'jquery',\r\n    'mage/translate'\r\n], function (Summary, $) {\r\n    'use strict';\r\n\r\n    return Summary.extend({\r\n        defaults: {\r\n            attributesName: [\r\n                $.mage.__('Images'),\r\n                $.mage.__('SKU'),\r\n                $.mage.__('Quantity Per Source'),\r\n                $.mage.__('Price')\r\n            ],\r\n            quantityFieldName: 'quantityPerSource'\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryGroupedProductAdminUi/js/form/element/grid-column-quantity-per-source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'mage/translate',\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function ($t, Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventoryGroupedProductAdminUi/grid/column/quantity-per-source',\r\n            itemsToDisplay: 3,\r\n            showFullListDescription: $t('Show more...')\r\n        },\r\n\r\n        /**\r\n         * Get source items from product data.\r\n         *\r\n         * @param {Object} rowData\r\n         * @returns {Array}\r\n         */\r\n        getSourceItemsData: function (rowData) {\r\n            return rowData['quantity_per_source'];\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryGroupedProductAdminUi/js/form/element/quantity-per-source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'mage/translate',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function ($t, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            elementTmpl: 'Magento_InventoryGroupedProductAdminUi/dynamic-rows/cells/cell-source',\r\n            itemsToDisplay: 3,\r\n            isFullList: true,\r\n            showFullListDescription: $t('Show more...'),\r\n            listens: {\r\n                value: 'updateItems'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Observe elements.\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe(['items', 'isFullList']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Prepare data to use.\r\n         *\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        updateItems: function (data) {\r\n            this.isFullList(data.length > this.itemsToDisplay);\r\n            this.isFullList() ? this.items(data.slice(0, this.itemsToDisplay)) : this.items(data);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryLowQuantityNotificationAdminUi/js/components/notify-stock-qty.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (AbstractField) {\r\n    'use strict';\r\n\r\n    return AbstractField.extend({\r\n        defaults: {\r\n            notifyStockQtyUseDefault: '',\r\n            manageStock: '',\r\n            listens: {\r\n                notifyStockQtyUseDefault: 'onChange',\r\n                manageStock: 'onChange'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe(['notifyStockQtyUseDefault', 'manageStock']);\r\n        },\r\n\r\n        /**\r\n         * Disable input when Manage Stock switched off or Notify Quantity Use Default\r\n         */\r\n        onChange: function () {\r\n            this.disabled(\r\n                this.notifyStockQtyUseDefault() ||\r\n                this.manageStock()\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryLowQuantityNotificationAdminUi/js/components/use-config-settings.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (checkbox) {\r\n    'use strict';\r\n\r\n    return checkbox.extend({\r\n        defaults: {\r\n            valueFromConfig: '',\r\n            linkedValue: ''\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe(['valueFromConfig', 'linkedValue']);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        'onCheckedChanged': function (newChecked) {\r\n            if (newChecked) {\r\n                this.linkedValue(this.valueFromConfig());\r\n            }\r\n\r\n            this._super(newChecked);\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [this.value(), this.default],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                value = v || !!v;\r\n\r\n                return value;\r\n            });\r\n\r\n            return this.normalizeData(value);\r\n        }\r\n    });\r\n});\r\n","Magento_InventorySalesAdminUi/js/product/grid/cell/salable-quantity.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventorySalesAdminUi/product/grid/cell/salable-quantity.html'\r\n        },\r\n\r\n        /**\r\n         * Get salable quantity data (stock name and salable qty)\r\n         *\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getSalableQuantityData: function (record) {\r\n            return record[this.index] ? record[this.index] : [];\r\n        }\r\n    });\r\n});\r\n","Magento_InventorySalesAdminUi/js/stock/grid/cell/sales-channels.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'underscore'\r\n], function (Column, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventorySalesAdminUi/stock/grid/cell/sales-channel-cell.html'\r\n        },\r\n\r\n        /**\r\n         * Get sales channels grouped by type\r\n         *\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getSalesChannelsGroupedByType: function (record) {\r\n            var result = [];\r\n\r\n            _.each(record[this.index], function (channels, type) {\r\n                result.push({\r\n                    type: type,\r\n                    channels: channels\r\n                });\r\n            });\r\n\r\n            return result;\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryShippingAdminUi/js/form/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/form',\r\n    'underscore',\r\n    'mageUtils'\r\n], function ($, Form, _, utils) {\r\n    'use strict';\r\n\r\n    return Form.extend({\r\n        defaults: {\r\n            sourceSelectionUrl: '${ $.sourceSelectionUrl }'\r\n        },\r\n\r\n        /**\r\n         * Process source selection algorithm\r\n         *\r\n         * @param {String} redirect\r\n         * @param {Object} data\r\n         */\r\n        processAlgorithm: function (redirect, data) {\r\n            var formData = utils.filterFormData(this.source.get('data'));\r\n\r\n            data.requestData = [];\r\n\r\n            _.each(formData.items, function (item) {\r\n                data.requestData.push({\r\n                    orderItem: item.orderItemId,\r\n                    sku: item.sku,\r\n                    qty: item.qtyToShip\r\n                });\r\n            });\r\n\r\n            data.orderId = formData['order_id'];\r\n            data.websiteId = formData.websiteId;\r\n            data = utils.serialize(utils.filterFormData(data));\r\n            data['form_key'] = window.FORM_KEY;\r\n\r\n            if (!this.sourceSelectionUrl || this.sourceSelectionUrl === 'undefined') {\r\n                return $.Deferred.resolve();\r\n            }\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            $.ajax({\r\n                url: this.sourceSelectionUrl,\r\n                data: data,\r\n\r\n                /**\r\n                 * Success callback.\r\n                 *\r\n                 * @param {Object} response\r\n                 */\r\n                success: function (response) {\r\n                    var dataItems = this.source.get('data.items');\r\n\r\n                    _.each(dataItems, function (item) {\r\n                        if (response[item.orderItemId]) {\r\n                            this.source.set('data.items.' + item['record_id'] + '.sources', response[item.orderItemId]);\r\n                        }\r\n                    }.bind(this));\r\n                    this.source.trigger('reInitSources');\r\n                    this.source.set('data.sourceCodes', response.sourceCodes ? response.sourceCodes : []);\r\n                }.bind(this),\r\n\r\n                /**\r\n                 * Complete callback.\r\n                 */\r\n                complete: function () {\r\n                    $('body').trigger('processStop');\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryShippingAdminUi/js/form/element/qty_to_deduct.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'mageUtils'\r\n], function (Abstract, utils) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            sourceCode: null,\r\n            qtyAvailable: 0\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initialize: function () {\r\n            var path,\r\n                qtyToShip,\r\n                isManageStock;\r\n\r\n            this._super();\r\n\r\n            //TODO: Is it right way?\r\n            path = utils.getPart(utils.getPart(this.parentScope, -2), -2);\r\n            qtyToShip = this.source.get(path + '.qtyToShip');\r\n            isManageStock = this.source.get(path + '.isManageStock');\r\n\r\n            this.validation['less-than-equals-to'] = isManageStock ? this.qtyAvailable : qtyToShip;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggle disabled state.\r\n         *\r\n         * @param {String} selected\r\n         */\r\n        toggleDisable: function (selected) {\r\n            this.disabled(selected ? selected.toString() !== this.sourceCode : !selected);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryShippingAdminUi/js/form/element/source_code.js":"define([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/select'\r\n], function (_, select) {\r\n    'use strict';\r\n\r\n    return select.extend({\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setOptions: function (data) {\r\n            var result = this._super(data);\r\n\r\n            if (data.length === 1) {\r\n                this.value(data[0].value);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n});\r\n","Magento_Marketplace/default.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (configFromPage) {\r\n        var url = configFromPage.url;\r\n\r\n        $.ajax({\r\n            method: 'GET',\r\n            url: url\r\n        }).done(function (data) {\r\n            $('div[data-role=partners-block]').html(data);\r\n        });\r\n    };\r\n});\r\n","Magento_Msrp/js/msrp.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/js/price-utils',\r\n    'underscore',\r\n    'jquery-ui-modules/widget',\r\n    'mage/dropdown',\r\n    'mage/template'\r\n], function ($, priceUtils, _) {\r\n    'use strict';\r\n\r\n    $.widget('mage.addToCart', {\r\n        options: {\r\n            showAddToCart: true,\r\n            submitUrl: '',\r\n            cartButtonId: '',\r\n            singleOpenDropDown: true,\r\n            dialog: {}, // Options for mage/dropdown\r\n            dialogDelay: 500, // Delay in ms after resize dropdown shown again\r\n            origin: '', //Required, type of popup: 'msrp', 'tier' or 'info' popup\r\n\r\n            // Selectors\r\n            cartForm: '.form.map.checkout',\r\n            msrpLabelId: '#map-popup-msrp',\r\n            msrpPriceElement: '#map-popup-msrp .price-wrapper',\r\n            priceLabelId: '#map-popup-price',\r\n            priceElement: '#map-popup-price .price',\r\n            mapInfoLinks: '.map-show-info',\r\n            displayPriceElement: '.old-price.map-old-price .price-wrapper',\r\n            fallbackPriceElement: '.normal-price.map-fallback-price .price-wrapper',\r\n            displayPriceContainer: '.old-price.map-old-price',\r\n            fallbackPriceContainer: '.normal-price.map-fallback-price',\r\n            popUpAttr: '[data-role=msrp-popup-template]',\r\n            popupCartButtonId: '#map-popup-button',\r\n            paypalCheckoutButons: '[data-action=checkout-form-submit]',\r\n            popupId: '',\r\n            realPrice: '',\r\n            isSaleable: '',\r\n            msrpPrice: '',\r\n            helpLinkId: '',\r\n            addToCartButton: '',\r\n\r\n            // Text options\r\n            productName: '',\r\n            addToCartUrl: ''\r\n        },\r\n\r\n        openDropDown: null,\r\n        triggerClass: 'dropdown-active',\r\n\r\n        popUpOptions: {\r\n            appendTo: 'body',\r\n            dialogContentClass: 'active',\r\n            closeOnMouseLeave: false,\r\n            autoPosition: true,\r\n            closeOnClickOutside: false,\r\n            'dialogClass': 'popup map-popup-wrapper',\r\n            position: {\r\n                my: 'left top',\r\n                collision: 'fit none',\r\n                at: 'left bottom',\r\n                within: 'body'\r\n            },\r\n            shadowHinter: 'popup popup-pointer'\r\n        },\r\n        popupOpened: false,\r\n        wasOpened: false,\r\n\r\n        /**\r\n         * Creates widget instance\r\n         *\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            if (this.options.origin === 'msrp') {\r\n                this.initMsrpPopup();\r\n            } else if (this.options.origin === 'info') {\r\n                this.initInfoPopup();\r\n            } else if (this.options.origin === 'tier') {\r\n                this.initTierPopup();\r\n            }\r\n            $(this.options.cartButtonId).on('click', this._addToCartSubmit.bind(this));\r\n            $(document).on('updateMsrpPriceBlock', this.onUpdateMsrpPrice.bind(this));\r\n            $(this.options.cartForm).on('submit', this._onSubmitForm.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Init msrp popup\r\n         *\r\n         * @private\r\n         */\r\n        initMsrpPopup: function () {\r\n            var popupDOM = $(this.options.popUpAttr)[0],\r\n                $msrpPopup = $(popupDOM.innerHTML.trim());\r\n\r\n            $msrpPopup.find(this.options.productIdInput).val(this.options.productId);\r\n            $('body').append($msrpPopup);\r\n            $msrpPopup.trigger('contentUpdated');\r\n\r\n            $msrpPopup.find('button')\r\n                .on('click',\r\n                    this.handleMsrpAddToCart.bind(this))\r\n                .filter(this.options.popupCartButtonId)\r\n                .text($(this.options.addToCartButton).text());\r\n\r\n            $msrpPopup.find(this.options.paypalCheckoutButons).on('click',\r\n                this.handleMsrpPaypalCheckout.bind(this));\r\n\r\n            $(this.options.popupId).on('click',\r\n                this.openPopup.bind(this));\r\n\r\n            this.$popup = $msrpPopup;\r\n        },\r\n\r\n        /**\r\n         * Init info popup\r\n         *\r\n         * @private\r\n         */\r\n        initInfoPopup: function () {\r\n            var infoPopupDOM = $('[data-role=msrp-info-template]')[0],\r\n                $infoPopup = $(infoPopupDOM.innerHTML.trim());\r\n\r\n            $('body').append($infoPopup);\r\n\r\n            $(this.options.helpLinkId).on('click', function (e) {\r\n                this.popUpOptions.position.of = $(e.target);\r\n                $infoPopup.dropdownDialog(this.popUpOptions).dropdownDialog('open');\r\n                this._toggle($infoPopup);\r\n            }.bind(this));\r\n\r\n            this.$popup = $infoPopup;\r\n        },\r\n\r\n        /**\r\n         * Init tier price popup\r\n         * @private\r\n         */\r\n        initTierPopup: function () {\r\n            var popupDOM = $(this.options.popUpAttr)[0],\r\n                $tierPopup = $(popupDOM.innerHTML.trim());\r\n\r\n            $('body').append($tierPopup);\r\n            $tierPopup.find(this.options.productIdInput).val(this.options.productId);\r\n            this.popUpOptions.position.of = $(this.options.helpLinkId);\r\n\r\n            $tierPopup.find('button').on('click',\r\n                this.handleTierAddToCart.bind(this))\r\n                .filter(this.options.popupCartButtonId)\r\n                .text($(this.options.addToCartButton).text());\r\n\r\n            $tierPopup.find(this.options.paypalCheckoutButons).on('click',\r\n                this.handleTierPaypalCheckout.bind(this));\r\n\r\n            $(this.options.attr).on('click', function (e) {\r\n                this.$popup = $tierPopup;\r\n                this.tierOptions = $(e.target).data('tier-price');\r\n                this.openPopup(e);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * handle 'AddToCart' click on Msrp popup\r\n         * @param {Object} ev\r\n         *\r\n         * @private\r\n         */\r\n        handleMsrpAddToCart: function (ev) {\r\n            ev.preventDefault();\r\n\r\n            if (this.options.addToCartButton) {\r\n                $(this.options.addToCartButton).click();\r\n                this.closePopup(this.$popup);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * handle 'paypal checkout buttons' click on Msrp popup\r\n         *\r\n         * @private\r\n         */\r\n        handleMsrpPaypalCheckout: function () {\r\n            this.closePopup(this.$popup);\r\n        },\r\n\r\n        /**\r\n         * handle 'AddToCart' click on Tier popup\r\n         *\r\n         * @param {Object} ev\r\n         * @private\r\n         */\r\n        handleTierAddToCart: function (ev) {\r\n            ev.preventDefault();\r\n\r\n            if (this.options.addToCartButton &&\r\n                this.options.inputQty && !isNaN(this.tierOptions.qty)\r\n            ) {\r\n                $(this.options.inputQty).val(this.tierOptions.qty);\r\n                $(this.options.addToCartButton).click();\r\n                this.closePopup(this.$popup);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * handle 'paypal checkout buttons' click on Tier popup\r\n         *\r\n         * @private\r\n         */\r\n        handleTierPaypalCheckout: function () {\r\n            if (this.options.inputQty && !isNaN(this.tierOptions.qty)\r\n            ) {\r\n                $(this.options.inputQty).val(this.tierOptions.qty);\r\n                this.closePopup(this.$popup);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Open and set up popup\r\n         *\r\n         * @param {Object} event\r\n         */\r\n        openPopup: function (event) {\r\n            var options = this.tierOptions || this.options;\r\n\r\n            this.popUpOptions.position.of = $(event.target);\r\n\r\n            if (!this.wasOpened) {\r\n                this.$popup.find(this.options.msrpLabelId).html(options.msrpPrice);\r\n                this.$popup.find(this.options.priceLabelId).html(options.realPrice);\r\n                this.wasOpened = true;\r\n            }\r\n            this.$popup.dropdownDialog(this.popUpOptions).dropdownDialog('open');\r\n            this._toggle(this.$popup);\r\n\r\n            if (!this.options.isSaleable) {\r\n                this.$popup.find('form').hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle MAP popup visibility\r\n         *\r\n         * @param {HTMLElement} $elem\r\n         * @private\r\n         */\r\n        _toggle: function ($elem) {\r\n            $(document).on('mouseup.msrp touchend.msrp', function (e) {\r\n                if (!$elem.is(e.target) && $elem.has(e.target).length === 0) {\r\n                    this.closePopup($elem);\r\n                }\r\n            }.bind(this));\r\n            $(window).on('resize', function () {\r\n                this.closePopup($elem);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Close MAP information popup\r\n         *\r\n         * @param {HTMLElement} $elem\r\n         */\r\n        closePopup: function ($elem) {\r\n            $elem.dropdownDialog('close');\r\n            $(document).off('mouseup.msrp touchend.msrp');\r\n        },\r\n\r\n        /**\r\n         * Handler for addToCart action\r\n         *\r\n         * @param {Object} e\r\n         */\r\n        _addToCartSubmit: function (e) {\r\n            this.element.trigger('addToCart', this.element);\r\n\r\n            if (this.element.data('stop-processing')) {\r\n                return false;\r\n            }\r\n\r\n            if (this.options.addToCartButton) {\r\n                $(this.options.addToCartButton).click();\r\n\r\n                return false;\r\n            }\r\n\r\n            if (this.options.addToCartUrl) {\r\n                $('.mage-dropdown-dialog > .ui-dialog-content').dropdownDialog('close');\r\n            }\r\n\r\n            e.preventDefault();\r\n            $(this.options.cartForm).submit();\r\n        },\r\n\r\n        /**\r\n         * Call on event updatePrice. Proxy to updateMsrpPrice method.\r\n         *\r\n         * @param {Event} event\r\n         * @param {mixed} priceIndex\r\n         * @param {Object} prices\r\n         */\r\n        onUpdateMsrpPrice: function onUpdateMsrpPrice(event, priceIndex, prices) {\r\n\r\n            var defaultMsrp,\r\n                defaultPrice,\r\n                msrpPrice,\r\n                finalPrice;\r\n\r\n            defaultMsrp = _.chain(prices).map(function (price) {\r\n                return price.msrpPrice.amount;\r\n            }).reject(function (p) {\r\n                return p === null;\r\n            }).max().value();\r\n\r\n            defaultPrice = _.chain(prices).map(function (p) {\r\n                return p.finalPrice.amount;\r\n            }).min().value();\r\n\r\n            if (typeof priceIndex !== 'undefined') {\r\n                msrpPrice = prices[priceIndex].msrpPrice.amount;\r\n                finalPrice = prices[priceIndex].finalPrice.amount;\r\n\r\n                if (msrpPrice === null || msrpPrice <= finalPrice) {\r\n                    this.updateNonMsrpPrice(priceUtils.formatPrice(finalPrice));\r\n                } else {\r\n                    this.updateMsrpPrice(\r\n                        priceUtils.formatPrice(finalPrice),\r\n                        priceUtils.formatPrice(msrpPrice),\r\n                        false);\r\n                }\r\n            } else {\r\n                this.updateMsrpPrice(\r\n                    priceUtils.formatPrice(defaultPrice),\r\n                    priceUtils.formatPrice(defaultMsrp),\r\n                    true);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update prices for configurable product with MSRP enabled\r\n         *\r\n         * @param {String} finalPrice\r\n         * @param {String} msrpPrice\r\n         * @param {Boolean} useDefaultPrice\r\n         */\r\n        updateMsrpPrice: function (finalPrice, msrpPrice, useDefaultPrice) {\r\n            var options = this.tierOptions || this.options;\r\n\r\n            $(this.options.fallbackPriceContainer).hide();\r\n            $(this.options.displayPriceContainer).show();\r\n            $(this.options.mapInfoLinks).show();\r\n\r\n            if (useDefaultPrice || !this.wasOpened) {\r\n                this.$popup.find(this.options.msrpLabelId).html(options.msrpPrice);\r\n                this.$popup.find(this.options.priceLabelId).html(options.realPrice);\r\n                $(this.options.displayPriceElement).html(msrpPrice);\r\n                this.wasOpened = true;\r\n            }\r\n\r\n            if (!useDefaultPrice) {\r\n                this.$popup.find(this.options.msrpPriceElement).html(msrpPrice);\r\n                this.$popup.find(this.options.priceElement).html(finalPrice);\r\n                $(this.options.displayPriceElement).html(msrpPrice);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Display non MAP price for irrelevant products\r\n         *\r\n         * @param {String} price\r\n         */\r\n        updateNonMsrpPrice: function (price) {\r\n            $(this.options.fallbackPriceElement).html(price);\r\n            $(this.options.displayPriceContainer).hide();\r\n            $(this.options.mapInfoLinks).hide();\r\n            $(this.options.fallbackPriceContainer).show();\r\n        },\r\n\r\n        /**\r\n         * Handler for submit form\r\n         *\r\n         * @private\r\n         */\r\n        _onSubmitForm: function () {\r\n            if ($(this.options.cartForm).valid()) {\r\n                $(this.options.cartButtonId).prop('disabled', true);\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return $.mage.addToCart;\r\n});\r\n","Magento_Payment/js/transparent.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global FORM_KEY */\r\n/* @api */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Payment/js/model/credit-card-validation/validator'\r\n], function ($, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.transparent', {\r\n        options: {\r\n            editFormSelector: '#edit_form',\r\n            hiddenFormTmpl:\r\n                '<form target=\"<%= data.target %>\" action=\"<%= data.action %>\"' +\r\n                'method=\"POST\" hidden' +\r\n                'enctype=\"application/x-www-form-urlencoded\" class=\"no-display\">' +\r\n                    '<% _.each(data.inputs, function(val, key){ %>' +\r\n                    '<input value=\"<%= val %>\" name=\"<%= key %>\" type=\"hidden\">' +\r\n                    '<% }); %>' +\r\n                '</form>',\r\n            cgiUrl: null,\r\n            orderSaveUrl: null,\r\n            controller: null,\r\n            gateway: null,\r\n            dateDelim: null,\r\n            cardFieldsMap: null,\r\n            expireYearLength: 2\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.hiddenFormTmpl = mageTemplate(this.options.hiddenFormTmpl);\r\n\r\n            $(this.options.editFormSelector).on('changePaymentMethod', this._setPlaceOrderHandler.bind(this));\r\n            $(this.options.editFormSelector).trigger('changePaymentMethod', [\r\n                $(this.options.editFormSelector).find(':radio[name=\"payment[method]\"]:checked').val()\r\n            ]);\r\n        },\r\n\r\n        /**\r\n         * Handler for form submit.\r\n         *\r\n         * @param {Object} event\r\n         * @param {String} method\r\n         */\r\n        _setPlaceOrderHandler: function (event, method) {\r\n            if (method === this.options.gateway) {\r\n                $(this.options.editFormSelector)\r\n                    .off('submitOrder')\r\n                    .on('submitOrder.' +  this.options.gateway, this._placeOrderHandler.bind(this));\r\n            } else {\r\n                $(this.options.editFormSelector)\r\n                    .off('submitOrder.' + this.options.gateway);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler for form submit to call gateway for credit card validation.\r\n         *\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _placeOrderHandler: function () {\r\n            if ($(this.options.editFormSelector).valid()) {\r\n                this._orderSave();\r\n            } else {\r\n                $('body').trigger('processStop');\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Handler for Place Order button to call gateway for credit card validation.\r\n         * Save order and generate post data for gateway call.\r\n         *\r\n         * @private\r\n         */\r\n        _orderSave: function () {\r\n            var postData = {\r\n                'form_key': FORM_KEY,\r\n                'cc_type': this.ccType()\r\n            };\r\n\r\n            $.ajax({\r\n                url: this.options.orderSaveUrl,\r\n                type: 'post',\r\n                context: this,\r\n                data: postData,\r\n                dataType: 'json',\r\n\r\n                /**\r\n                 * Success callback\r\n                 * @param {Object} response\r\n                 */\r\n                success: function (response) {\r\n                    if (response.success && response[this.options.gateway]) {\r\n                        this._postPaymentToGateway(response);\r\n                    } else {\r\n                        this._processErrors(response);\r\n                    }\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                complete: function () {\r\n                    $('body').trigger('processStop');\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Post data to gateway for credit card validation.\r\n         *\r\n         * @param {Object} response\r\n         * @private\r\n         */\r\n        _postPaymentToGateway: function (response) {\r\n            var $iframeSelector = $('[data-container=\"' + this.options.gateway + '-transparent-iframe\"]'),\r\n                data,\r\n                tmpl,\r\n                iframe;\r\n\r\n            data = this._preparePaymentData(response);\r\n            tmpl = this.hiddenFormTmpl({\r\n                data: {\r\n                    target: $iframeSelector.attr('name'),\r\n                    action: this.options.cgiUrl,\r\n                    inputs: data\r\n                }\r\n            });\r\n\r\n            iframe = $iframeSelector\r\n                .on('submit', function (event) {\r\n                    event.stopPropagation();\r\n                });\r\n            $(tmpl).appendTo(iframe).submit();\r\n            iframe.html('');\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        ccType: function () {\r\n            return this.element.find(\r\n                '[data-container=\"' + this.options.gateway + '-cc-type\"]'\r\n            ).val();\r\n        },\r\n\r\n        /**\r\n         * Add credit card fields to post data for gateway.\r\n         *\r\n         * @param {Object} response\r\n         * @private\r\n         */\r\n        _preparePaymentData: function (response) {\r\n            var ccfields,\r\n                data,\r\n                preparedata;\r\n\r\n            data = response[this.options.gateway].fields;\r\n            ccfields = this.options.cardFieldsMap;\r\n\r\n            if (this.element.find('[data-container=\"' + this.options.gateway + '-cc-cvv\"]').length) {\r\n                data[ccfields.cccvv] = this.element.find(\r\n                    '[data-container=\"' + this.options.gateway + '-cc-cvv\"]'\r\n                ).val();\r\n            }\r\n            preparedata = this._prepareExpDate();\r\n            data[ccfields.ccexpdate] = preparedata.month + this.options.dateDelim + preparedata.year;\r\n            data[ccfields.ccnum] = this.element.find(\r\n                '[data-container=\"' + this.options.gateway + '-cc-number\"]'\r\n            ).val();\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Grab Month and Year into one\r\n         * @returns {Object}\r\n         * @private\r\n         */\r\n        _prepareExpDate: function () {\r\n            var year = this.element.find('[data-container=\"' + this.options.gateway + '-cc-year\"]').val(),\r\n                month = parseInt(\r\n                    this.element.find('[data-container=\"' + this.options.gateway + '-cc-month\"]').val(), 10\r\n                );\r\n\r\n            if (year.length > this.options.expireYearLength) {\r\n                year = year.substring(year.length - this.options.expireYearLength);\r\n            }\r\n\r\n            if (month < 10) {\r\n                month = '0' + month;\r\n            }\r\n\r\n            return {\r\n                month: month, year: year\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Processing errors\r\n         *\r\n         * @param {Object} response\r\n         * @private\r\n         */\r\n        _processErrors: function (response) {\r\n            var msg = response['error_messages'];\r\n\r\n            if (typeof msg === 'object') {\r\n                alert({\r\n                    content: msg.join('\\n')\r\n                });\r\n            }\r\n\r\n            if (msg) {\r\n                alert({\r\n                    content: msg\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.transparent;\r\n});\r\n","Magento_Payment/js/model/credit-card-validation/credit-card-data.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* @api */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        creditCard: null,\r\n        creditCardNumber: null,\r\n        expirationMonth: null,\r\n        expirationYear: null,\r\n        cvvCode: null\r\n    };\r\n});\r\n","Magento_Payment/js/model/credit-card-validation/credit-card-number-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* @api */\r\ndefine([\r\n    'mageUtils',\r\n    'Magento_Payment/js/model/credit-card-validation/credit-card-number-validator/luhn10-validator',\r\n    'Magento_Payment/js/model/credit-card-validation/credit-card-number-validator/credit-card-type'\r\n], function (utils, luhn10, creditCardTypes) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} card\r\n     * @param {*} isPotentiallyValid\r\n     * @param {*} isValid\r\n     * @return {Object}\r\n     */\r\n    function resultWrapper(card, isPotentiallyValid, isValid) {\r\n        return {\r\n            card: card,\r\n            isValid: isValid,\r\n            isPotentiallyValid: isPotentiallyValid\r\n        };\r\n    }\r\n\r\n    return function (value) {\r\n        var potentialTypes,\r\n            cardType,\r\n            valid,\r\n            i,\r\n            maxLength;\r\n\r\n        if (utils.isEmpty(value)) {\r\n            return resultWrapper(null, false, false);\r\n        }\r\n\r\n        value = value.replace(/\\s+/g, '');\r\n\r\n        if (!/^\\d*$/.test(value)) {\r\n            return resultWrapper(null, false, false);\r\n        }\r\n\r\n        potentialTypes = creditCardTypes.getCardTypes(value);\r\n\r\n        if (potentialTypes.length === 0) {\r\n            return resultWrapper(null, false, false);\r\n        } else if (potentialTypes.length !== 1) {\r\n            return resultWrapper(null, true, false);\r\n        }\r\n\r\n        cardType = potentialTypes[0];\r\n\r\n        if (cardType.type === 'unionpay') {  // UnionPay is not Luhn 10 compliant\r\n            valid = true;\r\n        } else {\r\n            valid = luhn10(value);\r\n        }\r\n\r\n        for (i = 0; i < cardType.lengths.length; i++) {\r\n            if (cardType.lengths[i] === value.length) {\r\n                return resultWrapper(cardType, valid, valid);\r\n            }\r\n        }\r\n\r\n        maxLength = Math.max.apply(null, cardType.lengths);\r\n\r\n        if (value.length < maxLength) {\r\n            return resultWrapper(cardType, true, false);\r\n        }\r\n\r\n        return resultWrapper(cardType, false, false);\r\n    };\r\n});\r\n","Magento_Payment/js/model/credit-card-validation/cvv-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* @api */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} isValid\r\n     * @param {*} isPotentiallyValid\r\n     * @return {Object}\r\n     */\r\n    function resultWrapper(isValid, isPotentiallyValid) {\r\n        return {\r\n            isValid: isValid,\r\n            isPotentiallyValid: isPotentiallyValid\r\n        };\r\n    }\r\n\r\n    /**\r\n     * CVV number validation.\r\n     * Validate digit count for CVV code.\r\n     *\r\n     * @param {*} value\r\n     * @param {Number} maxLength\r\n     * @return {Object}\r\n     */\r\n    return function (value, maxLength) {\r\n        var DEFAULT_LENGTH = 3;\r\n\r\n        maxLength = maxLength || DEFAULT_LENGTH;\r\n\r\n        if (!/^\\d*$/.test(value)) {\r\n            return resultWrapper(false, false);\r\n        }\r\n\r\n        if (value.length === maxLength) {\r\n            return resultWrapper(true, true);\r\n        }\r\n\r\n        if (value.length < maxLength) {\r\n            return resultWrapper(false, true);\r\n        }\r\n\r\n        if (value.length > maxLength) {\r\n            return resultWrapper(false, false);\r\n        }\r\n    };\r\n});\r\n","Magento_Payment/js/model/credit-card-validation/expiration-date-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* @api */\r\ndefine([\r\n    'mageUtils',\r\n    'Magento_Payment/js/model/credit-card-validation/expiration-date-validator/parse-date',\r\n    'Magento_Payment/js/model/credit-card-validation/expiration-date-validator/expiration-month-validator',\r\n    'Magento_Payment/js/model/credit-card-validation/expiration-date-validator/expiration-year-validator'\r\n], function (utils, parseDate, expirationMonth, expirationYear) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} isValid\r\n     * @param {*} isPotentiallyValid\r\n     * @param {*} month\r\n     * @param {*} year\r\n     * @return {Object}\r\n     */\r\n    function resultWrapper(isValid, isPotentiallyValid, month, year) {\r\n        return {\r\n            isValid: isValid,\r\n            isPotentiallyValid: isPotentiallyValid,\r\n            month: month,\r\n            year: year\r\n        };\r\n    }\r\n\r\n    return function (value) {\r\n        var date,\r\n            monthValid,\r\n            yearValid;\r\n\r\n        if (utils.isEmpty(value)) {\r\n            return resultWrapper(false, false, null, null);\r\n        }\r\n\r\n        value = value.replace(/^(\\d\\d) (\\d\\d(\\d\\d)?)$/, '$1/$2');\r\n        date = parseDate(value);\r\n        monthValid = expirationMonth(date.month);\r\n        yearValid = expirationYear(date.year);\r\n\r\n        if (monthValid.isValid && yearValid.isValid) {\r\n            return resultWrapper(true, true, date.month, date.year);\r\n        }\r\n\r\n        if (monthValid.isPotentiallyValid && yearValid.isPotentiallyValid) {\r\n            return resultWrapper(false, true, null, null);\r\n        }\r\n\r\n        return resultWrapper(false, false, null, null);\r\n    };\r\n});\r\n","Magento_Payment/js/model/credit-card-validation/validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* @api */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Payment/js/model/credit-card-validation/cvv-validator',\r\n    'Magento_Payment/js/model/credit-card-validation/credit-card-number-validator',\r\n    'Magento_Payment/js/model/credit-card-validation/expiration-date-validator/expiration-year-validator',\r\n    'Magento_Payment/js/model/credit-card-validation/expiration-date-validator/expiration-month-validator',\r\n    'Magento_Payment/js/model/credit-card-validation/credit-card-data',\r\n    'mage/translate'\r\n], function ($, cvvValidator, creditCardNumberValidator, yearValidator, monthValidator, creditCardData) {\r\n    'use strict';\r\n\r\n    $('.payment-method-content input[type=\"number\"]').on('keyup', function () {\r\n        if ($(this).val() < 0) {\r\n            $(this).val($(this).val().replace(/^-/, ''));\r\n        }\r\n    });\r\n\r\n    $.each({\r\n        'validate-card-type': [\r\n            function (number, item, allowedTypes) {\r\n                var cardInfo,\r\n                    i,\r\n                    l;\r\n\r\n                if (!creditCardNumberValidator(number).isValid) {\r\n                    return false;\r\n                }\r\n\r\n                cardInfo = creditCardNumberValidator(number).card;\r\n\r\n                for (i = 0, l = allowedTypes.length; i < l; i++) {\r\n                    if (cardInfo.title == allowedTypes[i].type) { //eslint-disable-line eqeqeq\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card type number.')\r\n        ],\r\n        'validate-card-number': [\r\n\r\n            /**\r\n             * Validate credit card number based on mod 10\r\n             *\r\n             * @param {*} number - credit card number\r\n             * @return {Boolean}\r\n             */\r\n            function (number) {\r\n                return creditCardNumberValidator(number).isValid;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        'validate-card-date': [\r\n\r\n            /**\r\n             * Validate credit card expiration month\r\n             *\r\n             * @param {String} date - month\r\n             * @return {Boolean}\r\n             */\r\n            function (date) {\r\n                return monthValidator(date).isValid;\r\n            },\r\n            $.mage.__('Incorrect credit card expiration month.')\r\n        ],\r\n        'validate-card-cvv': [\r\n\r\n            /**\r\n             * Validate cvv\r\n             *\r\n             * @param {String} cvv - card verification value\r\n             * @return {Boolean}\r\n             */\r\n            function (cvv) {\r\n                var maxLength = creditCardData.creditCard ? creditCardData.creditCard.code.size : 3;\r\n\r\n                return cvvValidator(cvv, maxLength).isValid;\r\n            },\r\n            $.mage.__('Please enter a valid credit card verification number.')\r\n        ],\r\n        'validate-card-year': [\r\n\r\n            /**\r\n             * Validate credit card expiration year\r\n             *\r\n             * @param {String} date - year\r\n             * @return {Boolean}\r\n             */\r\n            function (date) {\r\n                return yearValidator(date).isValid;\r\n            },\r\n            $.mage.__('Incorrect credit card expiration year.')\r\n        ]\r\n\r\n    }, function (i, rule) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n});\r\n","Magento_Payment/js/model/credit-card-validation/credit-card-number-validator/credit-card-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* @api */\r\ndefine([\r\n    'jquery',\r\n    'mageUtils'\r\n], function ($, utils) {\r\n    'use strict';\r\n\r\n    var types = [\r\n        {\r\n            title: 'Visa',\r\n            type: 'VI',\r\n            pattern: '^4\\\\d*$',\r\n            gaps: [4, 8, 12],\r\n            lengths: [16],\r\n            code: {\r\n                name: 'CVV',\r\n                size: 3\r\n            }\r\n        },\r\n        {\r\n            title: 'MasterCard',\r\n            type: 'MC',\r\n            pattern: '^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$',\r\n            gaps: [4, 8, 12],\r\n            lengths: [16],\r\n            code: {\r\n                name: 'CVC',\r\n                size: 3\r\n            }\r\n        },\r\n        {\r\n            title: 'American Express',\r\n            type: 'AE',\r\n            pattern: '^3([47]\\\\d*)?$',\r\n            isAmex: true,\r\n            gaps: [4, 10],\r\n            lengths: [15],\r\n            code: {\r\n                name: 'CID',\r\n                size: 4\r\n            }\r\n        },\r\n        {\r\n            title: 'Diners',\r\n            type: 'DN',\r\n            pattern: '^(3(0[0-5]|095|6|[8-9]))\\\\d*$',\r\n            gaps: [4, 10],\r\n            lengths: [14, 16, 17, 18, 19],\r\n            code: {\r\n                name: 'CVV',\r\n                size: 3\r\n            }\r\n        },\r\n        {\r\n            title: 'Discover',\r\n            type: 'DI',\r\n            pattern: '^(6011(0|[2-4]|74|7[7-9]|8[6-9]|9)|6(4[4-9]|5))\\\\d*$',\r\n            gaps: [4, 8, 12],\r\n            lengths: [16, 17, 18, 19],\r\n            code: {\r\n                name: 'CID',\r\n                size: 3\r\n            }\r\n        },\r\n        {\r\n            title: 'JCB',\r\n            type: 'JCB',\r\n            pattern: '^35(2[8-9]|[3-8])\\\\d*$',\r\n            gaps: [4, 8, 12],\r\n            lengths: [16, 17, 18, 19],\r\n            code: {\r\n                name: 'CVV',\r\n                size: 3\r\n            }\r\n        },\r\n        {\r\n            title: 'UnionPay',\r\n            type: 'UN',\r\n            pattern: '^(622(1(2[6-9]|[3-9])|[3-8]|9([[0-1]|2[0-5]))|62[4-6]|628([2-8]))\\\\d*?$',\r\n            gaps: [4, 8, 12],\r\n            lengths: [16, 17, 18, 19],\r\n            code: {\r\n                name: 'CVN',\r\n                size: 3\r\n            }\r\n        },\r\n        {\r\n            title: 'Maestro International',\r\n            type: 'MI',\r\n            pattern: '^(5(0|[6-9])|63|67(?!59|6770|6774))\\\\d*$',\r\n            gaps: [4, 8, 12],\r\n            lengths: [12, 13, 14, 15, 16, 17, 18, 19],\r\n            code: {\r\n                name: 'CVC',\r\n                size: 3\r\n            }\r\n        },\r\n        {\r\n            title: 'Maestro Domestic',\r\n            type: 'MD',\r\n            pattern: '^6759(?!24|38|40|6[3-9]|70|76)|676770|676774\\\\d*$',\r\n            gaps: [4, 8, 12],\r\n            lengths: [12, 13, 14, 15, 16, 17, 18, 19],\r\n            code: {\r\n                name: 'CVC',\r\n                size: 3\r\n            }\r\n        },\r\n        {\r\n            title: 'Hipercard',\r\n            type: 'HC',\r\n            pattern: '^((606282)|(637095)|(637568)|(637599)|(637609)|(637612))\\\\d*$',\r\n            gaps: [4, 8, 12],\r\n            lengths: [13, 16],\r\n            code: {\r\n                name: 'CVC',\r\n                size: 3\r\n            }\r\n        },\r\n        {\r\n            title: 'Elo',\r\n            type: 'ELO',\r\n            pattern: '^((509091)|(636368)|(636297)|(504175)|(438935)|(40117[8-9])|(45763[1-2])|' +\r\n                '(457393)|(431274)|(50990[0-2])|(5099[7-9][0-9])|(50996[4-9])|(509[1-8][0-9][0-9])|' +\r\n                '(5090(0[0-2]|0[4-9]|1[2-9]|[24589][0-9]|3[1-9]|6[0-46-9]|7[0-24-9]))|' +\r\n                '(5067(0[0-24-8]|1[0-24-9]|2[014-9]|3[0-379]|4[0-9]|5[0-3]|6[0-5]|7[0-8]))|' +\r\n                '(6504(0[5-9]|1[0-9]|2[0-9]|3[0-9]))|' +\r\n                '(6504(8[5-9]|9[0-9])|6505(0[0-9]|1[0-9]|2[0-9]|3[0-8]))|' +\r\n                '(6505(4[1-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-8]))|' +\r\n                '(6507(0[0-9]|1[0-8]))|(65072[0-7])|(6509(0[1-9]|1[0-9]|20))|' +\r\n                '(6516(5[2-9]|6[0-9]|7[0-9]))|(6550(0[0-9]|1[0-9]))|' +\r\n                '(6550(2[1-9]|3[0-9]|4[0-9]|5[0-8])))\\\\d*$',\r\n            gaps: [4, 8, 12],\r\n            lengths: [16],\r\n            code: {\r\n                name: 'CVC',\r\n                size: 3\r\n            }\r\n        },\r\n        {\r\n            title: 'Aura',\r\n            type: 'AU',\r\n            pattern: '^5078\\\\d*$',\r\n            gaps: [4, 8, 12],\r\n            lengths: [19],\r\n            code: {\r\n                name: 'CVC',\r\n                size: 3\r\n            }\r\n        }\r\n    ];\r\n\r\n    return {\r\n        /**\r\n         * @param {*} cardNumber\r\n         * @return {Array}\r\n         */\r\n        getCardTypes: function (cardNumber) {\r\n            var i, value,\r\n                result = [];\r\n\r\n            if (utils.isEmpty(cardNumber)) {\r\n                return result;\r\n            }\r\n\r\n            if (cardNumber === '') {\r\n                return $.extend(true, {}, types);\r\n            }\r\n\r\n            for (i = 0; i < types.length; i++) {\r\n                value = types[i];\r\n\r\n                if (new RegExp(value.pattern).test(cardNumber)) {\r\n                    result.push($.extend(true, {}, value));\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    };\r\n});\r\n","Magento_Payment/js/model/credit-card-validation/credit-card-number-validator/luhn10-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Luhn algorithm verification\r\n     */\r\n    return function (a, b, c, d, e) {\r\n        for (d = +a[b = a.length - 1], e = 0; b--;) {\r\n            c = +a[b];\r\n            d += ++e % 2 ? 2 * c % 10 + (c > 4) : c;\r\n        }\r\n\r\n        return !(d % 10);\r\n    };\r\n});\r\n","Magento_Payment/js/model/credit-card-validation/expiration-date-validator/expiration-month-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} isValid\r\n     * @param {*} isPotentiallyValid\r\n     * @return {Object}\r\n     */\r\n    function resultWrapper(isValid, isPotentiallyValid) {\r\n        return {\r\n            isValid: isValid,\r\n            isPotentiallyValid: isPotentiallyValid\r\n        };\r\n    }\r\n\r\n    return function (value) {\r\n        var month,\r\n            monthValid;\r\n\r\n        if (value.replace(/\\s/g, '') === '' || value === '0') {\r\n            return resultWrapper(false, true);\r\n        }\r\n\r\n        if (!/^\\d*$/.test(value)) {\r\n            return resultWrapper(false, false);\r\n        }\r\n\r\n        if (isNaN(value)) {\r\n            return resultWrapper(false, false);\r\n        }\r\n\r\n        month = parseInt(value, 10);\r\n        monthValid = month > 0 && month < 13;\r\n\r\n        return resultWrapper(monthValid, monthValid);\r\n    };\r\n});\r\n","Magento_Payment/js/model/credit-card-validation/expiration-date-validator/expiration-year-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} isValid\r\n     * @param {*} isPotentiallyValid\r\n     * @return {Object}\r\n     */\r\n    function resultWrapper(isValid, isPotentiallyValid) {\r\n        return {\r\n            isValid: isValid,\r\n            isPotentiallyValid: isPotentiallyValid\r\n        };\r\n    }\r\n\r\n    return function (value) {\r\n        var currentYear = new Date().getFullYear(),\r\n            len = value.length,\r\n            valid,\r\n            expMaxLifetime = 19;\r\n\r\n        if (value.replace(/\\s/g, '') === '') {\r\n            return resultWrapper(false, true);\r\n        }\r\n\r\n        if (!/^\\d*$/.test(value)) {\r\n            return resultWrapper(false, false);\r\n        }\r\n\r\n        if (len !== 4) {\r\n            return resultWrapper(false, true);\r\n        }\r\n\r\n        value = parseInt(value, 10);\r\n        valid = value >= currentYear && value <= currentYear + expMaxLifetime;\r\n\r\n        return resultWrapper(valid, valid);\r\n    };\r\n});\r\n","Magento_Payment/js/model/credit-card-validation/expiration-date-validator/parse-date.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return function (value) {\r\n        var month, len;\r\n\r\n        if (value.match('/')) {\r\n            value = value.split(/\\s*\\/\\s*/g);\r\n\r\n            return {\r\n                month: value[0],\r\n                year: value.slice(1).join()\r\n            };\r\n        }\r\n\r\n        len = value[0] === '0' || value.length > 5 || value.length === 4 || value.length === 3 ? 2 : 1;\r\n        month = value.substr(0, len);\r\n\r\n        return {\r\n            month: month,\r\n            year: value.substr(month.length, 4)\r\n        };\r\n    };\r\n});\r\n","Magento_Paypal/js/rule.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiClass',\r\n    'Magento_Paypal/js/rules'\r\n], function (Class, Rules) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @param {Object} config\r\n         * @returns {exports.initialize}\r\n         */\r\n        initialize: function (config) {\r\n            this.rules = new Rules();\r\n            this.initConfig(config);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * To apply the rule\r\n         */\r\n        apply: function () {\r\n            this.rules[this.name](this.$target, this.$owner, this.data);\r\n        }\r\n    });\r\n});\r\n","Magento_Paypal/js/rules.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiClass',\r\n    'Magento_Ui/js/modal/alert'\r\n], function (Class, alert) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Check is solution enabled\r\n     *\r\n     * @param {*} solution\r\n     * @param {String} enabler\r\n     * @returns {Boolean}\r\n     */\r\n    var isSolutionEnabled = function (solution, enabler) {\r\n            return solution.find(enabler).val() === '1';\r\n        },\r\n\r\n        /**\r\n         * Check is solution has related solutions enabled\r\n         *\r\n         * @param {Object} data\r\n         * @returns {Boolean}\r\n         */\r\n        hasRelationsEnabled = function (data) {\r\n            var name;\r\n\r\n            for (name in data.argument) {\r\n                if (\r\n                    data.solutionsElements[name] &&\r\n                    isSolutionEnabled(data.solutionsElements[name], data.enableButton)\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Set solution select-enabler to certain option\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         * @param {Boolean} enabled\r\n         */\r\n        setSolutionSelectEnabled = function (solution, enabler, enabled) {\r\n            enabled = !(enabled || typeof enabled === 'undefined') ? '0' : '1';\r\n\r\n            solution.find(enabler + ' option[value=' + enabled + ']')\r\n            .prop('selected', true);\r\n        },\r\n\r\n        /**\r\n         * Set solution property 'disabled' value\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         * @param {Boolean} enabled\r\n         */\r\n        setSolutionPropEnabled = function (solution, enabler, enabled) {\r\n            enabled = !(enabled || typeof enabled === 'undefined');\r\n\r\n            solution.find(enabler).prop('disabled', enabled);\r\n        },\r\n\r\n        /**\r\n         * Set/unset solution select-enabler label\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         * @param {Boolean} enabled\r\n         */\r\n        setSolutionMarkEnabled = function (solution, enabler, enabled) {\r\n            var solutionEnabler = solution.find('label[for=\"' + solution.find(enabler).attr('id') + '\"]');\r\n\r\n            enabled || typeof enabled === 'undefined' ?\r\n                solutionEnabler.addClass('enabled') :\r\n                solutionEnabler.removeClass('enabled');\r\n        },\r\n\r\n        /**\r\n         * Set/unset solution section label\r\n         *\r\n         * @param {*} solution\r\n         * @param {Boolean} enabled\r\n         */\r\n        setSolutionSectionMarkEnabled = function (solution, enabled) {\r\n            var solutionSection = solution.find('.section-config');\r\n\r\n            enabled || typeof enabled === 'undefined' ?\r\n                solutionSection.addClass('enabled') :\r\n                solutionSection.removeClass('enabled');\r\n        },\r\n\r\n        /**\r\n         * Set/unset solution section inner labels\r\n         *\r\n         * @param {*} solution\r\n         * @param {Boolean} enabled\r\n         */\r\n        setSolutionLabelsMarkEnabled = function (solution, enabled) {\r\n            var solutionLabels = solution.find('label.enabled');\r\n\r\n            enabled || typeof enabled === 'undefined' ?\r\n                solutionLabels.addClass('enabled') :\r\n                solutionLabels.removeClass('enabled');\r\n        },\r\n\r\n        /**\r\n         * Set/unset solution usedefault checkbox\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         * @param {Boolean} checked\r\n         */\r\n        setSolutionUsedefaultEnabled = function (solution, enabler, checked) {\r\n            checked = !(checked || typeof checked === 'undefined');\r\n\r\n            solution.find('input[id=\"' + solution.find(enabler).attr('id') + '_inherit\"]')\r\n            .prop('checked', checked);\r\n        },\r\n\r\n        /**\r\n         * Set solution as disabled\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         */\r\n        disableSolution = function (solution, enabler) {\r\n            setSolutionUsedefaultEnabled(solution, enabler);\r\n            setSolutionMarkEnabled(solution, enabler, false);\r\n            setSolutionSelectEnabled(solution, enabler, false);\r\n            setSolutionPropEnabled(solution, enabler, false);\r\n        },\r\n\r\n        /**\r\n         * Set solution as enabled\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         */\r\n        enableSolution = function (solution, enabler) {\r\n            setSolutionUsedefaultEnabled(solution, enabler);\r\n            setSolutionPropEnabled(solution, enabler);\r\n            setSolutionSelectEnabled(solution, enabler);\r\n            setSolutionMarkEnabled(solution, enabler);\r\n        },\r\n\r\n        /**\r\n         * Lock/unlock solution configuration button\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} buttonConfiguration\r\n         * @param {Boolean} unlock\r\n         */\r\n        setSolutionConfigurationUnlock = function (solution, buttonConfiguration, unlock) {\r\n            var solutionConfiguration = solution.find(buttonConfiguration);\r\n\r\n            unlock || typeof unlock === 'undefined' ?\r\n                solutionConfiguration.removeClass('disabled').removeAttr('disabled') :\r\n                solutionConfiguration.addClass('disabled').attr('disabled', 'disabled');\r\n        },\r\n\r\n        /**\r\n         * Forward solution select-enabler changes\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} enabler\r\n         */\r\n        forwardSolutionChange = function (solution, enabler) {\r\n            solution.find(enabler).change();\r\n        },\r\n\r\n        /**\r\n         * Show/hide dependent fields\r\n         *\r\n         * @param {*} solution\r\n         * @param {String} identifier\r\n         * @param {Boolean} show\r\n         */\r\n        showDependsField = function (solution, identifier, show) {\r\n            show = show || typeof show === 'undefined';\r\n\r\n            solution.find(identifier).toggle(show);\r\n            solution.find(identifier).closest('tr').toggle(show);\r\n            solution.find(identifier).attr('disabled', !show);\r\n        };\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            /**\r\n             * Payment conflicts checker\r\n             */\r\n            executed: false\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        simpleDisable: function ($target, $owner, data) {\r\n            setSolutionSelectEnabled($target, data.enableButton, false);\r\n            setSolutionLabelsMarkEnabled($target, false);\r\n            setSolutionSectionMarkEnabled($target, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         */\r\n        simpleMarkEnable: function ($target) {\r\n            setSolutionSectionMarkEnabled($target);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        disable: function ($target, $owner, data) {\r\n            this.simpleDisable($target, $owner, data);\r\n            forwardSolutionChange($target, data.enableButton);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalExpressDisable: function ($target, $owner, data) {\r\n            setSolutionSelectEnabled($target, data.enableButton, false);\r\n            setSolutionLabelsMarkEnabled($target, false);\r\n            forwardSolutionChange($target, data.enableButton);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalExpressLockConfiguration: function ($target, $owner, data) {\r\n            setSolutionConfigurationUnlock($target, data.buttonConfiguration, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalExpressLockConfigurationConditional: function ($target, $owner, data) {\r\n            if (\r\n                !isSolutionEnabled($target, data.enableInContextPayPal) &&\r\n                hasRelationsEnabled(data)\r\n            ) {\r\n                this.paypalExpressLockConfiguration($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalExpressMarkDisable: function ($target, $owner, data) {\r\n            if (!hasRelationsEnabled(data)) {\r\n                this.simpleDisable($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalExpressUnlockConfiguration: function ($target, $owner, data) {\r\n            if (!hasRelationsEnabled(data)) {\r\n                setSolutionConfigurationUnlock($target, data.buttonConfiguration);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalBmlDisable: function ($target, $owner, data) {\r\n            disableSolution($target, data.enableBmlPayPal);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalBmlDisableConditional: function ($target, $owner, data) {\r\n            if (!isSolutionEnabled($target, data.enableButton)) {\r\n                this.paypalBmlDisable($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalBmlEnable: function ($target, $owner, data) {\r\n            enableSolution($target, data.enableBmlPayPal);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressDisable: function ($target, $owner, data) {\r\n            disableSolution($target, data.enableExpress);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressDisableConditional: function ($target, $owner, data) {\r\n            if (\r\n                !isSolutionEnabled($target, data.enableButton) ||\r\n                hasRelationsEnabled(data)\r\n            ) {\r\n                this.payflowExpressDisable($target, $owner, data);\r\n                forwardSolutionChange($target, data.enableExpress);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressEnable: function ($target, $owner, data) {\r\n            enableSolution($target, data.enableExpress);\r\n            forwardSolutionChange($target, data.enableExpress);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressEnableConditional: function ($target, $owner, data) {\r\n            if (hasRelationsEnabled(data)) {\r\n                setSolutionPropEnabled($target, data.enableExpress, false);\r\n                setSolutionSelectEnabled($target, data.enableExpress);\r\n                setSolutionMarkEnabled($target, data.enableExpress);\r\n            } else {\r\n                disableSolution($target, data.enableExpress);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressLockConditional: function ($target, $owner, data) {\r\n            if (!isSolutionEnabled($target, data.enableButton)) {\r\n                setSolutionPropEnabled($target, data.enableExpress, false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressUsedefaultDisable: function ($target, $owner, data) {\r\n            setSolutionUsedefaultEnabled($target, data.enableExpress, false);\r\n            this.payflowExpressEnable($target, $owner, data);\r\n            forwardSolutionChange($target, data.enableExpress);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowExpressUsedefaultEnable: function ($target, $owner, data) {\r\n            setSolutionUsedefaultEnabled($target, data.enableExpress);\r\n            this.payflowExpressDisable($target, $owner, data);\r\n            forwardSolutionChange($target, data.enableExpress);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlDisable: function ($target, $owner, data) {\r\n            disableSolution($target, data.enableBml);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlDisableConditional: function ($target, $owner, data) {\r\n            if (\r\n                !isSolutionEnabled($target, data.enableButton) ||\r\n                hasRelationsEnabled(data)\r\n            ) {\r\n                this.payflowBmlDisable($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlDisableConditionalExpress: function ($target, $owner, data) {\r\n            if (!isSolutionEnabled($target, data.enableExpress)) {\r\n                this.payflowBmlDisable($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlEnable: function ($target, $owner, data) {\r\n            enableSolution($target, data.enableBml);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlEnableConditional: function ($target, $owner, data) {\r\n            if (hasRelationsEnabled(data)) {\r\n                setSolutionPropEnabled($target, data.enableBml, false);\r\n                setSolutionSelectEnabled($target, data.enableBml);\r\n                setSolutionMarkEnabled($target, data.enableBml);\r\n            } else {\r\n                disableSolution($target, data.enableBml);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowBmlLockConditional: function ($target, $owner, data) {\r\n            if (!isSolutionEnabled($target, data.enableButton)) {\r\n                setSolutionPropEnabled($target, data.enableBml, false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextEnable: function ($target, $owner, data) {\r\n            enableSolution($target, data.enableInContextPayPal);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextDisable: function ($target, $owner, data) {\r\n            disableSolution($target, data.enableInContextPayPal);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextShowMerchantId: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsMerchantId);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextHideMerchantId: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsMerchantId, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowShowSortOrder: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsBmlSortOrder);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        payflowHideSortOrder: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsBmlSortOrder, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalShowSortOrder: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsBmlApiSortOrder);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        paypalHideSortOrder: function ($target, $owner, data) {\r\n            showDependsField($target, data.dependsBmlApiSortOrder, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextActivate: function ($target, $owner, data) {\r\n            setSolutionMarkEnabled($target, data.enableInContextPayPal);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextDeactivate: function ($target, $owner, data) {\r\n            setSolutionMarkEnabled($target, data.enableInContextPayPal, false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        inContextDisableConditional: function ($target, $owner, data) {\r\n            if (!isSolutionEnabled($target, data.enableButton)) {\r\n                this.inContextDisable($target, $owner, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        conflict: function ($target, $owner, data) {\r\n            var newLine = String.fromCharCode(10, 13);\r\n\r\n            if (\r\n                isSolutionEnabled($owner, data.enableButton) &&\r\n                hasRelationsEnabled(data) &&\r\n                !this.executed\r\n            ) {\r\n                this.executed = true;\r\n                alert({\r\n                    content: 'The following error(s) occurred:' +\r\n                    newLine +\r\n                    'Some PayPal solutions conflict.' +\r\n                    newLine +\r\n                    'Please re-enable the previously enabled payment solutions.'\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        removeCreditOption: function ($target, $owner, data) {\r\n            if ($target.find(data.dependsButtonLabel + ' option[value=\"credit\"]').length > 0) {\r\n                $target.find(data.dependsButtonLabel + ' option[value=\"credit\"]').remove();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        addCreditOption: function ($target, $owner, data) {\r\n            if ($target.find(data.dependsButtonLabel + ' option[value=\"credit\"]').length === 0) {\r\n                $target.find(data.dependsButtonLabel).append('<option value=\"credit\">Credit</option>');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} $target\r\n         * @param {*} $owner\r\n         * @param {Object} data\r\n         */\r\n        removeCreditOptionConditional: function ($target, $owner, data) {\r\n            if ($target.find(data.dependsDisableFundingOptions + ' option[value=\"CREDIT\"]').length === 0 ||\r\n                $target.find(data.dependsDisableFundingOptions + ' option[value=\"CREDIT\"]:selected').length > 0\r\n            ) {\r\n                this.removeCreditOption($target, $owner, data);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Paypal/js/solution.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'uiClass',\r\n    'Magento_Paypal/js/rule',\r\n    'mageUtils',\r\n    'underscore'\r\n], function ($, Class, Rule, utils, _) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n\r\n            /**\r\n             * The event corresponding to the state change\r\n             */\r\n            systemEvent: 'change',\r\n\r\n            /**\r\n             * The rules applied after the page is loaded\r\n             */\r\n            afterLoadRules: [],\r\n\r\n            /**\r\n             * An attribute of the element responsible for the activation of the payment method (data attribute)\r\n             */\r\n            enableButton:   '[data-enable=\"payment\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the activation of the Payflow Express (data attribute)\r\n             */\r\n            enableExpress:  '[data-enable=\"express\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the activation of the\r\n             * PayPal Express In-Context Checkout Experience (data attribute)\r\n             */\r\n            enableInContextPayPal: '[data-enable=\"in-context-api\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the activation of the Payflow Bml (data attribute)\r\n             */\r\n            enableBml:      '[data-enable=\"bml\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the activation of the PayPal Bml (data attribute)\r\n             */\r\n            enableBmlPayPal:      '[data-enable=\"bml-api\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the visibility of the PayPal Merchant Id (data attribute)\r\n             */\r\n            dependsMerchantId:  '[data-enable=\"merchant-id\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the visibility of the Payflow Bml Sort Order (data attribute)\r\n             */\r\n            dependsBmlSortOrder:    '[data-enable=\"bml-sort-order\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the visibility of the PayPal Bml Sort Order (data attribute)\r\n             */\r\n            dependsBmlApiSortOrder:    '[data-enable=\"bml-api-sort-order\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the visibility of the\r\n             * button Label credit option (data attribute)\r\n             */\r\n            dependsButtonLabel: '[data-enable=\"button-label\"]',\r\n\r\n            /**\r\n             * An attribute of the element responsible for the visibility of the\r\n             * button Label credit option on load (data attribute)\r\n             */\r\n            dependsDisableFundingOptions: '[data-enable=\"disable-funding-options\"]',\r\n\r\n            /**\r\n             * Templates element selectors\r\n             */\r\n            templates: {\r\n                elementSelector: 'div.section-config tr[id$=\"${ $.identifier }\"]:first'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @param {Object} config\r\n         * @param {String} identifier\r\n         * @returns {exports.initialize}\r\n         */\r\n        initialize: function (config, identifier) {\r\n            this.initConfig(config);\r\n            this.$self = this.createElement(identifier);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialization events\r\n         *\r\n         * @returns {exports.initEvents}\r\n         */\r\n        initEvents: function () {\r\n            _.each(this.config.events, function (elementEvents, selector) {\r\n\r\n                var solution = this,\r\n                    selectorButton = solution.$self.find(selector),\r\n                    $self = solution.$self,\r\n                    events = elementEvents;\r\n\r\n                selectorButton.on(solution.systemEvent, function () {\r\n                    _.each(events, function (elementEvent, name) {\r\n\r\n                        var predicate = elementEvent.predicate,\r\n                            result = true,\r\n\r\n                            /**\r\n                             * @param {Function} functionPredicate\r\n                             */\r\n                            predicateCallback = function (functionPredicate) {\r\n                                result = functionPredicate(solution, predicate.message, predicate.argument);\r\n\r\n                                if (result) {\r\n                                    $self.trigger(name);\r\n                                } else {\r\n                                    $self.trigger(predicate.event);\r\n                                }\r\n                            };\r\n\r\n                        if (solution.getValue($(this)) === elementEvent.value ||\r\n                            $(this).prop('multiple') && solution.checkMultiselectValue($(this), elementEvent)\r\n                        ) {\r\n                            if (predicate.name) {\r\n                                require([\r\n                                    'Magento_Paypal/js/predicate/' + predicate.name\r\n                                ], predicateCallback);\r\n                            } else {\r\n                                $self.trigger(name);\r\n                            }\r\n                        }\r\n                    }, this);\r\n                });\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} $element\r\n         * @returns {*}\r\n         */\r\n        getValue: function ($element) {\r\n            if ($element.is(':checkbox')) {\r\n                return $element.prop('checked') ? '1' : '0';\r\n            }\r\n\r\n            return $element.val();\r\n        },\r\n\r\n        /**\r\n         * Check multiselect value based on include value\r\n         *\r\n         * @param {Object} $element\r\n         * @param {Object} elementEvent\r\n         * @returns {Boolean}\r\n         */\r\n        checkMultiselectValue: function ($element, elementEvent) {\r\n            var isValueSelected = $.inArray(elementEvent.value, $element.val()) >= 0;\r\n\r\n            if (elementEvent.include) {\r\n                isValueSelected = (isValueSelected ? 'true' : 'false') === elementEvent.include;\r\n            }\r\n\r\n            return isValueSelected;\r\n        },\r\n\r\n        /**\r\n         * Adding event listeners\r\n         *\r\n         * @returns {exports.addListeners}\r\n         */\r\n        addListeners: function () {\r\n\r\n            _.each(this.config.relations, function (rules, targetName) {\r\n\r\n                var $target = this.createElement(targetName);\r\n\r\n                _.each(rules, function (instances, instanceName) {\r\n\r\n                    _.each(instances, function (instance) {\r\n                        var handler = new Rule({\r\n                            name: instanceName,\r\n                            $target: $target,\r\n                            $owner: this.$self,\r\n                            data: {\r\n                                buttonConfiguration: this.buttonConfiguration,\r\n                                enableButton: this.enableButton,\r\n                                enableExpress: this.enableExpress,\r\n                                enableInContextPayPal: this.enableInContextPayPal,\r\n                                enableBml: this.enableBml,\r\n                                enableBmlPayPal: this.enableBmlPayPal,\r\n                                dependsMerchantId: this.dependsMerchantId,\r\n                                dependsBmlSortOrder: this.dependsBmlSortOrder,\r\n                                dependsBmlApiSortOrder: this.dependsBmlApiSortOrder,\r\n                                dependsButtonLabel: this.dependsButtonLabel,\r\n                                dependsDisableFundingOptions: this.dependsDisableFundingOptions,\r\n                                solutionsElements: this.solutionsElements,\r\n                                argument: instance.argument\r\n                            }\r\n                        });\r\n\r\n                        if (instance.event === ':load') {\r\n                            this.afterLoadRules.push(handler);\r\n\r\n                            return;\r\n                        }\r\n\r\n                        this.$self.on(instance.event, _.bind(handler.apply, handler));\r\n                    }, this);\r\n                }, this);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Create a jQuery element according to selector\r\n         *\r\n         * @param {String} identifier\r\n         * @returns {*}\r\n         */\r\n        createElement: function (identifier) {\r\n            if (identifier === ':self') {\r\n                return this.$self;\r\n            }\r\n\r\n            return $(utils.template(this.templates.elementSelector, {\r\n                'identifier': identifier\r\n            }));\r\n        },\r\n\r\n        /**\r\n         * Assign solutions elements\r\n         *\r\n         * @param {Object} elements\r\n         * @returns {exports.setSolutionsElements}\r\n         */\r\n        setSolutionsElements: function (elements) {\r\n            this.solutionsElements = elements;\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Paypal/js/solutions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'uiClass',\r\n    'Magento_Paypal/js/solution',\r\n    'underscore'\r\n], function ($, Class, Solution, _) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n\r\n            /**\r\n             * Initialized solutions\r\n             */\r\n            solutions: {},\r\n\r\n            /**\r\n             * The elements of created solutions\r\n             */\r\n            solutionsElements: {},\r\n\r\n            /**\r\n             * The selector element responsible for configuration of payment method (CSS class)\r\n             */\r\n            buttonConfiguration: '.button.action-configure'\r\n        },\r\n\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @param {Object} config\r\n         * @returns {exports.initialize}\r\n         */\r\n        initialize: function (config) {\r\n            this.initConfig(config)\r\n                .initSolutions();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialization and configuration solutions\r\n         *\r\n         * @returns {exports.initSolutions}\r\n         */\r\n        initSolutions: function () {\r\n            _.each(this.config.solutions, this.addSolution, this);\r\n            this.initializeSolutions()\r\n                .wipeButtonsConfiguration();\r\n            _.each(this.solutions, this.applicationRules);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * The creation and addition of the solution according to the configuration\r\n         *\r\n         * @param {Object} solution\r\n         * @param {String} identifier\r\n         */\r\n        addSolution: function (solution, identifier) {\r\n            this.solutions[identifier] = new Solution({\r\n                config: solution,\r\n                buttonConfiguration: this.buttonConfiguration\r\n            }, identifier);\r\n            this.solutionsElements[identifier] = this.solutions[identifier].$self;\r\n        },\r\n\r\n        /**\r\n         * Wiping buttons configuration of the payment method\r\n         */\r\n        wipeButtonsConfiguration: function () {\r\n            $(this.buttonConfiguration).removeClass('disabled')\r\n                .removeAttr('disabled');\r\n        },\r\n\r\n        /**\r\n         * Application of the rules\r\n         *\r\n         * @param {Object} solution\r\n         */\r\n        applicationRules: function (solution) {\r\n            _.each(solution.afterLoadRules, function (rule) {\r\n                rule.apply();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Initialize solutions\r\n         *\r\n         * @returns {exports.initializeSolutions}\r\n         */\r\n        initializeSolutions: function () {\r\n            _.each(this.solutions, function (solution) {\r\n                solution.setSolutionsElements(this.solutionsElements)\r\n                    .initEvents()\r\n                    .addListeners();\r\n            }, this);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Paypal/js/payflowpro/vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/*global define*/\r\ndefine([\r\n    'jquery',\r\n    'uiComponent'\r\n], function ($, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            $selector: null,\r\n            selector: 'edit_form'\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            var self = this;\r\n\r\n            self.$selector = $('#' + self.selector);\r\n            this._super();\r\n\r\n            this.initEventHandlers();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get payment code\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return 'payflowpro';\r\n        },\r\n\r\n        /**\r\n         * Init event handlers\r\n         */\r\n        initEventHandlers: function () {\r\n            $('#' + this.container).find('[name=\"payment[token_switcher]\"]')\r\n                .on('click', this.setPaymentDetails.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Store payment details\r\n         */\r\n        setPaymentDetails: function () {\r\n            this.$selector.find('[name=\"payment[public_hash]\"]').val(this.publicHash);\r\n        }\r\n    });\r\n});\r\n","Magento_Paypal/js/predicate/confirm.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['underscore'], function (_) {\r\n    'use strict';\r\n\r\n    return function (solution, message, argument) {\r\n        var isConfirm = false;\r\n\r\n        _.every(argument, function (name) {\r\n            if (solution.solutionsElements[name] &&\r\n                solution.solutionsElements[name].find(solution.enableButton).val() == 1 //eslint-disable-line eqeqeq\r\n            ) {\r\n                isConfirm = true;\r\n\r\n                return !isConfirm;\r\n            }\r\n\r\n            return !isConfirm;\r\n        }, this);\r\n\r\n        if (isConfirm) {\r\n            return confirm(message); //eslint-disable-line no-alert\r\n        }\r\n\r\n        return true;\r\n    };\r\n});\r\n","Magento_ProductVideo/js/get-video-information.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'mage/translate'\r\n], function ($, alert) {\r\n        'use strict';\r\n\r\n        var videoRegister = {\r\n            _register: {},\r\n\r\n            /**\r\n             * Checks, if api is already registered\r\n             *\r\n             * @param {String} api\r\n             * @returns {bool}\r\n             */\r\n            isRegistered: function (api) {\r\n                return this._register[api] !== undefined;\r\n            },\r\n\r\n            /**\r\n             * Checks, if api is loaded\r\n             *\r\n             * @param {String} api\r\n             * @returns {bool}\r\n             */\r\n            isLoaded: function (api) {\r\n                return this._register[api] !== undefined && this._register[api] === true;\r\n            },\r\n\r\n            /**\r\n             * Register new video api\r\n             * @param {String} api\r\n             * @param {bool} loaded\r\n             */\r\n            register: function (api, loaded) {\r\n                loaded = loaded || false;\r\n                this._register[api] = loaded;\r\n            }\r\n        };\r\n\r\n        $.widget('mage.productVideoLoader', {\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _create: function () {\r\n                switch (this.element.data('type')) {\r\n                    case 'youtube':\r\n                        this.element.videoYoutube();\r\n                        this._player = this.element.data('mageVideoYoutube');\r\n                        break;\r\n\r\n                    case 'vimeo':\r\n                        this.element.videoVimeo();\r\n                        this._player = this.element.data('mageVideoVimeo');\r\n                        break;\r\n                    default:\r\n                        throw {\r\n                            name: $.mage.__('Video Error'),\r\n                            message: $.mage.__('Unknown video type'),\r\n\r\n                            /**\r\n                             * Return string\r\n                             */\r\n                            toString: function () {\r\n                                return this.name + ': ' + this.message;\r\n                            }\r\n                        };\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Initializes variables\r\n             * @private\r\n             */\r\n            _initialize: function () {\r\n                this._params = this.element.data('params') || {};\r\n                this._code = this.element.data('code');\r\n                this._width = this.element.data('width');\r\n                this._height = this.element.data('height');\r\n                this._autoplay = !!this.element.data('autoplay');\r\n                this._playing = this._autoplay || false;\r\n                this.useYoutubeNocookie = this.element.data('youtubenocookie') || false;\r\n\r\n                this._responsive = this.element.data('responsive') !== false;\r\n\r\n                if (this._responsive === true) {\r\n                    this.element.addClass('responsive');\r\n                }\r\n\r\n                this._calculateRatio();\r\n            },\r\n\r\n            /**\r\n             * Abstract play command\r\n             */\r\n            play: function () {\r\n                this._player.play();\r\n            },\r\n\r\n            /**\r\n             * Abstract pause command\r\n             */\r\n            pause: function () {\r\n                this._player.pause();\r\n            },\r\n\r\n            /**\r\n             * Abstract stop command\r\n             */\r\n            stop: function () {\r\n                this._player.stop();\r\n            },\r\n\r\n            /**\r\n             * Abstract playing command\r\n             */\r\n            playing: function () {\r\n                return this._player.playing();\r\n            },\r\n\r\n            /**\r\n             * Abstract destroying command\r\n             */\r\n            destroy: function () {\r\n                this._player.destroy();\r\n            },\r\n\r\n            /**\r\n             * Calculates ratio for responsive videos\r\n             * @private\r\n             */\r\n            _calculateRatio: function () {\r\n                if (!this._responsive) {\r\n                    return;\r\n                }\r\n                this.element.css('paddingBottom', this._height / this._width * 100 + '%');\r\n            }\r\n        });\r\n\r\n        $.widget('mage.videoYoutube', $.mage.productVideoLoader, {\r\n\r\n            /**\r\n             * Initialization of the Youtube widget\r\n             * @private\r\n             */\r\n            _create: function () {\r\n                var self = this;\r\n\r\n                this._initialize();\r\n\r\n                this.element.append('<div/>');\r\n\r\n                this._on(window, {\r\n\r\n                    /**\r\n                     * Youtube state check\r\n                     * @private\r\n                     */\r\n                    'youtubeapiready': function () {\r\n                        var host = 'https://www.youtube.com';\r\n\r\n                        if (self.useYoutubeNocookie) {\r\n                            host = 'https://www.youtube-nocookie.com';\r\n                        }\r\n\r\n                        if (self._player !== undefined) {\r\n                            return;\r\n                        }\r\n\r\n                        if (self._autoplay) {\r\n                            self._params.autoplay = 1;\r\n                        }\r\n                        self._params.rel = 0;\r\n\r\n                        self._player = new window.YT.Player(self.element.children(':first')[0], {\r\n                            height: self._height,\r\n                            width: self._width,\r\n                            videoId: self._code,\r\n                            playerVars: self._params,\r\n                            host: host,\r\n                            events: {\r\n\r\n                                /**\r\n                                 * @private\r\n                                 */\r\n                                'onReady': function onPlayerReady() {\r\n                                    self._player.getDuration();\r\n                                },\r\n\r\n                                /**\r\n                                 * State change flag init\r\n                                 */\r\n                                onStateChange: function (data) {\r\n                                    switch (window.parseInt(data.data, 10)) {\r\n                                        case 1:\r\n                                            self._playing = true;\r\n                                            break;\r\n                                        default:\r\n                                            self._playing = false;\r\n                                            break;\r\n                                    }\r\n\r\n                                    self._trigger('statechange', {}, data);\r\n                                }\r\n                            }\r\n\r\n                        });\r\n                    }\r\n                });\r\n\r\n                this._loadApi();\r\n            },\r\n\r\n            /**\r\n             * Loads Youtube API and triggers event, when loaded\r\n             * @private\r\n             */\r\n            _loadApi: function () {\r\n                var element,\r\n                    scriptTag;\r\n\r\n                if (videoRegister.isRegistered('youtube')) {\r\n                    if (videoRegister.isLoaded('youtube')) {\r\n                        $(window).trigger('youtubeapiready');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n                videoRegister.register('youtube');\r\n\r\n                element = document.createElement('script');\r\n                scriptTag = document.getElementsByTagName('script')[0];\r\n\r\n                element.async = true;\r\n                element.src = 'https://www.youtube.com/iframe_api';\r\n                scriptTag.parentNode.insertBefore(element, scriptTag);\r\n\r\n                /**\r\n                 * Trigger youtube api ready event\r\n                 */\r\n                window.onYouTubeIframeAPIReady = function () {\r\n                    $(window).trigger('youtubeapiready');\r\n                    videoRegister.register('youtube', true);\r\n                };\r\n            },\r\n\r\n            /**\r\n             * Play command for Youtube\r\n             */\r\n            play: function () {\r\n                this._player.playVideo();\r\n                this._playing = true;\r\n            },\r\n\r\n            /**\r\n             * Pause command for Youtube\r\n             */\r\n            pause: function () {\r\n                this._player.pauseVideo();\r\n                this._playing = false;\r\n            },\r\n\r\n            /**\r\n             * Stop command for Youtube\r\n             */\r\n            stop: function () {\r\n                this._player.stopVideo();\r\n                this._playing = false;\r\n            },\r\n\r\n            /**\r\n             * Playing command for Youtube\r\n             */\r\n            playing: function () {\r\n                return this._playing;\r\n            },\r\n\r\n            /**\r\n             * stops and unloads player\r\n             * @private\r\n             */\r\n            destroy: function () {\r\n                this.stop();\r\n                this._player.destroy();\r\n            }\r\n        });\r\n\r\n        $.widget('mage.videoVimeo', $.mage.productVideoLoader, {\r\n\r\n            /**\r\n             * Initialize the Vimeo widget\r\n             * @private\r\n             */\r\n            _create: function () {\r\n                var timestamp,\r\n                    src,\r\n                    additionalParams;\r\n\r\n                this._initialize();\r\n                timestamp = new Date().getTime();\r\n\r\n                if (this._autoplay) {\r\n                    additionalParams += '&autoplay=1';\r\n                }\r\n\r\n                src = 'https://player.vimeo.com/video/' +\r\n                    this._code + '?api=1&player_id=vimeo' +\r\n                    this._code +\r\n                    timestamp +\r\n                    additionalParams;\r\n                this.element.append(\r\n                    $('<iframe/>')\r\n                        .attr('frameborder', 0)\r\n                        .attr('id', 'vimeo' + this._code + timestamp)\r\n                        .attr('width', this._width)\r\n                        .attr('height', this._height)\r\n                        .attr('src', src)\r\n                );\r\n\r\n            }\r\n        });\r\n\r\n        $.widget('mage.videoData', {\r\n            options: {\r\n                youtubeKey: '',\r\n                eventSource: '' //where is data going from - focus out or click on button\r\n            },\r\n\r\n            _REQUEST_VIDEO_INFORMATION_TRIGGER: 'request_video_information',\r\n\r\n            _UPDATE_VIDEO_INFORMATION_TRIGGER: 'updated_video_information',\r\n\r\n            _START_UPDATE_INFORMATION_TRIGGER: 'update_video_information',\r\n\r\n            _ERROR_UPDATE_INFORMATION_TRIGGER: 'error_updated_information',\r\n\r\n            _FINISH_UPDATE_INFORMATION_TRIGGER: 'finish_update_information',\r\n\r\n            _VIDEO_URL_VALIDATE_TRIGGER: 'validate_video_url',\r\n\r\n            _videoInformation: null,\r\n\r\n            _currentVideoUrl: null,\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _init: function () {\r\n                this.element.on(this._START_UPDATE_INFORMATION_TRIGGER, $.proxy(this._onRequestHandler, this));\r\n                this.element.on(this._ERROR_UPDATE_INFORMATION_TRIGGER, $.proxy(this._onVideoInvalid, this));\r\n                this.element.on(this._FINISH_UPDATE_INFORMATION_TRIGGER, $.proxy(\r\n                    function () {\r\n                        this._currentVideoUrl = null;\r\n                    }, this\r\n                ));\r\n                this.element.on(this._VIDEO_URL_VALIDATE_TRIGGER, $.proxy(this._onUrlValidateHandler, this));\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _onUrlValidateHandler: function (event, callback, forceVideo) {\r\n                var url = this.element.val(),\r\n                    videoInfo;\r\n\r\n                videoInfo = this._validateURL(url, forceVideo);\r\n\r\n                if (videoInfo) {\r\n                    callback();\r\n                } else {\r\n                    this._onRequestError($.mage.__('Invalid video url'));\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _onRequestHandler: function () {\r\n                var url = this.element.val(),\r\n                    self = this,\r\n                    videoInfo,\r\n                    type,\r\n                    id,\r\n                    googleapisUrl;\r\n\r\n                if (this._currentVideoUrl === url) {\r\n                    return;\r\n                }\r\n\r\n                this._currentVideoUrl = url;\r\n\r\n                this.element.trigger(this._REQUEST_VIDEO_INFORMATION_TRIGGER, {\r\n                    url: url\r\n                });\r\n\r\n                if (!url) {\r\n                    return;\r\n                }\r\n\r\n                videoInfo = this._validateURL(url);\r\n\r\n                if (!videoInfo) {\r\n                    this._onRequestError($.mage.__('Invalid video url'));\r\n\r\n                    return;\r\n                }\r\n\r\n                /**\r\n                 *\r\n                 * @param {Object} data\r\n                 * @private\r\n                 */\r\n                function _onYouTubeLoaded(data) {\r\n                    var tmp,\r\n                        uploadedFormatted,\r\n                        respData,\r\n                        createErrorMessage;\r\n\r\n                    /**\r\n                     * Create errors message\r\n                     *\r\n                     * @returns {String}\r\n                     */\r\n                    createErrorMessage = function () {\r\n                        var error = data.error,\r\n                            errors = error.errors,\r\n                            i,\r\n                            errLength = errors.length,\r\n                            tmpError,\r\n                            errReason,\r\n                            errorsMessage = [];\r\n\r\n                        for (i = 0; i < errLength; i++) {\r\n                            tmpError = errors[i];\r\n                            errReason = tmpError.reason;\r\n\r\n                            if (['keyInvalid'].indexOf(errReason) !== -1) {\r\n                                errorsMessage.push($.mage.__('Youtube API key is invalid'));\r\n\r\n                                break;\r\n                            }\r\n\r\n                            errorsMessage.push(tmpError.message);\r\n                        }\r\n\r\n                        return $.mage.__('Video cant be shown due to the following reason: ') +\r\n                            $.unique(errorsMessage).join(', ');\r\n                    };\r\n\r\n                    if (data.error && [400, 402, 403].indexOf(data.error.code) !== -1) {\r\n                        this._onRequestError(createErrorMessage());\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (!data.items || data.items.length < 1) {\r\n                        this._onRequestError($.mage.__('Video not found'));\r\n\r\n                        return;\r\n                    }\r\n\r\n                    tmp = data.items[0];\r\n                    uploadedFormatted = tmp.snippet.publishedAt.replace('T', ' ').replace(/\\..+/g, '');\r\n                    respData = {\r\n                        duration: this._formatYoutubeDuration(tmp.contentDetails.duration),\r\n                        channel: tmp.snippet.channelTitle,\r\n                        channelId: tmp.snippet.channelId,\r\n                        uploaded: uploadedFormatted,\r\n                        title: tmp.snippet.localized.title,\r\n                        description: tmp.snippet.description,\r\n                        thumbnail: tmp.snippet.thumbnails.high.url,\r\n                        videoId: videoInfo.id,\r\n                        videoProvider: videoInfo.type,\r\n                        useYoutubeNocookie: videoInfo.useYoutubeNocookie\r\n                    };\r\n                    this._videoInformation = respData;\r\n                    this.element.trigger(this._UPDATE_VIDEO_INFORMATION_TRIGGER, respData);\r\n                    this.element.trigger(this._FINISH_UPDATE_INFORMATION_TRIGGER, true);\r\n                }\r\n\r\n                /**\r\n                 * @private\r\n                 */\r\n                function _onVimeoLoaded(data) {\r\n                    var tmp,\r\n                        respData;\r\n\r\n                    if (data.length < 1) {\r\n                        this._onRequestError($.mage.__('Video not found'));\r\n\r\n                        return null;\r\n                    }\r\n                    tmp = data[0];\r\n                    respData = {\r\n                        duration: this._formatVimeoDuration(tmp.duration),\r\n                        channel: tmp['user_name'],\r\n                        channelId: tmp['user_url'],\r\n                        uploaded: tmp['upload_date'],\r\n                        title: tmp.title,\r\n                        description: tmp.description.replace(/(&nbsp;|<([^>]+)>)/ig, ''),\r\n                        thumbnail: tmp['thumbnail_large'],\r\n                        videoId: videoInfo.id,\r\n                        videoProvider: videoInfo.type\r\n                    };\r\n                    this._videoInformation = respData;\r\n                    this.element.trigger(this._UPDATE_VIDEO_INFORMATION_TRIGGER, respData);\r\n                    this.element.trigger(this._FINISH_UPDATE_INFORMATION_TRIGGER, true);\r\n                }\r\n\r\n                type = videoInfo.type;\r\n                id = videoInfo.id;\r\n\r\n                if (type === 'youtube') {\r\n                    googleapisUrl = 'https://www.googleapis.com/youtube/v3/videos?id=' +\r\n                        id +\r\n                        '&part=snippet,contentDetails,statistics,status&key=' +\r\n                        this.options.youtubeKey + '&alt=json&callback=?';\r\n                    $.getJSON(googleapisUrl,\r\n                        {\r\n                            format: 'json'\r\n                        },\r\n                        $.proxy(_onYouTubeLoaded, self)\r\n                    ).fail(\r\n                        function () {\r\n                            self._onRequestError('Video not found');\r\n                        }\r\n                    );\r\n                } else if (type === 'vimeo') {\r\n                    $.ajax({\r\n                        url: 'https://www.vimeo.com/api/v2/video/' + id + '.json',\r\n                        dataType: 'jsonp',\r\n                        data: {\r\n                            format: 'json'\r\n                        },\r\n                        timeout: 5000,\r\n                        success:  $.proxy(_onVimeoLoaded, self),\r\n\r\n                        /**\r\n                         * @private\r\n                         */\r\n                        error: function () {\r\n                            self._onRequestError($.mage.__('Video not found'));\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _onVideoInvalid: function (event, data) {\r\n                this._videoInformation = null;\r\n                this.element.val('');\r\n                alert({\r\n                    content: 'Error: \"' + data + '\"'\r\n                });\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _onRequestError: function (error) {\r\n                this.element.trigger(this._ERROR_UPDATE_INFORMATION_TRIGGER, error);\r\n                this.element.trigger(this._FINISH_UPDATE_INFORMATION_TRIGGER, false);\r\n                this._currentVideoUrl = null;\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _formatYoutubeDuration: function (duration) {\r\n                var match = duration.match(/PT(\\d+H)?(\\d+M)?(\\d+S)?/),\r\n                    hours = parseInt(match[1], 10) || 0,\r\n                    minutes = parseInt(match[2], 10) || 0,\r\n                    seconds = parseInt(match[3], 10) || 0;\r\n\r\n                return this._formatVimeoDuration(hours * 3600 + minutes * 60 + seconds);\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _formatVimeoDuration: function (seconds) {\r\n                return (new Date(seconds * 1000)).toUTCString().match(/(\\d\\d:\\d\\d:\\d\\d)/)[0];\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _parseHref: function (href) {\r\n                var a = document.createElement('a');\r\n\r\n                a.href = href;\r\n\r\n                return a;\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _validateURL: function (href, forceVideo) {\r\n                var id,\r\n                    type,\r\n                    ampersandPosition,\r\n                    vimeoRegex,\r\n                    useYoutubeNocookie = false;\r\n\r\n                if (typeof href !== 'string') {\r\n                    return href;\r\n                }\r\n                href = this._parseHref(href);\r\n\r\n                if (href.host.match(/youtube\\.com/) && href.search) {\r\n\r\n                    id = href.search.split('v=')[1];\r\n\r\n                    if (id) {\r\n                        ampersandPosition = id.indexOf('&');\r\n                        type = 'youtube';\r\n                    }\r\n\r\n                    if (id && ampersandPosition !== -1) {\r\n                        id = id.substring(0, ampersandPosition);\r\n                    }\r\n\r\n                } else if (href.host.match(/youtube\\.com|youtu\\.be|youtube-nocookie.com/)) {\r\n                    id = href.pathname.replace(/^\\/(embed\\/|v\\/)?/, '').replace(/\\/.*/, '');\r\n                    type = 'youtube';\r\n\r\n                    if (href.host.match(/youtube-nocookie.com/)) {\r\n                        useYoutubeNocookie = true;\r\n                    }\r\n                } else if (href.host.match(/vimeo\\.com/)) {\r\n                    type = 'vimeo';\r\n                    vimeoRegex = new RegExp(['https?:\\\\/\\\\/(?:www\\\\.|player\\\\.)?vimeo.com\\\\/(?:channels\\\\/(?:\\\\w+\\\\/)',\r\n                        '?|groups\\\\/([^\\\\/]*)\\\\/videos\\\\/|album\\\\/(\\\\d+)\\\\/video\\\\/|video\\\\/|)(\\\\d+)(?:$|\\\\/|\\\\?)'\r\n                    ].join(''));\r\n\r\n                    if (href.href.match(vimeoRegex) != null) {\r\n                        id = href.href.match(vimeoRegex)[3];\r\n                    }\r\n                }\r\n\r\n                if ((!id || !type) && forceVideo) {\r\n                    id = href.href;\r\n                    type = 'custom';\r\n                }\r\n\r\n                return id ? {\r\n                    id: id, type: type, s: href.search.replace(/^\\?/, ''), useYoutubeNocookie: useYoutubeNocookie\r\n                } : false;\r\n            }\r\n        });\r\n    });\r\n","Magento_ProductVideo/js/new-video-dialog.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'mage/backend/tree-suggest',\r\n    'mage/backend/validation',\r\n    'Magento_ProductVideo/js/get-video-information'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    $.widget('mage.createVideoPlayer', {\r\n        options: {\r\n            videoId: '',\r\n            videoProvider: '',\r\n            container: '.video-player-container',\r\n            videoClass: 'product-video',\r\n            reset: false,\r\n            useYoutubeNocookie: false,\r\n            metaData: {\r\n                DOM: {\r\n                    title: '.video-information.title span',\r\n                    uploaded: '.video-information.uploaded span',\r\n                    uploader: '.video-information.uploader span',\r\n                    duration: '.video-information.duration span',\r\n                    all: '.video-information span',\r\n                    wrapper: '.video-information'\r\n                },\r\n                data: {\r\n                    title: '',\r\n                    uploaded: '',\r\n                    uploader: '',\r\n                    uploaderUrl: '',\r\n                    duration: ''\r\n                }\r\n            }\r\n        },\r\n\r\n        _FINISH_CREATE_VIDEO_TRIGGER: 'finish_create_video',\r\n\r\n        _FINISH_UPDATE_VIDEO_TRIGGER: 'finish_update_video',\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            if (this.options.reset) {\r\n                this.reset();\r\n            } else {\r\n                this.update();\r\n            }\r\n\r\n            this.element.on('reset', $.proxy(this.reset, this));\r\n\r\n        },\r\n\r\n        /**\r\n         * @returns {Boolean}\r\n         */\r\n        update: function () {\r\n            var checkVideoID = this.element.find(this.options.container).find(\r\n                    '.' + this.options.videoClass\r\n                ).data('code'),\r\n                eventVideoData = {\r\n                    oldVideoId: checkVideoID ? checkVideoID.toString() : checkVideoID,\r\n                    newVideoId: this.options.videoId ? this.options.videoId.toString() : this.options.videoId\r\n                };\r\n\r\n            if (checkVideoID && checkVideoID !== this.options.videoId) {\r\n                this._doUpdate();\r\n                this.element.trigger(this._FINISH_UPDATE_VIDEO_TRIGGER, eventVideoData);\r\n            } else if (checkVideoID && checkVideoID === this.options.videoId) {\r\n                return false;\r\n            } else if (!checkVideoID) {\r\n                this._doUpdate();\r\n                this.element.trigger(this._FINISH_CREATE_VIDEO_TRIGGER, eventVideoData);\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _doUpdate: function () {\r\n            var uploaderLinkUrl,\r\n                uploaderLink;\r\n\r\n            this.reset();\r\n            this.element.find(this.options.container).append(\r\n                '<div class=\"' +\r\n                this.options.videoClass +\r\n                '\" data-type=\"' +\r\n                this.options.videoProvider +\r\n                '\" data-code=\"' +\r\n                this.options.videoId +\r\n                '\" data-youtubenocookie=\"' +\r\n                this.options.useYoutubeNocookie +\r\n                '\" data-width=\"100%\" data-height=\"100%\"></div>'\r\n            );\r\n            this.element.find(this.options.metaData.DOM.wrapper).show();\r\n            this.element.find(this.options.metaData.DOM.title).text(this.options.metaData.data.title);\r\n            this.element.find(this.options.metaData.DOM.uploaded).text(this.options.metaData.data.uploaded);\r\n            this.element.find(this.options.metaData.DOM.duration).text(this.options.metaData.data.duration);\r\n\r\n            if (this.options.videoProvider === 'youtube') {\r\n                uploaderLinkUrl = 'https://youtube.com/channel/' + this.options.metaData.data.uploaderUrl;\r\n            } else if (this.options.videoProvider === 'vimeo') {\r\n                uploaderLinkUrl = this.options.metaData.data.uploaderUrl;\r\n            }\r\n            uploaderLink = document.createElement('a');\r\n            uploaderLink.setAttribute('href', uploaderLinkUrl);\r\n            uploaderLink.setAttribute('target', '_blank');\r\n            uploaderLink.innerText = this.options.metaData.data.uploader;\r\n            this.element.find(this.options.metaData.DOM.uploader)[0].appendChild(uploaderLink);\r\n            this.element.find('.' + this.options.videoClass).productVideoLoader();\r\n\r\n        },\r\n\r\n        /**\r\n         * Reset\r\n         */\r\n        reset: function () {\r\n            this.element.find(this.options.container).find('.' + this.options.videoClass).remove();\r\n            this.element.find(this.options.metaData.DOM.wrapper).hide();\r\n            this.element.find(this.options.metaData.DOM.all).text('');\r\n\r\n        }\r\n    });\r\n\r\n    $.widget('mage.updateInputFields', {\r\n        options: {\r\n            reset: false,\r\n            DOM: {\r\n                urlField: 'input[name=\"video_url\"]',\r\n                titleField: 'input[name=\"video_title\"]',\r\n                fileField: '#file_name',\r\n                descriptionField: 'textarea[name=\"video_description\"]',\r\n                thumbnailLocation: '.field-new_video_screenshot_preview .admin__field-control'\r\n            },\r\n            data: {\r\n                url: '',\r\n                title: '',\r\n                description: '',\r\n                thumbnail: ''\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            if (this.options.reset) {\r\n                this.reset();\r\n            } else {\r\n                this.update();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update\r\n         */\r\n        update: function () {\r\n            $(this.options.DOM.titleField).val(this.options.data.title);\r\n            $(this.options.DOM.descriptionField).val(this.options.data.description);\r\n        },\r\n\r\n        /**\r\n         * Reset\r\n         */\r\n        reset: function () {\r\n            $(this.options.DOM.fileField).val('');\r\n            $(this.options.DOM.urlField).val('');\r\n            $(this.options.DOM.titleField).val('');\r\n            $(this.options.DOM.descriptionField).val('');\r\n        }\r\n    });\r\n\r\n    /**\r\n     */\r\n    $.widget('mage.newVideoDialog', {\r\n\r\n        _previewImage: null,\r\n\r\n        clickedElement: '',\r\n\r\n        _images: {},\r\n\r\n        _imageTypes: [\r\n            '.jpeg',\r\n            '.pjpeg',\r\n            '.jpeg',\r\n            '.jpg',\r\n            '.pjpeg',\r\n            '.png',\r\n            '.gif'\r\n        ],\r\n\r\n        _imageProductGalleryWrapperSelector: '#image-container',\r\n\r\n        _videoPreviewInputSelector: '#new_video_screenshot',\r\n\r\n        _videoPreviewRemoteSelector: '',\r\n\r\n        _videoDisableinputSelector: '#new_video_disabled',\r\n\r\n        _videoPreviewImagePointer: '#new_video_screenshot_preview',\r\n\r\n        _videoFormSelector: '#new_video_form',\r\n\r\n        _itemIdSelector: '#item_id',\r\n\r\n        _videoUrlSelector: '[name=\"video_url\"]',\r\n\r\n        _videoImageFilenameselector: '#file_name',\r\n\r\n        _videoUrlWidget: null,\r\n\r\n        _videoInformationBtnSelector: '[name=\"new_video_get\"]',\r\n\r\n        _editVideoBtnSelector: '.image',\r\n\r\n        _deleteGalleryVideoSelector: '[data-role=delete-button]',\r\n\r\n        _deleteGalleryVideoSelectorBtn: null,\r\n\r\n        _videoInformationGetBtn: null,\r\n\r\n        _videoInformationGetUrlField: null,\r\n\r\n        _videoInformationGetEditBtn: null,\r\n\r\n        _isEditPage: false,\r\n\r\n        _onlyVideoPlayer: false,\r\n\r\n        _tempPreviewImageData: null,\r\n\r\n        _videoPlayerSelector: '.mage-new-video-dialog',\r\n\r\n        _videoRequestComplete: null,\r\n\r\n        _gallery: null,\r\n\r\n        /**\r\n         * Bind events\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var events = {\r\n                'setImage': '_onSetImage'\r\n            };\r\n\r\n            this._on(events);\r\n\r\n            this._videoUrlWidget = this.element.find(this._videoUrlSelector).videoData({\r\n                youtubeKey: this.options.youTubeApiKey,\r\n                eventSource: 'focusout'\r\n            });\r\n\r\n            this._videoInformationGetBtn = this.element.find(this._videoInformationBtnSelector);\r\n            this._videoInformationGetUrlField = this.element.find(this._videoUrlSelector);\r\n            this._videoInformationGetEditBtn = this._gallery.find(this._editVideoBtnSelector);\r\n\r\n            this._videoInformationGetBtn.on('click', $.proxy(this._onGetVideoInformationClick, this));\r\n            this._videoInformationGetUrlField.on('focusout', $.proxy(this._onGetVideoInformationFocusOut, this));\r\n\r\n            this._videoUrlWidget.on('updated_video_information', $.proxy(this._onGetVideoInformationSuccess, this));\r\n            this._videoUrlWidget.on('error_updated_information', $.proxy(this._onGetVideoInformationError, this));\r\n            this._videoUrlWidget.on(\r\n                'request_video_information',\r\n                $.proxy(this._onGetVideoInformationStartRequest, this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Fired when user click on button \"Get video information\"\r\n         * @private\r\n         */\r\n        _onGetVideoInformationClick: function () {\r\n            var videoForm = this.element.find(this._videoFormSelector);\r\n\r\n            videoForm.validation();\r\n\r\n            if (this.element.find(this._videoUrlSelector).valid()) {\r\n                this._onlyVideoPlayer = false;\r\n                this._isEditPage = false;\r\n                this._videoUrlWidget.trigger('update_video_information');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Fired when user do focus out from url field\r\n         * @private\r\n         */\r\n        _onGetVideoInformationFocusOut: function () {\r\n            this._videoUrlWidget.trigger('update_video_information');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _onGetVideoInformationStartRequest: function () {\r\n            var videoForm = this.element.find(this._videoFormSelector);\r\n\r\n            try {\r\n                videoForm.validation('clearError');\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n\r\n            this._videoRequestComplete = false;\r\n        },\r\n\r\n        /**\r\n         * Fired when user click Edit Video button\r\n         * @private\r\n         */\r\n        _onGetVideoInformationEditClick: function () {\r\n            this._onlyVideoPlayer = true;\r\n            this._isEditPage = true;\r\n            this._videoUrlWidget.trigger('update_video_information');\r\n        },\r\n\r\n        /**\r\n         * Fired when successfully received information about the video.\r\n         * @param {Object} e\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _onGetVideoInformationSuccess: function (e, data) {\r\n            var self = this;\r\n\r\n            self.element.on('finish_update_video finish_create_video', $.proxy(function (element, playerData) {\r\n                    if (!self._onlyVideoPlayer ||\r\n                        !self._isEditPage && playerData.oldVideoId !== playerData.newVideoId ||\r\n                        playerData.oldVideoId && playerData.oldVideoId !== playerData.newVideoId\r\n                    ) {\r\n                        self.element.updateInputFields({\r\n                            reset: false,\r\n                            data: {\r\n                                title: data.title,\r\n                                description: data.description\r\n                            }\r\n                        });\r\n                        this._loadRemotePreview(data.thumbnail);\r\n                    }\r\n                    self._onlyVideoPlayer = true;\r\n                }, this))\r\n                .createVideoPlayer({\r\n                    videoId: data.videoId,\r\n                    videoProvider: data.videoProvider,\r\n                    useYoutubeNocookie: data.useYoutubeNocookie,\r\n                    reset: false,\r\n                    metaData: {\r\n                        DOM: {\r\n                            title: '.video-information.title span',\r\n                            uploaded: '.video-information.uploaded span',\r\n                            uploader: '.video-information.uploader span',\r\n                            duration: '.video-information.duration span',\r\n                            all: '.video-information span',\r\n                            wrapper: '.video-information'\r\n                        },\r\n                        data: {\r\n                            title: data.title,\r\n                            uploaded: data.uploaded,\r\n                            uploader: data.channel,\r\n                            duration: data.duration,\r\n                            uploaderUrl: data.channelId\r\n                        }\r\n                    }\r\n                })\r\n                .off('finish_update_video finish_create_video');\r\n\r\n            this._videoRequestComplete = true;\r\n        },\r\n\r\n        /**\r\n         * Load preview from youtube/vimeo\r\n         * @param {String} sourceUrl\r\n         * @private\r\n         */\r\n        _loadRemotePreview: function (sourceUrl) {\r\n            var url = this.options.saveRemoteVideoUrl,\r\n                self = this;\r\n\r\n            this._getPreviewImage().attr('src', sourceUrl).hide();\r\n            this._blockActionButtons(true, true);\r\n            $.ajax({\r\n                url: url,\r\n                data: 'remote_image=' + sourceUrl,\r\n                type: 'post',\r\n                success: $.proxy(function (result) {\r\n                    this._tempPreviewImageData = result;\r\n                    this._getPreviewImage().attr('src', sourceUrl).show();\r\n                    this._blockActionButtons(false, true);\r\n                }, self)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Fired when receiving information about the video ended with error\r\n         * @private\r\n         */\r\n        _onGetVideoInformationError: function () {\r\n        },\r\n\r\n        /**\r\n         * Remove \".tmp\"\r\n         * @param {String} name\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        __prepareFilename: function (name) {\r\n            var tmppost = '.tmp';\r\n\r\n            if (!name) {\r\n                return name;\r\n            }\r\n\r\n            if (name.endsWith(tmppost)) {\r\n                name = name.slice(0, name.length - tmppost.length);\r\n            }\r\n\r\n            return name;\r\n        },\r\n\r\n        /**\r\n         * Set image data\r\n         * @param {String} file\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _setImage: function (file, imageData) {\r\n            file = this.__prepareFilename(file);\r\n            this._images[file] = imageData;\r\n            this._gallery.trigger('addItem', imageData);\r\n            this.element.trigger('setImage', imageData);\r\n            this._addVideoClass(imageData.url);\r\n        },\r\n\r\n        /**\r\n         * Get image data\r\n         *\r\n         * @param {String} file\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getImage: function (file) {\r\n            file = this.__prepareFilename(file);\r\n\r\n            return this._images[file];\r\n        },\r\n\r\n        /**\r\n         * Replace image (update)\r\n         * @param {String} oldFile\r\n         * @param {String} newFile\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _replaceImage: function (oldFile, newFile, imageData) {\r\n            var tmpNewFile = newFile,\r\n                tmpOldImage,\r\n                newImageId,\r\n                oldNewFilePosition,\r\n                fc,\r\n                suff,\r\n                searchsuff,\r\n                key,\r\n                oldValIdElem;\r\n\r\n            oldFile = this.__prepareFilename(oldFile);\r\n            newFile = this.__prepareFilename(newFile);\r\n            tmpOldImage = this._images[oldFile];\r\n\r\n            if (newFile === oldFile) {\r\n                this._images[newFile] = imageData;\r\n                this.saveImageRoles(imageData);\r\n                this._updateVisibility(imageData);\r\n                this._updateImageTitle(imageData);\r\n\r\n                return null;\r\n            }\r\n\r\n            this._removeImage(oldFile);\r\n            this._setImage(newFile, imageData);\r\n\r\n            if (!oldFile || !imageData.oldFile) {\r\n                return null;\r\n            }\r\n\r\n            newImageId = this.findElementId(tmpNewFile);\r\n            fc = this.element.find(this._itemIdSelector).val();\r\n\r\n            suff = 'product[media_gallery][images]' + fc;\r\n\r\n            searchsuff = 'input[name=\"' + suff + '[value_id]\"]';\r\n            key = this._gallery.find(searchsuff).val();\r\n\r\n            if (!key) {\r\n                return null;\r\n            }\r\n\r\n            oldValIdElem = document.createElement('input');\r\n            this._gallery.find('form[data-form=\"edit-product\"]').append(oldValIdElem);\r\n            $(oldValIdElem).attr({\r\n                type: 'hidden',\r\n                name: 'product[media_gallery][images][' + newImageId + '][save_data_from]'\r\n            }).val(key);\r\n\r\n            oldNewFilePosition = parseInt(tmpOldImage.position, 10);\r\n            imageData.position = oldNewFilePosition;\r\n\r\n            this._gallery.trigger('setPosition', {\r\n                imageData: imageData,\r\n                position: oldNewFilePosition\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Remove image data\r\n         * @param {String} file\r\n         * @private\r\n         */\r\n        _removeImage: function (file) {\r\n            var imageData = this._getImage(file);\r\n\r\n            if (!imageData) {\r\n                return null;\r\n            }\r\n\r\n            this._gallery.trigger('removeItem', imageData);\r\n            this.element.trigger('removeImage', imageData);\r\n            delete this._images[file];\r\n        },\r\n\r\n        /**\r\n         * Fired when image setted\r\n         * @param {Event} event\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _onSetImage: function (event, imageData) {\r\n            this.saveImageRoles(imageData);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * Wrap _uploadFile\r\n         * @param {String} file\r\n         * @param {String} oldFile\r\n         * @param {Function} callback\r\n         * @private\r\n         */\r\n        _uploadImage: function (file, oldFile, callback) {\r\n            var url = this.options.saveVideoUrl,\r\n                data = {\r\n                    files: file,\r\n                    url: url\r\n                };\r\n\r\n            this._blockActionButtons(true, true);\r\n            this._uploadFile(data, $.proxy(function (result) {\r\n                this._onImageLoaded(result, file, oldFile, callback);\r\n                this._blockActionButtons(false);\r\n            }, this));\r\n\r\n        },\r\n\r\n        /**\r\n         * @param {String} result\r\n         * @param {String} file\r\n         * @param {String} oldFile\r\n         * @param {Function} callback\r\n         * @private\r\n         */\r\n        _onImageLoaded: function (result, file, oldFile, callback) {\r\n            var data = JSON.parse(result);\r\n\r\n            if (this.element.find('#video_url').parent().find('.image-upload-error').length > 0) {\r\n                this.element.find('.image-upload-error').remove();\r\n            }\r\n\r\n            if (data.errorcode || data.error) {\r\n                this.element.find('#video_url').parent().append('<div class=\"image-upload-error\">' +\r\n                '<div class=\"image-upload-error-cross\"></div><span>' + data.error + '</span></div>');\r\n\r\n                return;\r\n            }\r\n            $.each(this.element.find(this._videoFormSelector).serializeArray(), function (i, field) {\r\n                data[field.name] = field.value;\r\n            });\r\n            data.disabled = this.element.find(this._videoDisableinputSelector).attr('checked') ? 1 : 0;\r\n            data['media_type'] = 'external-video';\r\n            data.oldFile = oldFile;\r\n\r\n            oldFile ?\r\n                this._replaceImage(oldFile, data.file, data) :\r\n                this._setImage(data.file, data);\r\n            callback.call(0, data);\r\n        },\r\n\r\n        /**\r\n         * File uploader\r\n         * @private\r\n         */\r\n        _uploadFile: function (data, callback) {\r\n            var fu = this.element.find(this._videoPreviewInputSelector),\r\n                tmpInput = document.createElement('input'),\r\n                fileUploader = null;\r\n\r\n            $(tmpInput).attr({\r\n                'name': fu.attr('name'),\r\n                'value': fu.val(),\r\n                'type': 'file',\r\n                'data-ui-ud': fu.attr('data-ui-ud')\r\n            }).css('display', 'none');\r\n            fu.parent().append(tmpInput);\r\n            fileUploader = $(tmpInput).fileupload();\r\n            fileUploader.fileupload('send', data).success(function (result, textStatus, jqXHR) {\r\n                tmpInput.remove();\r\n                callback.call(null, result, textStatus, jqXHR);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Update style\r\n         * @param {String} url\r\n         * @private\r\n         */\r\n        _addVideoClass: function (url) {\r\n            var classVideo = 'video-item';\r\n\r\n            this._gallery.find('img[src=\"' + url + '\"]').addClass(classVideo);\r\n        },\r\n\r\n        /**\r\n         * Build widget\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var imgs = _.values(this.element.closest(this.options.videoSelector).data('images')) || [],\r\n                widget,\r\n                uploader,\r\n                tmp,\r\n                i;\r\n\r\n            this._gallery =  this.element.closest(this.options.videoSelector);\r\n\r\n            for (i = 0; i < imgs.length; i++) {\r\n                tmp = imgs[i];\r\n                this._images[tmp.file] = tmp;\r\n\r\n                if (tmp['media_type'] === 'external-video') {\r\n                    tmp.subclass = 'video-item';\r\n                    this._addVideoClass(tmp.url);\r\n                }\r\n            }\r\n\r\n            this._gallery.on('openDialog', $.proxy(this._onOpenDialog, this));\r\n            this._bind();\r\n            this.createVideoItemIcons();\r\n            widget = this;\r\n            uploader = this.element.find(this._videoPreviewInputSelector);\r\n            uploader.on('change', this._onImageInputChange.bind(this));\r\n            uploader.attr('accept', this._imageTypes.join(','));\r\n\r\n            this.element.modal({\r\n                type: 'slide',\r\n                //appendTo: this._gallery,\r\n                modalClass: 'mage-new-video-dialog form-inline',\r\n                title: $.mage.__('New Video'),\r\n                buttons: [\r\n                    {\r\n                        text: $.mage.__('Save'),\r\n                        class: 'action-primary video-create-button',\r\n                        click: $.proxy(widget._onCreate, widget)\r\n                    },\r\n                    {\r\n                        text: $.mage.__('Cancel'),\r\n                        class: 'video-cancel-button',\r\n                        click: $.proxy(widget._onCancel, widget)\r\n                    },\r\n                    {\r\n                        text: $.mage.__('Delete'),\r\n                        class: 'video-delete-button',\r\n                        click: $.proxy(widget._onDelete, widget)\r\n                    },\r\n                    {\r\n                        text: $.mage.__('Save'),\r\n                        class: 'action-primary video-edit',\r\n                        click: $.proxy(widget._onUpdate, widget)\r\n                    }\r\n                ],\r\n\r\n                /**\r\n                 * @returns {null}\r\n                 */\r\n                opened: function () {\r\n                    var roles,\r\n                        file,\r\n                        modalTitleElement,\r\n                        imageData,\r\n                        modal = widget.element.closest('.mage-new-video-dialog');\r\n\r\n                    widget.element.find('#video_url').focus();\r\n                    roles = widget.element.find('.video_image_role');\r\n                    roles.prop('disabled', false);\r\n                    file = widget.element.find('#file_name').val();\r\n                    widget._onGetVideoInformationEditClick();\r\n                    modalTitleElement = modal.find('.modal-title');\r\n\r\n                    if (!file) {\r\n                        widget._blockActionButtons(true);\r\n\r\n                        modal.find('.video-delete-button').hide();\r\n                        modal.find('.video-edit').hide();\r\n                        modal.find('.video-create-button').show();\r\n                        roles.prop('checked', widget._gallery.find('.image.item:not(.removed)').length < 1);\r\n                        modalTitleElement.text($.mage.__('New Video'));\r\n                        widget._isEditPage = false;\r\n\r\n                        return null;\r\n                    }\r\n                    widget._blockActionButtons(false);\r\n                    modalTitleElement.text($.mage.__('Edit Video'));\r\n                    widget._isEditPage = true;\r\n                    imageData = widget._getImage(file);\r\n\r\n                    if (!imageData) {\r\n                        imageData = {\r\n                            url: _.find(widget._gallery.find('.product-image'), function (image) {\r\n                                return image.src.indexOf(file) > -1;\r\n                            }).src\r\n                        };\r\n                    }\r\n\r\n                    widget._onPreview(null, imageData.url, false);\r\n                },\r\n\r\n                /**\r\n                 * Closed\r\n                 */\r\n                closed: function () {\r\n                    widget._onClose();\r\n                    widget.createVideoItemIcons();\r\n                }\r\n            });\r\n            this.toggleButtons();\r\n        },\r\n\r\n        /**\r\n         * @param {String} status\r\n         * @private\r\n         */\r\n        _blockActionButtons: function (status) {\r\n            this.element\r\n                .closest('.mage-new-video-dialog')\r\n                .find('.page-actions-buttons button.video-create-button, .page-actions-buttons button.video-edit')\r\n                .attr('disabled', status);\r\n        },\r\n\r\n        /**\r\n         * Check form\r\n         * @param {Function} callback\r\n         */\r\n        isValid: function (callback) {\r\n            var videoForm = this.element.find(this._videoFormSelector),\r\n                videoLoaded = true;\r\n\r\n            this._blockActionButtons(true);\r\n\r\n            this._videoUrlWidget.trigger('validate_video_url', $.proxy(function () {\r\n\r\n                videoForm.mage('validation', {\r\n\r\n                    /**\r\n                     * @param {jQuery} error\r\n                     * @param {jQuery} element\r\n                     */\r\n                    errorPlacement: function (error, element) {\r\n                        error.insertAfter(element);\r\n                    }\r\n                }).on('highlight.validate', function () {\r\n                    $(this).validation('option');\r\n                });\r\n\r\n                videoForm.validation();\r\n\r\n                if (this._videoRequestComplete === false) {\r\n                    videoLoaded = false;\r\n                }\r\n\r\n                callback(videoForm.valid() && videoLoaded);\r\n            }, this));\r\n\r\n            this._blockActionButtons(false);\r\n        },\r\n\r\n        /**\r\n         * Create video item icons\r\n         */\r\n        createVideoItemIcons: function () {\r\n            var $imageWidget = this._gallery.find('.product-image.video-item'),\r\n                $productGalleryWrapper = $(this._imageProductGalleryWrapperSelector).find('.product-image.video-item');\r\n\r\n            $imageWidget.parent().addClass('video-item');\r\n            $productGalleryWrapper.parent().addClass('video-item');\r\n            $imageWidget.removeClass('video-item');\r\n            $productGalleryWrapper.removeClass('video-item');\r\n            $('.video-item .action-delete').attr('title', $.mage.__('Delete video'));\r\n            $('.video-item .action-delete span').html($.mage.__('Delete video'));\r\n        },\r\n\r\n        /**\r\n         * Fired when click on create video\r\n         * @private\r\n         */\r\n        _onCreate: function () {\r\n            var nvs = this.element.find(this._videoPreviewInputSelector),\r\n                file = nvs.get(0),\r\n                reqClass = 'required-entry _required';\r\n\r\n            if (file && file.files && file.files.length) {\r\n                file = file.files[0];\r\n            } else {\r\n                file = null;\r\n            }\r\n\r\n            if (!file && !this._tempPreviewImageData) {\r\n                nvs.addClass(reqClass);\r\n            }\r\n\r\n            this.isValid($.proxy(\r\n                function (videoValidStatus) {\r\n\r\n                    if (!videoValidStatus) {\r\n                        return;\r\n                    }\r\n\r\n                    if (this._tempPreviewImageData) {\r\n                        this._onImageLoaded(this._tempPreviewImageData, null, null, $.proxy(this.close, this));\r\n                    } else {\r\n                        this._uploadImage(file, null, $.proxy(function () {\r\n                            this.close();\r\n                        }, this));\r\n                    }\r\n\r\n                    nvs.removeClass(reqClass);\r\n                }, this\r\n            ));\r\n        },\r\n\r\n        /**\r\n         * Fired when click on update video\r\n         * @private\r\n         */\r\n        _onUpdate: function () {\r\n            var inputFile, itemId, _inputSelector, mediaFields, imageData, flagChecked, fileName, callback;\r\n\r\n            this.isValid($.proxy(\r\n                function (videoValidStatus) {\r\n\r\n                    if (!videoValidStatus) {\r\n                        return;\r\n                    }\r\n\r\n                    imageData = this.imageData || {};\r\n                    inputFile = this.element.find(this._videoPreviewInputSelector);\r\n                    itemId = this.element.find(this._itemIdSelector).val();\r\n                    itemId = itemId.slice(1, itemId.length - 1);\r\n                    _inputSelector = '[name*=\"[' + itemId + ']\"]';\r\n                    mediaFields = this._gallery.find('input' + _inputSelector);\r\n                    $.each(mediaFields, function (i, el) {\r\n                        var elName = el.name,\r\n                            start = elName.indexOf(itemId) + itemId.length + 2,\r\n                            fieldName = elName.substring(start, el.name.length - 1),\r\n                            _field = this.element.find('#' + fieldName),\r\n                            _tmp;\r\n\r\n                        if (_field.length > 0) {\r\n                            _tmp = _inputSelector.slice(0, _inputSelector.length - 2) + '[' + fieldName + ']\"]';\r\n                            this._gallery.find(_tmp).val(_field.val());\r\n                            imageData[fieldName] = _field.val();\r\n                        }\r\n                    }.bind(this));\r\n                    flagChecked = this.element.find(this._videoDisableinputSelector).attr('checked') ? 1 : 0;\r\n                    this._gallery.find('input[name*=\"' + itemId + '][disabled]\"]').val(flagChecked);\r\n                    this._gallery.find(_inputSelector).siblings('.image-fade').css(\r\n                        'visibility', flagChecked ? 'visible' : 'hidden'\r\n                    );\r\n                    imageData.disabled = flagChecked;\r\n\r\n                    if (this._tempPreviewImageData) {\r\n                        this._onImageLoaded(\r\n                            this._tempPreviewImageData,\r\n                            null,\r\n                            imageData.file,\r\n                            $.proxy(this.close, this)\r\n                        );\r\n\r\n                        return;\r\n                    }\r\n                    fileName = inputFile.get(0).files;\r\n\r\n                    if (!fileName || !fileName.length) {\r\n                        fileName = null;\r\n                    }\r\n                    inputFile.replaceWith(inputFile);\r\n\r\n                    callback = $.proxy(function () {\r\n                        this.close();\r\n                    }, this);\r\n\r\n                    if (fileName) {\r\n                        this._uploadImage(fileName, imageData.file, callback);\r\n                    } else {\r\n                        this._replaceImage(imageData.file, imageData.file, imageData);\r\n                        callback(0, imageData);\r\n                    }\r\n                }, this\r\n            ));\r\n        },\r\n\r\n        /**\r\n         * Delegates call to producwt gallery to update video visibility.\r\n         *\r\n         * @param {Object} imageData\r\n         */\r\n        _updateVisibility: function (imageData) {\r\n            this._gallery.trigger('updateVisibility', {\r\n                disabled: imageData.disabled,\r\n                imageData: imageData\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Delegates call to product gallery to update video title.\r\n         *\r\n         * @param {Object} imageData\r\n         */\r\n        _updateImageTitle: function (imageData) {\r\n            this._gallery.trigger('updateImageTitle', {\r\n                imageData: imageData\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Fired when clicked on cancel\r\n         * @private\r\n         */\r\n        _onCancel: function () {\r\n            this.close();\r\n        },\r\n\r\n        /**\r\n         * Fired when clicked on delete\r\n         * @private\r\n         */\r\n        _onDelete: function () {\r\n            var filename = this.element.find(this._videoImageFilenameselector).val();\r\n\r\n            this._removeImage(filename);\r\n            this.close();\r\n        },\r\n\r\n        /**\r\n         * @param {String} file\r\n         * @param {Function} callback\r\n         * @private\r\n         */\r\n        _readPreviewLocal: function (file, callback) {\r\n            var fr = new FileReader;\r\n\r\n            if (!window.FileReader) {\r\n                return;\r\n            }\r\n\r\n            /**\r\n             * On load end\r\n             */\r\n            fr.onloadend = function () {\r\n                callback(fr.result);\r\n            };\r\n            fr.readAsDataURL(file);\r\n        },\r\n\r\n        /**\r\n         *  Image file input handler\r\n         * @private\r\n         */\r\n        _onImageInputChange: function () {\r\n            var jFile = this.element.find(this._videoPreviewInputSelector),\r\n                file = jFile[0],\r\n                val = jFile.val(),\r\n                prev = this._getPreviewImage(),\r\n                ext = '.' + val.split('.').pop();\r\n\r\n            if (!val) {\r\n                return;\r\n            }\r\n            ext = ext ? ext.toLowerCase() : '';\r\n\r\n            if (\r\n                ext.length < 2 ||\r\n                this._imageTypes.indexOf(ext.toLowerCase()) === -1 || !file.files || !file.files.length\r\n            ) {\r\n                prev.remove();\r\n                this._previewImage = null;\r\n                jFile.val('');\r\n\r\n                return;\r\n            } // end if\r\n            file = file.files[0];\r\n            this._tempPreviewImageData = null;\r\n            this._onPreview(null, file, true);\r\n        },\r\n\r\n        /**\r\n         * Change Preview\r\n         * @param {String} error\r\n         * @param {String} src\r\n         * @param {Boolean} local\r\n         * @private\r\n         */\r\n        _onPreview: function (error, src, local) {\r\n            var img, renderImage;\r\n\r\n            img = this._getPreviewImage();\r\n\r\n            /**\r\n             * Callback\r\n             * @param {String} source\r\n             */\r\n            renderImage = function (source) {\r\n                img.attr({\r\n                    'src': source\r\n                }).show();\r\n            };\r\n\r\n            if (error) {\r\n                return;\r\n            }\r\n\r\n            if (!local) {\r\n                renderImage(src);\r\n            } else {\r\n                this._readPreviewLocal(src, renderImage);\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * Return preview image imstance\r\n         * @returns {null}\r\n         * @private\r\n         */\r\n        _getPreviewImage: function () {\r\n\r\n            if (!this._previewImage) {\r\n                this._previewImage = $(document.createElement('img')).css({\r\n                    'width': '100%',\r\n                    'display': 'none',\r\n                    'src': ''\r\n                });\r\n                $(this._previewImage).insertAfter(this.element.find(this._videoPreviewImagePointer));\r\n                $(this._previewImage).attr('data-role', 'video_preview_image');\r\n            }\r\n\r\n            return this._previewImage;\r\n        },\r\n\r\n        /**\r\n         * Close slideout dialog\r\n         */\r\n        close: function () {\r\n            this.element.modal('closeModal');\r\n        },\r\n\r\n        /**\r\n         * Close dialog wrap\r\n         * @private\r\n         */\r\n        _onClose: function () {\r\n            var newVideoForm;\r\n\r\n            this._isEditPage = true;\r\n            this.imageData = null;\r\n\r\n            if (this._previewImage) {\r\n                this._previewImage.remove();\r\n                this._previewImage = null;\r\n            }\r\n            this._tempPreviewImageData = null;\r\n            this.element.trigger('reset');\r\n            newVideoForm = this.element.find(this._videoFormSelector);\r\n\r\n            $(newVideoForm).find('input[type=\"hidden\"][name!=\"form_key\"]').val('');\r\n            this._gallery.find('input[name*=\"' + this.element.find(\r\n                    this._itemIdSelector).val() + '\"]'\r\n            ).parent().removeClass('active');\r\n\r\n            try {\r\n                newVideoForm.validation('clearError');\r\n            } catch (e) {\r\n\r\n            }\r\n            newVideoForm.trigger('reset');\r\n        },\r\n\r\n        /**\r\n         * Find element by fileName\r\n         * @param {String} file\r\n         */\r\n        findElementId: function (file) {\r\n            var elem = this._gallery.find('.image.item').find('input[value=\"' + file + '\"]');\r\n\r\n            if (!elem.length) {\r\n                return null;\r\n            }\r\n\r\n            return $(elem).attr('name').replace('product[media_gallery][images][', '').replace('][file]', '');\r\n        },\r\n\r\n        /**\r\n         * Save image roles\r\n         * @param {Object} imageData\r\n         */\r\n        saveImageRoles: function (imageData) {\r\n            var data = imageData.file,\r\n                self = this,\r\n                containers;\r\n\r\n            if (data && data.length > 0) {\r\n                containers = this._gallery.find('.image-placeholder').siblings('input');\r\n                $.each(containers, function (i, el) {\r\n                    var start = el.name.indexOf('[') + 1,\r\n                        end = el.name.indexOf(']'),\r\n                        imageType = el.name.substring(start, end),\r\n                        imageCheckbox = self.element.find(\r\n                            self._videoFormSelector + ' input[value=\"' + imageType + '\"]'\r\n                        );\r\n\r\n                    self._changeRole(imageType, imageCheckbox.attr('checked'), imageData);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change image role\r\n         * @param {String} imageType - role name\r\n         * @param {bool} isEnabled - role active status\r\n         * @param {Object} imageData - image data object\r\n         * @private\r\n         */\r\n        _changeRole: function (imageType, isEnabled, imageData) {\r\n            var needCheked = true;\r\n\r\n            if (!isEnabled) {\r\n                needCheked = this._gallery.find('input[name=\"product[' + imageType + ']\"]').val() === imageData.file;\r\n            }\r\n\r\n            if (!needCheked) {\r\n                return null;\r\n            }\r\n\r\n            this._gallery.trigger('setImageType', {\r\n                type: imageType,\r\n                imageData: isEnabled ? imageData : null\r\n            });\r\n        },\r\n\r\n        /**\r\n         * On open dialog\r\n         * @param {Object} e\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _onOpenDialog: function (e, imageData) {\r\n            var formFields, flagChecked, file,\r\n                modal = this.element.closest('.mage-new-video-dialog');\r\n\r\n            if (imageData['media_type'] === 'external-video') {\r\n                this.imageData = imageData;\r\n                modal.find('.video-create-button').hide();\r\n                modal.find('.video-delete-button').show();\r\n                modal.find('.video-edit').show();\r\n                modal.createVideoPlayer({\r\n                    reset: true\r\n                }).createVideoPlayer('reset');\r\n\r\n                formFields = modal.find(this._videoFormSelector).find('.edited-data');\r\n\r\n                $.each(formFields, function (i, field) {\r\n                    $(field).val(imageData[field.name]);\r\n                });\r\n\r\n                flagChecked = imageData.disabled > 0;\r\n                modal.find(this._videoDisableinputSelector).prop('checked', flagChecked);\r\n\r\n                file = modal.find('#file_name').val(imageData.file);\r\n\r\n                $.each(modal.find('.video_image_role'), function () {\r\n                    $(this).prop('checked', false).prop('disabled', false);\r\n                });\r\n\r\n                $.each(this._gallery.find('.image-placeholder').siblings('input:hidden'), function () {\r\n                    var start, end, imageRole;\r\n\r\n                    if ($(this).val() === file.val()) {\r\n                        start = this.name.indexOf('[') + 1;\r\n                        end = this.name.length - 1;\r\n                        imageRole = this.name.substring(start, end);\r\n                        modal.find('#new_video_form input[value=\"' + imageRole + '\"]').prop('checked', true);\r\n                    }\r\n                });\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Toggle buttons\r\n         */\r\n        toggleButtons: function () {\r\n            var self = this,\r\n                modal = this.element.closest('.mage-new-video-dialog');\r\n\r\n            modal.find('.video-placeholder, .add-video-button-container > button').click(function () {\r\n                modal.find('.video-create-button').show();\r\n                modal.find('.video-delete-button').hide();\r\n                modal.find('.video-edit').hide();\r\n                modal.createVideoPlayer({\r\n                    reset: true\r\n                }).createVideoPlayer('reset').updateInputFields({\r\n                    reset: true\r\n                }).updateInputFields('reset');\r\n            });\r\n            this._gallery.on('click', '.item.video-item', function () {\r\n                modal.find('.video-create-button').hide();\r\n                modal.find('.video-delete-button').show();\r\n                modal.find('.video-edit').show();\r\n                modal.find('.mage-new-video-dialog').createVideoPlayer({\r\n                    reset: true\r\n                }).createVideoPlayer('reset');\r\n            });\r\n            this._gallery.on('click', '.item.video-item:not(.removed)', function () {\r\n                var flagChecked,\r\n                    file,\r\n                    formFields = modal.find('.edited-data'),\r\n                    container = $(this);\r\n\r\n                $.each(formFields, function (i, field) {\r\n                    $(field).val(container.find('input[name*=\"' + field.name + '\"]').val());\r\n                });\r\n\r\n                flagChecked = container.find('input[name*=\"disabled\"]').val() > 0;\r\n                self._gallery.find(self._videoDisableinputSelector).attr('checked', flagChecked);\r\n\r\n                file = self._gallery.find('#file_name').val(container.find('input[name*=\"file\"]').val());\r\n\r\n                $.each(self._gallery.find('.video_image_role'), function () {\r\n                    $(this).prop('checked', false).prop('disabled', false);\r\n                });\r\n\r\n                $.each(self._gallery.find('.image-placeholder').siblings('input:hidden'), function () {\r\n                    var start, end, imageRole;\r\n\r\n                    if ($(this).val() !== file.val()) {\r\n                        return null;\r\n                    }\r\n\r\n                    start = this.name.indexOf('[') + 1;\r\n                    end = this.name.length - 1;\r\n                    imageRole = this.name.substring(start, end);\r\n                    self._gallery.find('input[value=\"' + imageRole + '\"]').prop('checked', true);\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    $('#group-fields-image-management > legend > span').text($.mage.__('Images and Videos'));\r\n\r\n    return $.mage.newVideoDialog;\r\n});\r\n","Magento_ProductVideo/js/video-modal.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'productGallery',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'mage/backend/tree-suggest',\r\n    'mage/backend/validation',\r\n    'newVideoDialog'\r\n], function ($, productGallery) {\r\n    'use strict';\r\n\r\n    $.widget('mage.productGallery', productGallery, {\r\n\r\n        /**\r\n         * Bind events\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var events = {},\r\n                itemId;\r\n\r\n            this._super();\r\n\r\n            /**\r\n             * Add item_id value to opened modal\r\n             * @param {Object} event\r\n             */\r\n            events['click ' + this.options.imageSelector] = function (event) {\r\n                if (!$(event.currentTarget).is('.ui-sortable-helper')) {\r\n                    itemId = $(event.currentTarget).find('input')[0].name.match(/\\[([^\\]]*)\\]/g)[2];\r\n                    this.videoDialog.find('#item_id').val(itemId);\r\n                }\r\n            };\r\n            this._on(events);\r\n            this.element.prev().find('[data-role=\"add-video-button\"]').on('click', this.showModal.bind(this));\r\n            this.element.on('openDialog', '.gallery.ui-sortable', $.proxy(this._onOpenDialog, this));\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._super();\r\n            this.videoDialog = this.element.find('#new-video');\r\n            this.videoDialog.mage('newVideoDialog', this.videoDialog.data('modalInfo'));\r\n        },\r\n\r\n        /**\r\n         * Open dialog for external video\r\n         * @private\r\n         */\r\n        _onOpenDialog: function (e, imageData) {\r\n\r\n            if (imageData['media_type'] !== 'external-video') {\r\n                this._superApply(arguments);\r\n            } else {\r\n                this.showModal();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Fired on trigger \"openModal\"\r\n         */\r\n        showModal: function () {\r\n            this.videoDialog.modal('openModal');\r\n        }\r\n    });\r\n\r\n    return $.mage.productGallery;\r\n});\r\n","Magento_ReleaseNotification/js/modal/component.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal-component',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate'\r\n], function ($, Modal, alert, $t) {\r\n    'use strict';\r\n\r\n    return Modal.extend({\r\n        defaults: {\r\n            imports: {\r\n                logAction:  '${ $.provider }:data.logAction'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Error handler.\r\n         *\r\n         * @param {Object} xhr - request result.\r\n         */\r\n        onError: function (xhr) {\r\n            if (xhr.statusText === 'abort') {\r\n                return;\r\n            }\r\n\r\n            alert({\r\n                content: xhr.message || $t('An error occurred while logging process.')\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Log release notes show\r\n         */\r\n        logReleaseNotesShow: function () {\r\n            var self = this,\r\n                data = {\r\n                    'form_key': window.FORM_KEY\r\n                };\r\n\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.logAction,\r\n                data: data,\r\n                showLoader: true\r\n            }).done(function (xhr) {\r\n                if (xhr.error) {\r\n                    self.onError(xhr);\r\n                }\r\n            }).fail(this.onError);\r\n        },\r\n\r\n        /**\r\n         * Close release notes\r\n         */\r\n        closeReleaseNotes: function () {\r\n            this.logReleaseNotesShow();\r\n            this.closeModal();\r\n        }\r\n    });\r\n});\r\n","Magento_Review/js/rating.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('marketing.ratingControl', {\r\n        options: {\r\n            colorFilled: '#333',\r\n            colorUnfilled: '#CCCCCC',\r\n            colorHover: '#f30'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._labels = this.element.find('label');\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._labels.on({\r\n                click: $.proxy(function (e) {\r\n                    $(e.currentTarget).prev().prop('checked', true);\r\n                    this._updateRating();\r\n                }, this),\r\n\r\n                hover: $.proxy(function (e) {\r\n                    this._updateHover($(e.currentTarget), this.options.colorHover);\r\n                }, this),\r\n\r\n                mouseleave: $.proxy(function (e) {\r\n                    this._updateHover($(e.currentTarget), this.options.colorUnfilled);\r\n                }, this)\r\n            });\r\n\r\n            this._updateRating();\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery} elem\r\n         * @param {String} color\r\n         * @private\r\n         */\r\n        _updateHover: function (elem, color) {\r\n            elem.nextAll('label').addBack().filter(function () {\r\n                return !$(this).data('checked');\r\n            }).css('color', color);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _updateRating: function () {\r\n            var checkedInputs = this.element.find('input[type=\"radio\"]:checked');\r\n\r\n            checkedInputs.nextAll('label').addBack().css('color', this.options.colorFilled).data('checked', true);\r\n            checkedInputs.prevAll('label').css('color', this.options.colorUnfilled).data('checked', false);\r\n        },\r\n\r\n        /**\r\n         * Remove rating when form reset\r\n         */\r\n        removeRating: function () {\r\n            var checkedInputs = this.element.find('input[type=\"radio\"]');\r\n\r\n            checkedInputs.nextAll('label').css('color', this.options.colorUnfilled).data('checked', false);\r\n        }\r\n    });\r\n\r\n});\r\n","Magento_Rule/conditions-data-normalizer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    var ConditionsDataNormalizer = function () {\r\n        this.patterns = {\r\n            validate: /^[a-z0-9_.-][a-z0-9_.-]*(?:\\[(?:\\d*|[a-z0-9_.-]+)\\])*$/i,\r\n            key: /[a-z0-9_.-]+|(?=\\[\\])/gi,\r\n            push: /^$/,\r\n            fixed: /^\\d+$/,\r\n            named: /^[a-z0-9_.-]+$/i\r\n        };\r\n    };\r\n\r\n    ConditionsDataNormalizer.prototype = {\r\n        /**\r\n         * Will convert an object:\r\n         * {\r\n         *   \"foo[bar][1][baz]\": 123,\r\n         *   \"foo[bar][1][blah]\": 321\r\n         *   \"foo[bar][1--1][ah]\": 456\r\n         * }\r\n         *\r\n         * to\r\n         * {\r\n         *   \"foo\": {\r\n         *     \"bar\": {\r\n         *       \"1\": {\r\n         *         \"baz\": 123,\r\n         *         \"blah\": 321\r\n         *       },\r\n         *       \"1--1\": {\r\n         *         \"ah\": 456\r\n         *       }\r\n         *     }\r\n         *   }\r\n         * }\r\n         */\r\n        normalize: function normalize(value) {\r\n            var el, _this = this;\r\n\r\n            this.pushes = {};\r\n            this.data = {};\r\n\r\n            _.each(value, function (e, i) {\r\n                el = {};\r\n                el[i] = e;\r\n\r\n                _this._addPair({\r\n                    name: i,\r\n                    value: e\r\n                });\r\n            });\r\n\r\n            return this.data;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} base\r\n         * @param {String} key\r\n         * @param {String} value\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _build: function build(base, key, value) {\r\n            base[key] = value;\r\n\r\n            return base;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} root\r\n         * @param {String} value\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _makeObject: function makeObject(root, value) {\r\n            var keys = root.match(this.patterns.key),\r\n                k, idx; // nest, nest, ..., nest\r\n\r\n            while ((k = keys.pop()) !== undefined) {\r\n                // foo[]\r\n                if (this.patterns.push.test(k)) {\r\n                    idx = this._incrementPush(root.replace(/\\[\\]$/, ''));\r\n                    value = this._build([], idx, value);\r\n                } // foo[n]\r\n                else if (this.patterns.fixed.test(k)) {\r\n                    value = this._build({}, k, value);\r\n                } // foo; foo[bar]\r\n                else if (this.patterns.named.test(k)) {\r\n                    value = this._build({}, k, value);\r\n                }\r\n            }\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * @param {String} key\r\n         * @return {Number}\r\n         * @private\r\n         */\r\n        _incrementPush: function incrementPush(key) {\r\n            if (this.pushes[key] === undefined) {\r\n                this.pushes[key] = 0;\r\n            }\r\n\r\n            return this.pushes[key]++;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} pair\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _addPair: function addPair(pair) {\r\n            var obj = this._makeObject(pair.name, pair.value);\r\n\r\n            if (!this.patterns.validate.test(pair.name)) {\r\n                return this;\r\n            }\r\n\r\n            this.data = $.extend(true, this.data, obj);\r\n\r\n            return this;\r\n        }\r\n    };\r\n\r\n    return ConditionsDataNormalizer;\r\n});\r\n","Magento_Rule/rules.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate',\r\n    'prototype'\r\n], function (jQuery) {\r\n    'use strict';\r\n\r\n    var VarienRulesForm = new Class.create();\r\n\r\n    VarienRulesForm.prototype = {\r\n        initialize: function (parent, newChildUrl) {\r\n            this.parent = $(parent);\r\n            this.newChildUrl  = newChildUrl;\r\n            this.shownElement = null;\r\n            this.updateElement = null;\r\n            this.chooserSelectedItems = $H({});\r\n            this.readOnly = false;\r\n\r\n            var elems = this.parent.getElementsByClassName('rule-param');\r\n\r\n            for (var i = 0; i < elems.length; i++) {\r\n                this.initParam(elems[i]);\r\n            }\r\n        },\r\n\r\n        setReadonly: function (readonly) {\r\n            this.readOnly = readonly;\r\n            var elems = this.parent.getElementsByClassName('rule-param-remove');\r\n\r\n            for (var i = 0; i < elems.length; i++) {\r\n                var element = elems[i];\r\n\r\n                if (this.readOnly) {\r\n                    element.hide();\r\n                } else {\r\n                    element.show();\r\n                }\r\n            }\r\n\r\n            var elems = this.parent.getElementsByClassName('rule-param-new-child');\r\n\r\n            for (var i = 0; i < elems.length; i++) {\r\n                var element = elems[i];\r\n\r\n                if (this.readOnly) {\r\n                    element.hide();\r\n                } else {\r\n                    element.show();\r\n                }\r\n            }\r\n\r\n            var elems = this.parent.getElementsByClassName('rule-param');\r\n\r\n            for (var i = 0; i < elems.length; i++) {\r\n                var container = elems[i];\r\n                var label = Element.down(container, '.label');\r\n\r\n                if (label) {\r\n                    if (this.readOnly) {\r\n                        label.addClassName('label-disabled');\r\n                    } else {\r\n                        label.removeClassName('label-disabled');\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        initParam: function (container) {\r\n            container.rulesObject = this;\r\n            var label = Element.down(container, '.label');\r\n\r\n            if (label) {\r\n                Event.observe(label, 'click', this.showParamInputField.bind(this, container));\r\n            }\r\n\r\n            var elem = Element.down(container, '.element');\r\n\r\n            if (elem) {\r\n                var trig = elem.down('.rule-chooser-trigger');\r\n\r\n                if (trig) {\r\n                    Event.observe(trig, 'click', this.toggleChooser.bind(this, container));\r\n                }\r\n\r\n                var apply = elem.down('.rule-param-apply');\r\n\r\n                if (apply) {\r\n                    Event.observe(apply, 'click', this.hideParamInputField.bind(this, container));\r\n                } else {\r\n                    elem = elem.down('.element-value-changer');\r\n                    elem.container = container;\r\n\r\n                    if (!elem.multiple) {\r\n                        Event.observe(elem, 'change', this.hideParamInputField.bind(this, container));\r\n\r\n                        this.changeVisibilityForValueRuleParam(elem);\r\n\r\n                    }\r\n                    Event.observe(elem, 'blur', this.hideParamInputField.bind(this, container));\r\n                }\r\n            }\r\n\r\n            var remove = Element.down(container, '.rule-param-remove');\r\n\r\n            if (remove) {\r\n                Event.observe(remove, 'click', this.removeRuleEntry.bind(this, container));\r\n            }\r\n        },\r\n\r\n        showChooserElement: function (chooser) {\r\n            this.chooserSelectedItems = $H({});\r\n\r\n            if (chooser.hasClassName('no-split')) {\r\n                this.chooserSelectedItems.set(this.updateElement.value, 1);\r\n            } else {\r\n                var values = this.updateElement.value.split(','),\r\n s = '';\r\n\r\n                for (var i = 0; i < values.length; i++) {\r\n                    s = values[i].strip();\r\n\r\n                    if (s != '') {\r\n                        this.chooserSelectedItems.set(s, 1);\r\n                    }\r\n                }\r\n            }\r\n            new Ajax.Request(chooser.getAttribute('url'), {\r\n                evalScripts: true,\r\n                parameters: {\r\n                    'form_key': FORM_KEY, 'selected[]': this.chooserSelectedItems.keys()\r\n                },\r\n                onSuccess: function (transport) {\r\n                    if (this._processSuccess(transport)) {\r\n                        jQuery(chooser).html(transport.responseText);\r\n                        this.showChooserLoaded(chooser, transport);\r\n                        jQuery(chooser).trigger('contentUpdated');\r\n                    }\r\n                }.bind(this),\r\n                onFailure: this._processFailure.bind(this)\r\n            });\r\n        },\r\n\r\n        showChooserLoaded: function (chooser, transport) {\r\n            chooser.style.display = 'block';\r\n        },\r\n\r\n        showChooser: function (container, event) {\r\n            var chooser = container.up('li');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n            chooser = chooser.down('.rule-chooser');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n            this.showChooserElement(chooser);\r\n        },\r\n\r\n        hideChooser: function (container, event) {\r\n            var chooser = container.up('li');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n            chooser = chooser.down('.rule-chooser');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n            chooser.style.display = 'none';\r\n        },\r\n\r\n        toggleChooser: function (container, event) {\r\n            if (this.readOnly) {\r\n                return false;\r\n            }\r\n\r\n            var chooser = container.up('li').down('.rule-chooser');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n\r\n            if (chooser.style.display == 'block') {\r\n                chooser.style.display = 'none';\r\n                this.cleanChooser(container, event);\r\n            } else {\r\n                this.showChooserElement(chooser);\r\n            }\r\n        },\r\n\r\n        cleanChooser: function (container, event) {\r\n            var chooser = container.up('li').down('.rule-chooser');\r\n\r\n            if (!chooser) {\r\n                return;\r\n            }\r\n            chooser.innerHTML = '';\r\n        },\r\n\r\n        showParamInputField: function (container, event) {\r\n            if (this.readOnly) {\r\n                return false;\r\n            }\r\n\r\n            if (this.shownElement) {\r\n                this.hideParamInputField(this.shownElement, event);\r\n            }\r\n\r\n            Element.addClassName(container, 'rule-param-edit');\r\n            var elemContainer = Element.down(container, '.element');\r\n\r\n            var elem = Element.down(elemContainer, 'input.input-text');\r\n\r\n            jQuery(elem).trigger('contentUpdated');\r\n\r\n            if (elem) {\r\n                elem.focus();\r\n\r\n                if (elem && elem.id && elem.id.match(/__value$/)) {\r\n                    this.updateElement = elem;\r\n                }\r\n\r\n            }\r\n\r\n            var elem = Element.down(elemContainer, '.element-value-changer');\r\n\r\n            if (elem) {\r\n                elem.focus();\r\n            }\r\n\r\n            this.shownElement = container;\r\n        },\r\n\r\n        hideParamInputField: function (container, event) {\r\n            Element.removeClassName(container, 'rule-param-edit');\r\n            var label = Element.down(container, '.label'),\r\n elem;\r\n\r\n            if (!container.hasClassName('rule-param-new-child')) {\r\n                elem = Element.down(container, '.element-value-changer');\r\n\r\n                if (elem && elem.options) {\r\n                    var selectedOptions = [];\r\n\r\n                    for (var i = 0; i < elem.options.length; i++) {\r\n                        if (elem.options[i].selected) {\r\n                            selectedOptions.push(elem.options[i].text);\r\n                        }\r\n                    }\r\n\r\n                    var str = selectedOptions.join(', ');\r\n\r\n                    label.innerHTML = str != '' ? str : '...';\r\n                }\r\n\r\n                this.changeVisibilityForValueRuleParam(elem);\r\n\r\n                elem = Element.down(container, 'input.input-text');\r\n\r\n                if (elem) {\r\n                    var str = elem.value.replace(/(^\\s+|\\s+$)/g, '');\r\n\r\n                    elem.value = str;\r\n\r\n                    if (str == '') {\r\n                        str = '...';\r\n                    } else if (str.length > 30) {\r\n                        str = str.substr(0, 30) + '...';\r\n                    }\r\n                    label.innerHTML = str.escapeHTML();\r\n                }\r\n            } else {\r\n                elem = container.down('.element-value-changer');\r\n\r\n                if (elem.value) {\r\n                    this.addRuleNewChild(elem);\r\n                }\r\n                elem.value = '';\r\n            }\r\n\r\n            if (elem && elem.id && elem.id.match(/__value$/)) {\r\n                this.hideChooser(container, event);\r\n                this.updateElement = null;\r\n            }\r\n\r\n            this.shownElement = null;\r\n        },\r\n\r\n        changeVisibilityForValueRuleParam: function(elem) {\r\n            var parsedElementId = elem.id.split('__');\r\n            if (parsedElementId[2] !== 'operator') {\r\n                return false;\r\n            }\r\n\r\n            var valueElement = jQuery('#' + parsedElementId[0] + '__' + parsedElementId[1] + '__value');\r\n\r\n            if(elem.value === '<=>') {\r\n                valueElement.closest('.rule-param').hide();\r\n            } else {\r\n                valueElement.closest('.rule-param').show();\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        addRuleNewChild: function (elem) {\r\n            var parent_id = elem.id.replace(/^.*__(.*)__.*$/, '$1');\r\n            var children_ul_id = elem.id.replace(/__/g, ':').replace(/[^:]*$/, 'children').replace(/:/g, '__');\r\n            var children_ul = $(this.parent).select('#' + children_ul_id)[0];\r\n            var max_id = 0,\r\n i;\r\n            var children_inputs = Selector.findChildElements(children_ul, $A(['input.hidden']));\r\n\r\n            if (children_inputs.length) {\r\n                children_inputs.each(function (el) {\r\n                    if (el.id.match(/__type$/)) {\r\n                        i = 1 * el.id.replace(/^.*__.*?([0-9]+)__.*$/, '$1');\r\n                        max_id = i > max_id ? i : max_id;\r\n                    }\r\n                });\r\n            }\r\n            var new_id = parent_id + '--' + (max_id + 1);\r\n            var new_type = elem.value;\r\n            var new_elem = document.createElement('LI');\r\n\r\n            new_elem.className = 'rule-param-wait';\r\n            new_elem.innerHTML = jQuery.mage.__('This won\\'t take long . . .');\r\n            children_ul.insertBefore(new_elem, $(elem).up('li'));\r\n\r\n            new Ajax.Request(this.newChildUrl, {\r\n                evalScripts: true,\r\n                parameters: {\r\n                    form_key: FORM_KEY, type: new_type.replace('/', '-'), id: new_id\r\n                },\r\n                onComplete: this.onAddNewChildComplete.bind(this, new_elem),\r\n                onSuccess: function (transport) {\r\n                    if (this._processSuccess(transport)) {\r\n                        $(new_elem).update(transport.responseText);\r\n                    }\r\n                }.bind(this),\r\n                onFailure: this._processFailure.bind(this)\r\n            });\r\n        },\r\n\r\n        _processSuccess: function (transport) {\r\n            if (transport.responseText.isJSON()) {\r\n                var response = transport.responseText.evalJSON();\r\n\r\n                if (response.error) {\r\n                    alert(response.message);\r\n                }\r\n\r\n                if (response.ajaxExpired && response.ajaxRedirect) {\r\n                    setLocation(response.ajaxRedirect);\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _processFailure: function (transport) {\r\n            location.href = BASE_URL;\r\n        },\r\n\r\n        onAddNewChildComplete: function (new_elem) {\r\n            if (this.readOnly) {\r\n                return false;\r\n            }\r\n\r\n            $(new_elem).removeClassName('rule-param-wait');\r\n            var elems = new_elem.getElementsByClassName('rule-param');\r\n\r\n            for (var i = 0; i < elems.length; i++) {\r\n                this.initParam(elems[i]);\r\n            }\r\n        },\r\n\r\n        removeRuleEntry: function (container, event) {\r\n            var li = Element.up(container, 'li');\r\n\r\n            li.parentNode.removeChild(li);\r\n        },\r\n\r\n        chooserGridInit: function (grid) {\r\n            //grid.reloadParams = {'selected[]':this.chooserSelectedItems.keys()};\r\n        },\r\n\r\n        chooserGridRowInit: function (grid, row) {\r\n            if (!grid.reloadParams) {\r\n                grid.reloadParams = {\r\n                    'selected[]': this.chooserSelectedItems.keys()\r\n                };\r\n            }\r\n        },\r\n\r\n        chooserGridRowClick: function (grid, event) {\r\n            var trElement = Event.findElement(event, 'tr');\r\n            var isInput = Event.element(event).tagName == 'INPUT';\r\n\r\n            if (trElement) {\r\n                var checkbox = Element.select(trElement, 'input');\r\n\r\n                if (checkbox[0]) {\r\n                    var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;\r\n\r\n                    grid.setCheckboxChecked(checkbox[0], checked);\r\n\r\n                }\r\n            }\r\n        },\r\n\r\n        chooserGridCheckboxCheck: function (grid, element, checked) {\r\n            if (checked) {\r\n                if (!element.up('th')) {\r\n                    this.chooserSelectedItems.set(element.value, 1);\r\n                }\r\n            } else {\r\n                this.chooserSelectedItems.unset(element.value);\r\n            }\r\n            grid.reloadParams = {\r\n                'selected[]': this.chooserSelectedItems.keys()\r\n            };\r\n            this.updateElement.value = this.chooserSelectedItems.keys().join(', ');\r\n        }\r\n    };\r\n\r\n    return VarienRulesForm;\r\n});\r\n","Magento_Sales/js/bootstrap/order-create-index.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'Magento_Sales/order/create/giftmessage'\r\n]);\r\n","Magento_Sales/js/bootstrap/order-post-action.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'Magento_Sales/order/view/post-wrapper'\r\n]);\r\n","Magento_Sales/order/giftoptions_tooltip.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'prototype'\r\n], function () {\r\n    'use strict';\r\n\r\n    var GiftOptionsTooltip = Class.create();\r\n\r\n    GiftOptionsTooltip.prototype = {\r\n        _tooltipLines: [],\r\n        _tooltipWindow: null,\r\n        _tooltipWindowContent: null,\r\n        _targetLinks: [],\r\n        _eventMouseOver: null,\r\n        _eventMouseOut: null,\r\n        _styleOptions: null,\r\n        _tooltipContentLoaderFunction: null,\r\n\r\n        /**\r\n         * Initialize tooltip object\r\n         */\r\n        initialize: function () {\r\n            var options = Object.extend({\r\n                'delta_x': 30,\r\n                'delta_y': 0,\r\n                zindex: 1000\r\n            });\r\n\r\n            this._styleOptions = options;\r\n            this._eventMouseOver = this.showTooltip.bindAsEventListener(this);\r\n            this._eventMouseOut = this.hideTooltip.bindAsEventListener(this);\r\n        },\r\n\r\n        /**\r\n         * Set gift options tooltip window\r\n         *\r\n         * @param {String} windowId\r\n         * @param {String} contentId\r\n         *\r\n         * @return boolean success\r\n         */\r\n        setTooltipWindow: function (windowId, contentId) {\r\n            if (!$(windowId) || !$(contentId)) {\r\n                return false;\r\n            }\r\n            this._tooltipWindow = $(windowId);\r\n            this._tooltipWindowContent = $(contentId);\r\n            $(document.body).insert({\r\n                bottom: this._tooltipWindow\r\n            });\r\n            this.hideTooltip();\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Add tooltip to specified link\r\n         *\r\n         * @param {String} linkId\r\n         * @param {String} itemId - identifier of the item related to link\r\n         *\r\n         * @return boolean success\r\n         */\r\n        addTargetLink: function (linkId, itemId) {\r\n            if ($(linkId)) {\r\n                this._targetLinks[linkId] = [];\r\n                this._targetLinks[linkId].object = $(linkId);\r\n                this._targetLinks[linkId].itemId = itemId;\r\n                this._registerEvents(this._targetLinks[linkId].object);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Detach event listeners from target links when tooltip is destroyed\r\n         */\r\n        destroy: function () {\r\n            var linkId;\r\n\r\n            for (linkId in this._targetLinks) { //eslint-disable-line guard-for-in\r\n                Event.stopObserving(this._targetLinks[linkId].object, 'mouseover', this._eventMouseOver);\r\n                Event.stopObserving(this._targetLinks[linkId].object, 'mouseout', this._eventMouseOut);\r\n            }\r\n        },\r\n\r\n        /**\r\n         *  Register event listeners\r\n         *\r\n         *  @param {HTMLElement} element\r\n         */\r\n        _registerEvents: function (element) {\r\n            Event.observe(element, 'mouseover', this._eventMouseOver);\r\n            Event.observe(element, 'mouseout', this._eventMouseOut);\r\n        },\r\n\r\n        /**\r\n         * Move tooltip to mouse position\r\n         *\r\n         * @param {Prototype.Event} event\r\n         */\r\n        _moveTooltip: function (event) {\r\n            var mouseX, mouseY;\r\n\r\n            Event.stop(event);\r\n            mouseX = Event.pointerX(event);\r\n            mouseY = Event.pointerY(event);\r\n\r\n            this.setStyles(mouseX, mouseY);\r\n        },\r\n\r\n        /**\r\n         * Show tooltip\r\n         *\r\n         * @param {Object} event\r\n         *\r\n         * @return boolean success\r\n         */\r\n        showTooltip: function (event) {\r\n            var link, itemId, tooltipContent;\r\n\r\n            Event.stop(event);\r\n\r\n            if (this._tooltipWindow) {\r\n                link = Event.element(event);\r\n                itemId = this._targetLinks[link.id].itemId;\r\n                tooltipContent = '';\r\n\r\n                if (Object.isFunction(this._tooltipContentLoaderFunction)) {\r\n                    tooltipContent = this._tooltipContentLoaderFunction(itemId);\r\n                }\r\n\r\n                if (tooltipContent != '') { //eslint-disable-line eqeqeq\r\n                    this._updateTooltipWindowContent(tooltipContent);\r\n                    this._moveTooltip(event);\r\n                    new Element.show(this._tooltipWindow);\r\n\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Set tooltip window styles\r\n         *\r\n         * @param {Number} x\r\n         * @param {Number} y\r\n         */\r\n        setStyles: function (x, y) {\r\n            Element.setStyle(this._tooltipWindow, {\r\n                position: 'absolute',\r\n                top: y + this._styleOptions['delta_y'] + 'px',\r\n                left: x + this._styleOptions['delta_x'] + 'px',\r\n                zindex: this._styleOptions.zindex\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Hide tooltip\r\n         */\r\n        hideTooltip: function () {\r\n            if (this._tooltipWindow) {\r\n                new Element.hide(this._tooltipWindow);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set gift options tooltip content loader function\r\n         * This function should accept at least one parameter that will serve as an item ID\r\n         *\r\n         * @param {Function} loaderFunction - loader function\r\n         */\r\n        setTooltipContentLoaderFunction: function (loaderFunction) {\r\n            this._tooltipContentLoaderFunction = loaderFunction;\r\n        },\r\n\r\n        /**\r\n         * Update tooltip window content\r\n         *\r\n         * @param {String} content\r\n         */\r\n        _updateTooltipWindowContent: function (content) {\r\n            this._tooltipWindowContent.update(content);\r\n        }\r\n    };\r\n\r\n    window.giftOptionsTooltip = new GiftOptionsTooltip();\r\n});\r\n","Magento_Sales/order/create/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global AdminOrder */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Sales/order/create/scripts'\r\n], function (jQuery) {\r\n    'use strict';\r\n\r\n    var $el = jQuery('#edit_form'),\r\n        config,\r\n        baseUrl,\r\n        order,\r\n        payment;\r\n\r\n    if (!$el.length || !$el.data('order-config')) {\r\n        return;\r\n    }\r\n\r\n    config = $el.data('order-config');\r\n    baseUrl = $el.data('load-base-url');\r\n\r\n    order = new AdminOrder(config);\r\n    order.setLoadBaseUrl(baseUrl);\r\n\r\n    payment = {\r\n        switchMethod: order.switchPaymentMethod.bind(order)\r\n    };\r\n\r\n    window.order = order;\r\n    window.payment = payment;\r\n});\r\n","Magento_Sales/order/create/giftmessage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/********************* GIFT OPTIONS POPUP ***********************/\r\n/********************* GIFT OPTIONS SET ***********************/\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'mage/translate',\r\n    'mage/validation',\r\n    'prototype'\r\n], function (jQuery) {\r\n\r\n    window.giftMessagesController = {\r\n        toogleRequired: function (source, objects) {\r\n            if (!$(source).value.blank()) {\r\n                objects.each(function (item) {\r\n                    $(item).addClassName('required-entry');\r\n                    var label = findFieldLabel($(item));\r\n\r\n                    if (label) {\r\n                        var span = label.down('span');\r\n\r\n                        if (!span) {\r\n                            Element.insert(label, {\r\n                                bottom: '&nbsp;<span class=\"required\">*</span>'\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                objects.each(function (item) {\r\n                    if ($(source).formObj && $(source).formObj.validator) {\r\n                        $(source).formObj.validator.reset(item);\r\n                    }\r\n                    $(item).removeClassName('required-entry');\r\n                    var label = findFieldLabel($(item));\r\n\r\n                    if (label) {\r\n                        var span = label.down('span');\r\n\r\n                        if (span) {\r\n                            Element.remove(span);\r\n                        }\r\n                    }\r\n                    // Hide validation advices if exist\r\n                    if ($(item) && $(item).advices) {\r\n                        $(item).advices.each(function (pair) {\r\n                            if (pair.value != null) pair.value.hide();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        toogleGiftMessage: function (container) {\r\n            if (!$(container).toogleGiftMessage) {\r\n                $(container).toogleGiftMessage = true;\r\n                $(this.getFieldId(container, 'edit')).show();\r\n                $(container).down('.action-link').addClassName('open');\r\n                $(container).down('.default-text').hide();\r\n                $(container).down('.close-text').show();\r\n            } else {\r\n                $(container).toogleGiftMessage = false;\r\n                $(this.getFieldId(container, 'message')).formObj = $(this.getFieldId(container, 'form'));\r\n                var form = jQuery('#' + this.getFieldId(container, 'form'));\r\n\r\n                jQuery('#' + this.getFieldId(container, 'form')).validate({\r\n                    errorClass: 'mage-error'\r\n                });\r\n\r\n                if (!form.valid()) {\r\n                    return false;\r\n                }\r\n\r\n                new Ajax.Request($(this.getFieldId(container, 'form')).action, {\r\n                    parameters: Form.serialize($(this.getFieldId(container, 'form')), true),\r\n                    loaderArea: container,\r\n                    onComplete: function (transport) {\r\n\r\n                        $(container).down('.action-link').removeClassName('open');\r\n                        $(container).down('.default-text').show();\r\n                        $(container).down('.close-text').hide();\r\n                        $(this.getFieldId(container, 'edit')).hide();\r\n\r\n                        if (transport.responseText.match(/YES/g)) {\r\n                            $(container).down('.default-text').down('.edit').show();\r\n                            $(container).down('.default-text').down('.add').hide();\r\n                        } else {\r\n                            $(container).down('.default-text').down('.add').show();\r\n                            $(container).down('.default-text').down('.edit').hide();\r\n                        }\r\n\r\n                    }.bind(this)\r\n                });\r\n            }\r\n\r\n            return false;\r\n        },\r\n        saveGiftMessage: function (container) {\r\n            $(this.getFieldId(container, 'message')).formObj = $(this.getFieldId(container, 'form'));\r\n\r\n            var form = jQuery('#' + this.getFieldId(container, 'form'));\r\n\r\n            form.validate({\r\n                errorClass: 'mage-error'\r\n            });\r\n\r\n            if (!form.valid()) {\r\n                return;\r\n            }\r\n\r\n            new Ajax.Request($(this.getFieldId(container, 'form')).action, {\r\n                parameters: Form.serialize($(this.getFieldId(container, 'form')), true),\r\n                loaderArea: container,\r\n                onSuccess: function (response) {\r\n                    var message = '<div class=\"messages\"><div class=\"message message-success success\">' +\r\n                        response.responseText +\r\n                        '<div data-ui-id=\"messages-message-success\"></div></div></div>';\r\n\r\n                    jQuery('#messages').html(message);\r\n                    jQuery(document).scrollTop(0);\r\n                }\r\n            });\r\n        },\r\n        getFieldId: function (container, name) {\r\n            return container + '_' + name;\r\n        }\r\n    };\r\n\r\n    function findFieldLabel(field) {\r\n        var tdField = $(field).up('td');\r\n\r\n        if (tdField) {\r\n            var tdLabel = tdField.previous('td');\r\n\r\n            if (tdLabel) {\r\n                var label = tdLabel.down('label');\r\n\r\n                if (label) {\r\n                    return label;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    window.findFieldLabel = findFieldLabel;\r\n\r\n    window.GiftOptionsPopup = Class.create();\r\n    GiftOptionsPopup.prototype = {\r\n        //giftOptionsWindowMask: null,\r\n        giftOptionsWindow: null,\r\n\r\n        initialize: function () {\r\n            $$('.action-link').each(function (el) {\r\n                Event.observe(el, 'click', this.showItemGiftOptions.bind(this));\r\n            }, this);\r\n\r\n            // Move gift options popup to start of body, because soon it will contain FORM tag that can break DOM layout if within other FORM\r\n            var oldPopupContainer = $('gift_options_configure');\r\n\r\n            if (oldPopupContainer) {\r\n                oldPopupContainer.remove();\r\n            }\r\n\r\n            var newPopupContainer = $('gift_options_configure_new');\r\n\r\n            $(document.body).insert({\r\n                top: newPopupContainer\r\n            });\r\n            newPopupContainer.id = 'gift_options_configure';\r\n\r\n            // Put controls container inside a FORM tag so we can use Validator\r\n            var form = new Element('form', {\r\n                action: '#', id: 'gift_options_configuration_form', method: 'post'\r\n            });\r\n            var formContents = $('gift_options_form_contents');\r\n\r\n            if (formContents) {\r\n                formContents.parentNode.appendChild(form);\r\n                form.appendChild(formContents);\r\n            }\r\n\r\n            this.giftOptionsWindow = $('gift_options_configure');\r\n\r\n            jQuery(this.giftOptionsWindow).dialog({\r\n                autoOpen:   false,\r\n                modal:      true,\r\n                resizable:  false,\r\n                dialogClass: 'gift-options-popup',\r\n                minWidth:   500,\r\n                width:      '75%',\r\n                position: {\r\n                    my: 'left+12.5% top',\r\n                    at: 'center top',\r\n                    of: 'body'\r\n                },\r\n                open: function () {\r\n                    jQuery(this).closest('.ui-dialog').addClass('ui-dialog-active');\r\n\r\n                    var topMargin = jQuery(this).closest('.ui-dialog').children('.ui-dialog-titlebar').outerHeight() + 30;\r\n\r\n                    jQuery(this).closest('.ui-dialog').css('margin-top', topMargin);\r\n                },\r\n                close: function () {\r\n                    jQuery(this).closest('.ui-dialog').removeClass('ui-dialog-active');\r\n                }\r\n            });\r\n        },\r\n\r\n        showItemGiftOptions: function (event) {\r\n            var element = Event.element(event).id;\r\n            var itemId = element.sub('gift_options_link_', '');\r\n\r\n            jQuery(this.giftOptionsWindow).dialog('open');\r\n\r\n            this.setTitle(itemId);\r\n\r\n            Event.observe($('gift_options_cancel_button'), 'click', this.onCloseButton.bind(this));\r\n            Event.observe($('gift_options_ok_button'), 'click', this.onOkButton.bind(this));\r\n            Event.stop(event);\r\n        },\r\n\r\n        setTitle: function (itemId) {\r\n            var productTitleElement = $('order_item_' + itemId + '_title');\r\n            var productTitle = '';\r\n\r\n            if (productTitleElement) {\r\n                productTitle = productTitleElement.innerHTML;\r\n            }\r\n            jQuery(this.giftOptionsWindow).dialog({\r\n                title: jQuery.mage.__('Gift Options for ') + productTitle\r\n            });\r\n        },\r\n\r\n        onOkButton: function () {\r\n            var giftOptionsForm = jQuery('#gift_options_configuration_form');\r\n\r\n            if (!giftOptionsForm.validate({\r\n                errorClass: 'mage-error'\r\n            }).valid()) {\r\n                return false;\r\n            }\r\n\r\n            if (jQuery.isFunction(giftOptionsForm[0].reset)) {\r\n                giftOptionsForm[0].reset();\r\n            }\r\n            this.closeWindow();\r\n\r\n            return true;\r\n        },\r\n\r\n        onCloseButton: function () {\r\n            this.closeWindow();\r\n        },\r\n\r\n        closeWindow: function () {\r\n            jQuery(this.giftOptionsWindow).dialog('close');\r\n        }\r\n    };\r\n\r\n    window.GiftMessageSet = Class.create();\r\n\r\n    GiftMessageSet.prototype = {\r\n        destPrefix: 'current_item_giftmessage_',\r\n        sourcePrefix: 'giftmessage_',\r\n        fields: ['sender', 'recipient', 'message'],\r\n        isObserved: false,\r\n        callback: null,\r\n\r\n        initialize: function () {\r\n            $$('.action-link').each(function (el) {\r\n                Event.observe(el, 'click', this.setData.bind(this));\r\n            }, this);\r\n        },\r\n\r\n        setData: function (event) {\r\n            var element = Event.element(event).id;\r\n\r\n            this.id = element.sub('gift_options_link_', '');\r\n\r\n            if ($('gift-message-form-data-' + this.id)) {\r\n                this.fields.each(function (el) {\r\n                    if ($(this.sourcePrefix + this.id + '_' + el) && $(this.destPrefix + el)) {\r\n                        $(this.destPrefix + el).value = $(this.sourcePrefix + this.id + '_' + el).value;\r\n                    }\r\n                }, this);\r\n                $('gift_options_giftmessage').show();\r\n            } else if ($('gift_options_giftmessage')) {\r\n                $('gift_options_giftmessage').hide();\r\n            }\r\n\r\n            if (!this.isObserved) {\r\n                Event.observe('gift_options_ok_button', 'click', this.saveData.bind(this));\r\n                this.isObserved = true;\r\n            }\r\n        },\r\n\r\n        prepareSaveData: function () {\r\n            var hash = $H();\r\n\r\n            $$('div[id^=gift_options_data_]').each(function (el) {\r\n                var fields = el.select('input', 'select', 'textarea');\r\n                var data = Form.serializeElements(fields, true);\r\n\r\n                hash.update(data);\r\n            });\r\n\r\n            return hash;\r\n        },\r\n\r\n        setSaveCallback: function (callback) {\r\n            if (typeof callback == 'function') {\r\n                this.callback = callback;\r\n            }\r\n        },\r\n\r\n        saveData: function (event) {\r\n            this.fields.each(function (el) {\r\n                if ($(this.sourcePrefix + this.id + '_' + el) && $(this.destPrefix + el)) {\r\n                    $(this.sourcePrefix + this.id + '_' + el).value = $(this.destPrefix + el).value;\r\n                }\r\n            }, this);\r\n\r\n            if ($(this.sourcePrefix + this.id + '_form')) {\r\n                $(this.sourcePrefix + this.id + '_form').request();\r\n            } else if (typeof order != 'undefined') {\r\n                var data = this.prepareSaveData();\r\n                var self = this;\r\n\r\n                jQuery.when(order.loadArea(['items'], true, data.toObject())).done(function () {\r\n                    if (self.callback !== null) {\r\n                        self.callback();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n});\r\n","Magento_Sales/order/create/scripts.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/template',\r\n    'text!Magento_Sales/templates/order/create/shipping/reload.html',\r\n    'text!Magento_Sales/templates/order/create/payment/reload.html',\r\n    'mage/translate',\r\n    'prototype',\r\n    'Magento_Catalog/catalog/product/composite/configure',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function (jQuery, confirm, alert, template, shippingTemplate, paymentTemplate) {\r\n\r\n    window.AdminOrder = new Class.create();\r\n\r\n    AdminOrder.prototype = {\r\n        initialize : function(data){\r\n            if(!data) data = {};\r\n            this.loadBaseUrl    = false;\r\n            this.customerId     = data.customer_id ? data.customer_id : false;\r\n            this.storeId        = data.store_id ? data.store_id : false;\r\n            this.quoteId        = data['quote_id'] ? data['quote_id'] : false;\r\n            this.currencyId     = false;\r\n            this.currencySymbol = data.currency_symbol ? data.currency_symbol : '';\r\n            this.addresses      = data.addresses ? data.addresses : $H({});\r\n            this.shippingAsBilling = data.shippingAsBilling ? data.shippingAsBilling : false;\r\n            this.gridProducts   = $H({});\r\n            this.gridProductsGift = $H({});\r\n            this.billingAddressContainer = '';\r\n            this.shippingAddressContainer = '';\r\n            this.isShippingMethodReseted = data.shipping_method_reseted ? data.shipping_method_reseted : false;\r\n            this.overlayData = $H({});\r\n            this.giftMessageDataChanged = false;\r\n            this.productConfigureAddFields = {};\r\n            this.productPriceBase = {};\r\n            this.collectElementsValue = true;\r\n            this.isOnlyVirtualProduct = false;\r\n            this.excludedPaymentMethods = [];\r\n            this.summarizePrice = true;\r\n            this.selectAddressEvent = false;\r\n            this.shippingTemplate = template(shippingTemplate, {\r\n                data: {\r\n                    title: jQuery.mage.__('Shipping Method'),\r\n                    linkText: jQuery.mage.__('Get shipping methods and rates')\r\n                }\r\n            });\r\n            this.paymentTemplate = template(paymentTemplate, {\r\n                data: {\r\n                    title: jQuery.mage.__('Payment Method'),\r\n                    linkText: jQuery.mage.__('Get available payment methods')\r\n                }\r\n            });\r\n\r\n            jQuery.async('#order-items', (function(){\r\n                this.dataArea = new OrderFormArea('data', $(this.getAreaId('data')), this);\r\n                this.itemsArea = Object.extend(new OrderFormArea('items', $(this.getAreaId('items')), this), {\r\n                    addControlButton: function(button){\r\n                        var controlButtonArea = $(this.node).select('.actions')[0];\r\n                        if (typeof controlButtonArea != 'undefined') {\r\n                            var buttons = controlButtonArea.childElements();\r\n                            for (var i = 0; i < buttons.length; i++) {\r\n                                if (buttons[i].innerHTML.include(button.getLabel())) {\r\n                                    return;\r\n                                }\r\n                            }\r\n                            button.insertIn(controlButtonArea, 'top');\r\n                        }\r\n                    }\r\n                });\r\n\r\n                var searchButtonId = 'add_products',\r\n                    searchButton = new ControlButton(jQuery.mage.__('Add Products'), searchButtonId),\r\n                    searchAreaId = this.getAreaId('search');\r\n                searchButton.onClick = function() {\r\n                    $(searchAreaId).show();\r\n                    var el = this;\r\n                    window.setTimeout(function () {\r\n                        el.remove();\r\n                    }, 10);\r\n                };\r\n\r\n                if (jQuery('#' + this.getAreaId('items')).is(':visible')) {\r\n                    this.dataArea.onLoad = this.dataArea.onLoad.wrap(function(proceed) {\r\n                        proceed();\r\n                        this._parent.itemsArea.setNode($(this._parent.getAreaId('items')));\r\n                        this._parent.itemsArea.onLoad();\r\n                    });\r\n\r\n                    this.itemsArea.onLoad = this.itemsArea.onLoad.wrap(function(proceed) {\r\n                        proceed();\r\n                        if ($(searchAreaId) && !$(searchAreaId).visible() && !$(searchButtonId)) {\r\n                            this.addControlButton(searchButton);\r\n                        }\r\n                    });\r\n                    this.areasLoaded();\r\n                    this.itemsArea.onLoad();\r\n                }\r\n            }).bind(this));\r\n\r\n            jQuery('#edit_form')\r\n                .on('submitOrder', function(){\r\n                    jQuery(this).trigger('realOrder');\r\n                })\r\n                .on('realOrder', this._realSubmit.bind(this));\r\n        },\r\n\r\n        areasLoaded: function(){\r\n        },\r\n\r\n        itemsLoaded: function(){\r\n        },\r\n\r\n        dataLoaded: function(){\r\n            this.dataShow();\r\n        },\r\n\r\n        setLoadBaseUrl : function(url){\r\n            this.loadBaseUrl = url;\r\n        },\r\n\r\n        setAddresses : function(addresses){\r\n            this.addresses = addresses;\r\n        },\r\n\r\n        addExcludedPaymentMethod : function(method){\r\n            this.excludedPaymentMethods.push(method);\r\n        },\r\n\r\n        setCustomerId : function(id){\r\n            this.customerId = id;\r\n            this.loadArea('header', true);\r\n            $(this.getAreaId('header')).callback = 'setCustomerAfter';\r\n            $('back_order_top_button').hide();\r\n            $('reset_order_top_button').show();\r\n        },\r\n\r\n        setCustomerAfter : function () {\r\n            this.customerSelectorHide();\r\n            if (this.storeId) {\r\n                $(this.getAreaId('data')).callback = 'dataLoaded';\r\n                this.loadArea(['data'], true);\r\n            }\r\n            else {\r\n                this.storeSelectorShow();\r\n            }\r\n        },\r\n\r\n        setStoreId : function(id){\r\n            this.storeId = id;\r\n            this.storeSelectorHide();\r\n            this.sidebarShow();\r\n            //this.loadArea(['header', 'sidebar','data'], true);\r\n            this.dataShow();\r\n            this.loadArea(['header', 'data'], true);\r\n        },\r\n\r\n        setCurrencyId : function(id){\r\n            this.currencyId = id;\r\n            //this.loadArea(['sidebar', 'data'], true);\r\n            this.loadArea(['data'], true);\r\n        },\r\n\r\n        setCurrencySymbol : function(symbol){\r\n            this.currencySymbol = symbol;\r\n        },\r\n\r\n        selectAddress : function(el, container){\r\n\r\n            id = el.value;\r\n            if (id.length == 0) {\r\n                id = '0';\r\n            }\r\n\r\n            this.selectAddressEvent = true;\r\n            if (this.addresses[id]) {\r\n                this.fillAddressFields(container, this.addresses[id]);\r\n            } else {\r\n                this.fillAddressFields(container, {});\r\n            }\r\n            this.selectAddressEvent = false;\r\n\r\n            var data = this.serializeData(container);\r\n            data[el.name] = id;\r\n\r\n            this.resetPaymentMethod();\r\n            if (this.isShippingField(container) && !this.isShippingMethodReseted) {\r\n                this.resetShippingMethod(data);\r\n            } else{\r\n                this.saveData(data);\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Checks if the field belongs to the shipping address.\r\n         *\r\n         * @param {String} fieldId\r\n         * @return {Boolean}\r\n         */\r\n        isShippingField: function (fieldId) {\r\n            if (this.shippingAsBilling) {\r\n                return fieldId.include('billing');\r\n            }\r\n\r\n            return fieldId.include('shipping');\r\n        },\r\n\r\n        /**\r\n         * Checks if the field belongs to the billing address.\r\n         *\r\n         * @param {String} fieldId\r\n         * @return {Boolean}\r\n         */\r\n        isBillingField: function (fieldId) {\r\n            return fieldId.include('billing');\r\n        },\r\n\r\n        /**\r\n         * Binds events on container form fields.\r\n         *\r\n         * @param {String} container\r\n         */\r\n        bindAddressFields: function (container) {\r\n            var fields = $(container).select('input', 'select', 'textarea'),\r\n                i;\r\n\r\n            for (i = 0; i < fields.length; i++) {\r\n                jQuery(fields[i]).change(this.changeAddressField.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggers on each form's element changes.\r\n         *\r\n         * @param {Event} event\r\n         */\r\n        changeAddressField: function (event) {\r\n            var field = Event.element(event),\r\n                re = /[^\\[]*\\[([^\\]]*)_address\\]\\[([^\\]]*)\\](\\[(\\d)\\])?/,\r\n                matchRes = field.name.match(re),\r\n                type,\r\n                name,\r\n                data,\r\n                resetShipping = false;\r\n\r\n            if (!matchRes) {\r\n                return;\r\n            }\r\n\r\n            type = matchRes[1];\r\n            name = matchRes[2];\r\n\r\n            if (this.isBillingField(field.id)) {\r\n                data = this.serializeData(this.billingAddressContainer);\r\n            } else {\r\n                data = this.serializeData(this.shippingAddressContainer);\r\n            }\r\n            data = data.toObject();\r\n\r\n            if (type === 'billing' && this.shippingAsBilling) {\r\n                this.syncAddressField(this.shippingAddressContainer, field.name, field);\r\n                resetShipping = true;\r\n            }\r\n\r\n            if (type === 'shipping' && !this.shippingAsBilling) {\r\n                resetShipping = true;\r\n            }\r\n\r\n            if (resetShipping) {\r\n                data['reset_shipping'] = true;\r\n            }\r\n\r\n            data['order[' + type + '_address][customer_address_id]'] = null;\r\n            data['shipping_as_billing'] = +this.shippingAsBilling;\r\n\r\n            if (name === 'customer_address_id') {\r\n                data['order[' + type + '_address][customer_address_id]'] =\r\n                    $('order-' + type + '_address_customer_address_id').value;\r\n            }\r\n\r\n            if (name === 'country_id' && this.selectAddressEvent === false) {\r\n                $('order-' + type + '_address_customer_address_id').value = '';\r\n            }\r\n\r\n            this.resetPaymentMethod();\r\n\r\n            if (data['reset_shipping']) {\r\n                this.resetShippingMethod();\r\n            } else {\r\n                this.saveData(data);\r\n\r\n                if (name === 'country_id' || name === 'customer_address_id') {\r\n                    this.loadArea(['shipping_method', 'billing_method', 'totals', 'items'], true, data);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set address container form field value.\r\n         *\r\n         * @param {String} container - container ID\r\n         * @param {String} fieldName - form field name\r\n         * @param {*} fieldValue - form field value\r\n         */\r\n        syncAddressField: function (container, fieldName, fieldValue) {\r\n            var syncName;\r\n\r\n            if (this.isBillingField(fieldName)) {\r\n                syncName = fieldName.replace('billing', 'shipping');\r\n            }\r\n\r\n            $(container).select('[name=\"' + syncName + '\"]').each(function (element) {\r\n                if (~['input', 'textarea', 'select'].indexOf(element.tagName.toLowerCase())) {\r\n                    if (element.type === \"checkbox\") {\r\n                        element.checked = fieldValue.checked;\r\n                    } else {\r\n                        element.value = fieldValue.value;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        fillAddressFields: function(container, data){\r\n            var regionIdElem = false;\r\n            var regionIdElemValue = false;\r\n\r\n            var fields = $(container).select('input', 'select', 'textarea');\r\n            var re = /[^\\[]*\\[[^\\]]*\\]\\[([^\\]]*)\\](\\[(\\d)\\])?/;\r\n            for(var i=0;i<fields.length;i++){\r\n                // skip input type file @Security error code: 1000\r\n                if (fields[i].tagName.toLowerCase() == 'input' && fields[i].type.toLowerCase() == 'file') {\r\n                    continue;\r\n                }\r\n                var matchRes = fields[i].name.match(re);\r\n                if (matchRes === null) {\r\n                    continue;\r\n                }\r\n                var name = matchRes[1];\r\n                var index = matchRes[3];\r\n\r\n                if (index){\r\n                    // multiply line\r\n                    if (data[name]){\r\n                        var values = data[name].split(\"\\n\");\r\n                        fields[i].value = values[index] ? values[index] : '';\r\n                    } else {\r\n                        fields[i].value = '';\r\n                    }\r\n                } else if (fields[i].tagName.toLowerCase() == 'select' && fields[i].multiple) {\r\n                    // multiselect\r\n                    if (data[name]) {\r\n                        values = [''];\r\n                        if (Object.isString(data[name])) {\r\n                            values = data[name].split(',');\r\n                        } else if (Object.isArray(data[name])) {\r\n                            values = data[name];\r\n                        }\r\n                        fields[i].setValue(values);\r\n                    }\r\n                } else {\r\n                    fields[i].setValue(data[name] ? data[name] : '');\r\n                }\r\n\r\n                if (fields[i].changeUpdater) {\r\n                    fields[i].changeUpdater();\r\n                }\r\n\r\n                if (name == 'region' && data['region_id'] && !data['region']){\r\n                    fields[i].value = data['region_id'];\r\n                }\r\n\r\n                jQuery(fields[i]).trigger('change');\r\n            }\r\n        },\r\n\r\n        disableShippingAddress : function(flag) {\r\n            this.shippingAsBilling = flag;\r\n            if ($('order-shipping_address_customer_address_id')) {\r\n                $('order-shipping_address_customer_address_id').disabled = flag;\r\n            }\r\n            if ($(this.shippingAddressContainer)) {\r\n                var dataFields = $(this.shippingAddressContainer).select('input', 'select', 'textarea');\r\n                for (var i = 0; i < dataFields.length; i++) {\r\n                    dataFields[i].disabled = flag;\r\n\r\n                    if(this.isOnlyVirtualProduct) {\r\n                        dataFields[i].setValue('');\r\n                    }\r\n                }\r\n                var buttons = $(this.shippingAddressContainer).select('button');\r\n                // Add corresponding class to buttons while disabling them\r\n                for (i = 0; i < buttons.length; i++) {\r\n                    buttons[i].disabled = flag;\r\n                    if (flag) {\r\n                        buttons[i].addClassName('disabled');\r\n                    } else {\r\n                        buttons[i].removeClassName('disabled');\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Equals shipping and billing addresses.\r\n         *\r\n         * @param {Boolean} flag\r\n         */\r\n        setShippingAsBilling: function (flag) {\r\n            var data,\r\n                areasToLoad = ['billing_method', 'shipping_address', 'shipping_method', 'totals', 'giftmessage'];\r\n\r\n            this.disableShippingAddress(flag);\r\n            data = this.serializeData(flag ? this.billingAddressContainer : this.shippingAddressContainer);\r\n            data = data.toObject();\r\n            data['shipping_as_billing'] = flag ? 1 : 0;\r\n            data['reset_shipping'] = 1;\r\n            this.loadArea(areasToLoad, true, data);\r\n        },\r\n\r\n        /**\r\n         * Replace shipping method area.\r\n         */\r\n        resetShippingMethod: function () {\r\n            if (!this.isOnlyVirtualProduct) {\r\n                $(this.getAreaId('shipping_method')).update(this.shippingTemplate);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Replace payment method area.\r\n         */\r\n        resetPaymentMethod: function () {\r\n            $(this.getAreaId('billing_method')).update(this.paymentTemplate);\r\n        },\r\n\r\n        /**\r\n         * Loads shipping options according to address data.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        loadShippingRates: function () {\r\n            var addressContainer = this.shippingAsBilling ?\r\n                'billingAddressContainer' :\r\n                'shippingAddressContainer',\r\n                data = this.serializeData(this[addressContainer]).toObject();\r\n\r\n            data['collect_shipping_rates'] = 1;\r\n            this.isShippingMethodReseted = false;\r\n            this.loadArea(['shipping_method', 'totals'], true, data);\r\n\r\n            return false;\r\n        },\r\n\r\n        setShippingMethod: function(method) {\r\n            var data = {};\r\n\r\n            data['order[shipping_method]'] = method;\r\n            this.loadArea([\r\n                'shipping_method',\r\n                'totals',\r\n                'billing_method'\r\n            ], true, data);\r\n        },\r\n\r\n        /**\r\n         * Updates available payment\r\n         * methods list according to order data.\r\n         *\r\n         * @return boolean\r\n         */\r\n        loadPaymentMethods: function() {\r\n            var data = this.serializeData(this.billingAddressContainer).toObject();\r\n\r\n            this.loadArea(['billing_method','totals'], true, data);\r\n\r\n            return false;\r\n        },\r\n\r\n        switchPaymentMethod: function(method){\r\n            jQuery('#edit_form')\r\n                .off('submitOrder')\r\n                .on('submitOrder', function(){\r\n                    jQuery(this).trigger('realOrder');\r\n                });\r\n            jQuery('#edit_form').trigger('changePaymentMethod', [method]);\r\n            this.setPaymentMethod(method);\r\n            var data = {};\r\n            data['order[payment_method]'] = method;\r\n            this.loadArea(['card_validation'], true, data);\r\n        },\r\n\r\n        setPaymentMethod : function(method){\r\n            if (this.paymentMethod && $('payment_form_'+this.paymentMethod)) {\r\n                var form = 'payment_form_'+this.paymentMethod;\r\n                [form + '_before', form, form + '_after'].each(function(el) {\r\n                    var block = $(el);\r\n                    if (block) {\r\n                        block.hide();\r\n                        block.select('input', 'select', 'textarea').each(function(field) {\r\n                            field.disabled = true;\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n            if(!this.paymentMethod || method){\r\n                $('order-billing_method_form').select('input', 'select', 'textarea').each(function(elem){\r\n                    if(elem.type != 'radio') elem.disabled = true;\r\n                })\r\n            }\r\n\r\n            if ($('payment_form_'+method)){\r\n                jQuery('#' + this.getAreaId('billing_method')).trigger('contentUpdated');\r\n                this.paymentMethod = method;\r\n                var form = 'payment_form_'+method;\r\n                [form + '_before', form, form + '_after'].each(function(el) {\r\n                    var block = $(el);\r\n                    if (block) {\r\n                        block.show();\r\n                        block.select('input', 'select', 'textarea').each(function(field) {\r\n                            field.disabled = false;\r\n                            if (!el.include('_before') && !el.include('_after') && !field.bindChange) {\r\n                                field.bindChange = true;\r\n                                field.paymentContainer = form;\r\n                                field.method = method;\r\n                                field.observe('change', this.changePaymentData.bind(this))\r\n                            }\r\n                        },this);\r\n                    }\r\n                },this);\r\n            }\r\n        },\r\n\r\n        changePaymentData : function(event){\r\n            var elem = Event.element(event);\r\n            if(elem && elem.method){\r\n                var data = this.getPaymentData(elem.method);\r\n                if (data) {\r\n                    this.loadArea(['card_validation'], true, data);\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n        },\r\n\r\n        getPaymentData : function(currentMethod){\r\n            if (typeof(currentMethod) == 'undefined') {\r\n                if (this.paymentMethod) {\r\n                    currentMethod = this.paymentMethod;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            if (this.isPaymentValidationAvailable() == false) {\r\n                return false;\r\n            }\r\n            var data = {};\r\n            var fields = $('payment_form_' + currentMethod).select('input', 'select');\r\n            for(var i=0;i<fields.length;i++){\r\n                data[fields[i].name] = fields[i].getValue();\r\n            }\r\n            if ((typeof data['payment[cc_type]']) != 'undefined' && (!data['payment[cc_type]'] || !data['payment[cc_number]'])) {\r\n                return false;\r\n            }\r\n            return data;\r\n        },\r\n\r\n        applyCoupon : function(code){\r\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true, {'order[coupon][code]':code, reset_shipping: 0});\r\n            this.orderItemChanged = false;\r\n            jQuery('html, body').animate({\r\n                scrollTop: 0\r\n            });\r\n        },\r\n\r\n        addProduct : function(id){\r\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true, {add_product:id, reset_shipping: true});\r\n        },\r\n\r\n        removeQuoteItem : function(id){\r\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true,\r\n                {remove_item:id, from:'quote',reset_shipping: true});\r\n        },\r\n\r\n        moveQuoteItem : function(id, to){\r\n            this.loadArea(['sidebar_'+to, 'items', 'shipping_method', 'totals', 'billing_method'], this.getAreaId('items'),\r\n                {move_item:id, to:to, reset_shipping: true});\r\n        },\r\n\r\n        productGridShow : function(buttonElement){\r\n            this.productGridShowButton = buttonElement;\r\n            Element.hide(buttonElement);\r\n            this.showArea('search');\r\n        },\r\n\r\n        productGridRowInit : function(grid, row){\r\n            var checkbox = $(row).select('.checkbox')[0];\r\n            var inputs = $(row).select('.input-text');\r\n            if (checkbox && inputs.length > 0) {\r\n                checkbox.inputElements = inputs;\r\n                for (var i = 0; i < inputs.length; i++) {\r\n                    var input = inputs[i];\r\n                    input.checkboxElement = checkbox;\r\n\r\n                    var product = this.gridProducts.get(checkbox.value);\r\n                    if (product) {\r\n                        var defaultValue = product[input.name];\r\n                        if (defaultValue) {\r\n                            if (input.name == 'giftmessage') {\r\n                                input.checked = true;\r\n                            } else {\r\n                                input.value = defaultValue;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    input.disabled = !checkbox.checked || input.hasClassName('input-inactive');\r\n\r\n                    Event.observe(input,'keyup', this.productGridRowInputChange.bind(this));\r\n                    Event.observe(input,'change',this.productGridRowInputChange.bind(this));\r\n                }\r\n            }\r\n        },\r\n\r\n        productGridRowInputChange : function(event){\r\n            var element = Event.element(event);\r\n            if (element && element.checkboxElement && element.checkboxElement.checked){\r\n                if (element.name!='giftmessage' || element.checked) {\r\n                    this.gridProducts.get(element.checkboxElement.value)[element.name] = element.value;\r\n                } else if (element.name=='giftmessage' && this.gridProducts.get(element.checkboxElement.value)[element.name]) {\r\n                    delete(this.gridProducts.get(element.checkboxElement.value)[element.name]);\r\n                }\r\n            }\r\n        },\r\n\r\n        productGridRowClick : function(grid, event){\r\n            var trElement = Event.findElement(event, 'tr');\r\n            var qtyElement = trElement.select('input[name=\"qty\"]')[0];\r\n            var eventElement = Event.element(event);\r\n            var isInputCheckbox = eventElement.tagName == 'INPUT' && eventElement.type == 'checkbox';\r\n            var isInputQty = eventElement.tagName == 'INPUT' && eventElement.name == 'qty';\r\n            if (trElement && !isInputQty) {\r\n                var checkbox = Element.select(trElement, 'input[type=\"checkbox\"]')[0];\r\n                var confLink = Element.select(trElement, 'a')[0];\r\n                var priceColl = Element.select(trElement, '.price')[0];\r\n                if (checkbox) {\r\n                    // processing non composite product\r\n                    if (confLink.readAttribute('disabled')) {\r\n                        var checked = isInputCheckbox ? checkbox.checked : !checkbox.checked;\r\n                        grid.setCheckboxChecked(checkbox, checked);\r\n                        // processing composite product\r\n                    } else if (isInputCheckbox && !checkbox.checked) {\r\n                        grid.setCheckboxChecked(checkbox, false);\r\n                        // processing composite product\r\n                    } else if (!isInputCheckbox || (isInputCheckbox && checkbox.checked)) {\r\n                        var listType = confLink.readAttribute('list_type');\r\n                        var productId = confLink.readAttribute('product_id');\r\n                        if (typeof this.productPriceBase[productId] == 'undefined') {\r\n                            var priceBase = priceColl.innerHTML.match(/.*?([\\d,]+\\.?\\d*)/);\r\n                            if (!priceBase) {\r\n                                this.productPriceBase[productId] = 0;\r\n                            } else {\r\n                                this.productPriceBase[productId] = parseFloat(priceBase[1].replace(/,/g,''));\r\n                            }\r\n                        }\r\n                        productConfigure.setConfirmCallback(listType, function() {\r\n                            // sync qty of popup and qty of grid\r\n                            var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\r\n                            if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\r\n                                qtyElement.value = confirmedCurrentQty.value;\r\n                            }\r\n                            // calc and set product price\r\n                            var productPrice = this._calcProductPrice();\r\n                            if (this._isSummarizePrice()) {\r\n                                productPrice += this.productPriceBase[productId];\r\n                            }\r\n                            productPrice = parseFloat(Math.round(productPrice + \"e+2\") + \"e-2\");\r\n                            priceColl.innerHTML = this.currencySymbol + productPrice.toFixed(2);\r\n                            // and set checkbox checked\r\n                            grid.setCheckboxChecked(checkbox, true);\r\n                        }.bind(this));\r\n                        productConfigure.setCancelCallback(listType, function() {\r\n                            if (!$(productConfigure.confirmedCurrentId) || !$(productConfigure.confirmedCurrentId).innerHTML) {\r\n                                grid.setCheckboxChecked(checkbox, false);\r\n                            }\r\n                        });\r\n                        productConfigure.setShowWindowCallback(listType, function() {\r\n                            // sync qty of grid and qty of popup\r\n                            var formCurrentQty = productConfigure.getCurrentFormQtyElement();\r\n                            if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\r\n                                formCurrentQty.value = qtyElement.value;\r\n                            }\r\n                        }.bind(this));\r\n                        productConfigure.showItemConfiguration(listType, productId);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Is need to summarize price\r\n         */\r\n        _isSummarizePrice: function(elm) {\r\n            if (elm && elm.hasAttribute('summarizePrice')) {\r\n                this.summarizePrice = parseInt(elm.readAttribute('summarizePrice'));\r\n            }\r\n            return this.summarizePrice;\r\n        },\r\n        /**\r\n         * Calc product price through its options\r\n         */\r\n        _calcProductPrice: function () {\r\n            var productPrice = 0;\r\n            var getPriceFields = function (elms) {\r\n                var productPrice = 0;\r\n                var getPrice = function (elm) {\r\n                    var optQty = 1;\r\n                    if (elm.hasAttribute('qtyId')) {\r\n                        if (!$(elm.getAttribute('qtyId')).value) {\r\n                            return 0;\r\n                        } else {\r\n                            optQty = parseFloat($(elm.getAttribute('qtyId')).value);\r\n                        }\r\n                    }\r\n                    if (elm.hasAttribute('price') && !elm.disabled) {\r\n                        return parseFloat(elm.readAttribute('price')) * optQty;\r\n                    }\r\n                    return 0;\r\n                };\r\n                for(var i = 0; i < elms.length; i++) {\r\n                    if (elms[i].type == 'select-one' || elms[i].type == 'select-multiple') {\r\n                        for(var ii = 0; ii < elms[i].options.length; ii++) {\r\n                            if (elms[i].options[ii].selected) {\r\n                                if (this._isSummarizePrice(elms[i].options[ii])) {\r\n                                    productPrice += getPrice(elms[i].options[ii]);\r\n                                } else {\r\n                                    productPrice = getPrice(elms[i].options[ii]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (((elms[i].type == 'checkbox' || elms[i].type == 'radio') && elms[i].checked)\r\n                        || ((elms[i].type == 'file' || elms[i].type == 'text' || elms[i].type == 'textarea' || elms[i].type == 'hidden')\r\n                            && Form.Element.getValue(elms[i]))\r\n                    ) {\r\n                        if (this._isSummarizePrice(elms[i])) {\r\n                            productPrice += getPrice(elms[i]);\r\n                        } else {\r\n                            productPrice = getPrice(elms[i]);\r\n                        }\r\n                    }\r\n                }\r\n                return productPrice;\r\n            }.bind(this);\r\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('input'));\r\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('select'));\r\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('textarea'));\r\n            return productPrice;\r\n        },\r\n\r\n        productGridCheckboxCheck : function(grid, element, checked){\r\n            if (checked) {\r\n                if(element.inputElements) {\r\n                    this.gridProducts.set(element.value, {});\r\n                    var product = this.gridProducts.get(element.value);\r\n                    for (var i = 0; i < element.inputElements.length; i++) {\r\n                        var input = element.inputElements[i];\r\n                        if (!input.hasClassName('input-inactive')) {\r\n                            input.disabled = false;\r\n                            if (input.name == 'qty' && !input.value) {\r\n                                input.value = 1;\r\n                            }\r\n                        }\r\n\r\n                        if (input.checked || input.name != 'giftmessage') {\r\n                            product[input.name] = input.value;\r\n                        } else if (product[input.name]) {\r\n                            delete(product[input.name]);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if(element.inputElements){\r\n                    for(var i = 0; i < element.inputElements.length; i++) {\r\n                        element.inputElements[i].disabled = true;\r\n                    }\r\n                }\r\n                this.gridProducts.unset(element.value);\r\n            }\r\n            grid.reloadParams = {'products[]':this.gridProducts.keys()};\r\n        },\r\n\r\n        productGridFilterKeyPress: function (grid, event) {\r\n            var returnKey = parseInt(Event.KEY_RETURN || 13, 10);\r\n\r\n            if (event.keyCode === returnKey) {\r\n                if (typeof event.stopPropagation === 'function') {\r\n                    event.stopPropagation();\r\n                }\r\n\r\n                if (typeof event.preventDefault === 'function') {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Submit configured products to quote\r\n         */\r\n        productGridAddSelected : function(){\r\n            if(this.productGridShowButton) Element.show(this.productGridShowButton);\r\n            var area = ['search', 'items', 'shipping_method', 'totals', 'giftmessage','billing_method'];\r\n            // prepare additional fields and filtered items of products\r\n            var fieldsPrepare = {};\r\n            var itemsFilter = [];\r\n            var products = this.gridProducts.toObject();\r\n            for (var productId in products) {\r\n                itemsFilter.push(productId);\r\n                var paramKey = 'item['+productId+']';\r\n                for (var productParamKey in products[productId]) {\r\n                    paramKey += '['+productParamKey+']';\r\n                    fieldsPrepare[paramKey] = products[productId][productParamKey];\r\n                }\r\n            }\r\n            this.productConfigureSubmit('product_to_add', area, fieldsPrepare, itemsFilter);\r\n            productConfigure.clean('quote_items');\r\n            this.hideArea('search');\r\n            this.gridProducts = $H({});\r\n        },\r\n\r\n        selectCustomer : function(grid, event){\r\n            var element = Event.findElement(event, 'tr');\r\n            if (element.title){\r\n                this.setCustomerId(element.title);\r\n            }\r\n        },\r\n\r\n        customerSelectorHide : function(){\r\n            this.hideArea('customer-selector');\r\n        },\r\n\r\n        customerSelectorShow : function(){\r\n            this.showArea('customer-selector');\r\n        },\r\n\r\n        storeSelectorHide : function(){\r\n            this.hideArea('store-selector');\r\n        },\r\n\r\n        storeSelectorShow : function(){\r\n            this.showArea('store-selector');\r\n        },\r\n\r\n        dataHide : function(){\r\n            this.hideArea('data');\r\n        },\r\n\r\n        dataShow : function(){\r\n            if ($('submit_order_top_button')) {\r\n                $('submit_order_top_button').show();\r\n            }\r\n            this.showArea('data');\r\n        },\r\n\r\n        clearShoppingCart : function(confirmMessage){\r\n            var self = this;\r\n\r\n            confirm({\r\n                content: confirmMessage,\r\n                actions: {\r\n                    confirm: function() {\r\n                        self.collectElementsValue = false;\r\n                        order.sidebarApplyChanges({'sidebar[empty_customer_cart]': 1});\r\n                        self.collectElementsValue = true;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        sidebarApplyChanges : function(auxiliaryParams) {\r\n            if ($(this.getAreaId('sidebar'))) {\r\n                var data = {};\r\n                if (this.collectElementsValue) {\r\n                    var elems = $(this.getAreaId('sidebar')).select('input');\r\n                    for (var i=0; i < elems.length; i++) {\r\n                        if (elems[i].getValue()) {\r\n                            data[elems[i].name] = elems[i].getValue();\r\n                        }\r\n                    }\r\n                }\r\n                if (auxiliaryParams instanceof Object) {\r\n                    for (var paramName in auxiliaryParams) {\r\n                        data[paramName] = String(auxiliaryParams[paramName]);\r\n                    }\r\n                }\r\n                data.reset_shipping = true;\r\n                this.loadArea(['sidebar', 'items', 'shipping_method', 'billing_method','totals', 'giftmessage'], true, data);\r\n            }\r\n        },\r\n\r\n        sidebarHide : function(){\r\n            if(this.storeId === false && $('page:left') && $('page:container')){\r\n                $('page:left').hide();\r\n                $('page:container').removeClassName('container');\r\n                $('page:container').addClassName('container-collapsed');\r\n            }\r\n        },\r\n\r\n        sidebarShow : function(){\r\n            if($('page:left') && $('page:container')){\r\n                $('page:left').show();\r\n                $('page:container').removeClassName('container-collapsed');\r\n                $('page:container').addClassName('container');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show configuration of product and add handlers on submit form\r\n         *\r\n         * @param productId\r\n         */\r\n        sidebarConfigureProduct: function (listType, productId, itemId) {\r\n            // create additional fields\r\n            var params = {};\r\n            params.reset_shipping = true;\r\n            params.add_product = productId;\r\n            this.prepareParams(params);\r\n            for (var i in params) {\r\n                if (params[i] === null) {\r\n                    unset(params[i]);\r\n                } else if (typeof(params[i]) == 'boolean') {\r\n                    params[i] = params[i] ? 1 : 0;\r\n                }\r\n            }\r\n            var fields = [];\r\n            for (var name in params) {\r\n                fields.push(new Element('input', {type: 'hidden', name: name, value: params[name]}));\r\n            }\r\n            // add additional fields before triggered submit\r\n            productConfigure.setBeforeSubmitCallback(listType, function() {\r\n                productConfigure.addFields(fields);\r\n            }.bind(this));\r\n            // response handler\r\n            productConfigure.setOnLoadIFrameCallback(listType, function(response) {\r\n                if (!response.ok) {\r\n                    return;\r\n                }\r\n                this.loadArea(['items', 'shipping_method', 'billing_method','totals', 'giftmessage'], true);\r\n            }.bind(this));\r\n            // show item configuration\r\n            itemId = itemId ? itemId : productId;\r\n            productConfigure.showItemConfiguration(listType, itemId);\r\n            return false;\r\n        },\r\n\r\n        removeSidebarItem : function(id, from){\r\n            this.loadArea(['sidebar_'+from], 'sidebar_data_'+from, {remove_item:id, from:from});\r\n        },\r\n\r\n        itemsUpdate : function(){\r\n            var area = ['sidebar', 'items', 'shipping_method', 'billing_method','totals', 'giftmessage'];\r\n            // prepare additional fields\r\n            var fieldsPrepare = {update_items: 1};\r\n            var info = $('order-items_grid').select('input', 'select', 'textarea');\r\n            for(var i=0; i<info.length; i++){\r\n                if(!info[i].disabled && (info[i].type != 'checkbox' || info[i].checked)) {\r\n                    fieldsPrepare[info[i].name] = info[i].getValue();\r\n                }\r\n            }\r\n            fieldsPrepare = Object.extend(fieldsPrepare, this.productConfigureAddFields);\r\n            this.productConfigureSubmit('quote_items', area, fieldsPrepare);\r\n            this.orderItemChanged = false;\r\n        },\r\n\r\n        itemsOnchangeBind : function(){\r\n            var elems = $('order-items_grid').select('input', 'select', 'textarea');\r\n            for(var i=0; i<elems.length; i++){\r\n                if(!elems[i].bindOnchange){\r\n                    elems[i].bindOnchange = true;\r\n                    elems[i].observe('change', this.itemChange.bind(this))\r\n                }\r\n            }\r\n        },\r\n\r\n        itemChange : function(event){\r\n            this.giftmessageOnItemChange(event);\r\n            this.orderItemChanged = true;\r\n        },\r\n\r\n        /**\r\n         * Submit batch of configured products\r\n         *\r\n         * @param listType\r\n         * @param area\r\n         * @param fieldsPrepare\r\n         * @param itemsFilter\r\n         */\r\n        productConfigureSubmit : function(listType, area, fieldsPrepare, itemsFilter) {\r\n            // prepare loading areas and build url\r\n            area = this.prepareArea(area);\r\n            this.loadingAreas = area;\r\n            var url = this.loadBaseUrl + 'block/' + area + '?isAjax=true';\r\n\r\n            // prepare additional fields\r\n            fieldsPrepare = this.prepareParams(fieldsPrepare);\r\n            fieldsPrepare.reset_shipping = 1;\r\n            fieldsPrepare.json = 1;\r\n\r\n            // create fields\r\n            var fields = [];\r\n            for (var name in fieldsPrepare) {\r\n                fields.push(new Element('input', {type: 'hidden', name: name, value: fieldsPrepare[name]}));\r\n            }\r\n            productConfigure.addFields(fields);\r\n\r\n            // filter items\r\n            if (itemsFilter) {\r\n                productConfigure.addItemsFilter(listType, itemsFilter);\r\n            }\r\n\r\n            // prepare and do submit\r\n            productConfigure.addListType(listType, {urlSubmit: url});\r\n            productConfigure.setOnLoadIFrameCallback(listType, function(response){\r\n                this.loadAreaResponseHandler(response);\r\n            }.bind(this));\r\n            productConfigure.submit(listType);\r\n            // clean\r\n            this.productConfigureAddFields = {};\r\n        },\r\n\r\n        /**\r\n         * Show configuration of quote item\r\n         *\r\n         * @param itemId\r\n         */\r\n        showQuoteItemConfiguration: function(itemId){\r\n            var listType = 'quote_items';\r\n            var qtyElement = $('order-items_grid').select('input[name=\"item\\['+itemId+'\\]\\[qty\\]\"]')[0];\r\n            productConfigure.setConfirmCallback(listType, function() {\r\n                // sync qty of popup and qty of grid\r\n                var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\r\n                if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\r\n                    qtyElement.value = confirmedCurrentQty.value;\r\n                }\r\n                this.productConfigureAddFields['item['+itemId+'][configured]'] = 1;\r\n                this.itemsUpdate();\r\n\r\n            }.bind(this));\r\n            productConfigure.setShowWindowCallback(listType, function() {\r\n                // sync qty of grid and qty of popup\r\n                var formCurrentQty = productConfigure.getCurrentFormQtyElement();\r\n                if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\r\n                    formCurrentQty.value = qtyElement.value;\r\n                }\r\n            }.bind(this));\r\n            productConfigure.showItemConfiguration(listType, itemId);\r\n        },\r\n\r\n        accountFieldsBind : function(container){\r\n            if($(container)){\r\n                var fields = $(container).select('input', 'select', 'textarea');\r\n                for(var i=0; i<fields.length; i++){\r\n                    if(fields[i].id == 'group_id'){\r\n                        fields[i].observe('change', this.accountGroupChange.bind(this))\r\n                    }\r\n                    else{\r\n                        fields[i].observe('change', this.accountFieldChange.bind(this))\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        accountGroupChange : function(){\r\n            this.loadArea(['data'], true, this.serializeData('order-form_account').toObject());\r\n        },\r\n\r\n        accountFieldChange : function(){\r\n            this.saveData(this.serializeData('order-form_account'));\r\n        },\r\n\r\n        commentFieldsBind : function(container){\r\n            if($(container)){\r\n                var fields = $(container).select('input', 'textarea');\r\n                for(var i=0; i<fields.length; i++)\r\n                    fields[i].observe('change', this.commentFieldChange.bind(this))\r\n            }\r\n        },\r\n\r\n        commentFieldChange : function(){\r\n            this.saveData(this.serializeData('order-comment'));\r\n        },\r\n\r\n        giftmessageFieldsBind : function(container){\r\n            if($(container)){\r\n                var fields = $(container).select('input', 'textarea');\r\n                for(var i=0; i<fields.length; i++)\r\n                    fields[i].observe('change', this.giftmessageFieldChange.bind(this))\r\n            }\r\n        },\r\n\r\n        giftmessageFieldChange : function(){\r\n            this.giftMessageDataChanged = true;\r\n        },\r\n\r\n        giftmessageOnItemChange : function(event) {\r\n            var element = Event.element(event);\r\n            if(element.name.indexOf(\"giftmessage\") != -1 && element.type == \"checkbox\" && !element.checked) {\r\n                var messages = $(\"order-giftmessage\").select('textarea');\r\n                var name;\r\n                for(var i=0; i<messages.length; i++) {\r\n                    name = messages[i].id.split(\"_\");\r\n                    if(name.length < 2) continue;\r\n                    if (element.name.indexOf(\"[\" + name[1] + \"]\") != -1 && messages[i].value != \"\") {\r\n                        alert({\r\n                            content: \"First, clean the Message field in Gift Message form\"\r\n                        });\r\n                        element.checked = true;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        loadArea : function(area, indicator, params){\r\n            var deferred = new jQuery.Deferred();\r\n            var url = this.loadBaseUrl;\r\n            if (area) {\r\n                area = this.prepareArea(area);\r\n                url += 'block/' + area;\r\n            }\r\n            if (indicator === true) indicator = 'html-body';\r\n            params = this.prepareParams(params);\r\n            params.json = true;\r\n            if (!this.loadingAreas) this.loadingAreas = [];\r\n            if (indicator) {\r\n                this.loadingAreas = area;\r\n                new Ajax.Request(url, {\r\n                    parameters:params,\r\n                    loaderArea: indicator,\r\n                    onSuccess: function(transport) {\r\n                        var response = transport.responseText.evalJSON();\r\n                        this.loadAreaResponseHandler(response);\r\n                        deferred.resolve();\r\n                    }.bind(this)\r\n                });\r\n            }\r\n            else {\r\n                new Ajax.Request(url, {\r\n                    parameters:params,\r\n                    loaderArea: indicator,\r\n                    onSuccess: function(transport) {\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n            }\r\n            if (typeof productConfigure != 'undefined' && area instanceof Array && area.indexOf('items') != -1) {\r\n                productConfigure.clean('quote_items');\r\n            }\r\n            return deferred.promise();\r\n        },\r\n\r\n        loadAreaResponseHandler : function (response) {\r\n            if (response.error) {\r\n                alert({\r\n                    content: response.message\r\n                });\r\n            }\r\n            if (response.ajaxExpired && response.ajaxRedirect) {\r\n                setLocation(response.ajaxRedirect);\r\n            }\r\n            if (!this.loadingAreas) {\r\n                this.loadingAreas = [];\r\n            }\r\n            if (typeof this.loadingAreas == 'string') {\r\n                this.loadingAreas = [this.loadingAreas];\r\n            }\r\n            if (this.loadingAreas.indexOf('message') == -1) {\r\n                this.loadingAreas.push('message');\r\n            }\r\n            if (response.header) {\r\n                jQuery('.page-actions-inner').attr('data-title', response.header);\r\n            }\r\n\r\n            for (var i = 0; i < this.loadingAreas.length; i++) {\r\n                var id = this.loadingAreas[i];\r\n                if ($(this.getAreaId(id))) {\r\n                    if ('message' != id || response[id]) {\r\n                        $(this.getAreaId(id)).update(response[id]);\r\n                    }\r\n                    if ($(this.getAreaId(id)).callback) {\r\n                        this[$(this.getAreaId(id)).callback]();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        prepareArea : function(area) {\r\n            if (this.giftMessageDataChanged) {\r\n                return area.without('giftmessage');\r\n            }\r\n            return area;\r\n        },\r\n\r\n        saveData : function(data){\r\n            this.loadArea(false, false, data);\r\n        },\r\n\r\n        showArea : function(area){\r\n            var id = this.getAreaId(area);\r\n            if($(id)) {\r\n                $(id).show();\r\n                this.areaOverlay();\r\n            }\r\n        },\r\n\r\n        hideArea : function(area){\r\n            var id = this.getAreaId(area);\r\n            if($(id)) {\r\n                $(id).hide();\r\n                this.areaOverlay();\r\n            }\r\n        },\r\n\r\n        areaOverlay : function()\r\n        {\r\n            $H(order.overlayData).each(function(e){\r\n                e.value.fx();\r\n            });\r\n        },\r\n\r\n        getAreaId : function(area){\r\n            return 'order-'+area;\r\n        },\r\n\r\n        prepareParams : function(params){\r\n            if (!params) {\r\n                params = {};\r\n            }\r\n            if (!params.customer_id) {\r\n                params.customer_id = this.customerId;\r\n            }\r\n            if (!params.store_id) {\r\n                params.store_id = this.storeId;\r\n            }\r\n            if (!params.currency_id) {\r\n                params.currency_id = this.currencyId;\r\n            }\r\n            if (!params.form_key) {\r\n                params.form_key = FORM_KEY;\r\n            }\r\n\r\n            if (this.isPaymentValidationAvailable()) {\r\n                var data = this.serializeData('order-billing_method');\r\n                if (data) {\r\n                    data.each(function(value) {\r\n                        params[value[0]] = value[1];\r\n                    });\r\n                }\r\n            } else {\r\n                params['payment[method]'] = this.paymentMethod;\r\n            }\r\n            return params;\r\n        },\r\n\r\n        /**\r\n         * Prevent from sending credit card information to server for some payment methods\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isPaymentValidationAvailable : function(){\r\n            return ((typeof this.paymentMethod) == 'undefined'\r\n                || this.excludedPaymentMethods.indexOf(this.paymentMethod) == -1);\r\n        },\r\n\r\n        /**\r\n         * Serializes container form elements data.\r\n         *\r\n         * @param {String} container\r\n         * @return {Object}\r\n         */\r\n        serializeData: function (container) {\r\n            var fields = $(container).select('input', 'select', 'textarea'),\r\n                data = Form.serializeElements(fields, true);\r\n\r\n            return $H(data);\r\n        },\r\n\r\n        toggleCustomPrice: function(checkbox, elemId, tierBlock) {\r\n            if (checkbox.checked) {\r\n                $(elemId).disabled = false;\r\n                $(elemId).show();\r\n                if($(tierBlock)) $(tierBlock).hide();\r\n            }\r\n            else {\r\n                $(elemId).disabled = true;\r\n                $(elemId).hide();\r\n                if($(tierBlock)) $(tierBlock).show();\r\n            }\r\n        },\r\n\r\n        submit : function()\r\n        {\r\n            var $editForm = jQuery('#edit_form');\r\n\r\n            if ($editForm.valid()) {\r\n                $editForm.trigger('processStart');\r\n                $editForm.trigger('submitOrder');\r\n            }\r\n        },\r\n\r\n        _realSubmit: function () {\r\n            var disableAndSave = function() {\r\n                disableElements('save');\r\n                jQuery('#edit_form').on('invalid-form.validate', function() {\r\n                    enableElements('save');\r\n                    jQuery('#edit_form').trigger('processStop');\r\n                    jQuery('#edit_form').off('invalid-form.validate');\r\n                });\r\n                jQuery('#edit_form').triggerHandler('save');\r\n            }\r\n            if (this.orderItemChanged) {\r\n                var self = this;\r\n\r\n                jQuery('#edit_form').trigger('processStop');\r\n\r\n                confirm({\r\n                    content: jQuery.mage.__('You have item changes'),\r\n                    actions: {\r\n                        confirm: function() {\r\n                            jQuery('#edit_form').trigger('processStart');\r\n                            disableAndSave();\r\n                        },\r\n                        cancel: function() {\r\n                            self.itemsUpdate();\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                disableAndSave();\r\n            }\r\n        },\r\n\r\n        overlay : function(elId, show, observe) {\r\n            if (typeof(show) == 'undefined') { show = true; }\r\n\r\n            var orderObj = this;\r\n            var obj = this.overlayData.get(elId);\r\n            if (!obj) {\r\n                obj = {\r\n                    show: show,\r\n                    el: elId,\r\n                    order: orderObj,\r\n                    fx: function(event) {\r\n                        this.order.processOverlay(this.el, this.show);\r\n                    }\r\n                };\r\n                obj.bfx = obj.fx.bindAsEventListener(obj);\r\n                this.overlayData.set(elId, obj);\r\n            } else {\r\n                obj.show = show;\r\n                Event.stopObserving(window, 'resize', obj.bfx);\r\n            }\r\n\r\n            Event.observe(window, 'resize', obj.bfx);\r\n\r\n            this.processOverlay(elId, show);\r\n        },\r\n\r\n        processOverlay : function(elId, show) {\r\n            var el = $(elId);\r\n\r\n            if (!el) {\r\n                return;\r\n            }\r\n\r\n            var parentEl = el.up(1);\r\n            if (show) {\r\n                parentEl.removeClassName('ignore-validate');\r\n            } else {\r\n                parentEl.addClassName('ignore-validate');\r\n            }\r\n\r\n            if (Prototype.Browser.IE) {\r\n                parentEl.select('select').each(function (elem) {\r\n                    if (show) {\r\n                        elem.needShowOnSuccess = false;\r\n                        elem.style.visibility = '';\r\n                    } else {\r\n                        elem.style.visibility = 'hidden';\r\n                        elem.needShowOnSuccess = true;\r\n                    }\r\n                });\r\n            }\r\n\r\n            parentEl.setStyle({position: 'relative'});\r\n            el.setStyle({\r\n                display: show ? 'none' : ''\r\n            });\r\n        },\r\n\r\n        validateVat: function(parameters)\r\n        {\r\n            var params = {\r\n                country: $(parameters.countryElementId).value,\r\n                vat: $(parameters.vatElementId).value\r\n            };\r\n\r\n            if (this.storeId !== false) {\r\n                params.store_id = this.storeId;\r\n            }\r\n\r\n            var currentCustomerGroupId = $(parameters.groupIdHtmlId)\r\n                ? $(parameters.groupIdHtmlId).value : '';\r\n\r\n            new Ajax.Request(parameters.validateUrl, {\r\n                parameters: params,\r\n                onSuccess: function(response) {\r\n                    var message = '';\r\n                    var groupActionRequired = null;\r\n                    try {\r\n                        response = response.responseText.evalJSON();\r\n\r\n                        if (null === response.group) {\r\n                            if (true === response.valid) {\r\n                                message = parameters.vatValidMessage;\r\n                            } else if (true === response.success) {\r\n                                message = parameters.vatInvalidMessage.replace(/%s/, params.vat);\r\n                            } else {\r\n                                message = parameters.vatValidationFailedMessage;\r\n                            }\r\n                        } else {\r\n                            if (true === response.valid) {\r\n                                message = parameters.vatValidAndGroupValidMessage;\r\n                                if (0 === response.group) {\r\n                                    message = parameters.vatValidAndGroupInvalidMessage;\r\n                                    groupActionRequired = 'inform';\r\n                                } else if (currentCustomerGroupId != response.group) {\r\n                                    message = parameters.vatValidAndGroupChangeMessage;\r\n                                    groupActionRequired = 'change';\r\n                                }\r\n                            } else if (response.success) {\r\n                                message = parameters.vatInvalidMessage.replace(/%s/, params.vat);\r\n                                groupActionRequired = 'inform';\r\n                            } else {\r\n                                message = parameters.vatValidationFailedMessage;\r\n                                groupActionRequired = 'inform';\r\n                            }\r\n                        }\r\n                    } catch (e) {\r\n                        message = parameters.vatValidationFailedMessage;\r\n                    }\r\n                    if (null === groupActionRequired) {\r\n                        alert({\r\n                            content: message\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.processCustomerGroupChange(\r\n                            parameters.groupIdHtmlId,\r\n                            message,\r\n                            parameters.vatCustomerGroupMessage,\r\n                            parameters.vatGroupErrorMessage,\r\n                            response.group,\r\n                            groupActionRequired\r\n                        );\r\n                    }\r\n                }.bind(this)\r\n            });\r\n        },\r\n\r\n        processCustomerGroupChange: function(groupIdHtmlId, message, customerGroupMessage, errorMessage, groupId, action)\r\n        {\r\n            var groupMessage = '';\r\n            try {\r\n                var currentCustomerGroupId = $(groupIdHtmlId).value;\r\n                var currentCustomerGroupTitle =\r\n                    $$('#' + groupIdHtmlId + ' > option[value=' + currentCustomerGroupId + ']')[0].text;\r\n                var customerGroupOption = $$('#' + groupIdHtmlId + ' > option[value=' + groupId + ']')[0];\r\n                groupMessage = customerGroupMessage.replace(/%s/, customerGroupOption.text);\r\n            } catch (e) {\r\n                groupMessage = errorMessage;\r\n                if (action === 'change') {\r\n                    message = '';\r\n                    action = 'inform';\r\n                }\r\n            }\r\n\r\n            if (action === 'change') {\r\n                var confirmText = message.replace(/%s/, customerGroupOption.text);\r\n                confirmText = confirmText.replace(/%s/, currentCustomerGroupTitle);\r\n                if (confirm(confirmText)) {\r\n                    $$('#' + groupIdHtmlId + ' option').each(function (o) {\r\n                        o.selected = o.readAttribute('value') == groupId;\r\n                    });\r\n                    this.accountGroupChange();\r\n                }\r\n            } else if (action === 'inform') {\r\n                alert({\r\n                    content: message + '\\n' + groupMessage\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    window.OrderFormArea = Class.create();\r\n    OrderFormArea.prototype = {\r\n        _name: null,\r\n        _node: null,\r\n        _parent: null,\r\n        _callbackName: null,\r\n\r\n        initialize: function(name, node, parent){\r\n            if(!node)\r\n                return;\r\n            this._name = name;\r\n            this._parent = parent;\r\n            this._callbackName = node.callback;\r\n            if (typeof this._callbackName == 'undefined') {\r\n                this._callbackName = name + 'Loaded';\r\n                node.callback = this._callbackName;\r\n            }\r\n            parent[this._callbackName] = parent[this._callbackName].wrap((function (proceed){\r\n                proceed();\r\n                this.onLoad();\r\n            }).bind(this));\r\n\r\n            this.setNode(node);\r\n        },\r\n\r\n        setNode: function(node){\r\n            if (!node.callback) {\r\n                node.callback = this._callbackName;\r\n            }\r\n            this.node = node;\r\n        },\r\n\r\n        onLoad: function(){\r\n        }\r\n    };\r\n\r\n    window.ControlButton = Class.create();\r\n\r\n    ControlButton.prototype = {\r\n        _label: '',\r\n        _node: null,\r\n\r\n        initialize: function(label, id){\r\n            this._label = label;\r\n            this._node = new Element('button', {\r\n                'class': 'action-secondary action-add',\r\n                'type':  'button'\r\n            });\r\n            if (typeof id !== 'undefined') {\r\n                this._node.setAttribute('id', id)\r\n            }\r\n        },\r\n\r\n        onClick: function(){\r\n        },\r\n\r\n        insertIn: function(element, position){\r\n            var node = Object.extend(this._node),\r\n                content = {};\r\n            node.observe('click', this.onClick);\r\n            node.update('<span>' + this._label + '</span>');\r\n            content[position] = node;\r\n            Element.insert(element, content);\r\n        },\r\n\r\n        getLabel: function(){\r\n            return this._label;\r\n        }\r\n    };\r\n});\r\n","Magento_Sales/order/edit/message.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.orderEditDialog', {\r\n        options: {\r\n            url:     null,\r\n            message: null,\r\n            modal:  null\r\n        },\r\n\r\n        /**\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._prepareDialog();\r\n        },\r\n\r\n        /**\r\n         * Show modal\r\n         */\r\n        showDialog: function () {\r\n            this.options.dialog.html(this.options.message).modal('openModal');\r\n        },\r\n\r\n        /**\r\n         * Redirect to edit page\r\n         */\r\n        redirect: function () {\r\n            window.location = this.options.url;\r\n        },\r\n\r\n        /**\r\n         * Prepare modal\r\n         * @protected\r\n         */\r\n        _prepareDialog: function () {\r\n            var self = this;\r\n\r\n            this.options.dialog = $('<div class=\"ui-dialog-content ui-widget-content\"></div>').modal({\r\n                type: 'popup',\r\n                modalClass: 'edit-order-popup',\r\n                title: $.mage.__('Edit Order'),\r\n                buttons: [{\r\n                    text: $.mage.__('Ok'),\r\n                    'class': 'action-primary',\r\n\r\n                    /** @inheritdoc */\r\n                    click: function () {\r\n                        self.redirect();\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.orderEditDialog;\r\n});\r\n","Magento_Sales/order/edit/address/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Currently Magento App stores both  region_id and region (as text) values.\r\n     * To prevent missing region (as text) we need to copy it in hidden field.\r\n     * @param {Array} config\r\n     * @param {String} element\r\n     */\r\n    return function (config, element) {\r\n        var form = $(element),\r\n            regionId = form.find('#region_id'),\r\n\r\n            /**\r\n             * Set region callback\r\n             */\r\n            setRegion = function () {\r\n                form.find('#region').val(regionId.filter(':visible').find(':selected').text());\r\n            };\r\n\r\n        if (regionId.is('visible')) {\r\n            setRegion();\r\n        }\r\n\r\n        regionId.on('change', setRegion);\r\n        form.find('#country_id').on('change', setRegion);\r\n    };\r\n});\r\n","Magento_Sales/order/view/post-wrapper.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/translate'\r\n], function ($, confirm) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {String} url\r\n     * @returns {Object}\r\n     */\r\n    function getForm(url) {\r\n        return $('<form>', {\r\n            'action': url,\r\n            'method': 'POST'\r\n        }).append($('<input>', {\r\n            'name': 'form_key',\r\n            'value': window.FORM_KEY,\r\n            'type': 'hidden'\r\n        }));\r\n    }\r\n\r\n    $('#order-view-cancel-button').click(function () {\r\n        var msg = $.mage.__('Are you sure you want to cancel this order?'),\r\n            url = $('#order-view-cancel-button').data('url');\r\n\r\n        confirm({\r\n            'content': msg,\r\n            'actions': {\r\n\r\n                /**\r\n                 * 'Confirm' action handler.\r\n                 */\r\n                confirm: function () {\r\n                    getForm(url).appendTo('body').submit();\r\n                }\r\n            }\r\n        });\r\n\r\n        return false;\r\n    });\r\n\r\n    $('#order-view-hold-button').click(function () {\r\n        var url = $('#order-view-hold-button').data('url');\r\n\r\n        getForm(url).appendTo('body').submit();\r\n    });\r\n\r\n    $('#order-view-unhold-button').click(function () {\r\n        var url = $('#order-view-unhold-button').data('url');\r\n\r\n        getForm(url).appendTo('body').submit();\r\n    });\r\n});\r\n","Magento_SalesRule/js/form/element/apply_to_shipping.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox-toggle-notice'\r\n], function (Checkbox) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            imports: {\r\n                toggleDisabled: '${ $.parentName }.simple_action:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle element disabled state according to simple action value.\r\n         *\r\n         * @param {String} action\r\n         */\r\n        toggleDisabled: function (action) {\r\n            switch (action) {\r\n                case 'cart_fixed':\r\n                    this.disabled(true);\r\n                    break;\r\n                default:\r\n                    this.disabled(false);\r\n            }\r\n\r\n            if (this.disabled()) {\r\n                this.checked(false);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_SalesRule/js/form/element/coupon-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/element/select'\r\n], function (_, uiRegistry, select) {\r\n    'use strict';\r\n\r\n    return select.extend({\r\n\r\n        /**\r\n         * Hide fields on coupon tab\r\n         */\r\n        onUpdate: function () {\r\n\r\n            /* eslint-disable eqeqeq */\r\n            if (this.value() != this.displayOnlyForCouponType) {\r\n                uiRegistry.get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation').checked(false);\r\n            }\r\n\r\n            this.enableDisableFields();\r\n        },\r\n\r\n        /**\r\n         * Enable/disable fields on Coupons tab\r\n         */\r\n        enableDisableFields: function () {\r\n            var selector,\r\n                isUseAutoGenerationChecked,\r\n                couponType,\r\n                disableAuto;\r\n\r\n            selector = '[id=sales-rule-form-tab-coupons] input, [id=sales-rule-form-tab-coupons] select, ' +\r\n                    '[id=sales-rule-form-tab-coupons] button';\r\n            isUseAutoGenerationChecked = uiRegistry\r\n                    .get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation')\r\n                    .checked();\r\n            couponType = uiRegistry\r\n                .get('sales_rule_form.sales_rule_form.rule_information.coupon_type')\r\n                .value();\r\n            disableAuto = couponType === 3 || isUseAutoGenerationChecked;\r\n            _.each(\r\n                document.querySelectorAll(selector),\r\n                function (element) {\r\n                    element.disabled = !disableAuto;\r\n                }\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_SalesRule/js/form/element/manage-coupon-codes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function (_, uiRegistry, fieldset, async) {\r\n    'use strict';\r\n\r\n    return fieldset.extend({\r\n\r\n        /*eslint-disable no-unused-vars*/\r\n        /**\r\n         * Initialize element\r\n         *\r\n         * @returns {Abstract} Chainable\r\n         */\r\n        initialize: function (elems, position) {\r\n            var obj = this;\r\n\r\n            this._super();\r\n\r\n            async.async('#sales-rule-form-tab-coupons', document.getElementById('container'), function (node) {\r\n                var useAutoGeneration = uiRegistry.get(\r\n                    'sales_rule_form.sales_rule_form.rule_information.use_auto_generation'\r\n                );\r\n\r\n                useAutoGeneration.on('checked', function () {\r\n                    obj.enableDisableFields();\r\n                });\r\n                obj.enableDisableFields();\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /*eslint-enable no-unused-vars*/\r\n        /*eslint-disable lines-around-comment*/\r\n\r\n        /**\r\n         * Enable/disable fields on Coupons tab\r\n         */\r\n        enableDisableFields: function () {\r\n            var selector,\r\n                isUseAutoGenerationChecked,\r\n                couponType,\r\n                disableAuto;\r\n\r\n            selector = '[id=sales-rule-form-tab-coupons] input, [id=sales-rule-form-tab-coupons] select, ' +\r\n                    '[id=sales-rule-form-tab-coupons] button';\r\n            isUseAutoGenerationChecked = uiRegistry\r\n                    .get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation')\r\n                    .checked();\r\n            couponType = uiRegistry\r\n                .get('sales_rule_form.sales_rule_form.rule_information.coupon_type')\r\n                .value();\r\n            /**\r\n             * \\Magento\\Rule\\Model\\AbstractModel::COUPON_TYPE_AUTO\r\n             */\r\n            disableAuto = couponType === 3 || isUseAutoGenerationChecked;\r\n            _.each(\r\n                document.querySelectorAll(selector),\r\n                function (element) {\r\n                    element.disabled = !disableAuto;\r\n                }\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_Security/js/confirm-redirect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*eslint-disable no-undef*/\r\ndefine(\r\n    ['jquery'],\r\n    function ($) {\r\n        'use strict';\r\n\r\n        return function (config, element) {\r\n            $(element).click(config, function () {\r\n                confirmSetLocation(config.message, config.url);\r\n            });\r\n        };\r\n    }\r\n);\r\n","Magento_Shipping/js/packages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function ($, modal, $t) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n        config.buttons = [\r\n            {\r\n                text: $t('Print'),\r\n                'class': 'action action-primary',\r\n\r\n                /**\r\n                 * Click handler\r\n                 */\r\n                click: function () {\r\n                    window.location.href = this.options.url;\r\n                }\r\n            }, {\r\n                text: $t('Cancel'),\r\n                'class': 'action action-secondary',\r\n\r\n                /**\r\n                 * Click handler\r\n                 */\r\n                click: function () {\r\n                    this.closeModal();\r\n                }\r\n            }\r\n        ];\r\n        modal(config, element);\r\n    };\r\n});\r\n","Magento_Shipping/order/packaging.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['prototype'], function () {\r\n\r\n    window.Packaging = Class.create();\r\n    Packaging.prototype = {\r\n        /**\r\n         * Initialize object\r\n         */\r\n        initialize: function (params) {\r\n            this.packageIncrement = 0;\r\n            this.packages = [];\r\n            this.itemsAll = [];\r\n            this.createLabelUrl = params.createLabelUrl ? params.createLabelUrl : null;\r\n            this.itemsGridUrl = params.itemsGridUrl ? params.itemsGridUrl : null;\r\n            this.errorQtyOverLimit = params.errorQtyOverLimit;\r\n            this.titleDisabledSaveBtn = params.titleDisabledSaveBtn;\r\n            this.window = $('packaging_window');\r\n            this.messages = this.window.select('.message-warning')[0];\r\n            this.packagesContent = $('packages_content');\r\n            this.template = $('package_template');\r\n            this.paramsCreateLabelRequest = {};\r\n            this.validationErrorMsg = params.validationErrorMsg;\r\n\r\n            this.defaultItemsQty            = params.shipmentItemsQty ? params.shipmentItemsQty : null;\r\n            this.defaultItemsPrice          = params.shipmentItemsPrice ? params.shipmentItemsPrice : null;\r\n            this.defaultItemsName           = params.shipmentItemsName ? params.shipmentItemsName : null;\r\n            this.defaultItemsWeight         = params.shipmentItemsWeight ? params.shipmentItemsWeight : null;\r\n            this.defaultItemsProductId      = params.shipmentItemsProductId ? params.shipmentItemsProductId : null;\r\n            this.defaultItemsOrderItemId    = params.shipmentItemsOrderItemId ? params.shipmentItemsOrderItemId : null;\r\n\r\n            this.shippingInformation = params.shippingInformation ? params.shippingInformation : null;\r\n            this.thisPage           = params.thisPage ? params.thisPage : null;\r\n            this.customizableContainers = params.customizable ? params.customizable : [];\r\n\r\n            this.eps = 0.000001;\r\n        },\r\n\r\n        /**\r\n         * Get Package Id\r\n         */\r\n        getPackageId: function (packageBlock) {\r\n            return packageBlock.id.match(/\\d{0,}$/)[0];\r\n        },\r\n\r\n        //******************** Setters **********************************//\r\n        setLabelCreatedCallback: function (callback) {\r\n            this.labelCreatedCallback = callback;\r\n        },\r\n        setCancelCallback: function (callback) {\r\n            this.cancelCallback = callback;\r\n        },\r\n        setConfirmPackagingCallback: function (callback) {\r\n            this.confirmPackagingCallback = callback;\r\n        },\r\n        setItemQtyCallback: function (callback) {\r\n            this.itemQtyCallback = callback;\r\n        },\r\n        setCreateLabelUrl: function (url) {\r\n            this.createLabelUrl = url;\r\n        },\r\n        setParamsCreateLabelRequest: function (params) {\r\n            Object.extend(this.paramsCreateLabelRequest, params);\r\n        },\r\n        //******************** End Setters *******************************//\r\n\r\n        showWindow: function () {\r\n            if (this.packagesContent.childElements().length == 0) {\r\n                this.newPackage();\r\n            }\r\n            jQuery(this.window).modal('openModal');\r\n        },\r\n\r\n        cancelPackaging: function () {\r\n            if (Object.isFunction(this.cancelCallback)) {\r\n                this.cancelCallback();\r\n            }\r\n        },\r\n\r\n        confirmPackaging: function (params) {\r\n            if (Object.isFunction(this.confirmPackagingCallback)) {\r\n                this.confirmPackagingCallback();\r\n            }\r\n        },\r\n\r\n        checkAllItems: function (headCheckbox) {\r\n            $(headCheckbox).up('table').select('tbody input[type=\"checkbox\"]').each(function (checkbox) {\r\n                checkbox.checked = headCheckbox.checked;\r\n                this._observeQty.call(checkbox);\r\n            }.bind(this));\r\n        },\r\n\r\n        cleanPackages: function () {\r\n            this.packagesContent.update();\r\n            this.packages = [];\r\n            this.itemsAll = [];\r\n            this.packageIncrement = 0;\r\n            this._setAllItemsPackedState();\r\n            this.messages.hide().update();\r\n        },\r\n\r\n        sendCreateLabelRequest: function () {\r\n            var self = this;\r\n\r\n            if (!this.validate()) {\r\n                this.messages.show().update(this.validationErrorMsg);\r\n\r\n                return;\r\n            }\r\n            this.messages.hide().update();\r\n\r\n            if (this.createLabelUrl) {\r\n                var weight, length, width, height = null;\r\n                var packagesParams = [];\r\n\r\n                this.packagesContent.childElements().each(function (pack) {\r\n                    var packageId = this.getPackageId(pack);\r\n\r\n                    weight = parseFloat(pack.select('input[name=\"container_weight\"]')[0].value);\r\n                    length = parseFloat(pack.select('input[name=\"container_length\"]')[0].value);\r\n                    width = parseFloat(pack.select('input[name=\"container_width\"]')[0].value);\r\n                    height = parseFloat(pack.select('input[name=\"container_height\"]')[0].value);\r\n                    packagesParams[packageId] = {\r\n                        container:                  pack.select('select[name=\"package_container\"]')[0].value,\r\n                        customs_value:              parseFloat(pack.select('input[name=\"package_customs_value\"]')[0].value, 10),\r\n                        weight:                     isNaN(weight) ? '' : weight,\r\n                        length:                     isNaN(length) ? '' : length,\r\n                        width:                      isNaN(width) ? '' : width,\r\n                        height:                     isNaN(height) ? '' : height,\r\n                        weight_units:               pack.select('select[name=\"container_weight_units\"]')[0].value,\r\n                        dimension_units:            pack.select('select[name=\"container_dimension_units\"]')[0].value\r\n                    };\r\n\r\n                    if (isNaN(packagesParams[packageId]['customs_value'])) {\r\n                        packagesParams[packageId]['customs_value'] = 0;\r\n                    }\r\n\r\n                    if ('undefined' != typeof pack.select('select[name=\"package_size\"]')[0]) {\r\n                        if ('' != pack.select('select[name=\"package_size\"]')[0].value) {\r\n                            packagesParams[packageId]['size'] = pack.select('select[name=\"package_size\"]')[0].value;\r\n                        }\r\n                    }\r\n\r\n                    if ('undefined' != typeof pack.select('input[name=\"container_girth\"]')[0]) {\r\n                        if ('' != pack.select('input[name=\"container_girth\"]')[0].value) {\r\n                            packagesParams[packageId]['girth'] = pack.select('input[name=\"container_girth\"]')[0].value;\r\n                            packagesParams[packageId]['girth_dimension_units'] = pack.select('select[name=\"container_girth_dimension_units\"]')[0].value;\r\n                        }\r\n                    }\r\n\r\n                    if ('undefined' != typeof pack.select('select[name=\"content_type\"]')[0] && 'undefined' != typeof pack.select('input[name=\"content_type_other\"]')[0]) {\r\n                        packagesParams[packageId]['content_type'] = pack.select('select[name=\"content_type\"]')[0].value;\r\n                        packagesParams[packageId]['content_type_other'] = pack.select('input[name=\"content_type_other\"]')[0].value;\r\n                    } else {\r\n                        packagesParams[packageId]['content_type'] = '';\r\n                        packagesParams[packageId]['content_type_other'] = '';\r\n                    }\r\n                    var deliveryConfirmation = pack.select('select[name=\"delivery_confirmation_types\"]');\r\n\r\n                    if (deliveryConfirmation.length) {\r\n                        packagesParams[packageId]['delivery_confirmation'] =  deliveryConfirmation[0].value;\r\n                    }\r\n                }.bind(this));\r\n\r\n                for (var packageId in this.packages) {\r\n                    if (!isNaN(packageId)) {\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[container]']              = packagesParams[packageId]['container'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[weight]']                 = packagesParams[packageId]['weight'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[customs_value]']          = packagesParams[packageId]['customs_value'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[length]']                 = packagesParams[packageId]['length'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[width]']                  = packagesParams[packageId]['width'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[height]']                 = packagesParams[packageId]['height'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[weight_units]']           = packagesParams[packageId]['weight_units'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[dimension_units]']        = packagesParams[packageId]['dimension_units'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[content_type]']           = packagesParams[packageId]['content_type'];\r\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[content_type_other]']     = packagesParams[packageId]['content_type_other'];\r\n\r\n                        if ('undefined' != typeof packagesParams[packageId]['size']) {\r\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[size]'] = packagesParams[packageId]['size'];\r\n                        }\r\n\r\n                        if ('undefined' != typeof packagesParams[packageId]['girth']) {\r\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[girth]'] = packagesParams[packageId]['girth'];\r\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[girth_dimension_units]'] = packagesParams[packageId]['girth_dimension_units'];\r\n                        }\r\n\r\n                        if ('undefined' != typeof packagesParams[packageId]['delivery_confirmation']) {\r\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[delivery_confirmation]']  = packagesParams[packageId]['delivery_confirmation'];\r\n                        }\r\n\r\n                        for (var packedItemId in this.packages[packageId]['items']) {\r\n                            if (!isNaN(packedItemId)) {\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][qty]']           = this.packages[packageId]['items'][packedItemId]['qty'];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][customs_value]'] = this.packages[packageId]['items'][packedItemId]['customs_value'];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][price]']         = self.defaultItemsPrice[packedItemId];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][name]']          = self.defaultItemsName[packedItemId];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][weight]']        = self.defaultItemsWeight[packedItemId];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][product_id]']    = self.defaultItemsProductId[packedItemId];\r\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][order_item_id]'] = self.defaultItemsOrderItemId[packedItemId];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                new Ajax.Request(this.createLabelUrl, {\r\n                    parameters: this.paramsCreateLabelRequest,\r\n                    onSuccess: function (transport) {\r\n                        var response = transport.responseText;\r\n\r\n                        if (response.isJSON()) {\r\n                            response = response.evalJSON();\r\n\r\n                            if (response.error) {\r\n                                this.messages.show().innerHTML = response.message;\r\n                            } else if (response.ok && Object.isFunction(this.labelCreatedCallback)) {\r\n                                this.labelCreatedCallback(response);\r\n                            }\r\n                        }\r\n                    }.bind(this)\r\n                });\r\n\r\n                if (this.paramsCreateLabelRequest['code'] &&\r\n                    this.paramsCreateLabelRequest['carrier_title'] &&\r\n                    this.paramsCreateLabelRequest['method_title'] &&\r\n                    this.paramsCreateLabelRequest['price']\r\n                ) {\r\n                    var a = this.paramsCreateLabelRequest['code'];\r\n                    var b = this.paramsCreateLabelRequest['carrier_title'];\r\n                    var c = this.paramsCreateLabelRequest['method_title'];\r\n                    var d = this.paramsCreateLabelRequest['price'];\r\n\r\n                    this.paramsCreateLabelRequest = {};\r\n                    this.paramsCreateLabelRequest['code']           = a;\r\n                    this.paramsCreateLabelRequest['carrier_title']  = b;\r\n                    this.paramsCreateLabelRequest['method_title']   = c;\r\n                    this.paramsCreateLabelRequest['price']          = d;\r\n                } else {\r\n                    this.paramsCreateLabelRequest = {};\r\n                }\r\n            }\r\n        },\r\n\r\n        validate: function () {\r\n            var dimensionElements = $('packaging_window').select(\r\n                'input[name=container_length],input[name=container_width],input[name=container_height],input[name=container_girth]:not(\"._disabled\")'\r\n            );\r\n            var callback = null;\r\n\r\n            if (dimensionElements.any(function (element) {\r\n                return !!element.value;\r\n            })) {\r\n                callback = function (element) {\r\n                    $(element).addClassName('required-entry');\r\n                };\r\n            } else {\r\n                callback = function (element) {\r\n                    $(element).removeClassName('required-entry');\r\n                };\r\n            }\r\n            dimensionElements.each(callback);\r\n\r\n            return result = $$('[id^=\"package_block_\"] input').collect(function (element) {\r\n                return this.validateElement(element);\r\n            }, this).all();\r\n        },\r\n\r\n        validateElement: function (elm) {\r\n            var cn = $w(elm.className);\r\n\r\n            return result = cn.all(function (value) {\r\n                var v = Validation.get(value);\r\n\r\n                if (Validation.isVisible(elm) && !v.test($F(elm), elm)) {\r\n                    $(elm).addClassName('validation-failed');\r\n\r\n                    return false;\r\n                }\r\n                $(elm).removeClassName('validation-failed');\r\n\r\n                return true;\r\n\r\n            });\r\n        },\r\n\r\n        validateCustomsValue: function () {\r\n            var items = [];\r\n            var isValid = true;\r\n            var itemsPrepare = [];\r\n            var itemsPacked = [];\r\n\r\n            this.packagesContent.childElements().each(function (pack) {\r\n                itemsPrepare = pack.select('[data-role=\"package-items\"]')[0];\r\n\r\n                if (itemsPrepare) {\r\n                    items = items.concat(itemsPrepare.select('.grid tbody tr'));\r\n                }\r\n                itemsPacked = pack.select('.package_items')[0];\r\n\r\n                if (itemsPacked) {\r\n                    items = items.concat(itemsPacked.select('.grid tbody tr'));\r\n                }\r\n            });\r\n\r\n            items.each(function (item) {\r\n                var itemCustomsValue = item.select('[name=\"customs_value\"]')[0];\r\n\r\n                if (!this.validateElement(itemCustomsValue)) {\r\n                    isValid = false;\r\n                }\r\n            }.bind(this));\r\n\r\n            if (isValid) {\r\n                this.messages.hide().update();\r\n            } else {\r\n                this.messages.show().update(this.validationErrorMsg);\r\n            }\r\n\r\n            return isValid;\r\n        },\r\n\r\n        newPackage: function () {\r\n            var pack = this.template.cloneNode(true);\r\n\r\n            pack.id = 'package_block_' + ++this.packageIncrement;\r\n            pack.addClassName('package-block');\r\n            pack.select('[data-role=package-number]')[0].update(this.packageIncrement);\r\n            this.packagesContent.insert({\r\n                top: pack\r\n            });\r\n            pack.select('[data-action=package-save-items]')[0].hide();\r\n            pack.show();\r\n        },\r\n\r\n        deletePackage: function (obj) {\r\n            var pack = $(obj).up('[id^=\"package_block\"]');\r\n\r\n            var packItems = pack.select('.package_items')[0];\r\n            var packageId = this.getPackageId(pack);\r\n\r\n            delete this.packages[packageId];\r\n            pack.remove();\r\n            this.messages.hide().update();\r\n            this._setAllItemsPackedState();\r\n        },\r\n\r\n        deleteItem: function (obj) {\r\n            var item = $(obj).up('tr');\r\n            var itemId = item.select('[type=\"checkbox\"]')[0].value;\r\n            var pack = $(obj).up('[id^=\"package_block\"]');\r\n            var packItems = pack.select('.package_items')[0];\r\n            var packageId = this.getPackageId(pack);\r\n\r\n            delete this.packages[packageId]['items'][itemId];\r\n\r\n            if (item.offsetParent.rows.length <= 2) { /* head + this last row */\r\n                $(packItems).hide();\r\n            }\r\n            item.remove();\r\n            this.messages.hide().update();\r\n            this._recalcContainerWeightAndCustomsValue(packItems);\r\n            this._setAllItemsPackedState();\r\n        },\r\n\r\n        recalcContainerWeightAndCustomsValue: function (obj) {\r\n            var pack = $(obj).up('[id^=\"package_block\"]');\r\n            var packItems = pack.select('.package_items')[0];\r\n\r\n            if (packItems) {\r\n                if (!this.validateCustomsValue()) {\r\n                    return;\r\n                }\r\n                this._recalcContainerWeightAndCustomsValue(packItems);\r\n            }\r\n        },\r\n\r\n        getItemsForPack: function (obj) {\r\n            if (this.itemsGridUrl) {\r\n                var parameters = $H({\r\n                    'shipment_id': this.shipmentId\r\n                });\r\n                var packageBlock = $(obj).up('[id^=\"package_block\"]');\r\n                var packagePrapare = packageBlock.select('[data-role=package-items]')[0];\r\n                var packagePrapareGrid = packagePrapare.select('.grid_prepare')[0];\r\n\r\n                new Ajax.Request(this.itemsGridUrl, {\r\n                    parameters: parameters,\r\n                    onSuccess: function (transport) {\r\n                        var response = transport.responseText;\r\n\r\n                        if (response) {\r\n                            packagePrapareGrid.update(response);\r\n                            this.processPackagePrepare(packagePrapareGrid);\r\n\r\n                            if (packagePrapareGrid.select('.grid tbody tr').length) {\r\n                                packageBlock.select('[data-action=package-add-items]')[0].hide();\r\n                                packageBlock.select('[data-action=package-save-items]')[0].show();\r\n                                packagePrapare.show();\r\n                            } else {\r\n                                packagePrapareGrid.update();\r\n                            }\r\n                        }\r\n                    }.bind(this)\r\n                });\r\n            }\r\n        },\r\n\r\n        getPackedItemsQty: function () {\r\n            var items = [];\r\n\r\n            for (var packageId in this.packages) {\r\n                if (!isNaN(packageId)) {\r\n                    for (var packedItemId in this.packages[packageId]['items']) {\r\n                        if (!isNaN(packedItemId)) {\r\n                            if (items[packedItemId]) {\r\n                                items[packedItemId] += this.packages[packageId]['items'][packedItemId]['qty'];\r\n                            } else {\r\n                                items[packedItemId] = this.packages[packageId]['items'][packedItemId]['qty'];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return items;\r\n        },\r\n\r\n        _parseQty: function (obj) {\r\n            var qty = $(obj).hasClassName('qty-decimal') ? parseFloat(obj.value) : parseInt(obj.value);\r\n\r\n            if (isNaN(qty) || qty <= 0) {\r\n                qty = 1;\r\n            }\r\n\r\n            return qty;\r\n        },\r\n\r\n        packItems: function (obj) {\r\n            var anySelected = false;\r\n            var packageBlock = $(obj).up('[id^=\"package_block\"]');\r\n            var packageId = this.getPackageId(packageBlock);\r\n            var packagePrepare = packageBlock.select('[data-role=package-items]')[0];\r\n            var packagePrepareGrid = packagePrepare.select('.grid_prepare')[0];\r\n\r\n            // check for exceeds the total shipped quantity\r\n            var checkExceedsQty = false;\r\n\r\n            this.messages.hide().update();\r\n            packagePrepareGrid.select('.grid tbody tr').each(function (item) {\r\n                var checkbox = item.select('[type=\"checkbox\"]')[0];\r\n                var itemId = checkbox.value;\r\n                var qtyValue  = this._parseQty(item.select('[name=\"qty\"]')[0]);\r\n\r\n                item.select('[name=\"qty\"]')[0].value = qtyValue;\r\n\r\n                if (checkbox.checked && this._checkExceedsQty(itemId, qtyValue)) {\r\n                    this.messages.show().update(this.errorQtyOverLimit);\r\n                    checkExceedsQty = true;\r\n                }\r\n            }.bind(this));\r\n\r\n            if (checkExceedsQty) {\r\n                return;\r\n            }\r\n\r\n            if (!this.validateCustomsValue()) {\r\n                return;\r\n            }\r\n\r\n            // prepare items for packing\r\n            packagePrepareGrid.select('.grid tbody tr').each(function (item) {\r\n                var checkbox = item.select('[type=\"checkbox\"]')[0];\r\n\r\n                if (checkbox.checked) {\r\n                    var qty  = item.select('[name=\"qty\"]')[0];\r\n                    var qtyValue  = this._parseQty(qty);\r\n\r\n                    item.select('[name=\"qty\"]')[0].value = qtyValue;\r\n                    anySelected = true;\r\n                    qty.disabled = 'disabled';\r\n                    checkbox.disabled = 'disabled';\r\n                    packagePrepareGrid.select('.grid th [type=\"checkbox\"]')[0].up('th label').hide();\r\n                    item.select('[data-action=package-delete-item]')[0].show();\r\n                } else {\r\n                    item.remove();\r\n                }\r\n            }.bind(this));\r\n\r\n            // packing items\r\n            if (anySelected) {\r\n                var packItems = packageBlock.select('.package_items')[0];\r\n\r\n                if (!packItems) {\r\n                    packagePrepare.insert(new Element('div').addClassName('grid_prepare'));\r\n                    packagePrepare.insert({\r\n                        after: packagePrepareGrid\r\n                    });\r\n                    packItems = packagePrepareGrid.removeClassName('grid_prepare').addClassName('package_items');\r\n                    packItems.select('.grid tbody tr').each(function (item) {\r\n                        var itemId = item.select('[type=\"checkbox\"]')[0].value;\r\n                        var qtyValue  = parseFloat(item.select('[name=\"qty\"]')[0].value);\r\n\r\n                        qtyValue = qtyValue <= 0 ? 1 : qtyValue;\r\n\r\n                        if ('undefined' == typeof this.packages[packageId]) {\r\n                            this.packages[packageId] = {\r\n                                'items': [], 'params': {}\r\n                            };\r\n                        }\r\n\r\n                        if ('undefined' == typeof this.packages[packageId]['items'][itemId]) {\r\n                            this.packages[packageId]['items'][itemId] = {};\r\n                            this.packages[packageId]['items'][itemId]['qty'] = qtyValue;\r\n                        } else {\r\n                            this.packages[packageId]['items'][itemId]['qty'] += qtyValue;\r\n                        }\r\n                    }.bind(this));\r\n                } else {\r\n                    packagePrepareGrid.select('.grid tbody tr').each(function (item) {\r\n                        var itemId = item.select('[type=\"checkbox\"]')[0].value;\r\n                        var qtyValue  = parseFloat(item.select('[name=\"qty\"]')[0].value);\r\n\r\n                        qtyValue = qtyValue <= 0 ? 1 : qtyValue;\r\n\r\n                        if ('undefined' == typeof this.packages[packageId]['items'][itemId]) {\r\n                            this.packages[packageId]['items'][itemId] = {};\r\n                            this.packages[packageId]['items'][itemId]['qty'] = qtyValue;\r\n                            packItems.select('.grid tbody')[0].insert(item);\r\n                        } else {\r\n                            this.packages[packageId]['items'][itemId]['qty'] += qtyValue;\r\n                            var packItem = packItems.select('[type=\"checkbox\"][value=\"' + itemId + '\"]')[0].up('tr').select('[name=\"qty\"]')[0];\r\n\r\n                            packItem.value = this.packages[packageId]['items'][itemId]['qty'];\r\n                        }\r\n                    }.bind(this));\r\n                    packagePrepareGrid.update();\r\n                }\r\n                $(packItems).show();\r\n                this._recalcContainerWeightAndCustomsValue(packItems);\r\n            } else {\r\n                packagePrepareGrid.update();\r\n            }\r\n\r\n            // show/hide disable/enable\r\n            packagePrepare.hide();\r\n            packageBlock.select('[data-action=package-save-items]')[0].hide();\r\n            packageBlock.select('[data-action=package-add-items]')[0].show();\r\n            this._setAllItemsPackedState();\r\n        },\r\n\r\n        validateItemQty: function (itemId, qty) {\r\n            return this.defaultItemsQty[itemId] < qty ? this.defaultItemsQty[itemId] : qty;\r\n        },\r\n\r\n        changeMeasures: function (obj) {\r\n            var incr = 0;\r\n            var incrSelected = 0;\r\n\r\n            obj.childElements().each(function (option) {\r\n                if (option.selected) {\r\n                    incrSelected = incr;\r\n                }\r\n                incr++;\r\n            });\r\n\r\n            var packageBlock = $(obj).up('[id^=\"package_block\"]');\r\n\r\n            packageBlock.select('.measures').each(function (item) {\r\n                if (item.name != obj.name) {\r\n                    var incr = 0;\r\n\r\n                    item.select('option').each(function (option) {\r\n                        if (incr == incrSelected) {\r\n                            item.value = option.value;\r\n                            //option.selected = true\r\n                        }\r\n                        incr++;\r\n                    });\r\n                }\r\n            });\r\n\r\n        },\r\n\r\n        checkSizeAndGirthParameter: function (obj, enabled) {\r\n            if (enabled == 0) {\r\n                return;\r\n            }\r\n            var currentNode = obj;\r\n\r\n            while (currentNode.nodeName != 'TBODY') {\r\n                currentNode = currentNode.parentNode;\r\n            }\r\n\r\n            if (!currentNode) {\r\n                return;\r\n            }\r\n\r\n            var packageSize = currentNode.select('select[name=package_size]');\r\n            var packageContainer = currentNode.select('select[name=package_container]');\r\n            var packageGirth = currentNode.select('input[name=container_girth]');\r\n            var packageGirthDimensionUnits = currentNode.select('select[name=container_girth_dimension_units]');\r\n\r\n            if (packageSize.length <= 0) {\r\n                return;\r\n            }\r\n\r\n            var girthEnabled = packageContainer[0].value == 'NONRECTANGULAR' || packageContainer[0].value == 'VARIABLE';\r\n\r\n            if (!girthEnabled) {\r\n                packageGirth[0].value = '';\r\n                packageGirth[0].disable();\r\n                packageGirth[0].addClassName('_disabled');\r\n                packageGirthDimensionUnits[0].disable();\r\n                packageGirthDimensionUnits[0].addClassName('_disabled');\r\n            } else {\r\n                packageGirth[0].enable();\r\n                packageGirth[0].removeClassName('_disabled');\r\n                packageGirthDimensionUnits[0].enable();\r\n                packageGirthDimensionUnits[0].removeClassName('_disabled');\r\n            }\r\n\r\n            var sizeEnabled = packageContainer[0].value == 'NONRECTANGULAR' || packageContainer[0].value == 'RECTANGULAR' ||\r\n                packageContainer[0].value == 'VARIABLE';\r\n\r\n            if (!sizeEnabled) {\r\n                option = document.createElement('OPTION');\r\n                option.value = '';\r\n                option.text = '';\r\n                packageSize[0].options.add(option);\r\n                packageSize[0].value = '';\r\n                packageSize[0].disable();\r\n                packageSize[0].addClassName('_disabled');\r\n            } else {\r\n                for (i = 0; i < packageSize[0].length; i++) {\r\n                    if (packageSize[0].options[i].value == '') {\r\n                        packageSize[0].removeChild(packageSize[0].options[i]);\r\n                    }\r\n                }\r\n                packageSize[0].enable();\r\n                packageSize[0].removeClassName('_disabled');\r\n            }\r\n        },\r\n\r\n        changeContainerType: function (obj) {\r\n            if (this.customizableContainers.length <= 0) {\r\n                return;\r\n            }\r\n\r\n            var disable = true;\r\n\r\n            for (var i in this.customizableContainers) {\r\n                if (this.customizableContainers[i] == obj.value) {\r\n                    disable = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            var currentNode = obj;\r\n\r\n            while (currentNode.nodeName != 'TBODY') {\r\n                currentNode = currentNode.parentNode;\r\n            }\r\n\r\n            if (!currentNode) {\r\n                return;\r\n            }\r\n\r\n            $(currentNode).select(\r\n                'input[name=container_length],input[name=container_width],input[name=container_height],select[name=container_dimension_units]'\r\n            ).each(function (inputElement) {\r\n                if (disable) {\r\n                    Form.Element.disable(inputElement);\r\n                    inputElement.addClassName('_disabled');\r\n\r\n                    if (inputElement.nodeName == 'INPUT') {\r\n                        $(inputElement).value = '';\r\n                    }\r\n                } else {\r\n                    Form.Element.enable(inputElement);\r\n                    inputElement.removeClassName('_disabled');\r\n                }\r\n            });\r\n        },\r\n\r\n        changeContentTypes: function (obj) {\r\n            var packageBlock = $(obj).up('[id^=\"package_block\"]');\r\n            var contentType = packageBlock.select('[name=content_type]')[0];\r\n            var contentTypeOther = packageBlock.select('[name=content_type_other]')[0];\r\n\r\n            if (contentType.value == 'OTHER') {\r\n                Form.Element.enable(contentTypeOther);\r\n                contentTypeOther.removeClassName('_disabled');\r\n            } else {\r\n                Form.Element.disable(contentTypeOther);\r\n                contentTypeOther.addClassName('_disabled');\r\n            }\r\n\r\n        },\r\n\r\n        //******************** Private functions **********************************//\r\n        _getItemsCount: function (items) {\r\n            var count = 0;\r\n\r\n            items.each(function (itemCount) {\r\n                if (!isNaN(itemCount)) {\r\n                    count += parseFloat(itemCount);\r\n                }\r\n            });\r\n\r\n            return count;\r\n        },\r\n\r\n        /**\r\n         * Show/hide disable/enable buttons in case of all items packed state\r\n         */\r\n        _setAllItemsPackedState: function () {\r\n            var addPackageBtn = $$('[data-action=add-packages]')[0];\r\n            var savePackagesBtn = $$('[data-action=save-packages]')[0];\r\n\r\n            if (this._getItemsCount(this.itemsAll) > 0 &&\r\n                    this._checkExceedsQtyFinal(this._getItemsCount(this.getPackedItemsQty()), this._getItemsCount(this.itemsAll))\r\n            ) {\r\n                this.packagesContent.select('[data-action=package-add-items]').each(function (button) {\r\n                    button.disabled = 'disabled';\r\n                    button.addClassName('_disabled');\r\n                });\r\n                addPackageBtn.addClassName('_disabled');\r\n                Form.Element.disable(addPackageBtn);\r\n                savePackagesBtn.removeClassName('_disabled');\r\n                Form.Element.enable(savePackagesBtn);\r\n                savePackagesBtn.title = '';\r\n\r\n                // package number recalculation\r\n                var packagesRecalc = [];\r\n\r\n                this.packagesContent.childElements().each(function (pack) {\r\n                    if (!pack.select('.package_items .grid tbody tr').length) {\r\n                        pack.remove();\r\n                    }\r\n                });\r\n                var packagesCount = this.packagesContent.childElements().length;\r\n\r\n                this.packageIncrement = packagesCount;\r\n                this.packagesContent.childElements().each(function (pack) {\r\n                    var packageId = this.getPackageId(pack);\r\n\r\n                    pack.id = 'package_block_' + packagesCount;\r\n                    pack.select('[data-role=package-number]')[0].update(packagesCount);\r\n                    packagesRecalc[packagesCount] = this.packages[packageId];\r\n                    --packagesCount;\r\n                }.bind(this));\r\n                this.packages = packagesRecalc;\r\n\r\n            } else {\r\n                this.packagesContent.select('[data-action=package-add-items]').each(function (button) {\r\n                    button.removeClassName('_disabled');\r\n                    Form.Element.enable(button);\r\n                });\r\n                addPackageBtn.removeClassName('_disabled');\r\n                Form.Element.enable(addPackageBtn);\r\n                savePackagesBtn.addClassName('_disabled');\r\n                Form.Element.disable(savePackagesBtn);\r\n                savePackagesBtn.title = this.titleDisabledSaveBtn;\r\n            }\r\n        },\r\n\r\n        processPackagePrepare: function (packagePrepare) {\r\n            var itemsAll = [],\r\n                qty,\r\n                itemId,\r\n                qtyValue = 0,\r\n                value = 1;\r\n\r\n            packagePrepare.select('.grid tbody tr').each(function (item) {\r\n                qty = item.select('[name=\"qty\"]')[0],\r\n                    itemId = item.select('[type=\"checkbox\"]')[0].value,\r\n                    qtyValue = parseFloat(qty.value);\r\n\r\n                if (Object.isFunction(this.itemQtyCallback)) {\r\n                    value = this.itemQtyCallback(itemId);\r\n\r\n                    if (typeof value !== 'undefined') {\r\n                        qtyValue = parseFloat(value);\r\n                        qtyValue = this.validateItemQty(itemId, qtyValue);\r\n                        qty.value = qtyValue;\r\n                    }\r\n                } else {\r\n                    value = item.select('[name=\"qty\"]')[0].value;\r\n                    qtyValue = typeof value == 'string' && value.length == 0 ? 0 : parseFloat(value);\r\n\r\n                    if (isNaN(qtyValue) || qtyValue < 0) {\r\n                        qtyValue = 1;\r\n                    }\r\n                }\r\n\r\n                if (qtyValue == 0) {\r\n                    item.remove();\r\n\r\n                    return;\r\n                }\r\n                var packedItems = this.getPackedItemsQty();\r\n\r\n                itemsAll[itemId] = qtyValue;\r\n\r\n                for (var packedItemId in packedItems) {\r\n                    if (!isNaN(packedItemId)) {\r\n                        var packedQty = packedItems[packedItemId];\r\n\r\n                        if (itemId == packedItemId) {\r\n                            if (qtyValue == packedQty || qtyValue <= packedQty) {\r\n                                item.remove();\r\n                            } else if (qtyValue > packedQty) {\r\n                                /* fix float number precision */\r\n                                qty.value = Number(Number(Math.round(qtyValue - packedQty + 'e+4') + 'e-4').toFixed(4));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }.bind(this));\r\n\r\n            if (!this.itemsAll.length) {\r\n                this.itemsAll = itemsAll;\r\n            }\r\n\r\n            packagePrepare.select('tbody input[type=\"checkbox\"]').each(function (item) {\r\n                $(item).observe('change', this._observeQty);\r\n                this._observeQty.call(item);\r\n            }.bind(this));\r\n        },\r\n\r\n        _observeQty: function () {\r\n            /** this = input[type=\"checkbox\"] */\r\n            var tr  = jQuery(this).closest('tr')[0],\r\n                qty = $(tr.cells[tr.cells.length - 1]).select('input[name=\"qty\"]')[0];\r\n\r\n            if (qty.disabled = !this.checked) {\r\n                $(qty).addClassName('_disabled');\r\n            } else {\r\n                $(qty).removeClassName('_disabled');\r\n            }\r\n        },\r\n\r\n        _checkExceedsQty: function (itemId, qty) {\r\n            var packedItemQty = this.getPackedItemsQty()[itemId] ? this.getPackedItemsQty()[itemId] : 0;\r\n            var allItemQty = this.itemsAll[itemId];\r\n\r\n            return qty * (1 - this.eps) > allItemQty *  (1 + this.eps)  - packedItemQty * (1 - this.eps);\r\n        },\r\n\r\n        _checkExceedsQtyFinal: function (checkOne, defQty) {\r\n            return checkOne * (1 + this.eps) >= defQty * (1 - this.eps);\r\n        },\r\n\r\n        _recalcContainerWeightAndCustomsValue: function (container) {\r\n            var packageBlock = container.up('[id^=\"package_block\"]');\r\n            var packageId = this.getPackageId(packageBlock);\r\n            var containerWeight = packageBlock.select('[name=\"container_weight\"]')[0];\r\n            var containerCustomsValue = packageBlock.select('[name=\"package_customs_value\"]')[0];\r\n\r\n            containerWeight.value = 0;\r\n            containerCustomsValue.value = 0;\r\n            container.select('.grid tbody tr').each(function (item) {\r\n                var itemId = item.select('[type=\"checkbox\"]')[0].value;\r\n                var qtyValue  = parseFloat(item.select('[name=\"qty\"]')[0].value);\r\n\r\n                if (isNaN(qtyValue) || qtyValue <= 0) {\r\n                    qtyValue = 1;\r\n                    item.select('[name=\"qty\"]')[0].value = qtyValue;\r\n                }\r\n                var itemWeight = parseFloat(this._getElementText(item.select('[data-role=item-weight]')[0]));\r\n\r\n                containerWeight.value = parseFloat(containerWeight.value) + itemWeight * qtyValue;\r\n                var itemCustomsValue = parseFloat(item.select('[name=\"customs_value\"]')[0].value) || 0;\r\n\r\n                containerCustomsValue.value = parseFloat(containerCustomsValue.value) + itemCustomsValue * qtyValue;\r\n                this.packages[packageId]['items'][itemId]['customs_value'] = itemCustomsValue;\r\n            }.bind(this));\r\n            containerWeight.value = parseFloat(parseFloat(Math.round(containerWeight.value + 'e+4') + 'e-4').toFixed(4));\r\n            containerCustomsValue.value = parseFloat(Math.round(containerCustomsValue.value + 'e+2') + 'e-2').toFixed(2);\r\n\r\n            if (containerCustomsValue.value == 0) {\r\n                containerCustomsValue.value = '';\r\n            }\r\n        },\r\n\r\n        _getElementText: function (el) {\r\n            if ('string' == typeof el.textContent) {\r\n                return el.textContent;\r\n            }\r\n\r\n            if ('string' == typeof el.innerText) {\r\n                return el.innerText;\r\n            }\r\n\r\n            return el.innerHTML.replace(/<[^>]*>/g, '');\r\n        }\r\n        //******************** End Private functions ******************************//\r\n    };\r\n\r\n});\r\n","Magento_Signifyd/js/request-send.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'mageUtils',\r\n    'Magento_Ui/js/form/components/button'\r\n], function (utils, Button) {\r\n    'use strict';\r\n\r\n    return Button.extend({\r\n\r\n        /**\r\n         * Creates and submits form for Guarantee create/cancel\r\n         */\r\n        sendRequest: function () {\r\n            utils.submit({\r\n                url: this.requestURL,\r\n                data: this.data\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Sitemap/js/form-submit-loader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (data, element) {\r\n\r\n        $(element).on('save', function () {\r\n            if ($(this).valid()) {\r\n                $('body').trigger('processStart');\r\n            }\r\n        });\r\n    };\r\n});\r\n","Magento_Swatches/js/product-attributes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'uiRegistry',\r\n    'collapsable'\r\n], function ($, alert, prompt, rg) {\r\n    'use strict';\r\n\r\n    return function (optionConfig) {\r\n        var activePanelClass = 'selected-type-options',\r\n            swatchProductAttributes = {\r\n                frontendInput: $('#frontend_input'),\r\n                isFilterable: $('#is_filterable'),\r\n                isFilterableInSearch: $('#is_filterable_in_search'),\r\n                backendType: $('#backend_type'),\r\n                usedForSortBy: $('#used_for_sort_by'),\r\n                frontendClass: $('#frontend_class'),\r\n                isWysiwygEnabled: $('#is_wysiwyg_enabled'),\r\n                isHtmlAllowedOnFront: $('#is_html_allowed_on_front'),\r\n                isRequired: $('#is_required'),\r\n                isUnique: $('#is_unique'),\r\n                defaultValueText: $('#default_value_text'),\r\n                defaultValueTextarea: $('#default_value_textarea'),\r\n                defaultValueDate: $('#default_value_date'),\r\n                defaultValueYesno: $('#default_value_yesno'),\r\n                isGlobal: $('#is_global'),\r\n                useProductImageForSwatch: $('#use_product_image_for_swatch'),\r\n                updateProductPreviewImage: $('#update_product_preview_image'),\r\n                usedInProductListing: $('#used_in_product_listing'),\r\n                isVisibleOnFront: $('#is_visible_on_front'),\r\n                position: $('#position'),\r\n                attrTabsFront: $('#product_attribute_tabs_front'),\r\n\r\n                /**\r\n                 * @returns {*|jQuery|HTMLElement}\r\n                 */\r\n                get tabsFront() {\r\n                    return this.attrTabsFront.length ? this.attrTabsFront.closest('li') : $('#front_fieldset-wrapper');\r\n                },\r\n                selectFields: ['boolean', 'select', 'multiselect', 'price', 'swatch_text', 'swatch_visual'],\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                toggleApplyVisibility: function (select) {\r\n                    if ($(select).val() === 1) {\r\n                        $(select).next('select').removeClass('no-display');\r\n                        $(select).next('select').removeClass('ignore-validate');\r\n                    } else {\r\n                        $(select).next('select').addClass('no-display');\r\n                        $(select).next('select').addClass('ignore-validate');\r\n                        $(select).next('select option:selected').each(function () {\r\n                            this.selected = false;\r\n                        });\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                checkOptionsPanelVisibility: function () {\r\n                    var selectOptionsPanel = $('#manage-options-panel'),\r\n                        visualOptionsPanel = $('#swatch-visual-options-panel'),\r\n                        textOptionsPanel = $('#swatch-text-options-panel');\r\n\r\n                    this._hidePanel(selectOptionsPanel);\r\n                    this._hidePanel(visualOptionsPanel);\r\n                    this._hidePanel(textOptionsPanel);\r\n\r\n                    switch (this.frontendInput.val()) {\r\n                        case 'swatch_visual':\r\n                            this._showPanel(visualOptionsPanel);\r\n                            break;\r\n\r\n                        case 'swatch_text':\r\n                            this._showPanel(textOptionsPanel);\r\n                            break;\r\n\r\n                        case 'select':\r\n                        case 'multiselect':\r\n                            this._showPanel(selectOptionsPanel);\r\n                            break;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                bindAttributeInputType: function () {\r\n                    this.checkOptionsPanelVisibility();\r\n                    this.switchDefaultValueField();\r\n\r\n                    if (!~$.inArray(this.frontendInput.val(), this.selectFields)) {\r\n                        // not in array\r\n                        this.isFilterable.selectedIndex = 0;\r\n                        this._disable(this.isFilterable);\r\n                        this._disable(this.isFilterableInSearch);\r\n                    } else {\r\n                        // in array\r\n                        this._enable(this.isFilterable);\r\n                        this._enable(this.isFilterableInSearch);\r\n                        this.backendType.val('int');\r\n                    }\r\n\r\n                    if (this.frontendInput.val() === 'multiselect' ||\r\n                        this.frontendInput.val() === 'gallery' ||\r\n                        this.frontendInput.val() === 'textarea'\r\n                    ) {\r\n                        this._disable(this.usedForSortBy);\r\n                    } else {\r\n                        this._enable(this.usedForSortBy);\r\n                    }\r\n\r\n                    if (this.frontendInput.val() === 'swatch_text') {\r\n                        $('.swatch-text-field-0').addClass('required-option');\r\n                    } else {\r\n                        $('.swatch-text-field-0').removeClass('required-option');\r\n                    }\r\n\r\n                    this.setRowVisibility(this.isWysiwygEnabled, false);\r\n                    this.setRowVisibility(this.isHtmlAllowedOnFront, false);\r\n\r\n                    switch (this.frontendInput.val()) {\r\n                        case 'textarea':\r\n                            this.setRowVisibility(this.isWysiwygEnabled, true);\r\n\r\n                            if (this.isWysiwygEnabled.val() === '0') {\r\n                                this._enable(this.isHtmlAllowedOnFront);\r\n                            }\r\n                            this.frontendClass.val('');\r\n                            this._disable(this.frontendClass);\r\n                            break;\r\n\r\n                        case 'text':\r\n                            this.setRowVisibility(this.isHtmlAllowedOnFront, true);\r\n                            this._enable(this.frontendClass);\r\n                            break;\r\n\r\n                        case 'select':\r\n                        case 'multiselect':\r\n                            this.setRowVisibility(this.isHtmlAllowedOnFront, true);\r\n                            this.frontendClass.val('');\r\n                            this._disable(this.frontendClass);\r\n                            break;\r\n                        default:\r\n                            this.frontendClass.val('');\r\n                            this._disable(this.frontendClass);\r\n                    }\r\n\r\n                    this.switchIsFilterable();\r\n                },\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                switchIsFilterable: function () {\r\n                    if (this.isFilterable.selectedIndex === 0) {\r\n                        this._disable(this.position);\r\n                    } else {\r\n                        this._enable(this.position);\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                switchDefaultValueField: function () {\r\n                    var currentValue = this.frontendInput.val(),\r\n                        defaultValueTextVisibility = false,\r\n                        defaultValueTextareaVisibility = false,\r\n                        defaultValueDateVisibility = false,\r\n                        defaultValueYesnoVisibility = false,\r\n                        scopeVisibility = true,\r\n                        useProductImageForSwatch = false,\r\n                        defaultValueUpdateImage = false,\r\n                        optionDefaultInputType = '',\r\n                        isFrontTabHidden = false,\r\n                        thing = this;\r\n\r\n                    if (!this.frontendInput.length) {\r\n                        return;\r\n                    }\r\n\r\n                    switch (currentValue) {\r\n                        case 'select':\r\n                            optionDefaultInputType = 'radio';\r\n                            break;\r\n\r\n                        case 'multiselect':\r\n                            optionDefaultInputType = 'checkbox';\r\n                            break;\r\n\r\n                        case 'date':\r\n                            defaultValueDateVisibility = true;\r\n                            break;\r\n\r\n                        case 'boolean':\r\n                            defaultValueYesnoVisibility = true;\r\n                            break;\r\n\r\n                        case 'textarea':\r\n                        case 'texteditor':\r\n                            defaultValueTextareaVisibility = true;\r\n                            break;\r\n\r\n                        case 'media_image':\r\n                            defaultValueTextVisibility = false;\r\n                            break;\r\n\r\n                        case 'price':\r\n                            scopeVisibility = false;\r\n                            break;\r\n\r\n                        case 'swatch_visual':\r\n                            useProductImageForSwatch = true;\r\n                            defaultValueUpdateImage = true;\r\n                            defaultValueTextVisibility = false;\r\n                            break;\r\n\r\n                        case 'swatch_text':\r\n                            useProductImageForSwatch = false;\r\n                            defaultValueUpdateImage = true;\r\n                            defaultValueTextVisibility = false;\r\n                            break;\r\n                        default:\r\n                            defaultValueTextVisibility = true;\r\n                            break;\r\n                    }\r\n\r\n                    delete optionConfig.hiddenFields['swatch_visual'];\r\n                    delete optionConfig.hiddenFields['swatch_text'];\r\n\r\n                    if (currentValue === 'media_image') {\r\n                        this.tabsFront.hide();\r\n                        this.setRowVisibility(this.isRequired, false);\r\n                        this.setRowVisibility(this.isUnique, false);\r\n                        this.setRowVisibility(this.frontendClass, false);\r\n                    } else if (optionConfig.hiddenFields[currentValue]) {\r\n                        $.each(optionConfig.hiddenFields[currentValue], function (key, option) {\r\n                            switch (option) {\r\n                                case '_front_fieldset':\r\n                                    thing.tabsFront.hide();\r\n                                    isFrontTabHidden = true;\r\n                                    break;\r\n\r\n                                case '_default_value':\r\n                                    defaultValueTextVisibility = false;\r\n                                    defaultValueTextareaVisibility = false;\r\n                                    defaultValueDateVisibility = false;\r\n                                    defaultValueYesnoVisibility = false;\r\n                                    break;\r\n\r\n                                case '_scope':\r\n                                    scopeVisibility = false;\r\n                                    break;\r\n                                default:\r\n                                    thing.setRowVisibility($('#' + option), false);\r\n                            }\r\n                        });\r\n\r\n                        if (!isFrontTabHidden) {\r\n                            thing.tabsFront.show();\r\n                        }\r\n\r\n                    } else {\r\n                        this.tabsFront.show();\r\n                        this.showDefaultRows();\r\n                    }\r\n\r\n                    this.setRowVisibility(this.defaultValueText, defaultValueTextVisibility);\r\n                    this.setRowVisibility(this.defaultValueTextarea, defaultValueTextareaVisibility);\r\n                    this.setRowVisibility(this.defaultValueDate, defaultValueDateVisibility);\r\n                    this.setRowVisibility(this.defaultValueYesno, defaultValueYesnoVisibility);\r\n                    this.setRowVisibility(this.isGlobal, scopeVisibility);\r\n\r\n                    /* swatch attributes */\r\n                    this.setRowVisibility(this.useProductImageForSwatch, useProductImageForSwatch);\r\n                    this.setRowVisibility(this.updateProductPreviewImage, defaultValueUpdateImage);\r\n\r\n                    $('input[name=\\'default[]\\']').each(function () {\r\n                        $(this).attr('type', optionDefaultInputType);\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                showDefaultRows: function () {\r\n                    this.setRowVisibility(this.isRequired, true);\r\n                    this.setRowVisibility(this.isUnique, true);\r\n                    this.setRowVisibility(this.frontendClass, true);\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} el\r\n                 * @param {Boolean} isVisible\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                setRowVisibility: function (el, isVisible) {\r\n                    if (isVisible) {\r\n                        el.show();\r\n                        el.closest('.field').show();\r\n                    } else {\r\n                        el.hide();\r\n                        el.closest('.field').hide();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} el\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                _disable: function (el) {\r\n                    el.attr('disabled', 'disabled');\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} el\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                _enable: function (el) {\r\n                    if (!el.attr('readonly')) {\r\n                        el.removeAttr('disabled');\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} el\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                _showPanel: function (el) {\r\n                    el.closest('.fieldset').show();\r\n                    el.addClass(activePanelClass);\r\n                    this._render(el.attr('id'));\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} el\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                _hidePanel: function (el) {\r\n                    el.closest('.fieldset').hide();\r\n                    el.removeClass(activePanelClass);\r\n                },\r\n\r\n                /**\r\n                 * @param {String} id\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                _render: function (id) {\r\n                    rg.get(id, function () {\r\n                        $('#' + id).trigger('render');\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @param {String} promptMessage\r\n                 * @this {swatchProductAttributes}\r\n                 */\r\n                saveAttributeInNewSet: function (promptMessage) {\r\n\r\n                    prompt({\r\n                        content: promptMessage,\r\n                        actions: {\r\n\r\n                            /**\r\n                             * @param {String} val\r\n                             * @this {actions}\r\n                             */\r\n                            confirm: function (val) {\r\n                                var rules = ['required-entry', 'validate-no-html-tags'],\r\n                                    newAttributeSetNameInputId = $('#new_attribute_set_name'),\r\n                                    editForm = $('#edit_form'),\r\n                                    newAttributeSetName = val,\r\n                                    i;\r\n\r\n                                if (!newAttributeSetName) {\r\n                                    return;\r\n                                }\r\n\r\n                                for (i = 0; i < rules.length; i++) {\r\n                                    if (!$.validator.methods[rules[i]](newAttributeSetName)) {\r\n                                        alert({\r\n                                            content: $.validator.messages[rules[i]]\r\n                                        });\r\n\r\n                                        return;\r\n                                    }\r\n                                }\r\n\r\n                                if (newAttributeSetNameInputId.length) {\r\n                                    newAttributeSetNameInputId.val(newAttributeSetName);\r\n                                } else {\r\n                                    editForm.append(new Element('input', {\r\n                                            type: 'hidden',\r\n                                            id: newAttributeSetNameInputId,\r\n                                            name: 'new_attribute_set_name',\r\n                                            value: newAttributeSetName\r\n                                        })\r\n                                    );\r\n                                }\r\n                                // Temporary solution will replaced after refactoring of attributes functionality\r\n                                editForm.triggerHandler('save');\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n\r\n        $(function () {\r\n            var editForm = $('#edit_form'),\r\n                swatchVisualPanel = $('#swatch-visual-options-panel'),\r\n                swatchTextPanel = $('#swatch-text-options-panel'),\r\n                tableBody = $(),\r\n                activePanel = $();\r\n\r\n            $('#frontend_input').bind('change', function () {\r\n                swatchProductAttributes.bindAttributeInputType();\r\n            });\r\n            $('#is_filterable').bind('change', function () {\r\n                swatchProductAttributes.switchIsFilterable();\r\n            });\r\n\r\n            swatchProductAttributes.bindAttributeInputType();\r\n\r\n            // @todo: refactor collapsible component\r\n            $('.attribute-popup .collapse, [data-role=\"advanced_fieldset-content\"]')\r\n                .collapsable()\r\n                .collapse('hide');\r\n\r\n            editForm.on('beforeSubmit', function () {\r\n                var optionContainer, optionsValues;\r\n\r\n                activePanel = swatchTextPanel.hasClass(activePanelClass) ? swatchTextPanel : swatchVisualPanel;\r\n                optionContainer = activePanel.find('table tbody');\r\n\r\n                if (activePanel.hasClass(activePanelClass)) {\r\n                    optionsValues = $.map(\r\n                        optionContainer.find('tr'),\r\n                        function (row) {\r\n                            return $(row).find('input, select, textarea').serialize();\r\n                        }\r\n                    );\r\n                    $('<input>')\r\n                        .attr({\r\n                            type: 'hidden',\r\n                            name: 'serialized_options'\r\n                        })\r\n                        .val(JSON.stringify(optionsValues))\r\n                        .prependTo(editForm);\r\n                }\r\n\r\n                tableBody = optionContainer.detach();\r\n            });\r\n\r\n            editForm.on('afterValidate.error highlight.validate', function () {\r\n                if (activePanel.hasClass(activePanelClass)) {\r\n                    activePanel.find('table').append(tableBody);\r\n                    $('input[name=\"serialized_options\"]').remove();\r\n                }\r\n            });\r\n        });\r\n\r\n        window.saveAttributeInNewSet = swatchProductAttributes.saveAttributeInNewSet;\r\n        window.toggleApplyVisibility = swatchProductAttributes.toggleApplyVisibility;\r\n    };\r\n});\r\n","Magento_Swatches/js/swatch-renderer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'mage/smart-keyboard-handler',\r\n    'mage/translate',\r\n    'priceUtils',\r\n    'jquery-ui-modules/widget',\r\n    'jquery/jquery.parsequery',\r\n    'mage/validation/validation'\r\n], function ($, _, mageTemplate, keyboardHandler, $t, priceUtils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Extend form validation to support swatch accessibility\r\n     */\r\n    $.widget('mage.validation', $.mage.validation, {\r\n        /**\r\n         * Handle form with swatches validation. Focus on first invalid swatch block.\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} validation\r\n         */\r\n        listenFormValidateHandler: function (event, validation) {\r\n            var swatchWrapper, firstActive, swatches, swatch, successList, errorList, firstSwatch;\r\n\r\n            this._superApply(arguments);\r\n\r\n            swatchWrapper = '.swatch-attribute-options';\r\n            swatches = $(event.target).find(swatchWrapper);\r\n\r\n            if (!swatches.length) {\r\n                return;\r\n            }\r\n\r\n            swatch = '.swatch-attribute';\r\n            firstActive = $(validation.errorList[0].element || []);\r\n            successList = validation.successList;\r\n            errorList = validation.errorList;\r\n            firstSwatch = $(firstActive).parent(swatch).find(swatchWrapper);\r\n\r\n            keyboardHandler.focus(swatches);\r\n\r\n            $.each(successList, function (index, item) {\r\n                $(item).parent(swatch).find(swatchWrapper).attr('aria-invalid', false);\r\n            });\r\n\r\n            $.each(errorList, function (index, item) {\r\n                $(item.element).parent(swatch).find(swatchWrapper).attr('aria-invalid', true);\r\n            });\r\n\r\n            if (firstSwatch.length) {\r\n                $(firstSwatch).focus();\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Render tooltips by attributes (only to up).\r\n     * Required element attributes:\r\n     *  - option-type (integer, 0-3)\r\n     *  - option-label (string)\r\n     *  - option-tooltip-thumb\r\n     *  - option-tooltip-value\r\n     *  - thumb-width\r\n     *  - thumb-height\r\n     */\r\n    $.widget('mage.SwatchRendererTooltip', {\r\n        options: {\r\n            delay: 200,                             //how much ms before tooltip to show\r\n            tooltipClass: 'swatch-option-tooltip'  //configurable, but remember about css\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            var $widget = this,\r\n                $this = this.element,\r\n                $element = $('.' + $widget.options.tooltipClass),\r\n                timer,\r\n                type = parseInt($this.attr('option-type'), 10),\r\n                label = $this.attr('option-label'),\r\n                thumb = $this.attr('option-tooltip-thumb'),\r\n                value = $this.attr('option-tooltip-value'),\r\n                width = $this.attr('thumb-width'),\r\n                height = $this.attr('thumb-height'),\r\n                $image,\r\n                $title,\r\n                $corner;\r\n\r\n            if (!$element.length) {\r\n                $element = $('<div class=\"' +\r\n                    $widget.options.tooltipClass +\r\n                    '\"><div class=\"image\"></div><div class=\"title\"></div><div class=\"corner\"></div></div>'\r\n                );\r\n                $('body').append($element);\r\n            }\r\n\r\n            $image = $element.find('.image');\r\n            $title = $element.find('.title');\r\n            $corner = $element.find('.corner');\r\n\r\n            $this.hover(function () {\r\n                if (!$this.hasClass('disabled')) {\r\n                    timer = setTimeout(\r\n                        function () {\r\n                            var leftOpt = null,\r\n                                leftCorner = 0,\r\n                                left,\r\n                                $window;\r\n\r\n                            if (type === 2) {\r\n                                // Image\r\n                                $image.css({\r\n                                    'background': 'url(\"' + thumb + '\") no-repeat center', //Background case\r\n                                    'background-size': 'initial',\r\n                                    'width': width + 'px',\r\n                                    'height': height + 'px'\r\n                                });\r\n                                $image.show();\r\n                            } else if (type === 1) {\r\n                                // Color\r\n                                $image.css({\r\n                                    background: value\r\n                                });\r\n                                $image.show();\r\n                            } else if (type === 0 || type === 3) {\r\n                                // Default\r\n                                $image.hide();\r\n                            }\r\n\r\n                            $title.text(label);\r\n\r\n                            leftOpt = $this.offset().left;\r\n                            left = leftOpt + $this.width() / 2 - $element.width() / 2;\r\n                            $window = $(window);\r\n\r\n                            // the numbers (5 and 5) is magick constants for offset from left or right page\r\n                            if (left < 0) {\r\n                                left = 5;\r\n                            } else if (left + $element.width() > $window.width()) {\r\n                                left = $window.width() - $element.width() - 5;\r\n                            }\r\n\r\n                            // the numbers (6,  3 and 18) is magick constants for offset tooltip\r\n                            leftCorner = 0;\r\n\r\n                            if ($element.width() < $this.width()) {\r\n                                leftCorner = $element.width() / 2 - 3;\r\n                            } else {\r\n                                leftCorner = (leftOpt > left ? leftOpt - left : left - leftOpt) + $this.width() / 2 - 6;\r\n                            }\r\n\r\n                            $corner.css({\r\n                                left: leftCorner\r\n                            });\r\n                            $element.css({\r\n                                left: left,\r\n                                top: $this.offset().top - $element.height() - $corner.height() - 18\r\n                            }).show();\r\n                        },\r\n                        $widget.options.delay\r\n                    );\r\n                }\r\n            }, function () {\r\n                $element.hide();\r\n                clearTimeout(timer);\r\n            });\r\n\r\n            $(document).on('tap', function () {\r\n                $element.hide();\r\n                clearTimeout(timer);\r\n            });\r\n\r\n            $this.on('tap', function (event) {\r\n                event.stopPropagation();\r\n            });\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Render swatch controls with options and use tooltips.\r\n     * Required two json:\r\n     *  - jsonConfig (magento's option config)\r\n     *  - jsonSwatchConfig (swatch's option config)\r\n     *\r\n     *  Tuning:\r\n     *  - numberToShow (show \"more\" button if options are more)\r\n     *  - onlySwatches (hide selectboxes)\r\n     *  - moreButtonText (text for \"more\" button)\r\n     *  - selectorProduct (selector for product container)\r\n     *  - selectorProductPrice (selector for change price)\r\n     */\r\n    $.widget('mage.SwatchRenderer', {\r\n        options: {\r\n            classes: {\r\n                attributeClass: 'swatch-attribute',\r\n                attributeLabelClass: 'swatch-attribute-label',\r\n                attributeSelectedOptionLabelClass: 'swatch-attribute-selected-option',\r\n                attributeOptionsWrapper: 'swatch-attribute-options',\r\n                attributeInput: 'swatch-input',\r\n                optionClass: 'swatch-option',\r\n                selectClass: 'swatch-select',\r\n                moreButton: 'swatch-more',\r\n                loader: 'swatch-option-loading'\r\n            },\r\n            // option's json config\r\n            jsonConfig: {},\r\n\r\n            // swatch's json config\r\n            jsonSwatchConfig: {},\r\n\r\n            // selector of parental block of prices and swatches (need to know where to seek for price block)\r\n            selectorProduct: '.product-info-main',\r\n\r\n            // selector of price wrapper (need to know where set price)\r\n            selectorProductPrice: '[data-role=priceBox]',\r\n\r\n            //selector of product images gallery wrapper\r\n            mediaGallerySelector: '[data-gallery-role=gallery-placeholder]',\r\n\r\n            // selector of category product tile wrapper\r\n            selectorProductTile: '.product-item',\r\n\r\n            // number of controls to show (false or zero = show all)\r\n            numberToShow: false,\r\n\r\n            // show only swatch controls\r\n            onlySwatches: false,\r\n\r\n            // enable label for control\r\n            enableControlLabel: true,\r\n\r\n            // control label id\r\n            controlLabelId: '',\r\n\r\n            // text for more button\r\n            moreButtonText: $t('More'),\r\n\r\n            // Callback url for media\r\n            mediaCallback: '',\r\n\r\n            // Local media cache\r\n            mediaCache: {},\r\n\r\n            // Cache for BaseProduct images. Needed when option unset\r\n            mediaGalleryInitial: [{}],\r\n\r\n            // Use ajax to get image data\r\n            useAjax: false,\r\n\r\n            /**\r\n             * Defines the mechanism of how images of a gallery should be\r\n             * updated when user switches between configurations of a product.\r\n             *\r\n             * As for now value of this option can be either 'replace' or 'prepend'.\r\n             *\r\n             * @type {String}\r\n             */\r\n            gallerySwitchStrategy: 'replace',\r\n\r\n            // whether swatches are rendered in product list or on product page\r\n            inProductList: false,\r\n\r\n            // sly-old-price block selector\r\n            slyOldPriceSelector: '.sly-old-price',\r\n\r\n            // tier prise selectors start\r\n            tierPriceTemplateSelector: '#tier-prices-template',\r\n            tierPriceBlockSelector: '[data-role=\"tier-price-block\"]',\r\n            tierPriceTemplate: '',\r\n            // tier prise selectors end\r\n\r\n            // A price label selector\r\n            normalPriceLabelSelector: '.normal-price .price-label'\r\n        },\r\n\r\n        /**\r\n         * Get chosen product\r\n         *\r\n         * @returns int|null\r\n         */\r\n        getProduct: function () {\r\n            var products = this._CalcProducts();\r\n\r\n            return _.isArray(products) ? products[0] : null;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            // Don't render the same set of swatches twice\r\n            if ($(this.element).attr('data-rendered')) {\r\n                return;\r\n            }\r\n            $(this.element).attr('data-rendered', true);\r\n\r\n            if (_.isEmpty(this.options.jsonConfig.images)) {\r\n                this.options.useAjax = true;\r\n                // creates debounced variant of _LoadProductMedia()\r\n                // to use it in events handlers instead of _LoadProductMedia()\r\n                this._debouncedLoadProductMedia = _.debounce(this._LoadProductMedia.bind(this), 500);\r\n            }\r\n\r\n            if (this.options.jsonConfig !== '' && this.options.jsonSwatchConfig !== '') {\r\n                // store unsorted attributes\r\n                this.options.jsonConfig.mappedAttributes = _.clone(this.options.jsonConfig.attributes);\r\n                this._sortAttributes();\r\n                this._RenderControls();\r\n                this._setPreSelectedGallery();\r\n                $(this.element).trigger('swatch.initialized');\r\n            } else {\r\n                console.log('SwatchRenderer: No input data received');\r\n            }\r\n            this.options.tierPriceTemplate = $(this.options.tierPriceTemplateSelector).html();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _sortAttributes: function () {\r\n            this.options.jsonConfig.attributes = _.sortBy(this.options.jsonConfig.attributes, function (attribute) {\r\n                return parseInt(attribute.position, 10);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var options = this.options,\r\n                gallery = $('[data-gallery-role=gallery-placeholder]', '.column.main'),\r\n                productData = this._determineProductData(),\r\n                $main = productData.isInProductView ?\r\n                    this.element.parents('.column.main') :\r\n                    this.element.parents('.product-item-info');\r\n\r\n            if (productData.isInProductView) {\r\n                gallery.data('gallery') ?\r\n                    this._onGalleryLoaded(gallery) :\r\n                    gallery.on('gallery:loaded', this._onGalleryLoaded.bind(this, gallery));\r\n            } else {\r\n                options.mediaGalleryInitial = [{\r\n                    'img': $main.find('.product-image-photo').attr('src')\r\n                }];\r\n            }\r\n\r\n            this.productForm = this.element.parents(this.options.selectorProductTile).find('form:first');\r\n            this.inProductList = this.productForm.length > 0;\r\n        },\r\n\r\n        /**\r\n         * Determine product id and related data\r\n         *\r\n         * @returns {{productId: *, isInProductView: bool}}\r\n         * @private\r\n         */\r\n        _determineProductData: function () {\r\n            // Check if product is in a list of products.\r\n            var productId,\r\n                isInProductView = false;\r\n\r\n            productId = this.element.parents('.product-item-details')\r\n                    .find('.price-box.price-final_price').attr('data-product-id');\r\n\r\n            if (!productId) {\r\n                // Check individual product.\r\n                productId = $('[name=product]').val();\r\n                isInProductView = productId > 0;\r\n            }\r\n\r\n            return {\r\n                productId: productId,\r\n                isInProductView: isInProductView\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Render controls\r\n         *\r\n         * @private\r\n         */\r\n        _RenderControls: function () {\r\n            var $widget = this,\r\n                container = this.element,\r\n                classes = this.options.classes,\r\n                chooseText = this.options.jsonConfig.chooseText,\r\n                showTooltip = this.options.showTooltip;\r\n\r\n            $widget.optionsMap = {};\r\n\r\n            $.each(this.options.jsonConfig.attributes, function () {\r\n                var item = this,\r\n                    controlLabelId = 'option-label-' + item.code + '-' + item.id,\r\n                    options = $widget._RenderSwatchOptions(item, controlLabelId),\r\n                    select = $widget._RenderSwatchSelect(item, chooseText),\r\n                    input = $widget._RenderFormInput(item),\r\n                    listLabel = '',\r\n                    label = '';\r\n\r\n                // Show only swatch controls\r\n                if ($widget.options.onlySwatches && !$widget.options.jsonSwatchConfig.hasOwnProperty(item.id)) {\r\n                    return;\r\n                }\r\n\r\n                if ($widget.options.enableControlLabel) {\r\n                    label +=\r\n                        '<span id=\"' + controlLabelId + '\" class=\"' + classes.attributeLabelClass + '\">' +\r\n                        $('<i></i>').text(item.label).html() +\r\n                        '</span>' +\r\n                        '<span class=\"' + classes.attributeSelectedOptionLabelClass + '\"></span>';\r\n                }\r\n\r\n                if ($widget.inProductList) {\r\n                    $widget.productForm.append(input);\r\n                    input = '';\r\n                    listLabel = 'aria-label=\"' + $('<i></i>').text(item.label).html() + '\"';\r\n                } else {\r\n                    listLabel = 'aria-labelledby=\"' + controlLabelId + '\"';\r\n                }\r\n\r\n                // Create new control\r\n                container.append(\r\n                    '<div class=\"' + classes.attributeClass + ' ' + item.code + '\" ' +\r\n                         'attribute-code=\"' + item.code + '\" ' +\r\n                         'attribute-id=\"' + item.id + '\">' +\r\n                        label +\r\n                        '<div aria-activedescendant=\"\" ' +\r\n                             'tabindex=\"0\" ' +\r\n                             'aria-invalid=\"false\" ' +\r\n                             'aria-required=\"true\" ' +\r\n                             'role=\"listbox\" ' + listLabel +\r\n                             'class=\"' + classes.attributeOptionsWrapper + ' clearfix\">' +\r\n                            options + select +\r\n                        '</div>' + input +\r\n                    '</div>'\r\n                );\r\n\r\n                $widget.optionsMap[item.id] = {};\r\n\r\n                // Aggregate options array to hash (key => value)\r\n                $.each(item.options, function () {\r\n                    if (this.products.length > 0) {\r\n                        $widget.optionsMap[item.id][this.id] = {\r\n                            price: parseInt(\r\n                                $widget.options.jsonConfig.optionPrices[this.products[0]].finalPrice.amount,\r\n                                10\r\n                            ),\r\n                            products: this.products\r\n                        };\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (showTooltip === 1) {\r\n                // Connect Tooltip\r\n                container\r\n                    .find('[option-type=\"1\"], [option-type=\"2\"], [option-type=\"0\"], [option-type=\"3\"]')\r\n                    .SwatchRendererTooltip();\r\n            }\r\n\r\n            // Hide all elements below more button\r\n            $('.' + classes.moreButton).nextAll().hide();\r\n\r\n            // Handle events like click or change\r\n            $widget._EventListener();\r\n\r\n            // Rewind options\r\n            $widget._Rewind(container);\r\n\r\n            //Emulate click on all swatches from Request\r\n            $widget._EmulateSelected($.parseQuery());\r\n            $widget._EmulateSelected($widget._getSelectedAttributes());\r\n        },\r\n\r\n        /**\r\n         * Render swatch options by part of config\r\n         *\r\n         * @param {Object} config\r\n         * @param {String} controlId\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _RenderSwatchOptions: function (config, controlId) {\r\n            var optionConfig = this.options.jsonSwatchConfig[config.id],\r\n                optionClass = this.options.classes.optionClass,\r\n                sizeConfig = this.options.jsonSwatchImageSizeConfig,\r\n                moreLimit = parseInt(this.options.numberToShow, 10),\r\n                moreClass = this.options.classes.moreButton,\r\n                moreText = this.options.moreButtonText,\r\n                countAttributes = 0,\r\n                html = '';\r\n\r\n            if (!this.options.jsonSwatchConfig.hasOwnProperty(config.id)) {\r\n                return '';\r\n            }\r\n\r\n            $.each(config.options, function (index) {\r\n                var id,\r\n                    type,\r\n                    value,\r\n                    thumb,\r\n                    label,\r\n                    width,\r\n                    height,\r\n                    attr,\r\n                    swatchImageWidth,\r\n                    swatchImageHeight;\r\n\r\n                if (!optionConfig.hasOwnProperty(this.id)) {\r\n                    return '';\r\n                }\r\n\r\n                // Add more button\r\n                if (moreLimit === countAttributes++) {\r\n                    html += '<a href=\"#\" class=\"' + moreClass + '\"><span>' + moreText + '</span></a>';\r\n                }\r\n\r\n                id = this.id;\r\n                type = parseInt(optionConfig[id].type, 10);\r\n                value = optionConfig[id].hasOwnProperty('value') ?\r\n                    $('<i></i>').text(optionConfig[id].value).html() : '';\r\n                thumb = optionConfig[id].hasOwnProperty('thumb') ? optionConfig[id].thumb : '';\r\n                width = _.has(sizeConfig, 'swatchThumb') ? sizeConfig.swatchThumb.width : 110;\r\n                height = _.has(sizeConfig, 'swatchThumb') ? sizeConfig.swatchThumb.height : 90;\r\n                label = this.label ? $('<i></i>').text(this.label).html() : '';\r\n                attr =\r\n                    ' id=\"' + controlId + '-item-' + id + '\"' +\r\n                    ' index=\"' + index + '\"' +\r\n                    ' aria-checked=\"false\"' +\r\n                    ' aria-describedby=\"' + controlId + '\"' +\r\n                    ' tabindex=\"0\"' +\r\n                    ' option-type=\"' + type + '\"' +\r\n                    ' option-id=\"' + id + '\"' +\r\n                    ' option-label=\"' + label + '\"' +\r\n                    ' aria-label=\"' + label + '\"' +\r\n                    ' option-tooltip-thumb=\"' + thumb + '\"' +\r\n                    ' option-tooltip-value=\"' + value + '\"' +\r\n                    ' role=\"option\"' +\r\n                    ' thumb-width=\"' + width + '\"' +\r\n                    ' thumb-height=\"' + height + '\"';\r\n\r\n                swatchImageWidth = _.has(sizeConfig, 'swatchImage') ? sizeConfig.swatchImage.width : 30;\r\n                swatchImageHeight = _.has(sizeConfig, 'swatchImage') ? sizeConfig.swatchImage.height : 20;\r\n\r\n                if (!this.hasOwnProperty('products') || this.products.length <= 0) {\r\n                    attr += ' option-empty=\"true\"';\r\n                }\r\n\r\n                if (type === 0) {\r\n                    // Text\r\n                    html += '<div class=\"' + optionClass + ' text\" ' + attr + '>' + (value ? value : label) +\r\n                        '</div>';\r\n                } else if (type === 1) {\r\n                    // Color\r\n                    html += '<div class=\"' + optionClass + ' color\" ' + attr +\r\n                        ' style=\"background: ' + value +\r\n                        ' no-repeat center; background-size: initial;\">' + '' +\r\n                        '</div>';\r\n                } else if (type === 2) {\r\n                    // Image\r\n                    html += '<div class=\"' + optionClass + ' image\" ' + attr +\r\n                        ' style=\"background: url(' + value + ') no-repeat center; background-size: initial;width:' +\r\n                        swatchImageWidth + 'px; height:' + swatchImageHeight + 'px\">' + '' +\r\n                        '</div>';\r\n                } else if (type === 3) {\r\n                    // Clear\r\n                    html += '<div class=\"' + optionClass + '\" ' + attr + '></div>';\r\n                } else {\r\n                    // Default\r\n                    html += '<div class=\"' + optionClass + '\" ' + attr + '>' + label + '</div>';\r\n                }\r\n            });\r\n\r\n            return html;\r\n        },\r\n\r\n        /**\r\n         * Render select by part of config\r\n         *\r\n         * @param {Object} config\r\n         * @param {String} chooseText\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _RenderSwatchSelect: function (config, chooseText) {\r\n            var html;\r\n\r\n            if (this.options.jsonSwatchConfig.hasOwnProperty(config.id)) {\r\n                return '';\r\n            }\r\n\r\n            html =\r\n                '<select class=\"' + this.options.classes.selectClass + ' ' + config.code + '\">' +\r\n                '<option value=\"0\" option-id=\"0\">' + chooseText + '</option>';\r\n\r\n            $.each(config.options, function () {\r\n                var label = this.label,\r\n                    attr = ' value=\"' + this.id + '\" option-id=\"' + this.id + '\"';\r\n\r\n                if (!this.hasOwnProperty('products') || this.products.length <= 0) {\r\n                    attr += ' option-empty=\"true\"';\r\n                }\r\n\r\n                html += '<option ' + attr + '>' + label + '</option>';\r\n            });\r\n\r\n            html += '</select>';\r\n\r\n            return html;\r\n        },\r\n\r\n        /**\r\n         * Input for submit form.\r\n         * This control shouldn't have \"type=hidden\", \"display: none\" for validation work :(\r\n         *\r\n         * @param {Object} config\r\n         * @private\r\n         */\r\n        _RenderFormInput: function (config) {\r\n            return '<input class=\"' + this.options.classes.attributeInput + ' super-attribute-select\" ' +\r\n                'name=\"super_attribute[' + config.id + ']\" ' +\r\n                'type=\"text\" ' +\r\n                'value=\"\" ' +\r\n                'data-selector=\"super_attribute[' + config.id + ']\" ' +\r\n                'data-validate=\"{required: true}\" ' +\r\n                'aria-required=\"true\" ' +\r\n                'aria-invalid=\"false\">';\r\n        },\r\n\r\n        /**\r\n         * Event listener\r\n         *\r\n         * @private\r\n         */\r\n        _EventListener: function () {\r\n            var $widget = this,\r\n                options = this.options.classes,\r\n                target;\r\n\r\n            $widget.element.on('click', '.' + options.optionClass, function () {\r\n                return $widget._OnClick($(this), $widget);\r\n            });\r\n\r\n            $widget.element.on('change', '.' + options.selectClass, function () {\r\n                return $widget._OnChange($(this), $widget);\r\n            });\r\n\r\n            $widget.element.on('click', '.' + options.moreButton, function (e) {\r\n                e.preventDefault();\r\n\r\n                return $widget._OnMoreClick($(this));\r\n            });\r\n\r\n            $widget.element.on('keydown', function (e) {\r\n                if (e.which === 13) {\r\n                    target = $(e.target);\r\n\r\n                    if (target.is('.' + options.optionClass)) {\r\n                        return $widget._OnClick(target, $widget);\r\n                    } else if (target.is('.' + options.selectClass)) {\r\n                        return $widget._OnChange(target, $widget);\r\n                    } else if (target.is('.' + options.moreButton)) {\r\n                        e.preventDefault();\r\n\r\n                        return $widget._OnMoreClick(target);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Load media gallery using ajax or json config.\r\n         *\r\n         * @private\r\n         */\r\n        _loadMedia: function () {\r\n            var $main = this.inProductList ?\r\n                    this.element.parents('.product-item-info') :\r\n                    this.element.parents('.column.main'),\r\n                images;\r\n\r\n            if (this.options.useAjax) {\r\n                this._debouncedLoadProductMedia();\r\n            }  else {\r\n                images = this.options.jsonConfig.images[this.getProduct()];\r\n\r\n                if (!images) {\r\n                    images = this.options.mediaGalleryInitial;\r\n                }\r\n                this.updateBaseImage(this._sortImages(images), $main, !this.inProductList);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sorting images array\r\n         *\r\n         * @private\r\n         */\r\n        _sortImages: function (images) {\r\n            return _.sortBy(images, function (image) {\r\n                return parseInt(image.position, 10);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Event for swatch options\r\n         *\r\n         * @param {Object} $this\r\n         * @param {Object} $widget\r\n         * @private\r\n         */\r\n        _OnClick: function ($this, $widget) {\r\n            var $parent = $this.parents('.' + $widget.options.classes.attributeClass),\r\n                $wrapper = $this.parents('.' + $widget.options.classes.attributeOptionsWrapper),\r\n                $label = $parent.find('.' + $widget.options.classes.attributeSelectedOptionLabelClass),\r\n                attributeId = $parent.attr('attribute-id'),\r\n                $input = $parent.find('.' + $widget.options.classes.attributeInput),\r\n                checkAdditionalData = JSON.parse(this.options.jsonSwatchConfig[attributeId]['additional_data']);\r\n\r\n            if ($widget.inProductList) {\r\n                $input = $widget.productForm.find(\r\n                    '.' + $widget.options.classes.attributeInput + '[name=\"super_attribute[' + attributeId + ']\"]'\r\n                );\r\n            }\r\n\r\n            if ($this.hasClass('disabled')) {\r\n                return;\r\n            }\r\n\r\n            if ($this.hasClass('selected')) {\r\n                $parent.removeAttr('option-selected').find('.selected').removeClass('selected');\r\n                $input.val('');\r\n                $label.text('');\r\n                $this.attr('aria-checked', false);\r\n            } else {\r\n                $parent.attr('option-selected', $this.attr('option-id')).find('.selected').removeClass('selected');\r\n                $label.text($this.attr('option-label'));\r\n                $input.val($this.attr('option-id'));\r\n                $input.attr('data-attr-name', this._getAttributeCodeById(attributeId));\r\n                $this.addClass('selected');\r\n                $widget._toggleCheckedAttributes($this, $wrapper);\r\n            }\r\n\r\n            $widget._Rebuild();\r\n\r\n            if ($widget.element.parents($widget.options.selectorProduct)\r\n                    .find(this.options.selectorProductPrice).is(':data(mage-priceBox)')\r\n            ) {\r\n                $widget._UpdatePrice();\r\n            }\r\n\r\n            $(document).trigger('updateMsrpPriceBlock',\r\n                [\r\n                    _.findKey($widget.options.jsonConfig.index, $widget.options.jsonConfig.defaultValues),\r\n                    $widget.options.jsonConfig.optionPrices\r\n                ]);\r\n\r\n            if (parseInt(checkAdditionalData['update_product_preview_image'], 10) === 1) {\r\n                $widget._loadMedia();\r\n            }\r\n\r\n            $input.trigger('change');\r\n        },\r\n\r\n        /**\r\n         * Get human readable attribute code (eg. size, color) by it ID from configuration\r\n         *\r\n         * @param {Number} attributeId\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getAttributeCodeById: function (attributeId) {\r\n            var attribute = this.options.jsonConfig.mappedAttributes[attributeId];\r\n\r\n            return attribute ? attribute.code : attributeId;\r\n        },\r\n\r\n        /**\r\n         * Toggle accessibility attributes\r\n         *\r\n         * @param {Object} $this\r\n         * @param {Object} $wrapper\r\n         * @private\r\n         */\r\n        _toggleCheckedAttributes: function ($this, $wrapper) {\r\n            $wrapper.attr('aria-activedescendant', $this.attr('id'))\r\n                    .find('.' + this.options.classes.optionClass).attr('aria-checked', false);\r\n            $this.attr('aria-checked', true);\r\n        },\r\n\r\n        /**\r\n         * Event for select\r\n         *\r\n         * @param {Object} $this\r\n         * @param {Object} $widget\r\n         * @private\r\n         */\r\n        _OnChange: function ($this, $widget) {\r\n            var $parent = $this.parents('.' + $widget.options.classes.attributeClass),\r\n                attributeId = $parent.attr('attribute-id'),\r\n                $input = $parent.find('.' + $widget.options.classes.attributeInput);\r\n\r\n            if ($widget.productForm.length > 0) {\r\n                $input = $widget.productForm.find(\r\n                    '.' + $widget.options.classes.attributeInput + '[name=\"super_attribute[' + attributeId + ']\"]'\r\n                );\r\n            }\r\n\r\n            if ($this.val() > 0) {\r\n                $parent.attr('option-selected', $this.val());\r\n                $input.val($this.val());\r\n            } else {\r\n                $parent.removeAttr('option-selected');\r\n                $input.val('');\r\n            }\r\n\r\n            $widget._Rebuild();\r\n            $widget._UpdatePrice();\r\n            $widget._loadMedia();\r\n            $input.trigger('change');\r\n        },\r\n\r\n        /**\r\n         * Event for more switcher\r\n         *\r\n         * @param {Object} $this\r\n         * @private\r\n         */\r\n        _OnMoreClick: function ($this) {\r\n            $this.nextAll().show();\r\n            $this.blur().remove();\r\n        },\r\n\r\n        /**\r\n         * Rewind options for controls\r\n         *\r\n         * @private\r\n         */\r\n        _Rewind: function (controls) {\r\n            controls.find('div[option-id], option[option-id]').removeClass('disabled').removeAttr('disabled');\r\n            controls.find('div[option-empty], option[option-empty]')\r\n                .attr('disabled', true)\r\n                .addClass('disabled')\r\n                .attr('tabindex', '-1');\r\n        },\r\n\r\n        /**\r\n         * Rebuild container\r\n         *\r\n         * @private\r\n         */\r\n        _Rebuild: function () {\r\n            var $widget = this,\r\n                controls = $widget.element.find('.' + $widget.options.classes.attributeClass + '[attribute-id]'),\r\n                selected = controls.filter('[option-selected]');\r\n\r\n            // Enable all options\r\n            $widget._Rewind(controls);\r\n\r\n            // done if nothing selected\r\n            if (selected.length <= 0) {\r\n                return;\r\n            }\r\n\r\n            // Disable not available options\r\n            controls.each(function () {\r\n                var $this = $(this),\r\n                    id = $this.attr('attribute-id'),\r\n                    products = $widget._CalcProducts(id);\r\n\r\n                if (selected.length === 1 && selected.first().attr('attribute-id') === id) {\r\n                    return;\r\n                }\r\n\r\n                $this.find('[option-id]').each(function () {\r\n                    var $element = $(this),\r\n                        option = $element.attr('option-id');\r\n\r\n                    if (!$widget.optionsMap.hasOwnProperty(id) || !$widget.optionsMap[id].hasOwnProperty(option) ||\r\n                        $element.hasClass('selected') ||\r\n                        $element.is(':selected')) {\r\n                        return;\r\n                    }\r\n\r\n                    if (_.intersection(products, $widget.optionsMap[id][option].products).length <= 0) {\r\n                        $element.attr('disabled', true).addClass('disabled');\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get selected product list\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _CalcProducts: function ($skipAttributeId) {\r\n            var $widget = this,\r\n                products = [];\r\n\r\n            // Generate intersection of products\r\n            $widget.element.find('.' + $widget.options.classes.attributeClass + '[option-selected]').each(function () {\r\n                var id = $(this).attr('attribute-id'),\r\n                    option = $(this).attr('option-selected');\r\n\r\n                if ($skipAttributeId !== undefined && $skipAttributeId === id) {\r\n                    return;\r\n                }\r\n\r\n                if (!$widget.optionsMap.hasOwnProperty(id) || !$widget.optionsMap[id].hasOwnProperty(option)) {\r\n                    return;\r\n                }\r\n\r\n                if (products.length === 0) {\r\n                    products = $widget.optionsMap[id][option].products;\r\n                } else {\r\n                    products = _.intersection(products, $widget.optionsMap[id][option].products);\r\n                }\r\n            });\r\n\r\n            return products;\r\n        },\r\n\r\n        /**\r\n         * Update total price\r\n         *\r\n         * @private\r\n         */\r\n        _UpdatePrice: function () {\r\n            var $widget = this,\r\n                $product = $widget.element.parents($widget.options.selectorProduct),\r\n                $productPrice = $product.find(this.options.selectorProductPrice),\r\n                result = $widget._getNewPrices(),\r\n                tierPriceHtml,\r\n                isShow;\r\n\r\n            $productPrice.trigger(\r\n                'updatePrice',\r\n                {\r\n                    'prices': $widget._getPrices(result, $productPrice.priceBox('option').prices)\r\n                }\r\n            );\r\n\r\n            isShow = typeof result != 'undefined' && result.oldPrice.amount !== result.finalPrice.amount;\r\n\r\n            $product.find(this.options.slyOldPriceSelector)[isShow ? 'show' : 'hide']();\r\n\r\n            if (typeof result != 'undefined' && result.tierPrices && result.tierPrices.length) {\r\n                if (this.options.tierPriceTemplate) {\r\n                    tierPriceHtml = mageTemplate(\r\n                        this.options.tierPriceTemplate,\r\n                        {\r\n                            'tierPrices': result.tierPrices,\r\n                            '$t': $t,\r\n                            'currencyFormat': this.options.jsonConfig.currencyFormat,\r\n                            'priceUtils': priceUtils\r\n                        }\r\n                    );\r\n                    $(this.options.tierPriceBlockSelector).html(tierPriceHtml).show();\r\n                }\r\n            } else {\r\n                $(this.options.tierPriceBlockSelector).hide();\r\n            }\r\n\r\n            $(this.options.normalPriceLabelSelector).hide();\r\n\r\n            _.each($('.' + this.options.classes.attributeOptionsWrapper), function (attribute) {\r\n                if ($(attribute).find('.' + this.options.classes.optionClass + '.selected').length === 0) {\r\n                    if ($(attribute).find('.' + this.options.classes.selectClass).length > 0) {\r\n                        _.each($(attribute).find('.' + this.options.classes.selectClass), function (dropdown) {\r\n                            if ($(dropdown).val() === '0') {\r\n                                $(this.options.normalPriceLabelSelector).show();\r\n                            }\r\n                        }.bind(this));\r\n                    } else {\r\n                        $(this.options.normalPriceLabelSelector).show();\r\n                    }\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Get new prices for selected options\r\n         *\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getNewPrices: function () {\r\n            var $widget = this,\r\n                optionPriceDiff = 0,\r\n                allowedProduct = this._getAllowedProductWithMinPrice(this._CalcProducts()),\r\n                optionPrices = this.options.jsonConfig.optionPrices,\r\n                basePrice = parseFloat(this.options.jsonConfig.prices.basePrice.amount),\r\n                optionFinalPrice,\r\n                newPrices;\r\n\r\n            if (!_.isEmpty(allowedProduct)) {\r\n                optionFinalPrice = parseFloat(optionPrices[allowedProduct].finalPrice.amount);\r\n                optionPriceDiff = optionFinalPrice - basePrice;\r\n            }\r\n\r\n            if (optionPriceDiff !== 0) {\r\n                newPrices  = this.options.jsonConfig.optionPrices[allowedProduct];\r\n            } else {\r\n                newPrices = $widget.options.jsonConfig.prices;\r\n            }\r\n\r\n            return newPrices;\r\n        },\r\n\r\n        /**\r\n         * Get prices\r\n         *\r\n         * @param {Object} newPrices\r\n         * @param {Object} displayPrices\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getPrices: function (newPrices, displayPrices) {\r\n            var $widget = this;\r\n\r\n            if (_.isEmpty(newPrices)) {\r\n                newPrices = $widget._getNewPrices();\r\n            }\r\n            _.each(displayPrices, function (price, code) {\r\n\r\n                if (newPrices[code]) {\r\n                    displayPrices[code].amount = newPrices[code].amount - displayPrices[code].amount;\r\n                }\r\n            });\r\n\r\n            return displayPrices;\r\n        },\r\n\r\n        /**\r\n         * Get product with minimum price from selected options.\r\n         *\r\n         * @param {Array} allowedProducts\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _getAllowedProductWithMinPrice: function (allowedProducts) {\r\n            var optionPrices = this.options.jsonConfig.optionPrices,\r\n                product = {},\r\n                optionFinalPrice, optionMinPrice;\r\n\r\n            _.each(allowedProducts, function (allowedProduct) {\r\n                optionFinalPrice = parseFloat(optionPrices[allowedProduct].finalPrice.amount);\r\n\r\n                if (_.isEmpty(product) || optionFinalPrice < optionMinPrice) {\r\n                    optionMinPrice = optionFinalPrice;\r\n                    product = allowedProduct;\r\n                }\r\n            }, this);\r\n\r\n            return product;\r\n        },\r\n\r\n        /**\r\n         * Gets all product media and change current to the needed one\r\n         *\r\n         * @private\r\n         */\r\n        _LoadProductMedia: function () {\r\n            var $widget = this,\r\n                $this = $widget.element,\r\n                productData = this._determineProductData(),\r\n                mediaCallData,\r\n                mediaCacheKey,\r\n\r\n                /**\r\n                 * Processes product media data\r\n                 *\r\n                 * @param {Object} data\r\n                 * @returns void\r\n                 */\r\n                mediaSuccessCallback = function (data) {\r\n                    if (!(mediaCacheKey in $widget.options.mediaCache)) {\r\n                        $widget.options.mediaCache[mediaCacheKey] = data;\r\n                    }\r\n                    $widget._ProductMediaCallback($this, data, productData.isInProductView);\r\n                    setTimeout(function () {\r\n                        $widget._DisableProductMediaLoader($this);\r\n                    }, 300);\r\n                };\r\n\r\n            if (!$widget.options.mediaCallback) {\r\n                return;\r\n            }\r\n\r\n            mediaCallData = {\r\n                'product_id': this.getProduct()\r\n            };\r\n\r\n            mediaCacheKey = JSON.stringify(mediaCallData);\r\n\r\n            if (mediaCacheKey in $widget.options.mediaCache) {\r\n                $widget._XhrKiller();\r\n                $widget._EnableProductMediaLoader($this);\r\n                mediaSuccessCallback($widget.options.mediaCache[mediaCacheKey]);\r\n            } else {\r\n                mediaCallData.isAjax = true;\r\n                $widget._XhrKiller();\r\n                $widget._EnableProductMediaLoader($this);\r\n                $widget.xhr = $.ajax({\r\n                    url: $widget.options.mediaCallback,\r\n                    cache: true,\r\n                    type: 'GET',\r\n                    dataType: 'json',\r\n                    data: mediaCallData,\r\n                    success: mediaSuccessCallback\r\n                }).done(function () {\r\n                    $widget._XhrKiller();\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Enable loader\r\n         *\r\n         * @param {Object} $this\r\n         * @private\r\n         */\r\n        _EnableProductMediaLoader: function ($this) {\r\n            var $widget = this;\r\n\r\n            if ($('body.catalog-product-view').length > 0) {\r\n                $this.parents('.column.main').find('.photo.image')\r\n                    .addClass($widget.options.classes.loader);\r\n            } else {\r\n                //Category View\r\n                $this.parents('.product-item-info').find('.product-image-photo')\r\n                    .addClass($widget.options.classes.loader);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable loader\r\n         *\r\n         * @param {Object} $this\r\n         * @private\r\n         */\r\n        _DisableProductMediaLoader: function ($this) {\r\n            var $widget = this;\r\n\r\n            if ($('body.catalog-product-view').length > 0) {\r\n                $this.parents('.column.main').find('.photo.image')\r\n                    .removeClass($widget.options.classes.loader);\r\n            } else {\r\n                //Category View\r\n                $this.parents('.product-item-info').find('.product-image-photo')\r\n                    .removeClass($widget.options.classes.loader);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Callback for product media\r\n         *\r\n         * @param {Object} $this\r\n         * @param {String} response\r\n         * @param {Boolean} isInProductView\r\n         * @private\r\n         */\r\n        _ProductMediaCallback: function ($this, response, isInProductView) {\r\n            var $main = isInProductView ? $this.parents('.column.main') : $this.parents('.product-item-info'),\r\n                $widget = this,\r\n                images = [],\r\n\r\n                /**\r\n                 * Check whether object supported or not\r\n                 *\r\n                 * @param {Object} e\r\n                 * @returns {*|Boolean}\r\n                 */\r\n                support = function (e) {\r\n                    return e.hasOwnProperty('large') && e.hasOwnProperty('medium') && e.hasOwnProperty('small');\r\n                };\r\n\r\n            if (_.size($widget) < 1 || !support(response)) {\r\n                this.updateBaseImage(this.options.mediaGalleryInitial, $main, isInProductView);\r\n\r\n                return;\r\n            }\r\n\r\n            images.push({\r\n                full: response.large,\r\n                img: response.medium,\r\n                thumb: response.small,\r\n                isMain: true\r\n            });\r\n\r\n            if (response.hasOwnProperty('gallery')) {\r\n                $.each(response.gallery, function () {\r\n                    if (!support(this) || response.large === this.large) {\r\n                        return;\r\n                    }\r\n                    images.push({\r\n                        full: this.large,\r\n                        img: this.medium,\r\n                        thumb: this.small\r\n                    });\r\n                });\r\n            }\r\n\r\n            this.updateBaseImage(images, $main, isInProductView);\r\n        },\r\n\r\n        /**\r\n         * Check if images to update are initial and set their type\r\n         * @param {Array} images\r\n         */\r\n        _setImageType: function (images) {\r\n            var initial = this.options.mediaGalleryInitial[0].img;\r\n\r\n            if (images[0].img === initial) {\r\n                images = $.extend(true, [], this.options.mediaGalleryInitial);\r\n            } else {\r\n                images.map(function (img) {\r\n                    if (!img.type) {\r\n                        img.type = 'image';\r\n                    }\r\n                });\r\n            }\r\n\r\n            return images;\r\n        },\r\n\r\n        /**\r\n         * Update [gallery-placeholder] or [product-image-photo]\r\n         * @param {Array} images\r\n         * @param {jQuery} context\r\n         * @param {Boolean} isInProductView\r\n         */\r\n        updateBaseImage: function (images, context, isInProductView) {\r\n            var justAnImage = images[0],\r\n                initialImages = this.options.mediaGalleryInitial,\r\n                imagesToUpdate,\r\n                gallery = context.find(this.options.mediaGallerySelector).data('gallery'),\r\n                isInitial;\r\n\r\n            if (isInProductView) {\r\n                imagesToUpdate = images.length ? this._setImageType($.extend(true, [], images)) : [];\r\n                isInitial = _.isEqual(imagesToUpdate, initialImages);\r\n\r\n                if (this.options.gallerySwitchStrategy === 'prepend' && !isInitial) {\r\n                    imagesToUpdate = imagesToUpdate.concat(initialImages);\r\n                }\r\n\r\n                imagesToUpdate = this._setImageIndex(imagesToUpdate);\r\n\r\n                if (!_.isUndefined(gallery)) {\r\n                    gallery.updateData(imagesToUpdate);\r\n                } else {\r\n                    context.find(this.options.mediaGallerySelector).on('gallery:loaded', function (loadedGallery) {\r\n                        loadedGallery = context.find(this.options.mediaGallerySelector).data('gallery');\r\n                        loadedGallery.updateData(imagesToUpdate);\r\n                    }.bind(this));\r\n                }\r\n\r\n                if (isInitial) {\r\n                    $(this.options.mediaGallerySelector).AddFotoramaVideoEvents();\r\n                } else {\r\n                    $(this.options.mediaGallerySelector).AddFotoramaVideoEvents({\r\n                        selectedOption: this.getProduct(),\r\n                        dataMergeStrategy: this.options.gallerySwitchStrategy\r\n                    });\r\n                }\r\n\r\n                if (gallery) {\r\n                    gallery.first();\r\n                }\r\n            } else if (justAnImage && justAnImage.img) {\r\n                context.find('.product-image-photo').attr('src', justAnImage.img);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set correct indexes for image set.\r\n         *\r\n         * @param {Array} images\r\n         * @private\r\n         */\r\n        _setImageIndex: function (images) {\r\n            var length = images.length,\r\n                i;\r\n\r\n            for (i = 0; length > i; i++) {\r\n                images[i].i = i + 1;\r\n            }\r\n\r\n            return images;\r\n        },\r\n\r\n        /**\r\n         * Kill doubled AJAX requests\r\n         *\r\n         * @private\r\n         */\r\n        _XhrKiller: function () {\r\n            var $widget = this;\r\n\r\n            if ($widget.xhr !== undefined && $widget.xhr !== null) {\r\n                $widget.xhr.abort();\r\n                $widget.xhr = null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Emulate mouse click on all swatches that should be selected\r\n         * @param {Object} [selectedAttributes]\r\n         * @private\r\n         */\r\n        _EmulateSelected: function (selectedAttributes) {\r\n            $.each(selectedAttributes, $.proxy(function (attributeCode, optionId) {\r\n                var elem = this.element.find('.' + this.options.classes.attributeClass +\r\n                    '[attribute-code=\"' + attributeCode + '\"] [option-id=\"' + optionId + '\"]'),\r\n                    parentInput = elem.parent();\r\n\r\n                if (elem.hasClass('selected')) {\r\n                    return;\r\n                }\r\n\r\n                if (parentInput.hasClass(this.options.classes.selectClass)) {\r\n                    parentInput.val(optionId);\r\n                    parentInput.trigger('change');\r\n                } else {\r\n                    elem.trigger('click');\r\n                }\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Emulate mouse click or selection change on all swatches that should be selected\r\n         * @param {Object} [selectedAttributes]\r\n         * @private\r\n         */\r\n        _EmulateSelectedByAttributeId: function (selectedAttributes) {\r\n            $.each(selectedAttributes, $.proxy(function (attributeId, optionId) {\r\n                var elem = this.element.find('.' + this.options.classes.attributeClass +\r\n                    '[attribute-id=\"' + attributeId + '\"] [option-id=\"' + optionId + '\"]'),\r\n                    parentInput = elem.parent();\r\n\r\n                if (elem.hasClass('selected')) {\r\n                    return;\r\n                }\r\n\r\n                if (parentInput.hasClass(this.options.classes.selectClass)) {\r\n                    parentInput.val(optionId);\r\n                    parentInput.trigger('change');\r\n                } else {\r\n                    elem.trigger('click');\r\n                }\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Get default options values settings with either URL query parameters\r\n         * @private\r\n         */\r\n        _getSelectedAttributes: function () {\r\n            var hashIndex = window.location.href.indexOf('#'),\r\n                selectedAttributes = {},\r\n                params;\r\n\r\n            if (hashIndex !== -1) {\r\n                params = $.parseQuery(window.location.href.substr(hashIndex + 1));\r\n\r\n                selectedAttributes = _.invert(_.mapObject(_.invert(params), function (attributeId) {\r\n                    var attribute = this.options.jsonConfig.mappedAttributes[attributeId];\r\n\r\n                    return attribute ? attribute.code : attributeId;\r\n                }.bind(this)));\r\n            }\r\n\r\n            return selectedAttributes;\r\n        },\r\n\r\n        /**\r\n         * Callback which fired after gallery gets initialized.\r\n         *\r\n         * @param {HTMLElement} element - DOM element associated with a gallery.\r\n         */\r\n        _onGalleryLoaded: function (element) {\r\n            var galleryObject = element.data('gallery');\r\n\r\n            this.options.mediaGalleryInitial = galleryObject.returnCurrentImages();\r\n        },\r\n\r\n        /**\r\n         * Sets mediaCache for cases when jsonConfig contains preSelectedGallery on layered navigation result pages\r\n         *\r\n         * @private\r\n         */\r\n        _setPreSelectedGallery: function () {\r\n            var mediaCallData;\r\n\r\n            if (this.options.jsonConfig.preSelectedGallery) {\r\n                mediaCallData = {\r\n                    'product_id': this.getProduct()\r\n                };\r\n\r\n                this.options.mediaCache[JSON.stringify(mediaCallData)] = this.options.jsonConfig.preSelectedGallery;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.SwatchRenderer;\r\n});\r\n","Magento_Swatches/js/text.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global $break $ $$ */\r\n\r\n/**\r\n *  @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'prototype'\r\n], function (jQuery, mageTemplate, rg) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var swatchOptionTextDefaultInputType = 'radio',\r\n            swatchTextOption = {\r\n                table: $('swatch-text-options-table'),\r\n                itemCount: 0,\r\n                totalItems: 0,\r\n                rendered: 0,\r\n                isReadOnly: config.isReadOnly,\r\n                template: mageTemplate('#swatch-text-row-template'),\r\n\r\n                /**\r\n                 * Add option\r\n                 *\r\n                 * @param {Object} data\r\n                 * @param {Object} render\r\n                 */\r\n                add: function (data, render) {\r\n                    var isNewOption = false,\r\n                        element;\r\n\r\n                    if (typeof data.id == 'undefined') {\r\n                        data = {\r\n                            'id': 'option_' + this.itemCount,\r\n                            'sort_order': this.itemCount + 1\r\n                        };\r\n                        isNewOption = true;\r\n                    }\r\n\r\n                    if (!data.intype) {\r\n                        data.intype = swatchOptionTextDefaultInputType;\r\n                    }\r\n\r\n                    element = this.template({\r\n                        data: data\r\n                    });\r\n\r\n                    if (isNewOption && !this.isReadOnly) {\r\n                        this.enableNewOptionDeleteButton(data.id);\r\n                    }\r\n                    this.itemCount++;\r\n                    this.totalItems++;\r\n                    this.elements += element;\r\n\r\n                    if (render) {\r\n                        this.render();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Remove option\r\n                 *\r\n                 * @param {Object} event\r\n                 */\r\n                remove: function (event) {\r\n                    var element = $(Event.findElement(event, 'tr')),\r\n                        elementFlags; // !!! Button already have table parent in safari\r\n\r\n                    // Safari workaround\r\n                    element.ancestors().each(function (parentItem) {\r\n                        if (parentItem.hasClassName('option-row')) {\r\n                            element = parentItem;\r\n                            throw $break;\r\n                        } else if (parentItem.hasClassName('box')) {\r\n                            throw $break;\r\n                        }\r\n                    });\r\n\r\n                    if (element) {\r\n                        elementFlags = element.getElementsByClassName('delete-flag');\r\n\r\n                        if (elementFlags[0]) {\r\n                            elementFlags[0].value = 1;\r\n                        }\r\n\r\n                        element.addClassName('no-display');\r\n                        element.addClassName('template');\r\n                        element.hide();\r\n                        this.totalItems--;\r\n                        this.updateItemsCountField();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Update items count field\r\n                 */\r\n                updateItemsCountField: function () {\r\n                    $('swatch-text-option-count-check').value = this.totalItems > 0 ? '1' : '';\r\n                },\r\n\r\n                /**\r\n                 * Enable delete button for new option\r\n                 *\r\n                 * @param {String} id\r\n                 */\r\n                enableNewOptionDeleteButton: function (id) {\r\n                    $$('#delete_button_swatch_container_' + id + ' button').each(function (button) {\r\n                        button.enable();\r\n                        button.removeClassName('disabled');\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * Bind remove button\r\n                 */\r\n                bindRemoveButtons: function () {\r\n                    jQuery('#swatch-text-options-panel').on('click', '.delete-option', this.remove.bind(this));\r\n                },\r\n\r\n                /**\r\n                 * Render action\r\n                 */\r\n                render: function () {\r\n                    Element.insert($$('[data-role=swatch-text-options-container]')[0], this.elements);\r\n                    this.elements = '';\r\n                },\r\n\r\n                /**\r\n                 * Render action with delay (performance fix)\r\n                 *\r\n                 * @param {Object} data\r\n                 * @param {Number} from\r\n                 * @param {Number} step\r\n                 * @param {Number} delay\r\n                 * @returns {Boolean}\r\n                 */\r\n                renderWithDelay: function (data, from, step, delay) {\r\n                    var arrayLength = data.length,\r\n                        len;\r\n\r\n                    for (len = from + step; from < len && from < arrayLength; from++) {\r\n                        this.add(data[from]);\r\n                    }\r\n                    this.render();\r\n\r\n                    if (from === arrayLength) {\r\n                        this.updateItemsCountField();\r\n                        this.rendered = 1;\r\n                        jQuery('body').trigger('processStop');\r\n\r\n                        return true;\r\n                    }\r\n                    setTimeout(this.renderWithDelay.bind(this, data, from, step, delay), delay);\r\n                },\r\n\r\n                /**\r\n                 * Ignore validate action\r\n                 */\r\n                ignoreValidate: function () {\r\n                    var ignore = '.ignore-validate input, ' +\r\n                        '.ignore-validate select, ' +\r\n                        '.ignore-validate textarea';\r\n\r\n                    jQuery('#edit_form').data('validator').settings.forceIgnore = ignore;\r\n                }\r\n            };\r\n\r\n        if ($('add_new_swatch_text_option_button')) {\r\n            Event.observe(\r\n                'add_new_swatch_text_option_button',\r\n                'click',\r\n                swatchTextOption.add.bind(swatchTextOption, true)\r\n            );\r\n        }\r\n        jQuery('#swatch-text-options-panel').on('render', function () {\r\n            swatchTextOption.ignoreValidate();\r\n\r\n            if (swatchTextOption.rendered) {\r\n                return false;\r\n            }\r\n            jQuery('body').trigger('processStart');\r\n            swatchTextOption.renderWithDelay(config.attributesData, 0, 100, 300);\r\n            swatchTextOption.bindRemoveButtons();\r\n        });\r\n\r\n        if (config.isSortable) {\r\n            jQuery(function ($) {\r\n                $('[data-role=swatch-text-options-container]').sortable({\r\n                    distance: 8,\r\n                    tolerance: 'pointer',\r\n                    cancel: 'input, button',\r\n                    axis: 'y',\r\n\r\n                    /**\r\n                     * Update components\r\n                     */\r\n                    update: function () {\r\n                        $('[data-role=swatch-text-options-container] [data-role=order]').each(\r\n                            function (index, element) {\r\n                                $(element).val(index + 1);\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        jQuery(document).ready(function () {\r\n            if (jQuery('#frontend_input').val() !== 'swatch_text') {\r\n                jQuery('.swatch-text-field-0').removeClass('required-option');\r\n            }\r\n        });\r\n\r\n        window.swatchTextOption = swatchTextOption;\r\n        window.swatchOptionTextDefaultInputType = swatchOptionTextDefaultInputType;\r\n\r\n        rg.set('swatch-text-options-panel', swatchTextOption);\r\n    };\r\n});\r\n","Magento_Swatches/js/visual.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global $break $ $$ FORM_KEY */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'jquery/colorpicker/js/colorpicker',\r\n    'prototype',\r\n    'jquery/ui'\r\n], function (jQuery, mageTemplate, rg) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var swatchOptionVisualDefaultInputType = 'radio',\r\n            swatchVisualOption = {\r\n                table: $('swatch-visual-options-table'),\r\n                itemCount: 0,\r\n                totalItems: 0,\r\n                rendered: 0,\r\n                isReadOnly: config.isReadOnly,\r\n                template: mageTemplate('#swatch-visual-row-template'),\r\n\r\n                /**\r\n                 * Add new option using template\r\n                 *\r\n                 * @param {Object} data\r\n                 * @param {Object} render\r\n                 */\r\n                add: function (data, render) {\r\n                    var isNewOption = false,\r\n                        element;\r\n\r\n                    if (typeof data.id == 'undefined') {\r\n                        data = {\r\n                            'id': 'option_' + this.itemCount,\r\n                            'sort_order': this.itemCount + 1,\r\n                            'empty_class': 'unavailable'\r\n                        };\r\n                        isNewOption = true;\r\n                    } else if (data.defaultswatch0 === '') {\r\n                        data['empty_class'] = 'unavailable';\r\n                    }\r\n\r\n                    if (!data.intype) {\r\n                        data.intype = swatchOptionVisualDefaultInputType;\r\n                    }\r\n\r\n                    element = this.template({\r\n                        data: data\r\n                    });\r\n\r\n                    if (isNewOption && !this.isReadOnly) {\r\n                        this.enableNewOptionDeleteButton(data.id);\r\n                    }\r\n                    this.itemCount++;\r\n                    this.totalItems++;\r\n                    this.elements += element;\r\n\r\n                    if (render) {\r\n                        this.render();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * ColorPicker initialization process\r\n                 */\r\n                initColorPicker: function () {\r\n                    var element = this,\r\n                        hiddenColorPicker = !jQuery(element).data('colorpickerId');\r\n\r\n                    jQuery(this).ColorPicker({\r\n\r\n                        /**\r\n                         * ColorPicker onShow action\r\n                         */\r\n                        onShow: function () {\r\n                            var color = jQuery(element).parent().parent().prev().prev('input').val(),\r\n                                menu = jQuery(this).parents('.swatch_sub-menu_container');\r\n\r\n                            menu.hide();\r\n                            jQuery(element).ColorPickerSetColor(color);\r\n                        },\r\n\r\n                        /**\r\n                         * ColorPicker onSubmit action\r\n                         *\r\n                         * @param {String} hsb\r\n                         * @param {String} hex\r\n                         * @param {String} rgb\r\n                         * @param {String} el\r\n                         */\r\n                        onSubmit: function (hsb, hex, rgb, el) {\r\n                            var container = jQuery(el).parent().parent().prev();\r\n\r\n                            jQuery(el).ColorPickerHide();\r\n                            container.parent().removeClass('unavailable');\r\n                            container.prev('input').val('#' + hex);\r\n                            container.css('background', '#' + hex);\r\n                        }\r\n                    });\r\n\r\n                    if (hiddenColorPicker) {\r\n                        jQuery(this).ColorPickerShow();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Remove action\r\n                 *\r\n                 * @param {Object} event\r\n                 */\r\n                remove: function (event) {\r\n                    var element = $(Event.findElement(event, 'tr')),\r\n                        elementFlags; // !!! Button already have table parent in safari\r\n\r\n                    // Safari workaround\r\n                    element.ancestors().each(function (parentItem) {\r\n                        if (parentItem.hasClassName('option-row')) {\r\n                            element = parentItem;\r\n                            throw $break;\r\n                        } else if (parentItem.hasClassName('box')) {\r\n                            throw $break;\r\n                        }\r\n                    });\r\n\r\n                    if (element) {\r\n                        elementFlags = element.getElementsByClassName('delete-flag');\r\n\r\n                        if (elementFlags[0]) {\r\n                            elementFlags[0].value = 1;\r\n                        }\r\n\r\n                        element.addClassName('no-display');\r\n                        element.addClassName('template');\r\n                        element.hide();\r\n                        this.totalItems--;\r\n                        this.updateItemsCountField();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Update items count field\r\n                 */\r\n                updateItemsCountField: function () {\r\n                    $('swatch-visual-option-count-check').value = this.totalItems > 0 ? '1' : '';\r\n                },\r\n\r\n                /**\r\n                 * Enable delete button for new option\r\n                 *\r\n                 * @param {String} id\r\n                 */\r\n                enableNewOptionDeleteButton: function (id) {\r\n                    $$('#delete_button_swatch_container_' + id + ' button').each(function (button) {\r\n                        button.enable();\r\n                        button.removeClassName('disabled');\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * Bind remove button\r\n                 */\r\n                bindRemoveButtons: function () {\r\n                    jQuery('#swatch-visual-options-panel').on('click', '.delete-option', this.remove.bind(this));\r\n                },\r\n\r\n                /**\r\n                 * Render options\r\n                 */\r\n                render: function () {\r\n                    Element.insert($$('[data-role=swatch-visual-options-container]')[0], this.elements);\r\n                    this.elements = '';\r\n                },\r\n\r\n                /**\r\n                 * Render elements with delay (performance fix)\r\n                 *\r\n                 * @param {Object} data\r\n                 * @param {Number} from\r\n                 * @param {Number} step\r\n                 * @param {Number} delay\r\n                 * @returns {Boolean}\r\n                 */\r\n                renderWithDelay: function (data, from, step, delay) {\r\n                    var arrayLength = data.length,\r\n                        len;\r\n\r\n                    for (len = from + step; from < len && from < arrayLength; from++) {\r\n                        this.add(data[from]);\r\n                    }\r\n                    this.render();\r\n\r\n                    if (from === arrayLength) {\r\n                        this.updateItemsCountField();\r\n                        this.rendered = 1;\r\n                        jQuery('body').trigger('processStop');\r\n\r\n                        return true;\r\n                    }\r\n                    setTimeout(this.renderWithDelay.bind(this, data, from, step, delay), delay);\r\n                },\r\n\r\n                /**\r\n                 * Ignore validate action\r\n                 */\r\n                ignoreValidate: function () {\r\n                    var ignore = '.ignore-validate input, ' +\r\n                        '.ignore-validate select, ' +\r\n                        '.ignore-validate textarea';\r\n\r\n                    jQuery('#edit_form').data('validator').settings.forceIgnore = ignore;\r\n                }\r\n            };\r\n\r\n        if ($('add_new_swatch_visual_option_button')) {\r\n            Event.observe(\r\n                'add_new_swatch_visual_option_button',\r\n                'click',\r\n                swatchVisualOption.add.bind(swatchVisualOption, {}, true)\r\n            );\r\n        }\r\n\r\n        jQuery('#swatch-visual-options-panel').on('render', function () {\r\n            swatchVisualOption.ignoreValidate();\r\n\r\n            if (swatchVisualOption.rendered) {\r\n                return false;\r\n            }\r\n            jQuery('body').trigger('processStart');\r\n            swatchVisualOption.renderWithDelay(config.attributesData, 0, 100, 300);\r\n            swatchVisualOption.bindRemoveButtons();\r\n            jQuery('#swatch-visual-options-panel').on(\r\n                'click',\r\n                '.colorpicker_handler',\r\n                swatchVisualOption.initColorPicker\r\n            );\r\n        });\r\n        jQuery('body').on('click', function (event) {\r\n            var element = jQuery(event.target);\r\n\r\n            if (\r\n                element.parents('.swatch_sub-menu_container').length === 1 ||\r\n                element.next('div.swatch_sub-menu_container').length === 1\r\n            ) {\r\n                return true;\r\n            }\r\n            jQuery('.swatch_sub-menu_container').hide();\r\n        });\r\n\r\n        if (config.isSortable) {\r\n            jQuery(function ($) {\r\n                $('[data-role=swatch-visual-options-container]').sortable({\r\n                    distance: 8,\r\n                    tolerance: 'pointer',\r\n                    cancel: 'input, button',\r\n                    axis: 'y',\r\n\r\n                    /**\r\n                     * Update component\r\n                     */\r\n                    update: function () {\r\n                        $('[data-role=swatch-visual-options-container] [data-role=order]').each(\r\n                            function (index, element) {\r\n                                $(element).val(index + 1);\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        window.swatchVisualOption = swatchVisualOption;\r\n        window.swatchOptionVisualDefaultInputType = swatchOptionVisualDefaultInputType;\r\n\r\n        rg.set('swatch-visual-options-panel', swatchVisualOption);\r\n\r\n        jQuery(function ($) {\r\n\r\n            var swatchComponents = {\r\n\r\n                /**\r\n                 * div wrapper for to hide all evement\r\n                 */\r\n                wrapper: null,\r\n\r\n                /**\r\n                 * iframe component to perform file upload without page reload\r\n                 */\r\n                iframe: null,\r\n\r\n                /**\r\n                 * form component for upload image\r\n                 */\r\n                form: null,\r\n\r\n                /**\r\n                 * Input file component for upload image\r\n                 */\r\n                inputFile: null,\r\n\r\n                /**\r\n                 * Create swatch component for upload files\r\n                 *\r\n                 * @this {swatchComponents}\r\n                 * @public\r\n                 */\r\n                create: function () {\r\n                    this.wrapper = $('<div>').css({\r\n                        display: 'none'\r\n                    }).appendTo($('body'));\r\n\r\n                    this.iframe = $('<iframe />', {\r\n                        id:  'upload_iframe',\r\n                        name: 'upload_iframe'\r\n                    }).appendTo(this.wrapper);\r\n\r\n                    this.form = $('<form />', {\r\n                        id: 'swatch_form_image_upload',\r\n                        name: 'swatch_form_image_upload',\r\n                        target: 'upload_iframe',\r\n                        method: 'post',\r\n                        enctype: 'multipart/form-data',\r\n                        class: 'ignore-validate',\r\n                        action: config.uploadActionUrl\r\n                    }).appendTo(this.wrapper);\r\n\r\n                    this.inputFile = $('<input />', {\r\n                        type: 'file',\r\n                        name: 'datafile',\r\n                        class: 'swatch_option_file'\r\n                    }).appendTo(this.form);\r\n\r\n                    $('<input />', {\r\n                        type: 'hidden',\r\n                        name: 'form_key',\r\n                        value: FORM_KEY\r\n                    }).appendTo(this.form);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Create swatch components\r\n             */\r\n            swatchComponents.create();\r\n\r\n            /**\r\n             * Register event for swatch input[type=file] change\r\n             */\r\n            swatchComponents.inputFile.change(function () {\r\n                var container = $('#' + $(this).attr('data-called-by')).parents().eq(2).children('.swatch_window'),\r\n\r\n                    /**\r\n                     * @this {iframe}\r\n                     */\r\n                    iframeHandler = function () {\r\n                        var imageParams = $.parseJSON($(this).contents().find('body').html()),\r\n                            fullMediaUrl = imageParams['swatch_path'] + imageParams['file_path'];\r\n\r\n                        container.prev('input').val(imageParams['file_path']);\r\n                        container.css({\r\n                            'background-image': 'url(' + fullMediaUrl + ')',\r\n                            'background-size': 'cover'\r\n                        });\r\n                        container.parent().removeClass('unavailable');\r\n                    };\r\n\r\n                swatchComponents.iframe.off('load');\r\n                swatchComponents.iframe.load(iframeHandler);\r\n                swatchComponents.form.submit();\r\n                $(this).val('');\r\n            });\r\n\r\n            /**\r\n             * Register event for choose \"upload image\" option\r\n             */\r\n            $(document).on('click', '.btn_choose_file_upload', function () {\r\n                swatchComponents.inputFile.attr('data-called-by', $(this).attr('id'));\r\n                swatchComponents.inputFile.click();\r\n            });\r\n\r\n            /**\r\n             * Register event for remove option\r\n             */\r\n            $(document).on('click', '.btn_remove_swatch', function () {\r\n                var optionPanel = $(this).parents().eq(2);\r\n\r\n                optionPanel.children('input').val('');\r\n                optionPanel.children('.swatch_window').css('background', '');\r\n\r\n                optionPanel.addClass('unavailable');\r\n\r\n                jQuery('.swatch_sub-menu_container').hide();\r\n            });\r\n\r\n            /**\r\n             * Toggle color upload chooser\r\n             */\r\n            $(document).on('click', '.swatch_window', function () {\r\n                $(this).next('div').toggle();\r\n            });\r\n        });\r\n    };\r\n});\r\n","Magento_Swatches/js/form/element/swatch-visual.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global $break $ FORM_KEY */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'prototype',\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'jquery/colorpicker/js/colorpicker',\r\n    'jquery/ui'\r\n], function (_, jQuery, mageTemplate, rg, prototype, Abstract) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Former implementation.\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} container\r\n     * @param {String} uploadUrl\r\n     * @param {String} elementName\r\n     */\r\n    function oldCode(value, container, uploadUrl, elementName) {\r\n        var swatchVisualOption = {\r\n            itemCount: 0,\r\n            totalItems: 0,\r\n            rendered: 0,\r\n            isReadOnly: false,\r\n\r\n            /**\r\n             * Initialize.\r\n             */\r\n            initialize: function () {\r\n                if (_.isEmpty(value)) {\r\n                    container.addClassName('unavailable');\r\n                }\r\n\r\n                jQuery(container).on(\r\n                    'click',\r\n                    '.colorpicker_handler',\r\n                    this.initColorPicker\r\n                );\r\n            },\r\n\r\n            /**\r\n             * ColorPicker initialization process\r\n             */\r\n            initColorPicker: function () {\r\n                var element = this,\r\n                    hiddenColorPicker = !jQuery(element).data('colorpickerId');\r\n\r\n                jQuery(this).ColorPicker({\r\n\r\n                    /**\r\n                     * ColorPicker onShow action\r\n                     */\r\n                    onShow: function () {\r\n                        var color = jQuery(element).parent().parent().prev().prev('input').val(),\r\n                            menu = jQuery(this).parents('.swatch_sub-menu_container');\r\n\r\n                        menu.hide();\r\n                        jQuery(element).ColorPickerSetColor(color);\r\n                    },\r\n\r\n                    /**\r\n                     * ColorPicker onSubmit action\r\n                     *\r\n                     * @param {String} hsb\r\n                     * @param {String} hex\r\n                     * @param {String} rgb\r\n                     * @param {String} el\r\n                     */\r\n                    onSubmit: function (hsb, hex, rgb, el) {\r\n                        var localContainer = jQuery(el).parent().parent().prev();\r\n\r\n                        jQuery(el).ColorPickerHide();\r\n                        localContainer.parent().removeClass('unavailable');\r\n                        localContainer.prev('input').val('#' + hex).trigger('change');\r\n                        localContainer.css('background', '#' + hex);\r\n                    }\r\n                });\r\n\r\n                if (hiddenColorPicker) {\r\n                    jQuery(this).ColorPickerShow();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Remove action\r\n             *\r\n             * @param {Object} event\r\n             */\r\n            remove: function (event) {\r\n                var element = $(Event.findElement(event, 'tr')),\r\n                    elementFlags; // !!! Button already have table parent in safari\r\n\r\n                // Safari workaround\r\n                element.ancestors().each(function (parentItem) {\r\n                    if (parentItem.hasClassName('option-row')) {\r\n                        element = parentItem;\r\n                        throw $break;\r\n                    } else if (parentItem.hasClassName('box')) {\r\n                        throw $break;\r\n                    }\r\n                });\r\n\r\n                if (element) {\r\n                    elementFlags = element.getElementsByClassName('delete-flag');\r\n\r\n                    if (elementFlags[0]) {\r\n                        elementFlags[0].value = 1;\r\n                    }\r\n\r\n                    element.addClassName('no-display');\r\n                    element.addClassName('template');\r\n                    element.hide();\r\n                    this.totalItems--;\r\n                    this.updateItemsCountField();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Update items count field\r\n             */\r\n            updateItemsCountField: function () {\r\n                $('swatch-visual-option-count-check').value = this.totalItems > 0 ? '1' : '';\r\n            }\r\n        };\r\n\r\n        //swatchVisualOption.initColorPicker();\r\n\r\n        jQuery('body').on('click', function (event) {\r\n            var element = jQuery(event.target);\r\n\r\n            if (\r\n                element.parents('.swatch_sub-menu_container').length === 1 ||\r\n                element.next('div.swatch_sub-menu_container').length === 1\r\n            ) {\r\n                return true;\r\n            }\r\n            jQuery('.swatch_sub-menu_container').hide();\r\n        });\r\n\r\n        jQuery(function ($) {\r\n\r\n            var swatchComponents = {\r\n\r\n                /**\r\n                 * div wrapper for to hide all evement\r\n                 */\r\n                wrapper: null,\r\n\r\n                /**\r\n                 * iframe component to perform file upload without page reload\r\n                 */\r\n                iframe: null,\r\n\r\n                /**\r\n                 * form component for upload image\r\n                 */\r\n                form: null,\r\n\r\n                /**\r\n                 * Input file component for upload image\r\n                 */\r\n                inputFile: null,\r\n\r\n                /**\r\n                 * Create swatch component for upload files\r\n                 *\r\n                 * @this {swatchComponents}\r\n                 * @public\r\n                 */\r\n                create: function () {\r\n                    this.wrapper = $('<div>').css({\r\n                        display: 'none'\r\n                    }).appendTo($('body'));\r\n\r\n                    this.iframe = $('<iframe />', {\r\n                        name: 'upload_iframe_' + elementName\r\n                    }).appendTo(this.wrapper);\r\n\r\n                    this.form = $('<form />', {\r\n                        name: 'swatch_form_image_upload_' + elementName,\r\n                        target: 'upload_iframe_' + elementName,\r\n                        method: 'post',\r\n                        enctype: 'multipart/form-data',\r\n                        class: 'ignore-validate',\r\n                        action: uploadUrl\r\n                    }).appendTo(this.wrapper);\r\n\r\n                    this.inputFile = $('<input />', {\r\n                        type: 'file',\r\n                        name: 'datafile',\r\n                        class: 'swatch_option_file'\r\n                    }).appendTo(this.form);\r\n\r\n                    $('<input />', {\r\n                        type: 'hidden',\r\n                        name: 'form_key',\r\n                        value: FORM_KEY\r\n                    }).appendTo(this.form);\r\n                }\r\n            };\r\n\r\n            swatchVisualOption.initialize();\r\n\r\n            /**\r\n             * Create swatch components\r\n             */\r\n            swatchComponents.create();\r\n\r\n            /**\r\n             * Register event for swatch input[type=file] change\r\n             */\r\n            swatchComponents.inputFile.change(function () {\r\n                var localContainer = $('.' + $(this).attr('data-called-by')).parents().eq(2).children('.swatch_window'),\r\n\r\n                    /**\r\n                     * @this {iframe}\r\n                     */\r\n                    iframeHandler = function () {\r\n                        var imageParams = $.parseJSON($(this).contents().find('body').html()),\r\n                            fullMediaUrl = imageParams['swatch_path'] + imageParams['file_path'];\r\n\r\n                        localContainer.prev('input').val(imageParams['file_path']).trigger('change');\r\n                        localContainer.css({\r\n                            'background-image': 'url(' + fullMediaUrl + ')',\r\n                            'background-size': 'cover'\r\n                        });\r\n                        localContainer.parent().removeClass('unavailable');\r\n                    };\r\n\r\n                swatchComponents.iframe.off('load');\r\n                swatchComponents.iframe.load(iframeHandler);\r\n                swatchComponents.form.submit();\r\n                $(this).val('');\r\n            });\r\n\r\n            /**\r\n             * Register event for choose \"upload image\" option\r\n             */\r\n            $(container).on('click', '.btn_choose_file_upload', function () {\r\n                swatchComponents.inputFile.attr('data-called-by', $(this).data('class'));\r\n                swatchComponents.inputFile.click();\r\n            });\r\n\r\n            /**\r\n             * Register event for remove option\r\n             */\r\n            $(container).on('click', '.btn_remove_swatch', function () {\r\n                var optionPanel = $(this).parents().eq(2);\r\n\r\n                optionPanel.children('input').val('').trigger('change');\r\n                optionPanel.children('.swatch_window').css('background', '');\r\n                optionPanel.addClass('unavailable');\r\n                jQuery('.swatch_sub-menu_container').hide();\r\n            });\r\n\r\n            /**\r\n             * Toggle color upload chooser\r\n             */\r\n            $(container).on('click', '.swatch_window', function () {\r\n                jQuery('.swatch_sub-menu_container').hide();\r\n                $(this).next('div').toggle();\r\n            });\r\n        });\r\n    }\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            elementId: 0,\r\n            prefixName: '',\r\n            prefixElementName: '',\r\n            elementName: '',\r\n            value: '',\r\n            uploadUrl: ''\r\n        },\r\n\r\n        /**\r\n         * Parses options and merges the result with instance\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.configureDataScope();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initOldCode()\r\n                .on('value', this.onChangeColor.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handler function that execute when color changes.\r\n         *\r\n         * @param {String} data - color\r\n         */\r\n        onChangeColor: function (data) {\r\n            if (!data) {\r\n                jQuery('.' + this.elementName).parent().removeClass('unavailable');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize wrapped former implementation.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initOldCode: function () {\r\n            jQuery.async('.' + this.elementName, this.name, function (elem) {\r\n                oldCode(this.value(), elem.parentElement, this.uploadUrl, this.elementName);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure data scope.\r\n         */\r\n        configureDataScope: function () {\r\n            var recordId, prefixName;\r\n\r\n            // Get recordId\r\n            recordId = this.parentName.split('.').last();\r\n\r\n            prefixName = this.dataScopeToHtmlArray(this.prefixName);\r\n            this.elementName = this.prefixElementName + recordId;\r\n\r\n            this.inputName = prefixName + '[' + this.elementName + ']';\r\n            this.exportDataLink = 'data.' + this.prefixName + '.' + this.elementName;\r\n            this.exports.value = this.provider + ':' + this.exportDataLink;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroy: function () {\r\n            this._super();\r\n\r\n            this.source.remove(this.exportDataLink);\r\n        },\r\n\r\n        /**\r\n         * Get HTML array from data scope.\r\n         *\r\n         * @param {String} dataScopeString\r\n         * @returns {String}\r\n         */\r\n        dataScopeToHtmlArray: function (dataScopeString) {\r\n            var dataScopeArray, dataScope, reduceFunction;\r\n\r\n            /**\r\n             * Add new level of nesting.\r\n             *\r\n             * @param {String} prev\r\n             * @param {String} curr\r\n             * @returns {String}\r\n             */\r\n            reduceFunction = function (prev, curr) {\r\n                return prev + '[' + curr + ']';\r\n            };\r\n\r\n            dataScopeArray = dataScopeString.split('.');\r\n\r\n            dataScope = dataScopeArray.shift();\r\n            dataScope += dataScopeArray.reduce(reduceFunction, '');\r\n\r\n            return dataScope;\r\n        }\r\n    });\r\n});\r\n","Magento_Tax/js/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'mage/backend/editablemultiselect'\r\n]);\r\n","Magento_Tax/js/price/adjustment.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'mage/translate'\r\n], function (Element, $t) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_Tax/price/adjustment',\r\n            taxPriceType: 'final_price',\r\n            taxPriceCssClass: 'price-including-tax',\r\n            bothPrices: 3,\r\n            inclTax: 2,\r\n            exclTax: 1,\r\n            modules: {\r\n                price: '${ $.parentName }'\r\n            },\r\n            listens: {\r\n                price: 'initializePriceAttributes'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initializePriceAttributes();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update parent price.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initializePriceAttributes: function () {\r\n            if (this.displayBothPrices && this.price()) {\r\n                this.price().priceWrapperCssClasses = this.taxPriceCssClass;\r\n                this.price().priceWrapperAttr = {\r\n                    'data-label': $t('Incl. Tax')\r\n                };\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get price tax adjustment.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} tax html\r\n         */\r\n        getTax: function (row) {\r\n            return row['price_info']['extension_attributes']['tax_adjustments']['formatted_prices'][this.taxPriceType];\r\n        },\r\n\r\n        /**\r\n         * Set price tax type.\r\n         *\r\n         * @param {String} priceType\r\n         * @return {Object}\r\n         */\r\n        setPriceType: function (priceType) {\r\n            this.taxPriceType = priceType;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display\r\n         * both price including tax and price excluding tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayBothPrices: function () {\r\n            return +this.source.data.displayTaxes === this.bothPrices;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price including tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceIncludeTax: function () {\r\n            return +this.source.data.displayTaxes === this.inclTax;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price excluding tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceExclTax: function () {\r\n            return +this.source.data.displayTaxes === this.exclTax;\r\n        }\r\n    });\r\n});\r\n","Magento_Theme/js/bootstrap.js":"/**\r\n *\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'jquery/fileUploader/jquery.fileupload-ui',\r\n    'mage/adminhtml/browser',\r\n    'Magento_Theme/js/form'\r\n]);\r\n","Magento_Theme/js/custom-js-list.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('theme.themeJsList', {\r\n        options: {\r\n            templateId: null,\r\n            emptyTemplateId: null,\r\n            refreshFileListEvent: null,\r\n            prefixItemId: '',\r\n            suffixItemId: ''\r\n        },\r\n\r\n        /**\r\n         * Initialize widget\r\n         *\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Bind event handlers\r\n         *\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            $('body').on(this.options.refreshFileListEvent, $.proxy(this._onRefreshList, this));\r\n        },\r\n\r\n        /**\r\n         * Render js files list\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @protected\r\n         */\r\n        _onRefreshList: function (event, data) {\r\n            $(this.element).html('');\r\n\r\n            if (data.jsList.length) {\r\n                this._renderList(data.jsList);\r\n            } else {\r\n                this._renderEmptyList();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get item js list id\r\n         *\r\n         * @param {*} fileId\r\n         * @return {String}\r\n         * @protected\r\n         */\r\n        _getItemId: function (fileId) {\r\n            return this.options.prefixItemId + fileId + this.options.suffixItemId;\r\n        },\r\n\r\n        /**\r\n         * Render js list\r\n         *\r\n         * @param {Array} jsList\r\n         * @protected\r\n         */\r\n        _renderList: function (jsList) {\r\n            var itemTmpl,\r\n                index,\r\n                tmpl;\r\n\r\n            for (index = 0; index < jsList.length; index++) {\r\n                itemTmpl = $('<li></li>').html($(this.options.templateId).html());\r\n\r\n                $(itemTmpl).attr('class', $(this.options.templateId).attr('class'));\r\n\r\n                itemTmpl.attr('id', this._getItemId(jsList[index].id));\r\n\r\n                tmpl = mageTemplate(itemTmpl.html(), {\r\n                    data: jsList[index]\r\n                });\r\n\r\n                itemTmpl.html(tmpl);\r\n\r\n                itemTmpl.removeClass('no-display');\r\n                itemTmpl.appendTo(this.element);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set empty js list\r\n         *\r\n         * @protected\r\n         */\r\n        _renderEmptyList: function () {\r\n            var itemTmpl = $('<li></li>').html($(this.options.emptyTemplateId).html());\r\n\r\n            $(itemTmpl).attr('class', $(this.options.emptyTemplateId).attr('class'));\r\n\r\n            itemTmpl.attr('id', 'empty-js-list');\r\n            itemTmpl.removeClass('no-display');\r\n            itemTmpl.appendTo(this.element);\r\n        }\r\n    });\r\n});\r\n","Magento_Theme/js/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'prototype'\r\n], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} selected\r\n     * @param {Object} defaultsById\r\n     */\r\n    function parentThemeOnChange(selected, defaultsById) {\r\n        var statusBar = $$('.tab-item-link')[0],\r\n            isChanged = statusBar.hasClassName('changed'),\r\n            defaults;\r\n\r\n        if (!isChanged) {\r\n            defaults = defaultsById[selected];\r\n            $('theme_title').value = defaults['theme_title'];\r\n        }\r\n    }\r\n\r\n    window.parentThemeOnChange = parentThemeOnChange;\r\n});\r\n","Magento_Theme/js/sortable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * JQuery UI Widget declaration: 'mage.sortable'\r\n *\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Widget panel\r\n     */\r\n    $.widget('mage.sortable', $.ui.sortable, {\r\n        options: {\r\n            moveUpEvent:   'moveUp',\r\n            moveDownEvent: 'moveDown'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._super();\r\n            this.initButtons();\r\n            this.bind();\r\n        },\r\n\r\n        /**\r\n         * Init buttons.\r\n         */\r\n        initButtons: function () {\r\n            this.element.find('input.up').on('click', $.proxy(function (event) {\r\n                $('body').trigger(this.options.moveUpEvent, {\r\n                    item: $(event.target).parent('li')\r\n                });\r\n            }, this));\r\n            this.element.find('input.down').on('click', $.proxy(function (event) {\r\n                $('body').trigger(this.options.moveDownEvent, {\r\n                    item: $(event.target).parent('li')\r\n                });\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Bind.\r\n         */\r\n        bind: function () {\r\n            var $body = $('body');\r\n\r\n            $body.on(this.options.moveUpEvent, $.proxy(this._onMoveUp, this));\r\n            $body.on(this.options.moveDownEvent, $.proxy(this._onMoveDown, this));\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _onMoveUp: function (event, data) {\r\n            data.item.insertBefore(data.item.prev());\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _onMoveDown: function (event, data) {\r\n            data.item.insertAfter(data.item.next());\r\n        }\r\n    });\r\n\r\n    return $.mage.sortable;\r\n});\r\n","Magento_Theme/js/form/component/robots-reset-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/components/button',\r\n    'uiRegistry'\r\n], function (Button, registry) {\r\n    'use strict';\r\n\r\n    return Button.extend({\r\n        defaults: {\r\n            customInstructionField: '${ $.parentName }.custom_instructions',\r\n            label: '',\r\n            buttonTpl: 'Magento_Theme/form/element/button'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         * @param {String} json\r\n         * @return {String}\r\n         */\r\n        _parseJson: function (json) {\r\n            return JSON.parse(json);\r\n        },\r\n\r\n        /**\r\n         * @param {String} defaultRobotsTxt\r\n         */\r\n        reset: function (defaultRobotsTxt) {\r\n            var customInstructions = registry.get(this.customInstructionField);\r\n\r\n            if (customInstructions) {\r\n                customInstructions.set('value', this._parseJson(defaultRobotsTxt));\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Tinymce3/tinymce3Adapter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated use lib/web/mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter.js instead\r\n */\r\n/* global varienGlobalEvents, tinyMceEditors, MediabrowserUtility, closeEditorPopup, Base64 */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'tinymceDeprecated',\r\n    'mage/adminhtml/wysiwyg/tiny_mce/html5-schema',\r\n    'mage/translate',\r\n    'prototype',\r\n    'mage/adminhtml/events'\r\n], function (jQuery, _, tinyMCE3, html5Schema) {\r\n\r\n    var tinyMce3Wysiwyg = Class.create();\r\n\r\n    tinyMce3Wysiwyg.prototype = {\r\n        mediaBrowserOpener: null,\r\n        mediaBrowserTargetElementId: null,\r\n\r\n        /**\r\n         * @param {*} htmlId\r\n         * @param {Object} config\r\n         */\r\n        initialize: function (htmlId, config) {\r\n            if (config.baseStaticUrl && config.baseStaticDefaultUrl) {\r\n                tinyMCE3.baseURL = tinyMCE3.baseURL.replace(config.baseStaticUrl, config.baseStaticDefaultUrl);\r\n            }\r\n\r\n            this.id = htmlId;\r\n            this.config = config;\r\n            this.schema = config.schema || html5Schema;\r\n\r\n            _.bindAll(\r\n                this,\r\n                'beforeSetContent',\r\n                'saveContent',\r\n                'onChangeContent',\r\n                'openFileBrowser',\r\n                'updateTextArea',\r\n                'removeEvents'\r\n            );\r\n\r\n            varienGlobalEvents.attachEventHandler('tinymceChange', this.onChangeContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceBeforeSetContent', this.beforeSetContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceSetContent', this.updateTextArea);\r\n            varienGlobalEvents.attachEventHandler('tinymceSaveContent', this.saveContent);\r\n\r\n            if (typeof tinyMceEditors == 'undefined') {\r\n                window.tinyMceEditors = $H({});\r\n            }\r\n\r\n            tinyMceEditors.set(this.id, this);\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         */\r\n        setup: function (mode) {\r\n            if (this.config['widget_plugin_src']) {\r\n                tinyMCE3.PluginManager.load('magentowidget', 'plugins/magentowidget/editor_plugin.js');\r\n            }\r\n\r\n            if (this.config.plugins) {\r\n                this.config.plugins.each(function (plugin) {\r\n                    tinyMCE3.PluginManager.load(plugin.name, plugin.src);\r\n                });\r\n            }\r\n\r\n            if (jQuery.isReady) {\r\n                tinyMCE3.dom.Event.domLoaded = true;\r\n            }\r\n\r\n            tinyMCE3.init(this.getSettings(mode));\r\n            varienGlobalEvents.clearEventHandlers('open_browser_callback');\r\n            varienGlobalEvents.attachEventHandler('open_browser_callback', tinyMceEditors.get(this.id).openFileBrowser);\r\n        },\r\n\r\n        /**\r\n         * Remove events from instance.\r\n         *\r\n         * @param {String} wysiwygId\r\n         */\r\n        removeEvents: function (wysiwygId) {\r\n            var editor = tinyMceEditors.get(wysiwygId);\r\n\r\n            varienGlobalEvents.removeEventHandler('tinymceChange', editor.onChangeContent);\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         * @return {Object}\r\n         */\r\n        getSettings: function (mode) {\r\n            var plugins = 'inlinepopups,safari,pagebreak,style,layer,table,advhr,advimage,emotions,iespell,media,searchreplace,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,noneditable', //eslint-disable-line\r\n                self = this,\r\n                magentoPluginsOptions, magentoPlugins, settings;\r\n\r\n            if (this.config['widget_plugin_src']) {\r\n                plugins = 'magentowidget,' + plugins;\r\n            }\r\n\r\n            magentoPluginsOptions = $H({});\r\n            magentoPlugins = '';\r\n\r\n            if (this.config.plugins) {\r\n                this.config.plugins.each(function (plugin) {\r\n                    magentoPlugins = plugin.name + ',' + magentoPlugins;\r\n                    magentoPluginsOptions.set(plugin.name, plugin.options);\r\n                });\r\n\r\n                if (magentoPlugins) {\r\n                    plugins = '-' + magentoPlugins + plugins;\r\n                }\r\n            }\r\n\r\n            settings = {\r\n                'entity_encoding': 'raw',\r\n                mode: mode != undefined ? mode : 'none', //eslint-disable-line eqeqeq\r\n                elements: this.id,\r\n                theme: 'advanced',\r\n                plugins: plugins,\r\n                'theme_advanced_buttons1': magentoPlugins + 'magentowidget,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect', //eslint-disable-line max-len\r\n                'theme_advanced_buttons2': 'cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,forecolor,backcolor', //eslint-disable-line max-len\r\n                'theme_advanced_buttons3': 'tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,iespell,media,advhr,|,ltr,rtl,|,fullscreen', //eslint-disable-line max-len\r\n                'theme_advanced_buttons4': 'insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,pagebreak', //eslint-disable-line max-len\r\n                'theme_advanced_toolbar_location': 'top',\r\n                'theme_advanced_toolbar_align': 'left',\r\n                'theme_advanced_statusbar_location': 'bottom',\r\n                'valid_elements': this.schema.validElements.join(','),\r\n                'valid_children': this.schema.validChildren.join(','),\r\n                'theme_advanced_resizing': true,\r\n                'theme_advanced_resize_horizontal': false,\r\n                'convert_urls': false,\r\n                'relative_urls': false,\r\n                'content_css': this.config['content_css'],\r\n                'custom_popup_css': this.config['popup_css'],\r\n                'magentowidget_url': this.config['widget_window_url'],\r\n                'noneditable_leave_contenteditable': true,\r\n                magentoPluginsOptions: magentoPluginsOptions,\r\n                doctype: '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">', //eslint-disable-line max-len\r\n\r\n                /**\r\n                 * @param {Object} ed\r\n                 */\r\n                setup: function (ed) {\r\n                    var onChange;\r\n\r\n                    ed.onPreInit.add(self.onEditorPreInit.bind(self));\r\n\r\n                    ed.onInit.add(self.onEditorInit.bind(self));\r\n\r\n                    ed.onInit.add(function (editor) {\r\n                        varienGlobalEvents.fireEvent('wysiwygEditorInitialized', editor);\r\n                    });\r\n\r\n                    ed.onSubmit.add(function (edi, e) {\r\n                        varienGlobalEvents.fireEvent('tinymceSubmit', e);\r\n                    });\r\n\r\n                    ed.onPaste.add(function (edi, e, o) {\r\n                        varienGlobalEvents.fireEvent('tinymcePaste', o);\r\n                    });\r\n\r\n                    ed.onBeforeSetContent.add(function (edi, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceBeforeSetContent', o);\r\n                    });\r\n\r\n                    ed.onSetContent.add(function (edi, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceSetContent', o);\r\n                    });\r\n\r\n                    ed.onSaveContent.add(function (edi, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceSaveContent', o);\r\n                    });\r\n\r\n                    /**\r\n                     * @param {*} edi\r\n                     * @param {*} l\r\n                     */\r\n                    onChange = function (edi, l) {\r\n                        varienGlobalEvents.fireEvent('tinymceChange', l);\r\n                    };\r\n\r\n                    ed.onChange.add(onChange);\r\n                    ed.onKeyUp.add(onChange);\r\n\r\n                    ed.onExecCommand.add(function (edi, cmd) {\r\n                        varienGlobalEvents.fireEvent('tinymceExecCommand', cmd);\r\n                    });\r\n                }\r\n            };\r\n\r\n            // jscs:disable requireDotNotation\r\n            if (!settings['style_formats']) {\r\n                settings['theme_advanced_buttons1'] = settings['theme_advanced_buttons1'].replace(',styleselect', '');\r\n            }\r\n\r\n            // Set the document base URL\r\n            if (this.config['document_base_url']) {\r\n                settings['document_base_url'] = this.config['document_base_url'];\r\n            }\r\n\r\n            if (this.config['files_browser_window_url']) {\r\n\r\n                /**\r\n                 * @param {*} fieldName\r\n                 * @param {*} url\r\n                 * @param {*} objectType\r\n                 * @param {*} w\r\n                 */\r\n                settings['file_browser_callback'] = function (fieldName, url, objectType, w) {\r\n                    varienGlobalEvents.fireEvent('open_browser_callback', {\r\n                        win: w,\r\n                        type: objectType,\r\n                        field: fieldName\r\n                    });\r\n                };\r\n            }\r\n            // jscs:enable requireDotNotation\r\n\r\n            if (this.config.width) {\r\n                settings.width = this.config.width;\r\n            }\r\n\r\n            if (this.config.height) {\r\n                settings.height = this.config.height;\r\n            }\r\n\r\n            if (this.config.settings) {\r\n                Object.extend(settings, this.config.settings);\r\n            }\r\n\r\n            return settings;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} editor\r\n         */\r\n        applySchema: function (editor) {\r\n            var schema      = editor.schema,\r\n                schemaData  = this.schema,\r\n                makeMap     = tinyMCE3.makeMap;\r\n\r\n            jQuery.extend(true, {\r\n                nonEmpty: schema.getNonEmptyElements(),\r\n                boolAttrs: schema.getBoolAttrs(),\r\n                whiteSpace: schema.getWhiteSpaceElements(),\r\n                shortEnded: schema.getShortEndedElements(),\r\n                selfClosing: schema.getSelfClosingElements(),\r\n                blockElements: schema.getBlockElements()\r\n            }, {\r\n                nonEmpty: makeMap(schemaData.nonEmpty),\r\n                boolAttrs: makeMap(schemaData.boolAttrs),\r\n                whiteSpace: makeMap(schemaData.whiteSpace),\r\n                shortEnded: makeMap(schemaData.shortEnded),\r\n                selfClosing: makeMap(schemaData.selfClosing),\r\n                blockElements: makeMap(schemaData.blockElements)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} id\r\n         */\r\n        get: function (id) {\r\n            return tinyMCE3.get(id);\r\n        },\r\n\r\n        /**\r\n         * @return {String|null}\r\n         */\r\n        getId: function () {\r\n            return this.id || (this.activeEditor() ? this.activeEditor().id : null) || tinyMceEditors.values()[0].id;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        activeEditor: function () {\r\n            return tinyMCE3.activeEditor;\r\n        },\r\n\r\n        /**\r\n         * Insert content to active editor.\r\n         *\r\n         * @param {String} content\r\n         * @param {Boolean} ui\r\n         */\r\n        insertContent: function (content, ui) {\r\n            this.activeEditor().execCommand('mceInsertContent', typeof ui !== 'undefined' ? ui : false, content);\r\n        },\r\n\r\n        /**\r\n         * Set the status of the toolbar to disabled or enabled (true for enabled, false for disabled)\r\n         * @param {Boolean} enabled\r\n         */\r\n        setToolbarStatus: function (enabled) {\r\n            _.each(this.activeEditor().controlManager.controls, function (property, index, controls) {\r\n                controls[property.id].setDisabled(!enabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set the status of the editor and toolbar\r\n         *\r\n         * @param {Boolean} enabled\r\n         */\r\n        setEnabledStatus: function (enabled) {\r\n            if (this.activeEditor()) {\r\n                this.activeEditor().getBody().setAttribute('contenteditable', enabled);\r\n                this.activeEditor().readonly = !enabled;\r\n                this.setToolbarStatus(enabled);\r\n            }\r\n\r\n            if (enabled) {\r\n                this.getTextArea().removeProp('disabled');\r\n            } else {\r\n                this.getTextArea().prop('disabled', 'disabled');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set caret location in WYSIWYG editor.\r\n         *\r\n         * @param {Object} targetElement\r\n         */\r\n        setCaretOnElement: function (targetElement) {\r\n            this.activeEditor().selection.select(targetElement);\r\n            this.activeEditor().selection.collapse();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        openFileBrowser: function (o) {\r\n            var typeTitle = this.translate('Select Images'),\r\n                storeId = this.config['store_id'] !== null ? this.config['store_id'] : 0,\r\n                frameDialog = jQuery(o.win.frameElement).parents('[role=\"dialog\"]'),\r\n                wUrl = this.config['files_browser_window_url'] +\r\n                    'target_element_id/' + this.getId() + '/' +\r\n                    'store/' + storeId + '/';\r\n\r\n            this.mediaBrowserOpener = o.win;\r\n            this.mediaBrowserTargetElementId = o.field;\r\n\r\n            if (typeof o.type != 'undefined' && o.type != '') { //eslint-disable-line eqeqeq\r\n                wUrl = wUrl + 'type/' + o.type + '/';\r\n            }\r\n\r\n            frameDialog.hide();\r\n            jQuery('#mceModalBlocker').hide();\r\n\r\n            require(['mage/adminhtml/browser'], function () {\r\n                MediabrowserUtility.openDialog(wUrl, false, false, typeTitle, {\r\n                    /**\r\n                     * Closed.\r\n                     */\r\n                    closed: function () {\r\n                        frameDialog.show();\r\n                        jQuery('#mceModalBlocker').show();\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} string\r\n         * @return {String}\r\n         */\r\n        translate: function (string) {\r\n            return jQuery.mage.__ ? jQuery.mage.__(string) : string;\r\n        },\r\n\r\n        /**\r\n         * @return {null}\r\n         */\r\n        getMediaBrowserOpener: function () {\r\n            return this.mediaBrowserOpener;\r\n        },\r\n\r\n        /**\r\n         * @return {null}\r\n         */\r\n        getMediaBrowserTargetElementId: function () {\r\n            return this.mediaBrowserTargetElementId;\r\n        },\r\n\r\n        /**\r\n         * @return {jQuery|*|HTMLElement}\r\n         */\r\n        getToggleButton: function () {\r\n            return $('toggle' + this.getId());\r\n        },\r\n\r\n        /**\r\n         * Get plugins button.\r\n         */\r\n        getPluginButtons: function () {\r\n            return jQuery('#buttons' + this.getId() + ' > button.plugin');\r\n        },\r\n\r\n        /**\r\n         * @param {*} mode\r\n         * @return {wysiwygSetup}\r\n         */\r\n        turnOn: function (mode) {\r\n            this.closePopups();\r\n\r\n            this.setup(mode);\r\n\r\n            tinyMCE3.execCommand('mceAddControl', false, this.getId());\r\n\r\n            this.getPluginButtons().hide();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {wysiwygSetup}\r\n         */\r\n        turnOff: function () {\r\n            this.closePopups();\r\n\r\n            tinyMCE3.execCommand('mceRemoveControl', false, this.getId());\r\n\r\n            this.getPluginButtons().show();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Close popups.\r\n         */\r\n        closePopups: function () {\r\n            if (typeof closeEditorPopup == 'function') {\r\n                // close all popups to avoid problems with updating parent content area\r\n                closeEditorPopup('widget_window' + this.getId());\r\n                closeEditorPopup('browser_window' + this.getId());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        toggle: function () {\r\n            if (!tinyMCE3.get(this.getId())) {\r\n                this.turnOn();\r\n\r\n                return true;\r\n            }\r\n            this.turnOff();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Editor pre-initialise event handler.\r\n         */\r\n        onEditorPreInit: function (editor) {\r\n            this.applySchema(editor);\r\n        },\r\n\r\n        /**\r\n         * @deprecated\r\n         */\r\n        onEditorInit: function () {},\r\n\r\n        /**\r\n         * On form validation.\r\n         */\r\n        onFormValidation: function () {\r\n            if (tinyMCE3.get(this.getId())) {\r\n                $(this.getId()).value = tinyMCE3.get(this.getId()).getContent();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * On change content.\r\n         */\r\n        onChangeContent: function () {\r\n            // Add \"changed\" to tab class if it exists\r\n            var tab;\r\n\r\n            this.updateTextArea();\r\n\r\n            if (this.config['tab_id']) {\r\n                tab = $$('a[id$=' + this.config['tab_id'] + ']')[0];\r\n\r\n                if ($(tab) != undefined && $(tab).hasClassName('tab-item-link')) { //eslint-disable-line eqeqeq\r\n                    $(tab).addClassName('changed');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Retrieve directives URL with substituted directive value.\r\n         *\r\n         * @param {String} directive\r\n         */\r\n        makeDirectiveUrl: function (directive) {\r\n            return this.config['directives_url']\r\n                .replace(/directive/, 'directive/___directive/' + directive)\r\n                .replace(/\\/$/, '');\r\n        },\r\n\r\n        /**\r\n         * Convert {{directive}} style attributes syntax to absolute URLs\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeDirectives: function (content) {\r\n            // collect all HTML tags with attributes that contain directives\r\n            return content.gsub(/<([a-z0-9\\-\\_]+[^>]+?)([a-z0-9\\-\\_]+=\"[^\"]*?\\{\\{.+?\\}\\}.*?\".*?)>/i, function (match) {\r\n                var attributesString = match[2],\r\n                    decodedDirectiveString;\r\n\r\n                // process tag attributes string\r\n                attributesString = attributesString.gsub(/([a-z0-9\\-\\_]+)=\"(.*?)(\\{\\{.+?\\}\\})(.*?)\"/i, function (m) {\r\n                    decodedDirectiveString = encodeURIComponent(Base64.mageEncode(m[3].replace(/&quot;/g, '\"')));\r\n\r\n                    return m[1] + '=\"' + m[2] + this.makeDirectiveUrl(decodedDirectiveString) + m[4] + '\"';\r\n                }.bind(this));\r\n\r\n                return '<' + match[1] + attributesString + '>';\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeWidgets: function (content) {\r\n            return content.gsub(/\\{\\{widget(.*?)\\}\\}/i, function (match) {\r\n                var attributes = this.parseAttributesString(match[1]),\r\n                    imageSrc,\r\n                    imageHtml;\r\n\r\n                if (attributes.type) {\r\n                    attributes.type = attributes.type.replace(/\\\\\\\\/g, '\\\\');\r\n                    imageSrc = this.config['widget_placeholders'][attributes.type];\r\n\r\n                    imageHtml = '<img';\r\n                    imageHtml += ' id=\"' + Base64.idEncode(match[0]) + '\"';\r\n                    imageHtml += ' src=\"' + imageSrc + '\"';\r\n                    imageHtml += ' title=\"' +\r\n                        match[0].replace(/\\{\\{/g, '{').replace(/\\}\\}/g, '}').replace(/\\\"/g, '&quot;') + '\"';\r\n                    imageHtml += '>';\r\n\r\n                    return imageHtml;\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Convert absolute URLs to {{directive}} style attributes syntax\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeDirectives: function (content) {\r\n            var directiveUrl = this.makeDirectiveUrl('%directive%').split('?')[0], // remove query string from directive\r\n                // escape special chars in directives url to use in regular expression\r\n                regexEscapedDirectiveUrl = directiveUrl.replace(/([$^.?*!+:=()\\[\\]{}|\\\\])/g, '\\\\$1'),\r\n                regexDirectiveUrl = regexEscapedDirectiveUrl\r\n                    .replace(\r\n                        '%directive%',\r\n                        '([a-zA-Z0-9,_-]+(?:%2[A-Z]|)+\\/?)(?:(?!\").)*'\r\n                    ) + '/?(\\\\\\\\?[^\"]*)?', // allow optional query string\r\n                reg = new RegExp(regexDirectiveUrl);\r\n\r\n            return content.gsub(reg, function (match) {\r\n                return Base64.mageDecode(decodeURIComponent(match[1]).replace(/\\/$/, '')).replace(/\"/g, '&quot;');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeWidgets: function (content) {\r\n            return content.gsub(/<img([^>]+id=\\\"[^>]+)>/i, function (match) {\r\n                var attributes = this.parseAttributesString(match[1]),\r\n                    widgetCode;\r\n\r\n                if (attributes.id) {\r\n                    widgetCode = Base64.idDecode(attributes.id);\r\n\r\n                    if (widgetCode.indexOf('{{widget') !== -1) {\r\n                        return widgetCode;\r\n                    }\r\n                }\r\n\r\n                return match[0];\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attributes\r\n         * @return {Object}\r\n         */\r\n        parseAttributesString: function (attributes) {\r\n            var result = {};\r\n\r\n            attributes.gsub(\r\n                /(\\w+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/,\r\n                function (match) {\r\n                    result[match[1]] = match[2];\r\n                }\r\n            );\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Update text area.\r\n         */\r\n        updateTextArea: function () {\r\n            var editor = tinyMCE3.get(this.getId()),\r\n                content;\r\n\r\n            if (!editor) {\r\n                return;\r\n            }\r\n\r\n            content = editor.getContent();\r\n            content = this.decodeContent(content);\r\n\r\n            this.getTextArea().val(content).trigger('change');\r\n        },\r\n\r\n        /**\r\n         * @return {Object} jQuery textarea element\r\n         */\r\n        getTextArea: function () {\r\n            return jQuery('#' + this.getId());\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        decodeContent: function (content) {\r\n            var result = content;\r\n\r\n            if (this.config['add_widgets']) {\r\n                result = this.decodeWidgets(result);\r\n                result = this.decodeDirectives(result);\r\n            } else if (this.config['add_directives']) {\r\n                result = this.decodeDirectives(result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} content\r\n         * @return {*}\r\n         */\r\n        encodeContent: function (content) {\r\n            var result = content;\r\n\r\n            if (this.config['add_widgets']) {\r\n                result = this.encodeWidgets(this.decodeWidgets(result));\r\n                result = this.encodeDirectives(result);\r\n            } else if (this.config['add_directives']) {\r\n                result = this.encodeDirectives(result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        beforeSetContent: function (o) {\r\n            o.content = this.encodeContent(o.content);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} o\r\n         */\r\n        saveContent: function (o) {\r\n            o.content = this.decodeContent(o.content);\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getAdapterPrototype: function () {\r\n            return tinyMce3Wysiwyg;\r\n        }\r\n    };\r\n\r\n    return tinyMce3Wysiwyg.prototype;\r\n});\r\n","Magento_Tinymce3/wysiwyg/tiny_mce/plugins/magentovariable/editor_plugin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated use lib/web/mage/adminhtml/wysiwyg/tiny_mce/plugins/magentovariable/editor_plugin.js instead\r\n */\r\n/* global tinyMCE, tinymce, MagentovariablePlugin */\r\n/* eslint-disable strict */\r\ntinyMCE.addI18n({\r\n    en: {\r\n        magentovariable: {\r\n            'insert_variable': 'Insert Variable'\r\n        }\r\n    }\r\n});\r\n\r\n(function () {\r\n    tinymce.create('tinymce.plugins.MagentovariablePlugin', {\r\n        /**\r\n         * @param {tinymce.Editor} ed - Editor instance that the plugin is initialized in.\r\n         * @param {String} url - Absolute URL to where the plugin is located.\r\n         */\r\n        init: function (ed, url) {\r\n            ed.addCommand('mceMagentovariable', function () {\r\n                var pluginSettings = ed.settings.magentoPluginsOptions.get('magentovariable');\r\n\r\n                MagentovariablePlugin.setEditor(ed);\r\n                MagentovariablePlugin.loadChooser(pluginSettings.url, ed.settings.elements);\r\n            });\r\n\r\n            // Register Widget plugin button\r\n            ed.addButton('magentovariable', {\r\n                title: 'magentovariable.insert_variable',\r\n                cmd: 'mceMagentovariable',\r\n                image: url + '/img/icon.gif'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        getInfo: function () {\r\n            return {\r\n                longname: 'Magento Variable Manager Plugin for TinyMCE 3.x',\r\n                author: 'Magento Core Team',\r\n                authorurl: 'http://magentocommerce.com',\r\n                infourl: 'http://magentocommerce.com',\r\n                version: '1.0'\r\n            };\r\n        }\r\n    });\r\n\r\n    // Register plugin\r\n    tinymce.PluginManager.add('magentovariable', tinymce.plugins.MagentovariablePlugin);\r\n})();\r\n","Magento_Translation/js/i18n-config.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    require.config({\r\n        config: {\r\n            'Magento_Ui/js/lib/knockout/bindings/i18n': {\r\n                inlineTranslation: true\r\n            }\r\n        }\r\n    });\r\n})();\r\n","Magento_Translation/js/mage-translation-dictionary.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'text!js-translation.json'\r\n], function (dict) {\r\n    'use strict';\r\n\r\n    return JSON.parse(dict);\r\n});\r\n","Magento_Ui/js/block-loader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Ui/js/lib/knockout/template/loader',\r\n    'mage/template'\r\n], function (ko, $, templateLoader, template) {\r\n    'use strict';\r\n\r\n    var blockLoaderTemplatePath = 'ui/block-loader',\r\n        blockContentLoadingClass = '_block-content-loading',\r\n        blockLoader,\r\n        blockLoaderClass,\r\n        loaderImageHref;\r\n\r\n    templateLoader.loadTemplate(blockLoaderTemplatePath).done(function (blockLoaderTemplate) {\r\n        blockLoader = template($.trim(blockLoaderTemplate), {\r\n            loaderImageHref: loaderImageHref\r\n        });\r\n        blockLoader = $(blockLoader);\r\n        blockLoaderClass = '.' + blockLoader.attr('class');\r\n    });\r\n\r\n    /**\r\n     * Helper function to check if blockContentLoading class should be applied.\r\n     * @param {Object} element\r\n     * @returns {Boolean}\r\n     */\r\n    function isLoadingClassRequired(element) {\r\n        var position = element.css('position');\r\n\r\n        if (position === 'absolute' || position === 'fixed') {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Add loader to block.\r\n     * @param {Object} element\r\n     */\r\n    function addBlockLoader(element) {\r\n        element.find(':focus').blur();\r\n        element.find('input:disabled, select:disabled').addClass('_disabled');\r\n        element.find('input, select').prop('disabled', true);\r\n\r\n        if (isLoadingClassRequired(element)) {\r\n            element.addClass(blockContentLoadingClass);\r\n        }\r\n        element.append(blockLoader.clone());\r\n    }\r\n\r\n    /**\r\n     * Remove loader from block.\r\n     * @param {Object} element\r\n     */\r\n    function removeBlockLoader(element) {\r\n        if (!element.has(blockLoaderClass).length) {\r\n            return;\r\n        }\r\n        element.find(blockLoaderClass).remove();\r\n        element.find('input:not(\"._disabled\"), select:not(\"._disabled\")').prop('disabled', false);\r\n        element.find('input:disabled, select:disabled').removeClass('_disabled');\r\n        element.removeClass(blockContentLoadingClass);\r\n    }\r\n\r\n    return function (loaderHref) {\r\n        loaderImageHref = loaderHref;\r\n        ko.bindingHandlers.blockLoader = {\r\n            /**\r\n             * Process loader for block\r\n             * @param {String} element\r\n             * @param {Boolean} displayBlockLoader\r\n             */\r\n            update: function (element, displayBlockLoader) {\r\n                element = $(element);\r\n\r\n                if (ko.unwrap(displayBlockLoader())) {\r\n                    addBlockLoader(element);\r\n                } else {\r\n                    removeBlockLoader(element);\r\n                }\r\n            }\r\n        };\r\n    };\r\n});\r\n","Magento_Ui/js/core/app.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    './renderer/types',\r\n    './renderer/layout',\r\n    '../lib/knockout/bootstrap'\r\n], function (types, layout) {\r\n    'use strict';\r\n\r\n    return function (data, merge) {\r\n        types.set(data.types);\r\n        layout(data.components, undefined, true, merge);\r\n    };\r\n});\r\n","Magento_Ui/js/core/renderer/layout.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    './types',\r\n    '../../lib/logger/console-logger'\r\n], function (_, $, utils, registry, types, consoleLogger) {\r\n    'use strict';\r\n\r\n    var templates = registry.create(),\r\n        layout = {},\r\n        cachedConfig = {};\r\n\r\n    /**\r\n     * Build name from parent name and node name\r\n     *\r\n     * @param {Object} parent\r\n     * @param {Object} node\r\n     * @param {String} [name]\r\n     * @returns {String}\r\n     */\r\n    function getNodeName(parent, node, name) {\r\n        var parentName = parent && parent.name;\r\n\r\n        if (typeof name !== 'string') {\r\n            name = node.name || name;\r\n        }\r\n\r\n        return utils.fullPath(parentName, name);\r\n    }\r\n\r\n    /**\r\n     * Get node type from node or parent.\r\n     *\r\n     * @param {Object} parent\r\n     * @param {Object} node\r\n     * @returns {String}\r\n     */\r\n    function getNodeType(parent, node) {\r\n        return node.type || parent && parent.childType;\r\n    }\r\n\r\n    /**\r\n     * Get data scope based on parent data scope and node data scope.\r\n     *\r\n     * @param {Object} parent\r\n     * @param {Object} node\r\n     * @returns {String}\r\n     */\r\n    function getDataScope(parent, node) {\r\n        var dataScope = node.dataScope,\r\n            parentScope = parent && parent.dataScope;\r\n\r\n        return !utils.isEmpty(parentScope) ?\r\n            !utils.isEmpty(dataScope) ?\r\n                parentScope + '.' + dataScope :\r\n                parentScope :\r\n            dataScope || '';\r\n    }\r\n\r\n    /**\r\n     * Load node dependencies on other instances.\r\n     *\r\n     * @param {Object} node\r\n     * @returns {jQueryPromise}\r\n     */\r\n    function loadDeps(node) {\r\n        var loaded = $.Deferred(),\r\n            loggerUtils = consoleLogger.utils;\r\n\r\n        if (node.deps) {\r\n            consoleLogger.utils.asyncLog(\r\n                loaded,\r\n                {\r\n                    data: {\r\n                        component: node.name,\r\n                        deps: node.deps\r\n                    },\r\n                    messages: loggerUtils.createMessages(\r\n                        'depsStartRequesting',\r\n                        'depsFinishRequesting',\r\n                        'depsLoadingFail'\r\n                    )\r\n                }\r\n            );\r\n        }\r\n\r\n        registry.get(node.deps, function (deps) {\r\n            node.provider = node.extendProvider ? deps && deps.name : node.provider;\r\n            loaded.resolve(node);\r\n        });\r\n\r\n        return loaded.promise();\r\n    }\r\n\r\n    /**\r\n     * Load node component file via requirejs.\r\n     *\r\n     * @param {Object} node\r\n     * @returns {jQueryPromise}\r\n     */\r\n    function loadSource(node) {\r\n        var loaded = $.Deferred(),\r\n            source = node.component;\r\n\r\n        consoleLogger.info('componentStartLoading', {\r\n            component: node.component\r\n        });\r\n\r\n        require([source], function (constr) {\r\n            consoleLogger.info('componentFinishLoading', {\r\n                component: node.component\r\n            });\r\n            loaded.resolve(node, constr);\r\n        }, function () {\r\n            consoleLogger.error('componentLoadingFail', {\r\n                component: node.component\r\n            });\r\n        });\r\n\r\n        return loaded.promise();\r\n    }\r\n\r\n    /**\r\n     * Create a new component instance and set it to the registry.\r\n     *\r\n     * @param {Object} node\r\n     * @param {Function} Constr\r\n     */\r\n    function initComponent(node, Constr) {\r\n        var component = new Constr(_.omit(node, 'children'));\r\n\r\n        consoleLogger.info('componentStartInitialization', {\r\n            component: node.component,\r\n            componentName: node.name\r\n        });\r\n\r\n        registry.set(node.name, component);\r\n    }\r\n\r\n    /**\r\n     * Application entry point.\r\n     *\r\n     * @param {Object} nodes\r\n     * @param {Object} parent\r\n     * @param {Boolean} cached\r\n     * @param {Boolean} merge\r\n     * @returns {Boolean|undefined}\r\n     */\r\n    function run(nodes, parent, cached, merge) {\r\n        if (_.isBoolean(merge) && merge) {\r\n            layout.merge(nodes);\r\n\r\n            return false;\r\n        }\r\n\r\n        if (cached) {\r\n            cachedConfig[_.keys(nodes)[0]] = JSON.parse(JSON.stringify(nodes));\r\n        }\r\n\r\n        _.each(nodes || [], layout.iterator.bind(layout, parent));\r\n    }\r\n\r\n    _.extend(layout, {\r\n        /**\r\n         * Determines if node ready to be added or process it.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object|String} node\r\n         */\r\n        iterator: function (parent, node) {\r\n            var action = _.isString(node) ?\r\n                this.addChild :\r\n                this.process;\r\n\r\n            action.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Prepare component.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         * @returns {Object}\r\n         */\r\n        process: function (parent, node, name) {\r\n            if (!parent && node.parent) {\r\n                return this.waitParent(node, name);\r\n            }\r\n\r\n            if (node.nodeTemplate) {\r\n                return this.waitTemplate.apply(this, arguments);\r\n            }\r\n\r\n            node = this.build.apply(this, arguments);\r\n\r\n            if (!registry.has(node.name)) {\r\n                this.addChild(parent, node)\r\n                    .manipulate(node)\r\n                    .initComponent(node);\r\n            }\r\n\r\n            if (node) {\r\n                run(node.children, node);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Detailed processing of component config.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         * @returns {Boolean|Object}\r\n         */\r\n        build: function (parent, node, name) {\r\n            var defaults    = parent && parent.childDefaults || {},\r\n                children    = this.filterDisabledChildren(node.children),\r\n                type        = getNodeType(parent, node),\r\n                dataScope   = getDataScope(parent, node),\r\n                component,\r\n                extendDeps  = true,\r\n                nodeName;\r\n\r\n            node.children = false;\r\n            node.extendProvider = true;\r\n\r\n            if (node.config && node.config.provider || node.provider) {\r\n                node.extendProvider = false;\r\n            }\r\n\r\n            if (node.config && node.config.deps || node.deps) {\r\n                extendDeps = false;\r\n            }\r\n\r\n            node = utils.extend({\r\n            }, types.get(type), defaults, node);\r\n\r\n            nodeName = getNodeName(parent, node, name);\r\n\r\n            if (registry.has(nodeName)) {\r\n                component = registry.get(nodeName);\r\n                component.children = children;\r\n\r\n                return component;\r\n            }\r\n\r\n            if (extendDeps && parent && parent.deps && type) {\r\n                node.deps = parent.deps;\r\n            }\r\n\r\n            _.extend(node, node.config || {}, {\r\n                index: node.name || name,\r\n                name: nodeName,\r\n                dataScope: dataScope,\r\n                parentName: utils.getPart(nodeName, -2),\r\n                parentScope: utils.getPart(dataScope, -2)\r\n            });\r\n\r\n            node.children = children;\r\n            node.componentType = node.type;\r\n\r\n            delete node.type;\r\n            delete node.config;\r\n\r\n            if (children) {\r\n                node.initChildCount = _.size(children);\r\n            }\r\n\r\n            if (node.isTemplate) {\r\n                node.isTemplate = false;\r\n\r\n                templates.set(node.name, node);\r\n                registry.get(node.parentName, function (parentComp) {\r\n                    parentComp.childTemplate = node;\r\n                });\r\n\r\n                return false;\r\n            }\r\n\r\n            if (node.componentDisabled === true) {\r\n                return false;\r\n            }\r\n\r\n            return node;\r\n        },\r\n\r\n        /**\r\n         * Filter out all disabled components.\r\n         *\r\n         * @param {Object} children\r\n         * @returns {*}\r\n         */\r\n        filterDisabledChildren: function (children) {\r\n            var cIds;\r\n\r\n            //cleanup children config.componentDisabled = true\r\n            if (children && typeof children === 'object') {\r\n                cIds = Object.keys(children);\r\n\r\n                if (cIds) {\r\n                    _.each(cIds, function (cId) {\r\n                        if (typeof children[cId] === 'object' &&\r\n                            children[cId].hasOwnProperty('config') &&\r\n                            typeof children[cId].config === 'object' &&\r\n                            children[cId].config.hasOwnProperty('componentDisabled') &&\r\n                            children[cId].config.componentDisabled === true) {\r\n                            delete children[cId];\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            return children;\r\n        },\r\n\r\n        /**\r\n         * Init component.\r\n         *\r\n         * @param {Object} node\r\n         * @returns {Object}\r\n         */\r\n        initComponent: function (node) {\r\n            if (!node.component) {\r\n                return this;\r\n            }\r\n\r\n            loadDeps(node)\r\n                .then(loadSource)\r\n                .done(initComponent);\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    _.extend(layout, {\r\n        /**\r\n         * Loading component marked as isTemplate.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @returns {Object}\r\n         */\r\n        waitTemplate: function (parent, node) {\r\n            var args = _.toArray(arguments);\r\n\r\n            templates.get(node.nodeTemplate, function () {\r\n                this.applyTemplate.apply(this, args);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Waiting for parent component and process provided component.\r\n         *\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         * @returns {Object}\r\n         */\r\n        waitParent: function (node, name) {\r\n            var process = this.process.bind(this);\r\n\r\n            registry.get(node.parent, function (parent) {\r\n                process(parent, node, name);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processing component marked as isTemplate.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object} node\r\n         * @param {String} name\r\n         */\r\n        applyTemplate: function (parent, node, name) {\r\n            var template = templates.get(node.nodeTemplate);\r\n\r\n            node = utils.extend({}, template, node);\r\n\r\n            delete node.nodeTemplate;\r\n\r\n            this.process(parent, node, name);\r\n        }\r\n    });\r\n\r\n    _.extend(layout, {\r\n        /**\r\n         * Determines inserting strategy.\r\n         *\r\n         * @param {Object} node\r\n         * @returns {Object}\r\n         */\r\n        manipulate: function (node) {\r\n            var name = node.name;\r\n\r\n            if (node.appendTo) {\r\n                this.insert(name, node.appendTo, -1);\r\n            }\r\n\r\n            if (node.prependTo) {\r\n                this.insert(name, node.prependTo, 0);\r\n            }\r\n\r\n            if (node.insertTo) {\r\n                this.insertTo(name, node.insertTo);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Insert component to provide target and position.\r\n         *\r\n         * @param {Object|String} item\r\n         * @param {Object} target\r\n         * @param {Number} position\r\n         * @returns {Object}\r\n         */\r\n        insert: function (item, target, position) {\r\n            registry.get(target, function (container) {\r\n                container.insertChild(item, position);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Insert component into multiple targets.\r\n         *\r\n         * @param {Object} item\r\n         * @param {Array} targets\r\n         * @returns {Object}\r\n         */\r\n        insertTo: function (item, targets) {\r\n            _.each(targets, function (info, target) {\r\n                this.insert(item, target, info.position);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add provided child to parent.\r\n         *\r\n         * @param {Object} parent\r\n         * @param {Object|String} child\r\n         * @returns {Object}\r\n         */\r\n        addChild: function (parent, child) {\r\n            var name;\r\n\r\n            if (parent && parent.component) {\r\n                name = child.name || child;\r\n\r\n                this.insert(name, parent.name, child.sortOrder);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Merge components configuration with cached configuration.\r\n         *\r\n         * @param {Array} components\r\n         */\r\n        merge: function (components) {\r\n            var cachedKey = _.keys(components)[0],\r\n                compared = utils.compare(cachedConfig[cachedKey], components),\r\n                remove = this.filterComponents(this.getByProperty(compared.changes, 'type', 'remove'), true),\r\n                update = this.getByProperty(compared.changes, 'type', 'update'),\r\n                dataSources = this.getDataSources(components),\r\n                names, index, name, component;\r\n\r\n            _.each(dataSources, function (val, key) {\r\n                name = key.replace(/\\.children|\\.config/g, '');\r\n                component = registry.get(name);\r\n\r\n                component.cacheData();\r\n                component.updateConfig(\r\n                    true,\r\n                    this.getFullConfig(key, components),\r\n                    this.getFullConfig(key, cachedConfig[cachedKey])\r\n                );\r\n            }, this);\r\n\r\n            _.each(remove, function (val) {\r\n                component = registry.get(val.path);\r\n\r\n                if (component) {\r\n                    component.cleanData().destroy();\r\n                }\r\n            });\r\n\r\n            update = _.compact(_.filter(update, function (val) {\r\n                return !_.isEqual(val.oldValue, val.value);\r\n            }));\r\n\r\n            _.each(update, function (val) {\r\n                names = val.path.split('.');\r\n                index = Math.max(_.lastIndexOf(names, 'config'), _.lastIndexOf(names, 'children') + 2);\r\n                name = _.without(names.splice(0, index), 'children', 'config').join('.');\r\n                component = registry.get(name);\r\n\r\n                if (val.name === 'sortOrder' && component) {\r\n                    registry.get(component.parentName).insertChild(component, val.value);\r\n                } else if (component) {\r\n                    component.updateConfig(\r\n                        val.oldValue,\r\n                        val.value,\r\n                        val.path\r\n                    );\r\n                }\r\n            }, this);\r\n\r\n            run(components, undefined, true);\r\n        },\r\n\r\n        /**\r\n         * Recursive dataSource assignment.\r\n         *\r\n         * @param {Object} config\r\n         * @param {String} parentPath\r\n         * @returns {Object}\r\n         */\r\n        getDataSources: function (config, parentPath) {\r\n            var dataSources = {},\r\n                key, obj;\r\n\r\n            /* eslint-disable no-loop-func, max-depth */\r\n            for (key in config) {\r\n                if (config.hasOwnProperty(key)) {\r\n                    if (\r\n                        key === 'type' &&\r\n                        config[key] === 'dataSource' &&\r\n                        config.hasOwnProperty('config')\r\n                    ) {\r\n                        dataSources[parentPath + '.config'] = config.config;\r\n                    } else if (_.isObject(config[key])) {\r\n                        obj = this.getDataSources(config[key], utils.fullPath(parentPath, key));\r\n\r\n                        _.each(obj, function (value, path) {\r\n                            dataSources[path] = value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* eslint-enable no-loop-func, max-depth */\r\n\r\n            return dataSources;\r\n        },\r\n\r\n        /**\r\n         * Configuration getter.\r\n         *\r\n         * @param {String} path\r\n         * @param {Object} config\r\n         * @returns {Boolean|Object}\r\n         */\r\n        getFullConfig: function (path, config) {\r\n            var index;\r\n\r\n            path = path.split('.');\r\n            index = _.lastIndexOf(path, 'config');\r\n\r\n            if (!~index) {\r\n                return false;\r\n            }\r\n            path = path.splice(0, index);\r\n\r\n            _.each(path, function (val) {\r\n                config = config[val];\r\n            });\r\n\r\n            return config.config;\r\n        },\r\n\r\n        /**\r\n         * Filter data by property and value.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} prop\r\n         * @param {*} propValue\r\n         */\r\n        getByProperty: function (data, prop, propValue) {\r\n            return _.filter(data, function (value) {\r\n                return value[prop] === propValue;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Filter components.\r\n         *\r\n         * @param {Array} data\r\n         * @param {Boolean} splitPath\r\n         * @param {Number} index\r\n         * @param {String} separator\r\n         * @param {String} keyName\r\n         * @returns {Array}\r\n         */\r\n        filterComponents: function (data, splitPath, index, separator, keyName) {\r\n            var result = [],\r\n                names, length;\r\n\r\n            index = -2;\r\n            separator = '.' || separator;\r\n            keyName = 'children' || keyName;\r\n\r\n            _.each(data, function (val) {\r\n                names = val.path.split(separator);\r\n                length  = names.length;\r\n\r\n                if (names[length + index] === keyName) {\r\n                    val.path = splitPath ? _.without(names, keyName).join(separator) : val.path;\r\n                    result.push(val);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return run;\r\n});\r\n","Magento_Ui/js/core/renderer/types.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    var store = {};\r\n\r\n    /**\r\n     * Flatten a nested data.\r\n     *\r\n     * @param {Object} data\r\n     * @returns {Object}\r\n     */\r\n    function flatten(data) {\r\n        var extender = data.extends || [],\r\n            result = {};\r\n\r\n        extender = utils.stringToArray(extender);\r\n\r\n        extender.push(data);\r\n\r\n        extender.forEach(function (item) {\r\n            if (_.isString(item)) {\r\n                item = store[item] || {};\r\n            }\r\n\r\n            utils.extend(result, item);\r\n        });\r\n\r\n        delete result.extends;\r\n\r\n        return result;\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Set types to store object.\r\n         *\r\n         * @param {Object} types\r\n         */\r\n        set: function (types) {\r\n            types = types || {};\r\n\r\n            utils.extend(store, types);\r\n\r\n            _.each(types, function (data, type) {\r\n                store[type] = flatten(data);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get type from store object.\r\n         *\r\n         * @param {String} type\r\n         * @returns {*|{}}\r\n         */\r\n        get: function (type) {\r\n            return store[type] || {};\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/dynamic-rows/action-delete.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            links: {\r\n                value: false\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Delete record handler.\r\n         *\r\n         * @param {Number} index\r\n         * @param {Number} id\r\n         */\r\n        deleteRecord: function (index, id) {\r\n            this.bubble('deleteRecord', index, id);\r\n        }\r\n    });\r\n});\r\n"}
}});
